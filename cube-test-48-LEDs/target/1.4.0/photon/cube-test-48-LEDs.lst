
/Users/matthewmccord/Workspace/photon_iot/seattle-indies-photon-cube-jam-2019/cube-test-48-LEDs/target/1.4.0/photon/cube-test-48-LEDs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002b64  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2b80  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080a2b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001ac  20000070  20000070  00030070  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2bf4  080a2bf4  00022bf4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2c1c  080a2c1c  00022c1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d056e  00000000  00000000  00022c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012f01  00000000  00000000  000f318e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001677a  00000000  00000000  0010608f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001f90  00000000  00000000  0011c809  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003018  00000000  00000000  0011e799  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002c559  00000000  00000000  001217b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002e0bd  00000000  00000000  0014dd0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aa40e  00000000  00000000  0017bdc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b904  00000000  00000000  002261d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fbc9 	bl	80a27c4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fbce 	bl	80a27da <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2b84 	.word	0x080a2b84
 80a004c:	20000070 	.word	0x20000070
 80a0050:	20000070 	.word	0x20000070
 80a0054:	2000021c 	.word	0x2000021c
 80a0058:	2000021c 	.word	0x2000021c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f97f 	bl	80a2360 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2b2c 	.word	0x080a2b2c
 80a0084:	080a2b7c 	.word	0x080a2b7c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b846 	b.w	80a0118 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f84b 	bl	80a0128 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 b925 	b.w	80a22e4 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 bd3b 	b.w	80a1b14 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 bd41 	b.w	80a1b24 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z10touchSetupv>:
// Keeps track of the last pins touched
// so we know when buttons are 'released'
uint16_t lasttouched = 0;
uint16_t currtouched = 0;

void touchSetup() {
 80a00b4:	b510      	push	{r4, lr}
  // Default address is 0x5A, if tied to 3.3V its 0x5B
  // If tied to SDA its 0x5C and if SCL then 0x5D
  if (!cap.begin(0x5A)) {
 80a00b6:	215a      	movs	r1, #90	; 0x5a
 80a00b8:	480b      	ldr	r0, [pc, #44]	; (80a00e8 <_Z10touchSetupv+0x34>)
 80a00ba:	f000 f964 	bl	80a0386 <_ZN15Adafruit_MPR1215beginEh>
 80a00be:	b958      	cbnz	r0, 80a00d8 <_Z10touchSetupv+0x24>
    Serial.println("MPR121 not found, check wiring?");
 80a00c0:	f002 f82a 	bl	80a2118 <_Z16_fetch_usbserialv>
 80a00c4:	4909      	ldr	r1, [pc, #36]	; (80a00ec <_Z10touchSetupv+0x38>)
 80a00c6:	f001 feac 	bl	80a1e22 <_ZN5Print7printlnEPKc>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00ca:	4c09      	ldr	r4, [pc, #36]	; (80a00f0 <_Z10touchSetupv+0x3c>)
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a00cc:	f001 fb94 	bl	80a17f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00d0:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a00d2:	f001 fcbf 	bl	80a1a54 <spark_process>
 80a00d6:	e7f9      	b.n	80a00cc <_Z10touchSetupv+0x18>
      #endif
    }

  }

  Serial.println("MPR121 found!");
 80a00d8:	f002 f81e 	bl	80a2118 <_Z16_fetch_usbserialv>
}
 80a00dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      #endif
    }

  }

  Serial.println("MPR121 found!");
 80a00e0:	4904      	ldr	r1, [pc, #16]	; (80a00f4 <_Z10touchSetupv+0x40>)
 80a00e2:	f001 be9e 	b.w	80a1e22 <_ZN5Print7printlnEPKc>
 80a00e6:	bf00      	nop
 80a00e8:	20000092 	.word	0x20000092
 80a00ec:	080a2860 	.word	0x080a2860
 80a00f0:	20000128 	.word	0x20000128
 80a00f4:	080a2880 	.word	0x080a2880

080a00f8 <_Z13neoPixelSetupv>:
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

void neoPixelSetup() {
 80a00f8:	b510      	push	{r4, lr}
  strip.setBrightness(BRIGHTNESS);
 80a00fa:	4c06      	ldr	r4, [pc, #24]	; (80a0114 <_Z13neoPixelSetupv+0x1c>)
 80a00fc:	21ff      	movs	r1, #255	; 0xff
 80a00fe:	4620      	mov	r0, r4
 80a0100:	f001 fb32 	bl	80a1768 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  strip.begin();
 80a0104:	4620      	mov	r0, r4
 80a0106:	f000 f9ef 	bl	80a04e8 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
 80a010a:	4620      	mov	r0, r4
}
 80a010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

void neoPixelSetup() {
  strip.setBrightness(BRIGHTNESS);
  strip.begin();
  strip.show();
 80a0110:	f000 ba20 	b.w	80a0554 <_ZN17Adafruit_NeoPixel4showEv>
 80a0114:	20000078 	.word	0x20000078

080a0118 <setup>:
void buzzerSetup() {
  pinMode(BUZZER_PIN, OUTPUT);
}
#endif

void setup() {
 80a0118:	b508      	push	{r3, lr}
  #ifdef TEST_DISPLAY
  displaySetup();
  #endif

  #ifdef TEST_TOUCH
  touchSetup();
 80a011a:	f7ff ffcb 	bl	80a00b4 <_Z10touchSetupv>
  #endif

  #ifdef TEST_BUZZER
  buzzerSetup();
  #endif
}
 80a011e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  #ifdef TEST_TOUCH
  touchSetup();
  #endif

  #ifdef TEST_NEOPIXEL
  neoPixelSetup();
 80a0122:	f7ff bfe9 	b.w	80a00f8 <_Z13neoPixelSetupv>
	...

080a0128 <loop>:

bool goingUp = true;
int value = 0;
int rate = 2;

void loop() {
 80a0128:	b570      	push	{r4, r5, r6, lr}

  #ifdef TEST_TOUCH
  // cap.setThresholds(touch_threshold, release_threshold);
  // Get the currently touched pads
  currtouched = cap.touched();
 80a012a:	4838      	ldr	r0, [pc, #224]	; (80a020c <loop+0xe4>)
 80a012c:	f000 f8f3 	bl	80a0316 <_ZN15Adafruit_MPR1217touchedEv>
  #endif

  if (goingUp) {
 80a0130:	4a37      	ldr	r2, [pc, #220]	; (80a0210 <loop+0xe8>)
void loop() {

  #ifdef TEST_TOUCH
  // cap.setThresholds(touch_threshold, release_threshold);
  // Get the currently touched pads
  currtouched = cap.touched();
 80a0132:	4b38      	ldr	r3, [pc, #224]	; (80a0214 <loop+0xec>)
  #endif

  if (goingUp) {
 80a0134:	7811      	ldrb	r1, [r2, #0]
void loop() {

  #ifdef TEST_TOUCH
  // cap.setThresholds(touch_threshold, release_threshold);
  // Get the currently touched pads
  currtouched = cap.touched();
 80a0136:	8018      	strh	r0, [r3, #0]
 80a0138:	4c37      	ldr	r4, [pc, #220]	; (80a0218 <loop+0xf0>)
 80a013a:	4838      	ldr	r0, [pc, #224]	; (80a021c <loop+0xf4>)
  #endif

  if (goingUp) {
 80a013c:	b149      	cbz	r1, 80a0152 <loop+0x2a>
    value += rate;
 80a013e:	6821      	ldr	r1, [r4, #0]
 80a0140:	6803      	ldr	r3, [r0, #0]
 80a0142:	440b      	add	r3, r1
    if (value > 255) {
 80a0144:	2bff      	cmp	r3, #255	; 0xff
 80a0146:	dd08      	ble.n	80a015a <loop+0x32>
      value = 255;
 80a0148:	23ff      	movs	r3, #255	; 0xff
 80a014a:	6023      	str	r3, [r4, #0]
      goingUp = false;
 80a014c:	2300      	movs	r3, #0
 80a014e:	7013      	strb	r3, [r2, #0]
 80a0150:	e008      	b.n	80a0164 <loop+0x3c>
    }
  } else {
    value -= rate;
 80a0152:	6823      	ldr	r3, [r4, #0]
 80a0154:	6800      	ldr	r0, [r0, #0]
    if (value < 0) {
 80a0156:	1a1b      	subs	r3, r3, r0
 80a0158:	d401      	bmi.n	80a015e <loop+0x36>
    if (value > 255) {
      value = 255;
      goingUp = false;
    }
  } else {
    value -= rate;
 80a015a:	6023      	str	r3, [r4, #0]
 80a015c:	e002      	b.n	80a0164 <loop+0x3c>
    if (value < 0) {
      value = 0;
      goingUp = true;
 80a015e:	2301      	movs	r3, #1
      goingUp = false;
    }
  } else {
    value -= rate;
    if (value < 0) {
      value = 0;
 80a0160:	6021      	str	r1, [r4, #0]
      goingUp = true;
 80a0162:	7013      	strb	r3, [r2, #0]
  // noTone(TX);
  #endif

  #ifdef TEST_NEOPIXEL

  strip.setPixelColor(0, strip.Color(value, 00000, 00000));
 80a0164:	2200      	movs	r2, #0
 80a0166:	4611      	mov	r1, r2
 80a0168:	7820      	ldrb	r0, [r4, #0]
 80a016a:	f001 faf8 	bl	80a175e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a016e:	2100      	movs	r1, #0
 80a0170:	4602      	mov	r2, r0
 80a0172:	482b      	ldr	r0, [pc, #172]	; (80a0220 <loop+0xf8>)
 80a0174:	f001 faa8 	bl	80a16c8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  strip.setPixelColor(1, strip.Color(00000, value, 00000));
 80a0178:	2200      	movs	r2, #0
 80a017a:	7821      	ldrb	r1, [r4, #0]
 80a017c:	4610      	mov	r0, r2
 80a017e:	f001 faee 	bl	80a175e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0182:	2101      	movs	r1, #1
 80a0184:	4602      	mov	r2, r0
 80a0186:	4826      	ldr	r0, [pc, #152]	; (80a0220 <loop+0xf8>)
 80a0188:	f001 fa9e 	bl	80a16c8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  strip.setPixelColor(2, strip.Color(00000, 00000, value));
 80a018c:	2100      	movs	r1, #0
 80a018e:	7822      	ldrb	r2, [r4, #0]
 80a0190:	4608      	mov	r0, r1
 80a0192:	f001 fae4 	bl	80a175e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0196:	2102      	movs	r1, #2
 80a0198:	4602      	mov	r2, r0
 80a019a:	4821      	ldr	r0, [pc, #132]	; (80a0220 <loop+0xf8>)
 80a019c:	f001 fa94 	bl	80a16c8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  for (int i = 3; i < PIXEL_COUNT - 3; i++)
 80a01a0:	2503      	movs	r5, #3
    strip.setPixelColor(i, strip.Color(value, value, value));
 80a01a2:	7822      	ldrb	r2, [r4, #0]
 80a01a4:	4e1c      	ldr	r6, [pc, #112]	; (80a0218 <loop+0xf0>)
 80a01a6:	4611      	mov	r1, r2
 80a01a8:	4610      	mov	r0, r2
 80a01aa:	f001 fad8 	bl	80a175e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a01ae:	b2a9      	uxth	r1, r5
 80a01b0:	4602      	mov	r2, r0
  #ifdef TEST_NEOPIXEL

  strip.setPixelColor(0, strip.Color(value, 00000, 00000));
  strip.setPixelColor(1, strip.Color(00000, value, 00000));
  strip.setPixelColor(2, strip.Color(00000, 00000, value));
  for (int i = 3; i < PIXEL_COUNT - 3; i++)
 80a01b2:	3501      	adds	r5, #1
    strip.setPixelColor(i, strip.Color(value, value, value));
 80a01b4:	481a      	ldr	r0, [pc, #104]	; (80a0220 <loop+0xf8>)
 80a01b6:	f001 fa87 	bl	80a16c8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  #ifdef TEST_NEOPIXEL

  strip.setPixelColor(0, strip.Color(value, 00000, 00000));
  strip.setPixelColor(1, strip.Color(00000, value, 00000));
  strip.setPixelColor(2, strip.Color(00000, 00000, value));
  for (int i = 3; i < PIXEL_COUNT - 3; i++)
 80a01ba:	2d2d      	cmp	r5, #45	; 0x2d
 80a01bc:	d1f1      	bne.n	80a01a2 <loop+0x7a>
    strip.setPixelColor(i, strip.Color(value, value, value));
  if (PIXEL_COUNT > 6) {

    strip.setPixelColor(PIXEL_COUNT - 1, strip.Color(value, 00000, 00000));
 80a01be:	2200      	movs	r2, #0
 80a01c0:	4611      	mov	r1, r2
 80a01c2:	7830      	ldrb	r0, [r6, #0]
 80a01c4:	f001 facb 	bl	80a175e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a01c8:	212f      	movs	r1, #47	; 0x2f
 80a01ca:	4602      	mov	r2, r0
 80a01cc:	4814      	ldr	r0, [pc, #80]	; (80a0220 <loop+0xf8>)
 80a01ce:	f001 fa7b 	bl	80a16c8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    strip.setPixelColor(PIXEL_COUNT - 2, strip.Color(00000, value, 00000));
 80a01d2:	2200      	movs	r2, #0
 80a01d4:	7831      	ldrb	r1, [r6, #0]
 80a01d6:	4610      	mov	r0, r2
 80a01d8:	f001 fac1 	bl	80a175e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a01dc:	212e      	movs	r1, #46	; 0x2e
 80a01de:	4602      	mov	r2, r0
 80a01e0:	480f      	ldr	r0, [pc, #60]	; (80a0220 <loop+0xf8>)
 80a01e2:	f001 fa71 	bl	80a16c8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    strip.setPixelColor(PIXEL_COUNT - 3, strip.Color(00000, 00000, value));
 80a01e6:	2100      	movs	r1, #0
 80a01e8:	7832      	ldrb	r2, [r6, #0]
 80a01ea:	4608      	mov	r0, r1
 80a01ec:	f001 fab7 	bl	80a175e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a01f0:	4629      	mov	r1, r5
 80a01f2:	4602      	mov	r2, r0
 80a01f4:	480a      	ldr	r0, [pc, #40]	; (80a0220 <loop+0xf8>)
 80a01f6:	f001 fa67 	bl	80a16c8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  }
  strip.show();
 80a01fa:	4809      	ldr	r0, [pc, #36]	; (80a0220 <loop+0xf8>)
 80a01fc:	f000 f9aa 	bl	80a0554 <_ZN17Adafruit_NeoPixel4showEv>
  #endif
  #endif

  // put a delay so it isn't overwhelming
  delay(50);
 80a0200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Serial.println();
  #endif
  #endif

  // put a delay so it isn't overwhelming
  delay(50);
 80a0204:	2032      	movs	r0, #50	; 0x32
 80a0206:	f001 bc95 	b.w	80a1b34 <delay>
 80a020a:	bf00      	nop
 80a020c:	20000092 	.word	0x20000092
 80a0210:	20000004 	.word	0x20000004
 80a0214:	20000094 	.word	0x20000094
 80a0218:	20000074 	.word	0x20000074
 80a021c:	20000000 	.word	0x20000000
 80a0220:	20000078 	.word	0x20000078

080a0224 <_GLOBAL__sub_I_SystemMode>:
 80a0224:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0226:	f001 faef 	bl	80a1808 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a022a:	4b0d      	ldr	r3, [pc, #52]	; (80a0260 <_GLOBAL__sub_I_SystemMode+0x3c>)
 80a022c:	2200      	movs	r2, #0
 80a022e:	701a      	strb	r2, [r3, #0]
 80a0230:	805a      	strh	r2, [r3, #2]
 80a0232:	f64f 72ff 	movw	r2, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0236:	2003      	movs	r0, #3
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0238:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a023a:	f001 fbe7 	bl	80a1a0c <set_system_mode>
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a023e:	4c09      	ldr	r4, [pc, #36]	; (80a0264 <_GLOBAL__sub_I_SystemMode+0x40>)

/**
 * Touch Board
 */
#ifdef TEST_TOUCH
Adafruit_MPR121 cap = Adafruit_MPR121();
 80a0240:	4809      	ldr	r0, [pc, #36]	; (80a0268 <_GLOBAL__sub_I_SystemMode+0x44>)
 80a0242:	f000 f817 	bl	80a0274 <_ZN15Adafruit_MPR121C1Ev>
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0246:	2302      	movs	r3, #2
 80a0248:	461a      	mov	r2, r3
 80a024a:	2130      	movs	r1, #48	; 0x30
 80a024c:	4620      	mov	r0, r4
 80a024e:	f000 f970 	bl	80a0532 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0252:	4620      	mov	r0, r4
  #endif
  #endif

  // put a delay so it isn't overwhelming
  delay(50);
 80a0254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0258:	4a04      	ldr	r2, [pc, #16]	; (80a026c <_GLOBAL__sub_I_SystemMode+0x48>)
 80a025a:	4905      	ldr	r1, [pc, #20]	; (80a0270 <_GLOBAL__sub_I_SystemMode+0x4c>)
 80a025c:	f002 b954 	b.w	80a2508 <__aeabi_atexit>
 80a0260:	2000008c 	.word	0x2000008c
 80a0264:	20000078 	.word	0x20000078
 80a0268:	20000092 	.word	0x20000092
 80a026c:	20000070 	.word	0x20000070
 80a0270:	080a0495 	.word	0x080a0495

080a0274 <_ZN15Adafruit_MPR121C1Ev>:
 ****************************************************/

#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}
 80a0274:	4770      	bx	lr

080a0276 <_ZN15Adafruit_MPR12113readRegister8Eh>:
}

/*********************************************************************/


uint8_t Adafruit_MPR121::readRegister8(uint8_t reg) {
 80a0276:	b538      	push	{r3, r4, r5, lr}
 80a0278:	4604      	mov	r4, r0
 80a027a:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a027c:	f002 f8ea 	bl	80a2454 <_Z19__fetch_global_Wirev>
 80a0280:	f994 1000 	ldrsb.w	r1, [r4]
 80a0284:	f001 fcb8 	bl	80a1bf8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a0288:	f002 f8e4 	bl	80a2454 <_Z19__fetch_global_Wirev>
 80a028c:	6803      	ldr	r3, [r0, #0]
 80a028e:	4629      	mov	r1, r5
 80a0290:	689b      	ldr	r3, [r3, #8]
 80a0292:	4798      	blx	r3
    Wire.endTransmission(false);
 80a0294:	f002 f8de 	bl	80a2454 <_Z19__fetch_global_Wirev>
 80a0298:	2100      	movs	r1, #0
 80a029a:	f001 fcb0 	bl	80a1bfe <_ZN7TwoWire15endTransmissionEh>
    while (Wire.requestFrom(_i2caddr, 1) != 1);
 80a029e:	f002 f8d9 	bl	80a2454 <_Z19__fetch_global_Wirev>
 80a02a2:	2201      	movs	r2, #1
 80a02a4:	f994 1000 	ldrsb.w	r1, [r4]
 80a02a8:	f001 fc9d 	bl	80a1be6 <_ZN7TwoWire11requestFromEii>
 80a02ac:	2801      	cmp	r0, #1
 80a02ae:	d1f6      	bne.n	80a029e <_ZN15Adafruit_MPR12113readRegister8Eh+0x28>
    return ( Wire.read());
 80a02b0:	f002 f8d0 	bl	80a2454 <_Z19__fetch_global_Wirev>
 80a02b4:	6803      	ldr	r3, [r0, #0]
 80a02b6:	695b      	ldr	r3, [r3, #20]
 80a02b8:	4798      	blx	r3
}
 80a02ba:	b2c0      	uxtb	r0, r0
 80a02bc:	bd38      	pop	{r3, r4, r5, pc}

080a02be <_ZN15Adafruit_MPR12114readRegister16Eh>:

uint16_t Adafruit_MPR121::readRegister16(uint8_t reg) {
 80a02be:	b538      	push	{r3, r4, r5, lr}
 80a02c0:	4604      	mov	r4, r0
 80a02c2:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a02c4:	f002 f8c6 	bl	80a2454 <_Z19__fetch_global_Wirev>
 80a02c8:	f994 1000 	ldrsb.w	r1, [r4]
 80a02cc:	f001 fc94 	bl	80a1bf8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a02d0:	f002 f8c0 	bl	80a2454 <_Z19__fetch_global_Wirev>
 80a02d4:	6803      	ldr	r3, [r0, #0]
 80a02d6:	4629      	mov	r1, r5
 80a02d8:	689b      	ldr	r3, [r3, #8]
 80a02da:	4798      	blx	r3
    Wire.endTransmission(false);
 80a02dc:	f002 f8ba 	bl	80a2454 <_Z19__fetch_global_Wirev>
 80a02e0:	2100      	movs	r1, #0
 80a02e2:	f001 fc8c 	bl	80a1bfe <_ZN7TwoWire15endTransmissionEh>
    while (Wire.requestFrom(_i2caddr, 2) != 2);
 80a02e6:	f002 f8b5 	bl	80a2454 <_Z19__fetch_global_Wirev>
 80a02ea:	2202      	movs	r2, #2
 80a02ec:	f994 1000 	ldrsb.w	r1, [r4]
 80a02f0:	f001 fc79 	bl	80a1be6 <_ZN7TwoWire11requestFromEii>
 80a02f4:	2802      	cmp	r0, #2
 80a02f6:	d1f6      	bne.n	80a02e6 <_ZN15Adafruit_MPR12114readRegister16Eh+0x28>
    uint16_t v = Wire.read();
 80a02f8:	f002 f8ac 	bl	80a2454 <_Z19__fetch_global_Wirev>
 80a02fc:	6803      	ldr	r3, [r0, #0]
 80a02fe:	695b      	ldr	r3, [r3, #20]
 80a0300:	4798      	blx	r3
 80a0302:	4604      	mov	r4, r0
    v |=  ((uint16_t) Wire.read()) << 8;
 80a0304:	f002 f8a6 	bl	80a2454 <_Z19__fetch_global_Wirev>
 80a0308:	6803      	ldr	r3, [r0, #0]
 80a030a:	695b      	ldr	r3, [r3, #20]
 80a030c:	4798      	blx	r3
    return v;
 80a030e:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
 80a0312:	b280      	uxth	r0, r0
 80a0314:	bd38      	pop	{r3, r4, r5, pc}

080a0316 <_ZN15Adafruit_MPR1217touchedEv>:
  if (t > 12) return 0;
  uint16_t bl = readRegister8(MPR121_BASELINE_0 + t);
  return (bl << 2);
}

uint16_t  Adafruit_MPR121::touched(void) {
 80a0316:	b508      	push	{r3, lr}
  uint16_t t = readRegister16(MPR121_TOUCHSTATUS_L);
 80a0318:	2100      	movs	r1, #0
 80a031a:	f7ff ffd0 	bl	80a02be <_ZN15Adafruit_MPR12114readRegister16Eh>
  return t & 0x0FFF;
}
 80a031e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80a0322:	bd08      	pop	{r3, pc}

080a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>:
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
 80a0324:	b570      	push	{r4, r5, r6, lr}
 80a0326:	4606      	mov	r6, r0
 80a0328:	4614      	mov	r4, r2
 80a032a:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a032c:	f002 f892 	bl	80a2454 <_Z19__fetch_global_Wirev>
 80a0330:	f996 1000 	ldrsb.w	r1, [r6]
 80a0334:	f001 fc60 	bl	80a1bf8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 80a0338:	f002 f88c 	bl	80a2454 <_Z19__fetch_global_Wirev>
 80a033c:	6803      	ldr	r3, [r0, #0]
 80a033e:	4629      	mov	r1, r5
 80a0340:	689b      	ldr	r3, [r3, #8]
 80a0342:	4798      	blx	r3
    Wire.write((uint8_t)(value));
 80a0344:	f002 f886 	bl	80a2454 <_Z19__fetch_global_Wirev>
 80a0348:	6803      	ldr	r3, [r0, #0]
 80a034a:	4621      	mov	r1, r4
 80a034c:	689b      	ldr	r3, [r3, #8]
 80a034e:	4798      	blx	r3
    Wire.endTransmission();
 80a0350:	f002 f880 	bl	80a2454 <_Z19__fetch_global_Wirev>
}
 80a0354:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
    Wire.beginTransmission(_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)(value));
    Wire.endTransmission();
 80a0358:	f001 bc55 	b.w	80a1c06 <_ZN7TwoWire15endTransmissionEv>

080a035c <_ZN15Adafruit_MPR12113setThresholdsEhh>:
void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
 80a035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a035e:	4605      	mov	r5, r0
 80a0360:	460f      	mov	r7, r1
 80a0362:	4616      	mov	r6, r2
 80a0364:	2441      	movs	r4, #65	; 0x41
  for (uint8_t i=0; i<12; i++) {
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
 80a0366:	4621      	mov	r1, r4
 80a0368:	463a      	mov	r2, r7
 80a036a:	4628      	mov	r0, r5
 80a036c:	f7ff ffda 	bl	80a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
 80a0370:	1c61      	adds	r1, r4, #1
 80a0372:	3402      	adds	r4, #2
 80a0374:	4632      	mov	r2, r6
 80a0376:	b2c9      	uxtb	r1, r1
 80a0378:	4628      	mov	r0, r5
 80a037a:	b2e4      	uxtb	r4, r4
 80a037c:	f7ff ffd2 	bl	80a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
  for (uint8_t i=0; i<12; i++) {
 80a0380:	2c59      	cmp	r4, #89	; 0x59
 80a0382:	d1f0      	bne.n	80a0366 <_ZN15Adafruit_MPR12113setThresholdsEhh+0xa>
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
  }
}
 80a0384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0386 <_ZN15Adafruit_MPR1215beginEh>:
#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
 80a0386:	b538      	push	{r3, r4, r5, lr}
 80a0388:	4604      	mov	r4, r0
 80a038a:	460d      	mov	r5, r1
  Wire.begin();
 80a038c:	f002 f862 	bl	80a2454 <_Z19__fetch_global_Wirev>
 80a0390:	f001 fc1a 	bl	80a1bc8 <_ZN7TwoWire5beginEv>
    
  _i2caddr = i2caddr;

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a0394:	2263      	movs	r2, #99	; 0x63
 80a0396:	2180      	movs	r1, #128	; 0x80
 80a0398:	4620      	mov	r0, r4
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
  Wire.begin();
    
  _i2caddr = i2caddr;
 80a039a:	7025      	strb	r5, [r4, #0]

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a039c:	f7ff ffc2 	bl	80a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  delay(1);
 80a03a0:	2001      	movs	r0, #1
 80a03a2:	f001 fbc7 	bl	80a1b34 <delay>
  //  Serial.print("$"); Serial.print(i, HEX); 
  //  Serial.print(": 0x"); Serial.println(readRegister8(i));
  }
  

  writeRegister(MPR121_ECR, 0x0);
 80a03a6:	2200      	movs	r2, #0
 80a03a8:	215e      	movs	r1, #94	; 0x5e
 80a03aa:	4620      	mov	r0, r4
 80a03ac:	f7ff ffba 	bl	80a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  uint8_t c = readRegister8(MPR121_CONFIG2);
 80a03b0:	215d      	movs	r1, #93	; 0x5d
 80a03b2:	4620      	mov	r0, r4
 80a03b4:	f7ff ff5f 	bl	80a0276 <_ZN15Adafruit_MPR12113readRegister8Eh>
  
  if (c != 0x24) return false;
 80a03b8:	2824      	cmp	r0, #36	; 0x24
 80a03ba:	d151      	bne.n	80a0460 <_ZN15Adafruit_MPR1215beginEh+0xda>
  return true;
}

void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
 80a03bc:	4620      	mov	r0, r4
 80a03be:	2206      	movs	r2, #6
 80a03c0:	210c      	movs	r1, #12
 80a03c2:	f7ff ffcb 	bl	80a035c <_ZN15Adafruit_MPR12113setThresholdsEhh>
  
  if (c != 0x24) return false;


  setThreshholds(12, 6);
  writeRegister(MPR121_MHDR, 0x01);
 80a03c6:	4620      	mov	r0, r4
 80a03c8:	2201      	movs	r2, #1
 80a03ca:	212b      	movs	r1, #43	; 0x2b
 80a03cc:	f7ff ffaa 	bl	80a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDR, 0x01);
 80a03d0:	4620      	mov	r0, r4
 80a03d2:	2201      	movs	r2, #1
 80a03d4:	212c      	movs	r1, #44	; 0x2c
 80a03d6:	f7ff ffa5 	bl	80a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLR, 0x0E);
 80a03da:	4620      	mov	r0, r4
 80a03dc:	220e      	movs	r2, #14
 80a03de:	212d      	movs	r1, #45	; 0x2d
 80a03e0:	f7ff ffa0 	bl	80a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLR, 0x00);
 80a03e4:	4620      	mov	r0, r4
 80a03e6:	2200      	movs	r2, #0
 80a03e8:	212e      	movs	r1, #46	; 0x2e
 80a03ea:	f7ff ff9b 	bl	80a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_MHDF, 0x01);
 80a03ee:	4620      	mov	r0, r4
 80a03f0:	2201      	movs	r2, #1
 80a03f2:	212f      	movs	r1, #47	; 0x2f
 80a03f4:	f7ff ff96 	bl	80a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDF, 0x05);
 80a03f8:	4620      	mov	r0, r4
 80a03fa:	2205      	movs	r2, #5
 80a03fc:	2130      	movs	r1, #48	; 0x30
 80a03fe:	f7ff ff91 	bl	80a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLF, 0x01);
 80a0402:	4620      	mov	r0, r4
 80a0404:	2201      	movs	r2, #1
 80a0406:	2131      	movs	r1, #49	; 0x31
 80a0408:	f7ff ff8c 	bl	80a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLF, 0x00);
 80a040c:	4620      	mov	r0, r4
 80a040e:	2200      	movs	r2, #0
 80a0410:	2132      	movs	r1, #50	; 0x32
 80a0412:	f7ff ff87 	bl	80a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_NHDT, 0x00);
 80a0416:	4620      	mov	r0, r4
 80a0418:	2200      	movs	r2, #0
 80a041a:	2133      	movs	r1, #51	; 0x33
 80a041c:	f7ff ff82 	bl	80a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLT, 0x00);
 80a0420:	4620      	mov	r0, r4
 80a0422:	2200      	movs	r2, #0
 80a0424:	2134      	movs	r1, #52	; 0x34
 80a0426:	f7ff ff7d 	bl	80a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLT, 0x00);
 80a042a:	4620      	mov	r0, r4
 80a042c:	2200      	movs	r2, #0
 80a042e:	2135      	movs	r1, #53	; 0x35
 80a0430:	f7ff ff78 	bl	80a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_DEBOUNCE, 0);
 80a0434:	4620      	mov	r0, r4
 80a0436:	2200      	movs	r2, #0
 80a0438:	215b      	movs	r1, #91	; 0x5b
 80a043a:	f7ff ff73 	bl	80a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 80a043e:	4620      	mov	r0, r4
 80a0440:	2210      	movs	r2, #16
 80a0442:	215c      	movs	r1, #92	; 0x5c
 80a0444:	f7ff ff6e 	bl	80a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 80a0448:	4620      	mov	r0, r4
 80a044a:	2220      	movs	r2, #32
 80a044c:	215d      	movs	r1, #93	; 0x5d
 80a044e:	f7ff ff69 	bl	80a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>

//  writeRegister(MPR121_UPLIMIT, 150);
//  writeRegister(MPR121_TARGETLIMIT, 100); // should be ~400 (100 shifted)
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking
 80a0452:	4620      	mov	r0, r4
 80a0454:	228f      	movs	r2, #143	; 0x8f
 80a0456:	215e      	movs	r1, #94	; 0x5e
 80a0458:	f7ff ff64 	bl	80a0324 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  return true;
 80a045c:	2001      	movs	r0, #1
 80a045e:	bd38      	pop	{r3, r4, r5, pc}

  writeRegister(MPR121_ECR, 0x0);

  uint8_t c = readRegister8(MPR121_CONFIG2);
  
  if (c != 0x24) return false;
 80a0460:	2000      	movs	r0, #0
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking

  return true;
}
 80a0462:	bd38      	pop	{r3, r4, r5, pc}

080a0464 <_GLOBAL__sub_I__ZN15Adafruit_MPR121C2Ev>:
 80a0464:	f001 b9d0 	b.w	80a1808 <HAL_Pin_Map>

080a0468 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a0468:	f001 b9ce 	b.w	80a1808 <HAL_Pin_Map>

080a046c <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
 80a046c:	f001 b9cc 	b.w	80a1808 <HAL_Pin_Map>

080a0470 <_GLOBAL__sub_I__ZN7MPU9250C2Ev>:
 80a0470:	f001 b9ca 	b.w	80a1808 <HAL_Pin_Map>

080a0474 <_GLOBAL__sub_I__ZN7MPU92507getMresEv>:
 80a0474:	f001 b9c8 	b.w	80a1808 <HAL_Pin_Map>

080a0478 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff>:
  q[1] = q2 * norm;
  q[2] = q3 * norm;
  q[3] = q4 * norm;
}

const float * getQ () { return q; }
 80a0478:	b508      	push	{r3, lr}
 80a047a:	f001 f9c5 	bl	80a1808 <HAL_Pin_Map>
// noticed any reduction in solution accuracy. This is essentially the I
// coefficient in a PID control sense; the bigger the feedback coefficient,
// the faster the solution converges, usually at the expense of accuracy.
// In any case, this is the free parameter in the Madgwick filtering and
// fusion scheme.
static float beta = sqrt(3.0f / 4.0f) * GyroMeasError;   // Compute beta
 80a047e:	4a02      	ldr	r2, [pc, #8]	; (80a0488 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x10>)
 80a0480:	4b02      	ldr	r3, [pc, #8]	; (80a048c <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x14>)
 80a0482:	601a      	str	r2, [r3, #0]
 80a0484:	bd08      	pop	{r3, pc}
 80a0486:	bf00      	nop
 80a0488:	3f1ac70d 	.word	0x3f1ac70d
 80a048c:	20000098 	.word	0x20000098

080a0490 <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0490:	f001 b9aa 	b.w	80a17e8 <HAL_Timer_Get_Micro_Seconds>

080a0494 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0494:	b510      	push	{r4, lr}
 80a0496:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0498:	68c0      	ldr	r0, [r0, #12]
 80a049a:	b108      	cbz	r0, 80a04a0 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a049c:	f001 fb42 	bl	80a1b24 <free>
  if (begun) pinMode(pin, INPUT);
 80a04a0:	7823      	ldrb	r3, [r4, #0]
 80a04a2:	b11b      	cbz	r3, 80a04ac <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a04a4:	2100      	movs	r1, #0
 80a04a6:	79e0      	ldrb	r0, [r4, #7]
 80a04a8:	f001 ffaa 	bl	80a2400 <pinMode>
}
 80a04ac:	4620      	mov	r0, r4
 80a04ae:	bd10      	pop	{r4, pc}

080a04b0 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a04b0:	b538      	push	{r3, r4, r5, lr}
 80a04b2:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a04b4:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a04b6:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a04b8:	b108      	cbz	r0, 80a04be <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a04ba:	f001 fb33 	bl	80a1b24 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a04be:	79a3      	ldrb	r3, [r4, #6]
 80a04c0:	2b06      	cmp	r3, #6
 80a04c2:	bf0c      	ite	eq
 80a04c4:	2004      	moveq	r0, #4
 80a04c6:	2003      	movne	r0, #3
 80a04c8:	4368      	muls	r0, r5
 80a04ca:	b280      	uxth	r0, r0
 80a04cc:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a04ce:	f001 fb21 	bl	80a1b14 <malloc>
 80a04d2:	60e0      	str	r0, [r4, #12]
 80a04d4:	b128      	cbz	r0, 80a04e2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a04d6:	88a2      	ldrh	r2, [r4, #4]
 80a04d8:	2100      	movs	r1, #0
 80a04da:	f002 f97e 	bl	80a27da <memset>
    numLEDs = n;
 80a04de:	8065      	strh	r5, [r4, #2]
 80a04e0:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a04e2:	80a0      	strh	r0, [r4, #4]
 80a04e4:	8060      	strh	r0, [r4, #2]
 80a04e6:	bd38      	pop	{r3, r4, r5, pc}

080a04e8 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a04e8:	b510      	push	{r4, lr}
 80a04ea:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a04ec:	2101      	movs	r1, #1
 80a04ee:	79c0      	ldrb	r0, [r0, #7]
 80a04f0:	f001 ff86 	bl	80a2400 <pinMode>
  digitalWrite(pin, LOW);
 80a04f4:	2100      	movs	r1, #0
 80a04f6:	79e0      	ldrb	r0, [r4, #7]
 80a04f8:	f001 ff93 	bl	80a2422 <digitalWrite>
  begun = true;
 80a04fc:	2301      	movs	r3, #1
 80a04fe:	7023      	strb	r3, [r4, #0]
 80a0500:	bd10      	pop	{r4, pc}

080a0502 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0502:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0504:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0506:	4605      	mov	r5, r0
 80a0508:	460c      	mov	r4, r1
    if (begun) {
 80a050a:	b11b      	cbz	r3, 80a0514 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a050c:	2100      	movs	r1, #0
 80a050e:	79c0      	ldrb	r0, [r0, #7]
 80a0510:	f001 ff76 	bl	80a2400 <pinMode>
    }
    pin = p;
    if (begun) {
 80a0514:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a0516:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0518:	b153      	cbz	r3, 80a0530 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a051a:	b2a4      	uxth	r4, r4
 80a051c:	4620      	mov	r0, r4
 80a051e:	2101      	movs	r1, #1
 80a0520:	f001 ff6e 	bl	80a2400 <pinMode>
        digitalWrite(p, LOW);
 80a0524:	4620      	mov	r0, r4
    }
}
 80a0526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a052a:	2100      	movs	r1, #0
 80a052c:	f001 bf79 	b.w	80a2422 <digitalWrite>
 80a0530:	bd38      	pop	{r3, r4, r5, pc}

080a0532 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0532:	b570      	push	{r4, r5, r6, lr}
 80a0534:	4604      	mov	r4, r0
 80a0536:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0538:	2500      	movs	r5, #0
 80a053a:	7183      	strb	r3, [r0, #6]
 80a053c:	7005      	strb	r5, [r0, #0]
 80a053e:	7205      	strb	r5, [r0, #8]
 80a0540:	60c5      	str	r5, [r0, #12]
 80a0542:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a0544:	f7ff ffb4 	bl	80a04b0 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0548:	4620      	mov	r0, r4
 80a054a:	4631      	mov	r1, r6
 80a054c:	f7ff ffd9 	bl	80a0502 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0550:	4620      	mov	r0, r4
 80a0552:	bd70      	pop	{r4, r5, r6, pc}

080a0554 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0554:	68c3      	ldr	r3, [r0, #12]
 80a0556:	2b00      	cmp	r3, #0
 80a0558:	f000 858e 	beq.w	80a1078 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a055c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0560:	4604      	mov	r4, r0
 80a0562:	7983      	ldrb	r3, [r0, #6]
 80a0564:	b086      	sub	sp, #24
 80a0566:	3b02      	subs	r3, #2
 80a0568:	b2db      	uxtb	r3, r3
 80a056a:	2b04      	cmp	r3, #4
 80a056c:	bf96      	itet	ls
 80a056e:	4a29      	ldrls	r2, [pc, #164]	; (80a0614 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0570:	2532      	movhi	r5, #50	; 0x32
 80a0572:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0576:	f7ff ff8b 	bl	80a0490 <micros>
 80a057a:	6923      	ldr	r3, [r4, #16]
 80a057c:	1ac0      	subs	r0, r0, r3
 80a057e:	42a8      	cmp	r0, r5
 80a0580:	d3f9      	bcc.n	80a0576 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a0582:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0584:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0586:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0588:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a058a:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a058e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0592:	f000 8272 	beq.w	80a0a7a <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a0596:	2907      	cmp	r1, #7
 80a0598:	f000 826f 	beq.w	80a0a7a <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a059c:	2906      	cmp	r1, #6
 80a059e:	f000 8432 	beq.w	80a0e06 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a05a2:	2905      	cmp	r1, #5
 80a05a4:	f000 83ab 	beq.w	80a0cfe <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a05a8:	2908      	cmp	r1, #8
 80a05aa:	f000 83a8 	beq.w	80a0cfe <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a05ae:	2900      	cmp	r1, #0
 80a05b0:	f040 8563 	bne.w	80a107a <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a05b4:	4a18      	ldr	r2, [pc, #96]	; (80a0618 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a05b6:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a05ba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a05be:	b29b      	uxth	r3, r3
 80a05c0:	2b00      	cmp	r3, #0
 80a05c2:	f000 8395 	beq.w	80a0cf0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a05c6:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a05c8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a05cc:	f10e 0503 	add.w	r5, lr, #3
 80a05d0:	3b03      	subs	r3, #3
 80a05d2:	b29b      	uxth	r3, r3
 80a05d4:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a05d8:	f89e 3000 	ldrb.w	r3, [lr]
 80a05dc:	b2db      	uxtb	r3, r3
 80a05de:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a05e2:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a05e6:	b2db      	uxtb	r3, r3
 80a05e8:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a05ec:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a05f0:	b2db      	uxtb	r3, r3
 80a05f2:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a05f6:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a05fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a05fe:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0602:	021b      	lsls	r3, r3, #8
 80a0604:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0608:	4303      	orrs	r3, r0
 80a060a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a060c:	f88d 1005 	strb.w	r1, [sp, #5]
 80a0610:	e11b      	b.n	80a084a <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a0612:	bf00      	nop
 80a0614:	080a2890 	.word	0x080a2890
 80a0618:	2000009c 	.word	0x2000009c
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a061c:	4600      	mov	r0, r0
 80a061e:	bf00      	nop
 80a0620:	bf00      	nop
 80a0622:	bf00      	nop
 80a0624:	bf00      	nop
 80a0626:	bf00      	nop
 80a0628:	bf00      	nop
 80a062a:	bf00      	nop
 80a062c:	bf00      	nop
 80a062e:	bf00      	nop
 80a0630:	bf00      	nop
 80a0632:	bf00      	nop
 80a0634:	bf00      	nop
 80a0636:	bf00      	nop
 80a0638:	bf00      	nop
 80a063a:	bf00      	nop
 80a063c:	bf00      	nop
 80a063e:	bf00      	nop
 80a0640:	bf00      	nop
 80a0642:	bf00      	nop
 80a0644:	bf00      	nop
 80a0646:	bf00      	nop
 80a0648:	bf00      	nop
 80a064a:	bf00      	nop
 80a064c:	bf00      	nop
 80a064e:	bf00      	nop
 80a0650:	bf00      	nop
 80a0652:	bf00      	nop
 80a0654:	bf00      	nop
 80a0656:	bf00      	nop
 80a0658:	bf00      	nop
 80a065a:	bf00      	nop
 80a065c:	bf00      	nop
 80a065e:	bf00      	nop
 80a0660:	bf00      	nop
 80a0662:	bf00      	nop
 80a0664:	bf00      	nop
 80a0666:	bf00      	nop
 80a0668:	bf00      	nop
 80a066a:	bf00      	nop
 80a066c:	bf00      	nop
 80a066e:	bf00      	nop
 80a0670:	bf00      	nop
 80a0672:	bf00      	nop
 80a0674:	bf00      	nop
 80a0676:	bf00      	nop
 80a0678:	bf00      	nop
 80a067a:	bf00      	nop
 80a067c:	bf00      	nop
 80a067e:	bf00      	nop
 80a0680:	bf00      	nop
 80a0682:	bf00      	nop
 80a0684:	bf00      	nop
 80a0686:	bf00      	nop
 80a0688:	bf00      	nop
 80a068a:	bf00      	nop
 80a068c:	bf00      	nop
 80a068e:	bf00      	nop
 80a0690:	bf00      	nop
 80a0692:	bf00      	nop
 80a0694:	bf00      	nop
 80a0696:	bf00      	nop
 80a0698:	bf00      	nop
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
 80a06c2:	bf00      	nop
 80a06c4:	bf00      	nop
 80a06c6:	bf00      	nop
 80a06c8:	bf00      	nop
 80a06ca:	bf00      	nop
 80a06cc:	bf00      	nop
 80a06ce:	bf00      	nop
 80a06d0:	bf00      	nop
 80a06d2:	bf00      	nop
 80a06d4:	bf00      	nop
 80a06d6:	bf00      	nop
 80a06d8:	bf00      	nop
 80a06da:	bf00      	nop
 80a06dc:	bf00      	nop
 80a06de:	bf00      	nop
 80a06e0:	bf00      	nop
 80a06e2:	bf00      	nop
 80a06e4:	bf00      	nop
 80a06e6:	bf00      	nop
 80a06e8:	bf00      	nop
 80a06ea:	bf00      	nop
 80a06ec:	bf00      	nop
 80a06ee:	bf00      	nop
 80a06f0:	bf00      	nop
 80a06f2:	bf00      	nop
 80a06f4:	bf00      	nop
 80a06f6:	bf00      	nop
 80a06f8:	bf00      	nop
 80a06fa:	bf00      	nop
 80a06fc:	bf00      	nop
 80a06fe:	bf00      	nop
 80a0700:	bf00      	nop
 80a0702:	bf00      	nop
 80a0704:	bf00      	nop
 80a0706:	bf00      	nop
 80a0708:	bf00      	nop
 80a070a:	bf00      	nop
 80a070c:	bf00      	nop
 80a070e:	bf00      	nop
 80a0710:	bf00      	nop
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
 80a071e:	bf00      	nop
 80a0720:	bf00      	nop
 80a0722:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0724:	79e3      	ldrb	r3, [r4, #7]
 80a0726:	6810      	ldr	r0, [r2, #0]
 80a0728:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a072c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0730:	88bf      	ldrh	r7, [r7, #4]
 80a0732:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0736:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0738:	4600      	mov	r0, r0
 80a073a:	bf00      	nop
 80a073c:	bf00      	nop
 80a073e:	bf00      	nop
 80a0740:	bf00      	nop
 80a0742:	bf00      	nop
 80a0744:	bf00      	nop
 80a0746:	bf00      	nop
 80a0748:	bf00      	nop
 80a074a:	bf00      	nop
 80a074c:	bf00      	nop
 80a074e:	bf00      	nop
 80a0750:	bf00      	nop
 80a0752:	bf00      	nop
 80a0754:	bf00      	nop
 80a0756:	bf00      	nop
 80a0758:	bf00      	nop
 80a075a:	bf00      	nop
 80a075c:	bf00      	nop
 80a075e:	bf00      	nop
 80a0760:	bf00      	nop
 80a0762:	bf00      	nop
 80a0764:	bf00      	nop
 80a0766:	bf00      	nop
 80a0768:	bf00      	nop
 80a076a:	bf00      	nop
 80a076c:	bf00      	nop
 80a076e:	bf00      	nop
 80a0770:	bf00      	nop
 80a0772:	bf00      	nop
 80a0774:	bf00      	nop
 80a0776:	bf00      	nop
 80a0778:	bf00      	nop
 80a077a:	bf00      	nop
 80a077c:	bf00      	nop
 80a077e:	bf00      	nop
 80a0780:	bf00      	nop
 80a0782:	bf00      	nop
 80a0784:	bf00      	nop
 80a0786:	bf00      	nop
 80a0788:	bf00      	nop
 80a078a:	bf00      	nop
 80a078c:	bf00      	nop
 80a078e:	bf00      	nop
 80a0790:	bf00      	nop
 80a0792:	bf00      	nop
 80a0794:	bf00      	nop
 80a0796:	bf00      	nop
 80a0798:	bf00      	nop
 80a079a:	bf00      	nop
 80a079c:	bf00      	nop
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
 80a07a6:	bf00      	nop
 80a07a8:	bf00      	nop
 80a07aa:	bf00      	nop
 80a07ac:	bf00      	nop
 80a07ae:	bf00      	nop
 80a07b0:	bf00      	nop
 80a07b2:	bf00      	nop
 80a07b4:	bf00      	nop
 80a07b6:	bf00      	nop
 80a07b8:	bf00      	nop
 80a07ba:	bf00      	nop
 80a07bc:	bf00      	nop
 80a07be:	bf00      	nop
 80a07c0:	bf00      	nop
 80a07c2:	bf00      	nop
 80a07c4:	bf00      	nop
 80a07c6:	bf00      	nop
 80a07c8:	bf00      	nop
 80a07ca:	bf00      	nop
 80a07cc:	bf00      	nop
 80a07ce:	bf00      	nop
 80a07d0:	bf00      	nop
 80a07d2:	bf00      	nop
 80a07d4:	bf00      	nop
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	bf00      	nop
 80a0816:	bf00      	nop
 80a0818:	bf00      	nop
 80a081a:	bf00      	nop
 80a081c:	bf00      	nop
 80a081e:	bf00      	nop
 80a0820:	bf00      	nop
 80a0822:	bf00      	nop
 80a0824:	bf00      	nop
 80a0826:	bf00      	nop
 80a0828:	bf00      	nop
 80a082a:	bf00      	nop
 80a082c:	bf00      	nop
 80a082e:	bf00      	nop
 80a0830:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0832:	9b04      	ldr	r3, [sp, #16]
 80a0834:	085b      	lsrs	r3, r3, #1
 80a0836:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0838:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a083c:	3301      	adds	r3, #1
 80a083e:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0840:	2b17      	cmp	r3, #23
 80a0842:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0846:	f200 82db 	bhi.w	80a0e00 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a084a:	79e3      	ldrb	r3, [r4, #7]
 80a084c:	6810      	ldr	r0, [r2, #0]
 80a084e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0852:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0856:	88bf      	ldrh	r7, [r7, #4]
 80a0858:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a085c:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a085e:	9803      	ldr	r0, [sp, #12]
 80a0860:	9b04      	ldr	r3, [sp, #16]
 80a0862:	4218      	tst	r0, r3
 80a0864:	f47f aeda 	bne.w	80a061c <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0868:	4600      	mov	r0, r0
 80a086a:	bf00      	nop
 80a086c:	bf00      	nop
 80a086e:	bf00      	nop
 80a0870:	bf00      	nop
 80a0872:	bf00      	nop
 80a0874:	bf00      	nop
 80a0876:	bf00      	nop
 80a0878:	bf00      	nop
 80a087a:	bf00      	nop
 80a087c:	bf00      	nop
 80a087e:	bf00      	nop
 80a0880:	bf00      	nop
 80a0882:	bf00      	nop
 80a0884:	bf00      	nop
 80a0886:	bf00      	nop
 80a0888:	bf00      	nop
 80a088a:	bf00      	nop
 80a088c:	bf00      	nop
 80a088e:	bf00      	nop
 80a0890:	bf00      	nop
 80a0892:	bf00      	nop
 80a0894:	bf00      	nop
 80a0896:	bf00      	nop
 80a0898:	bf00      	nop
 80a089a:	bf00      	nop
 80a089c:	bf00      	nop
 80a089e:	bf00      	nop
 80a08a0:	bf00      	nop
 80a08a2:	bf00      	nop
 80a08a4:	bf00      	nop
 80a08a6:	bf00      	nop
 80a08a8:	bf00      	nop
 80a08aa:	bf00      	nop
 80a08ac:	bf00      	nop
 80a08ae:	bf00      	nop
 80a08b0:	bf00      	nop
 80a08b2:	bf00      	nop
 80a08b4:	bf00      	nop
 80a08b6:	bf00      	nop
 80a08b8:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a08ba:	79e3      	ldrb	r3, [r4, #7]
 80a08bc:	6810      	ldr	r0, [r2, #0]
 80a08be:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a08c2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a08c6:	88bf      	ldrh	r7, [r7, #4]
 80a08c8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a08cc:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a08ce:	4600      	mov	r0, r0
 80a08d0:	bf00      	nop
 80a08d2:	bf00      	nop
 80a08d4:	bf00      	nop
 80a08d6:	bf00      	nop
 80a08d8:	bf00      	nop
 80a08da:	bf00      	nop
 80a08dc:	bf00      	nop
 80a08de:	bf00      	nop
 80a08e0:	bf00      	nop
 80a08e2:	bf00      	nop
 80a08e4:	bf00      	nop
 80a08e6:	bf00      	nop
 80a08e8:	bf00      	nop
 80a08ea:	bf00      	nop
 80a08ec:	bf00      	nop
 80a08ee:	bf00      	nop
 80a08f0:	bf00      	nop
 80a08f2:	bf00      	nop
 80a08f4:	bf00      	nop
 80a08f6:	bf00      	nop
 80a08f8:	bf00      	nop
 80a08fa:	bf00      	nop
 80a08fc:	bf00      	nop
 80a08fe:	bf00      	nop
 80a0900:	bf00      	nop
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
 80a090a:	bf00      	nop
 80a090c:	bf00      	nop
 80a090e:	bf00      	nop
 80a0910:	bf00      	nop
 80a0912:	bf00      	nop
 80a0914:	bf00      	nop
 80a0916:	bf00      	nop
 80a0918:	bf00      	nop
 80a091a:	bf00      	nop
 80a091c:	bf00      	nop
 80a091e:	bf00      	nop
 80a0920:	bf00      	nop
 80a0922:	bf00      	nop
 80a0924:	bf00      	nop
 80a0926:	bf00      	nop
 80a0928:	bf00      	nop
 80a092a:	bf00      	nop
 80a092c:	bf00      	nop
 80a092e:	bf00      	nop
 80a0930:	bf00      	nop
 80a0932:	bf00      	nop
 80a0934:	bf00      	nop
 80a0936:	bf00      	nop
 80a0938:	bf00      	nop
 80a093a:	bf00      	nop
 80a093c:	bf00      	nop
 80a093e:	bf00      	nop
 80a0940:	bf00      	nop
 80a0942:	bf00      	nop
 80a0944:	bf00      	nop
 80a0946:	bf00      	nop
 80a0948:	bf00      	nop
 80a094a:	bf00      	nop
 80a094c:	bf00      	nop
 80a094e:	bf00      	nop
 80a0950:	bf00      	nop
 80a0952:	bf00      	nop
 80a0954:	bf00      	nop
 80a0956:	bf00      	nop
 80a0958:	bf00      	nop
 80a095a:	bf00      	nop
 80a095c:	bf00      	nop
 80a095e:	bf00      	nop
 80a0960:	bf00      	nop
 80a0962:	bf00      	nop
 80a0964:	bf00      	nop
 80a0966:	bf00      	nop
 80a0968:	bf00      	nop
 80a096a:	bf00      	nop
 80a096c:	bf00      	nop
 80a096e:	bf00      	nop
 80a0970:	bf00      	nop
 80a0972:	bf00      	nop
 80a0974:	bf00      	nop
 80a0976:	bf00      	nop
 80a0978:	bf00      	nop
 80a097a:	bf00      	nop
 80a097c:	bf00      	nop
 80a097e:	bf00      	nop
 80a0980:	bf00      	nop
 80a0982:	bf00      	nop
 80a0984:	bf00      	nop
 80a0986:	bf00      	nop
 80a0988:	bf00      	nop
 80a098a:	bf00      	nop
 80a098c:	bf00      	nop
 80a098e:	bf00      	nop
 80a0990:	bf00      	nop
 80a0992:	bf00      	nop
 80a0994:	bf00      	nop
 80a0996:	bf00      	nop
 80a0998:	bf00      	nop
 80a099a:	bf00      	nop
 80a099c:	bf00      	nop
 80a099e:	bf00      	nop
 80a09a0:	bf00      	nop
 80a09a2:	bf00      	nop
 80a09a4:	bf00      	nop
 80a09a6:	bf00      	nop
 80a09a8:	bf00      	nop
 80a09aa:	bf00      	nop
 80a09ac:	bf00      	nop
 80a09ae:	bf00      	nop
 80a09b0:	bf00      	nop
 80a09b2:	bf00      	nop
 80a09b4:	bf00      	nop
 80a09b6:	bf00      	nop
 80a09b8:	bf00      	nop
 80a09ba:	bf00      	nop
 80a09bc:	bf00      	nop
 80a09be:	bf00      	nop
 80a09c0:	bf00      	nop
 80a09c2:	bf00      	nop
 80a09c4:	bf00      	nop
 80a09c6:	bf00      	nop
 80a09c8:	bf00      	nop
 80a09ca:	bf00      	nop
 80a09cc:	bf00      	nop
 80a09ce:	bf00      	nop
 80a09d0:	bf00      	nop
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
 80a09e4:	bf00      	nop
 80a09e6:	bf00      	nop
 80a09e8:	bf00      	nop
 80a09ea:	bf00      	nop
 80a09ec:	bf00      	nop
 80a09ee:	bf00      	nop
 80a09f0:	bf00      	nop
 80a09f2:	bf00      	nop
 80a09f4:	bf00      	nop
 80a09f6:	bf00      	nop
 80a09f8:	bf00      	nop
 80a09fa:	bf00      	nop
 80a09fc:	bf00      	nop
 80a09fe:	bf00      	nop
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
 80a0a04:	bf00      	nop
 80a0a06:	bf00      	nop
 80a0a08:	bf00      	nop
 80a0a0a:	bf00      	nop
 80a0a0c:	bf00      	nop
 80a0a0e:	bf00      	nop
 80a0a10:	bf00      	nop
 80a0a12:	bf00      	nop
 80a0a14:	bf00      	nop
 80a0a16:	bf00      	nop
 80a0a18:	bf00      	nop
 80a0a1a:	bf00      	nop
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
 80a0a26:	bf00      	nop
 80a0a28:	bf00      	nop
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
 80a0a66:	bf00      	nop
 80a0a68:	bf00      	nop
 80a0a6a:	bf00      	nop
 80a0a6c:	bf00      	nop
 80a0a6e:	bf00      	nop
 80a0a70:	bf00      	nop
 80a0a72:	bf00      	nop
 80a0a74:	bf00      	nop
 80a0a76:	bf00      	nop
 80a0a78:	e6db      	b.n	80a0832 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0a7a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0a7e:	4a17      	ldr	r2, [pc, #92]	; (80a0adc <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a0a80:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a0a82:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0a86:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0a88:	2b00      	cmp	r3, #0
 80a0a8a:	f000 8131 	beq.w	80a0cf0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0a8e:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0a90:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0a94:	f10e 0103 	add.w	r1, lr, #3
 80a0a98:	3b03      	subs	r3, #3
 80a0a9a:	b29b      	uxth	r3, r3
 80a0a9c:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0aa0:	f89e 3000 	ldrb.w	r3, [lr]
 80a0aa4:	b2db      	uxtb	r3, r3
 80a0aa6:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0aaa:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0aae:	b2db      	uxtb	r3, r3
 80a0ab0:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0ab4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0ab8:	b2db      	uxtb	r3, r3
 80a0aba:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0abe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0ac2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a0ac6:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a0aca:	0200      	lsls	r0, r0, #8
 80a0acc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a0ad0:	433b      	orrs	r3, r7
 80a0ad2:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0ad4:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0ad8:	e080      	b.n	80a0bdc <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a0ada:	bf00      	nop
 80a0adc:	2000009c 	.word	0x2000009c
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ae0:	4600      	mov	r0, r0
 80a0ae2:	bf00      	nop
 80a0ae4:	bf00      	nop
 80a0ae6:	bf00      	nop
 80a0ae8:	bf00      	nop
 80a0aea:	bf00      	nop
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
 80a0b00:	bf00      	nop
 80a0b02:	bf00      	nop
 80a0b04:	bf00      	nop
 80a0b06:	bf00      	nop
 80a0b08:	bf00      	nop
 80a0b0a:	bf00      	nop
 80a0b0c:	bf00      	nop
 80a0b0e:	bf00      	nop
 80a0b10:	bf00      	nop
 80a0b12:	bf00      	nop
 80a0b14:	bf00      	nop
 80a0b16:	bf00      	nop
 80a0b18:	bf00      	nop
 80a0b1a:	bf00      	nop
 80a0b1c:	bf00      	nop
 80a0b1e:	bf00      	nop
 80a0b20:	bf00      	nop
 80a0b22:	bf00      	nop
 80a0b24:	bf00      	nop
 80a0b26:	bf00      	nop
 80a0b28:	bf00      	nop
 80a0b2a:	bf00      	nop
 80a0b2c:	bf00      	nop
 80a0b2e:	bf00      	nop
 80a0b30:	bf00      	nop
 80a0b32:	bf00      	nop
 80a0b34:	bf00      	nop
 80a0b36:	bf00      	nop
 80a0b38:	bf00      	nop
 80a0b3a:	bf00      	nop
 80a0b3c:	bf00      	nop
 80a0b3e:	bf00      	nop
 80a0b40:	bf00      	nop
 80a0b42:	bf00      	nop
 80a0b44:	bf00      	nop
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a0b7a:	79e3      	ldrb	r3, [r4, #7]
 80a0b7c:	6810      	ldr	r0, [r2, #0]
 80a0b7e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0b82:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0b86:	88bf      	ldrh	r7, [r7, #4]
 80a0b88:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0b8c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0b8e:	4600      	mov	r0, r0
 80a0b90:	bf00      	nop
 80a0b92:	bf00      	nop
 80a0b94:	bf00      	nop
 80a0b96:	bf00      	nop
 80a0b98:	bf00      	nop
 80a0b9a:	bf00      	nop
 80a0b9c:	bf00      	nop
 80a0b9e:	bf00      	nop
 80a0ba0:	bf00      	nop
 80a0ba2:	bf00      	nop
 80a0ba4:	bf00      	nop
 80a0ba6:	bf00      	nop
 80a0ba8:	bf00      	nop
 80a0baa:	bf00      	nop
 80a0bac:	bf00      	nop
 80a0bae:	bf00      	nop
 80a0bb0:	bf00      	nop
 80a0bb2:	bf00      	nop
 80a0bb4:	bf00      	nop
 80a0bb6:	bf00      	nop
 80a0bb8:	bf00      	nop
 80a0bba:	bf00      	nop
 80a0bbc:	bf00      	nop
 80a0bbe:	bf00      	nop
 80a0bc0:	bf00      	nop
 80a0bc2:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0bc4:	9b04      	ldr	r3, [sp, #16]
 80a0bc6:	085b      	lsrs	r3, r3, #1
 80a0bc8:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0bca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0bce:	3301      	adds	r3, #1
 80a0bd0:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0bd2:	2b17      	cmp	r3, #23
 80a0bd4:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0bd8:	f200 8083 	bhi.w	80a0ce2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a0bdc:	79e3      	ldrb	r3, [r4, #7]
 80a0bde:	6810      	ldr	r0, [r2, #0]
 80a0be0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0be4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0be8:	88bf      	ldrh	r7, [r7, #4]
 80a0bea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0bee:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0bf0:	9803      	ldr	r0, [sp, #12]
 80a0bf2:	9b04      	ldr	r3, [sp, #16]
 80a0bf4:	4218      	tst	r0, r3
 80a0bf6:	f47f af73 	bne.w	80a0ae0 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0bfa:	4600      	mov	r0, r0
 80a0bfc:	bf00      	nop
 80a0bfe:	bf00      	nop
 80a0c00:	bf00      	nop
 80a0c02:	bf00      	nop
 80a0c04:	bf00      	nop
 80a0c06:	bf00      	nop
 80a0c08:	bf00      	nop
 80a0c0a:	bf00      	nop
 80a0c0c:	bf00      	nop
 80a0c0e:	bf00      	nop
 80a0c10:	bf00      	nop
 80a0c12:	bf00      	nop
 80a0c14:	bf00      	nop
 80a0c16:	bf00      	nop
 80a0c18:	bf00      	nop
 80a0c1a:	bf00      	nop
 80a0c1c:	bf00      	nop
 80a0c1e:	bf00      	nop
 80a0c20:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a0c22:	79e3      	ldrb	r3, [r4, #7]
 80a0c24:	6810      	ldr	r0, [r2, #0]
 80a0c26:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c2a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c2e:	88bf      	ldrh	r7, [r7, #4]
 80a0c30:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c34:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0c36:	4600      	mov	r0, r0
 80a0c38:	bf00      	nop
 80a0c3a:	bf00      	nop
 80a0c3c:	bf00      	nop
 80a0c3e:	bf00      	nop
 80a0c40:	bf00      	nop
 80a0c42:	bf00      	nop
 80a0c44:	bf00      	nop
 80a0c46:	bf00      	nop
 80a0c48:	bf00      	nop
 80a0c4a:	bf00      	nop
 80a0c4c:	bf00      	nop
 80a0c4e:	bf00      	nop
 80a0c50:	bf00      	nop
 80a0c52:	bf00      	nop
 80a0c54:	bf00      	nop
 80a0c56:	bf00      	nop
 80a0c58:	bf00      	nop
 80a0c5a:	bf00      	nop
 80a0c5c:	bf00      	nop
 80a0c5e:	bf00      	nop
 80a0c60:	bf00      	nop
 80a0c62:	bf00      	nop
 80a0c64:	bf00      	nop
 80a0c66:	bf00      	nop
 80a0c68:	bf00      	nop
 80a0c6a:	bf00      	nop
 80a0c6c:	bf00      	nop
 80a0c6e:	bf00      	nop
 80a0c70:	bf00      	nop
 80a0c72:	bf00      	nop
 80a0c74:	bf00      	nop
 80a0c76:	bf00      	nop
 80a0c78:	bf00      	nop
 80a0c7a:	bf00      	nop
 80a0c7c:	bf00      	nop
 80a0c7e:	bf00      	nop
 80a0c80:	bf00      	nop
 80a0c82:	bf00      	nop
 80a0c84:	bf00      	nop
 80a0c86:	bf00      	nop
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
 80a0c8c:	bf00      	nop
 80a0c8e:	bf00      	nop
 80a0c90:	bf00      	nop
 80a0c92:	bf00      	nop
 80a0c94:	bf00      	nop
 80a0c96:	bf00      	nop
 80a0c98:	bf00      	nop
 80a0c9a:	bf00      	nop
 80a0c9c:	bf00      	nop
 80a0c9e:	bf00      	nop
 80a0ca0:	bf00      	nop
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	e770      	b.n	80a0bc4 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0ce2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0ce6:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0ce8:	b29b      	uxth	r3, r3
 80a0cea:	2b00      	cmp	r3, #0
 80a0cec:	f47f aecf 	bne.w	80a0a8e <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a0cf0:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0cf2:	f7ff fbcd 	bl	80a0490 <micros>
 80a0cf6:	6120      	str	r0, [r4, #16]
}
 80a0cf8:	b006      	add	sp, #24
 80a0cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0cfe:	4b5e      	ldr	r3, [pc, #376]	; (80a0e78 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a0d00:	4a5e      	ldr	r2, [pc, #376]	; (80a0e7c <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0d02:	4618      	mov	r0, r3
 80a0d04:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0d06:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0d0a:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0d0c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0d10:	b292      	uxth	r2, r2
 80a0d12:	2a00      	cmp	r2, #0
 80a0d14:	d0ec      	beq.n	80a0cf0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0d16:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0d1a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0d1e:	f10e 0503 	add.w	r5, lr, #3
 80a0d22:	3a03      	subs	r2, #3
 80a0d24:	b292      	uxth	r2, r2
 80a0d26:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0d2a:	f89e 2000 	ldrb.w	r2, [lr]
 80a0d2e:	b2d2      	uxtb	r2, r2
 80a0d30:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0d34:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a0d38:	b2d2      	uxtb	r2, r2
 80a0d3a:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0d3e:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a0d42:	b2d2      	uxtb	r2, r2
 80a0d44:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0d48:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0d4c:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a0d50:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a0d54:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a0d58:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a0d5c:	ea42 020c 	orr.w	r2, r2, ip
 80a0d60:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0d62:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a0d66:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0d68:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0d6a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0d6e:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0d72:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0d76:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0d7a:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0d7c:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0d80:	9e03      	ldr	r6, [sp, #12]
 80a0d82:	9a04      	ldr	r2, [sp, #16]
 80a0d84:	4216      	tst	r6, r2
 80a0d86:	d023      	beq.n	80a0dd0 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0d88:	685a      	ldr	r2, [r3, #4]
 80a0d8a:	9e05      	ldr	r6, [sp, #20]
 80a0d8c:	1b92      	subs	r2, r2, r6
 80a0d8e:	2a4f      	cmp	r2, #79	; 0x4f
 80a0d90:	d9fa      	bls.n	80a0d88 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a0d92:	79e2      	ldrb	r2, [r4, #7]
 80a0d94:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0d98:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0d9c:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0da0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0da4:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0da8:	6842      	ldr	r2, [r0, #4]
 80a0daa:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0dac:	685a      	ldr	r2, [r3, #4]
 80a0dae:	9e05      	ldr	r6, [sp, #20]
 80a0db0:	1b92      	subs	r2, r2, r6
 80a0db2:	2a07      	cmp	r2, #7
 80a0db4:	d9fa      	bls.n	80a0dac <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a0db6:	9a04      	ldr	r2, [sp, #16]
 80a0db8:	0852      	lsrs	r2, r2, #1
 80a0dba:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0dbc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0dc0:	3201      	adds	r2, #1
 80a0dc2:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0dc4:	2a17      	cmp	r2, #23
 80a0dc6:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0dca:	d9cc      	bls.n	80a0d66 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0dcc:	46ae      	mov	lr, r5
 80a0dce:	e79d      	b.n	80a0d0c <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0dd0:	685a      	ldr	r2, [r3, #4]
 80a0dd2:	9e05      	ldr	r6, [sp, #20]
 80a0dd4:	1b92      	subs	r2, r2, r6
 80a0dd6:	2a18      	cmp	r2, #24
 80a0dd8:	d9fa      	bls.n	80a0dd0 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a0dda:	79e2      	ldrb	r2, [r4, #7]
 80a0ddc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0de0:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0de4:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0de8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0dec:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0df0:	6842      	ldr	r2, [r0, #4]
 80a0df2:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0df4:	685a      	ldr	r2, [r3, #4]
 80a0df6:	9e05      	ldr	r6, [sp, #20]
 80a0df8:	1b92      	subs	r2, r2, r6
 80a0dfa:	2a45      	cmp	r2, #69	; 0x45
 80a0dfc:	d9fa      	bls.n	80a0df4 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a0dfe:	e7da      	b.n	80a0db6 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0e00:	46ae      	mov	lr, r5
 80a0e02:	f7ff bbda 	b.w	80a05ba <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a0e06:	4a1d      	ldr	r2, [pc, #116]	; (80a0e7c <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a0e08:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a0e0c:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0e0e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0e12:	b29b      	uxth	r3, r3
 80a0e14:	2b00      	cmp	r3, #0
 80a0e16:	f43f af6b 	beq.w	80a0cf0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a0e1a:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0e1c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0e20:	f10e 0104 	add.w	r1, lr, #4
 80a0e24:	3b04      	subs	r3, #4
 80a0e26:	b29b      	uxth	r3, r3
 80a0e28:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0e2c:	f89e 3000 	ldrb.w	r3, [lr]
 80a0e30:	b2db      	uxtb	r3, r3
 80a0e32:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0e36:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0e3a:	b2db      	uxtb	r3, r3
 80a0e3c:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0e40:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0e44:	b2db      	uxtb	r3, r3
 80a0e46:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0e4a:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a0e4e:	b2db      	uxtb	r3, r3
 80a0e50:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0e54:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0e58:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a0e5c:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a0e60:	043f      	lsls	r7, r7, #16
 80a0e62:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a0e66:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a0e6a:	4303      	orrs	r3, r0
 80a0e6c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a0e70:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0e72:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0e76:	e07e      	b.n	80a0f76 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a0e78:	e0001000 	.word	0xe0001000
 80a0e7c:	2000009c 	.word	0x2000009c
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0e80:	4600      	mov	r0, r0
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
 80a0ea4:	bf00      	nop
 80a0ea6:	bf00      	nop
 80a0ea8:	bf00      	nop
 80a0eaa:	bf00      	nop
 80a0eac:	bf00      	nop
 80a0eae:	bf00      	nop
 80a0eb0:	bf00      	nop
 80a0eb2:	bf00      	nop
 80a0eb4:	bf00      	nop
 80a0eb6:	bf00      	nop
 80a0eb8:	bf00      	nop
 80a0eba:	bf00      	nop
 80a0ebc:	bf00      	nop
 80a0ebe:	bf00      	nop
 80a0ec0:	bf00      	nop
 80a0ec2:	bf00      	nop
 80a0ec4:	bf00      	nop
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a0eee:	79e3      	ldrb	r3, [r4, #7]
 80a0ef0:	6810      	ldr	r0, [r2, #0]
 80a0ef2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0ef6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0efa:	88bf      	ldrh	r7, [r7, #4]
 80a0efc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f00:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f02:	4600      	mov	r0, r0
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0f60:	9b04      	ldr	r3, [sp, #16]
 80a0f62:	085b      	lsrs	r3, r3, #1
 80a0f64:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0f66:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0f6a:	3301      	adds	r3, #1
 80a0f6c:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a0f6e:	2b1f      	cmp	r3, #31
 80a0f70:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0f74:	d87e      	bhi.n	80a1074 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a0f76:	79e3      	ldrb	r3, [r4, #7]
 80a0f78:	6810      	ldr	r0, [r2, #0]
 80a0f7a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0f7e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0f82:	88bf      	ldrh	r7, [r7, #4]
 80a0f84:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f88:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0f8a:	9803      	ldr	r0, [sp, #12]
 80a0f8c:	9b04      	ldr	r3, [sp, #16]
 80a0f8e:	4218      	tst	r0, r3
 80a0f90:	f47f af76 	bne.w	80a0e80 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f94:	4600      	mov	r0, r0
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
 80a0fae:	bf00      	nop
 80a0fb0:	bf00      	nop
 80a0fb2:	bf00      	nop
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a0fbc:	79e3      	ldrb	r3, [r4, #7]
 80a0fbe:	6810      	ldr	r0, [r2, #0]
 80a0fc0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0fc4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0fc8:	88bf      	ldrh	r7, [r7, #4]
 80a0fca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0fce:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0fd0:	4600      	mov	r0, r0
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	e775      	b.n	80a0f60 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a1074:	468e      	mov	lr, r1
 80a1076:	e6ca      	b.n	80a0e0e <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a1078:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a107a:	2903      	cmp	r1, #3
 80a107c:	f000 812e 	beq.w	80a12dc <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1080:	4a1e      	ldr	r2, [pc, #120]	; (80a10fc <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1082:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1086:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1088:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a108c:	b29b      	uxth	r3, r3
 80a108e:	2b00      	cmp	r3, #0
 80a1090:	f43f ae2e 	beq.w	80a0cf0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1094:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1096:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a109a:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a109c:	3b03      	subs	r3, #3
 80a109e:	b29b      	uxth	r3, r3
 80a10a0:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a10a4:	f89e 3000 	ldrb.w	r3, [lr]
 80a10a8:	f10e 0103 	add.w	r1, lr, #3
 80a10ac:	b2db      	uxtb	r3, r3
 80a10ae:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a10b2:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a10b6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a10ba:	b2db      	uxtb	r3, r3
 80a10bc:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a10c0:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a10c4:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a10c8:	b2db      	uxtb	r3, r3
 80a10ca:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a10ce:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a10d2:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a10d6:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a10da:	021b      	lsls	r3, r3, #8
 80a10dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a10e0:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a10e4:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a10e8:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a10ec:	433b      	orrs	r3, r7
 80a10ee:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a10f0:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a10f4:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a10f8:	e07d      	b.n	80a11f6 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a10fa:	bf00      	nop
 80a10fc:	2000009c 	.word	0x2000009c
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a1100:	9b04      	ldr	r3, [sp, #16]
 80a1102:	085b      	lsrs	r3, r3, #1
 80a1104:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1106:	4600      	mov	r0, r0
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
 80a111e:	bf00      	nop
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	bf00      	nop
 80a1126:	bf00      	nop
 80a1128:	bf00      	nop
 80a112a:	bf00      	nop
 80a112c:	bf00      	nop
 80a112e:	bf00      	nop
 80a1130:	bf00      	nop
 80a1132:	bf00      	nop
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a118c:	79e0      	ldrb	r0, [r4, #7]
 80a118e:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1190:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1194:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1198:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a119c:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a11a0:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a11a4:	3301      	adds	r3, #1
 80a11a6:	b2db      	uxtb	r3, r3
 80a11a8:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a11ac:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a11b0:	4600      	mov	r0, r0
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	bf00      	nop
          if(j==24) break;
 80a11da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a11de:	2b18      	cmp	r3, #24
 80a11e0:	d07a      	beq.n	80a12d8 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a11e2:	79e3      	ldrb	r3, [r4, #7]
 80a11e4:	6810      	ldr	r0, [r2, #0]
 80a11e6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a11ea:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a11ee:	88bf      	ldrh	r7, [r7, #4]
 80a11f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a11f4:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a11f6:	9803      	ldr	r0, [sp, #12]
 80a11f8:	9b04      	ldr	r3, [sp, #16]
 80a11fa:	4218      	tst	r0, r3
 80a11fc:	d180      	bne.n	80a1100 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a11fe:	4600      	mov	r0, r0
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a1220:	79e3      	ldrb	r3, [r4, #7]
 80a1222:	6810      	ldr	r0, [r2, #0]
 80a1224:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1228:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a122c:	88bf      	ldrh	r7, [r7, #4]
 80a122e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1232:	831f      	strh	r7, [r3, #24]
          j++;
 80a1234:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1238:	3301      	adds	r3, #1
 80a123a:	b2db      	uxtb	r3, r3
 80a123c:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a1240:	9b04      	ldr	r3, [sp, #16]
 80a1242:	085b      	lsrs	r3, r3, #1
 80a1244:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1246:	4600      	mov	r0, r0
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
          if(j==24) break;
 80a12d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a12d4:	2b18      	cmp	r3, #24
 80a12d6:	d184      	bne.n	80a11e2 <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a12d8:	468e      	mov	lr, r1
 80a12da:	e6d5      	b.n	80a1088 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a12dc:	4a17      	ldr	r2, [pc, #92]	; (80a133c <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a12de:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a12e2:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a12e4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a12e8:	b29b      	uxth	r3, r3
 80a12ea:	2b00      	cmp	r3, #0
 80a12ec:	f43f ad00 	beq.w	80a0cf0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a12f0:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a12f2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a12f6:	f10e 0103 	add.w	r1, lr, #3
 80a12fa:	3b03      	subs	r3, #3
 80a12fc:	b29b      	uxth	r3, r3
 80a12fe:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1302:	f89e 3000 	ldrb.w	r3, [lr]
 80a1306:	b2db      	uxtb	r3, r3
 80a1308:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a130c:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1310:	b2db      	uxtb	r3, r3
 80a1312:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a1316:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a131a:	b2db      	uxtb	r3, r3
 80a131c:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1320:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1324:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1328:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a132c:	021b      	lsls	r3, r3, #8
 80a132e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1332:	4303      	orrs	r3, r0
 80a1334:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1336:	f88d 6005 	strb.w	r6, [sp, #5]
 80a133a:	e0e0      	b.n	80a14fe <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a133c:	2000009c 	.word	0x2000009c
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1340:	4600      	mov	r0, r0
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a1462:	79e3      	ldrb	r3, [r4, #7]
 80a1464:	6810      	ldr	r0, [r2, #0]
 80a1466:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a146a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a146e:	88bf      	ldrh	r7, [r7, #4]
 80a1470:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1474:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1476:	4600      	mov	r0, r0
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a14e6:	9b04      	ldr	r3, [sp, #16]
 80a14e8:	085b      	lsrs	r3, r3, #1
 80a14ea:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a14ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a14f0:	3301      	adds	r3, #1
 80a14f2:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a14f4:	2b17      	cmp	r3, #23
 80a14f6:	f88d 3005 	strb.w	r3, [sp, #5]
 80a14fa:	f200 80e3 	bhi.w	80a16c4 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a14fe:	79e3      	ldrb	r3, [r4, #7]
 80a1500:	6810      	ldr	r0, [r2, #0]
 80a1502:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1506:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a150a:	88bf      	ldrh	r7, [r7, #4]
 80a150c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1510:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1512:	9803      	ldr	r0, [sp, #12]
 80a1514:	9b04      	ldr	r3, [sp, #16]
 80a1516:	4218      	tst	r0, r3
 80a1518:	f47f af12 	bne.w	80a1340 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a151c:	4600      	mov	r0, r0
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	bf00      	nop
 80a155c:	bf00      	nop
 80a155e:	bf00      	nop
 80a1560:	bf00      	nop
 80a1562:	bf00      	nop
 80a1564:	bf00      	nop
 80a1566:	bf00      	nop
 80a1568:	bf00      	nop
 80a156a:	bf00      	nop
 80a156c:	bf00      	nop
 80a156e:	bf00      	nop
 80a1570:	bf00      	nop
 80a1572:	bf00      	nop
 80a1574:	bf00      	nop
 80a1576:	bf00      	nop
 80a1578:	bf00      	nop
 80a157a:	bf00      	nop
 80a157c:	bf00      	nop
 80a157e:	bf00      	nop
 80a1580:	bf00      	nop
 80a1582:	bf00      	nop
 80a1584:	bf00      	nop
 80a1586:	bf00      	nop
 80a1588:	bf00      	nop
 80a158a:	bf00      	nop
 80a158c:	bf00      	nop
 80a158e:	bf00      	nop
 80a1590:	bf00      	nop
 80a1592:	bf00      	nop
 80a1594:	bf00      	nop
 80a1596:	bf00      	nop
 80a1598:	bf00      	nop
 80a159a:	bf00      	nop
 80a159c:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a159e:	79e3      	ldrb	r3, [r4, #7]
 80a15a0:	6810      	ldr	r0, [r2, #0]
 80a15a2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a15a6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a15aa:	88bf      	ldrh	r7, [r7, #4]
 80a15ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a15b0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a15b2:	4600      	mov	r0, r0
 80a15b4:	bf00      	nop
 80a15b6:	bf00      	nop
 80a15b8:	bf00      	nop
 80a15ba:	bf00      	nop
 80a15bc:	bf00      	nop
 80a15be:	bf00      	nop
 80a15c0:	bf00      	nop
 80a15c2:	bf00      	nop
 80a15c4:	bf00      	nop
 80a15c6:	bf00      	nop
 80a15c8:	bf00      	nop
 80a15ca:	bf00      	nop
 80a15cc:	bf00      	nop
 80a15ce:	bf00      	nop
 80a15d0:	bf00      	nop
 80a15d2:	bf00      	nop
 80a15d4:	bf00      	nop
 80a15d6:	bf00      	nop
 80a15d8:	bf00      	nop
 80a15da:	bf00      	nop
 80a15dc:	bf00      	nop
 80a15de:	bf00      	nop
 80a15e0:	bf00      	nop
 80a15e2:	bf00      	nop
 80a15e4:	bf00      	nop
 80a15e6:	bf00      	nop
 80a15e8:	bf00      	nop
 80a15ea:	bf00      	nop
 80a15ec:	bf00      	nop
 80a15ee:	bf00      	nop
 80a15f0:	bf00      	nop
 80a15f2:	bf00      	nop
 80a15f4:	bf00      	nop
 80a15f6:	bf00      	nop
 80a15f8:	bf00      	nop
 80a15fa:	bf00      	nop
 80a15fc:	bf00      	nop
 80a15fe:	bf00      	nop
 80a1600:	bf00      	nop
 80a1602:	bf00      	nop
 80a1604:	bf00      	nop
 80a1606:	bf00      	nop
 80a1608:	bf00      	nop
 80a160a:	bf00      	nop
 80a160c:	bf00      	nop
 80a160e:	bf00      	nop
 80a1610:	bf00      	nop
 80a1612:	bf00      	nop
 80a1614:	bf00      	nop
 80a1616:	bf00      	nop
 80a1618:	bf00      	nop
 80a161a:	bf00      	nop
 80a161c:	bf00      	nop
 80a161e:	bf00      	nop
 80a1620:	bf00      	nop
 80a1622:	bf00      	nop
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
 80a162c:	bf00      	nop
 80a162e:	bf00      	nop
 80a1630:	bf00      	nop
 80a1632:	bf00      	nop
 80a1634:	bf00      	nop
 80a1636:	bf00      	nop
 80a1638:	bf00      	nop
 80a163a:	bf00      	nop
 80a163c:	bf00      	nop
 80a163e:	bf00      	nop
 80a1640:	bf00      	nop
 80a1642:	bf00      	nop
 80a1644:	bf00      	nop
 80a1646:	bf00      	nop
 80a1648:	bf00      	nop
 80a164a:	bf00      	nop
 80a164c:	bf00      	nop
 80a164e:	bf00      	nop
 80a1650:	bf00      	nop
 80a1652:	bf00      	nop
 80a1654:	bf00      	nop
 80a1656:	bf00      	nop
 80a1658:	bf00      	nop
 80a165a:	bf00      	nop
 80a165c:	bf00      	nop
 80a165e:	bf00      	nop
 80a1660:	bf00      	nop
 80a1662:	bf00      	nop
 80a1664:	bf00      	nop
 80a1666:	bf00      	nop
 80a1668:	bf00      	nop
 80a166a:	bf00      	nop
 80a166c:	bf00      	nop
 80a166e:	bf00      	nop
 80a1670:	bf00      	nop
 80a1672:	bf00      	nop
 80a1674:	bf00      	nop
 80a1676:	bf00      	nop
 80a1678:	bf00      	nop
 80a167a:	bf00      	nop
 80a167c:	bf00      	nop
 80a167e:	bf00      	nop
 80a1680:	bf00      	nop
 80a1682:	bf00      	nop
 80a1684:	bf00      	nop
 80a1686:	bf00      	nop
 80a1688:	bf00      	nop
 80a168a:	bf00      	nop
 80a168c:	bf00      	nop
 80a168e:	bf00      	nop
 80a1690:	bf00      	nop
 80a1692:	bf00      	nop
 80a1694:	bf00      	nop
 80a1696:	bf00      	nop
 80a1698:	bf00      	nop
 80a169a:	bf00      	nop
 80a169c:	bf00      	nop
 80a169e:	bf00      	nop
 80a16a0:	bf00      	nop
 80a16a2:	bf00      	nop
 80a16a4:	bf00      	nop
 80a16a6:	bf00      	nop
 80a16a8:	bf00      	nop
 80a16aa:	bf00      	nop
 80a16ac:	bf00      	nop
 80a16ae:	bf00      	nop
 80a16b0:	bf00      	nop
 80a16b2:	bf00      	nop
 80a16b4:	bf00      	nop
 80a16b6:	bf00      	nop
 80a16b8:	bf00      	nop
 80a16ba:	bf00      	nop
 80a16bc:	bf00      	nop
 80a16be:	bf00      	nop
 80a16c0:	bf00      	nop
 80a16c2:	e710      	b.n	80a14e6 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a16c4:	468e      	mov	lr, r1
 80a16c6:	e60d      	b.n	80a12e4 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a16c8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a16c8:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a16ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a16cc:	428b      	cmp	r3, r1
 80a16ce:	d945      	bls.n	80a175c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a16d0:	7a05      	ldrb	r5, [r0, #8]
 80a16d2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a16d6:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a16da:	b2d6      	uxtb	r6, r2
 80a16dc:	b145      	cbz	r5, 80a16f0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a16de:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a16e0:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a16e2:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a16e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a16e8:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a16ec:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a16f0:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a16f4:	68c7      	ldr	r7, [r0, #12]
 80a16f6:	f1bc 0f06 	cmp.w	ip, #6
 80a16fa:	bf0c      	ite	eq
 80a16fc:	2504      	moveq	r5, #4
 80a16fe:	2503      	movne	r5, #3
 80a1700:	4369      	muls	r1, r5
 80a1702:	f1bc 0f08 	cmp.w	ip, #8
 80a1706:	eb07 0501 	add.w	r5, r7, r1
 80a170a:	d824      	bhi.n	80a1756 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a170c:	f04f 0e01 	mov.w	lr, #1
 80a1710:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a1714:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a1718:	d10c      	bne.n	80a1734 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a171a:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a171e:	d10d      	bne.n	80a173c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a1720:	f01e 0f10 	tst.w	lr, #16
 80a1724:	d017      	beq.n	80a1756 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a1726:	2bff      	cmp	r3, #255	; 0xff
 80a1728:	bf08      	it	eq
 80a172a:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a172c:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a172e:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a1730:	70ac      	strb	r4, [r5, #2]
        } break;
 80a1732:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1734:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a1736:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a1738:	70ae      	strb	r6, [r5, #2]
        } break;
 80a173a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a173c:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a173e:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a1740:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1742:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1744:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1746:	b90b      	cbnz	r3, 80a174c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1748:	b2d2      	uxtb	r2, r2
 80a174a:	e002      	b.n	80a1752 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a174c:	435a      	muls	r2, r3
 80a174e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a1752:	70ea      	strb	r2, [r5, #3]
        } break;
 80a1754:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a1756:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1758:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a175a:	70ae      	strb	r6, [r5, #2]
 80a175c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a175e <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a175e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a1762:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a1766:	4770      	bx	lr

080a1768 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a1768:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a176a:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a176c:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a176e:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a1770:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a1772:	d01e      	beq.n	80a17b2 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a1774:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a1776:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a177a:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a177c:	d00c      	beq.n	80a1798 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a177e:	29ff      	cmp	r1, #255	; 0xff
 80a1780:	bf0f      	iteee	eq
 80a1782:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a1786:	0211      	lslne	r1, r2, #8
 80a1788:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80a178c:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a1790:	bf0c      	ite	eq
 80a1792:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a1796:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a1798:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a179a:	1b29      	subs	r1, r5, r4
 80a179c:	8886      	ldrh	r6, [r0, #4]
 80a179e:	b289      	uxth	r1, r1
 80a17a0:	428e      	cmp	r6, r1
 80a17a2:	d905      	bls.n	80a17b0 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a17a4:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a17a6:	4359      	muls	r1, r3
 80a17a8:	1209      	asrs	r1, r1, #8
 80a17aa:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a17ae:	e7f4      	b.n	80a179a <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a17b0:	7202      	strb	r2, [r0, #8]
 80a17b2:	bd70      	pop	{r4, r5, r6, pc}

080a17b4 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a17b4:	b508      	push	{r3, lr}
 80a17b6:	f000 f827 	bl	80a1808 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a17ba:	f000 f825 	bl	80a1808 <HAL_Pin_Map>
 80a17be:	4b01      	ldr	r3, [pc, #4]	; (80a17c4 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a17c0:	6018      	str	r0, [r3, #0]
 80a17c2:	bd08      	pop	{r3, pc}
 80a17c4:	2000009c 	.word	0x2000009c

080a17c8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a17c8:	b508      	push	{r3, lr}
 80a17ca:	4b02      	ldr	r3, [pc, #8]	; (80a17d4 <os_mutex_create+0xc>)
 80a17cc:	681b      	ldr	r3, [r3, #0]
 80a17ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a17d0:	9301      	str	r3, [sp, #4]
 80a17d2:	bd08      	pop	{r3, pc}
 80a17d4:	080601d0 	.word	0x080601d0

080a17d8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a17d8:	b508      	push	{r3, lr}
 80a17da:	4b02      	ldr	r3, [pc, #8]	; (80a17e4 <HAL_RNG_GetRandomNumber+0xc>)
 80a17dc:	681b      	ldr	r3, [r3, #0]
 80a17de:	685b      	ldr	r3, [r3, #4]
 80a17e0:	9301      	str	r3, [sp, #4]
 80a17e2:	bd08      	pop	{r3, pc}
 80a17e4:	0806019c 	.word	0x0806019c

080a17e8 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a17e8:	b508      	push	{r3, lr}
 80a17ea:	4b02      	ldr	r3, [pc, #8]	; (80a17f4 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a17ec:	681b      	ldr	r3, [r3, #0]
 80a17ee:	691b      	ldr	r3, [r3, #16]
 80a17f0:	9301      	str	r3, [sp, #4]
 80a17f2:	bd08      	pop	{r3, pc}
 80a17f4:	0806019c 	.word	0x0806019c

080a17f8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a17f8:	b508      	push	{r3, lr}
 80a17fa:	4b02      	ldr	r3, [pc, #8]	; (80a1804 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a17fc:	681b      	ldr	r3, [r3, #0]
 80a17fe:	695b      	ldr	r3, [r3, #20]
 80a1800:	9301      	str	r3, [sp, #4]
 80a1802:	bd08      	pop	{r3, pc}
 80a1804:	0806019c 	.word	0x0806019c

080a1808 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1808:	b508      	push	{r3, lr}
 80a180a:	4b02      	ldr	r3, [pc, #8]	; (80a1814 <HAL_Pin_Map+0xc>)
 80a180c:	681b      	ldr	r3, [r3, #0]
 80a180e:	681b      	ldr	r3, [r3, #0]
 80a1810:	9301      	str	r3, [sp, #4]
 80a1812:	bd08      	pop	{r3, pc}
 80a1814:	080601b0 	.word	0x080601b0

080a1818 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1818:	b508      	push	{r3, lr}
 80a181a:	4b02      	ldr	r3, [pc, #8]	; (80a1824 <HAL_Pin_Mode+0xc>)
 80a181c:	681b      	ldr	r3, [r3, #0]
 80a181e:	689b      	ldr	r3, [r3, #8]
 80a1820:	9301      	str	r3, [sp, #4]
 80a1822:	bd08      	pop	{r3, pc}
 80a1824:	080601b0 	.word	0x080601b0

080a1828 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1828:	b508      	push	{r3, lr}
 80a182a:	4b02      	ldr	r3, [pc, #8]	; (80a1834 <HAL_Get_Pin_Mode+0xc>)
 80a182c:	681b      	ldr	r3, [r3, #0]
 80a182e:	68db      	ldr	r3, [r3, #12]
 80a1830:	9301      	str	r3, [sp, #4]
 80a1832:	bd08      	pop	{r3, pc}
 80a1834:	080601b0 	.word	0x080601b0

080a1838 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1838:	b508      	push	{r3, lr}
 80a183a:	4b02      	ldr	r3, [pc, #8]	; (80a1844 <HAL_GPIO_Write+0xc>)
 80a183c:	681b      	ldr	r3, [r3, #0]
 80a183e:	691b      	ldr	r3, [r3, #16]
 80a1840:	9301      	str	r3, [sp, #4]
 80a1842:	bd08      	pop	{r3, pc}
 80a1844:	080601b0 	.word	0x080601b0

080a1848 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a1848:	b508      	push	{r3, lr}
 80a184a:	4b02      	ldr	r3, [pc, #8]	; (80a1854 <HAL_I2C_Begin+0xc>)
 80a184c:	681b      	ldr	r3, [r3, #0]
 80a184e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1850:	9301      	str	r3, [sp, #4]
 80a1852:	bd08      	pop	{r3, pc}
 80a1854:	080601ac 	.word	0x080601ac

080a1858 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a1858:	b508      	push	{r3, lr}
 80a185a:	4b02      	ldr	r3, [pc, #8]	; (80a1864 <HAL_I2C_Request_Data+0xc>)
 80a185c:	681b      	ldr	r3, [r3, #0]
 80a185e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1860:	9301      	str	r3, [sp, #4]
 80a1862:	bd08      	pop	{r3, pc}
 80a1864:	080601ac 	.word	0x080601ac

080a1868 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a1868:	b508      	push	{r3, lr}
 80a186a:	4b02      	ldr	r3, [pc, #8]	; (80a1874 <HAL_I2C_Begin_Transmission+0xc>)
 80a186c:	681b      	ldr	r3, [r3, #0]
 80a186e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1870:	9301      	str	r3, [sp, #4]
 80a1872:	bd08      	pop	{r3, pc}
 80a1874:	080601ac 	.word	0x080601ac

080a1878 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a1878:	b508      	push	{r3, lr}
 80a187a:	4b02      	ldr	r3, [pc, #8]	; (80a1884 <HAL_I2C_End_Transmission+0xc>)
 80a187c:	681b      	ldr	r3, [r3, #0]
 80a187e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1880:	9301      	str	r3, [sp, #4]
 80a1882:	bd08      	pop	{r3, pc}
 80a1884:	080601ac 	.word	0x080601ac

080a1888 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1888:	b508      	push	{r3, lr}
 80a188a:	4b02      	ldr	r3, [pc, #8]	; (80a1894 <HAL_I2C_Write_Data+0xc>)
 80a188c:	681b      	ldr	r3, [r3, #0]
 80a188e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1890:	9301      	str	r3, [sp, #4]
 80a1892:	bd08      	pop	{r3, pc}
 80a1894:	080601ac 	.word	0x080601ac

080a1898 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1898:	b508      	push	{r3, lr}
 80a189a:	4b02      	ldr	r3, [pc, #8]	; (80a18a4 <HAL_I2C_Available_Data+0xc>)
 80a189c:	681b      	ldr	r3, [r3, #0]
 80a189e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a18a0:	9301      	str	r3, [sp, #4]
 80a18a2:	bd08      	pop	{r3, pc}
 80a18a4:	080601ac 	.word	0x080601ac

080a18a8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a18a8:	b508      	push	{r3, lr}
 80a18aa:	4b02      	ldr	r3, [pc, #8]	; (80a18b4 <HAL_I2C_Read_Data+0xc>)
 80a18ac:	681b      	ldr	r3, [r3, #0]
 80a18ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a18b0:	9301      	str	r3, [sp, #4]
 80a18b2:	bd08      	pop	{r3, pc}
 80a18b4:	080601ac 	.word	0x080601ac

080a18b8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a18b8:	b508      	push	{r3, lr}
 80a18ba:	4b02      	ldr	r3, [pc, #8]	; (80a18c4 <HAL_I2C_Peek_Data+0xc>)
 80a18bc:	681b      	ldr	r3, [r3, #0]
 80a18be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a18c0:	9301      	str	r3, [sp, #4]
 80a18c2:	bd08      	pop	{r3, pc}
 80a18c4:	080601ac 	.word	0x080601ac

080a18c8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a18c8:	b508      	push	{r3, lr}
 80a18ca:	4b02      	ldr	r3, [pc, #8]	; (80a18d4 <HAL_I2C_Flush_Data+0xc>)
 80a18cc:	681b      	ldr	r3, [r3, #0]
 80a18ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a18d0:	9301      	str	r3, [sp, #4]
 80a18d2:	bd08      	pop	{r3, pc}
 80a18d4:	080601ac 	.word	0x080601ac

080a18d8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a18d8:	b508      	push	{r3, lr}
 80a18da:	4b02      	ldr	r3, [pc, #8]	; (80a18e4 <HAL_I2C_Is_Enabled+0xc>)
 80a18dc:	681b      	ldr	r3, [r3, #0]
 80a18de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a18e0:	9301      	str	r3, [sp, #4]
 80a18e2:	bd08      	pop	{r3, pc}
 80a18e4:	080601ac 	.word	0x080601ac

080a18e8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a18e8:	b508      	push	{r3, lr}
 80a18ea:	4b03      	ldr	r3, [pc, #12]	; (80a18f8 <HAL_I2C_Init+0x10>)
 80a18ec:	681b      	ldr	r3, [r3, #0]
 80a18ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a18f2:	9301      	str	r3, [sp, #4]
 80a18f4:	bd08      	pop	{r3, pc}
 80a18f6:	0000      	.short	0x0000
 80a18f8:	080601ac 	.word	0x080601ac

080a18fc <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a18fc:	b508      	push	{r3, lr}
 80a18fe:	4b02      	ldr	r3, [pc, #8]	; (80a1908 <HAL_SPI_Init+0xc>)
 80a1900:	681b      	ldr	r3, [r3, #0]
 80a1902:	69db      	ldr	r3, [r3, #28]
 80a1904:	9301      	str	r3, [sp, #4]
 80a1906:	bd08      	pop	{r3, pc}
 80a1908:	080601b4 	.word	0x080601b4

080a190c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a190c:	b508      	push	{r3, lr}
 80a190e:	4b02      	ldr	r3, [pc, #8]	; (80a1918 <HAL_SPI_Is_Enabled+0xc>)
 80a1910:	681b      	ldr	r3, [r3, #0]
 80a1912:	6a1b      	ldr	r3, [r3, #32]
 80a1914:	9301      	str	r3, [sp, #4]
 80a1916:	bd08      	pop	{r3, pc}
 80a1918:	080601b4 	.word	0x080601b4

080a191c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a191c:	b508      	push	{r3, lr}
 80a191e:	4b02      	ldr	r3, [pc, #8]	; (80a1928 <HAL_USART_Init+0xc>)
 80a1920:	681b      	ldr	r3, [r3, #0]
 80a1922:	699b      	ldr	r3, [r3, #24]
 80a1924:	9301      	str	r3, [sp, #4]
 80a1926:	bd08      	pop	{r3, pc}
 80a1928:	080601c4 	.word	0x080601c4

080a192c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a192c:	b508      	push	{r3, lr}
 80a192e:	4b02      	ldr	r3, [pc, #8]	; (80a1938 <HAL_USART_Write_Data+0xc>)
 80a1930:	681b      	ldr	r3, [r3, #0]
 80a1932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1934:	9301      	str	r3, [sp, #4]
 80a1936:	bd08      	pop	{r3, pc}
 80a1938:	080601c4 	.word	0x080601c4

080a193c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a193c:	b508      	push	{r3, lr}
 80a193e:	4b02      	ldr	r3, [pc, #8]	; (80a1948 <HAL_USART_Available_Data+0xc>)
 80a1940:	681b      	ldr	r3, [r3, #0]
 80a1942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1944:	9301      	str	r3, [sp, #4]
 80a1946:	bd08      	pop	{r3, pc}
 80a1948:	080601c4 	.word	0x080601c4

080a194c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a194c:	b508      	push	{r3, lr}
 80a194e:	4b02      	ldr	r3, [pc, #8]	; (80a1958 <HAL_USART_Read_Data+0xc>)
 80a1950:	681b      	ldr	r3, [r3, #0]
 80a1952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1954:	9301      	str	r3, [sp, #4]
 80a1956:	bd08      	pop	{r3, pc}
 80a1958:	080601c4 	.word	0x080601c4

080a195c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a195c:	b508      	push	{r3, lr}
 80a195e:	4b02      	ldr	r3, [pc, #8]	; (80a1968 <HAL_USART_Peek_Data+0xc>)
 80a1960:	681b      	ldr	r3, [r3, #0]
 80a1962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1964:	9301      	str	r3, [sp, #4]
 80a1966:	bd08      	pop	{r3, pc}
 80a1968:	080601c4 	.word	0x080601c4

080a196c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a196c:	b508      	push	{r3, lr}
 80a196e:	4b02      	ldr	r3, [pc, #8]	; (80a1978 <HAL_USART_Flush_Data+0xc>)
 80a1970:	681b      	ldr	r3, [r3, #0]
 80a1972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1974:	9301      	str	r3, [sp, #4]
 80a1976:	bd08      	pop	{r3, pc}
 80a1978:	080601c4 	.word	0x080601c4

080a197c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a197c:	b508      	push	{r3, lr}
 80a197e:	4b02      	ldr	r3, [pc, #8]	; (80a1988 <HAL_USART_Is_Enabled+0xc>)
 80a1980:	681b      	ldr	r3, [r3, #0]
 80a1982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1984:	9301      	str	r3, [sp, #4]
 80a1986:	bd08      	pop	{r3, pc}
 80a1988:	080601c4 	.word	0x080601c4

080a198c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a198c:	b508      	push	{r3, lr}
 80a198e:	4b02      	ldr	r3, [pc, #8]	; (80a1998 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1990:	681b      	ldr	r3, [r3, #0]
 80a1992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1994:	9301      	str	r3, [sp, #4]
 80a1996:	bd08      	pop	{r3, pc}
 80a1998:	080601c4 	.word	0x080601c4

080a199c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a199c:	b508      	push	{r3, lr}
 80a199e:	4b02      	ldr	r3, [pc, #8]	; (80a19a8 <HAL_USB_USART_Init+0xc>)
 80a19a0:	681b      	ldr	r3, [r3, #0]
 80a19a2:	681b      	ldr	r3, [r3, #0]
 80a19a4:	9301      	str	r3, [sp, #4]
 80a19a6:	bd08      	pop	{r3, pc}
 80a19a8:	080601d8 	.word	0x080601d8

080a19ac <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a19ac:	b508      	push	{r3, lr}
 80a19ae:	4b02      	ldr	r3, [pc, #8]	; (80a19b8 <HAL_USB_USART_Available_Data+0xc>)
 80a19b0:	681b      	ldr	r3, [r3, #0]
 80a19b2:	691b      	ldr	r3, [r3, #16]
 80a19b4:	9301      	str	r3, [sp, #4]
 80a19b6:	bd08      	pop	{r3, pc}
 80a19b8:	080601d8 	.word	0x080601d8

080a19bc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a19bc:	b508      	push	{r3, lr}
 80a19be:	4b02      	ldr	r3, [pc, #8]	; (80a19c8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a19c0:	681b      	ldr	r3, [r3, #0]
 80a19c2:	695b      	ldr	r3, [r3, #20]
 80a19c4:	9301      	str	r3, [sp, #4]
 80a19c6:	bd08      	pop	{r3, pc}
 80a19c8:	080601d8 	.word	0x080601d8

080a19cc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a19cc:	b508      	push	{r3, lr}
 80a19ce:	4b02      	ldr	r3, [pc, #8]	; (80a19d8 <HAL_USB_USART_Receive_Data+0xc>)
 80a19d0:	681b      	ldr	r3, [r3, #0]
 80a19d2:	699b      	ldr	r3, [r3, #24]
 80a19d4:	9301      	str	r3, [sp, #4]
 80a19d6:	bd08      	pop	{r3, pc}
 80a19d8:	080601d8 	.word	0x080601d8

080a19dc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a19dc:	b508      	push	{r3, lr}
 80a19de:	4b02      	ldr	r3, [pc, #8]	; (80a19e8 <HAL_USB_USART_Send_Data+0xc>)
 80a19e0:	681b      	ldr	r3, [r3, #0]
 80a19e2:	69db      	ldr	r3, [r3, #28]
 80a19e4:	9301      	str	r3, [sp, #4]
 80a19e6:	bd08      	pop	{r3, pc}
 80a19e8:	080601d8 	.word	0x080601d8

080a19ec <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a19ec:	b508      	push	{r3, lr}
 80a19ee:	4b02      	ldr	r3, [pc, #8]	; (80a19f8 <HAL_USB_USART_Flush_Data+0xc>)
 80a19f0:	681b      	ldr	r3, [r3, #0]
 80a19f2:	6a1b      	ldr	r3, [r3, #32]
 80a19f4:	9301      	str	r3, [sp, #4]
 80a19f6:	bd08      	pop	{r3, pc}
 80a19f8:	080601d8 	.word	0x080601d8

080a19fc <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a19fc:	b508      	push	{r3, lr}
 80a19fe:	4b02      	ldr	r3, [pc, #8]	; (80a1a08 <inet_gethostbyname+0xc>)
 80a1a00:	681b      	ldr	r3, [r3, #0]
 80a1a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1a04:	9301      	str	r3, [sp, #4]
 80a1a06:	bd08      	pop	{r3, pc}
 80a1a08:	080601c0 	.word	0x080601c0

080a1a0c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1a0c:	b508      	push	{r3, lr}
 80a1a0e:	4b02      	ldr	r3, [pc, #8]	; (80a1a18 <set_system_mode+0xc>)
 80a1a10:	681b      	ldr	r3, [r3, #0]
 80a1a12:	685b      	ldr	r3, [r3, #4]
 80a1a14:	9301      	str	r3, [sp, #4]
 80a1a16:	bd08      	pop	{r3, pc}
 80a1a18:	080601a4 	.word	0x080601a4

080a1a1c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1a1c:	b508      	push	{r3, lr}
 80a1a1e:	4b02      	ldr	r3, [pc, #8]	; (80a1a28 <system_delay_ms+0xc>)
 80a1a20:	681b      	ldr	r3, [r3, #0]
 80a1a22:	695b      	ldr	r3, [r3, #20]
 80a1a24:	9301      	str	r3, [sp, #4]
 80a1a26:	bd08      	pop	{r3, pc}
 80a1a28:	080601a4 	.word	0x080601a4

080a1a2c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1a2c:	b508      	push	{r3, lr}
 80a1a2e:	4b03      	ldr	r3, [pc, #12]	; (80a1a3c <system_ctrl_set_app_request_handler+0x10>)
 80a1a30:	681b      	ldr	r3, [r3, #0]
 80a1a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1a36:	9301      	str	r3, [sp, #4]
 80a1a38:	bd08      	pop	{r3, pc}
 80a1a3a:	0000      	.short	0x0000
 80a1a3c:	080601a4 	.word	0x080601a4

080a1a40 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1a40:	b508      	push	{r3, lr}
 80a1a42:	4b03      	ldr	r3, [pc, #12]	; (80a1a50 <system_ctrl_set_result+0x10>)
 80a1a44:	681b      	ldr	r3, [r3, #0]
 80a1a46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1a4a:	9301      	str	r3, [sp, #4]
 80a1a4c:	bd08      	pop	{r3, pc}
 80a1a4e:	0000      	.short	0x0000
 80a1a50:	080601a4 	.word	0x080601a4

080a1a54 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1a54:	b508      	push	{r3, lr}
 80a1a56:	4b02      	ldr	r3, [pc, #8]	; (80a1a60 <spark_process+0xc>)
 80a1a58:	681b      	ldr	r3, [r3, #0]
 80a1a5a:	689b      	ldr	r3, [r3, #8]
 80a1a5c:	9301      	str	r3, [sp, #4]
 80a1a5e:	bd08      	pop	{r3, pc}
 80a1a60:	080601cc 	.word	0x080601cc

080a1a64 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1a64:	b508      	push	{r3, lr}
 80a1a66:	4b02      	ldr	r3, [pc, #8]	; (80a1a70 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1a68:	681b      	ldr	r3, [r3, #0]
 80a1a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1a6c:	9301      	str	r3, [sp, #4]
 80a1a6e:	bd08      	pop	{r3, pc}
 80a1a70:	080601cc 	.word	0x080601cc

080a1a74 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1a74:	b508      	push	{r3, lr}
 80a1a76:	4b02      	ldr	r3, [pc, #8]	; (80a1a80 <network_connect+0xc>)
 80a1a78:	681b      	ldr	r3, [r3, #0]
 80a1a7a:	685b      	ldr	r3, [r3, #4]
 80a1a7c:	9301      	str	r3, [sp, #4]
 80a1a7e:	bd08      	pop	{r3, pc}
 80a1a80:	080601c8 	.word	0x080601c8

080a1a84 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1a84:	b508      	push	{r3, lr}
 80a1a86:	4b02      	ldr	r3, [pc, #8]	; (80a1a90 <network_connecting+0xc>)
 80a1a88:	681b      	ldr	r3, [r3, #0]
 80a1a8a:	689b      	ldr	r3, [r3, #8]
 80a1a8c:	9301      	str	r3, [sp, #4]
 80a1a8e:	bd08      	pop	{r3, pc}
 80a1a90:	080601c8 	.word	0x080601c8

080a1a94 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1a94:	b508      	push	{r3, lr}
 80a1a96:	4b02      	ldr	r3, [pc, #8]	; (80a1aa0 <network_disconnect+0xc>)
 80a1a98:	681b      	ldr	r3, [r3, #0]
 80a1a9a:	68db      	ldr	r3, [r3, #12]
 80a1a9c:	9301      	str	r3, [sp, #4]
 80a1a9e:	bd08      	pop	{r3, pc}
 80a1aa0:	080601c8 	.word	0x080601c8

080a1aa4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1aa4:	b508      	push	{r3, lr}
 80a1aa6:	4b02      	ldr	r3, [pc, #8]	; (80a1ab0 <network_ready+0xc>)
 80a1aa8:	681b      	ldr	r3, [r3, #0]
 80a1aaa:	691b      	ldr	r3, [r3, #16]
 80a1aac:	9301      	str	r3, [sp, #4]
 80a1aae:	bd08      	pop	{r3, pc}
 80a1ab0:	080601c8 	.word	0x080601c8

080a1ab4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1ab4:	b508      	push	{r3, lr}
 80a1ab6:	4b02      	ldr	r3, [pc, #8]	; (80a1ac0 <network_on+0xc>)
 80a1ab8:	681b      	ldr	r3, [r3, #0]
 80a1aba:	695b      	ldr	r3, [r3, #20]
 80a1abc:	9301      	str	r3, [sp, #4]
 80a1abe:	bd08      	pop	{r3, pc}
 80a1ac0:	080601c8 	.word	0x080601c8

080a1ac4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1ac4:	b508      	push	{r3, lr}
 80a1ac6:	4b02      	ldr	r3, [pc, #8]	; (80a1ad0 <network_off+0xc>)
 80a1ac8:	681b      	ldr	r3, [r3, #0]
 80a1aca:	699b      	ldr	r3, [r3, #24]
 80a1acc:	9301      	str	r3, [sp, #4]
 80a1ace:	bd08      	pop	{r3, pc}
 80a1ad0:	080601c8 	.word	0x080601c8

080a1ad4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1ad4:	b508      	push	{r3, lr}
 80a1ad6:	4b02      	ldr	r3, [pc, #8]	; (80a1ae0 <network_listen+0xc>)
 80a1ad8:	681b      	ldr	r3, [r3, #0]
 80a1ada:	69db      	ldr	r3, [r3, #28]
 80a1adc:	9301      	str	r3, [sp, #4]
 80a1ade:	bd08      	pop	{r3, pc}
 80a1ae0:	080601c8 	.word	0x080601c8

080a1ae4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1ae4:	b508      	push	{r3, lr}
 80a1ae6:	4b02      	ldr	r3, [pc, #8]	; (80a1af0 <network_listening+0xc>)
 80a1ae8:	681b      	ldr	r3, [r3, #0]
 80a1aea:	6a1b      	ldr	r3, [r3, #32]
 80a1aec:	9301      	str	r3, [sp, #4]
 80a1aee:	bd08      	pop	{r3, pc}
 80a1af0:	080601c8 	.word	0x080601c8

080a1af4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1af4:	b508      	push	{r3, lr}
 80a1af6:	4b02      	ldr	r3, [pc, #8]	; (80a1b00 <network_set_listen_timeout+0xc>)
 80a1af8:	681b      	ldr	r3, [r3, #0]
 80a1afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1afc:	9301      	str	r3, [sp, #4]
 80a1afe:	bd08      	pop	{r3, pc}
 80a1b00:	080601c8 	.word	0x080601c8

080a1b04 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1b04:	b508      	push	{r3, lr}
 80a1b06:	4b02      	ldr	r3, [pc, #8]	; (80a1b10 <network_get_listen_timeout+0xc>)
 80a1b08:	681b      	ldr	r3, [r3, #0]
 80a1b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1b0c:	9301      	str	r3, [sp, #4]
 80a1b0e:	bd08      	pop	{r3, pc}
 80a1b10:	080601c8 	.word	0x080601c8

080a1b14 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1b14:	b508      	push	{r3, lr}
 80a1b16:	4b02      	ldr	r3, [pc, #8]	; (80a1b20 <malloc+0xc>)
 80a1b18:	681b      	ldr	r3, [r3, #0]
 80a1b1a:	681b      	ldr	r3, [r3, #0]
 80a1b1c:	9301      	str	r3, [sp, #4]
 80a1b1e:	bd08      	pop	{r3, pc}
 80a1b20:	080601a0 	.word	0x080601a0

080a1b24 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1b24:	b508      	push	{r3, lr}
 80a1b26:	4b02      	ldr	r3, [pc, #8]	; (80a1b30 <free+0xc>)
 80a1b28:	681b      	ldr	r3, [r3, #0]
 80a1b2a:	685b      	ldr	r3, [r3, #4]
 80a1b2c:	9301      	str	r3, [sp, #4]
 80a1b2e:	bd08      	pop	{r3, pc}
 80a1b30:	080601a0 	.word	0x080601a0

080a1b34 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1b34:	2100      	movs	r1, #0
 80a1b36:	f7ff bf71 	b.w	80a1a1c <system_delay_ms>

080a1b3a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1b3a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1b3c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1b3e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1b40:	b113      	cbz	r3, 80a1b48 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1b42:	2203      	movs	r2, #3
 80a1b44:	4601      	mov	r1, r0
 80a1b46:	4798      	blx	r3
    }
 80a1b48:	4620      	mov	r0, r4
 80a1b4a:	bd10      	pop	{r4, pc}

080a1b4c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1b4c:	4770      	bx	lr

080a1b4e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1b50:	4606      	mov	r6, r0
 80a1b52:	4615      	mov	r5, r2
 80a1b54:	460c      	mov	r4, r1
 80a1b56:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1b58:	42bc      	cmp	r4, r7
 80a1b5a:	d006      	beq.n	80a1b6a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1b5c:	6833      	ldr	r3, [r6, #0]
 80a1b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1b62:	689b      	ldr	r3, [r3, #8]
 80a1b64:	4630      	mov	r0, r6
 80a1b66:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1b68:	e7f6      	b.n	80a1b58 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1b6a:	4628      	mov	r0, r5
 80a1b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1b6e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1b6e:	2200      	movs	r2, #0
 80a1b70:	7c00      	ldrb	r0, [r0, #16]
 80a1b72:	f7ff be89 	b.w	80a1888 <HAL_I2C_Write_Data>

080a1b76 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1b76:	2100      	movs	r1, #0
 80a1b78:	7c00      	ldrb	r0, [r0, #16]
 80a1b7a:	f7ff be8d 	b.w	80a1898 <HAL_I2C_Available_Data>

080a1b7e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1b7e:	2100      	movs	r1, #0
 80a1b80:	7c00      	ldrb	r0, [r0, #16]
 80a1b82:	f7ff be91 	b.w	80a18a8 <HAL_I2C_Read_Data>

080a1b86 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1b86:	2100      	movs	r1, #0
 80a1b88:	7c00      	ldrb	r0, [r0, #16]
 80a1b8a:	f7ff be95 	b.w	80a18b8 <HAL_I2C_Peek_Data>

080a1b8e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1b8e:	2100      	movs	r1, #0
 80a1b90:	7c00      	ldrb	r0, [r0, #16]
 80a1b92:	f7ff be99 	b.w	80a18c8 <HAL_I2C_Flush_Data>

080a1b96 <_ZN7TwoWireD0Ev>:
 80a1b96:	b510      	push	{r4, lr}
 80a1b98:	4604      	mov	r4, r0
 80a1b9a:	2114      	movs	r1, #20
 80a1b9c:	f000 fcb9 	bl	80a2512 <_ZdlPvj>
 80a1ba0:	4620      	mov	r0, r4
 80a1ba2:	bd10      	pop	{r4, pc}

080a1ba4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1ba4:	b510      	push	{r4, lr}
 80a1ba6:	4604      	mov	r4, r0
 80a1ba8:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1bae:	60a3      	str	r3, [r4, #8]
 80a1bb0:	4b04      	ldr	r3, [pc, #16]	; (80a1bc4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1bb2:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1bb4:	7420      	strb	r0, [r4, #16]
 80a1bb6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1bb8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1bba:	f7ff fe95 	bl	80a18e8 <HAL_I2C_Init>

}
 80a1bbe:	4620      	mov	r0, r4
 80a1bc0:	bd10      	pop	{r4, pc}
 80a1bc2:	bf00      	nop
 80a1bc4:	080a28ac 	.word	0x080a28ac

080a1bc8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1bc8:	2300      	movs	r3, #0
 80a1bca:	461a      	mov	r2, r3
 80a1bcc:	4619      	mov	r1, r3
 80a1bce:	7c00      	ldrb	r0, [r0, #16]
 80a1bd0:	f7ff be3a 	b.w	80a1848 <HAL_I2C_Begin>

080a1bd4 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a1bd4:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a1bd6:	2400      	movs	r4, #0
 80a1bd8:	7c00      	ldrb	r0, [r0, #16]
 80a1bda:	9400      	str	r4, [sp, #0]
 80a1bdc:	f7ff fe3c 	bl	80a1858 <HAL_I2C_Request_Data>
  return result;
}
 80a1be0:	b2c0      	uxtb	r0, r0
 80a1be2:	b002      	add	sp, #8
 80a1be4:	bd10      	pop	{r4, pc}

080a1be6 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a1be6:	2301      	movs	r3, #1
 80a1be8:	b2d2      	uxtb	r2, r2
 80a1bea:	b2c9      	uxtb	r1, r1
 80a1bec:	f7ff bff2 	b.w	80a1bd4 <_ZN7TwoWire11requestFromEhhh>

080a1bf0 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a1bf0:	2200      	movs	r2, #0
 80a1bf2:	7c00      	ldrb	r0, [r0, #16]
 80a1bf4:	f7ff be38 	b.w	80a1868 <HAL_I2C_Begin_Transmission>

080a1bf8 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a1bf8:	b2c9      	uxtb	r1, r1
 80a1bfa:	f7ff bff9 	b.w	80a1bf0 <_ZN7TwoWire17beginTransmissionEh>

080a1bfe <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a1bfe:	2200      	movs	r2, #0
 80a1c00:	7c00      	ldrb	r0, [r0, #16]
 80a1c02:	f7ff be39 	b.w	80a1878 <HAL_I2C_End_Transmission>

080a1c06 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a1c06:	2101      	movs	r1, #1
 80a1c08:	f7ff bff9 	b.w	80a1bfe <_ZN7TwoWire15endTransmissionEh>

080a1c0c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1c0c:	2100      	movs	r1, #0
 80a1c0e:	7c00      	ldrb	r0, [r0, #16]
 80a1c10:	f7ff be62 	b.w	80a18d8 <HAL_I2C_Is_Enabled>

080a1c14 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1c14:	4770      	bx	lr

080a1c16 <_ZN9IPAddressD0Ev>:
 80a1c16:	b510      	push	{r4, lr}
 80a1c18:	4604      	mov	r4, r0
 80a1c1a:	2118      	movs	r1, #24
 80a1c1c:	f000 fc79 	bl	80a2512 <_ZdlPvj>
 80a1c20:	4620      	mov	r0, r4
 80a1c22:	bd10      	pop	{r4, pc}

080a1c24 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c26:	460f      	mov	r7, r1
 80a1c28:	f100 0608 	add.w	r6, r0, #8
 80a1c2c:	1d05      	adds	r5, r0, #4
 80a1c2e:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1c30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1c34:	220a      	movs	r2, #10
 80a1c36:	4638      	mov	r0, r7
 80a1c38:	f000 f927 	bl	80a1e8a <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1c3c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1c3e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1c40:	d007      	beq.n	80a1c52 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1c42:	2c00      	cmp	r4, #0
 80a1c44:	d0f4      	beq.n	80a1c30 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1c46:	212e      	movs	r1, #46	; 0x2e
 80a1c48:	4638      	mov	r0, r7
 80a1c4a:	f000 f8db 	bl	80a1e04 <_ZN5Print5printEc>
 80a1c4e:	4404      	add	r4, r0
 80a1c50:	e7ee      	b.n	80a1c30 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1c52:	4620      	mov	r0, r4
 80a1c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1c58 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1c58:	b510      	push	{r4, lr}
 80a1c5a:	4604      	mov	r4, r0
 80a1c5c:	4b04      	ldr	r3, [pc, #16]	; (80a1c70 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1c5e:	2211      	movs	r2, #17
 80a1c60:	f840 3b04 	str.w	r3, [r0], #4
 80a1c64:	2100      	movs	r1, #0
 80a1c66:	f000 fdb8 	bl	80a27da <memset>
{
    clear();
}
 80a1c6a:	4620      	mov	r0, r4
 80a1c6c:	bd10      	pop	{r4, pc}
 80a1c6e:	bf00      	nop
 80a1c70:	080a28d4 	.word	0x080a28d4

080a1c74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1c74:	4603      	mov	r3, r0
 80a1c76:	4a07      	ldr	r2, [pc, #28]	; (80a1c94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1c78:	b510      	push	{r4, lr}
 80a1c7a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1c7e:	f101 0210 	add.w	r2, r1, #16
 80a1c82:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1c86:	4291      	cmp	r1, r2
 80a1c88:	f843 4b04 	str.w	r4, [r3], #4
 80a1c8c:	d1f9      	bne.n	80a1c82 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1c8e:	780a      	ldrb	r2, [r1, #0]
 80a1c90:	701a      	strb	r2, [r3, #0]
}
 80a1c92:	bd10      	pop	{r4, pc}
 80a1c94:	080a28d4 	.word	0x080a28d4

080a1c98 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1c98:	4a02      	ldr	r2, [pc, #8]	; (80a1ca4 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1c9a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1c9c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1c9e:	2204      	movs	r2, #4
 80a1ca0:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1ca2:	4770      	bx	lr
 80a1ca4:	080a28d4 	.word	0x080a28d4

080a1ca8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1ca8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1caa:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1cae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1cb2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1cb6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1cba:	2304      	movs	r3, #4
 80a1cbc:	6041      	str	r1, [r0, #4]
 80a1cbe:	7503      	strb	r3, [r0, #20]
 80a1cc0:	bd10      	pop	{r4, pc}
	...

080a1cc4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1cc6:	4d04      	ldr	r5, [pc, #16]	; (80a1cd8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1cc8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1cca:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1cce:	9500      	str	r5, [sp, #0]
 80a1cd0:	f7ff ffea 	bl	80a1ca8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1cd4:	b003      	add	sp, #12
 80a1cd6:	bd30      	pop	{r4, r5, pc}
 80a1cd8:	080a28d4 	.word	0x080a28d4

080a1cdc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1cdc:	4a01      	ldr	r2, [pc, #4]	; (80a1ce4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1cde:	4b02      	ldr	r3, [pc, #8]	; (80a1ce8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1ce0:	601a      	str	r2, [r3, #0]
 80a1ce2:	4770      	bx	lr
 80a1ce4:	080a2956 	.word	0x080a2956
 80a1ce8:	200000a0 	.word	0x200000a0

080a1cec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1cec:	2300      	movs	r3, #0
 80a1cee:	461a      	mov	r2, r3
 80a1cf0:	6840      	ldr	r0, [r0, #4]
 80a1cf2:	f7ff bebf 	b.w	80a1a74 <network_connect>

080a1cf6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1cf6:	2200      	movs	r2, #0
 80a1cf8:	2102      	movs	r1, #2
 80a1cfa:	6840      	ldr	r0, [r0, #4]
 80a1cfc:	f7ff beca 	b.w	80a1a94 <network_disconnect>

080a1d00 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1d00:	2200      	movs	r2, #0
 80a1d02:	4611      	mov	r1, r2
 80a1d04:	6840      	ldr	r0, [r0, #4]
 80a1d06:	f7ff bebd 	b.w	80a1a84 <network_connecting>

080a1d0a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1d0a:	2200      	movs	r2, #0
 80a1d0c:	4611      	mov	r1, r2
 80a1d0e:	6840      	ldr	r0, [r0, #4]
 80a1d10:	f7ff bec8 	b.w	80a1aa4 <network_ready>

080a1d14 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1d14:	2300      	movs	r3, #0
 80a1d16:	461a      	mov	r2, r3
 80a1d18:	4619      	mov	r1, r3
 80a1d1a:	6840      	ldr	r0, [r0, #4]
 80a1d1c:	f7ff beca 	b.w	80a1ab4 <network_on>

080a1d20 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1d20:	2300      	movs	r3, #0
 80a1d22:	461a      	mov	r2, r3
 80a1d24:	4619      	mov	r1, r3
 80a1d26:	6840      	ldr	r0, [r0, #4]
 80a1d28:	f7ff becc 	b.w	80a1ac4 <network_off>

080a1d2c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1d2c:	2200      	movs	r2, #0
 80a1d2e:	f081 0101 	eor.w	r1, r1, #1
 80a1d32:	6840      	ldr	r0, [r0, #4]
 80a1d34:	f7ff bece 	b.w	80a1ad4 <network_listen>

080a1d38 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1d38:	2200      	movs	r2, #0
 80a1d3a:	6840      	ldr	r0, [r0, #4]
 80a1d3c:	f7ff beda 	b.w	80a1af4 <network_set_listen_timeout>

080a1d40 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1d40:	2200      	movs	r2, #0
 80a1d42:	4611      	mov	r1, r2
 80a1d44:	6840      	ldr	r0, [r0, #4]
 80a1d46:	f7ff bedd 	b.w	80a1b04 <network_get_listen_timeout>

080a1d4a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1d4a:	2200      	movs	r2, #0
 80a1d4c:	4611      	mov	r1, r2
 80a1d4e:	6840      	ldr	r0, [r0, #4]
 80a1d50:	f7ff bec8 	b.w	80a1ae4 <network_listening>

080a1d54 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1d54:	b570      	push	{r4, r5, r6, lr}
 80a1d56:	4616      	mov	r6, r2
 80a1d58:	b08e      	sub	sp, #56	; 0x38
 80a1d5a:	4604      	mov	r4, r0
    IPAddress addr;
 80a1d5c:	a808      	add	r0, sp, #32
 80a1d5e:	f7ff ff7b 	bl	80a1c58 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1d62:	2211      	movs	r2, #17
 80a1d64:	2100      	movs	r1, #0
 80a1d66:	a803      	add	r0, sp, #12
 80a1d68:	f000 fd37 	bl	80a27da <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1d6c:	4630      	mov	r0, r6
 80a1d6e:	f000 fd65 	bl	80a283c <strlen>
 80a1d72:	2500      	movs	r5, #0
 80a1d74:	4b0a      	ldr	r3, [pc, #40]	; (80a1da0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1d76:	9500      	str	r5, [sp, #0]
 80a1d78:	b281      	uxth	r1, r0
 80a1d7a:	685b      	ldr	r3, [r3, #4]
 80a1d7c:	aa03      	add	r2, sp, #12
 80a1d7e:	4630      	mov	r0, r6
 80a1d80:	f7ff fe3c 	bl	80a19fc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1d84:	b120      	cbz	r0, 80a1d90 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1d86:	4629      	mov	r1, r5
 80a1d88:	4620      	mov	r0, r4
 80a1d8a:	f7ff ff85 	bl	80a1c98 <_ZN9IPAddressC1Em>
 80a1d8e:	e003      	b.n	80a1d98 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1d90:	a903      	add	r1, sp, #12
 80a1d92:	4620      	mov	r0, r4
 80a1d94:	f7ff ff6e 	bl	80a1c74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1d98:	4620      	mov	r0, r4
 80a1d9a:	b00e      	add	sp, #56	; 0x38
 80a1d9c:	bd70      	pop	{r4, r5, r6, pc}
 80a1d9e:	bf00      	nop
 80a1da0:	20000118 	.word	0x20000118

080a1da4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1da4:	4b02      	ldr	r3, [pc, #8]	; (80a1db0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1da6:	4a03      	ldr	r2, [pc, #12]	; (80a1db4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1da8:	601a      	str	r2, [r3, #0]
 80a1daa:	2200      	movs	r2, #0
 80a1dac:	605a      	str	r2, [r3, #4]
 80a1dae:	4770      	bx	lr
 80a1db0:	200000a4 	.word	0x200000a4
 80a1db4:	080a29cc 	.word	0x080a29cc

080a1db8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1dba:	4606      	mov	r6, r0
 80a1dbc:	460d      	mov	r5, r1
 80a1dbe:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1dc0:	2400      	movs	r4, #0
  while (size--) {
 80a1dc2:	42bd      	cmp	r5, r7
 80a1dc4:	d00c      	beq.n	80a1de0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1dc6:	6833      	ldr	r3, [r6, #0]
 80a1dc8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1dcc:	689b      	ldr	r3, [r3, #8]
 80a1dce:	4630      	mov	r0, r6
 80a1dd0:	4798      	blx	r3
     if (chunk>=0)
 80a1dd2:	2800      	cmp	r0, #0
 80a1dd4:	db01      	blt.n	80a1dda <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1dd6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1dd8:	e7f3      	b.n	80a1dc2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1dda:	2c00      	cmp	r4, #0
 80a1ddc:	bf08      	it	eq
 80a1dde:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1de0:	4620      	mov	r0, r4
 80a1de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1de4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1de4:	b570      	push	{r4, r5, r6, lr}
 80a1de6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1de8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1dea:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1dec:	b149      	cbz	r1, 80a1e02 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1dee:	f000 fd25 	bl	80a283c <strlen>
 80a1df2:	682b      	ldr	r3, [r5, #0]
 80a1df4:	4602      	mov	r2, r0
 80a1df6:	4621      	mov	r1, r4
 80a1df8:	4628      	mov	r0, r5
    }
 80a1dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1dfe:	68db      	ldr	r3, [r3, #12]
 80a1e00:	4718      	bx	r3
    }
 80a1e02:	bd70      	pop	{r4, r5, r6, pc}

080a1e04 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1e04:	6803      	ldr	r3, [r0, #0]
 80a1e06:	689b      	ldr	r3, [r3, #8]
 80a1e08:	4718      	bx	r3

080a1e0a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1e0a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1e0c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1e0e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1e10:	f7ff fff8 	bl	80a1e04 <_ZN5Print5printEc>
  n += print('\n');
 80a1e14:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1e16:	4604      	mov	r4, r0
  n += print('\n');
 80a1e18:	4628      	mov	r0, r5
 80a1e1a:	f7ff fff3 	bl	80a1e04 <_ZN5Print5printEc>
  return n;
}
 80a1e1e:	4420      	add	r0, r4
 80a1e20:	bd38      	pop	{r3, r4, r5, pc}

080a1e22 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1e22:	b538      	push	{r3, r4, r5, lr}
 80a1e24:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1e26:	f7ff ffdd 	bl	80a1de4 <_ZN5Print5writeEPKc>
 80a1e2a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1e2c:	4628      	mov	r0, r5
 80a1e2e:	f7ff ffec 	bl	80a1e0a <_ZN5Print7printlnEv>
  return n;
}
 80a1e32:	4420      	add	r0, r4
 80a1e34:	bd38      	pop	{r3, r4, r5, pc}

080a1e36 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1e36:	2a01      	cmp	r2, #1
 80a1e38:	bf98      	it	ls
 80a1e3a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1e3c:	b530      	push	{r4, r5, lr}
 80a1e3e:	460b      	mov	r3, r1
 80a1e40:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1e42:	2100      	movs	r1, #0
 80a1e44:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1e48:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1e4c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1e50:	fb05 3312 	mls	r3, r5, r2, r3
 80a1e54:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1e56:	2b09      	cmp	r3, #9
 80a1e58:	bf94      	ite	ls
 80a1e5a:	3330      	addls	r3, #48	; 0x30
 80a1e5c:	3337      	addhi	r3, #55	; 0x37
 80a1e5e:	b2db      	uxtb	r3, r3
 80a1e60:	4621      	mov	r1, r4
 80a1e62:	f804 3901 	strb.w	r3, [r4], #-1
 80a1e66:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1e68:	2d00      	cmp	r5, #0
 80a1e6a:	d1ef      	bne.n	80a1e4c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1e6c:	f7ff ffba 	bl	80a1de4 <_ZN5Print5writeEPKc>
}
 80a1e70:	b00b      	add	sp, #44	; 0x2c
 80a1e72:	bd30      	pop	{r4, r5, pc}

080a1e74 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1e74:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1e76:	b922      	cbnz	r2, 80a1e82 <_ZN5Print5printEmi+0xe>
 80a1e78:	6803      	ldr	r3, [r0, #0]
 80a1e7a:	b2c9      	uxtb	r1, r1
 80a1e7c:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1e7e:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1e80:	4718      	bx	r3
  else return printNumber(n, base);
 80a1e82:	b2d2      	uxtb	r2, r2
}
 80a1e84:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1e86:	f7ff bfd6 	b.w	80a1e36 <_ZN5Print11printNumberEmh>

080a1e8a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1e8a:	f7ff bff3 	b.w	80a1e74 <_ZN5Print5printEmi>

080a1e8e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1e8e:	b510      	push	{r4, lr}
 80a1e90:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1e92:	f7ff fe52 	bl	80a1b3a <_ZNSt14_Function_baseD1Ev>
 80a1e96:	4620      	mov	r0, r4
 80a1e98:	bd10      	pop	{r4, pc}
	...

080a1e9c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1e9c:	4803      	ldr	r0, [pc, #12]	; (80a1eac <_GLOBAL__sub_I_RGB+0x10>)
 80a1e9e:	2300      	movs	r3, #0
 80a1ea0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1ea2:	4a03      	ldr	r2, [pc, #12]	; (80a1eb0 <_GLOBAL__sub_I_RGB+0x14>)
 80a1ea4:	4903      	ldr	r1, [pc, #12]	; (80a1eb4 <_GLOBAL__sub_I_RGB+0x18>)
 80a1ea6:	f000 bb2f 	b.w	80a2508 <__aeabi_atexit>
 80a1eaa:	bf00      	nop
 80a1eac:	200000ac 	.word	0x200000ac
 80a1eb0:	20000070 	.word	0x20000070
 80a1eb4:	080a1e8f 	.word	0x080a1e8f

080a1eb8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1eb8:	4770      	bx	lr

080a1eba <_ZN8SPIClassD0Ev>:
 80a1eba:	b510      	push	{r4, lr}
 80a1ebc:	4604      	mov	r4, r0
 80a1ebe:	2110      	movs	r1, #16
 80a1ec0:	f000 fb27 	bl	80a2512 <_ZdlPvj>
 80a1ec4:	4620      	mov	r0, r4
 80a1ec6:	bd10      	pop	{r4, pc}

080a1ec8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1ec8:	b570      	push	{r4, r5, r6, lr}
 80a1eca:	4604      	mov	r4, r0
 80a1ecc:	460e      	mov	r6, r1
 80a1ece:	4b07      	ldr	r3, [pc, #28]	; (80a1eec <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1ed0:	2500      	movs	r5, #0
 80a1ed2:	6003      	str	r3, [r0, #0]
 80a1ed4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1ed8:	f7ff fc76 	bl	80a17c8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1edc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1ede:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1ee0:	f7ff fd0c 	bl	80a18fc <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1ee4:	60a5      	str	r5, [r4, #8]
}
 80a1ee6:	4620      	mov	r0, r4
 80a1ee8:	bd70      	pop	{r4, r5, r6, pc}
 80a1eea:	bf00      	nop
 80a1eec:	080a2a00 	.word	0x080a2a00

080a1ef0 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1ef0:	7900      	ldrb	r0, [r0, #4]
 80a1ef2:	f7ff bd0b 	b.w	80a190c <HAL_SPI_Is_Enabled>
	...

080a1ef8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1ef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1efc:	4b03      	ldr	r3, [pc, #12]	; (80a1f0c <_GLOBAL__sub_I_System+0x14>)
 80a1efe:	2000      	movs	r0, #0
 80a1f00:	7018      	strb	r0, [r3, #0]
 80a1f02:	8058      	strh	r0, [r3, #2]
 80a1f04:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1f06:	f7ff bd81 	b.w	80a1a0c <set_system_mode>
 80a1f0a:	bf00      	nop
 80a1f0c:	200000bc 	.word	0x200000bc

080a1f10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1f10:	4b02      	ldr	r3, [pc, #8]	; (80a1f1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1f12:	681a      	ldr	r2, [r3, #0]
 80a1f14:	4b02      	ldr	r3, [pc, #8]	; (80a1f20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1f16:	601a      	str	r2, [r3, #0]
 80a1f18:	4770      	bx	lr
 80a1f1a:	bf00      	nop
 80a1f1c:	20000008 	.word	0x20000008
 80a1f20:	200000c4 	.word	0x200000c4

080a1f24 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1f24:	4770      	bx	lr

080a1f26 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1f26:	7441      	strb	r1, [r0, #17]
 80a1f28:	4770      	bx	lr

080a1f2a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1f2a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1f2c:	7c00      	ldrb	r0, [r0, #16]
 80a1f2e:	f7ff fd2d 	bl	80a198c <HAL_USART_Available_Data_For_Write>
}
 80a1f32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f36:	bd08      	pop	{r3, pc}

080a1f38 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1f38:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1f3a:	7c00      	ldrb	r0, [r0, #16]
 80a1f3c:	f7ff fcfe 	bl	80a193c <HAL_USART_Available_Data>
}
 80a1f40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f44:	bd08      	pop	{r3, pc}

080a1f46 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1f46:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1f48:	7c00      	ldrb	r0, [r0, #16]
 80a1f4a:	f7ff fd07 	bl	80a195c <HAL_USART_Peek_Data>
}
 80a1f4e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1f52:	bf28      	it	cs
 80a1f54:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1f58:	bd08      	pop	{r3, pc}

080a1f5a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1f5a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1f5c:	7c00      	ldrb	r0, [r0, #16]
 80a1f5e:	f7ff fcf5 	bl	80a194c <HAL_USART_Read_Data>
}
 80a1f62:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1f66:	bf28      	it	cs
 80a1f68:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1f6c:	bd08      	pop	{r3, pc}

080a1f6e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1f6e:	7c00      	ldrb	r0, [r0, #16]
 80a1f70:	f7ff bcfc 	b.w	80a196c <HAL_USART_Flush_Data>

080a1f74 <_ZN11USARTSerialD0Ev>:
 80a1f74:	b510      	push	{r4, lr}
 80a1f76:	4604      	mov	r4, r0
 80a1f78:	2114      	movs	r1, #20
 80a1f7a:	f000 faca 	bl	80a2512 <_ZdlPvj>
 80a1f7e:	4620      	mov	r0, r4
 80a1f80:	bd10      	pop	{r4, pc}

080a1f82 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1f82:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1f84:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1f86:	4604      	mov	r4, r0
 80a1f88:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1f8a:	b925      	cbnz	r5, 80a1f96 <_ZN11USARTSerial5writeEh+0x14>
 80a1f8c:	7c00      	ldrb	r0, [r0, #16]
 80a1f8e:	f7ff fcfd 	bl	80a198c <HAL_USART_Available_Data_For_Write>
 80a1f92:	2800      	cmp	r0, #0
 80a1f94:	dd05      	ble.n	80a1fa2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1f96:	4631      	mov	r1, r6
 80a1f98:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1f9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1f9e:	f7ff bcc5 	b.w	80a192c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1fa2:	4628      	mov	r0, r5
 80a1fa4:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1fa8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1fa8:	b510      	push	{r4, lr}
 80a1faa:	4604      	mov	r4, r0
 80a1fac:	4608      	mov	r0, r1
 80a1fae:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1fb0:	2200      	movs	r2, #0
 80a1fb2:	6062      	str	r2, [r4, #4]
 80a1fb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1fb8:	60a2      	str	r2, [r4, #8]
 80a1fba:	4a05      	ldr	r2, [pc, #20]	; (80a1fd0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1fbc:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1fbe:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1fc0:	2201      	movs	r2, #1
 80a1fc2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1fc4:	461a      	mov	r2, r3
 80a1fc6:	f7ff fca9 	bl	80a191c <HAL_USART_Init>
}
 80a1fca:	4620      	mov	r0, r4
 80a1fcc:	bd10      	pop	{r4, pc}
 80a1fce:	bf00      	nop
 80a1fd0:	080a2a3c 	.word	0x080a2a3c

080a1fd4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1fd4:	7c00      	ldrb	r0, [r0, #16]
 80a1fd6:	f7ff bcd1 	b.w	80a197c <HAL_USART_Is_Enabled>
	...

080a1fdc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a1fde:	4c19      	ldr	r4, [pc, #100]	; (80a2044 <_Z22__fetch_global_Serial1v+0x68>)
 80a1fe0:	6825      	ldr	r5, [r4, #0]
 80a1fe2:	b94d      	cbnz	r5, 80a1ff8 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a1fe4:	2084      	movs	r0, #132	; 0x84
 80a1fe6:	f7fe f858 	bl	80a009a <_Znwj>
 80a1fea:	4606      	mov	r6, r0
 80a1fec:	b118      	cbz	r0, 80a1ff6 <_Z22__fetch_global_Serial1v+0x1a>
 80a1fee:	2284      	movs	r2, #132	; 0x84
 80a1ff0:	4629      	mov	r1, r5
 80a1ff2:	f000 fbf2 	bl	80a27da <memset>
 80a1ff6:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a1ff8:	4d13      	ldr	r5, [pc, #76]	; (80a2048 <_Z22__fetch_global_Serial1v+0x6c>)
 80a1ffa:	682e      	ldr	r6, [r5, #0]
 80a1ffc:	b94e      	cbnz	r6, 80a2012 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a1ffe:	2084      	movs	r0, #132	; 0x84
 80a2000:	f7fe f84b 	bl	80a009a <_Znwj>
 80a2004:	4607      	mov	r7, r0
 80a2006:	b118      	cbz	r0, 80a2010 <_Z22__fetch_global_Serial1v+0x34>
 80a2008:	2284      	movs	r2, #132	; 0x84
 80a200a:	4631      	mov	r1, r6
 80a200c:	f000 fbe5 	bl	80a27da <memset>
 80a2010:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a2012:	4f0e      	ldr	r7, [pc, #56]	; (80a204c <_Z22__fetch_global_Serial1v+0x70>)
 80a2014:	6839      	ldr	r1, [r7, #0]
 80a2016:	f011 0601 	ands.w	r6, r1, #1
 80a201a:	d111      	bne.n	80a2040 <_Z22__fetch_global_Serial1v+0x64>
 80a201c:	4638      	mov	r0, r7
 80a201e:	f7fe f840 	bl	80a00a2 <__cxa_guard_acquire>
 80a2022:	b168      	cbz	r0, 80a2040 <_Z22__fetch_global_Serial1v+0x64>
 80a2024:	6822      	ldr	r2, [r4, #0]
 80a2026:	4631      	mov	r1, r6
 80a2028:	682b      	ldr	r3, [r5, #0]
 80a202a:	4809      	ldr	r0, [pc, #36]	; (80a2050 <_Z22__fetch_global_Serial1v+0x74>)
 80a202c:	f7ff ffbc 	bl	80a1fa8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2030:	4638      	mov	r0, r7
 80a2032:	f7fe f83b 	bl	80a00ac <__cxa_guard_release>
 80a2036:	4a07      	ldr	r2, [pc, #28]	; (80a2054 <_Z22__fetch_global_Serial1v+0x78>)
 80a2038:	4907      	ldr	r1, [pc, #28]	; (80a2058 <_Z22__fetch_global_Serial1v+0x7c>)
 80a203a:	4805      	ldr	r0, [pc, #20]	; (80a2050 <_Z22__fetch_global_Serial1v+0x74>)
 80a203c:	f000 fa64 	bl	80a2508 <__aeabi_atexit>
#endif
	return serial1;
}
 80a2040:	4803      	ldr	r0, [pc, #12]	; (80a2050 <_Z22__fetch_global_Serial1v+0x74>)
 80a2042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2044:	200000e4 	.word	0x200000e4
 80a2048:	200000dc 	.word	0x200000dc
 80a204c:	200000e0 	.word	0x200000e0
 80a2050:	200000c8 	.word	0x200000c8
 80a2054:	20000070 	.word	0x20000070
 80a2058:	080a1f25 	.word	0x080a1f25

080a205c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a205c:	7441      	strb	r1, [r0, #17]
 80a205e:	4770      	bx	lr

080a2060 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2060:	4770      	bx	lr

080a2062 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2062:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2064:	2100      	movs	r1, #0
 80a2066:	7c00      	ldrb	r0, [r0, #16]
 80a2068:	f7ff fcb0 	bl	80a19cc <HAL_USB_USART_Receive_Data>
}
 80a206c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2070:	bf28      	it	cs
 80a2072:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2076:	bd08      	pop	{r3, pc}

080a2078 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2078:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a207a:	2101      	movs	r1, #1
 80a207c:	7c00      	ldrb	r0, [r0, #16]
 80a207e:	f7ff fca5 	bl	80a19cc <HAL_USB_USART_Receive_Data>
}
 80a2082:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2086:	bf28      	it	cs
 80a2088:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a208c:	bd08      	pop	{r3, pc}

080a208e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a208e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2090:	7c00      	ldrb	r0, [r0, #16]
 80a2092:	f7ff fc93 	bl	80a19bc <HAL_USB_USART_Available_Data_For_Write>
}
 80a2096:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a209a:	bd08      	pop	{r3, pc}

080a209c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a209c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a209e:	7c00      	ldrb	r0, [r0, #16]
 80a20a0:	f7ff fc84 	bl	80a19ac <HAL_USB_USART_Available_Data>
}
 80a20a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a20a8:	bd08      	pop	{r3, pc}

080a20aa <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a20aa:	7c00      	ldrb	r0, [r0, #16]
 80a20ac:	f7ff bc9e 	b.w	80a19ec <HAL_USB_USART_Flush_Data>

080a20b0 <_ZN9USBSerialD0Ev>:
 80a20b0:	b510      	push	{r4, lr}
 80a20b2:	4604      	mov	r4, r0
 80a20b4:	2114      	movs	r1, #20
 80a20b6:	f000 fa2c 	bl	80a2512 <_ZdlPvj>
 80a20ba:	4620      	mov	r0, r4
 80a20bc:	bd10      	pop	{r4, pc}

080a20be <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a20be:	b538      	push	{r3, r4, r5, lr}
 80a20c0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a20c2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a20c4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a20c6:	f7ff fc79 	bl	80a19bc <HAL_USB_USART_Available_Data_For_Write>
 80a20ca:	2800      	cmp	r0, #0
 80a20cc:	dc01      	bgt.n	80a20d2 <_ZN9USBSerial5writeEh+0x14>
 80a20ce:	7c60      	ldrb	r0, [r4, #17]
 80a20d0:	b128      	cbz	r0, 80a20de <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a20d2:	4629      	mov	r1, r5
 80a20d4:	7c20      	ldrb	r0, [r4, #16]
 80a20d6:	f7ff fc81 	bl	80a19dc <HAL_USB_USART_Send_Data>
 80a20da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a20de:	bd38      	pop	{r3, r4, r5, pc}

080a20e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a20e0:	b510      	push	{r4, lr}
 80a20e2:	4604      	mov	r4, r0
 80a20e4:	2300      	movs	r3, #0
 80a20e6:	6063      	str	r3, [r4, #4]
 80a20e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a20ec:	60a3      	str	r3, [r4, #8]
 80a20ee:	4b05      	ldr	r3, [pc, #20]	; (80a2104 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a20f0:	4608      	mov	r0, r1
 80a20f2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a20f4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a20f6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a20f8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a20fa:	4611      	mov	r1, r2
 80a20fc:	f7ff fc4e 	bl	80a199c <HAL_USB_USART_Init>
}
 80a2100:	4620      	mov	r0, r4
 80a2102:	bd10      	pop	{r4, pc}
 80a2104:	080a2a6c 	.word	0x080a2a6c

080a2108 <_Z19acquireSerialBufferv>:
 80a2108:	b510      	push	{r4, lr}
 80a210a:	4604      	mov	r4, r0
 80a210c:	2214      	movs	r2, #20
 80a210e:	2100      	movs	r1, #0
 80a2110:	f000 fb63 	bl	80a27da <memset>
 80a2114:	4620      	mov	r0, r4
 80a2116:	bd10      	pop	{r4, pc}

080a2118 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2118:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a211a:	4d0e      	ldr	r5, [pc, #56]	; (80a2154 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a211c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a211e:	a801      	add	r0, sp, #4
 80a2120:	f7ff fff2 	bl	80a2108 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2124:	6829      	ldr	r1, [r5, #0]
 80a2126:	f011 0401 	ands.w	r4, r1, #1
 80a212a:	d110      	bne.n	80a214e <_Z16_fetch_usbserialv+0x36>
 80a212c:	4628      	mov	r0, r5
 80a212e:	f7fd ffb8 	bl	80a00a2 <__cxa_guard_acquire>
 80a2132:	b160      	cbz	r0, 80a214e <_Z16_fetch_usbserialv+0x36>
 80a2134:	aa01      	add	r2, sp, #4
 80a2136:	4621      	mov	r1, r4
 80a2138:	4807      	ldr	r0, [pc, #28]	; (80a2158 <_Z16_fetch_usbserialv+0x40>)
 80a213a:	f7ff ffd1 	bl	80a20e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a213e:	4628      	mov	r0, r5
 80a2140:	f7fd ffb4 	bl	80a00ac <__cxa_guard_release>
 80a2144:	4a05      	ldr	r2, [pc, #20]	; (80a215c <_Z16_fetch_usbserialv+0x44>)
 80a2146:	4906      	ldr	r1, [pc, #24]	; (80a2160 <_Z16_fetch_usbserialv+0x48>)
 80a2148:	4803      	ldr	r0, [pc, #12]	; (80a2158 <_Z16_fetch_usbserialv+0x40>)
 80a214a:	f000 f9dd 	bl	80a2508 <__aeabi_atexit>
	return _usbserial;
}
 80a214e:	4802      	ldr	r0, [pc, #8]	; (80a2158 <_Z16_fetch_usbserialv+0x40>)
 80a2150:	b007      	add	sp, #28
 80a2152:	bd30      	pop	{r4, r5, pc}
 80a2154:	200000e8 	.word	0x200000e8
 80a2158:	200000f0 	.word	0x200000f0
 80a215c:	20000070 	.word	0x20000070
 80a2160:	080a2061 	.word	0x080a2061

080a2164 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2164:	b510      	push	{r4, lr}
 80a2166:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2168:	2214      	movs	r2, #20
 80a216a:	2100      	movs	r1, #0
 80a216c:	f000 fb35 	bl	80a27da <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2170:	4620      	mov	r0, r4
 80a2172:	bd10      	pop	{r4, pc}

080a2174 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2174:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2176:	4c0e      	ldr	r4, [pc, #56]	; (80a21b0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2178:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a217a:	a801      	add	r0, sp, #4
 80a217c:	f7ff fff2 	bl	80a2164 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2180:	6823      	ldr	r3, [r4, #0]
 80a2182:	07db      	lsls	r3, r3, #31
 80a2184:	d410      	bmi.n	80a21a8 <_Z17_fetch_usbserial1v+0x34>
 80a2186:	4620      	mov	r0, r4
 80a2188:	f7fd ff8b 	bl	80a00a2 <__cxa_guard_acquire>
 80a218c:	b160      	cbz	r0, 80a21a8 <_Z17_fetch_usbserial1v+0x34>
 80a218e:	aa01      	add	r2, sp, #4
 80a2190:	2101      	movs	r1, #1
 80a2192:	4808      	ldr	r0, [pc, #32]	; (80a21b4 <_Z17_fetch_usbserial1v+0x40>)
 80a2194:	f7ff ffa4 	bl	80a20e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2198:	4620      	mov	r0, r4
 80a219a:	f7fd ff87 	bl	80a00ac <__cxa_guard_release>
 80a219e:	4a06      	ldr	r2, [pc, #24]	; (80a21b8 <_Z17_fetch_usbserial1v+0x44>)
 80a21a0:	4906      	ldr	r1, [pc, #24]	; (80a21bc <_Z17_fetch_usbserial1v+0x48>)
 80a21a2:	4804      	ldr	r0, [pc, #16]	; (80a21b4 <_Z17_fetch_usbserial1v+0x40>)
 80a21a4:	f000 f9b0 	bl	80a2508 <__aeabi_atexit>
  return _usbserial1;
}
 80a21a8:	4802      	ldr	r0, [pc, #8]	; (80a21b4 <_Z17_fetch_usbserial1v+0x40>)
 80a21aa:	b006      	add	sp, #24
 80a21ac:	bd10      	pop	{r4, pc}
 80a21ae:	bf00      	nop
 80a21b0:	200000ec 	.word	0x200000ec
 80a21b4:	20000104 	.word	0x20000104
 80a21b8:	20000070 	.word	0x20000070
 80a21bc:	080a2061 	.word	0x080a2061

080a21c0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a21c0:	2200      	movs	r2, #0
 80a21c2:	4611      	mov	r1, r2
 80a21c4:	6840      	ldr	r0, [r0, #4]
 80a21c6:	f7ff bc6d 	b.w	80a1aa4 <network_ready>

080a21ca <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a21ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a21cc:	4616      	mov	r6, r2
 80a21ce:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a21d0:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a21d2:	460f      	mov	r7, r1
 80a21d4:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a21d6:	2100      	movs	r1, #0
 80a21d8:	a803      	add	r0, sp, #12
 80a21da:	f000 fafe 	bl	80a27da <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a21de:	4630      	mov	r0, r6
 80a21e0:	f000 fb2c 	bl	80a283c <strlen>
 80a21e4:	2500      	movs	r5, #0
 80a21e6:	9500      	str	r5, [sp, #0]
 80a21e8:	b281      	uxth	r1, r0
 80a21ea:	687b      	ldr	r3, [r7, #4]
 80a21ec:	aa03      	add	r2, sp, #12
 80a21ee:	4630      	mov	r0, r6
 80a21f0:	f7ff fc04 	bl	80a19fc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a21f4:	b120      	cbz	r0, 80a2200 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a21f6:	4629      	mov	r1, r5
 80a21f8:	4620      	mov	r0, r4
 80a21fa:	f7ff fd4d 	bl	80a1c98 <_ZN9IPAddressC1Em>
 80a21fe:	e003      	b.n	80a2208 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2200:	a903      	add	r1, sp, #12
 80a2202:	4620      	mov	r0, r4
 80a2204:	f7ff fd36 	bl	80a1c74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2208:	4620      	mov	r0, r4
 80a220a:	b009      	add	sp, #36	; 0x24
 80a220c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a220e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a220e:	2200      	movs	r2, #0
 80a2210:	4611      	mov	r1, r2
 80a2212:	6840      	ldr	r0, [r0, #4]
 80a2214:	f7ff bc66 	b.w	80a1ae4 <network_listening>

080a2218 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2218:	2200      	movs	r2, #0
 80a221a:	4611      	mov	r1, r2
 80a221c:	6840      	ldr	r0, [r0, #4]
 80a221e:	f7ff bc71 	b.w	80a1b04 <network_get_listen_timeout>

080a2222 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2222:	2200      	movs	r2, #0
 80a2224:	6840      	ldr	r0, [r0, #4]
 80a2226:	f7ff bc65 	b.w	80a1af4 <network_set_listen_timeout>

080a222a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a222a:	2200      	movs	r2, #0
 80a222c:	f081 0101 	eor.w	r1, r1, #1
 80a2230:	6840      	ldr	r0, [r0, #4]
 80a2232:	f7ff bc4f 	b.w	80a1ad4 <network_listen>

080a2236 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a2236:	2300      	movs	r3, #0
 80a2238:	461a      	mov	r2, r3
 80a223a:	4619      	mov	r1, r3
 80a223c:	6840      	ldr	r0, [r0, #4]
 80a223e:	f7ff bc41 	b.w	80a1ac4 <network_off>

080a2242 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2242:	2300      	movs	r3, #0
 80a2244:	461a      	mov	r2, r3
 80a2246:	4619      	mov	r1, r3
 80a2248:	6840      	ldr	r0, [r0, #4]
 80a224a:	f7ff bc33 	b.w	80a1ab4 <network_on>

080a224e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a224e:	2200      	movs	r2, #0
 80a2250:	4611      	mov	r1, r2
 80a2252:	6840      	ldr	r0, [r0, #4]
 80a2254:	f7ff bc16 	b.w	80a1a84 <network_connecting>

080a2258 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2258:	2200      	movs	r2, #0
 80a225a:	2102      	movs	r1, #2
 80a225c:	6840      	ldr	r0, [r0, #4]
 80a225e:	f7ff bc19 	b.w	80a1a94 <network_disconnect>

080a2262 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2262:	2300      	movs	r3, #0
 80a2264:	461a      	mov	r2, r3
 80a2266:	6840      	ldr	r0, [r0, #4]
 80a2268:	f7ff bc04 	b.w	80a1a74 <network_connect>

080a226c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a226c:	4b02      	ldr	r3, [pc, #8]	; (80a2278 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a226e:	2204      	movs	r2, #4
 80a2270:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2272:	4a02      	ldr	r2, [pc, #8]	; (80a227c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2274:	601a      	str	r2, [r3, #0]
 80a2276:	4770      	bx	lr
 80a2278:	20000118 	.word	0x20000118
 80a227c:	080a2a9c 	.word	0x080a2a9c

080a2280 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2280:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2282:	4b14      	ldr	r3, [pc, #80]	; (80a22d4 <serialEventRun+0x54>)
 80a2284:	b133      	cbz	r3, 80a2294 <serialEventRun+0x14>
 80a2286:	f7ff ff47 	bl	80a2118 <_Z16_fetch_usbserialv>
 80a228a:	6803      	ldr	r3, [r0, #0]
 80a228c:	691b      	ldr	r3, [r3, #16]
 80a228e:	4798      	blx	r3
 80a2290:	2800      	cmp	r0, #0
 80a2292:	dc16      	bgt.n	80a22c2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2294:	4b10      	ldr	r3, [pc, #64]	; (80a22d8 <serialEventRun+0x58>)
 80a2296:	b133      	cbz	r3, 80a22a6 <serialEventRun+0x26>
 80a2298:	f7ff fea0 	bl	80a1fdc <_Z22__fetch_global_Serial1v>
 80a229c:	6803      	ldr	r3, [r0, #0]
 80a229e:	691b      	ldr	r3, [r3, #16]
 80a22a0:	4798      	blx	r3
 80a22a2:	2800      	cmp	r0, #0
 80a22a4:	dc10      	bgt.n	80a22c8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a22a6:	4b0d      	ldr	r3, [pc, #52]	; (80a22dc <serialEventRun+0x5c>)
 80a22a8:	b10b      	cbz	r3, 80a22ae <serialEventRun+0x2e>
 80a22aa:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a22ae:	4b0c      	ldr	r3, [pc, #48]	; (80a22e0 <serialEventRun+0x60>)
 80a22b0:	b17b      	cbz	r3, 80a22d2 <serialEventRun+0x52>
 80a22b2:	f7ff ff5f 	bl	80a2174 <_Z17_fetch_usbserial1v>
 80a22b6:	6803      	ldr	r3, [r0, #0]
 80a22b8:	691b      	ldr	r3, [r3, #16]
 80a22ba:	4798      	blx	r3
 80a22bc:	2800      	cmp	r0, #0
 80a22be:	dc06      	bgt.n	80a22ce <serialEventRun+0x4e>
 80a22c0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a22c2:	f3af 8000 	nop.w
 80a22c6:	e7e5      	b.n	80a2294 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a22c8:	f3af 8000 	nop.w
 80a22cc:	e7eb      	b.n	80a22a6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a22ce:	f3af 8000 	nop.w
 80a22d2:	bd08      	pop	{r3, pc}
	...

080a22e4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a22e4:	b508      	push	{r3, lr}
	serialEventRun();
 80a22e6:	f7ff ffcb 	bl	80a2280 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a22ea:	f7ff fa85 	bl	80a17f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a22ee:	4b01      	ldr	r3, [pc, #4]	; (80a22f4 <_post_loop+0x10>)
 80a22f0:	6018      	str	r0, [r3, #0]
 80a22f2:	bd08      	pop	{r3, pc}
 80a22f4:	20000128 	.word	0x20000128

080a22f8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a22f8:	4802      	ldr	r0, [pc, #8]	; (80a2304 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a22fa:	4a03      	ldr	r2, [pc, #12]	; (80a2308 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a22fc:	4903      	ldr	r1, [pc, #12]	; (80a230c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a22fe:	1a12      	subs	r2, r2, r0
 80a2300:	f000 ba60 	b.w	80a27c4 <memcpy>
 80a2304:	40024000 	.word	0x40024000
 80a2308:	40024004 	.word	0x40024004
 80a230c:	080a2b80 	.word	0x080a2b80

080a2310 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2310:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2312:	2300      	movs	r3, #0
 80a2314:	9300      	str	r3, [sp, #0]
 80a2316:	461a      	mov	r2, r3
 80a2318:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a231c:	f7ff fb90 	bl	80a1a40 <system_ctrl_set_result>
}
 80a2320:	b003      	add	sp, #12
 80a2322:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2328 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2328:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a232a:	8843      	ldrh	r3, [r0, #2]
 80a232c:	2b0a      	cmp	r3, #10
 80a232e:	d008      	beq.n	80a2342 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2330:	2b50      	cmp	r3, #80	; 0x50
 80a2332:	d109      	bne.n	80a2348 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2334:	4b09      	ldr	r3, [pc, #36]	; (80a235c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2336:	681b      	ldr	r3, [r3, #0]
 80a2338:	b13b      	cbz	r3, 80a234a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a233a:	b003      	add	sp, #12
 80a233c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2340:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2342:	f7ff ffe5 	bl	80a2310 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2346:	e006      	b.n	80a2356 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2348:	2300      	movs	r3, #0
 80a234a:	9300      	str	r3, [sp, #0]
 80a234c:	461a      	mov	r2, r3
 80a234e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2352:	f7ff fb75 	bl	80a1a40 <system_ctrl_set_result>
        break;
    }
}
 80a2356:	b003      	add	sp, #12
 80a2358:	f85d fb04 	ldr.w	pc, [sp], #4
 80a235c:	20000120 	.word	0x20000120

080a2360 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2360:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2362:	4c10      	ldr	r4, [pc, #64]	; (80a23a4 <module_user_init_hook+0x44>)
 80a2364:	4d10      	ldr	r5, [pc, #64]	; (80a23a8 <module_user_init_hook+0x48>)
 80a2366:	6823      	ldr	r3, [r4, #0]
 80a2368:	42ab      	cmp	r3, r5
 80a236a:	4b10      	ldr	r3, [pc, #64]	; (80a23ac <module_user_init_hook+0x4c>)
 80a236c:	bf0c      	ite	eq
 80a236e:	2201      	moveq	r2, #1
 80a2370:	2200      	movne	r2, #0
 80a2372:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2374:	d002      	beq.n	80a237c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2376:	f7ff ffbf 	bl	80a22f8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a237a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a237c:	f7ff fa2c 	bl	80a17d8 <HAL_RNG_GetRandomNumber>
 80a2380:	4604      	mov	r4, r0
    srand(seed);
 80a2382:	f000 fa33 	bl	80a27ec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2386:	4b0a      	ldr	r3, [pc, #40]	; (80a23b0 <module_user_init_hook+0x50>)
 80a2388:	b113      	cbz	r3, 80a2390 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a238a:	4620      	mov	r0, r4
 80a238c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2390:	2100      	movs	r1, #0
 80a2392:	4807      	ldr	r0, [pc, #28]	; (80a23b0 <module_user_init_hook+0x50>)
 80a2394:	f7ff fb66 	bl	80a1a64 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a239c:	2100      	movs	r1, #0
 80a239e:	4805      	ldr	r0, [pc, #20]	; (80a23b4 <module_user_init_hook+0x54>)
 80a23a0:	f7ff bb44 	b.w	80a1a2c <system_ctrl_set_app_request_handler>
 80a23a4:	40024000 	.word	0x40024000
 80a23a8:	9a271c1e 	.word	0x9a271c1e
 80a23ac:	20000124 	.word	0x20000124
 80a23b0:	00000000 	.word	0x00000000
 80a23b4:	080a2329 	.word	0x080a2329

080a23b8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a23b8:	b510      	push	{r4, lr}
 80a23ba:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a23bc:	480f      	ldr	r0, [pc, #60]	; (80a23fc <pinAvailable+0x44>)
 80a23be:	f7ff fd97 	bl	80a1ef0 <_ZN8SPIClass9isEnabledEv>
 80a23c2:	b128      	cbz	r0, 80a23d0 <pinAvailable+0x18>
 80a23c4:	f1a4 030d 	sub.w	r3, r4, #13
 80a23c8:	2b02      	cmp	r3, #2
 80a23ca:	d801      	bhi.n	80a23d0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a23cc:	2000      	movs	r0, #0
 80a23ce:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a23d0:	f000 f840 	bl	80a2454 <_Z19__fetch_global_Wirev>
 80a23d4:	f7ff fc1a 	bl	80a1c0c <_ZN7TwoWire9isEnabledEv>
 80a23d8:	b108      	cbz	r0, 80a23de <pinAvailable+0x26>
 80a23da:	2c01      	cmp	r4, #1
 80a23dc:	d9f6      	bls.n	80a23cc <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a23de:	f7ff fdfd 	bl	80a1fdc <_Z22__fetch_global_Serial1v>
 80a23e2:	f7ff fdf7 	bl	80a1fd4 <_ZN11USARTSerial9isEnabledEv>
 80a23e6:	b118      	cbz	r0, 80a23f0 <pinAvailable+0x38>
 80a23e8:	f1a4 0312 	sub.w	r3, r4, #18
 80a23ec:	2b01      	cmp	r3, #1
 80a23ee:	d9ed      	bls.n	80a23cc <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a23f0:	2c17      	cmp	r4, #23
 80a23f2:	bf8c      	ite	hi
 80a23f4:	2000      	movhi	r0, #0
 80a23f6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a23f8:	bd10      	pop	{r4, pc}
 80a23fa:	bf00      	nop
 80a23fc:	2000015c 	.word	0x2000015c

080a2400 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2400:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2402:	b538      	push	{r3, r4, r5, lr}
 80a2404:	4604      	mov	r4, r0
 80a2406:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2408:	d80a      	bhi.n	80a2420 <pinMode+0x20>
 80a240a:	29ff      	cmp	r1, #255	; 0xff
 80a240c:	d008      	beq.n	80a2420 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a240e:	f7ff ffd3 	bl	80a23b8 <pinAvailable>
 80a2412:	b128      	cbz	r0, 80a2420 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2414:	4629      	mov	r1, r5
 80a2416:	4620      	mov	r0, r4
}
 80a2418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a241c:	f7ff b9fc 	b.w	80a1818 <HAL_Pin_Mode>
 80a2420:	bd38      	pop	{r3, r4, r5, pc}

080a2422 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2422:	b538      	push	{r3, r4, r5, lr}
 80a2424:	4604      	mov	r4, r0
 80a2426:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2428:	f7ff f9fe 	bl	80a1828 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a242c:	28ff      	cmp	r0, #255	; 0xff
 80a242e:	d010      	beq.n	80a2452 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2430:	2806      	cmp	r0, #6
 80a2432:	d804      	bhi.n	80a243e <digitalWrite+0x1c>
 80a2434:	234d      	movs	r3, #77	; 0x4d
 80a2436:	fa23 f000 	lsr.w	r0, r3, r0
 80a243a:	07c3      	lsls	r3, r0, #31
 80a243c:	d409      	bmi.n	80a2452 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a243e:	4620      	mov	r0, r4
 80a2440:	f7ff ffba 	bl	80a23b8 <pinAvailable>
 80a2444:	b128      	cbz	r0, 80a2452 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2446:	4629      	mov	r1, r5
 80a2448:	4620      	mov	r0, r4
}
 80a244a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a244e:	f7ff b9f3 	b.w	80a1838 <HAL_GPIO_Write>
 80a2452:	bd38      	pop	{r3, r4, r5, pc}

080a2454 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2454:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2456:	4d0b      	ldr	r5, [pc, #44]	; (80a2484 <_Z19__fetch_global_Wirev+0x30>)
 80a2458:	6829      	ldr	r1, [r5, #0]
 80a245a:	f011 0401 	ands.w	r4, r1, #1
 80a245e:	d10f      	bne.n	80a2480 <_Z19__fetch_global_Wirev+0x2c>
 80a2460:	4628      	mov	r0, r5
 80a2462:	f7fd fe1e 	bl	80a00a2 <__cxa_guard_acquire>
 80a2466:	b158      	cbz	r0, 80a2480 <_Z19__fetch_global_Wirev+0x2c>
 80a2468:	4621      	mov	r1, r4
 80a246a:	4807      	ldr	r0, [pc, #28]	; (80a2488 <_Z19__fetch_global_Wirev+0x34>)
 80a246c:	f7ff fb9a 	bl	80a1ba4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2470:	4628      	mov	r0, r5
 80a2472:	f7fd fe1b 	bl	80a00ac <__cxa_guard_release>
 80a2476:	4a05      	ldr	r2, [pc, #20]	; (80a248c <_Z19__fetch_global_Wirev+0x38>)
 80a2478:	4905      	ldr	r1, [pc, #20]	; (80a2490 <_Z19__fetch_global_Wirev+0x3c>)
 80a247a:	4803      	ldr	r0, [pc, #12]	; (80a2488 <_Z19__fetch_global_Wirev+0x34>)
 80a247c:	f000 f844 	bl	80a2508 <__aeabi_atexit>
	return wire;
}
 80a2480:	4801      	ldr	r0, [pc, #4]	; (80a2488 <_Z19__fetch_global_Wirev+0x34>)
 80a2482:	bd38      	pop	{r3, r4, r5, pc}
 80a2484:	2000012c 	.word	0x2000012c
 80a2488:	20000130 	.word	0x20000130
 80a248c:	20000070 	.word	0x20000070
 80a2490:	080a1b4d 	.word	0x080a1b4d

080a2494 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2494:	b513      	push	{r0, r1, r4, lr}
 80a2496:	4c08      	ldr	r4, [pc, #32]	; (80a24b8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2498:	2300      	movs	r3, #0
 80a249a:	461a      	mov	r2, r3
 80a249c:	4619      	mov	r1, r3
 80a249e:	9300      	str	r3, [sp, #0]
 80a24a0:	4620      	mov	r0, r4
 80a24a2:	f7ff fc0f 	bl	80a1cc4 <_ZN9IPAddressC1Ehhhh>
 80a24a6:	4620      	mov	r0, r4
 80a24a8:	4a04      	ldr	r2, [pc, #16]	; (80a24bc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a24aa:	4905      	ldr	r1, [pc, #20]	; (80a24c0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a24ac:	b002      	add	sp, #8
 80a24ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a24b2:	f000 b829 	b.w	80a2508 <__aeabi_atexit>
 80a24b6:	bf00      	nop
 80a24b8:	20000144 	.word	0x20000144
 80a24bc:	20000070 	.word	0x20000070
 80a24c0:	080a1c15 	.word	0x080a1c15

080a24c4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a24c4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a24c6:	4c0c      	ldr	r4, [pc, #48]	; (80a24f8 <_GLOBAL__sub_I_SPI+0x34>)
 80a24c8:	4e0c      	ldr	r6, [pc, #48]	; (80a24fc <_GLOBAL__sub_I_SPI+0x38>)
 80a24ca:	4d0d      	ldr	r5, [pc, #52]	; (80a2500 <_GLOBAL__sub_I_SPI+0x3c>)
 80a24cc:	2100      	movs	r1, #0
 80a24ce:	4620      	mov	r0, r4
 80a24d0:	f7ff fcfa 	bl	80a1ec8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a24d4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a24d6:	4c0b      	ldr	r4, [pc, #44]	; (80a2504 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a24d8:	4632      	mov	r2, r6
 80a24da:	4629      	mov	r1, r5
 80a24dc:	f000 f814 	bl	80a2508 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a24e0:	2101      	movs	r1, #1
 80a24e2:	4620      	mov	r0, r4
 80a24e4:	f7ff fcf0 	bl	80a1ec8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a24e8:	4632      	mov	r2, r6
 80a24ea:	4629      	mov	r1, r5
 80a24ec:	4620      	mov	r0, r4
 80a24ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a24f2:	f000 b809 	b.w	80a2508 <__aeabi_atexit>
 80a24f6:	bf00      	nop
 80a24f8:	2000015c 	.word	0x2000015c
 80a24fc:	20000070 	.word	0x20000070
 80a2500:	080a1eb9 	.word	0x080a1eb9
 80a2504:	2000016c 	.word	0x2000016c

080a2508 <__aeabi_atexit>:
 80a2508:	460b      	mov	r3, r1
 80a250a:	4601      	mov	r1, r0
 80a250c:	4618      	mov	r0, r3
 80a250e:	f000 b94b 	b.w	80a27a8 <__cxa_atexit>

080a2512 <_ZdlPvj>:
 80a2512:	f7fd bdc4 	b.w	80a009e <_ZdlPv>
	...

080a2518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2518:	4b24      	ldr	r3, [pc, #144]	; (80a25ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a251a:	681a      	ldr	r2, [r3, #0]
 80a251c:	07d0      	lsls	r0, r2, #31
 80a251e:	bf5c      	itt	pl
 80a2520:	2201      	movpl	r2, #1
 80a2522:	601a      	strpl	r2, [r3, #0]
 80a2524:	4b22      	ldr	r3, [pc, #136]	; (80a25b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2526:	681a      	ldr	r2, [r3, #0]
 80a2528:	07d1      	lsls	r1, r2, #31
 80a252a:	bf5c      	itt	pl
 80a252c:	2201      	movpl	r2, #1
 80a252e:	601a      	strpl	r2, [r3, #0]
 80a2530:	4b20      	ldr	r3, [pc, #128]	; (80a25b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2532:	681a      	ldr	r2, [r3, #0]
 80a2534:	07d2      	lsls	r2, r2, #31
 80a2536:	bf5c      	itt	pl
 80a2538:	2201      	movpl	r2, #1
 80a253a:	601a      	strpl	r2, [r3, #0]
 80a253c:	4b1e      	ldr	r3, [pc, #120]	; (80a25b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a253e:	681a      	ldr	r2, [r3, #0]
 80a2540:	07d0      	lsls	r0, r2, #31
 80a2542:	bf5c      	itt	pl
 80a2544:	2201      	movpl	r2, #1
 80a2546:	601a      	strpl	r2, [r3, #0]
 80a2548:	4b1c      	ldr	r3, [pc, #112]	; (80a25bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a254a:	681a      	ldr	r2, [r3, #0]
 80a254c:	07d1      	lsls	r1, r2, #31
 80a254e:	bf5c      	itt	pl
 80a2550:	2201      	movpl	r2, #1
 80a2552:	601a      	strpl	r2, [r3, #0]
 80a2554:	4b1a      	ldr	r3, [pc, #104]	; (80a25c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2556:	681a      	ldr	r2, [r3, #0]
 80a2558:	07d2      	lsls	r2, r2, #31
 80a255a:	bf5c      	itt	pl
 80a255c:	2201      	movpl	r2, #1
 80a255e:	601a      	strpl	r2, [r3, #0]
 80a2560:	4b18      	ldr	r3, [pc, #96]	; (80a25c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2562:	681a      	ldr	r2, [r3, #0]
 80a2564:	07d0      	lsls	r0, r2, #31
 80a2566:	bf5c      	itt	pl
 80a2568:	2201      	movpl	r2, #1
 80a256a:	601a      	strpl	r2, [r3, #0]
 80a256c:	4b16      	ldr	r3, [pc, #88]	; (80a25c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a256e:	681a      	ldr	r2, [r3, #0]
 80a2570:	07d1      	lsls	r1, r2, #31
 80a2572:	bf5c      	itt	pl
 80a2574:	2201      	movpl	r2, #1
 80a2576:	601a      	strpl	r2, [r3, #0]
 80a2578:	4b14      	ldr	r3, [pc, #80]	; (80a25cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a257a:	681a      	ldr	r2, [r3, #0]
 80a257c:	07d2      	lsls	r2, r2, #31
 80a257e:	bf5c      	itt	pl
 80a2580:	2201      	movpl	r2, #1
 80a2582:	601a      	strpl	r2, [r3, #0]
 80a2584:	4b12      	ldr	r3, [pc, #72]	; (80a25d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2586:	681a      	ldr	r2, [r3, #0]
 80a2588:	07d0      	lsls	r0, r2, #31
 80a258a:	bf5c      	itt	pl
 80a258c:	2201      	movpl	r2, #1
 80a258e:	601a      	strpl	r2, [r3, #0]
 80a2590:	4b10      	ldr	r3, [pc, #64]	; (80a25d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2592:	681a      	ldr	r2, [r3, #0]
 80a2594:	07d1      	lsls	r1, r2, #31
 80a2596:	bf5c      	itt	pl
 80a2598:	2201      	movpl	r2, #1
 80a259a:	601a      	strpl	r2, [r3, #0]
 80a259c:	4b0e      	ldr	r3, [pc, #56]	; (80a25d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a259e:	681a      	ldr	r2, [r3, #0]
 80a25a0:	07d2      	lsls	r2, r2, #31
 80a25a2:	bf5c      	itt	pl
 80a25a4:	2201      	movpl	r2, #1
 80a25a6:	601a      	strpl	r2, [r3, #0]
 80a25a8:	4770      	bx	lr
 80a25aa:	bf00      	nop
 80a25ac:	200001a8 	.word	0x200001a8
 80a25b0:	200001a4 	.word	0x200001a4
 80a25b4:	200001a0 	.word	0x200001a0
 80a25b8:	2000019c 	.word	0x2000019c
 80a25bc:	20000198 	.word	0x20000198
 80a25c0:	20000194 	.word	0x20000194
 80a25c4:	20000190 	.word	0x20000190
 80a25c8:	2000018c 	.word	0x2000018c
 80a25cc:	20000188 	.word	0x20000188
 80a25d0:	20000184 	.word	0x20000184
 80a25d4:	20000180 	.word	0x20000180
 80a25d8:	2000017c 	.word	0x2000017c

080a25dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a25dc:	4b18      	ldr	r3, [pc, #96]	; (80a2640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a25de:	681a      	ldr	r2, [r3, #0]
 80a25e0:	07d1      	lsls	r1, r2, #31
 80a25e2:	bf5c      	itt	pl
 80a25e4:	2201      	movpl	r2, #1
 80a25e6:	601a      	strpl	r2, [r3, #0]
 80a25e8:	4b16      	ldr	r3, [pc, #88]	; (80a2644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a25ea:	681a      	ldr	r2, [r3, #0]
 80a25ec:	07d2      	lsls	r2, r2, #31
 80a25ee:	bf5c      	itt	pl
 80a25f0:	2201      	movpl	r2, #1
 80a25f2:	601a      	strpl	r2, [r3, #0]
 80a25f4:	4b14      	ldr	r3, [pc, #80]	; (80a2648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a25f6:	681a      	ldr	r2, [r3, #0]
 80a25f8:	07d0      	lsls	r0, r2, #31
 80a25fa:	bf5c      	itt	pl
 80a25fc:	2201      	movpl	r2, #1
 80a25fe:	601a      	strpl	r2, [r3, #0]
 80a2600:	4b12      	ldr	r3, [pc, #72]	; (80a264c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2602:	681a      	ldr	r2, [r3, #0]
 80a2604:	07d1      	lsls	r1, r2, #31
 80a2606:	bf5c      	itt	pl
 80a2608:	2201      	movpl	r2, #1
 80a260a:	601a      	strpl	r2, [r3, #0]
 80a260c:	4b10      	ldr	r3, [pc, #64]	; (80a2650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a260e:	681a      	ldr	r2, [r3, #0]
 80a2610:	07d2      	lsls	r2, r2, #31
 80a2612:	bf5c      	itt	pl
 80a2614:	2201      	movpl	r2, #1
 80a2616:	601a      	strpl	r2, [r3, #0]
 80a2618:	4b0e      	ldr	r3, [pc, #56]	; (80a2654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a261a:	681a      	ldr	r2, [r3, #0]
 80a261c:	07d0      	lsls	r0, r2, #31
 80a261e:	bf5c      	itt	pl
 80a2620:	2201      	movpl	r2, #1
 80a2622:	601a      	strpl	r2, [r3, #0]
 80a2624:	4b0c      	ldr	r3, [pc, #48]	; (80a2658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2626:	681a      	ldr	r2, [r3, #0]
 80a2628:	07d1      	lsls	r1, r2, #31
 80a262a:	bf5c      	itt	pl
 80a262c:	2201      	movpl	r2, #1
 80a262e:	601a      	strpl	r2, [r3, #0]
 80a2630:	4b0a      	ldr	r3, [pc, #40]	; (80a265c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2632:	681a      	ldr	r2, [r3, #0]
 80a2634:	07d2      	lsls	r2, r2, #31
 80a2636:	bf5c      	itt	pl
 80a2638:	2201      	movpl	r2, #1
 80a263a:	601a      	strpl	r2, [r3, #0]
 80a263c:	4770      	bx	lr
 80a263e:	bf00      	nop
 80a2640:	200001c8 	.word	0x200001c8
 80a2644:	200001c4 	.word	0x200001c4
 80a2648:	200001c0 	.word	0x200001c0
 80a264c:	200001bc 	.word	0x200001bc
 80a2650:	200001b8 	.word	0x200001b8
 80a2654:	200001b4 	.word	0x200001b4
 80a2658:	200001b0 	.word	0x200001b0
 80a265c:	200001ac 	.word	0x200001ac

080a2660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2660:	4b18      	ldr	r3, [pc, #96]	; (80a26c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2662:	681a      	ldr	r2, [r3, #0]
 80a2664:	07d1      	lsls	r1, r2, #31
 80a2666:	bf5c      	itt	pl
 80a2668:	2201      	movpl	r2, #1
 80a266a:	601a      	strpl	r2, [r3, #0]
 80a266c:	4b16      	ldr	r3, [pc, #88]	; (80a26c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a266e:	681a      	ldr	r2, [r3, #0]
 80a2670:	07d2      	lsls	r2, r2, #31
 80a2672:	bf5c      	itt	pl
 80a2674:	2201      	movpl	r2, #1
 80a2676:	601a      	strpl	r2, [r3, #0]
 80a2678:	4b14      	ldr	r3, [pc, #80]	; (80a26cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a267a:	681a      	ldr	r2, [r3, #0]
 80a267c:	07d0      	lsls	r0, r2, #31
 80a267e:	bf5c      	itt	pl
 80a2680:	2201      	movpl	r2, #1
 80a2682:	601a      	strpl	r2, [r3, #0]
 80a2684:	4b12      	ldr	r3, [pc, #72]	; (80a26d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2686:	681a      	ldr	r2, [r3, #0]
 80a2688:	07d1      	lsls	r1, r2, #31
 80a268a:	bf5c      	itt	pl
 80a268c:	2201      	movpl	r2, #1
 80a268e:	601a      	strpl	r2, [r3, #0]
 80a2690:	4b10      	ldr	r3, [pc, #64]	; (80a26d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2692:	681a      	ldr	r2, [r3, #0]
 80a2694:	07d2      	lsls	r2, r2, #31
 80a2696:	bf5c      	itt	pl
 80a2698:	2201      	movpl	r2, #1
 80a269a:	601a      	strpl	r2, [r3, #0]
 80a269c:	4b0e      	ldr	r3, [pc, #56]	; (80a26d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a269e:	681a      	ldr	r2, [r3, #0]
 80a26a0:	07d0      	lsls	r0, r2, #31
 80a26a2:	bf5c      	itt	pl
 80a26a4:	2201      	movpl	r2, #1
 80a26a6:	601a      	strpl	r2, [r3, #0]
 80a26a8:	4b0c      	ldr	r3, [pc, #48]	; (80a26dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a26aa:	681a      	ldr	r2, [r3, #0]
 80a26ac:	07d1      	lsls	r1, r2, #31
 80a26ae:	bf5c      	itt	pl
 80a26b0:	2201      	movpl	r2, #1
 80a26b2:	601a      	strpl	r2, [r3, #0]
 80a26b4:	4b0a      	ldr	r3, [pc, #40]	; (80a26e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a26b6:	681a      	ldr	r2, [r3, #0]
 80a26b8:	07d2      	lsls	r2, r2, #31
 80a26ba:	bf5c      	itt	pl
 80a26bc:	2201      	movpl	r2, #1
 80a26be:	601a      	strpl	r2, [r3, #0]
 80a26c0:	4770      	bx	lr
 80a26c2:	bf00      	nop
 80a26c4:	200001e8 	.word	0x200001e8
 80a26c8:	200001e4 	.word	0x200001e4
 80a26cc:	200001e0 	.word	0x200001e0
 80a26d0:	200001dc 	.word	0x200001dc
 80a26d4:	200001d8 	.word	0x200001d8
 80a26d8:	200001d4 	.word	0x200001d4
 80a26dc:	200001d0 	.word	0x200001d0
 80a26e0:	200001cc 	.word	0x200001cc

080a26e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a26e4:	4b24      	ldr	r3, [pc, #144]	; (80a2778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a26e6:	681a      	ldr	r2, [r3, #0]
 80a26e8:	07d0      	lsls	r0, r2, #31
 80a26ea:	bf5c      	itt	pl
 80a26ec:	2201      	movpl	r2, #1
 80a26ee:	601a      	strpl	r2, [r3, #0]
 80a26f0:	4b22      	ldr	r3, [pc, #136]	; (80a277c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a26f2:	681a      	ldr	r2, [r3, #0]
 80a26f4:	07d1      	lsls	r1, r2, #31
 80a26f6:	bf5c      	itt	pl
 80a26f8:	2201      	movpl	r2, #1
 80a26fa:	601a      	strpl	r2, [r3, #0]
 80a26fc:	4b20      	ldr	r3, [pc, #128]	; (80a2780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a26fe:	681a      	ldr	r2, [r3, #0]
 80a2700:	07d2      	lsls	r2, r2, #31
 80a2702:	bf5c      	itt	pl
 80a2704:	2201      	movpl	r2, #1
 80a2706:	601a      	strpl	r2, [r3, #0]
 80a2708:	4b1e      	ldr	r3, [pc, #120]	; (80a2784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a270a:	681a      	ldr	r2, [r3, #0]
 80a270c:	07d0      	lsls	r0, r2, #31
 80a270e:	bf5c      	itt	pl
 80a2710:	2201      	movpl	r2, #1
 80a2712:	601a      	strpl	r2, [r3, #0]
 80a2714:	4b1c      	ldr	r3, [pc, #112]	; (80a2788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2716:	681a      	ldr	r2, [r3, #0]
 80a2718:	07d1      	lsls	r1, r2, #31
 80a271a:	bf5c      	itt	pl
 80a271c:	2201      	movpl	r2, #1
 80a271e:	601a      	strpl	r2, [r3, #0]
 80a2720:	4b1a      	ldr	r3, [pc, #104]	; (80a278c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2722:	681a      	ldr	r2, [r3, #0]
 80a2724:	07d2      	lsls	r2, r2, #31
 80a2726:	bf5c      	itt	pl
 80a2728:	2201      	movpl	r2, #1
 80a272a:	601a      	strpl	r2, [r3, #0]
 80a272c:	4b18      	ldr	r3, [pc, #96]	; (80a2790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a272e:	681a      	ldr	r2, [r3, #0]
 80a2730:	07d0      	lsls	r0, r2, #31
 80a2732:	bf5c      	itt	pl
 80a2734:	2201      	movpl	r2, #1
 80a2736:	601a      	strpl	r2, [r3, #0]
 80a2738:	4b16      	ldr	r3, [pc, #88]	; (80a2794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a273a:	681a      	ldr	r2, [r3, #0]
 80a273c:	07d1      	lsls	r1, r2, #31
 80a273e:	bf5c      	itt	pl
 80a2740:	2201      	movpl	r2, #1
 80a2742:	601a      	strpl	r2, [r3, #0]
 80a2744:	4b14      	ldr	r3, [pc, #80]	; (80a2798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2746:	681a      	ldr	r2, [r3, #0]
 80a2748:	07d2      	lsls	r2, r2, #31
 80a274a:	bf5c      	itt	pl
 80a274c:	2201      	movpl	r2, #1
 80a274e:	601a      	strpl	r2, [r3, #0]
 80a2750:	4b12      	ldr	r3, [pc, #72]	; (80a279c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2752:	681a      	ldr	r2, [r3, #0]
 80a2754:	07d0      	lsls	r0, r2, #31
 80a2756:	bf5c      	itt	pl
 80a2758:	2201      	movpl	r2, #1
 80a275a:	601a      	strpl	r2, [r3, #0]
 80a275c:	4b10      	ldr	r3, [pc, #64]	; (80a27a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a275e:	681a      	ldr	r2, [r3, #0]
 80a2760:	07d1      	lsls	r1, r2, #31
 80a2762:	bf5c      	itt	pl
 80a2764:	2201      	movpl	r2, #1
 80a2766:	601a      	strpl	r2, [r3, #0]
 80a2768:	4b0e      	ldr	r3, [pc, #56]	; (80a27a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a276a:	681a      	ldr	r2, [r3, #0]
 80a276c:	07d2      	lsls	r2, r2, #31
 80a276e:	bf5c      	itt	pl
 80a2770:	2201      	movpl	r2, #1
 80a2772:	601a      	strpl	r2, [r3, #0]
 80a2774:	4770      	bx	lr
 80a2776:	bf00      	nop
 80a2778:	20000218 	.word	0x20000218
 80a277c:	20000214 	.word	0x20000214
 80a2780:	20000210 	.word	0x20000210
 80a2784:	2000020c 	.word	0x2000020c
 80a2788:	20000208 	.word	0x20000208
 80a278c:	20000204 	.word	0x20000204
 80a2790:	20000200 	.word	0x20000200
 80a2794:	200001fc 	.word	0x200001fc
 80a2798:	200001f8 	.word	0x200001f8
 80a279c:	200001f4 	.word	0x200001f4
 80a27a0:	200001f0 	.word	0x200001f0
 80a27a4:	200001ec 	.word	0x200001ec

080a27a8 <__cxa_atexit>:
 80a27a8:	b510      	push	{r4, lr}
 80a27aa:	4c05      	ldr	r4, [pc, #20]	; (80a27c0 <__cxa_atexit+0x18>)
 80a27ac:	4613      	mov	r3, r2
 80a27ae:	b12c      	cbz	r4, 80a27bc <__cxa_atexit+0x14>
 80a27b0:	460a      	mov	r2, r1
 80a27b2:	4601      	mov	r1, r0
 80a27b4:	2002      	movs	r0, #2
 80a27b6:	f3af 8000 	nop.w
 80a27ba:	bd10      	pop	{r4, pc}
 80a27bc:	4620      	mov	r0, r4
 80a27be:	bd10      	pop	{r4, pc}
 80a27c0:	00000000 	.word	0x00000000

080a27c4 <memcpy>:
 80a27c4:	b510      	push	{r4, lr}
 80a27c6:	1e43      	subs	r3, r0, #1
 80a27c8:	440a      	add	r2, r1
 80a27ca:	4291      	cmp	r1, r2
 80a27cc:	d004      	beq.n	80a27d8 <memcpy+0x14>
 80a27ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a27d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a27d6:	e7f8      	b.n	80a27ca <memcpy+0x6>
 80a27d8:	bd10      	pop	{r4, pc}

080a27da <memset>:
 80a27da:	4603      	mov	r3, r0
 80a27dc:	4402      	add	r2, r0
 80a27de:	4293      	cmp	r3, r2
 80a27e0:	d002      	beq.n	80a27e8 <memset+0xe>
 80a27e2:	f803 1b01 	strb.w	r1, [r3], #1
 80a27e6:	e7fa      	b.n	80a27de <memset+0x4>
 80a27e8:	4770      	bx	lr
	...

080a27ec <srand>:
 80a27ec:	b538      	push	{r3, r4, r5, lr}
 80a27ee:	4b12      	ldr	r3, [pc, #72]	; (80a2838 <srand+0x4c>)
 80a27f0:	4605      	mov	r5, r0
 80a27f2:	681c      	ldr	r4, [r3, #0]
 80a27f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a27f6:	b9d3      	cbnz	r3, 80a282e <srand+0x42>
 80a27f8:	2018      	movs	r0, #24
 80a27fa:	f7ff f98b 	bl	80a1b14 <malloc>
 80a27fe:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2802:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2804:	8003      	strh	r3, [r0, #0]
 80a2806:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a280a:	8043      	strh	r3, [r0, #2]
 80a280c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2810:	8083      	strh	r3, [r0, #4]
 80a2812:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2816:	80c3      	strh	r3, [r0, #6]
 80a2818:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a281c:	8103      	strh	r3, [r0, #8]
 80a281e:	2305      	movs	r3, #5
 80a2820:	8143      	strh	r3, [r0, #10]
 80a2822:	230b      	movs	r3, #11
 80a2824:	8183      	strh	r3, [r0, #12]
 80a2826:	2201      	movs	r2, #1
 80a2828:	2300      	movs	r3, #0
 80a282a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a282e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2830:	2200      	movs	r2, #0
 80a2832:	611d      	str	r5, [r3, #16]
 80a2834:	615a      	str	r2, [r3, #20]
 80a2836:	bd38      	pop	{r3, r4, r5, pc}
 80a2838:	2000006c 	.word	0x2000006c

080a283c <strlen>:
 80a283c:	4603      	mov	r3, r0
 80a283e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2842:	2a00      	cmp	r2, #0
 80a2844:	d1fb      	bne.n	80a283e <strlen+0x2>
 80a2846:	1a18      	subs	r0, r3, r0
 80a2848:	3801      	subs	r0, #1
 80a284a:	4770      	bx	lr

080a284c <dynalib_user>:
 80a284c:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a285c:	0000 0000 504d 3152 3132 6e20 746f 6620     ....MPR121 not f
 80a286c:	756f 646e 202c 6863 6365 206b 6977 6972     ound, check wiri
 80a287c:	676e 003f 504d 3152 3132 6620 756f 646e     ng?.MPR121 found
 80a288c:	0021 0000                                   !...

080a2890 <CSWTCH.215>:
 80a2890:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a28a0:	0050 0000                                   P...

080a28a4 <_ZTV7TwoWire>:
	...
 80a28ac:	1b4d 080a 1b97 080a 1b6f 080a 1b4f 080a     M.......o...O...
 80a28bc:	1b77 080a 1b7f 080a 1b87 080a 1b8f 080a     w...............

080a28cc <_ZTV9IPAddress>:
	...
 80a28d4:	1c25 080a 1c15 080a 1c17 080a 6162 6475     %...........baud
 80a28e4:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a28f4:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a2904:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a2914:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a2924:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a2934:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a2944:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a2954:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a2964:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a2974:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a2984:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a2994:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a29a4:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a29b4:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a29c4 <_ZTVN5spark12NetworkClassE>:
	...
 80a29cc:	1ced 080a 1cf7 080a 1d01 080a 1d0b 080a     ................
 80a29dc:	1d15 080a 1d21 080a 1d2d 080a 1d39 080a     ....!...-...9...
 80a29ec:	1d41 080a 1d4b 080a 1d55 080a               A...K...U...

080a29f8 <_ZTV8SPIClass>:
	...
 80a2a00:	1eb9 080a 1ebb 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a2a10:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a2a20:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2a30:	0000 0000                                   ....

080a2a34 <_ZTV11USARTSerial>:
	...
 80a2a3c:	1f25 080a 1f75 080a 1f83 080a 1db9 080a     %...u...........
 80a2a4c:	1f39 080a 1f5b 080a 1f47 080a 1f6f 080a     9...[...G...o...
 80a2a5c:	1f27 080a 1f2b 080a                         '...+...

080a2a64 <_ZTV9USBSerial>:
	...
 80a2a6c:	2061 080a 20b1 080a 20bf 080a 1db9 080a     a ... ... ......
 80a2a7c:	209d 080a 2063 080a 2079 080a 20ab 080a     . ..c ..y ... ..
 80a2a8c:	208f 080a 205d 080a                         . ..] ..

080a2a94 <_ZTVN5spark9WiFiClassE>:
	...
 80a2a9c:	2263 080a 2259 080a 224f 080a 21c1 080a     c"..Y"..O"...!..
 80a2aac:	2243 080a 2237 080a 222b 080a 2223 080a     C"..7"..+"..#"..
 80a2abc:	2219 080a 220f 080a 21cb 080a               ."..."...!..

080a2ac8 <__sf_fake_stdin>:
	...

080a2ae8 <__sf_fake_stdout>:
	...

080a2b08 <__sf_fake_stderr>:
	...
 80a2b28:	0043                                        C.

080a2b2a <link_const_variable_data_end>:
	...

080a2b2c <link_constructors_location>:
 80a2b2c:	080a0225 	.word	0x080a0225
 80a2b30:	080a0465 	.word	0x080a0465
 80a2b34:	080a0469 	.word	0x080a0469
 80a2b38:	080a046d 	.word	0x080a046d
 80a2b3c:	080a0471 	.word	0x080a0471
 80a2b40:	080a0475 	.word	0x080a0475
 80a2b44:	080a0479 	.word	0x080a0479
 80a2b48:	080a17b5 	.word	0x080a17b5
 80a2b4c:	080a1cdd 	.word	0x080a1cdd
 80a2b50:	080a1da5 	.word	0x080a1da5
 80a2b54:	080a1e9d 	.word	0x080a1e9d
 80a2b58:	080a1ef9 	.word	0x080a1ef9
 80a2b5c:	080a1f11 	.word	0x080a1f11
 80a2b60:	080a226d 	.word	0x080a226d
 80a2b64:	080a2495 	.word	0x080a2495
 80a2b68:	080a24c5 	.word	0x080a24c5
 80a2b6c:	080a2519 	.word	0x080a2519
 80a2b70:	080a25dd 	.word	0x080a25dd
 80a2b74:	080a2661 	.word	0x080a2661
 80a2b78:	080a26e5 	.word	0x080a26e5

080a2b7c <link_constructors_end>:
 80a2b7c:	00000000 	.word	0x00000000
