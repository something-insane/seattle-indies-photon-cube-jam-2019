
/Users/matthewmccord/Workspace/photon_iot/seattle-indies-photon-cube-jam-2019/cube-debug/target/1.4.0/photon/cube-debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002c74  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2c90  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000480  20000000  080a2c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001c4  20000480  20000480  00030480  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a3114  080a3114  00023114  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a313c  080a313c  0002313c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d14a4  00000000  00000000  00023140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013025  00000000  00000000  000f45e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016951  00000000  00000000  00107609  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002190  00000000  00000000  0011df5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003268  00000000  00000000  001200ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002ce93  00000000  00000000  00123352  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002e56f  00000000  00000000  001501e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aac18  00000000  00000000  0017e754  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bd14  00000000  00000000  0022936c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 f987 	bl	80a2340 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 f98c 	bl	80a2356 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2c94 	.word	0x080a2c94
 80a004c:	20000480 	.word	0x20000480
 80a0050:	20000480 	.word	0x20000480
 80a0054:	20000644 	.word	0x20000644
 80a0058:	20000644 	.word	0x20000644

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 ff19 	bl	80a1e94 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2c38 	.word	0x080a2c38
 80a0084:	080a2c88 	.word	0x080a2c88

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b850 	b.w	80a012c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f929 	bl	80a02e4 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bebf 	b.w	80a1e18 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 ba3d 	b.w	80a1518 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 ba43 	b.w	80a1528 <free>
	...

080a00a4 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a6:	4a03      	ldr	r2, [pc, #12]	; (80a00b4 <__cxa_pure_virtual+0x10>)
 80a00a8:	2100      	movs	r1, #0
 80a00aa:	200c      	movs	r0, #12
 80a00ac:	f001 f9a8 	bl	80a1400 <panic_>
 80a00b0:	e7fe      	b.n	80a00b0 <__cxa_pure_virtual+0xc>
 80a00b2:	bf00      	nop
 80a00b4:	080a116d 	.word	0x080a116d

080a00b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b8:	7800      	ldrb	r0, [r0, #0]
 80a00ba:	fab0 f080 	clz	r0, r0
 80a00be:	0940      	lsrs	r0, r0, #5
 80a00c0:	4770      	bx	lr

080a00c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c2:	2301      	movs	r3, #1
 80a00c4:	7003      	strb	r3, [r0, #0]
 80a00c6:	4770      	bx	lr

080a00c8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
 80a00c8:	4770      	bx	lr
	...

080a00cc <_Z12displaySetupv>:
 80a00cc:	b510      	push	{r4, lr}
 80a00ce:	4c05      	ldr	r4, [pc, #20]	; (80a00e4 <_Z12displaySetupv+0x18>)
 80a00d0:	223c      	movs	r2, #60	; 0x3c
 80a00d2:	4620      	mov	r0, r4
 80a00d4:	2102      	movs	r1, #2
 80a00d6:	f000 fecf 	bl	80a0e78 <_ZN16Adafruit_SSD13065beginEhh>
 80a00da:	4620      	mov	r0, r4
 80a00dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a00e0:	f000 bf9a 	b.w	80a1018 <_ZN16Adafruit_SSD13067displayEv>
 80a00e4:	20000488 	.word	0x20000488

080a00e8 <_Z10touchSetupv>:
 80a00e8:	b510      	push	{r4, lr}
 80a00ea:	215a      	movs	r1, #90	; 0x5a
 80a00ec:	480b      	ldr	r0, [pc, #44]	; (80a011c <_Z10touchSetupv+0x34>)
 80a00ee:	f000 fa56 	bl	80a059e <_ZN15Adafruit_MPR1215beginEh>
 80a00f2:	b958      	cbnz	r0, 80a010c <_Z10touchSetupv+0x24>
 80a00f4:	f001 fdaa 	bl	80a1c4c <_Z16_fetch_usbserialv>
 80a00f8:	4909      	ldr	r1, [pc, #36]	; (80a0120 <_Z10touchSetupv+0x38>)
 80a00fa:	f001 fb98 	bl	80a182e <_ZN5Print7printlnEPKc>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00fe:	4c09      	ldr	r4, [pc, #36]	; (80a0124 <_Z10touchSetupv+0x3c>)
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0100:	f001 f83c 	bl	80a117c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0104:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a0106:	f001 f9a7 	bl	80a1458 <spark_process>
 80a010a:	e7f9      	b.n	80a0100 <_Z10touchSetupv+0x18>
 80a010c:	f001 fd9e 	bl	80a1c4c <_Z16_fetch_usbserialv>
 80a0110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0114:	4904      	ldr	r1, [pc, #16]	; (80a0128 <_Z10touchSetupv+0x40>)
 80a0116:	f001 bb8a 	b.w	80a182e <_ZN5Print7printlnEPKc>
 80a011a:	bf00      	nop
 80a011c:	200004b4 	.word	0x200004b4
 80a0120:	080a23dc 	.word	0x080a23dc
 80a0124:	20000550 	.word	0x20000550
 80a0128:	080a23fc 	.word	0x080a23fc

080a012c <setup>:
 80a012c:	b510      	push	{r4, lr}
 80a012e:	f001 fd8d 	bl	80a1c4c <_Z16_fetch_usbserialv>
 80a0132:	4c1c      	ldr	r4, [pc, #112]	; (80a01a4 <setup+0x78>)
 80a0134:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0138:	f001 fd7c 	bl	80a1c34 <_ZN9USBSerial5beginEl>
 80a013c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0140:	f001 f9fa 	bl	80a1538 <delay>
 80a0144:	f001 fd82 	bl	80a1c4c <_Z16_fetch_usbserialv>
 80a0148:	4621      	mov	r1, r4
 80a014a:	f001 fb70 	bl	80a182e <_ZN5Print7printlnEPKc>
 80a014e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0152:	f001 f9f1 	bl	80a1538 <delay>
 80a0156:	f001 fd79 	bl	80a1c4c <_Z16_fetch_usbserialv>
 80a015a:	4621      	mov	r1, r4
 80a015c:	f001 fb67 	bl	80a182e <_ZN5Print7printlnEPKc>
 80a0160:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0164:	f001 f9e8 	bl	80a1538 <delay>
 80a0168:	f001 fd70 	bl	80a1c4c <_Z16_fetch_usbserialv>
 80a016c:	4621      	mov	r1, r4
 80a016e:	f001 fb5e 	bl	80a182e <_ZN5Print7printlnEPKc>
 80a0172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0176:	f001 f9df 	bl	80a1538 <delay>
 80a017a:	f001 fd67 	bl	80a1c4c <_Z16_fetch_usbserialv>
 80a017e:	4621      	mov	r1, r4
 80a0180:	f001 fb55 	bl	80a182e <_ZN5Print7printlnEPKc>
 80a0184:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0188:	f001 f9d6 	bl	80a1538 <delay>
 80a018c:	f001 fd5e 	bl	80a1c4c <_Z16_fetch_usbserialv>
 80a0190:	4621      	mov	r1, r4
 80a0192:	f001 fb4c 	bl	80a182e <_ZN5Print7printlnEPKc>
 80a0196:	f7ff ff99 	bl	80a00cc <_Z12displaySetupv>
 80a019a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a019e:	f7ff bfa3 	b.w	80a00e8 <_Z10touchSetupv>
 80a01a2:	bf00      	nop
 80a01a4:	080a240a 	.word	0x080a240a

080a01a8 <_Z11printStatust>:
 80a01a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a01ac:	2500      	movs	r5, #0
 80a01ae:	4606      	mov	r6, r0
 80a01b0:	462c      	mov	r4, r5
 80a01b2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80a0220 <_Z11printStatust+0x78>
 80a01b6:	4f18      	ldr	r7, [pc, #96]	; (80a0218 <_Z11printStatust+0x70>)
 80a01b8:	b229      	sxth	r1, r5
 80a01ba:	2200      	movs	r2, #0
 80a01bc:	4817      	ldr	r0, [pc, #92]	; (80a021c <_Z11printStatust+0x74>)
 80a01be:	f000 fc16 	bl	80a09ee <_ZN12Adafruit_GFX9setCursorEss>
 80a01c2:	fa46 f304 	asr.w	r3, r6, r4
 80a01c6:	f013 0f01 	tst.w	r3, #1
 80a01ca:	bf14      	ite	ne
 80a01cc:	4641      	movne	r1, r8
 80a01ce:	4639      	moveq	r1, r7
 80a01d0:	4812      	ldr	r0, [pc, #72]	; (80a021c <_Z11printStatust+0x74>)
 80a01d2:	3401      	adds	r4, #1
 80a01d4:	f001 fb18 	bl	80a1808 <_ZN5Print5printEPKc>
 80a01d8:	3516      	adds	r5, #22
 80a01da:	2c06      	cmp	r4, #6
 80a01dc:	b2ad      	uxth	r5, r5
 80a01de:	d1eb      	bne.n	80a01b8 <_Z11printStatust+0x10>
 80a01e0:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80a0220 <_Z11printStatust+0x78>
 80a01e4:	4f0c      	ldr	r7, [pc, #48]	; (80a0218 <_Z11printStatust+0x70>)
 80a01e6:	2500      	movs	r5, #0
 80a01e8:	b229      	sxth	r1, r5
 80a01ea:	2220      	movs	r2, #32
 80a01ec:	480b      	ldr	r0, [pc, #44]	; (80a021c <_Z11printStatust+0x74>)
 80a01ee:	f000 fbfe 	bl	80a09ee <_ZN12Adafruit_GFX9setCursorEss>
 80a01f2:	fa46 f304 	asr.w	r3, r6, r4
 80a01f6:	f013 0f01 	tst.w	r3, #1
 80a01fa:	f105 0516 	add.w	r5, r5, #22
 80a01fe:	bf14      	ite	ne
 80a0200:	4641      	movne	r1, r8
 80a0202:	4639      	moveq	r1, r7
 80a0204:	4805      	ldr	r0, [pc, #20]	; (80a021c <_Z11printStatust+0x74>)
 80a0206:	b2ad      	uxth	r5, r5
 80a0208:	f001 fafe 	bl	80a1808 <_ZN5Print5printEPKc>
 80a020c:	2d84      	cmp	r5, #132	; 0x84
 80a020e:	f104 0401 	add.w	r4, r4, #1
 80a0212:	d1e9      	bne.n	80a01e8 <_Z11printStatust+0x40>
 80a0214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0218:	080a2425 	.word	0x080a2425
 80a021c:	20000488 	.word	0x20000488
 80a0220:	080a2421 	.word	0x080a2421

080a0224 <_Z17printBaselineDatat>:
 80a0224:	b538      	push	{r3, r4, r5, lr}
 80a0226:	2500      	movs	r5, #0
 80a0228:	462c      	mov	r4, r5
 80a022a:	2208      	movs	r2, #8
 80a022c:	b229      	sxth	r1, r5
 80a022e:	4813      	ldr	r0, [pc, #76]	; (80a027c <_Z17printBaselineDatat+0x58>)
 80a0230:	f000 fbdd 	bl	80a09ee <_ZN12Adafruit_GFX9setCursorEss>
 80a0234:	b2e1      	uxtb	r1, r4
 80a0236:	4812      	ldr	r0, [pc, #72]	; (80a0280 <_Z17printBaselineDatat+0x5c>)
 80a0238:	f000 f937 	bl	80a04aa <_ZN15Adafruit_MPR12112baselineDataEh>
 80a023c:	3401      	adds	r4, #1
 80a023e:	4601      	mov	r1, r0
 80a0240:	220a      	movs	r2, #10
 80a0242:	480e      	ldr	r0, [pc, #56]	; (80a027c <_Z17printBaselineDatat+0x58>)
 80a0244:	f001 fb4b 	bl	80a18de <_ZN5Print5printEii>
 80a0248:	3516      	adds	r5, #22
 80a024a:	2c06      	cmp	r4, #6
 80a024c:	b2ad      	uxth	r5, r5
 80a024e:	d1ec      	bne.n	80a022a <_Z17printBaselineDatat+0x6>
 80a0250:	2500      	movs	r5, #0
 80a0252:	2228      	movs	r2, #40	; 0x28
 80a0254:	b229      	sxth	r1, r5
 80a0256:	4809      	ldr	r0, [pc, #36]	; (80a027c <_Z17printBaselineDatat+0x58>)
 80a0258:	f000 fbc9 	bl	80a09ee <_ZN12Adafruit_GFX9setCursorEss>
 80a025c:	4621      	mov	r1, r4
 80a025e:	4808      	ldr	r0, [pc, #32]	; (80a0280 <_Z17printBaselineDatat+0x5c>)
 80a0260:	f000 f923 	bl	80a04aa <_ZN15Adafruit_MPR12112baselineDataEh>
 80a0264:	3516      	adds	r5, #22
 80a0266:	4601      	mov	r1, r0
 80a0268:	220a      	movs	r2, #10
 80a026a:	4804      	ldr	r0, [pc, #16]	; (80a027c <_Z17printBaselineDatat+0x58>)
 80a026c:	b2ad      	uxth	r5, r5
 80a026e:	f001 fb36 	bl	80a18de <_ZN5Print5printEii>
 80a0272:	3401      	adds	r4, #1
 80a0274:	2d84      	cmp	r5, #132	; 0x84
 80a0276:	b2e4      	uxtb	r4, r4
 80a0278:	d1eb      	bne.n	80a0252 <_Z17printBaselineDatat+0x2e>
 80a027a:	bd38      	pop	{r3, r4, r5, pc}
 80a027c:	20000488 	.word	0x20000488
 80a0280:	200004b4 	.word	0x200004b4

080a0284 <_Z17printFilteredDatat>:
 80a0284:	b538      	push	{r3, r4, r5, lr}
 80a0286:	2500      	movs	r5, #0
 80a0288:	462c      	mov	r4, r5
 80a028a:	2212      	movs	r2, #18
 80a028c:	b229      	sxth	r1, r5
 80a028e:	4813      	ldr	r0, [pc, #76]	; (80a02dc <_Z17printFilteredDatat+0x58>)
 80a0290:	f000 fbad 	bl	80a09ee <_ZN12Adafruit_GFX9setCursorEss>
 80a0294:	b2e1      	uxtb	r1, r4
 80a0296:	4812      	ldr	r0, [pc, #72]	; (80a02e0 <_Z17printFilteredDatat+0x5c>)
 80a0298:	f000 f93f 	bl	80a051a <_ZN15Adafruit_MPR12112filteredDataEh>
 80a029c:	3401      	adds	r4, #1
 80a029e:	4601      	mov	r1, r0
 80a02a0:	220a      	movs	r2, #10
 80a02a2:	480e      	ldr	r0, [pc, #56]	; (80a02dc <_Z17printFilteredDatat+0x58>)
 80a02a4:	f001 fb1b 	bl	80a18de <_ZN5Print5printEii>
 80a02a8:	3516      	adds	r5, #22
 80a02aa:	2c06      	cmp	r4, #6
 80a02ac:	b2ad      	uxth	r5, r5
 80a02ae:	d1ec      	bne.n	80a028a <_Z17printFilteredDatat+0x6>
 80a02b0:	2500      	movs	r5, #0
 80a02b2:	2232      	movs	r2, #50	; 0x32
 80a02b4:	b229      	sxth	r1, r5
 80a02b6:	4809      	ldr	r0, [pc, #36]	; (80a02dc <_Z17printFilteredDatat+0x58>)
 80a02b8:	f000 fb99 	bl	80a09ee <_ZN12Adafruit_GFX9setCursorEss>
 80a02bc:	4621      	mov	r1, r4
 80a02be:	4808      	ldr	r0, [pc, #32]	; (80a02e0 <_Z17printFilteredDatat+0x5c>)
 80a02c0:	f000 f92b 	bl	80a051a <_ZN15Adafruit_MPR12112filteredDataEh>
 80a02c4:	3516      	adds	r5, #22
 80a02c6:	4601      	mov	r1, r0
 80a02c8:	220a      	movs	r2, #10
 80a02ca:	4804      	ldr	r0, [pc, #16]	; (80a02dc <_Z17printFilteredDatat+0x58>)
 80a02cc:	b2ad      	uxth	r5, r5
 80a02ce:	f001 fb06 	bl	80a18de <_ZN5Print5printEii>
 80a02d2:	3401      	adds	r4, #1
 80a02d4:	2d84      	cmp	r5, #132	; 0x84
 80a02d6:	b2e4      	uxtb	r4, r4
 80a02d8:	d1eb      	bne.n	80a02b2 <_Z17printFilteredDatat+0x2e>
 80a02da:	bd38      	pop	{r3, r4, r5, pc}
 80a02dc:	20000488 	.word	0x20000488
 80a02e0:	200004b4 	.word	0x200004b4

080a02e4 <loop>:
 80a02e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a02e6:	4839      	ldr	r0, [pc, #228]	; (80a03cc <loop+0xe8>)
 80a02e8:	f000 f921 	bl	80a052e <_ZN15Adafruit_MPR1217touchedEv>
 80a02ec:	4c38      	ldr	r4, [pc, #224]	; (80a03d0 <loop+0xec>)
 80a02ee:	4939      	ldr	r1, [pc, #228]	; (80a03d4 <loop+0xf0>)
 80a02f0:	8020      	strh	r0, [r4, #0]
 80a02f2:	7808      	ldrb	r0, [r1, #0]
 80a02f4:	4b38      	ldr	r3, [pc, #224]	; (80a03d8 <loop+0xf4>)
 80a02f6:	4d39      	ldr	r5, [pc, #228]	; (80a03dc <loop+0xf8>)
 80a02f8:	b148      	cbz	r0, 80a030e <loop+0x2a>
 80a02fa:	6818      	ldr	r0, [r3, #0]
 80a02fc:	682a      	ldr	r2, [r5, #0]
 80a02fe:	4402      	add	r2, r0
 80a0300:	2aff      	cmp	r2, #255	; 0xff
 80a0302:	dd08      	ble.n	80a0316 <loop+0x32>
 80a0304:	22ff      	movs	r2, #255	; 0xff
 80a0306:	601a      	str	r2, [r3, #0]
 80a0308:	2300      	movs	r3, #0
 80a030a:	700b      	strb	r3, [r1, #0]
 80a030c:	e008      	b.n	80a0320 <loop+0x3c>
 80a030e:	681a      	ldr	r2, [r3, #0]
 80a0310:	682d      	ldr	r5, [r5, #0]
 80a0312:	1b52      	subs	r2, r2, r5
 80a0314:	d401      	bmi.n	80a031a <loop+0x36>
 80a0316:	601a      	str	r2, [r3, #0]
 80a0318:	e002      	b.n	80a0320 <loop+0x3c>
 80a031a:	6018      	str	r0, [r3, #0]
 80a031c:	2301      	movs	r3, #1
 80a031e:	700b      	strb	r3, [r1, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0320:	f000 ff2c 	bl	80a117c <HAL_Timer_Get_Milli_Seconds>
 80a0324:	4d2e      	ldr	r5, [pc, #184]	; (80a03e0 <loop+0xfc>)
 80a0326:	682b      	ldr	r3, [r5, #0]
 80a0328:	4283      	cmp	r3, r0
 80a032a:	d21f      	bcs.n	80a036c <loop+0x88>
 80a032c:	482d      	ldr	r0, [pc, #180]	; (80a03e4 <loop+0x100>)
 80a032e:	f000 fee9 	bl	80a1104 <_ZN16Adafruit_SSD130612clearDisplayEv>
 80a0332:	2101      	movs	r1, #1
 80a0334:	482b      	ldr	r0, [pc, #172]	; (80a03e4 <loop+0x100>)
 80a0336:	f000 fb5d 	bl	80a09f4 <_ZN12Adafruit_GFX11setTextSizeEh>
 80a033a:	2101      	movs	r1, #1
 80a033c:	4829      	ldr	r0, [pc, #164]	; (80a03e4 <loop+0x100>)
 80a033e:	f000 fb5e 	bl	80a09fe <_ZN12Adafruit_GFX12setTextColorEt>
 80a0342:	2200      	movs	r2, #0
 80a0344:	4611      	mov	r1, r2
 80a0346:	4827      	ldr	r0, [pc, #156]	; (80a03e4 <loop+0x100>)
 80a0348:	f000 fb51 	bl	80a09ee <_ZN12Adafruit_GFX9setCursorEss>
 80a034c:	8820      	ldrh	r0, [r4, #0]
 80a034e:	f7ff ff2b 	bl	80a01a8 <_Z11printStatust>
 80a0352:	8820      	ldrh	r0, [r4, #0]
 80a0354:	f7ff ff96 	bl	80a0284 <_Z17printFilteredDatat>
 80a0358:	8820      	ldrh	r0, [r4, #0]
 80a035a:	f7ff ff63 	bl	80a0224 <_Z17printBaselineDatat>
 80a035e:	f000 ff0d 	bl	80a117c <HAL_Timer_Get_Milli_Seconds>
 80a0362:	3064      	adds	r0, #100	; 0x64
 80a0364:	6028      	str	r0, [r5, #0]
 80a0366:	481f      	ldr	r0, [pc, #124]	; (80a03e4 <loop+0x100>)
 80a0368:	f000 fe56 	bl	80a1018 <_ZN16Adafruit_SSD13067displayEv>
 80a036c:	4e1e      	ldr	r6, [pc, #120]	; (80a03e8 <loop+0x104>)
 80a036e:	2500      	movs	r5, #0
 80a0370:	8823      	ldrh	r3, [r4, #0]
 80a0372:	b2ef      	uxtb	r7, r5
 80a0374:	412b      	asrs	r3, r5
 80a0376:	07d8      	lsls	r0, r3, #31
 80a0378:	d50e      	bpl.n	80a0398 <loop+0xb4>
 80a037a:	8833      	ldrh	r3, [r6, #0]
 80a037c:	412b      	asrs	r3, r5
 80a037e:	07d9      	lsls	r1, r3, #31
 80a0380:	d40a      	bmi.n	80a0398 <loop+0xb4>
 80a0382:	f001 fc63 	bl	80a1c4c <_Z16_fetch_usbserialv>
 80a0386:	4639      	mov	r1, r7
 80a0388:	220a      	movs	r2, #10
 80a038a:	f001 fa84 	bl	80a1896 <_ZN5Print5printEhi>
 80a038e:	f001 fc5d 	bl	80a1c4c <_Z16_fetch_usbserialv>
 80a0392:	4916      	ldr	r1, [pc, #88]	; (80a03ec <loop+0x108>)
 80a0394:	f001 fa4b 	bl	80a182e <_ZN5Print7printlnEPKc>
 80a0398:	8823      	ldrh	r3, [r4, #0]
 80a039a:	412b      	asrs	r3, r5
 80a039c:	07da      	lsls	r2, r3, #31
 80a039e:	d40e      	bmi.n	80a03be <loop+0xda>
 80a03a0:	8833      	ldrh	r3, [r6, #0]
 80a03a2:	412b      	asrs	r3, r5
 80a03a4:	07db      	lsls	r3, r3, #31
 80a03a6:	d50a      	bpl.n	80a03be <loop+0xda>
 80a03a8:	f001 fc50 	bl	80a1c4c <_Z16_fetch_usbserialv>
 80a03ac:	4639      	mov	r1, r7
 80a03ae:	220a      	movs	r2, #10
 80a03b0:	f001 fa71 	bl	80a1896 <_ZN5Print5printEhi>
 80a03b4:	f001 fc4a 	bl	80a1c4c <_Z16_fetch_usbserialv>
 80a03b8:	490d      	ldr	r1, [pc, #52]	; (80a03f0 <loop+0x10c>)
 80a03ba:	f001 fa38 	bl	80a182e <_ZN5Print7printlnEPKc>
 80a03be:	3501      	adds	r5, #1
 80a03c0:	2d0c      	cmp	r5, #12
 80a03c2:	d1d5      	bne.n	80a0370 <loop+0x8c>
 80a03c4:	8822      	ldrh	r2, [r4, #0]
 80a03c6:	4b08      	ldr	r3, [pc, #32]	; (80a03e8 <loop+0x104>)
 80a03c8:	801a      	strh	r2, [r3, #0]
 80a03ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a03cc:	200004b4 	.word	0x200004b4
 80a03d0:	200004bc 	.word	0x200004bc
 80a03d4:	20000004 	.word	0x20000004
 80a03d8:	20000484 	.word	0x20000484
 80a03dc:	20000000 	.word	0x20000000
 80a03e0:	200004b8 	.word	0x200004b8
 80a03e4:	20000488 	.word	0x20000488
 80a03e8:	200004ac 	.word	0x200004ac
 80a03ec:	080a2429 	.word	0x080a2429
 80a03f0:	080a2432 	.word	0x080a2432

080a03f4 <_ZN16Adafruit_SSD1306D0Ev>:
 80a03f4:	b510      	push	{r4, lr}
 80a03f6:	4604      	mov	r4, r0
 80a03f8:	2124      	movs	r1, #36	; 0x24
 80a03fa:	f001 fe48 	bl	80a208e <_ZdlPvj>
 80a03fe:	4620      	mov	r0, r4
 80a0400:	bd10      	pop	{r4, pc}
	...

080a0404 <_GLOBAL__sub_I_SystemMode>:
 80a0404:	b513      	push	{r0, r1, r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0406:	f000 fec1 	bl	80a118c <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a040a:	4b10      	ldr	r3, [pc, #64]	; (80a044c <_GLOBAL__sub_I_SystemMode+0x48>)
 80a040c:	2200      	movs	r2, #0
 80a040e:	701a      	strb	r2, [r3, #0]
 80a0410:	805a      	strh	r2, [r3, #2]
 80a0412:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0416:	4c0e      	ldr	r4, [pc, #56]	; (80a0450 <_GLOBAL__sub_I_SystemMode+0x4c>)
 80a0418:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a041a:	2003      	movs	r0, #3
 80a041c:	f000 fff8 	bl	80a1410 <set_system_mode>
 80a0420:	220c      	movs	r2, #12
 80a0422:	230e      	movs	r3, #14
 80a0424:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a0428:	210b      	movs	r1, #11
 80a042a:	230d      	movs	r3, #13
 80a042c:	220a      	movs	r2, #10
 80a042e:	4620      	mov	r0, r4
 80a0430:	f000 fcc2 	bl	80a0db8 <_ZN16Adafruit_SSD1306C1Eaaaaa>
 80a0434:	4a07      	ldr	r2, [pc, #28]	; (80a0454 <_GLOBAL__sub_I_SystemMode+0x50>)
 80a0436:	4908      	ldr	r1, [pc, #32]	; (80a0458 <_GLOBAL__sub_I_SystemMode+0x54>)
 80a0438:	4620      	mov	r0, r4
 80a043a:	f001 fe23 	bl	80a2084 <__aeabi_atexit>
 80a043e:	4807      	ldr	r0, [pc, #28]	; (80a045c <_GLOBAL__sub_I_SystemMode+0x58>)
 80a0440:	b002      	add	sp, #8
 80a0442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0446:	f000 b80b 	b.w	80a0460 <_ZN15Adafruit_MPR121C1Ev>
 80a044a:	bf00      	nop
 80a044c:	200004ae 	.word	0x200004ae
 80a0450:	20000488 	.word	0x20000488
 80a0454:	20000480 	.word	0x20000480
 80a0458:	080a00c9 	.word	0x080a00c9
 80a045c:	200004b4 	.word	0x200004b4

080a0460 <_ZN15Adafruit_MPR121C1Ev>:
 ****************************************************/

#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}
 80a0460:	4770      	bx	lr

080a0462 <_ZN15Adafruit_MPR12113readRegister8Eh>:
}

/*********************************************************************/


uint8_t Adafruit_MPR121::readRegister8(uint8_t reg) {
 80a0462:	b538      	push	{r3, r4, r5, lr}
 80a0464:	4604      	mov	r4, r0
 80a0466:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a0468:	f001 fdb2 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a046c:	f994 1000 	ldrsb.w	r1, [r4]
 80a0470:	f001 f8c4 	bl	80a15fc <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a0474:	f001 fdac 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a0478:	6803      	ldr	r3, [r0, #0]
 80a047a:	4629      	mov	r1, r5
 80a047c:	689b      	ldr	r3, [r3, #8]
 80a047e:	4798      	blx	r3
    Wire.endTransmission(false);
 80a0480:	f001 fda6 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a0484:	2100      	movs	r1, #0
 80a0486:	f001 f8bc 	bl	80a1602 <_ZN7TwoWire15endTransmissionEh>
    while (Wire.requestFrom(_i2caddr, 1) != 1);
 80a048a:	f001 fda1 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a048e:	2201      	movs	r2, #1
 80a0490:	f994 1000 	ldrsb.w	r1, [r4]
 80a0494:	f001 f8a9 	bl	80a15ea <_ZN7TwoWire11requestFromEii>
 80a0498:	2801      	cmp	r0, #1
 80a049a:	d1f6      	bne.n	80a048a <_ZN15Adafruit_MPR12113readRegister8Eh+0x28>
    return ( Wire.read());
 80a049c:	f001 fd98 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a04a0:	6803      	ldr	r3, [r0, #0]
 80a04a2:	695b      	ldr	r3, [r3, #20]
 80a04a4:	4798      	blx	r3
}
 80a04a6:	b2c0      	uxtb	r0, r0
 80a04a8:	bd38      	pop	{r3, r4, r5, pc}

080a04aa <_ZN15Adafruit_MPR12112baselineDataEh>:
  if (t > 12) return 0;
  return readRegister16(MPR121_FILTDATA_0L + t*2);
}

uint16_t  Adafruit_MPR121::baselineData(uint8_t t) {
  if (t > 12) return 0;
 80a04aa:	290c      	cmp	r1, #12
uint16_t  Adafruit_MPR121::filteredData(uint8_t t) {
  if (t > 12) return 0;
  return readRegister16(MPR121_FILTDATA_0L + t*2);
}

uint16_t  Adafruit_MPR121::baselineData(uint8_t t) {
 80a04ac:	b508      	push	{r3, lr}
  if (t > 12) return 0;
 80a04ae:	d806      	bhi.n	80a04be <_ZN15Adafruit_MPR12112baselineDataEh+0x14>
  uint16_t bl = readRegister8(MPR121_BASELINE_0 + t);
 80a04b0:	311e      	adds	r1, #30
 80a04b2:	b2c9      	uxtb	r1, r1
 80a04b4:	f7ff ffd5 	bl	80a0462 <_ZN15Adafruit_MPR12113readRegister8Eh>
  return (bl << 2);
 80a04b8:	0080      	lsls	r0, r0, #2
 80a04ba:	b280      	uxth	r0, r0
 80a04bc:	bd08      	pop	{r3, pc}
  if (t > 12) return 0;
  return readRegister16(MPR121_FILTDATA_0L + t*2);
}

uint16_t  Adafruit_MPR121::baselineData(uint8_t t) {
  if (t > 12) return 0;
 80a04be:	2000      	movs	r0, #0
  uint16_t bl = readRegister8(MPR121_BASELINE_0 + t);
  return (bl << 2);
}
 80a04c0:	bd08      	pop	{r3, pc}

080a04c2 <_ZN15Adafruit_MPR12114readRegister16Eh>:
    Wire.endTransmission(false);
    while (Wire.requestFrom(_i2caddr, 1) != 1);
    return ( Wire.read());
}

uint16_t Adafruit_MPR121::readRegister16(uint8_t reg) {
 80a04c2:	b538      	push	{r3, r4, r5, lr}
 80a04c4:	4604      	mov	r4, r0
 80a04c6:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a04c8:	f001 fd82 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a04cc:	f994 1000 	ldrsb.w	r1, [r4]
 80a04d0:	f001 f894 	bl	80a15fc <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a04d4:	f001 fd7c 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a04d8:	6803      	ldr	r3, [r0, #0]
 80a04da:	4629      	mov	r1, r5
 80a04dc:	689b      	ldr	r3, [r3, #8]
 80a04de:	4798      	blx	r3
    Wire.endTransmission(false);
 80a04e0:	f001 fd76 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a04e4:	2100      	movs	r1, #0
 80a04e6:	f001 f88c 	bl	80a1602 <_ZN7TwoWire15endTransmissionEh>
    while (Wire.requestFrom(_i2caddr, 2) != 2);
 80a04ea:	f001 fd71 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a04ee:	2202      	movs	r2, #2
 80a04f0:	f994 1000 	ldrsb.w	r1, [r4]
 80a04f4:	f001 f879 	bl	80a15ea <_ZN7TwoWire11requestFromEii>
 80a04f8:	2802      	cmp	r0, #2
 80a04fa:	d1f6      	bne.n	80a04ea <_ZN15Adafruit_MPR12114readRegister16Eh+0x28>
    uint16_t v = Wire.read();
 80a04fc:	f001 fd68 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a0500:	6803      	ldr	r3, [r0, #0]
 80a0502:	695b      	ldr	r3, [r3, #20]
 80a0504:	4798      	blx	r3
 80a0506:	4604      	mov	r4, r0
    v |=  ((uint16_t) Wire.read()) << 8;
 80a0508:	f001 fd62 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a050c:	6803      	ldr	r3, [r0, #0]
 80a050e:	695b      	ldr	r3, [r3, #20]
 80a0510:	4798      	blx	r3
    return v;
 80a0512:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
 80a0516:	b280      	uxth	r0, r0
 80a0518:	bd38      	pop	{r3, r4, r5, pc}

080a051a <_ZN15Adafruit_MPR12112filteredDataEh>:
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
  }
}

uint16_t  Adafruit_MPR121::filteredData(uint8_t t) {
  if (t > 12) return 0;
 80a051a:	290c      	cmp	r1, #12
 80a051c:	d805      	bhi.n	80a052a <_ZN15Adafruit_MPR12112filteredDataEh+0x10>
  return readRegister16(MPR121_FILTDATA_0L + t*2);
 80a051e:	3102      	adds	r1, #2
 80a0520:	0049      	lsls	r1, r1, #1
 80a0522:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80a0526:	f7ff bfcc 	b.w	80a04c2 <_ZN15Adafruit_MPR12114readRegister16Eh>
}
 80a052a:	2000      	movs	r0, #0
 80a052c:	4770      	bx	lr

080a052e <_ZN15Adafruit_MPR1217touchedEv>:
  if (t > 12) return 0;
  uint16_t bl = readRegister8(MPR121_BASELINE_0 + t);
  return (bl << 2);
}

uint16_t  Adafruit_MPR121::touched(void) {
 80a052e:	b508      	push	{r3, lr}
  uint16_t t = readRegister16(MPR121_TOUCHSTATUS_L);
 80a0530:	2100      	movs	r1, #0
 80a0532:	f7ff ffc6 	bl	80a04c2 <_ZN15Adafruit_MPR12114readRegister16Eh>
  return t & 0x0FFF;
}
 80a0536:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80a053a:	bd08      	pop	{r3, pc}

080a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>:
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
 80a053c:	b570      	push	{r4, r5, r6, lr}
 80a053e:	4606      	mov	r6, r0
 80a0540:	4614      	mov	r4, r2
 80a0542:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a0544:	f001 fd44 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a0548:	f996 1000 	ldrsb.w	r1, [r6]
 80a054c:	f001 f856 	bl	80a15fc <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 80a0550:	f001 fd3e 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a0554:	6803      	ldr	r3, [r0, #0]
 80a0556:	4629      	mov	r1, r5
 80a0558:	689b      	ldr	r3, [r3, #8]
 80a055a:	4798      	blx	r3
    Wire.write((uint8_t)(value));
 80a055c:	f001 fd38 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a0560:	6803      	ldr	r3, [r0, #0]
 80a0562:	4621      	mov	r1, r4
 80a0564:	689b      	ldr	r3, [r3, #8]
 80a0566:	4798      	blx	r3
    Wire.endTransmission();
 80a0568:	f001 fd32 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
}
 80a056c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
    Wire.beginTransmission(_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)(value));
    Wire.endTransmission();
 80a0570:	f001 b84b 	b.w	80a160a <_ZN7TwoWire15endTransmissionEv>

080a0574 <_ZN15Adafruit_MPR12113setThresholdsEhh>:
void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
 80a0574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0576:	4605      	mov	r5, r0
 80a0578:	460f      	mov	r7, r1
 80a057a:	4616      	mov	r6, r2
 80a057c:	2441      	movs	r4, #65	; 0x41
  for (uint8_t i=0; i<12; i++) {
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
 80a057e:	4621      	mov	r1, r4
 80a0580:	463a      	mov	r2, r7
 80a0582:	4628      	mov	r0, r5
 80a0584:	f7ff ffda 	bl	80a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
 80a0588:	1c61      	adds	r1, r4, #1
 80a058a:	3402      	adds	r4, #2
 80a058c:	4632      	mov	r2, r6
 80a058e:	b2c9      	uxtb	r1, r1
 80a0590:	4628      	mov	r0, r5
 80a0592:	b2e4      	uxtb	r4, r4
 80a0594:	f7ff ffd2 	bl	80a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
  for (uint8_t i=0; i<12; i++) {
 80a0598:	2c59      	cmp	r4, #89	; 0x59
 80a059a:	d1f0      	bne.n	80a057e <_ZN15Adafruit_MPR12113setThresholdsEhh+0xa>
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
  }
}
 80a059c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a059e <_ZN15Adafruit_MPR1215beginEh>:
#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
 80a059e:	b538      	push	{r3, r4, r5, lr}
 80a05a0:	4604      	mov	r4, r0
 80a05a2:	460d      	mov	r5, r1
  Wire.begin();
 80a05a4:	f001 fd14 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a05a8:	f001 f810 	bl	80a15cc <_ZN7TwoWire5beginEv>
    
  _i2caddr = i2caddr;

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a05ac:	2263      	movs	r2, #99	; 0x63
 80a05ae:	2180      	movs	r1, #128	; 0x80
 80a05b0:	4620      	mov	r0, r4
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
  Wire.begin();
    
  _i2caddr = i2caddr;
 80a05b2:	7025      	strb	r5, [r4, #0]

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a05b4:	f7ff ffc2 	bl	80a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  delay(1);
 80a05b8:	2001      	movs	r0, #1
 80a05ba:	f000 ffbd 	bl	80a1538 <delay>
  //  Serial.print("$"); Serial.print(i, HEX); 
  //  Serial.print(": 0x"); Serial.println(readRegister8(i));
  }
  

  writeRegister(MPR121_ECR, 0x0);
 80a05be:	2200      	movs	r2, #0
 80a05c0:	215e      	movs	r1, #94	; 0x5e
 80a05c2:	4620      	mov	r0, r4
 80a05c4:	f7ff ffba 	bl	80a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>

  uint8_t c = readRegister8(MPR121_CONFIG2);
 80a05c8:	215d      	movs	r1, #93	; 0x5d
 80a05ca:	4620      	mov	r0, r4
 80a05cc:	f7ff ff49 	bl	80a0462 <_ZN15Adafruit_MPR12113readRegister8Eh>
  
  if (c != 0x24) return false;
 80a05d0:	2824      	cmp	r0, #36	; 0x24
 80a05d2:	d151      	bne.n	80a0678 <_ZN15Adafruit_MPR1215beginEh+0xda>
  return true;
}

void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
 80a05d4:	4620      	mov	r0, r4
 80a05d6:	2206      	movs	r2, #6
 80a05d8:	210c      	movs	r1, #12
 80a05da:	f7ff ffcb 	bl	80a0574 <_ZN15Adafruit_MPR12113setThresholdsEhh>
  
  if (c != 0x24) return false;


  setThreshholds(12, 6);
  writeRegister(MPR121_MHDR, 0x01);
 80a05de:	4620      	mov	r0, r4
 80a05e0:	2201      	movs	r2, #1
 80a05e2:	212b      	movs	r1, #43	; 0x2b
 80a05e4:	f7ff ffaa 	bl	80a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDR, 0x01);
 80a05e8:	4620      	mov	r0, r4
 80a05ea:	2201      	movs	r2, #1
 80a05ec:	212c      	movs	r1, #44	; 0x2c
 80a05ee:	f7ff ffa5 	bl	80a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLR, 0x0E);
 80a05f2:	4620      	mov	r0, r4
 80a05f4:	220e      	movs	r2, #14
 80a05f6:	212d      	movs	r1, #45	; 0x2d
 80a05f8:	f7ff ffa0 	bl	80a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLR, 0x00);
 80a05fc:	4620      	mov	r0, r4
 80a05fe:	2200      	movs	r2, #0
 80a0600:	212e      	movs	r1, #46	; 0x2e
 80a0602:	f7ff ff9b 	bl	80a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_MHDF, 0x01);
 80a0606:	4620      	mov	r0, r4
 80a0608:	2201      	movs	r2, #1
 80a060a:	212f      	movs	r1, #47	; 0x2f
 80a060c:	f7ff ff96 	bl	80a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDF, 0x05);
 80a0610:	4620      	mov	r0, r4
 80a0612:	2205      	movs	r2, #5
 80a0614:	2130      	movs	r1, #48	; 0x30
 80a0616:	f7ff ff91 	bl	80a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLF, 0x01);
 80a061a:	4620      	mov	r0, r4
 80a061c:	2201      	movs	r2, #1
 80a061e:	2131      	movs	r1, #49	; 0x31
 80a0620:	f7ff ff8c 	bl	80a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLF, 0x00);
 80a0624:	4620      	mov	r0, r4
 80a0626:	2200      	movs	r2, #0
 80a0628:	2132      	movs	r1, #50	; 0x32
 80a062a:	f7ff ff87 	bl	80a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_NHDT, 0x00);
 80a062e:	4620      	mov	r0, r4
 80a0630:	2200      	movs	r2, #0
 80a0632:	2133      	movs	r1, #51	; 0x33
 80a0634:	f7ff ff82 	bl	80a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLT, 0x00);
 80a0638:	4620      	mov	r0, r4
 80a063a:	2200      	movs	r2, #0
 80a063c:	2134      	movs	r1, #52	; 0x34
 80a063e:	f7ff ff7d 	bl	80a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLT, 0x00);
 80a0642:	4620      	mov	r0, r4
 80a0644:	2200      	movs	r2, #0
 80a0646:	2135      	movs	r1, #53	; 0x35
 80a0648:	f7ff ff78 	bl	80a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_DEBOUNCE, 0);
 80a064c:	4620      	mov	r0, r4
 80a064e:	2200      	movs	r2, #0
 80a0650:	215b      	movs	r1, #91	; 0x5b
 80a0652:	f7ff ff73 	bl	80a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 80a0656:	4620      	mov	r0, r4
 80a0658:	2210      	movs	r2, #16
 80a065a:	215c      	movs	r1, #92	; 0x5c
 80a065c:	f7ff ff6e 	bl	80a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 80a0660:	4620      	mov	r0, r4
 80a0662:	2220      	movs	r2, #32
 80a0664:	215d      	movs	r1, #93	; 0x5d
 80a0666:	f7ff ff69 	bl	80a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>

//  writeRegister(MPR121_UPLIMIT, 150);
//  writeRegister(MPR121_TARGETLIMIT, 100); // should be ~400 (100 shifted)
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking
 80a066a:	4620      	mov	r0, r4
 80a066c:	228f      	movs	r2, #143	; 0x8f
 80a066e:	215e      	movs	r1, #94	; 0x5e
 80a0670:	f7ff ff64 	bl	80a053c <_ZN15Adafruit_MPR12113writeRegisterEhh>

  return true;
 80a0674:	2001      	movs	r0, #1
 80a0676:	bd38      	pop	{r3, r4, r5, pc}

  writeRegister(MPR121_ECR, 0x0);

  uint8_t c = readRegister8(MPR121_CONFIG2);
  
  if (c != 0x24) return false;
 80a0678:	2000      	movs	r0, #0
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking

  return true;
}
 80a067a:	bd38      	pop	{r3, r4, r5, pc}

080a067c <_GLOBAL__sub_I__ZN15Adafruit_MPR121C2Ev>:
 80a067c:	f000 bd86 	b.w	80a118c <HAL_Pin_Map>

080a0680 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a0680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0684:	461e      	mov	r6, r3
 80a0686:	b085      	sub	sp, #20
 80a0688:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80a068c:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a068e:	1a9a      	subs	r2, r3, r2
 80a0690:	2a00      	cmp	r2, #0
 80a0692:	bfb8      	it	lt
 80a0694:	4252      	neglt	r2, r2
 80a0696:	9200      	str	r2, [sp, #0]
 80a0698:	1a72      	subs	r2, r6, r1
 80a069a:	2a00      	cmp	r2, #0
 80a069c:	bfb8      	it	lt
 80a069e:	4252      	neglt	r2, r2
 80a06a0:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a06a2:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a06a4:	9a00      	ldr	r2, [sp, #0]
 80a06a6:	9901      	ldr	r1, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a06a8:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a06aa:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a06ac:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a06b0:	dd05      	ble.n	80a06be <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
 80a06b2:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
 80a06b4:	461e      	mov	r6, r3
 80a06b6:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a06b8:	4622      	mov	r2, r4
    swap(x0, y0);
 80a06ba:	462c      	mov	r4, r5
 80a06bc:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
 80a06be:	42b4      	cmp	r4, r6
 80a06c0:	dd05      	ble.n	80a06ce <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
 80a06c2:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
 80a06c4:	461d      	mov	r5, r3
 80a06c6:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
 80a06c8:	4622      	mov	r2, r4
 80a06ca:	4634      	mov	r4, r6
 80a06cc:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
 80a06ce:	1b5a      	subs	r2, r3, r5
 80a06d0:	2a00      	cmp	r2, #0
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a06d2:	ebc4 0806 	rsb	r8, r4, r6
  dy = abs(y1 - y0);
 80a06d6:	bfb8      	it	lt
 80a06d8:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a06da:	fa1f f888 	uxth.w	r8, r8
  dy = abs(y1 - y0);
 80a06de:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
 80a06e0:	fa0f f788 	sxth.w	r7, r8
 80a06e4:	2202      	movs	r2, #2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a06e6:	429d      	cmp	r5, r3
 80a06e8:	bfb4      	ite	lt
 80a06ea:	2301      	movlt	r3, #1
 80a06ec:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);

  int16_t err = dx / 2;
 80a06f0:	fb97 f7f2 	sdiv	r7, r7, r2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a06f4:	9302      	str	r3, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 80a06f6:	42b4      	cmp	r4, r6
 80a06f8:	dc1f      	bgt.n	80a073a <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
 80a06fa:	9a01      	ldr	r2, [sp, #4]
 80a06fc:	9b00      	ldr	r3, [sp, #0]
      drawPixel(y0, x0, color);
    } else {
      drawPixel(x0, y0, color);
 80a06fe:	4648      	mov	r0, r9
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
 80a0700:	4293      	cmp	r3, r2
 80a0702:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
 80a0706:	bfc8      	it	gt
 80a0708:	4622      	movgt	r2, r4
 80a070a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a070e:	bfc8      	it	gt
 80a0710:	4629      	movgt	r1, r5
 80a0712:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
 80a0714:	bfdc      	itt	le
 80a0716:	462a      	movle	r2, r5
 80a0718:	4621      	movle	r1, r4
 80a071a:	47d8      	blx	fp
    }
    err -= dy;
 80a071c:	9b03      	ldr	r3, [sp, #12]
 80a071e:	1aff      	subs	r7, r7, r3
 80a0720:	b2bb      	uxth	r3, r7
 80a0722:	b21f      	sxth	r7, r3
    if (err < 0) {
 80a0724:	2f00      	cmp	r7, #0
 80a0726:	da05      	bge.n	80a0734 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
 80a0728:	9a02      	ldr	r2, [sp, #8]
      err += dx;
 80a072a:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
 80a072e:	4415      	add	r5, r2
 80a0730:	b22d      	sxth	r5, r5
      err += dx;
 80a0732:	b23f      	sxth	r7, r7
 80a0734:	3401      	adds	r4, #1
 80a0736:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
 80a0738:	e7dd      	b.n	80a06f6 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
 80a073a:	b005      	add	sp, #20
 80a073c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0740 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a0740:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0744:	4604      	mov	r4, r0
 80a0746:	4691      	mov	r9, r2
 80a0748:	460d      	mov	r5, r1
 80a074a:	4698      	mov	r8, r3
 80a074c:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 80a0750:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a0752:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 80a0756:	9600      	str	r6, [sp, #0]
 80a0758:	69ff      	ldr	r7, [r7, #28]
 80a075a:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 80a075c:	6823      	ldr	r3, [r4, #0]
 80a075e:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80a0762:	9600      	str	r6, [sp, #0]
 80a0764:	444a      	add	r2, r9
 80a0766:	69df      	ldr	r7, [r3, #28]
 80a0768:	4629      	mov	r1, r5
 80a076a:	4643      	mov	r3, r8
 80a076c:	4620      	mov	r0, r4
 80a076e:	b212      	sxth	r2, r2
 80a0770:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 80a0772:	6823      	ldr	r3, [r4, #0]
 80a0774:	9600      	str	r6, [sp, #0]
 80a0776:	699f      	ldr	r7, [r3, #24]
 80a0778:	464a      	mov	r2, r9
 80a077a:	4653      	mov	r3, sl
 80a077c:	4629      	mov	r1, r5
 80a077e:	4620      	mov	r0, r4
 80a0780:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 80a0782:	6823      	ldr	r3, [r4, #0]
 80a0784:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 80a0788:	960a      	str	r6, [sp, #40]	; 0x28
 80a078a:	4429      	add	r1, r5
 80a078c:	699d      	ldr	r5, [r3, #24]
 80a078e:	464a      	mov	r2, r9
 80a0790:	4653      	mov	r3, sl
 80a0792:	4620      	mov	r0, r4
 80a0794:	46ac      	mov	ip, r5
 80a0796:	b209      	sxth	r1, r1
}
 80a0798:	b002      	add	sp, #8
 80a079a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
 80a079e:	4760      	bx	ip

080a07a0 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 80a07a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 80a07a2:	3b01      	subs	r3, #1
 80a07a4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a07a8:	4413      	add	r3, r2
 80a07aa:	6804      	ldr	r4, [r0, #0]
 80a07ac:	b21b      	sxth	r3, r3
 80a07ae:	9300      	str	r3, [sp, #0]
 80a07b0:	9501      	str	r5, [sp, #4]
 80a07b2:	6964      	ldr	r4, [r4, #20]
 80a07b4:	460b      	mov	r3, r1
 80a07b6:	47a0      	blx	r4
}
 80a07b8:	b003      	add	sp, #12
 80a07ba:	bd30      	pop	{r4, r5, pc}

080a07bc <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 80a07bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 80a07be:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a07c2:	6804      	ldr	r4, [r0, #0]
 80a07c4:	e88d 0024 	stmia.w	sp, {r2, r5}
 80a07c8:	3b01      	subs	r3, #1
 80a07ca:	440b      	add	r3, r1
 80a07cc:	6964      	ldr	r4, [r4, #20]
 80a07ce:	b21b      	sxth	r3, r3
 80a07d0:	47a0      	blx	r4
}
 80a07d2:	b003      	add	sp, #12
 80a07d4:	bd30      	pop	{r4, r5, pc}

080a07d6 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a07d6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a07da:	4605      	mov	r5, r0
 80a07dc:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a07de:	460c      	mov	r4, r1
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a07e0:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80a07e4:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a07e8:	eb01 0a03 	add.w	sl, r1, r3
 80a07ec:	4554      	cmp	r4, sl
 80a07ee:	da0b      	bge.n	80a0808 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
 80a07f0:	682b      	ldr	r3, [r5, #0]
 80a07f2:	f8cd 9000 	str.w	r9, [sp]
 80a07f6:	699e      	ldr	r6, [r3, #24]
 80a07f8:	4621      	mov	r1, r4
 80a07fa:	4643      	mov	r3, r8
 80a07fc:	463a      	mov	r2, r7
 80a07fe:	4628      	mov	r0, r5
 80a0800:	3401      	adds	r4, #1
 80a0802:	47b0      	blx	r6
 80a0804:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a0806:	e7f1      	b.n	80a07ec <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
 80a0808:	b002      	add	sp, #8
 80a080a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a080e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 80a080e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 80a0810:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80a0814:	6804      	ldr	r4, [r0, #0]
 80a0816:	9101      	str	r1, [sp, #4]
 80a0818:	9200      	str	r2, [sp, #0]
 80a081a:	2200      	movs	r2, #0
 80a081c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a0820:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80a0822:	4611      	mov	r1, r2
 80a0824:	47a0      	blx	r4
}
 80a0826:	b002      	add	sp, #8
 80a0828:	bd10      	pop	{r4, pc}

080a082a <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
 80a082a:	4770      	bx	lr

080a082c <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a082c:	8101      	strh	r1, [r0, #8]
{
  _width    = WIDTH;
 80a082e:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
 80a0830:	f64f 71ff 	movw	r1, #65535	; 0xffff
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 80a0834:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
 80a0836:	4d07      	ldr	r5, [pc, #28]	; (80a0854 <_ZN12Adafruit_GFXC1Ess+0x28>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0838:	2400      	movs	r4, #0
 80a083a:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
  _height   = HEIGHT;
 80a083c:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
 80a083e:	2201      	movs	r2, #1
 80a0840:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a0842:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
 80a0844:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
 80a0846:	8204      	strh	r4, [r0, #16]
 80a0848:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
 80a084a:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
 80a084c:	82c1      	strh	r1, [r0, #22]
 80a084e:	8281      	strh	r1, [r0, #20]
  wrap      = true;
 80a0850:	7682      	strb	r2, [r0, #26]
}
 80a0852:	bd30      	pop	{r4, r5, pc}
 80a0854:	080a2444 	.word	0x080a2444

080a0858 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
 80a0858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a085c:	b08f      	sub	sp, #60	; 0x3c
 80a085e:	9106      	str	r1, [sp, #24]
 80a0860:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 80a0864:	4604      	mov	r4, r0
 80a0866:	9107      	str	r1, [sp, #28]
 80a0868:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80a086c:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 80a0870:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
 80a0872:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80a0876:	9806      	ldr	r0, [sp, #24]
 80a0878:	4281      	cmp	r1, r0
 80a087a:	dd7d      	ble.n	80a0978 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
 80a087c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80a0880:	4291      	cmp	r1, r2
 80a0882:	dd79      	ble.n	80a0978 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
     (y >= _height)           || // Clip bottom
 80a0884:	2106      	movs	r1, #6
 80a0886:	fb01 0008 	mla	r0, r1, r8, r0
 80a088a:	2800      	cmp	r0, #0
 80a088c:	dd74      	ble.n	80a0978 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
     ((x + 6 * size - 1) < 0) || // Clip left
 80a088e:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
 80a0892:	2800      	cmp	r0, #0
 80a0894:	dd70      	ble.n	80a0978 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
 80a0896:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80a089a:	b295      	uxth	r5, r2
 80a089c:	930c      	str	r3, [sp, #48]	; 0x30
 80a089e:	f105 0308 	add.w	r3, r5, #8
 80a08a2:	b29b      	uxth	r3, r3
 80a08a4:	9109      	str	r1, [sp, #36]	; 0x24
 80a08a6:	2600      	movs	r6, #0
 80a08a8:	930d      	str	r3, [sp, #52]	; 0x34
 80a08aa:	462f      	mov	r7, r5
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a08ac:	46a9      	mov	r9, r5
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
 80a08ae:	2e05      	cmp	r6, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
 80a08b0:	bf1f      	itttt	ne
 80a08b2:	4b33      	ldrne	r3, [pc, #204]	; (80a0980 <_ZN12Adafruit_GFX8drawCharEsshtth+0x128>)
 80a08b4:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
 80a08b6:	199b      	addne	r3, r3, r6
 80a08b8:	f813 a002 	ldrbne.w	sl, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a08bc:	fa1f f388 	uxth.w	r3, r8
 80a08c0:	9304      	str	r3, [sp, #16]
 80a08c2:	9904      	ldr	r1, [sp, #16]
 80a08c4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80a08c8:	b2b2      	uxth	r2, r6
 80a08ca:	fb01 3102 	mla	r1, r1, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a08ce:	4413      	add	r3, r2
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a08d0:	b209      	sxth	r1, r1
 80a08d2:	910a      	str	r1, [sp, #40]	; 0x28
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a08d4:	b21b      	sxth	r3, r3
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a08d6:	fa0f f188 	sxth.w	r1, r8
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
 80a08da:	bf08      	it	eq
 80a08dc:	f04f 0a00 	moveq.w	sl, #0
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a08e0:	9505      	str	r5, [sp, #20]
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a08e2:	9103      	str	r1, [sp, #12]
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a08e4:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
 80a08e6:	f01a 0f01 	tst.w	sl, #1
 80a08ea:	d011      	beq.n	80a0910 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb8>
        if (size == 1) // default size
 80a08ec:	f1b8 0f01 	cmp.w	r8, #1
 80a08f0:	6823      	ldr	r3, [r4, #0]
 80a08f2:	d103      	bne.n	80a08fc <_ZN12Adafruit_GFX8drawCharEsshtth+0xa4>
          drawPixel(x+i, y+j, color);
 80a08f4:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a08f8:	9b07      	ldr	r3, [sp, #28]
 80a08fa:	e014      	b.n	80a0926 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a08fc:	9a07      	ldr	r2, [sp, #28]
 80a08fe:	9201      	str	r2, [sp, #4]
 80a0900:	9a03      	ldr	r2, [sp, #12]
 80a0902:	9200      	str	r2, [sp, #0]
 80a0904:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a0908:	4613      	mov	r3, r2
 80a090a:	fa0f f289 	sxth.w	r2, r9
 80a090e:	e018      	b.n	80a0942 <_ZN12Adafruit_GFX8drawCharEsshtth+0xea>
        } 
      } else if (bg != color) {
 80a0910:	9b07      	ldr	r3, [sp, #28]
 80a0912:	9a08      	ldr	r2, [sp, #32]
 80a0914:	4293      	cmp	r3, r2
 80a0916:	d017      	beq.n	80a0948 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf0>
        if (size == 1) // default size
 80a0918:	f1b8 0f01 	cmp.w	r8, #1
 80a091c:	6823      	ldr	r3, [r4, #0]
 80a091e:	d107      	bne.n	80a0930 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, bg);
 80a0920:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a0924:	4613      	mov	r3, r2
 80a0926:	b23a      	sxth	r2, r7
 80a0928:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80a092a:	4620      	mov	r0, r4
 80a092c:	47d8      	blx	fp
 80a092e:	e00b      	b.n	80a0948 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf0>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a0930:	9a08      	ldr	r2, [sp, #32]
 80a0932:	9201      	str	r2, [sp, #4]
 80a0934:	9a03      	ldr	r2, [sp, #12]
 80a0936:	9200      	str	r2, [sp, #0]
 80a0938:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a093c:	4613      	mov	r3, r2
 80a093e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80a0942:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a0944:	4620      	mov	r0, r4
 80a0946:	47d8      	blx	fp
 80a0948:	9b04      	ldr	r3, [sp, #16]
 80a094a:	9a04      	ldr	r2, [sp, #16]
 80a094c:	4499      	add	r9, r3
 80a094e:	9b05      	ldr	r3, [sp, #20]
 80a0950:	3701      	adds	r7, #1
 80a0952:	4413      	add	r3, r2
 80a0954:	b29b      	uxth	r3, r3
 80a0956:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 80a0958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a095a:	b2bf      	uxth	r7, r7
 80a095c:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
 80a095e:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 80a0962:	fa1f f989 	uxth.w	r9, r9
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 80a0966:	d1be      	bne.n	80a08e6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8e>
 80a0968:	9b09      	ldr	r3, [sp, #36]	; 0x24
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
 80a096a:	3601      	adds	r6, #1
 80a096c:	3b01      	subs	r3, #1
 80a096e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a0972:	b276      	sxtb	r6, r6
 80a0974:	9309      	str	r3, [sp, #36]	; 0x24
 80a0976:	d198      	bne.n	80a08aa <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
 80a0978:	b00f      	add	sp, #60	; 0x3c
 80a097a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a097e:	bf00      	nop
 80a0980:	080a2474 	.word	0x080a2474

080a0984 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a0984:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
 80a0986:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a0988:	b085      	sub	sp, #20
 80a098a:	4604      	mov	r4, r0
 80a098c:	460b      	mov	r3, r1

  if (c == '\n') {
 80a098e:	d104      	bne.n	80a099a <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
 80a0990:	7e02      	ldrb	r2, [r0, #24]
 80a0992:	8a43      	ldrh	r3, [r0, #18]
 80a0994:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a0998:	e023      	b.n	80a09e2 <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
 80a099a:	290d      	cmp	r1, #13
 80a099c:	d024      	beq.n	80a09e8 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80a099e:	7e05      	ldrb	r5, [r0, #24]
 80a09a0:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 80a09a4:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 80a09a8:	9502      	str	r5, [sp, #8]
 80a09aa:	8ac5      	ldrh	r5, [r0, #22]
 80a09ac:	9501      	str	r5, [sp, #4]
 80a09ae:	8a85      	ldrh	r5, [r0, #20]
 80a09b0:	9500      	str	r5, [sp, #0]
 80a09b2:	f7ff ff51 	bl	80a0858 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
 80a09b6:	7e22      	ldrb	r2, [r4, #24]
 80a09b8:	8a23      	ldrh	r3, [r4, #16]
 80a09ba:	b291      	uxth	r1, r2
 80a09bc:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80a09c0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80a09c4:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
 80a09c6:	b21b      	sxth	r3, r3
 80a09c8:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80a09ca:	b168      	cbz	r0, 80a09e8 <_ZN12Adafruit_GFX5writeEh+0x64>
 80a09cc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80a09d0:	f06f 0505 	mvn.w	r5, #5
 80a09d4:	fb05 0202 	mla	r2, r5, r2, r0
 80a09d8:	4293      	cmp	r3, r2
 80a09da:	dd05      	ble.n	80a09e8 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
 80a09dc:	8a63      	ldrh	r3, [r4, #18]
 80a09de:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80a09e2:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
 80a09e4:	2300      	movs	r3, #0
 80a09e6:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
 80a09e8:	2001      	movs	r0, #1
 80a09ea:	b005      	add	sp, #20
 80a09ec:	bd30      	pop	{r4, r5, pc}

080a09ee <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
 80a09ee:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
 80a09f0:	8242      	strh	r2, [r0, #18]
 80a09f2:	4770      	bx	lr

080a09f4 <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
 80a09f4:	2900      	cmp	r1, #0
 80a09f6:	bf08      	it	eq
 80a09f8:	2101      	moveq	r1, #1
 80a09fa:	7601      	strb	r1, [r0, #24]
 80a09fc:	4770      	bx	lr

080a09fe <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
 80a09fe:	82c1      	strh	r1, [r0, #22]
 80a0a00:	8281      	strh	r1, [r0, #20]
 80a0a02:	4770      	bx	lr

080a0a04 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
 80a0a04:	7e40      	ldrb	r0, [r0, #25]
 80a0a06:	4770      	bx	lr

080a0a08 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
 80a0a08:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80a0a0c:	4770      	bx	lr

080a0a0e <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
 80a0a0e:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80a0a12:	4770      	bx	lr

080a0a14 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a0a14:	f000 bbba 	b.w	80a118c <HAL_Pin_Map>

080a0a18 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a0a18:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
 80a0a1a:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a0a1c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
 80a0a20:	2c02      	cmp	r4, #2
 80a0a22:	d008      	beq.n	80a0a36 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
 80a0a24:	2c03      	cmp	r4, #3
 80a0a26:	d00f      	beq.n	80a0a48 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
 80a0a28:	2c01      	cmp	r4, #1
 80a0a2a:	d170      	bne.n	80a0b0e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
 80a0a2c:	8904      	ldrh	r4, [r0, #8]
 80a0a2e:	3c01      	subs	r4, #1
 80a0a30:	1aa2      	subs	r2, r4, r2
 80a0a32:	b212      	sxth	r2, r2
      break;
 80a0a34:	e00c      	b.n	80a0a50 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
 80a0a36:	8944      	ldrh	r4, [r0, #10]
 80a0a38:	3c01      	subs	r4, #1
 80a0a3a:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
 80a0a3c:	8904      	ldrh	r4, [r0, #8]
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
 80a0a3e:	b212      	sxth	r2, r2
      x -= (w-1);
 80a0a40:	1ae4      	subs	r4, r4, r3
 80a0a42:	1a61      	subs	r1, r4, r1
 80a0a44:	b209      	sxth	r1, r1
      break;
 80a0a46:	e062      	b.n	80a0b0e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
 80a0a48:	8944      	ldrh	r4, [r0, #10]
 80a0a4a:	1ae4      	subs	r4, r4, r3
 80a0a4c:	1a61      	subs	r1, r4, r1
 80a0a4e:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 80a0a50:	2a00      	cmp	r2, #0
 80a0a52:	db5b      	blt.n	80a0b0c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
 80a0a54:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a0a58:	4294      	cmp	r4, r2
 80a0a5a:	f340 8090 	ble.w	80a0b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
 80a0a5e:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 80a0a60:	bfbe      	ittt	lt
 80a0a62:	185b      	addlt	r3, r3, r1
 80a0a64:	b21b      	sxthlt	r3, r3
    __y = 0;
 80a0a66:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a0a68:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80a0a6c:	18cc      	adds	r4, r1, r3
 80a0a6e:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
 80a0a70:	bfc4      	itt	gt
 80a0a72:	1a43      	subgt	r3, r0, r1
 80a0a74:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
 80a0a76:	2b00      	cmp	r3, #0
 80a0a78:	f340 8081 	ble.w	80a0b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 80a0a7c:	b2c9      	uxtb	r1, r1
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0a7e:	08c8      	lsrs	r0, r1, #3
 80a0a80:	4f3f      	ldr	r7, [pc, #252]	; (80a0b80 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
 80a0a82:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a0a86:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
 80a0a8a:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0a8c:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a0a90:	d017      	beq.n	80a0ac2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
 80a0a92:	f1c1 0108 	rsb	r1, r1, #8
 80a0a96:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a0a98:	493a      	ldr	r1, [pc, #232]	; (80a0b84 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
 80a0a9a:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a0a9c:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
 80a0a9e:	bf3f      	itttt	cc
 80a0aa0:	ebc3 0e00 	rsbcc	lr, r3, r0
 80a0aa4:	21ff      	movcc	r1, #255	; 0xff
 80a0aa6:	fa41 f10e 	asrcc.w	r1, r1, lr
 80a0aaa:	400e      	andcc	r6, r1
 80a0aac:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
 80a0aae:	2d01      	cmp	r5, #1
      *pBuf |= mask;
 80a0ab0:	bf0c      	ite	eq
 80a0ab2:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
 80a0ab4:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a0ab6:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
 80a0ab8:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a0aba:	d360      	bcc.n	80a0b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
 80a0abc:	1a18      	subs	r0, r3, r0
 80a0abe:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
 80a0ac0:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
 80a0ac2:	2b07      	cmp	r3, #7
 80a0ac4:	d917      	bls.n	80a0af6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
 80a0ac6:	2d01      	cmp	r5, #1
 80a0ac8:	bf0c      	ite	eq
 80a0aca:	20ff      	moveq	r0, #255	; 0xff
 80a0acc:	2000      	movne	r0, #0
 80a0ace:	461a      	mov	r2, r3
 80a0ad0:	f104 0180 	add.w	r1, r4, #128	; 0x80

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 80a0ad4:	3a08      	subs	r2, #8
 80a0ad6:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
 80a0ad8:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
 80a0ada:	f801 0c80 	strb.w	r0, [r1, #-128]
 80a0ade:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 80a0ae2:	d8f7      	bhi.n	80a0ad4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
 80a0ae4:	f1a3 0208 	sub.w	r2, r3, #8
 80a0ae8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80a0aec:	3201      	adds	r2, #1
 80a0aee:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 80a0af2:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
 80a0af6:	2b00      	cmp	r3, #0
 80a0af8:	d041      	beq.n	80a0b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a0afa:	4a23      	ldr	r2, [pc, #140]	; (80a0b88 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
    if(color == WHITE) { 
 80a0afc:	2d01      	cmp	r5, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a0afe:	5cd2      	ldrb	r2, [r2, r3]
 80a0b00:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
      *pBuf |= mask;
 80a0b02:	bf0c      	ite	eq
 80a0b04:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
 80a0b06:	4393      	bicne	r3, r2
 80a0b08:	7023      	strb	r3, [r4, #0]
 80a0b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
 80a0b0e:	2a00      	cmp	r2, #0
 80a0b10:	db35      	blt.n	80a0b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a0b12:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a0b16:	4294      	cmp	r4, r2
 80a0b18:	dd31      	ble.n	80a0b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
 80a0b1a:	2900      	cmp	r1, #0
    w += x;
 80a0b1c:	bfbc      	itt	lt
 80a0b1e:	18c9      	addlt	r1, r1, r3
 80a0b20:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a0b22:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
 80a0b26:	bfb8      	it	lt
 80a0b28:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a0b2a:	18ce      	adds	r6, r1, r3
 80a0b2c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 80a0b2e:	bfc4      	itt	gt
 80a0b30:	1a63      	subgt	r3, r4, r1
 80a0b32:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
 80a0b34:	2b00      	cmp	r3, #0
 80a0b36:	dd22      	ble.n	80a0b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0b38:	10d0      	asrs	r0, r2, #3
 80a0b3a:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
 80a0b3e:	4810      	ldr	r0, [pc, #64]	; (80a0b80 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
 80a0b40:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0b44:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
 80a0b46:	2001      	movs	r0, #1
 80a0b48:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
 80a0b4c:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
 80a0b4e:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
 80a0b50:	d109      	bne.n	80a0b66 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
 80a0b52:	3b01      	subs	r3, #1
 80a0b54:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
 80a0b56:	1c5c      	adds	r4, r3, #1
 80a0b58:	d011      	beq.n	80a0b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a0b5a:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a0b5e:	4310      	orrs	r0, r2
 80a0b60:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a0b64:	e7f5      	b.n	80a0b52 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
 80a0b66:	43d2      	mvns	r2, r2
 80a0b68:	b2d2      	uxtb	r2, r2
 80a0b6a:	3b01      	subs	r3, #1
 80a0b6c:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
 80a0b6e:	1c58      	adds	r0, r3, #1
 80a0b70:	d005      	beq.n	80a0b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a0b72:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a0b76:	4010      	ands	r0, r2
 80a0b78:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a0b7c:	e7f5      	b.n	80a0b6a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
 80a0b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0b80:	20000015 	.word	0x20000015
 80a0b84:	2000000d 	.word	0x2000000d
 80a0b88:	20000005 	.word	0x20000005

080a0b8c <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a0b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
 80a0b8e:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a0b90:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
 80a0b94:	2c02      	cmp	r4, #2
 80a0b96:	d008      	beq.n	80a0baa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
 80a0b98:	2c03      	cmp	r4, #3
 80a0b9a:	d00f      	beq.n	80a0bbc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
 80a0b9c:	2c01      	cmp	r4, #1
 80a0b9e:	d112      	bne.n	80a0bc6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
 80a0ba0:	8904      	ldrh	r4, [r0, #8]
 80a0ba2:	1ae4      	subs	r4, r4, r3
 80a0ba4:	1aa2      	subs	r2, r4, r2
 80a0ba6:	b212      	sxth	r2, r2
      break;
 80a0ba8:	e06d      	b.n	80a0c86 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 80a0baa:	8904      	ldrh	r4, [r0, #8]
 80a0bac:	3c01      	subs	r4, #1
 80a0bae:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
 80a0bb0:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 80a0bb2:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
 80a0bb4:	1ae4      	subs	r4, r4, r3
 80a0bb6:	1aa2      	subs	r2, r4, r2
 80a0bb8:	b212      	sxth	r2, r2
      break;
 80a0bba:	e004      	b.n	80a0bc6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
 80a0bbc:	8944      	ldrh	r4, [r0, #10]
 80a0bbe:	3c01      	subs	r4, #1
 80a0bc0:	1a61      	subs	r1, r4, r1
 80a0bc2:	b209      	sxth	r1, r1
      break;
 80a0bc4:	e05f      	b.n	80a0c86 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 80a0bc6:	2900      	cmp	r1, #0
 80a0bc8:	db5c      	blt.n	80a0c84 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
 80a0bca:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a0bce:	428c      	cmp	r4, r1
 80a0bd0:	f340 8091 	ble.w	80a0cf6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
 80a0bd4:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 80a0bd6:	bfbc      	itt	lt
 80a0bd8:	18d2      	addlt	r2, r2, r3
 80a0bda:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a0bdc:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
 80a0be0:	bfb8      	it	lt
 80a0be2:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a0be4:	18d4      	adds	r4, r2, r3
 80a0be6:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
 80a0be8:	bfc4      	itt	gt
 80a0bea:	1a83      	subgt	r3, r0, r2
 80a0bec:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
 80a0bee:	2b00      	cmp	r3, #0
 80a0bf0:	f340 8081 	ble.w	80a0cf6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 80a0bf4:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0bf6:	4e40      	ldr	r6, [pc, #256]	; (80a0cf8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
 80a0bf8:	b2da      	uxtb	r2, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0bfa:	08e3      	lsrs	r3, r4, #3
 80a0bfc:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a0c00:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0c04:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a0c08:	d017      	beq.n	80a0c3a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
 80a0c0a:	f1c4 0408 	rsb	r4, r4, #8
 80a0c0e:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a0c10:	4c3a      	ldr	r4, [pc, #232]	; (80a0cfc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
 80a0c12:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a0c14:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
 80a0c16:	bf3f      	itttt	cc
 80a0c18:	ebc2 0e00 	rsbcc	lr, r2, r0
 80a0c1c:	24ff      	movcc	r4, #255	; 0xff
 80a0c1e:	fa44 f40e 	asrcc.w	r4, r4, lr
 80a0c22:	4027      	andcc	r7, r4
 80a0c24:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
 80a0c26:	2d01      	cmp	r5, #1
      *pBuf |= mask;
 80a0c28:	bf0c      	ite	eq
 80a0c2a:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
 80a0c2c:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a0c2e:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
 80a0c30:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a0c32:	d360      	bcc.n	80a0cf6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
 80a0c34:	1a10      	subs	r0, r2, r0
 80a0c36:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
 80a0c38:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
 80a0c3a:	2a07      	cmp	r2, #7
 80a0c3c:	d917      	bls.n	80a0c6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
 80a0c3e:	2d01      	cmp	r5, #1
 80a0c40:	bf0c      	ite	eq
 80a0c42:	24ff      	moveq	r4, #255	; 0xff
 80a0c44:	2400      	movne	r4, #0
 80a0c46:	4611      	mov	r1, r2
 80a0c48:	f103 0080 	add.w	r0, r3, #128	; 0x80

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 80a0c4c:	3908      	subs	r1, #8
 80a0c4e:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
 80a0c50:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
 80a0c52:	f800 4c80 	strb.w	r4, [r0, #-128]
 80a0c56:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 80a0c5a:	d8f7      	bhi.n	80a0c4c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
 80a0c5c:	f1a2 0108 	sub.w	r1, r2, #8
 80a0c60:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80a0c64:	3101      	adds	r1, #1
 80a0c66:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
 80a0c6a:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
 80a0c6e:	2a00      	cmp	r2, #0
 80a0c70:	d041      	beq.n	80a0cf6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a0c72:	4923      	ldr	r1, [pc, #140]	; (80a0d00 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
    if(color == WHITE) { 
 80a0c74:	2d01      	cmp	r5, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a0c76:	5c89      	ldrb	r1, [r1, r2]
 80a0c78:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
      *pBuf |= mask;
 80a0c7a:	bf0c      	ite	eq
 80a0c7c:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
 80a0c7e:	438a      	bicne	r2, r1
 80a0c80:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
 80a0c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
 80a0c86:	2900      	cmp	r1, #0
 80a0c88:	db35      	blt.n	80a0cf6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a0c8a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a0c8e:	428c      	cmp	r4, r1
 80a0c90:	dd31      	ble.n	80a0cf6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
 80a0c92:	2a00      	cmp	r2, #0
    w += x;
 80a0c94:	bfbc      	itt	lt
 80a0c96:	18d2      	addlt	r2, r2, r3
 80a0c98:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a0c9a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
 80a0c9e:	bfb8      	it	lt
 80a0ca0:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a0ca2:	18d6      	adds	r6, r2, r3
 80a0ca4:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 80a0ca6:	bfc4      	itt	gt
 80a0ca8:	1aa3      	subgt	r3, r4, r2
 80a0caa:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
 80a0cac:	2b00      	cmp	r3, #0
 80a0cae:	dd22      	ble.n	80a0cf6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0cb0:	10c8      	asrs	r0, r1, #3
 80a0cb2:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
 80a0cb6:	4810      	ldr	r0, [pc, #64]	; (80a0cf8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
 80a0cb8:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0cbc:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
 80a0cbe:	2201      	movs	r2, #1
 80a0cc0:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
 80a0cc4:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
 80a0cc6:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
 80a0cc8:	d109      	bne.n	80a0cde <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
 80a0cca:	1e5a      	subs	r2, r3, #1
 80a0ccc:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
 80a0cce:	1c5c      	adds	r4, r3, #1
 80a0cd0:	d011      	beq.n	80a0cf6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a0cd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a0cd6:	430a      	orrs	r2, r1
 80a0cd8:	f800 2c01 	strb.w	r2, [r0, #-1]
 80a0cdc:	e7f5      	b.n	80a0cca <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
 80a0cde:	43c9      	mvns	r1, r1
 80a0ce0:	b2c9      	uxtb	r1, r1
 80a0ce2:	1e5a      	subs	r2, r3, #1
 80a0ce4:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
 80a0ce6:	1c5a      	adds	r2, r3, #1
 80a0ce8:	d005      	beq.n	80a0cf6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a0cea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a0cee:	400a      	ands	r2, r1
 80a0cf0:	f800 2c01 	strb.w	r2, [r0, #-1]
 80a0cf4:	e7f5      	b.n	80a0ce2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
 80a0cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0cf8:	20000015 	.word	0x20000015
 80a0cfc:	2000000d 	.word	0x2000000d
 80a0d00:	20000005 	.word	0x20000005

080a0d04 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>:
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
 80a0d04:	b410      	push	{r4}
  
  if(hwSPI) {
 80a0d06:	b122      	cbz	r2, 80a0d12 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1+0xe>
    (void)SPI.transfer(d);
 80a0d08:	4619      	mov	r1, r3
 80a0d0a:	4805      	ldr	r0, [pc, #20]	; (80a0d20 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1+0x1c>)
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}
 80a0d0c:	bc10      	pop	{r4}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
    (void)SPI.transfer(d);
 80a0d0e:	f000 be7f 	b.w	80a1a10 <_ZN8SPIClass8transferEh>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
 80a0d12:	2201      	movs	r2, #1
 80a0d14:	b2c9      	uxtb	r1, r1
 80a0d16:	b2c0      	uxtb	r0, r0
  }
}
 80a0d18:	bc10      	pop	{r4}
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
 80a0d1a:	f001 b935 	b.w	80a1f88 <shiftOut>
 80a0d1e:	bf00      	nop
 80a0d20:	20000584 	.word	0x20000584

080a0d24 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a0d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 80a0d26:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a0d28:	4606      	mov	r6, r0
 80a0d2a:	4614      	mov	r4, r2
 80a0d2c:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 80a0d2e:	db3f      	blt.n	80a0db0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a0d30:	f7ff fe6a 	bl	80a0a08 <_ZN12Adafruit_GFX5widthEv>
 80a0d34:	4285      	cmp	r5, r0
 80a0d36:	da3b      	bge.n	80a0db0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a0d38:	2c00      	cmp	r4, #0
 80a0d3a:	db39      	blt.n	80a0db0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a0d3c:	4630      	mov	r0, r6
 80a0d3e:	f7ff fe66 	bl	80a0a0e <_ZN12Adafruit_GFX6heightEv>
 80a0d42:	4284      	cmp	r4, r0
 80a0d44:	da34      	bge.n	80a0db0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a0d46:	4630      	mov	r0, r6
 80a0d48:	f7ff fe5c 	bl	80a0a04 <_ZN12Adafruit_GFX11getRotationEv>
 80a0d4c:	2802      	cmp	r0, #2
 80a0d4e:	d127      	bne.n	80a0da0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0d50:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
 80a0d52:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0d54:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
 80a0d56:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0d58:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
 80a0d5a:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0d5c:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
 80a0d5e:	b204      	sxth	r4, r0
 80a0d60:	e006      	b.n	80a0d70 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a0d62:	2801      	cmp	r0, #1
 80a0d64:	d104      	bne.n	80a0d70 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
 80a0d66:	8933      	ldrh	r3, [r6, #8]
 80a0d68:	3b01      	subs	r3, #1
 80a0d6a:	1b1b      	subs	r3, r3, r4
 80a0d6c:	462c      	mov	r4, r5
 80a0d6e:	b21d      	sxth	r5, r3
 80a0d70:	2008      	movs	r0, #8
    break;
  }  

  // x is which column
  if (color == WHITE) 
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a0d72:	fb94 f0f0 	sdiv	r0, r4, r0
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
 80a0d76:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a0d78:	b200      	sxth	r0, r0
 80a0d7a:	4b0e      	ldr	r3, [pc, #56]	; (80a0db4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
 80a0d7c:	f004 0207 	and.w	r2, r4, #7
 80a0d80:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
 80a0d84:	d104      	bne.n	80a0d90 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a0d86:	4097      	lsls	r7, r2
 80a0d88:	5c5a      	ldrb	r2, [r3, r1]
 80a0d8a:	4317      	orrs	r7, r2
 80a0d8c:	545f      	strb	r7, [r3, r1]
 80a0d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
 80a0d90:	5c58      	ldrb	r0, [r3, r1]
 80a0d92:	2701      	movs	r7, #1
 80a0d94:	fa07 f202 	lsl.w	r2, r7, r2
 80a0d98:	ea20 0202 	bic.w	r2, r0, r2
 80a0d9c:	545a      	strb	r2, [r3, r1]
 80a0d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a0da0:	2803      	cmp	r0, #3
 80a0da2:	d1de      	bne.n	80a0d62 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
 80a0da4:	8973      	ldrh	r3, [r6, #10]
 80a0da6:	3b01      	subs	r3, #1
 80a0da8:	1b5b      	subs	r3, r3, r5
 80a0daa:	4625      	mov	r5, r4
 80a0dac:	b21c      	sxth	r4, r3
 80a0dae:	e7df      	b.n	80a0d70 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
 80a0db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0db2:	bf00      	nop
 80a0db4:	20000015 	.word	0x20000015

080a0db8 <_ZN16Adafruit_SSD1306C1Eaaaaa>:
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 80a0db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0dba:	4604      	mov	r4, r0
 80a0dbc:	461f      	mov	r7, r3
 80a0dbe:	460d      	mov	r5, r1
 80a0dc0:	4616      	mov	r6, r2
 80a0dc2:	2180      	movs	r1, #128	; 0x80
 80a0dc4:	2240      	movs	r2, #64	; 0x40
 80a0dc6:	f7ff fd31 	bl	80a082c <_ZN12Adafruit_GFXC1Ess>
 80a0dca:	4b09      	ldr	r3, [pc, #36]	; (80a0df0 <_ZN16Adafruit_SSD1306C1Eaaaaa+0x38>)
  cs = CS;
  rst = RST;
  dc = DC;
 80a0dcc:	77e7      	strb	r7, [r4, #31]
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 80a0dce:	6023      	str	r3, [r4, #0]
  cs = CS;
 80a0dd0:	f99d 301c 	ldrsb.w	r3, [sp, #28]
  rst = RST;
  dc = DC;
  sclk = SCLK;
 80a0dd4:	77a6      	strb	r6, [r4, #30]
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
  cs = CS;
 80a0dd6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  rst = RST;
 80a0dda:	f99d 3018 	ldrsb.w	r3, [sp, #24]
  dc = DC;
  sclk = SCLK;
  sid = SID;
 80a0dde:	7765      	strb	r5, [r4, #29]
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
  cs = CS;
  rst = RST;
 80a0de0:	f884 3020 	strb.w	r3, [r4, #32]
  dc = DC;
  sclk = SCLK;
  sid = SID;
  hwSPI = false;
 80a0de4:	2300      	movs	r3, #0
 80a0de6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 80a0dea:	4620      	mov	r0, r4
 80a0dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0dee:	bf00      	nop
 80a0df0:	080a2978 	.word	0x080a2978

080a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 80a0df4:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
 80a0df6:	f990 301d 	ldrsb.w	r3, [r0, #29]
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 80a0dfa:	4604      	mov	r4, r0
  if (sid != -1)
 80a0dfc:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 80a0dfe:	460d      	mov	r5, r1
  if (sid != -1)
 80a0e00:	d022      	beq.n	80a0e48 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x54>
  {
    // SPI
    digitalWrite(cs, HIGH);
 80a0e02:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
 80a0e06:	2101      	movs	r1, #1
 80a0e08:	b280      	uxth	r0, r0
 80a0e0a:	f001 f8a4 	bl	80a1f56 <digitalWrite>
    digitalWrite(dc, LOW);
 80a0e0e:	f994 001f 	ldrsb.w	r0, [r4, #31]
 80a0e12:	2100      	movs	r1, #0
 80a0e14:	b280      	uxth	r0, r0
 80a0e16:	f001 f89e 	bl	80a1f56 <digitalWrite>
    digitalWrite(cs, LOW);
 80a0e1a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0e1e:	2100      	movs	r1, #0
 80a0e20:	b280      	uxth	r0, r0
 80a0e22:	f001 f898 	bl	80a1f56 <digitalWrite>
    fastSPIwrite(c);
 80a0e26:	f994 101e 	ldrsb.w	r1, [r4, #30]
 80a0e2a:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a0e2e:	462b      	mov	r3, r5
 80a0e30:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 80a0e34:	f7ff ff66 	bl	80a0d04 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>
    digitalWrite(cs, HIGH);
 80a0e38:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0e3c:	2101      	movs	r1, #1
 80a0e3e:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
 80a0e40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
 80a0e44:	f001 b887 	b.w	80a1f56 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
 80a0e48:	f001 f8c2 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a0e4c:	f994 101b 	ldrsb.w	r1, [r4, #27]
 80a0e50:	f000 fbd4 	bl	80a15fc <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
 80a0e54:	f001 f8bc 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a0e58:	6803      	ldr	r3, [r0, #0]
 80a0e5a:	2100      	movs	r1, #0
 80a0e5c:	689b      	ldr	r3, [r3, #8]
 80a0e5e:	4798      	blx	r3
    Wire.write(c);
 80a0e60:	f001 f8b6 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a0e64:	6803      	ldr	r3, [r0, #0]
 80a0e66:	4629      	mov	r1, r5
 80a0e68:	689b      	ldr	r3, [r3, #8]
 80a0e6a:	4798      	blx	r3
    Wire.endTransmission();
 80a0e6c:	f001 f8b0 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
  }
}
 80a0e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
 80a0e74:	f000 bbc9 	b.w	80a160a <_ZN7TwoWire15endTransmissionEv>

080a0e78 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
 80a0e78:	b538      	push	{r3, r4, r5, lr}
 80a0e7a:	4604      	mov	r4, r0
  _vccstate = vccstate;
 80a0e7c:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
 80a0e7e:	f990 301d 	ldrsb.w	r3, [r0, #29]
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
 80a0e82:	460d      	mov	r5, r1
  _vccstate = vccstate;
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
 80a0e84:	3301      	adds	r3, #1
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
 80a0e86:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
 80a0e88:	d033      	beq.n	80a0ef2 <_ZN16Adafruit_SSD13065beginEhh+0x7a>
    pinMode(dc, OUTPUT);
 80a0e8a:	f990 001f 	ldrsb.w	r0, [r0, #31]
 80a0e8e:	2101      	movs	r1, #1
 80a0e90:	b280      	uxth	r0, r0
 80a0e92:	f001 f84f 	bl	80a1f34 <pinMode>
    pinMode(cs, OUTPUT);
 80a0e96:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0e9a:	2101      	movs	r1, #1
 80a0e9c:	b280      	uxth	r0, r0
 80a0e9e:	f001 f849 	bl	80a1f34 <pinMode>
    if (!hwSPI){
 80a0ea2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80a0ea6:	b95b      	cbnz	r3, 80a0ec0 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
 80a0ea8:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a0eac:	2101      	movs	r1, #1
 80a0eae:	b280      	uxth	r0, r0
 80a0eb0:	f001 f840 	bl	80a1f34 <pinMode>
    	pinMode(sclk, OUTPUT);
 80a0eb4:	f994 001e 	ldrsb.w	r0, [r4, #30]
 80a0eb8:	2101      	movs	r1, #1
 80a0eba:	b280      	uxth	r0, r0
 80a0ebc:	f001 f83a 	bl	80a1f34 <pinMode>
    	}
    if (hwSPI){
 80a0ec0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80a0ec4:	b1cb      	cbz	r3, 80a0efa <_ZN16Adafruit_SSD13065beginEhh+0x82>
        digitalWrite(cs, HIGH);
 80a0ec6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0eca:	2101      	movs	r1, #1
 80a0ecc:	b280      	uxth	r0, r0
 80a0ece:	f001 f842 	bl	80a1f56 <digitalWrite>
        SPI.setBitOrder(MSBFIRST);
 80a0ed2:	2101      	movs	r1, #1
 80a0ed4:	484f      	ldr	r0, [pc, #316]	; (80a1014 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
 80a0ed6:	f000 fd3a 	bl	80a194e <_ZN8SPIClass11setBitOrderEh>
        SPI.setClockDivider(SPI_CLOCK_DIV8);	// 72MHz / 8 = 9Mhz
 80a0eda:	2110      	movs	r1, #16
 80a0edc:	484d      	ldr	r0, [pc, #308]	; (80a1014 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
 80a0ede:	f000 fd83 	bl	80a19e8 <_ZN8SPIClass15setClockDividerEh>
        SPI.setDataMode(0);
 80a0ee2:	2100      	movs	r1, #0
 80a0ee4:	484b      	ldr	r0, [pc, #300]	; (80a1014 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
 80a0ee6:	f000 fd35 	bl	80a1954 <_ZN8SPIClass11setDataModeEh>
        SPI.begin();	
 80a0eea:	484a      	ldr	r0, [pc, #296]	; (80a1014 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
 80a0eec:	f000 fd2a 	bl	80a1944 <_ZN8SPIClass5beginEv>
 80a0ef0:	e003      	b.n	80a0efa <_ZN16Adafruit_SSD13065beginEhh+0x82>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
 80a0ef2:	f001 f86d 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a0ef6:	f000 fb69 	bl	80a15cc <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
 80a0efa:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a0efe:	2101      	movs	r1, #1
 80a0f00:	b280      	uxth	r0, r0
 80a0f02:	f001 f817 	bl	80a1f34 <pinMode>
  digitalWrite(rst, HIGH);
 80a0f06:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a0f0a:	2101      	movs	r1, #1
 80a0f0c:	b280      	uxth	r0, r0
 80a0f0e:	f001 f822 	bl	80a1f56 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
 80a0f12:	2001      	movs	r0, #1
 80a0f14:	f000 fb10 	bl	80a1538 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
 80a0f18:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a0f1c:	2100      	movs	r1, #0
 80a0f1e:	b280      	uxth	r0, r0
 80a0f20:	f001 f819 	bl	80a1f56 <digitalWrite>
  // wait 10ms
  delay(10);
 80a0f24:	200a      	movs	r0, #10
 80a0f26:	f000 fb07 	bl	80a1538 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
 80a0f2a:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a0f2e:	2101      	movs	r1, #1
 80a0f30:	b280      	uxth	r0, r0
 80a0f32:	f001 f810 	bl	80a1f56 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 80a0f36:	4620      	mov	r0, r4
 80a0f38:	21ae      	movs	r1, #174	; 0xae
 80a0f3a:	f7ff ff5b 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 80a0f3e:	4620      	mov	r0, r4
 80a0f40:	21d5      	movs	r1, #213	; 0xd5
 80a0f42:	f7ff ff57 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
 80a0f46:	4620      	mov	r0, r4
 80a0f48:	2180      	movs	r1, #128	; 0x80
 80a0f4a:	f7ff ff53 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 80a0f4e:	4620      	mov	r0, r4
 80a0f50:	21a8      	movs	r1, #168	; 0xa8
 80a0f52:	f7ff ff4f 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
 80a0f56:	4620      	mov	r0, r4
 80a0f58:	213f      	movs	r1, #63	; 0x3f
 80a0f5a:	f7ff ff4b 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 80a0f5e:	4620      	mov	r0, r4
 80a0f60:	21d3      	movs	r1, #211	; 0xd3
 80a0f62:	f7ff ff47 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
 80a0f66:	4620      	mov	r0, r4
 80a0f68:	2100      	movs	r1, #0
 80a0f6a:	f7ff ff43 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 80a0f6e:	4620      	mov	r0, r4
 80a0f70:	2140      	movs	r1, #64	; 0x40
 80a0f72:	f7ff ff3f 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 80a0f76:	218d      	movs	r1, #141	; 0x8d
 80a0f78:	4620      	mov	r0, r4
 80a0f7a:	f7ff ff3b 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 80a0f7e:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
 80a0f80:	bf0c      	ite	eq
 80a0f82:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
 80a0f84:	2114      	movne	r1, #20
 80a0f86:	4620      	mov	r0, r4
 80a0f88:	f7ff ff34 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 80a0f8c:	4620      	mov	r0, r4
 80a0f8e:	2120      	movs	r1, #32
 80a0f90:	f7ff ff30 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
 80a0f94:	4620      	mov	r0, r4
 80a0f96:	2100      	movs	r1, #0
 80a0f98:	f7ff ff2c 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
 80a0f9c:	4620      	mov	r0, r4
 80a0f9e:	21a1      	movs	r1, #161	; 0xa1
 80a0fa0:	f7ff ff28 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
 80a0fa4:	4620      	mov	r0, r4
 80a0fa6:	21c8      	movs	r1, #200	; 0xc8
 80a0fa8:	f7ff ff24 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 80a0fac:	4620      	mov	r0, r4
 80a0fae:	21da      	movs	r1, #218	; 0xda
 80a0fb0:	f7ff ff20 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
 80a0fb4:	4620      	mov	r0, r4
 80a0fb6:	2112      	movs	r1, #18
 80a0fb8:	f7ff ff1c 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 80a0fbc:	2181      	movs	r1, #129	; 0x81
 80a0fbe:	4620      	mov	r0, r4
 80a0fc0:	f7ff ff18 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 80a0fc4:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
 80a0fc6:	bf0c      	ite	eq
 80a0fc8:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
 80a0fca:	21cf      	movne	r1, #207	; 0xcf
 80a0fcc:	4620      	mov	r0, r4
 80a0fce:	f7ff ff11 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 80a0fd2:	21d9      	movs	r1, #217	; 0xd9
 80a0fd4:	4620      	mov	r0, r4
 80a0fd6:	f7ff ff0d 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 80a0fda:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
 80a0fdc:	bf0c      	ite	eq
 80a0fde:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
 80a0fe0:	21f1      	movne	r1, #241	; 0xf1
 80a0fe2:	4620      	mov	r0, r4
 80a0fe4:	f7ff ff06 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 80a0fe8:	4620      	mov	r0, r4
 80a0fea:	21db      	movs	r1, #219	; 0xdb
 80a0fec:	f7ff ff02 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
 80a0ff0:	4620      	mov	r0, r4
 80a0ff2:	2140      	movs	r1, #64	; 0x40
 80a0ff4:	f7ff fefe 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 80a0ff8:	4620      	mov	r0, r4
 80a0ffa:	21a4      	movs	r1, #164	; 0xa4
 80a0ffc:	f7ff fefa 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 80a1000:	4620      	mov	r0, r4
 80a1002:	21a6      	movs	r1, #166	; 0xa6
 80a1004:	f7ff fef6 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 80a1008:	4620      	mov	r0, r4
}
 80a100a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 80a100e:	21af      	movs	r1, #175	; 0xaf
 80a1010:	f7ff bef0 	b.w	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
 80a1014:	20000584 	.word	0x20000584

080a1018 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
 80a1018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a101c:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
 80a101e:	2121      	movs	r1, #33	; 0x21
 80a1020:	f7ff fee8 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
 80a1024:	2100      	movs	r1, #0
 80a1026:	4620      	mov	r0, r4
 80a1028:	f7ff fee4 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
 80a102c:	217f      	movs	r1, #127	; 0x7f
 80a102e:	4620      	mov	r0, r4
 80a1030:	f7ff fee0 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
 80a1034:	2122      	movs	r1, #34	; 0x22
 80a1036:	4620      	mov	r0, r4
 80a1038:	f7ff fedc 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
 80a103c:	2100      	movs	r1, #0
 80a103e:	4620      	mov	r0, r4
 80a1040:	f7ff fed8 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
 80a1044:	2107      	movs	r1, #7
 80a1046:	4620      	mov	r0, r4
 80a1048:	f7ff fed4 	bl	80a0df4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
 80a104c:	f994 301d 	ldrsb.w	r3, [r4, #29]
 80a1050:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a1100 <_ZN16Adafruit_SSD13067displayEv+0xe8>
 80a1054:	3301      	adds	r3, #1
 80a1056:	d02e      	beq.n	80a10b6 <_ZN16Adafruit_SSD13067displayEv+0x9e>
  {
    // SPI
    digitalWrite(cs, HIGH);
 80a1058:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a105c:	2101      	movs	r1, #1
 80a105e:	b280      	uxth	r0, r0
 80a1060:	f000 ff79 	bl	80a1f56 <digitalWrite>
    digitalWrite(dc, HIGH);
 80a1064:	f994 001f 	ldrsb.w	r0, [r4, #31]
 80a1068:	2101      	movs	r1, #1
 80a106a:	b280      	uxth	r0, r0
 80a106c:	f000 ff73 	bl	80a1f56 <digitalWrite>
    digitalWrite(cs, LOW);
 80a1070:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a1074:	2100      	movs	r1, #0
 80a1076:	b280      	uxth	r0, r0
 80a1078:	f000 ff6d 	bl	80a1f56 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a107c:	2001      	movs	r0, #1
 80a107e:	f000 f875 	bl	80a116c <HAL_Delay_Microseconds>
 80a1082:	2500      	movs	r5, #0
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
 80a1084:	f818 3005 	ldrb.w	r3, [r8, r5]
 80a1088:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 80a108c:	f994 101e 	ldrsb.w	r1, [r4, #30]
 80a1090:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a1094:	3501      	adds	r5, #1
 80a1096:	f7ff fe35 	bl	80a0d04 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
 80a109a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80a109e:	d1f1      	bne.n	80a1084 <_ZN16Adafruit_SSD13067displayEv+0x6c>
 80a10a0:	2001      	movs	r0, #1
 80a10a2:	f000 f863 	bl	80a116c <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
 80a10a6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a10aa:	2101      	movs	r1, #1
 80a10ac:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
 80a10ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
 80a10b2:	f000 bf50 	b.w	80a1f56 <digitalWrite>
 80a10b6:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
 80a10b8:	f000 ff8a 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a10bc:	f994 101b 	ldrsb.w	r1, [r4, #27]
 80a10c0:	f000 fa9c 	bl	80a15fc <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
 80a10c4:	f000 ff84 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a10c8:	6803      	ldr	r3, [r0, #0]
 80a10ca:	2140      	movs	r1, #64	; 0x40
 80a10cc:	689b      	ldr	r3, [r3, #8]
 80a10ce:	4798      	blx	r3
 80a10d0:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
 80a10d2:	f000 ff7d 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a10d6:	19af      	adds	r7, r5, r6
 80a10d8:	6803      	ldr	r3, [r0, #0]
 80a10da:	b2bf      	uxth	r7, r7
 80a10dc:	689b      	ldr	r3, [r3, #8]
 80a10de:	f818 1007 	ldrb.w	r1, [r8, r7]
 80a10e2:	3601      	adds	r6, #1
 80a10e4:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
 80a10e6:	2e10      	cmp	r6, #16
 80a10e8:	d1f3      	bne.n	80a10d2 <_ZN16Adafruit_SSD13067displayEv+0xba>
 80a10ea:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
 80a10ec:	f000 ff70 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a10f0:	b2ad      	uxth	r5, r5
 80a10f2:	f000 fa8a 	bl	80a160a <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
 80a10f6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80a10fa:	d1dd      	bne.n	80a10b8 <_ZN16Adafruit_SSD13067displayEv+0xa0>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
 80a10fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1100:	20000015 	.word	0x20000015

080a1104 <_ZN16Adafruit_SSD130612clearDisplayEv>:

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
 80a1104:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a1108:	2100      	movs	r1, #0
 80a110a:	4801      	ldr	r0, [pc, #4]	; (80a1110 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
 80a110c:	f001 b923 	b.w	80a2356 <memset>
 80a1110:	20000015 	.word	0x20000015

080a1114 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
 80a1114:	f000 b83a 	b.w	80a118c <HAL_Pin_Map>

080a1118 <_GLOBAL__sub_I__ZN7MPU9250C2Ev>:
 80a1118:	f000 b838 	b.w	80a118c <HAL_Pin_Map>

080a111c <_GLOBAL__sub_I__ZN7MPU92507getMresEv>:
 80a111c:	f000 b836 	b.w	80a118c <HAL_Pin_Map>

080a1120 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff>:
  q[1] = q2 * norm;
  q[2] = q3 * norm;
  q[3] = q4 * norm;
}

const float * getQ () { return q; }
 80a1120:	b508      	push	{r3, lr}
 80a1122:	f000 f833 	bl	80a118c <HAL_Pin_Map>
// noticed any reduction in solution accuracy. This is essentially the I
// coefficient in a PID control sense; the bigger the feedback coefficient,
// the faster the solution converges, usually at the expense of accuracy.
// In any case, this is the free parameter in the Madgwick filtering and
// fusion scheme.
static float beta = sqrt(3.0f / 4.0f) * GyroMeasError;   // Compute beta
 80a1126:	4a02      	ldr	r2, [pc, #8]	; (80a1130 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x10>)
 80a1128:	4b02      	ldr	r3, [pc, #8]	; (80a1134 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x14>)
 80a112a:	601a      	str	r2, [r3, #0]
 80a112c:	bd08      	pop	{r3, pc}
 80a112e:	bf00      	nop
 80a1130:	3f1ac70d 	.word	0x3f1ac70d
 80a1134:	200004c0 	.word	0x200004c0

080a1138 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a1138:	b508      	push	{r3, lr}
 80a113a:	f000 f827 	bl	80a118c <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a113e:	f000 f825 	bl	80a118c <HAL_Pin_Map>
 80a1142:	4b01      	ldr	r3, [pc, #4]	; (80a1148 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a1144:	6018      	str	r0, [r3, #0]
 80a1146:	bd08      	pop	{r3, pc}
 80a1148:	200004c4 	.word	0x200004c4

080a114c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a114c:	b508      	push	{r3, lr}
 80a114e:	4b02      	ldr	r3, [pc, #8]	; (80a1158 <os_mutex_create+0xc>)
 80a1150:	681b      	ldr	r3, [r3, #0]
 80a1152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1154:	9301      	str	r3, [sp, #4]
 80a1156:	bd08      	pop	{r3, pc}
 80a1158:	080601d0 	.word	0x080601d0

080a115c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a115c:	b508      	push	{r3, lr}
 80a115e:	4b02      	ldr	r3, [pc, #8]	; (80a1168 <HAL_RNG_GetRandomNumber+0xc>)
 80a1160:	681b      	ldr	r3, [r3, #0]
 80a1162:	685b      	ldr	r3, [r3, #4]
 80a1164:	9301      	str	r3, [sp, #4]
 80a1166:	bd08      	pop	{r3, pc}
 80a1168:	0806019c 	.word	0x0806019c

080a116c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a116c:	b508      	push	{r3, lr}
 80a116e:	4b02      	ldr	r3, [pc, #8]	; (80a1178 <HAL_Delay_Microseconds+0xc>)
 80a1170:	681b      	ldr	r3, [r3, #0]
 80a1172:	68db      	ldr	r3, [r3, #12]
 80a1174:	9301      	str	r3, [sp, #4]
 80a1176:	bd08      	pop	{r3, pc}
 80a1178:	0806019c 	.word	0x0806019c

080a117c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a117c:	b508      	push	{r3, lr}
 80a117e:	4b02      	ldr	r3, [pc, #8]	; (80a1188 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1180:	681b      	ldr	r3, [r3, #0]
 80a1182:	695b      	ldr	r3, [r3, #20]
 80a1184:	9301      	str	r3, [sp, #4]
 80a1186:	bd08      	pop	{r3, pc}
 80a1188:	0806019c 	.word	0x0806019c

080a118c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a118c:	b508      	push	{r3, lr}
 80a118e:	4b02      	ldr	r3, [pc, #8]	; (80a1198 <HAL_Pin_Map+0xc>)
 80a1190:	681b      	ldr	r3, [r3, #0]
 80a1192:	681b      	ldr	r3, [r3, #0]
 80a1194:	9301      	str	r3, [sp, #4]
 80a1196:	bd08      	pop	{r3, pc}
 80a1198:	080601b0 	.word	0x080601b0

080a119c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a119c:	b508      	push	{r3, lr}
 80a119e:	4b02      	ldr	r3, [pc, #8]	; (80a11a8 <HAL_Pin_Mode+0xc>)
 80a11a0:	681b      	ldr	r3, [r3, #0]
 80a11a2:	689b      	ldr	r3, [r3, #8]
 80a11a4:	9301      	str	r3, [sp, #4]
 80a11a6:	bd08      	pop	{r3, pc}
 80a11a8:	080601b0 	.word	0x080601b0

080a11ac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a11ac:	b508      	push	{r3, lr}
 80a11ae:	4b02      	ldr	r3, [pc, #8]	; (80a11b8 <HAL_Get_Pin_Mode+0xc>)
 80a11b0:	681b      	ldr	r3, [r3, #0]
 80a11b2:	68db      	ldr	r3, [r3, #12]
 80a11b4:	9301      	str	r3, [sp, #4]
 80a11b6:	bd08      	pop	{r3, pc}
 80a11b8:	080601b0 	.word	0x080601b0

080a11bc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a11bc:	b508      	push	{r3, lr}
 80a11be:	4b02      	ldr	r3, [pc, #8]	; (80a11c8 <HAL_GPIO_Write+0xc>)
 80a11c0:	681b      	ldr	r3, [r3, #0]
 80a11c2:	691b      	ldr	r3, [r3, #16]
 80a11c4:	9301      	str	r3, [sp, #4]
 80a11c6:	bd08      	pop	{r3, pc}
 80a11c8:	080601b0 	.word	0x080601b0

080a11cc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a11cc:	b508      	push	{r3, lr}
 80a11ce:	4b02      	ldr	r3, [pc, #8]	; (80a11d8 <HAL_I2C_Begin+0xc>)
 80a11d0:	681b      	ldr	r3, [r3, #0]
 80a11d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a11d4:	9301      	str	r3, [sp, #4]
 80a11d6:	bd08      	pop	{r3, pc}
 80a11d8:	080601ac 	.word	0x080601ac

080a11dc <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a11dc:	b508      	push	{r3, lr}
 80a11de:	4b02      	ldr	r3, [pc, #8]	; (80a11e8 <HAL_I2C_Request_Data+0xc>)
 80a11e0:	681b      	ldr	r3, [r3, #0]
 80a11e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a11e4:	9301      	str	r3, [sp, #4]
 80a11e6:	bd08      	pop	{r3, pc}
 80a11e8:	080601ac 	.word	0x080601ac

080a11ec <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a11ec:	b508      	push	{r3, lr}
 80a11ee:	4b02      	ldr	r3, [pc, #8]	; (80a11f8 <HAL_I2C_Begin_Transmission+0xc>)
 80a11f0:	681b      	ldr	r3, [r3, #0]
 80a11f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a11f4:	9301      	str	r3, [sp, #4]
 80a11f6:	bd08      	pop	{r3, pc}
 80a11f8:	080601ac 	.word	0x080601ac

080a11fc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a11fc:	b508      	push	{r3, lr}
 80a11fe:	4b02      	ldr	r3, [pc, #8]	; (80a1208 <HAL_I2C_End_Transmission+0xc>)
 80a1200:	681b      	ldr	r3, [r3, #0]
 80a1202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1204:	9301      	str	r3, [sp, #4]
 80a1206:	bd08      	pop	{r3, pc}
 80a1208:	080601ac 	.word	0x080601ac

080a120c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a120c:	b508      	push	{r3, lr}
 80a120e:	4b02      	ldr	r3, [pc, #8]	; (80a1218 <HAL_I2C_Write_Data+0xc>)
 80a1210:	681b      	ldr	r3, [r3, #0]
 80a1212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1214:	9301      	str	r3, [sp, #4]
 80a1216:	bd08      	pop	{r3, pc}
 80a1218:	080601ac 	.word	0x080601ac

080a121c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a121c:	b508      	push	{r3, lr}
 80a121e:	4b02      	ldr	r3, [pc, #8]	; (80a1228 <HAL_I2C_Available_Data+0xc>)
 80a1220:	681b      	ldr	r3, [r3, #0]
 80a1222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1224:	9301      	str	r3, [sp, #4]
 80a1226:	bd08      	pop	{r3, pc}
 80a1228:	080601ac 	.word	0x080601ac

080a122c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a122c:	b508      	push	{r3, lr}
 80a122e:	4b02      	ldr	r3, [pc, #8]	; (80a1238 <HAL_I2C_Read_Data+0xc>)
 80a1230:	681b      	ldr	r3, [r3, #0]
 80a1232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1234:	9301      	str	r3, [sp, #4]
 80a1236:	bd08      	pop	{r3, pc}
 80a1238:	080601ac 	.word	0x080601ac

080a123c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a123c:	b508      	push	{r3, lr}
 80a123e:	4b02      	ldr	r3, [pc, #8]	; (80a1248 <HAL_I2C_Peek_Data+0xc>)
 80a1240:	681b      	ldr	r3, [r3, #0]
 80a1242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1244:	9301      	str	r3, [sp, #4]
 80a1246:	bd08      	pop	{r3, pc}
 80a1248:	080601ac 	.word	0x080601ac

080a124c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a124c:	b508      	push	{r3, lr}
 80a124e:	4b02      	ldr	r3, [pc, #8]	; (80a1258 <HAL_I2C_Flush_Data+0xc>)
 80a1250:	681b      	ldr	r3, [r3, #0]
 80a1252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1254:	9301      	str	r3, [sp, #4]
 80a1256:	bd08      	pop	{r3, pc}
 80a1258:	080601ac 	.word	0x080601ac

080a125c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a125c:	b508      	push	{r3, lr}
 80a125e:	4b02      	ldr	r3, [pc, #8]	; (80a1268 <HAL_I2C_Is_Enabled+0xc>)
 80a1260:	681b      	ldr	r3, [r3, #0]
 80a1262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1264:	9301      	str	r3, [sp, #4]
 80a1266:	bd08      	pop	{r3, pc}
 80a1268:	080601ac 	.word	0x080601ac

080a126c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a126c:	b508      	push	{r3, lr}
 80a126e:	4b03      	ldr	r3, [pc, #12]	; (80a127c <HAL_I2C_Init+0x10>)
 80a1270:	681b      	ldr	r3, [r3, #0]
 80a1272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1276:	9301      	str	r3, [sp, #4]
 80a1278:	bd08      	pop	{r3, pc}
 80a127a:	0000      	.short	0x0000
 80a127c:	080601ac 	.word	0x080601ac

080a1280 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a1280:	b508      	push	{r3, lr}
 80a1282:	4b02      	ldr	r3, [pc, #8]	; (80a128c <HAL_SPI_Begin+0xc>)
 80a1284:	681b      	ldr	r3, [r3, #0]
 80a1286:	681b      	ldr	r3, [r3, #0]
 80a1288:	9301      	str	r3, [sp, #4]
 80a128a:	bd08      	pop	{r3, pc}
 80a128c:	080601b4 	.word	0x080601b4

080a1290 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a1290:	b508      	push	{r3, lr}
 80a1292:	4b02      	ldr	r3, [pc, #8]	; (80a129c <HAL_SPI_Set_Bit_Order+0xc>)
 80a1294:	681b      	ldr	r3, [r3, #0]
 80a1296:	689b      	ldr	r3, [r3, #8]
 80a1298:	9301      	str	r3, [sp, #4]
 80a129a:	bd08      	pop	{r3, pc}
 80a129c:	080601b4 	.word	0x080601b4

080a12a0 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a12a0:	b508      	push	{r3, lr}
 80a12a2:	4b02      	ldr	r3, [pc, #8]	; (80a12ac <HAL_SPI_Set_Data_Mode+0xc>)
 80a12a4:	681b      	ldr	r3, [r3, #0]
 80a12a6:	68db      	ldr	r3, [r3, #12]
 80a12a8:	9301      	str	r3, [sp, #4]
 80a12aa:	bd08      	pop	{r3, pc}
 80a12ac:	080601b4 	.word	0x080601b4

080a12b0 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a12b0:	b508      	push	{r3, lr}
 80a12b2:	4b02      	ldr	r3, [pc, #8]	; (80a12bc <HAL_SPI_Set_Clock_Divider+0xc>)
 80a12b4:	681b      	ldr	r3, [r3, #0]
 80a12b6:	691b      	ldr	r3, [r3, #16]
 80a12b8:	9301      	str	r3, [sp, #4]
 80a12ba:	bd08      	pop	{r3, pc}
 80a12bc:	080601b4 	.word	0x080601b4

080a12c0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a12c0:	b508      	push	{r3, lr}
 80a12c2:	4b02      	ldr	r3, [pc, #8]	; (80a12cc <HAL_SPI_Send_Receive_Data+0xc>)
 80a12c4:	681b      	ldr	r3, [r3, #0]
 80a12c6:	695b      	ldr	r3, [r3, #20]
 80a12c8:	9301      	str	r3, [sp, #4]
 80a12ca:	bd08      	pop	{r3, pc}
 80a12cc:	080601b4 	.word	0x080601b4

080a12d0 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a12d0:	b508      	push	{r3, lr}
 80a12d2:	4b02      	ldr	r3, [pc, #8]	; (80a12dc <HAL_SPI_Init+0xc>)
 80a12d4:	681b      	ldr	r3, [r3, #0]
 80a12d6:	69db      	ldr	r3, [r3, #28]
 80a12d8:	9301      	str	r3, [sp, #4]
 80a12da:	bd08      	pop	{r3, pc}
 80a12dc:	080601b4 	.word	0x080601b4

080a12e0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a12e0:	b508      	push	{r3, lr}
 80a12e2:	4b02      	ldr	r3, [pc, #8]	; (80a12ec <HAL_SPI_Is_Enabled+0xc>)
 80a12e4:	681b      	ldr	r3, [r3, #0]
 80a12e6:	6a1b      	ldr	r3, [r3, #32]
 80a12e8:	9301      	str	r3, [sp, #4]
 80a12ea:	bd08      	pop	{r3, pc}
 80a12ec:	080601b4 	.word	0x080601b4

080a12f0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a12f0:	b508      	push	{r3, lr}
 80a12f2:	4b02      	ldr	r3, [pc, #8]	; (80a12fc <HAL_SPI_Info+0xc>)
 80a12f4:	681b      	ldr	r3, [r3, #0]
 80a12f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a12f8:	9301      	str	r3, [sp, #4]
 80a12fa:	bd08      	pop	{r3, pc}
 80a12fc:	080601b4 	.word	0x080601b4

080a1300 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1300:	b508      	push	{r3, lr}
 80a1302:	4b02      	ldr	r3, [pc, #8]	; (80a130c <HAL_USART_Init+0xc>)
 80a1304:	681b      	ldr	r3, [r3, #0]
 80a1306:	699b      	ldr	r3, [r3, #24]
 80a1308:	9301      	str	r3, [sp, #4]
 80a130a:	bd08      	pop	{r3, pc}
 80a130c:	080601c4 	.word	0x080601c4

080a1310 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1310:	b508      	push	{r3, lr}
 80a1312:	4b02      	ldr	r3, [pc, #8]	; (80a131c <HAL_USART_Write_Data+0xc>)
 80a1314:	681b      	ldr	r3, [r3, #0]
 80a1316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1318:	9301      	str	r3, [sp, #4]
 80a131a:	bd08      	pop	{r3, pc}
 80a131c:	080601c4 	.word	0x080601c4

080a1320 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1320:	b508      	push	{r3, lr}
 80a1322:	4b02      	ldr	r3, [pc, #8]	; (80a132c <HAL_USART_Available_Data+0xc>)
 80a1324:	681b      	ldr	r3, [r3, #0]
 80a1326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1328:	9301      	str	r3, [sp, #4]
 80a132a:	bd08      	pop	{r3, pc}
 80a132c:	080601c4 	.word	0x080601c4

080a1330 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1330:	b508      	push	{r3, lr}
 80a1332:	4b02      	ldr	r3, [pc, #8]	; (80a133c <HAL_USART_Read_Data+0xc>)
 80a1334:	681b      	ldr	r3, [r3, #0]
 80a1336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1338:	9301      	str	r3, [sp, #4]
 80a133a:	bd08      	pop	{r3, pc}
 80a133c:	080601c4 	.word	0x080601c4

080a1340 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1340:	b508      	push	{r3, lr}
 80a1342:	4b02      	ldr	r3, [pc, #8]	; (80a134c <HAL_USART_Peek_Data+0xc>)
 80a1344:	681b      	ldr	r3, [r3, #0]
 80a1346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1348:	9301      	str	r3, [sp, #4]
 80a134a:	bd08      	pop	{r3, pc}
 80a134c:	080601c4 	.word	0x080601c4

080a1350 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1350:	b508      	push	{r3, lr}
 80a1352:	4b02      	ldr	r3, [pc, #8]	; (80a135c <HAL_USART_Flush_Data+0xc>)
 80a1354:	681b      	ldr	r3, [r3, #0]
 80a1356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1358:	9301      	str	r3, [sp, #4]
 80a135a:	bd08      	pop	{r3, pc}
 80a135c:	080601c4 	.word	0x080601c4

080a1360 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1360:	b508      	push	{r3, lr}
 80a1362:	4b02      	ldr	r3, [pc, #8]	; (80a136c <HAL_USART_Is_Enabled+0xc>)
 80a1364:	681b      	ldr	r3, [r3, #0]
 80a1366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1368:	9301      	str	r3, [sp, #4]
 80a136a:	bd08      	pop	{r3, pc}
 80a136c:	080601c4 	.word	0x080601c4

080a1370 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1370:	b508      	push	{r3, lr}
 80a1372:	4b02      	ldr	r3, [pc, #8]	; (80a137c <HAL_USART_Available_Data_For_Write+0xc>)
 80a1374:	681b      	ldr	r3, [r3, #0]
 80a1376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1378:	9301      	str	r3, [sp, #4]
 80a137a:	bd08      	pop	{r3, pc}
 80a137c:	080601c4 	.word	0x080601c4

080a1380 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1380:	b508      	push	{r3, lr}
 80a1382:	4b02      	ldr	r3, [pc, #8]	; (80a138c <HAL_USB_USART_Init+0xc>)
 80a1384:	681b      	ldr	r3, [r3, #0]
 80a1386:	681b      	ldr	r3, [r3, #0]
 80a1388:	9301      	str	r3, [sp, #4]
 80a138a:	bd08      	pop	{r3, pc}
 80a138c:	080601d8 	.word	0x080601d8

080a1390 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1390:	b508      	push	{r3, lr}
 80a1392:	4b02      	ldr	r3, [pc, #8]	; (80a139c <HAL_USB_USART_Begin+0xc>)
 80a1394:	681b      	ldr	r3, [r3, #0]
 80a1396:	685b      	ldr	r3, [r3, #4]
 80a1398:	9301      	str	r3, [sp, #4]
 80a139a:	bd08      	pop	{r3, pc}
 80a139c:	080601d8 	.word	0x080601d8

080a13a0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a13a0:	b508      	push	{r3, lr}
 80a13a2:	4b02      	ldr	r3, [pc, #8]	; (80a13ac <HAL_USB_USART_Available_Data+0xc>)
 80a13a4:	681b      	ldr	r3, [r3, #0]
 80a13a6:	691b      	ldr	r3, [r3, #16]
 80a13a8:	9301      	str	r3, [sp, #4]
 80a13aa:	bd08      	pop	{r3, pc}
 80a13ac:	080601d8 	.word	0x080601d8

080a13b0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a13b0:	b508      	push	{r3, lr}
 80a13b2:	4b02      	ldr	r3, [pc, #8]	; (80a13bc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a13b4:	681b      	ldr	r3, [r3, #0]
 80a13b6:	695b      	ldr	r3, [r3, #20]
 80a13b8:	9301      	str	r3, [sp, #4]
 80a13ba:	bd08      	pop	{r3, pc}
 80a13bc:	080601d8 	.word	0x080601d8

080a13c0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a13c0:	b508      	push	{r3, lr}
 80a13c2:	4b02      	ldr	r3, [pc, #8]	; (80a13cc <HAL_USB_USART_Receive_Data+0xc>)
 80a13c4:	681b      	ldr	r3, [r3, #0]
 80a13c6:	699b      	ldr	r3, [r3, #24]
 80a13c8:	9301      	str	r3, [sp, #4]
 80a13ca:	bd08      	pop	{r3, pc}
 80a13cc:	080601d8 	.word	0x080601d8

080a13d0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a13d0:	b508      	push	{r3, lr}
 80a13d2:	4b02      	ldr	r3, [pc, #8]	; (80a13dc <HAL_USB_USART_Send_Data+0xc>)
 80a13d4:	681b      	ldr	r3, [r3, #0]
 80a13d6:	69db      	ldr	r3, [r3, #28]
 80a13d8:	9301      	str	r3, [sp, #4]
 80a13da:	bd08      	pop	{r3, pc}
 80a13dc:	080601d8 	.word	0x080601d8

080a13e0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a13e0:	b508      	push	{r3, lr}
 80a13e2:	4b02      	ldr	r3, [pc, #8]	; (80a13ec <HAL_USB_USART_Flush_Data+0xc>)
 80a13e4:	681b      	ldr	r3, [r3, #0]
 80a13e6:	6a1b      	ldr	r3, [r3, #32]
 80a13e8:	9301      	str	r3, [sp, #4]
 80a13ea:	bd08      	pop	{r3, pc}
 80a13ec:	080601d8 	.word	0x080601d8

080a13f0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a13f0:	b508      	push	{r3, lr}
 80a13f2:	4b02      	ldr	r3, [pc, #8]	; (80a13fc <inet_gethostbyname+0xc>)
 80a13f4:	681b      	ldr	r3, [r3, #0]
 80a13f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a13f8:	9301      	str	r3, [sp, #4]
 80a13fa:	bd08      	pop	{r3, pc}
 80a13fc:	080601c0 	.word	0x080601c0

080a1400 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a1400:	b508      	push	{r3, lr}
 80a1402:	4b02      	ldr	r3, [pc, #8]	; (80a140c <panic_+0xc>)
 80a1404:	681b      	ldr	r3, [r3, #0]
 80a1406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1408:	9301      	str	r3, [sp, #4]
 80a140a:	bd08      	pop	{r3, pc}
 80a140c:	080201a8 	.word	0x080201a8

080a1410 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1410:	b508      	push	{r3, lr}
 80a1412:	4b02      	ldr	r3, [pc, #8]	; (80a141c <set_system_mode+0xc>)
 80a1414:	681b      	ldr	r3, [r3, #0]
 80a1416:	685b      	ldr	r3, [r3, #4]
 80a1418:	9301      	str	r3, [sp, #4]
 80a141a:	bd08      	pop	{r3, pc}
 80a141c:	080601a4 	.word	0x080601a4

080a1420 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1420:	b508      	push	{r3, lr}
 80a1422:	4b02      	ldr	r3, [pc, #8]	; (80a142c <system_delay_ms+0xc>)
 80a1424:	681b      	ldr	r3, [r3, #0]
 80a1426:	695b      	ldr	r3, [r3, #20]
 80a1428:	9301      	str	r3, [sp, #4]
 80a142a:	bd08      	pop	{r3, pc}
 80a142c:	080601a4 	.word	0x080601a4

080a1430 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1430:	b508      	push	{r3, lr}
 80a1432:	4b03      	ldr	r3, [pc, #12]	; (80a1440 <system_ctrl_set_app_request_handler+0x10>)
 80a1434:	681b      	ldr	r3, [r3, #0]
 80a1436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a143a:	9301      	str	r3, [sp, #4]
 80a143c:	bd08      	pop	{r3, pc}
 80a143e:	0000      	.short	0x0000
 80a1440:	080601a4 	.word	0x080601a4

080a1444 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1444:	b508      	push	{r3, lr}
 80a1446:	4b03      	ldr	r3, [pc, #12]	; (80a1454 <system_ctrl_set_result+0x10>)
 80a1448:	681b      	ldr	r3, [r3, #0]
 80a144a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a144e:	9301      	str	r3, [sp, #4]
 80a1450:	bd08      	pop	{r3, pc}
 80a1452:	0000      	.short	0x0000
 80a1454:	080601a4 	.word	0x080601a4

080a1458 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1458:	b508      	push	{r3, lr}
 80a145a:	4b02      	ldr	r3, [pc, #8]	; (80a1464 <spark_process+0xc>)
 80a145c:	681b      	ldr	r3, [r3, #0]
 80a145e:	689b      	ldr	r3, [r3, #8]
 80a1460:	9301      	str	r3, [sp, #4]
 80a1462:	bd08      	pop	{r3, pc}
 80a1464:	080601cc 	.word	0x080601cc

080a1468 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1468:	b508      	push	{r3, lr}
 80a146a:	4b02      	ldr	r3, [pc, #8]	; (80a1474 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a146c:	681b      	ldr	r3, [r3, #0]
 80a146e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1470:	9301      	str	r3, [sp, #4]
 80a1472:	bd08      	pop	{r3, pc}
 80a1474:	080601cc 	.word	0x080601cc

080a1478 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1478:	b508      	push	{r3, lr}
 80a147a:	4b02      	ldr	r3, [pc, #8]	; (80a1484 <network_connect+0xc>)
 80a147c:	681b      	ldr	r3, [r3, #0]
 80a147e:	685b      	ldr	r3, [r3, #4]
 80a1480:	9301      	str	r3, [sp, #4]
 80a1482:	bd08      	pop	{r3, pc}
 80a1484:	080601c8 	.word	0x080601c8

080a1488 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1488:	b508      	push	{r3, lr}
 80a148a:	4b02      	ldr	r3, [pc, #8]	; (80a1494 <network_connecting+0xc>)
 80a148c:	681b      	ldr	r3, [r3, #0]
 80a148e:	689b      	ldr	r3, [r3, #8]
 80a1490:	9301      	str	r3, [sp, #4]
 80a1492:	bd08      	pop	{r3, pc}
 80a1494:	080601c8 	.word	0x080601c8

080a1498 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1498:	b508      	push	{r3, lr}
 80a149a:	4b02      	ldr	r3, [pc, #8]	; (80a14a4 <network_disconnect+0xc>)
 80a149c:	681b      	ldr	r3, [r3, #0]
 80a149e:	68db      	ldr	r3, [r3, #12]
 80a14a0:	9301      	str	r3, [sp, #4]
 80a14a2:	bd08      	pop	{r3, pc}
 80a14a4:	080601c8 	.word	0x080601c8

080a14a8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a14a8:	b508      	push	{r3, lr}
 80a14aa:	4b02      	ldr	r3, [pc, #8]	; (80a14b4 <network_ready+0xc>)
 80a14ac:	681b      	ldr	r3, [r3, #0]
 80a14ae:	691b      	ldr	r3, [r3, #16]
 80a14b0:	9301      	str	r3, [sp, #4]
 80a14b2:	bd08      	pop	{r3, pc}
 80a14b4:	080601c8 	.word	0x080601c8

080a14b8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a14b8:	b508      	push	{r3, lr}
 80a14ba:	4b02      	ldr	r3, [pc, #8]	; (80a14c4 <network_on+0xc>)
 80a14bc:	681b      	ldr	r3, [r3, #0]
 80a14be:	695b      	ldr	r3, [r3, #20]
 80a14c0:	9301      	str	r3, [sp, #4]
 80a14c2:	bd08      	pop	{r3, pc}
 80a14c4:	080601c8 	.word	0x080601c8

080a14c8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a14c8:	b508      	push	{r3, lr}
 80a14ca:	4b02      	ldr	r3, [pc, #8]	; (80a14d4 <network_off+0xc>)
 80a14cc:	681b      	ldr	r3, [r3, #0]
 80a14ce:	699b      	ldr	r3, [r3, #24]
 80a14d0:	9301      	str	r3, [sp, #4]
 80a14d2:	bd08      	pop	{r3, pc}
 80a14d4:	080601c8 	.word	0x080601c8

080a14d8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a14d8:	b508      	push	{r3, lr}
 80a14da:	4b02      	ldr	r3, [pc, #8]	; (80a14e4 <network_listen+0xc>)
 80a14dc:	681b      	ldr	r3, [r3, #0]
 80a14de:	69db      	ldr	r3, [r3, #28]
 80a14e0:	9301      	str	r3, [sp, #4]
 80a14e2:	bd08      	pop	{r3, pc}
 80a14e4:	080601c8 	.word	0x080601c8

080a14e8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a14e8:	b508      	push	{r3, lr}
 80a14ea:	4b02      	ldr	r3, [pc, #8]	; (80a14f4 <network_listening+0xc>)
 80a14ec:	681b      	ldr	r3, [r3, #0]
 80a14ee:	6a1b      	ldr	r3, [r3, #32]
 80a14f0:	9301      	str	r3, [sp, #4]
 80a14f2:	bd08      	pop	{r3, pc}
 80a14f4:	080601c8 	.word	0x080601c8

080a14f8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a14f8:	b508      	push	{r3, lr}
 80a14fa:	4b02      	ldr	r3, [pc, #8]	; (80a1504 <network_set_listen_timeout+0xc>)
 80a14fc:	681b      	ldr	r3, [r3, #0]
 80a14fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1500:	9301      	str	r3, [sp, #4]
 80a1502:	bd08      	pop	{r3, pc}
 80a1504:	080601c8 	.word	0x080601c8

080a1508 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1508:	b508      	push	{r3, lr}
 80a150a:	4b02      	ldr	r3, [pc, #8]	; (80a1514 <network_get_listen_timeout+0xc>)
 80a150c:	681b      	ldr	r3, [r3, #0]
 80a150e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1510:	9301      	str	r3, [sp, #4]
 80a1512:	bd08      	pop	{r3, pc}
 80a1514:	080601c8 	.word	0x080601c8

080a1518 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1518:	b508      	push	{r3, lr}
 80a151a:	4b02      	ldr	r3, [pc, #8]	; (80a1524 <malloc+0xc>)
 80a151c:	681b      	ldr	r3, [r3, #0]
 80a151e:	681b      	ldr	r3, [r3, #0]
 80a1520:	9301      	str	r3, [sp, #4]
 80a1522:	bd08      	pop	{r3, pc}
 80a1524:	080601a0 	.word	0x080601a0

080a1528 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1528:	b508      	push	{r3, lr}
 80a152a:	4b02      	ldr	r3, [pc, #8]	; (80a1534 <free+0xc>)
 80a152c:	681b      	ldr	r3, [r3, #0]
 80a152e:	685b      	ldr	r3, [r3, #4]
 80a1530:	9301      	str	r3, [sp, #4]
 80a1532:	bd08      	pop	{r3, pc}
 80a1534:	080601a0 	.word	0x080601a0

080a1538 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1538:	2100      	movs	r1, #0
 80a153a:	f7ff bf71 	b.w	80a1420 <system_delay_ms>

080a153e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a153e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1540:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1542:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1544:	b113      	cbz	r3, 80a154c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1546:	2203      	movs	r2, #3
 80a1548:	4601      	mov	r1, r0
 80a154a:	4798      	blx	r3
    }
 80a154c:	4620      	mov	r0, r4
 80a154e:	bd10      	pop	{r4, pc}

080a1550 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1550:	4770      	bx	lr

080a1552 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1554:	4606      	mov	r6, r0
 80a1556:	4615      	mov	r5, r2
 80a1558:	460c      	mov	r4, r1
 80a155a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a155c:	42bc      	cmp	r4, r7
 80a155e:	d006      	beq.n	80a156e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1560:	6833      	ldr	r3, [r6, #0]
 80a1562:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1566:	689b      	ldr	r3, [r3, #8]
 80a1568:	4630      	mov	r0, r6
 80a156a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a156c:	e7f6      	b.n	80a155c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a156e:	4628      	mov	r0, r5
 80a1570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1572 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1572:	2200      	movs	r2, #0
 80a1574:	7c00      	ldrb	r0, [r0, #16]
 80a1576:	f7ff be49 	b.w	80a120c <HAL_I2C_Write_Data>

080a157a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a157a:	2100      	movs	r1, #0
 80a157c:	7c00      	ldrb	r0, [r0, #16]
 80a157e:	f7ff be4d 	b.w	80a121c <HAL_I2C_Available_Data>

080a1582 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1582:	2100      	movs	r1, #0
 80a1584:	7c00      	ldrb	r0, [r0, #16]
 80a1586:	f7ff be51 	b.w	80a122c <HAL_I2C_Read_Data>

080a158a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a158a:	2100      	movs	r1, #0
 80a158c:	7c00      	ldrb	r0, [r0, #16]
 80a158e:	f7ff be55 	b.w	80a123c <HAL_I2C_Peek_Data>

080a1592 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1592:	2100      	movs	r1, #0
 80a1594:	7c00      	ldrb	r0, [r0, #16]
 80a1596:	f7ff be59 	b.w	80a124c <HAL_I2C_Flush_Data>

080a159a <_ZN7TwoWireD0Ev>:
 80a159a:	b510      	push	{r4, lr}
 80a159c:	4604      	mov	r4, r0
 80a159e:	2114      	movs	r1, #20
 80a15a0:	f000 fd75 	bl	80a208e <_ZdlPvj>
 80a15a4:	4620      	mov	r0, r4
 80a15a6:	bd10      	pop	{r4, pc}

080a15a8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a15a8:	b510      	push	{r4, lr}
 80a15aa:	4604      	mov	r4, r0
 80a15ac:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a15ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a15b2:	60a3      	str	r3, [r4, #8]
 80a15b4:	4b04      	ldr	r3, [pc, #16]	; (80a15c8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a15b6:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a15b8:	7420      	strb	r0, [r4, #16]
 80a15ba:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a15bc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a15be:	f7ff fe55 	bl	80a126c <HAL_I2C_Init>

}
 80a15c2:	4620      	mov	r0, r4
 80a15c4:	bd10      	pop	{r4, pc}
 80a15c6:	bf00      	nop
 80a15c8:	080a29b0 	.word	0x080a29b0

080a15cc <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a15cc:	2300      	movs	r3, #0
 80a15ce:	461a      	mov	r2, r3
 80a15d0:	4619      	mov	r1, r3
 80a15d2:	7c00      	ldrb	r0, [r0, #16]
 80a15d4:	f7ff bdfa 	b.w	80a11cc <HAL_I2C_Begin>

080a15d8 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a15d8:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a15da:	2400      	movs	r4, #0
 80a15dc:	7c00      	ldrb	r0, [r0, #16]
 80a15de:	9400      	str	r4, [sp, #0]
 80a15e0:	f7ff fdfc 	bl	80a11dc <HAL_I2C_Request_Data>
  return result;
}
 80a15e4:	b2c0      	uxtb	r0, r0
 80a15e6:	b002      	add	sp, #8
 80a15e8:	bd10      	pop	{r4, pc}

080a15ea <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a15ea:	2301      	movs	r3, #1
 80a15ec:	b2d2      	uxtb	r2, r2
 80a15ee:	b2c9      	uxtb	r1, r1
 80a15f0:	f7ff bff2 	b.w	80a15d8 <_ZN7TwoWire11requestFromEhhh>

080a15f4 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a15f4:	2200      	movs	r2, #0
 80a15f6:	7c00      	ldrb	r0, [r0, #16]
 80a15f8:	f7ff bdf8 	b.w	80a11ec <HAL_I2C_Begin_Transmission>

080a15fc <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a15fc:	b2c9      	uxtb	r1, r1
 80a15fe:	f7ff bff9 	b.w	80a15f4 <_ZN7TwoWire17beginTransmissionEh>

080a1602 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a1602:	2200      	movs	r2, #0
 80a1604:	7c00      	ldrb	r0, [r0, #16]
 80a1606:	f7ff bdf9 	b.w	80a11fc <HAL_I2C_End_Transmission>

080a160a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a160a:	2101      	movs	r1, #1
 80a160c:	f7ff bff9 	b.w	80a1602 <_ZN7TwoWire15endTransmissionEh>

080a1610 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1610:	2100      	movs	r1, #0
 80a1612:	7c00      	ldrb	r0, [r0, #16]
 80a1614:	f7ff be22 	b.w	80a125c <HAL_I2C_Is_Enabled>

080a1618 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1618:	4770      	bx	lr

080a161a <_ZN9IPAddressD0Ev>:
 80a161a:	b510      	push	{r4, lr}
 80a161c:	4604      	mov	r4, r0
 80a161e:	2118      	movs	r1, #24
 80a1620:	f000 fd35 	bl	80a208e <_ZdlPvj>
 80a1624:	4620      	mov	r0, r4
 80a1626:	bd10      	pop	{r4, pc}

080a1628 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a162a:	460f      	mov	r7, r1
 80a162c:	f100 0608 	add.w	r6, r0, #8
 80a1630:	1d05      	adds	r5, r0, #4
 80a1632:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1634:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1638:	220a      	movs	r2, #10
 80a163a:	4638      	mov	r0, r7
 80a163c:	f000 f92b 	bl	80a1896 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1640:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1642:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1644:	d007      	beq.n	80a1656 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1646:	2c00      	cmp	r4, #0
 80a1648:	d0f4      	beq.n	80a1634 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a164a:	212e      	movs	r1, #46	; 0x2e
 80a164c:	4638      	mov	r0, r7
 80a164e:	f000 f8df 	bl	80a1810 <_ZN5Print5printEc>
 80a1652:	4404      	add	r4, r0
 80a1654:	e7ee      	b.n	80a1634 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1656:	4620      	mov	r0, r4
 80a1658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a165c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a165c:	b510      	push	{r4, lr}
 80a165e:	4604      	mov	r4, r0
 80a1660:	4b04      	ldr	r3, [pc, #16]	; (80a1674 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1662:	2211      	movs	r2, #17
 80a1664:	f840 3b04 	str.w	r3, [r0], #4
 80a1668:	2100      	movs	r1, #0
 80a166a:	f000 fe74 	bl	80a2356 <memset>
{
    clear();
}
 80a166e:	4620      	mov	r0, r4
 80a1670:	bd10      	pop	{r4, pc}
 80a1672:	bf00      	nop
 80a1674:	080a29d8 	.word	0x080a29d8

080a1678 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1678:	4603      	mov	r3, r0
 80a167a:	4a07      	ldr	r2, [pc, #28]	; (80a1698 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a167c:	b510      	push	{r4, lr}
 80a167e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1682:	f101 0210 	add.w	r2, r1, #16
 80a1686:	f851 4b04 	ldr.w	r4, [r1], #4
 80a168a:	4291      	cmp	r1, r2
 80a168c:	f843 4b04 	str.w	r4, [r3], #4
 80a1690:	d1f9      	bne.n	80a1686 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1692:	780a      	ldrb	r2, [r1, #0]
 80a1694:	701a      	strb	r2, [r3, #0]
}
 80a1696:	bd10      	pop	{r4, pc}
 80a1698:	080a29d8 	.word	0x080a29d8

080a169c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a169c:	4a02      	ldr	r2, [pc, #8]	; (80a16a8 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a169e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a16a0:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a16a2:	2204      	movs	r2, #4
 80a16a4:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a16a6:	4770      	bx	lr
 80a16a8:	080a29d8 	.word	0x080a29d8

080a16ac <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a16ac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a16ae:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a16b2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a16b6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a16ba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a16be:	2304      	movs	r3, #4
 80a16c0:	6041      	str	r1, [r0, #4]
 80a16c2:	7503      	strb	r3, [r0, #20]
 80a16c4:	bd10      	pop	{r4, pc}
	...

080a16c8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a16c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a16ca:	4d04      	ldr	r5, [pc, #16]	; (80a16dc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a16cc:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a16ce:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a16d2:	9500      	str	r5, [sp, #0]
 80a16d4:	f7ff ffea 	bl	80a16ac <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a16d8:	b003      	add	sp, #12
 80a16da:	bd30      	pop	{r4, r5, pc}
 80a16dc:	080a29d8 	.word	0x080a29d8

080a16e0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a16e0:	4a01      	ldr	r2, [pc, #4]	; (80a16e8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a16e2:	4b02      	ldr	r3, [pc, #8]	; (80a16ec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a16e4:	601a      	str	r2, [r3, #0]
 80a16e6:	4770      	bx	lr
 80a16e8:	080a2a5a 	.word	0x080a2a5a
 80a16ec:	200004c8 	.word	0x200004c8

080a16f0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a16f0:	2300      	movs	r3, #0
 80a16f2:	461a      	mov	r2, r3
 80a16f4:	6840      	ldr	r0, [r0, #4]
 80a16f6:	f7ff bebf 	b.w	80a1478 <network_connect>

080a16fa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a16fa:	2200      	movs	r2, #0
 80a16fc:	2102      	movs	r1, #2
 80a16fe:	6840      	ldr	r0, [r0, #4]
 80a1700:	f7ff beca 	b.w	80a1498 <network_disconnect>

080a1704 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1704:	2200      	movs	r2, #0
 80a1706:	4611      	mov	r1, r2
 80a1708:	6840      	ldr	r0, [r0, #4]
 80a170a:	f7ff bebd 	b.w	80a1488 <network_connecting>

080a170e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a170e:	2200      	movs	r2, #0
 80a1710:	4611      	mov	r1, r2
 80a1712:	6840      	ldr	r0, [r0, #4]
 80a1714:	f7ff bec8 	b.w	80a14a8 <network_ready>

080a1718 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1718:	2300      	movs	r3, #0
 80a171a:	461a      	mov	r2, r3
 80a171c:	4619      	mov	r1, r3
 80a171e:	6840      	ldr	r0, [r0, #4]
 80a1720:	f7ff beca 	b.w	80a14b8 <network_on>

080a1724 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1724:	2300      	movs	r3, #0
 80a1726:	461a      	mov	r2, r3
 80a1728:	4619      	mov	r1, r3
 80a172a:	6840      	ldr	r0, [r0, #4]
 80a172c:	f7ff becc 	b.w	80a14c8 <network_off>

080a1730 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1730:	2200      	movs	r2, #0
 80a1732:	f081 0101 	eor.w	r1, r1, #1
 80a1736:	6840      	ldr	r0, [r0, #4]
 80a1738:	f7ff bece 	b.w	80a14d8 <network_listen>

080a173c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a173c:	2200      	movs	r2, #0
 80a173e:	6840      	ldr	r0, [r0, #4]
 80a1740:	f7ff beda 	b.w	80a14f8 <network_set_listen_timeout>

080a1744 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1744:	2200      	movs	r2, #0
 80a1746:	4611      	mov	r1, r2
 80a1748:	6840      	ldr	r0, [r0, #4]
 80a174a:	f7ff bedd 	b.w	80a1508 <network_get_listen_timeout>

080a174e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a174e:	2200      	movs	r2, #0
 80a1750:	4611      	mov	r1, r2
 80a1752:	6840      	ldr	r0, [r0, #4]
 80a1754:	f7ff bec8 	b.w	80a14e8 <network_listening>

080a1758 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1758:	b570      	push	{r4, r5, r6, lr}
 80a175a:	4616      	mov	r6, r2
 80a175c:	b08e      	sub	sp, #56	; 0x38
 80a175e:	4604      	mov	r4, r0
    IPAddress addr;
 80a1760:	a808      	add	r0, sp, #32
 80a1762:	f7ff ff7b 	bl	80a165c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1766:	2211      	movs	r2, #17
 80a1768:	2100      	movs	r1, #0
 80a176a:	a803      	add	r0, sp, #12
 80a176c:	f000 fdf3 	bl	80a2356 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1770:	4630      	mov	r0, r6
 80a1772:	f000 fe21 	bl	80a23b8 <strlen>
 80a1776:	2500      	movs	r5, #0
 80a1778:	4b0a      	ldr	r3, [pc, #40]	; (80a17a4 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a177a:	9500      	str	r5, [sp, #0]
 80a177c:	b281      	uxth	r1, r0
 80a177e:	685b      	ldr	r3, [r3, #4]
 80a1780:	aa03      	add	r2, sp, #12
 80a1782:	4630      	mov	r0, r6
 80a1784:	f7ff fe34 	bl	80a13f0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1788:	b120      	cbz	r0, 80a1794 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a178a:	4629      	mov	r1, r5
 80a178c:	4620      	mov	r0, r4
 80a178e:	f7ff ff85 	bl	80a169c <_ZN9IPAddressC1Em>
 80a1792:	e003      	b.n	80a179c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1794:	a903      	add	r1, sp, #12
 80a1796:	4620      	mov	r0, r4
 80a1798:	f7ff ff6e 	bl	80a1678 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a179c:	4620      	mov	r0, r4
 80a179e:	b00e      	add	sp, #56	; 0x38
 80a17a0:	bd70      	pop	{r4, r5, r6, pc}
 80a17a2:	bf00      	nop
 80a17a4:	20000540 	.word	0x20000540

080a17a8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a17a8:	4b02      	ldr	r3, [pc, #8]	; (80a17b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a17aa:	4a03      	ldr	r2, [pc, #12]	; (80a17b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a17ac:	601a      	str	r2, [r3, #0]
 80a17ae:	2200      	movs	r2, #0
 80a17b0:	605a      	str	r2, [r3, #4]
 80a17b2:	4770      	bx	lr
 80a17b4:	200004cc 	.word	0x200004cc
 80a17b8:	080a2ad0 	.word	0x080a2ad0

080a17bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a17bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a17be:	4606      	mov	r6, r0
 80a17c0:	460d      	mov	r5, r1
 80a17c2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a17c4:	2400      	movs	r4, #0
  while (size--) {
 80a17c6:	42bd      	cmp	r5, r7
 80a17c8:	d00c      	beq.n	80a17e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a17ca:	6833      	ldr	r3, [r6, #0]
 80a17cc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a17d0:	689b      	ldr	r3, [r3, #8]
 80a17d2:	4630      	mov	r0, r6
 80a17d4:	4798      	blx	r3
     if (chunk>=0)
 80a17d6:	2800      	cmp	r0, #0
 80a17d8:	db01      	blt.n	80a17de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a17da:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a17dc:	e7f3      	b.n	80a17c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a17de:	2c00      	cmp	r4, #0
 80a17e0:	bf08      	it	eq
 80a17e2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a17e4:	4620      	mov	r0, r4
 80a17e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a17e8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a17e8:	b570      	push	{r4, r5, r6, lr}
 80a17ea:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a17ec:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a17ee:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a17f0:	b149      	cbz	r1, 80a1806 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a17f2:	f000 fde1 	bl	80a23b8 <strlen>
 80a17f6:	682b      	ldr	r3, [r5, #0]
 80a17f8:	4602      	mov	r2, r0
 80a17fa:	4621      	mov	r1, r4
 80a17fc:	4628      	mov	r0, r5
    }
 80a17fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1802:	68db      	ldr	r3, [r3, #12]
 80a1804:	4718      	bx	r3
    }
 80a1806:	bd70      	pop	{r4, r5, r6, pc}

080a1808 <_ZN5Print5printEPKc>:
 80a1808:	b508      	push	{r3, lr}
 80a180a:	f7ff ffed 	bl	80a17e8 <_ZN5Print5writeEPKc>
 80a180e:	bd08      	pop	{r3, pc}

080a1810 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1810:	6803      	ldr	r3, [r0, #0]
 80a1812:	689b      	ldr	r3, [r3, #8]
 80a1814:	4718      	bx	r3

080a1816 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1816:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1818:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a181a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a181c:	f7ff fff8 	bl	80a1810 <_ZN5Print5printEc>
  n += print('\n');
 80a1820:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1822:	4604      	mov	r4, r0
  n += print('\n');
 80a1824:	4628      	mov	r0, r5
 80a1826:	f7ff fff3 	bl	80a1810 <_ZN5Print5printEc>
  return n;
}
 80a182a:	4420      	add	r0, r4
 80a182c:	bd38      	pop	{r3, r4, r5, pc}

080a182e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a182e:	b538      	push	{r3, r4, r5, lr}
 80a1830:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1832:	f7ff ffd9 	bl	80a17e8 <_ZN5Print5writeEPKc>
 80a1836:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1838:	4628      	mov	r0, r5
 80a183a:	f7ff ffec 	bl	80a1816 <_ZN5Print7printlnEv>
  return n;
}
 80a183e:	4420      	add	r0, r4
 80a1840:	bd38      	pop	{r3, r4, r5, pc}

080a1842 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1842:	2a01      	cmp	r2, #1
 80a1844:	bf98      	it	ls
 80a1846:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1848:	b530      	push	{r4, r5, lr}
 80a184a:	460b      	mov	r3, r1
 80a184c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a184e:	2100      	movs	r1, #0
 80a1850:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1854:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1858:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a185c:	fb05 3312 	mls	r3, r5, r2, r3
 80a1860:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1862:	2b09      	cmp	r3, #9
 80a1864:	bf94      	ite	ls
 80a1866:	3330      	addls	r3, #48	; 0x30
 80a1868:	3337      	addhi	r3, #55	; 0x37
 80a186a:	b2db      	uxtb	r3, r3
 80a186c:	4621      	mov	r1, r4
 80a186e:	f804 3901 	strb.w	r3, [r4], #-1
 80a1872:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1874:	2d00      	cmp	r5, #0
 80a1876:	d1ef      	bne.n	80a1858 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1878:	f7ff ffb6 	bl	80a17e8 <_ZN5Print5writeEPKc>
}
 80a187c:	b00b      	add	sp, #44	; 0x2c
 80a187e:	bd30      	pop	{r4, r5, pc}

080a1880 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1880:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1882:	b922      	cbnz	r2, 80a188e <_ZN5Print5printEmi+0xe>
 80a1884:	6803      	ldr	r3, [r0, #0]
 80a1886:	b2c9      	uxtb	r1, r1
 80a1888:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a188a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a188c:	4718      	bx	r3
  else return printNumber(n, base);
 80a188e:	b2d2      	uxtb	r2, r2
}
 80a1890:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1892:	f7ff bfd6 	b.w	80a1842 <_ZN5Print11printNumberEmh>

080a1896 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1896:	f7ff bff3 	b.w	80a1880 <_ZN5Print5printEmi>

080a189a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a189a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a189e:	4607      	mov	r7, r0
 80a18a0:	460e      	mov	r6, r1
  if (base == 0) {
 80a18a2:	4615      	mov	r5, r2
 80a18a4:	b92a      	cbnz	r2, 80a18b2 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a18a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a18aa:	6803      	ldr	r3, [r0, #0]
 80a18ac:	b2c9      	uxtb	r1, r1
 80a18ae:	689b      	ldr	r3, [r3, #8]
 80a18b0:	4718      	bx	r3
  } else if (base == 10) {
 80a18b2:	2a0a      	cmp	r2, #10
 80a18b4:	d102      	bne.n	80a18bc <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a18b6:	2900      	cmp	r1, #0
 80a18b8:	da01      	bge.n	80a18be <_ZN5Print5printEli+0x24>
 80a18ba:	e004      	b.n	80a18c6 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a18bc:	b2d2      	uxtb	r2, r2
  }
}
 80a18be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a18c2:	f7ff bfbe 	b.w	80a1842 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a18c6:	212d      	movs	r1, #45	; 0x2d
 80a18c8:	f7ff ffa2 	bl	80a1810 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a18cc:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a18ce:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a18d0:	4271      	negs	r1, r6
 80a18d2:	4638      	mov	r0, r7
 80a18d4:	f7ff ffb5 	bl	80a1842 <_ZN5Print11printNumberEmh>
 80a18d8:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a18da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a18de <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a18de:	f7ff bfdc 	b.w	80a189a <_ZN5Print5printEli>

080a18e2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a18e2:	b510      	push	{r4, lr}
 80a18e4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a18e6:	f7ff fe2a 	bl	80a153e <_ZNSt14_Function_baseD1Ev>
 80a18ea:	4620      	mov	r0, r4
 80a18ec:	bd10      	pop	{r4, pc}
	...

080a18f0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a18f0:	4803      	ldr	r0, [pc, #12]	; (80a1900 <_GLOBAL__sub_I_RGB+0x10>)
 80a18f2:	2300      	movs	r3, #0
 80a18f4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a18f6:	4a03      	ldr	r2, [pc, #12]	; (80a1904 <_GLOBAL__sub_I_RGB+0x14>)
 80a18f8:	4903      	ldr	r1, [pc, #12]	; (80a1908 <_GLOBAL__sub_I_RGB+0x18>)
 80a18fa:	f000 bbc3 	b.w	80a2084 <__aeabi_atexit>
 80a18fe:	bf00      	nop
 80a1900:	200004d4 	.word	0x200004d4
 80a1904:	20000480 	.word	0x20000480
 80a1908:	080a18e3 	.word	0x080a18e3

080a190c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a190c:	4770      	bx	lr

080a190e <_ZN8SPIClassD0Ev>:
 80a190e:	b510      	push	{r4, lr}
 80a1910:	4604      	mov	r4, r0
 80a1912:	2110      	movs	r1, #16
 80a1914:	f000 fbbb 	bl	80a208e <_ZdlPvj>
 80a1918:	4620      	mov	r0, r4
 80a191a:	bd10      	pop	{r4, pc}

080a191c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a191c:	b570      	push	{r4, r5, r6, lr}
 80a191e:	4604      	mov	r4, r0
 80a1920:	460e      	mov	r6, r1
 80a1922:	4b07      	ldr	r3, [pc, #28]	; (80a1940 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1924:	2500      	movs	r5, #0
 80a1926:	6003      	str	r3, [r0, #0]
 80a1928:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a192c:	f7ff fc0e 	bl	80a114c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1930:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1932:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1934:	f7ff fccc 	bl	80a12d0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1938:	60a5      	str	r5, [r4, #8]
}
 80a193a:	4620      	mov	r0, r4
 80a193c:	bd70      	pop	{r4, r5, r6, pc}
 80a193e:	bf00      	nop
 80a1940:	080a2b04 	.word	0x080a2b04

080a1944 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a1944:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a1948:	7900      	ldrb	r0, [r0, #4]
 80a194a:	f7ff bc99 	b.w	80a1280 <HAL_SPI_Begin>

080a194e <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a194e:	7900      	ldrb	r0, [r0, #4]
 80a1950:	f7ff bc9e 	b.w	80a1290 <HAL_SPI_Set_Bit_Order>

080a1954 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a1954:	7900      	ldrb	r0, [r0, #4]
 80a1956:	f7ff bca3 	b.w	80a12a0 <HAL_SPI_Set_Data_Mode>
	...

080a195c <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a195c:	4a05      	ldr	r2, [pc, #20]	; (80a1974 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a195e:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a1960:	5c99      	ldrb	r1, [r3, r2]
 80a1962:	4281      	cmp	r1, r0
 80a1964:	d002      	beq.n	80a196c <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a1966:	3301      	adds	r3, #1
 80a1968:	2b08      	cmp	r3, #8
 80a196a:	d1f9      	bne.n	80a1960 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a196c:	1c58      	adds	r0, r3, #1
}
 80a196e:	b2c0      	uxtb	r0, r0
 80a1970:	4770      	bx	lr
 80a1972:	bf00      	nop
 80a1974:	080a2b0c 	.word	0x080a2b0c

080a1978 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a1978:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a197a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a197c:	6018      	str	r0, [r3, #0]
 80a197e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a1980:	6818      	ldr	r0, [r3, #0]
 80a1982:	b2e5      	uxtb	r5, r4
 80a1984:	4288      	cmp	r0, r1
 80a1986:	d906      	bls.n	80a1996 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a1988:	3401      	adds	r4, #1
 80a198a:	2c08      	cmp	r4, #8
 80a198c:	d002      	beq.n	80a1994 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a198e:	0840      	lsrs	r0, r0, #1
 80a1990:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a1992:	e7f5      	b.n	80a1980 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a1994:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a1996:	4b02      	ldr	r3, [pc, #8]	; (80a19a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a1998:	5d5b      	ldrb	r3, [r3, r5]
 80a199a:	7013      	strb	r3, [r2, #0]
 80a199c:	bd30      	pop	{r4, r5, pc}
 80a199e:	bf00      	nop
 80a19a0:	080a2b0c 	.word	0x080a2b0c

080a19a4 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a19a4:	b570      	push	{r4, r5, r6, lr}
 80a19a6:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a19a8:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a19ac:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a19ae:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a19b0:	2214      	movs	r2, #20
 80a19b2:	2100      	movs	r1, #0
 80a19b4:	a803      	add	r0, sp, #12
 80a19b6:	f000 fcce 	bl	80a2356 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a19ba:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a19bc:	a903      	add	r1, sp, #12
 80a19be:	4630      	mov	r0, r6
 80a19c0:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a19c2:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a19c6:	f7ff fc93 	bl	80a12f0 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a19ca:	ab02      	add	r3, sp, #8
 80a19cc:	f10d 0207 	add.w	r2, sp, #7
 80a19d0:	4629      	mov	r1, r5
 80a19d2:	9804      	ldr	r0, [sp, #16]
 80a19d4:	f7ff ffd0 	bl	80a1978 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a19d8:	7920      	ldrb	r0, [r4, #4]
 80a19da:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a19de:	f7ff fc67 	bl	80a12b0 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a19e2:	9802      	ldr	r0, [sp, #8]
 80a19e4:	b008      	add	sp, #32
 80a19e6:	bd70      	pop	{r4, r5, r6, pc}

080a19e8 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a19e8:	b538      	push	{r3, r4, r5, lr}
 80a19ea:	4604      	mov	r4, r0
    if (dividerReference)
 80a19ec:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a19ee:	4608      	mov	r0, r1
    if (dividerReference)
 80a19f0:	b14d      	cbz	r5, 80a1a06 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a19f2:	f7ff ffb3 	bl	80a195c <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a19f6:	2201      	movs	r2, #1
 80a19f8:	fa25 f100 	lsr.w	r1, r5, r0
 80a19fc:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a19fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a1a02:	f7ff bfcf 	b.w	80a19a4 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1a06:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a1a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1a0c:	f7ff bc50 	b.w	80a12b0 <HAL_SPI_Set_Clock_Divider>

080a1a10 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a1a10:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a1a12:	7900      	ldrb	r0, [r0, #4]
 80a1a14:	f7ff fc54 	bl	80a12c0 <HAL_SPI_Send_Receive_Data>
}
 80a1a18:	b2c0      	uxtb	r0, r0
 80a1a1a:	bd08      	pop	{r3, pc}

080a1a1c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1a1c:	7900      	ldrb	r0, [r0, #4]
 80a1a1e:	f7ff bc5f 	b.w	80a12e0 <HAL_SPI_Is_Enabled>
	...

080a1a24 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1a24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1a28:	4b03      	ldr	r3, [pc, #12]	; (80a1a38 <_GLOBAL__sub_I_System+0x14>)
 80a1a2a:	2000      	movs	r0, #0
 80a1a2c:	7018      	strb	r0, [r3, #0]
 80a1a2e:	8058      	strh	r0, [r3, #2]
 80a1a30:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1a32:	f7ff bced 	b.w	80a1410 <set_system_mode>
 80a1a36:	bf00      	nop
 80a1a38:	200004e4 	.word	0x200004e4

080a1a3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1a3c:	4b02      	ldr	r3, [pc, #8]	; (80a1a48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1a3e:	681a      	ldr	r2, [r3, #0]
 80a1a40:	4b02      	ldr	r3, [pc, #8]	; (80a1a4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1a42:	601a      	str	r2, [r3, #0]
 80a1a44:	4770      	bx	lr
 80a1a46:	bf00      	nop
 80a1a48:	20000418 	.word	0x20000418
 80a1a4c:	200004ec 	.word	0x200004ec

080a1a50 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1a50:	4770      	bx	lr

080a1a52 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1a52:	7441      	strb	r1, [r0, #17]
 80a1a54:	4770      	bx	lr

080a1a56 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1a56:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1a58:	7c00      	ldrb	r0, [r0, #16]
 80a1a5a:	f7ff fc89 	bl	80a1370 <HAL_USART_Available_Data_For_Write>
}
 80a1a5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1a62:	bd08      	pop	{r3, pc}

080a1a64 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1a64:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1a66:	7c00      	ldrb	r0, [r0, #16]
 80a1a68:	f7ff fc5a 	bl	80a1320 <HAL_USART_Available_Data>
}
 80a1a6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1a70:	bd08      	pop	{r3, pc}

080a1a72 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1a72:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1a74:	7c00      	ldrb	r0, [r0, #16]
 80a1a76:	f7ff fc63 	bl	80a1340 <HAL_USART_Peek_Data>
}
 80a1a7a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1a7e:	bf28      	it	cs
 80a1a80:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1a84:	bd08      	pop	{r3, pc}

080a1a86 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1a86:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1a88:	7c00      	ldrb	r0, [r0, #16]
 80a1a8a:	f7ff fc51 	bl	80a1330 <HAL_USART_Read_Data>
}
 80a1a8e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1a92:	bf28      	it	cs
 80a1a94:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1a98:	bd08      	pop	{r3, pc}

080a1a9a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1a9a:	7c00      	ldrb	r0, [r0, #16]
 80a1a9c:	f7ff bc58 	b.w	80a1350 <HAL_USART_Flush_Data>

080a1aa0 <_ZN11USARTSerialD0Ev>:
 80a1aa0:	b510      	push	{r4, lr}
 80a1aa2:	4604      	mov	r4, r0
 80a1aa4:	2114      	movs	r1, #20
 80a1aa6:	f000 faf2 	bl	80a208e <_ZdlPvj>
 80a1aaa:	4620      	mov	r0, r4
 80a1aac:	bd10      	pop	{r4, pc}

080a1aae <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1aae:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1ab0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1ab2:	4604      	mov	r4, r0
 80a1ab4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1ab6:	b925      	cbnz	r5, 80a1ac2 <_ZN11USARTSerial5writeEh+0x14>
 80a1ab8:	7c00      	ldrb	r0, [r0, #16]
 80a1aba:	f7ff fc59 	bl	80a1370 <HAL_USART_Available_Data_For_Write>
 80a1abe:	2800      	cmp	r0, #0
 80a1ac0:	dd05      	ble.n	80a1ace <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1ac2:	4631      	mov	r1, r6
 80a1ac4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1aca:	f7ff bc21 	b.w	80a1310 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1ace:	4628      	mov	r0, r5
 80a1ad0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1ad4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1ad4:	b510      	push	{r4, lr}
 80a1ad6:	4604      	mov	r4, r0
 80a1ad8:	4608      	mov	r0, r1
 80a1ada:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1adc:	2200      	movs	r2, #0
 80a1ade:	6062      	str	r2, [r4, #4]
 80a1ae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1ae4:	60a2      	str	r2, [r4, #8]
 80a1ae6:	4a05      	ldr	r2, [pc, #20]	; (80a1afc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1ae8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1aea:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1aec:	2201      	movs	r2, #1
 80a1aee:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1af0:	461a      	mov	r2, r3
 80a1af2:	f7ff fc05 	bl	80a1300 <HAL_USART_Init>
}
 80a1af6:	4620      	mov	r0, r4
 80a1af8:	bd10      	pop	{r4, pc}
 80a1afa:	bf00      	nop
 80a1afc:	080a2b48 	.word	0x080a2b48

080a1b00 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1b00:	7c00      	ldrb	r0, [r0, #16]
 80a1b02:	f7ff bc2d 	b.w	80a1360 <HAL_USART_Is_Enabled>
	...

080a1b08 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a1b0a:	4c19      	ldr	r4, [pc, #100]	; (80a1b70 <_Z22__fetch_global_Serial1v+0x68>)
 80a1b0c:	6825      	ldr	r5, [r4, #0]
 80a1b0e:	b94d      	cbnz	r5, 80a1b24 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a1b10:	2084      	movs	r0, #132	; 0x84
 80a1b12:	f7fe fac2 	bl	80a009a <_Znwj>
 80a1b16:	4606      	mov	r6, r0
 80a1b18:	b118      	cbz	r0, 80a1b22 <_Z22__fetch_global_Serial1v+0x1a>
 80a1b1a:	2284      	movs	r2, #132	; 0x84
 80a1b1c:	4629      	mov	r1, r5
 80a1b1e:	f000 fc1a 	bl	80a2356 <memset>
 80a1b22:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a1b24:	4d13      	ldr	r5, [pc, #76]	; (80a1b74 <_Z22__fetch_global_Serial1v+0x6c>)
 80a1b26:	682e      	ldr	r6, [r5, #0]
 80a1b28:	b94e      	cbnz	r6, 80a1b3e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a1b2a:	2084      	movs	r0, #132	; 0x84
 80a1b2c:	f7fe fab5 	bl	80a009a <_Znwj>
 80a1b30:	4607      	mov	r7, r0
 80a1b32:	b118      	cbz	r0, 80a1b3c <_Z22__fetch_global_Serial1v+0x34>
 80a1b34:	2284      	movs	r2, #132	; 0x84
 80a1b36:	4631      	mov	r1, r6
 80a1b38:	f000 fc0d 	bl	80a2356 <memset>
 80a1b3c:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a1b3e:	4f0e      	ldr	r7, [pc, #56]	; (80a1b78 <_Z22__fetch_global_Serial1v+0x70>)
 80a1b40:	6839      	ldr	r1, [r7, #0]
 80a1b42:	f011 0601 	ands.w	r6, r1, #1
 80a1b46:	d111      	bne.n	80a1b6c <_Z22__fetch_global_Serial1v+0x64>
 80a1b48:	4638      	mov	r0, r7
 80a1b4a:	f7fe fab5 	bl	80a00b8 <__cxa_guard_acquire>
 80a1b4e:	b168      	cbz	r0, 80a1b6c <_Z22__fetch_global_Serial1v+0x64>
 80a1b50:	6822      	ldr	r2, [r4, #0]
 80a1b52:	4631      	mov	r1, r6
 80a1b54:	682b      	ldr	r3, [r5, #0]
 80a1b56:	4809      	ldr	r0, [pc, #36]	; (80a1b7c <_Z22__fetch_global_Serial1v+0x74>)
 80a1b58:	f7ff ffbc 	bl	80a1ad4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1b5c:	4638      	mov	r0, r7
 80a1b5e:	f7fe fab0 	bl	80a00c2 <__cxa_guard_release>
 80a1b62:	4a07      	ldr	r2, [pc, #28]	; (80a1b80 <_Z22__fetch_global_Serial1v+0x78>)
 80a1b64:	4907      	ldr	r1, [pc, #28]	; (80a1b84 <_Z22__fetch_global_Serial1v+0x7c>)
 80a1b66:	4805      	ldr	r0, [pc, #20]	; (80a1b7c <_Z22__fetch_global_Serial1v+0x74>)
 80a1b68:	f000 fa8c 	bl	80a2084 <__aeabi_atexit>
#endif
	return serial1;
}
 80a1b6c:	4803      	ldr	r0, [pc, #12]	; (80a1b7c <_Z22__fetch_global_Serial1v+0x74>)
 80a1b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1b70:	2000050c 	.word	0x2000050c
 80a1b74:	20000504 	.word	0x20000504
 80a1b78:	20000508 	.word	0x20000508
 80a1b7c:	200004f0 	.word	0x200004f0
 80a1b80:	20000480 	.word	0x20000480
 80a1b84:	080a1a51 	.word	0x080a1a51

080a1b88 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1b88:	7441      	strb	r1, [r0, #17]
 80a1b8a:	4770      	bx	lr

080a1b8c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1b8c:	4770      	bx	lr

080a1b8e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1b8e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1b90:	2100      	movs	r1, #0
 80a1b92:	7c00      	ldrb	r0, [r0, #16]
 80a1b94:	f7ff fc14 	bl	80a13c0 <HAL_USB_USART_Receive_Data>
}
 80a1b98:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1b9c:	bf28      	it	cs
 80a1b9e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1ba2:	bd08      	pop	{r3, pc}

080a1ba4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1ba4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1ba6:	2101      	movs	r1, #1
 80a1ba8:	7c00      	ldrb	r0, [r0, #16]
 80a1baa:	f7ff fc09 	bl	80a13c0 <HAL_USB_USART_Receive_Data>
}
 80a1bae:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1bb2:	bf28      	it	cs
 80a1bb4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1bb8:	bd08      	pop	{r3, pc}

080a1bba <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1bba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1bbc:	7c00      	ldrb	r0, [r0, #16]
 80a1bbe:	f7ff fbf7 	bl	80a13b0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1bc2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1bc6:	bd08      	pop	{r3, pc}

080a1bc8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1bc8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1bca:	7c00      	ldrb	r0, [r0, #16]
 80a1bcc:	f7ff fbe8 	bl	80a13a0 <HAL_USB_USART_Available_Data>
}
 80a1bd0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1bd4:	bd08      	pop	{r3, pc}

080a1bd6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1bd6:	7c00      	ldrb	r0, [r0, #16]
 80a1bd8:	f7ff bc02 	b.w	80a13e0 <HAL_USB_USART_Flush_Data>

080a1bdc <_ZN9USBSerialD0Ev>:
 80a1bdc:	b510      	push	{r4, lr}
 80a1bde:	4604      	mov	r4, r0
 80a1be0:	2114      	movs	r1, #20
 80a1be2:	f000 fa54 	bl	80a208e <_ZdlPvj>
 80a1be6:	4620      	mov	r0, r4
 80a1be8:	bd10      	pop	{r4, pc}

080a1bea <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1bea:	b538      	push	{r3, r4, r5, lr}
 80a1bec:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1bee:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1bf0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1bf2:	f7ff fbdd 	bl	80a13b0 <HAL_USB_USART_Available_Data_For_Write>
 80a1bf6:	2800      	cmp	r0, #0
 80a1bf8:	dc01      	bgt.n	80a1bfe <_ZN9USBSerial5writeEh+0x14>
 80a1bfa:	7c60      	ldrb	r0, [r4, #17]
 80a1bfc:	b128      	cbz	r0, 80a1c0a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1bfe:	4629      	mov	r1, r5
 80a1c00:	7c20      	ldrb	r0, [r4, #16]
 80a1c02:	f7ff fbe5 	bl	80a13d0 <HAL_USB_USART_Send_Data>
 80a1c06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1c0a:	bd38      	pop	{r3, r4, r5, pc}

080a1c0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1c0c:	b510      	push	{r4, lr}
 80a1c0e:	4604      	mov	r4, r0
 80a1c10:	2300      	movs	r3, #0
 80a1c12:	6063      	str	r3, [r4, #4]
 80a1c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1c18:	60a3      	str	r3, [r4, #8]
 80a1c1a:	4b05      	ldr	r3, [pc, #20]	; (80a1c30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1c1c:	4608      	mov	r0, r1
 80a1c1e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1c20:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1c22:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1c24:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1c26:	4611      	mov	r1, r2
 80a1c28:	f7ff fbaa 	bl	80a1380 <HAL_USB_USART_Init>
}
 80a1c2c:	4620      	mov	r0, r4
 80a1c2e:	bd10      	pop	{r4, pc}
 80a1c30:	080a2b78 	.word	0x080a2b78

080a1c34 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1c34:	2200      	movs	r2, #0
 80a1c36:	7c00      	ldrb	r0, [r0, #16]
 80a1c38:	f7ff bbaa 	b.w	80a1390 <HAL_USB_USART_Begin>

080a1c3c <_Z19acquireSerialBufferv>:
 80a1c3c:	b510      	push	{r4, lr}
 80a1c3e:	4604      	mov	r4, r0
 80a1c40:	2214      	movs	r2, #20
 80a1c42:	2100      	movs	r1, #0
 80a1c44:	f000 fb87 	bl	80a2356 <memset>
 80a1c48:	4620      	mov	r0, r4
 80a1c4a:	bd10      	pop	{r4, pc}

080a1c4c <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1c4c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1c4e:	4d0e      	ldr	r5, [pc, #56]	; (80a1c88 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1c50:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1c52:	a801      	add	r0, sp, #4
 80a1c54:	f7ff fff2 	bl	80a1c3c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1c58:	6829      	ldr	r1, [r5, #0]
 80a1c5a:	f011 0401 	ands.w	r4, r1, #1
 80a1c5e:	d110      	bne.n	80a1c82 <_Z16_fetch_usbserialv+0x36>
 80a1c60:	4628      	mov	r0, r5
 80a1c62:	f7fe fa29 	bl	80a00b8 <__cxa_guard_acquire>
 80a1c66:	b160      	cbz	r0, 80a1c82 <_Z16_fetch_usbserialv+0x36>
 80a1c68:	aa01      	add	r2, sp, #4
 80a1c6a:	4621      	mov	r1, r4
 80a1c6c:	4807      	ldr	r0, [pc, #28]	; (80a1c8c <_Z16_fetch_usbserialv+0x40>)
 80a1c6e:	f7ff ffcd 	bl	80a1c0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1c72:	4628      	mov	r0, r5
 80a1c74:	f7fe fa25 	bl	80a00c2 <__cxa_guard_release>
 80a1c78:	4a05      	ldr	r2, [pc, #20]	; (80a1c90 <_Z16_fetch_usbserialv+0x44>)
 80a1c7a:	4906      	ldr	r1, [pc, #24]	; (80a1c94 <_Z16_fetch_usbserialv+0x48>)
 80a1c7c:	4803      	ldr	r0, [pc, #12]	; (80a1c8c <_Z16_fetch_usbserialv+0x40>)
 80a1c7e:	f000 fa01 	bl	80a2084 <__aeabi_atexit>
	return _usbserial;
}
 80a1c82:	4802      	ldr	r0, [pc, #8]	; (80a1c8c <_Z16_fetch_usbserialv+0x40>)
 80a1c84:	b007      	add	sp, #28
 80a1c86:	bd30      	pop	{r4, r5, pc}
 80a1c88:	20000510 	.word	0x20000510
 80a1c8c:	20000518 	.word	0x20000518
 80a1c90:	20000480 	.word	0x20000480
 80a1c94:	080a1b8d 	.word	0x080a1b8d

080a1c98 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1c98:	b510      	push	{r4, lr}
 80a1c9a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1c9c:	2214      	movs	r2, #20
 80a1c9e:	2100      	movs	r1, #0
 80a1ca0:	f000 fb59 	bl	80a2356 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1ca4:	4620      	mov	r0, r4
 80a1ca6:	bd10      	pop	{r4, pc}

080a1ca8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1ca8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1caa:	4c0e      	ldr	r4, [pc, #56]	; (80a1ce4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1cac:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1cae:	a801      	add	r0, sp, #4
 80a1cb0:	f7ff fff2 	bl	80a1c98 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1cb4:	6823      	ldr	r3, [r4, #0]
 80a1cb6:	07db      	lsls	r3, r3, #31
 80a1cb8:	d410      	bmi.n	80a1cdc <_Z17_fetch_usbserial1v+0x34>
 80a1cba:	4620      	mov	r0, r4
 80a1cbc:	f7fe f9fc 	bl	80a00b8 <__cxa_guard_acquire>
 80a1cc0:	b160      	cbz	r0, 80a1cdc <_Z17_fetch_usbserial1v+0x34>
 80a1cc2:	aa01      	add	r2, sp, #4
 80a1cc4:	2101      	movs	r1, #1
 80a1cc6:	4808      	ldr	r0, [pc, #32]	; (80a1ce8 <_Z17_fetch_usbserial1v+0x40>)
 80a1cc8:	f7ff ffa0 	bl	80a1c0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1ccc:	4620      	mov	r0, r4
 80a1cce:	f7fe f9f8 	bl	80a00c2 <__cxa_guard_release>
 80a1cd2:	4a06      	ldr	r2, [pc, #24]	; (80a1cec <_Z17_fetch_usbserial1v+0x44>)
 80a1cd4:	4906      	ldr	r1, [pc, #24]	; (80a1cf0 <_Z17_fetch_usbserial1v+0x48>)
 80a1cd6:	4804      	ldr	r0, [pc, #16]	; (80a1ce8 <_Z17_fetch_usbserial1v+0x40>)
 80a1cd8:	f000 f9d4 	bl	80a2084 <__aeabi_atexit>
  return _usbserial1;
}
 80a1cdc:	4802      	ldr	r0, [pc, #8]	; (80a1ce8 <_Z17_fetch_usbserial1v+0x40>)
 80a1cde:	b006      	add	sp, #24
 80a1ce0:	bd10      	pop	{r4, pc}
 80a1ce2:	bf00      	nop
 80a1ce4:	20000514 	.word	0x20000514
 80a1ce8:	2000052c 	.word	0x2000052c
 80a1cec:	20000480 	.word	0x20000480
 80a1cf0:	080a1b8d 	.word	0x080a1b8d

080a1cf4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1cf4:	2200      	movs	r2, #0
 80a1cf6:	4611      	mov	r1, r2
 80a1cf8:	6840      	ldr	r0, [r0, #4]
 80a1cfa:	f7ff bbd5 	b.w	80a14a8 <network_ready>

080a1cfe <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1d00:	4616      	mov	r6, r2
 80a1d02:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1d04:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1d06:	460f      	mov	r7, r1
 80a1d08:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1d0a:	2100      	movs	r1, #0
 80a1d0c:	a803      	add	r0, sp, #12
 80a1d0e:	f000 fb22 	bl	80a2356 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1d12:	4630      	mov	r0, r6
 80a1d14:	f000 fb50 	bl	80a23b8 <strlen>
 80a1d18:	2500      	movs	r5, #0
 80a1d1a:	9500      	str	r5, [sp, #0]
 80a1d1c:	b281      	uxth	r1, r0
 80a1d1e:	687b      	ldr	r3, [r7, #4]
 80a1d20:	aa03      	add	r2, sp, #12
 80a1d22:	4630      	mov	r0, r6
 80a1d24:	f7ff fb64 	bl	80a13f0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1d28:	b120      	cbz	r0, 80a1d34 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1d2a:	4629      	mov	r1, r5
 80a1d2c:	4620      	mov	r0, r4
 80a1d2e:	f7ff fcb5 	bl	80a169c <_ZN9IPAddressC1Em>
 80a1d32:	e003      	b.n	80a1d3c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1d34:	a903      	add	r1, sp, #12
 80a1d36:	4620      	mov	r0, r4
 80a1d38:	f7ff fc9e 	bl	80a1678 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1d3c:	4620      	mov	r0, r4
 80a1d3e:	b009      	add	sp, #36	; 0x24
 80a1d40:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1d42 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1d42:	2200      	movs	r2, #0
 80a1d44:	4611      	mov	r1, r2
 80a1d46:	6840      	ldr	r0, [r0, #4]
 80a1d48:	f7ff bbce 	b.w	80a14e8 <network_listening>

080a1d4c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1d4c:	2200      	movs	r2, #0
 80a1d4e:	4611      	mov	r1, r2
 80a1d50:	6840      	ldr	r0, [r0, #4]
 80a1d52:	f7ff bbd9 	b.w	80a1508 <network_get_listen_timeout>

080a1d56 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1d56:	2200      	movs	r2, #0
 80a1d58:	6840      	ldr	r0, [r0, #4]
 80a1d5a:	f7ff bbcd 	b.w	80a14f8 <network_set_listen_timeout>

080a1d5e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1d5e:	2200      	movs	r2, #0
 80a1d60:	f081 0101 	eor.w	r1, r1, #1
 80a1d64:	6840      	ldr	r0, [r0, #4]
 80a1d66:	f7ff bbb7 	b.w	80a14d8 <network_listen>

080a1d6a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1d6a:	2300      	movs	r3, #0
 80a1d6c:	461a      	mov	r2, r3
 80a1d6e:	4619      	mov	r1, r3
 80a1d70:	6840      	ldr	r0, [r0, #4]
 80a1d72:	f7ff bba9 	b.w	80a14c8 <network_off>

080a1d76 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1d76:	2300      	movs	r3, #0
 80a1d78:	461a      	mov	r2, r3
 80a1d7a:	4619      	mov	r1, r3
 80a1d7c:	6840      	ldr	r0, [r0, #4]
 80a1d7e:	f7ff bb9b 	b.w	80a14b8 <network_on>

080a1d82 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1d82:	2200      	movs	r2, #0
 80a1d84:	4611      	mov	r1, r2
 80a1d86:	6840      	ldr	r0, [r0, #4]
 80a1d88:	f7ff bb7e 	b.w	80a1488 <network_connecting>

080a1d8c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1d8c:	2200      	movs	r2, #0
 80a1d8e:	2102      	movs	r1, #2
 80a1d90:	6840      	ldr	r0, [r0, #4]
 80a1d92:	f7ff bb81 	b.w	80a1498 <network_disconnect>

080a1d96 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1d96:	2300      	movs	r3, #0
 80a1d98:	461a      	mov	r2, r3
 80a1d9a:	6840      	ldr	r0, [r0, #4]
 80a1d9c:	f7ff bb6c 	b.w	80a1478 <network_connect>

080a1da0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1da0:	4b02      	ldr	r3, [pc, #8]	; (80a1dac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1da2:	2204      	movs	r2, #4
 80a1da4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1da6:	4a02      	ldr	r2, [pc, #8]	; (80a1db0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1da8:	601a      	str	r2, [r3, #0]
 80a1daa:	4770      	bx	lr
 80a1dac:	20000540 	.word	0x20000540
 80a1db0:	080a2ba8 	.word	0x080a2ba8

080a1db4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1db4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1db6:	4b14      	ldr	r3, [pc, #80]	; (80a1e08 <serialEventRun+0x54>)
 80a1db8:	b133      	cbz	r3, 80a1dc8 <serialEventRun+0x14>
 80a1dba:	f7ff ff47 	bl	80a1c4c <_Z16_fetch_usbserialv>
 80a1dbe:	6803      	ldr	r3, [r0, #0]
 80a1dc0:	691b      	ldr	r3, [r3, #16]
 80a1dc2:	4798      	blx	r3
 80a1dc4:	2800      	cmp	r0, #0
 80a1dc6:	dc16      	bgt.n	80a1df6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1dc8:	4b10      	ldr	r3, [pc, #64]	; (80a1e0c <serialEventRun+0x58>)
 80a1dca:	b133      	cbz	r3, 80a1dda <serialEventRun+0x26>
 80a1dcc:	f7ff fe9c 	bl	80a1b08 <_Z22__fetch_global_Serial1v>
 80a1dd0:	6803      	ldr	r3, [r0, #0]
 80a1dd2:	691b      	ldr	r3, [r3, #16]
 80a1dd4:	4798      	blx	r3
 80a1dd6:	2800      	cmp	r0, #0
 80a1dd8:	dc10      	bgt.n	80a1dfc <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1dda:	4b0d      	ldr	r3, [pc, #52]	; (80a1e10 <serialEventRun+0x5c>)
 80a1ddc:	b10b      	cbz	r3, 80a1de2 <serialEventRun+0x2e>
 80a1dde:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1de2:	4b0c      	ldr	r3, [pc, #48]	; (80a1e14 <serialEventRun+0x60>)
 80a1de4:	b17b      	cbz	r3, 80a1e06 <serialEventRun+0x52>
 80a1de6:	f7ff ff5f 	bl	80a1ca8 <_Z17_fetch_usbserial1v>
 80a1dea:	6803      	ldr	r3, [r0, #0]
 80a1dec:	691b      	ldr	r3, [r3, #16]
 80a1dee:	4798      	blx	r3
 80a1df0:	2800      	cmp	r0, #0
 80a1df2:	dc06      	bgt.n	80a1e02 <serialEventRun+0x4e>
 80a1df4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1df6:	f3af 8000 	nop.w
 80a1dfa:	e7e5      	b.n	80a1dc8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1dfc:	f3af 8000 	nop.w
 80a1e00:	e7eb      	b.n	80a1dda <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1e02:	f3af 8000 	nop.w
 80a1e06:	bd08      	pop	{r3, pc}
	...

080a1e18 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1e18:	b508      	push	{r3, lr}
	serialEventRun();
 80a1e1a:	f7ff ffcb 	bl	80a1db4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1e1e:	f7ff f9ad 	bl	80a117c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1e22:	4b01      	ldr	r3, [pc, #4]	; (80a1e28 <_post_loop+0x10>)
 80a1e24:	6018      	str	r0, [r3, #0]
 80a1e26:	bd08      	pop	{r3, pc}
 80a1e28:	20000550 	.word	0x20000550

080a1e2c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1e2c:	4802      	ldr	r0, [pc, #8]	; (80a1e38 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1e2e:	4a03      	ldr	r2, [pc, #12]	; (80a1e3c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1e30:	4903      	ldr	r1, [pc, #12]	; (80a1e40 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1e32:	1a12      	subs	r2, r2, r0
 80a1e34:	f000 ba84 	b.w	80a2340 <memcpy>
 80a1e38:	40024000 	.word	0x40024000
 80a1e3c:	40024004 	.word	0x40024004
 80a1e40:	080a2c90 	.word	0x080a2c90

080a1e44 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1e44:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1e46:	2300      	movs	r3, #0
 80a1e48:	9300      	str	r3, [sp, #0]
 80a1e4a:	461a      	mov	r2, r3
 80a1e4c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1e50:	f7ff faf8 	bl	80a1444 <system_ctrl_set_result>
}
 80a1e54:	b003      	add	sp, #12
 80a1e56:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1e5c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1e5c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1e5e:	8843      	ldrh	r3, [r0, #2]
 80a1e60:	2b0a      	cmp	r3, #10
 80a1e62:	d008      	beq.n	80a1e76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1e64:	2b50      	cmp	r3, #80	; 0x50
 80a1e66:	d109      	bne.n	80a1e7c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1e68:	4b09      	ldr	r3, [pc, #36]	; (80a1e90 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1e6a:	681b      	ldr	r3, [r3, #0]
 80a1e6c:	b13b      	cbz	r3, 80a1e7e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1e6e:	b003      	add	sp, #12
 80a1e70:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1e74:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1e76:	f7ff ffe5 	bl	80a1e44 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1e7a:	e006      	b.n	80a1e8a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1e7c:	2300      	movs	r3, #0
 80a1e7e:	9300      	str	r3, [sp, #0]
 80a1e80:	461a      	mov	r2, r3
 80a1e82:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1e86:	f7ff fadd 	bl	80a1444 <system_ctrl_set_result>
        break;
    }
}
 80a1e8a:	b003      	add	sp, #12
 80a1e8c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1e90:	20000548 	.word	0x20000548

080a1e94 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1e94:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1e96:	4c10      	ldr	r4, [pc, #64]	; (80a1ed8 <module_user_init_hook+0x44>)
 80a1e98:	4d10      	ldr	r5, [pc, #64]	; (80a1edc <module_user_init_hook+0x48>)
 80a1e9a:	6823      	ldr	r3, [r4, #0]
 80a1e9c:	42ab      	cmp	r3, r5
 80a1e9e:	4b10      	ldr	r3, [pc, #64]	; (80a1ee0 <module_user_init_hook+0x4c>)
 80a1ea0:	bf0c      	ite	eq
 80a1ea2:	2201      	moveq	r2, #1
 80a1ea4:	2200      	movne	r2, #0
 80a1ea6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1ea8:	d002      	beq.n	80a1eb0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1eaa:	f7ff ffbf 	bl	80a1e2c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1eae:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1eb0:	f7ff f954 	bl	80a115c <HAL_RNG_GetRandomNumber>
 80a1eb4:	4604      	mov	r4, r0
    srand(seed);
 80a1eb6:	f000 fa57 	bl	80a2368 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1eba:	4b0a      	ldr	r3, [pc, #40]	; (80a1ee4 <module_user_init_hook+0x50>)
 80a1ebc:	b113      	cbz	r3, 80a1ec4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1ebe:	4620      	mov	r0, r4
 80a1ec0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1ec4:	2100      	movs	r1, #0
 80a1ec6:	4807      	ldr	r0, [pc, #28]	; (80a1ee4 <module_user_init_hook+0x50>)
 80a1ec8:	f7ff face 	bl	80a1468 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1ed0:	2100      	movs	r1, #0
 80a1ed2:	4805      	ldr	r0, [pc, #20]	; (80a1ee8 <module_user_init_hook+0x54>)
 80a1ed4:	f7ff baac 	b.w	80a1430 <system_ctrl_set_app_request_handler>
 80a1ed8:	40024000 	.word	0x40024000
 80a1edc:	9a271c1e 	.word	0x9a271c1e
 80a1ee0:	2000054c 	.word	0x2000054c
 80a1ee4:	00000000 	.word	0x00000000
 80a1ee8:	080a1e5d 	.word	0x080a1e5d

080a1eec <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1eec:	b510      	push	{r4, lr}
 80a1eee:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1ef0:	480f      	ldr	r0, [pc, #60]	; (80a1f30 <pinAvailable+0x44>)
 80a1ef2:	f7ff fd93 	bl	80a1a1c <_ZN8SPIClass9isEnabledEv>
 80a1ef6:	b128      	cbz	r0, 80a1f04 <pinAvailable+0x18>
 80a1ef8:	f1a4 030d 	sub.w	r3, r4, #13
 80a1efc:	2b02      	cmp	r3, #2
 80a1efe:	d801      	bhi.n	80a1f04 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a1f00:	2000      	movs	r0, #0
 80a1f02:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1f04:	f000 f864 	bl	80a1fd0 <_Z19__fetch_global_Wirev>
 80a1f08:	f7ff fb82 	bl	80a1610 <_ZN7TwoWire9isEnabledEv>
 80a1f0c:	b108      	cbz	r0, 80a1f12 <pinAvailable+0x26>
 80a1f0e:	2c01      	cmp	r4, #1
 80a1f10:	d9f6      	bls.n	80a1f00 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1f12:	f7ff fdf9 	bl	80a1b08 <_Z22__fetch_global_Serial1v>
 80a1f16:	f7ff fdf3 	bl	80a1b00 <_ZN11USARTSerial9isEnabledEv>
 80a1f1a:	b118      	cbz	r0, 80a1f24 <pinAvailable+0x38>
 80a1f1c:	f1a4 0312 	sub.w	r3, r4, #18
 80a1f20:	2b01      	cmp	r3, #1
 80a1f22:	d9ed      	bls.n	80a1f00 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1f24:	2c17      	cmp	r4, #23
 80a1f26:	bf8c      	ite	hi
 80a1f28:	2000      	movhi	r0, #0
 80a1f2a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1f2c:	bd10      	pop	{r4, pc}
 80a1f2e:	bf00      	nop
 80a1f30:	20000584 	.word	0x20000584

080a1f34 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1f34:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1f36:	b538      	push	{r3, r4, r5, lr}
 80a1f38:	4604      	mov	r4, r0
 80a1f3a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1f3c:	d80a      	bhi.n	80a1f54 <pinMode+0x20>
 80a1f3e:	29ff      	cmp	r1, #255	; 0xff
 80a1f40:	d008      	beq.n	80a1f54 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1f42:	f7ff ffd3 	bl	80a1eec <pinAvailable>
 80a1f46:	b128      	cbz	r0, 80a1f54 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1f48:	4629      	mov	r1, r5
 80a1f4a:	4620      	mov	r0, r4
}
 80a1f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1f50:	f7ff b924 	b.w	80a119c <HAL_Pin_Mode>
 80a1f54:	bd38      	pop	{r3, r4, r5, pc}

080a1f56 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1f56:	b538      	push	{r3, r4, r5, lr}
 80a1f58:	4604      	mov	r4, r0
 80a1f5a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1f5c:	f7ff f926 	bl	80a11ac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1f60:	28ff      	cmp	r0, #255	; 0xff
 80a1f62:	d010      	beq.n	80a1f86 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1f64:	2806      	cmp	r0, #6
 80a1f66:	d804      	bhi.n	80a1f72 <digitalWrite+0x1c>
 80a1f68:	234d      	movs	r3, #77	; 0x4d
 80a1f6a:	fa23 f000 	lsr.w	r0, r3, r0
 80a1f6e:	07c3      	lsls	r3, r0, #31
 80a1f70:	d409      	bmi.n	80a1f86 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1f72:	4620      	mov	r0, r4
 80a1f74:	f7ff ffba 	bl	80a1eec <pinAvailable>
 80a1f78:	b128      	cbz	r0, 80a1f86 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1f7a:	4629      	mov	r1, r5
 80a1f7c:	4620      	mov	r0, r4
}
 80a1f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1f82:	f7ff b91b 	b.w	80a11bc <HAL_GPIO_Write>
 80a1f86:	bd38      	pop	{r3, r4, r5, pc}

080a1f88 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 80a1f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1f8c:	4690      	mov	r8, r2
 80a1f8e:	461e      	mov	r6, r3
 80a1f90:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
 80a1f92:	460d      	mov	r5, r1
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 80a1f94:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
 80a1f96:	f1b8 0f00 	cmp.w	r8, #0
 80a1f9a:	d104      	bne.n	80a1fa6 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
 80a1f9c:	f1c4 0107 	rsb	r1, r4, #7
 80a1fa0:	fa46 f101 	asr.w	r1, r6, r1
 80a1fa4:	e001      	b.n	80a1faa <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 80a1fa6:	fa46 f104 	asr.w	r1, r6, r4
 80a1faa:	f001 0101 	and.w	r1, r1, #1
 80a1fae:	4638      	mov	r0, r7
 80a1fb0:	f7ff ffd1 	bl	80a1f56 <digitalWrite>

    digitalWrite(clockPin, HIGH);
 80a1fb4:	2101      	movs	r1, #1
 80a1fb6:	4628      	mov	r0, r5
 80a1fb8:	f7ff ffcd 	bl	80a1f56 <digitalWrite>
    digitalWrite(clockPin, LOW);
 80a1fbc:	2100      	movs	r1, #0
 80a1fbe:	4628      	mov	r0, r5
 80a1fc0:	f7ff ffc9 	bl	80a1f56 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
 80a1fc4:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80a1fc8:	d2e5      	bcs.n	80a1f96 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
 80a1fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a1fd0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1fd0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a1fd2:	4d0b      	ldr	r5, [pc, #44]	; (80a2000 <_Z19__fetch_global_Wirev+0x30>)
 80a1fd4:	6829      	ldr	r1, [r5, #0]
 80a1fd6:	f011 0401 	ands.w	r4, r1, #1
 80a1fda:	d10f      	bne.n	80a1ffc <_Z19__fetch_global_Wirev+0x2c>
 80a1fdc:	4628      	mov	r0, r5
 80a1fde:	f7fe f86b 	bl	80a00b8 <__cxa_guard_acquire>
 80a1fe2:	b158      	cbz	r0, 80a1ffc <_Z19__fetch_global_Wirev+0x2c>
 80a1fe4:	4621      	mov	r1, r4
 80a1fe6:	4807      	ldr	r0, [pc, #28]	; (80a2004 <_Z19__fetch_global_Wirev+0x34>)
 80a1fe8:	f7ff fade 	bl	80a15a8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1fec:	4628      	mov	r0, r5
 80a1fee:	f7fe f868 	bl	80a00c2 <__cxa_guard_release>
 80a1ff2:	4a05      	ldr	r2, [pc, #20]	; (80a2008 <_Z19__fetch_global_Wirev+0x38>)
 80a1ff4:	4905      	ldr	r1, [pc, #20]	; (80a200c <_Z19__fetch_global_Wirev+0x3c>)
 80a1ff6:	4803      	ldr	r0, [pc, #12]	; (80a2004 <_Z19__fetch_global_Wirev+0x34>)
 80a1ff8:	f000 f844 	bl	80a2084 <__aeabi_atexit>
	return wire;
}
 80a1ffc:	4801      	ldr	r0, [pc, #4]	; (80a2004 <_Z19__fetch_global_Wirev+0x34>)
 80a1ffe:	bd38      	pop	{r3, r4, r5, pc}
 80a2000:	20000554 	.word	0x20000554
 80a2004:	20000558 	.word	0x20000558
 80a2008:	20000480 	.word	0x20000480
 80a200c:	080a1551 	.word	0x080a1551

080a2010 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2010:	b513      	push	{r0, r1, r4, lr}
 80a2012:	4c08      	ldr	r4, [pc, #32]	; (80a2034 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2014:	2300      	movs	r3, #0
 80a2016:	461a      	mov	r2, r3
 80a2018:	4619      	mov	r1, r3
 80a201a:	9300      	str	r3, [sp, #0]
 80a201c:	4620      	mov	r0, r4
 80a201e:	f7ff fb53 	bl	80a16c8 <_ZN9IPAddressC1Ehhhh>
 80a2022:	4620      	mov	r0, r4
 80a2024:	4a04      	ldr	r2, [pc, #16]	; (80a2038 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2026:	4905      	ldr	r1, [pc, #20]	; (80a203c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2028:	b002      	add	sp, #8
 80a202a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a202e:	f000 b829 	b.w	80a2084 <__aeabi_atexit>
 80a2032:	bf00      	nop
 80a2034:	2000056c 	.word	0x2000056c
 80a2038:	20000480 	.word	0x20000480
 80a203c:	080a1619 	.word	0x080a1619

080a2040 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2040:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2042:	4c0c      	ldr	r4, [pc, #48]	; (80a2074 <_GLOBAL__sub_I_SPI+0x34>)
 80a2044:	4e0c      	ldr	r6, [pc, #48]	; (80a2078 <_GLOBAL__sub_I_SPI+0x38>)
 80a2046:	4d0d      	ldr	r5, [pc, #52]	; (80a207c <_GLOBAL__sub_I_SPI+0x3c>)
 80a2048:	2100      	movs	r1, #0
 80a204a:	4620      	mov	r0, r4
 80a204c:	f7ff fc66 	bl	80a191c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2050:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2052:	4c0b      	ldr	r4, [pc, #44]	; (80a2080 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2054:	4632      	mov	r2, r6
 80a2056:	4629      	mov	r1, r5
 80a2058:	f000 f814 	bl	80a2084 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a205c:	2101      	movs	r1, #1
 80a205e:	4620      	mov	r0, r4
 80a2060:	f7ff fc5c 	bl	80a191c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2064:	4632      	mov	r2, r6
 80a2066:	4629      	mov	r1, r5
 80a2068:	4620      	mov	r0, r4
 80a206a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a206e:	f000 b809 	b.w	80a2084 <__aeabi_atexit>
 80a2072:	bf00      	nop
 80a2074:	20000584 	.word	0x20000584
 80a2078:	20000480 	.word	0x20000480
 80a207c:	080a190d 	.word	0x080a190d
 80a2080:	20000594 	.word	0x20000594

080a2084 <__aeabi_atexit>:
 80a2084:	460b      	mov	r3, r1
 80a2086:	4601      	mov	r1, r0
 80a2088:	4618      	mov	r0, r3
 80a208a:	f000 b94b 	b.w	80a2324 <__cxa_atexit>

080a208e <_ZdlPvj>:
 80a208e:	f7fe b806 	b.w	80a009e <_ZdlPv>
	...

080a2094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2094:	4b24      	ldr	r3, [pc, #144]	; (80a2128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2096:	681a      	ldr	r2, [r3, #0]
 80a2098:	07d0      	lsls	r0, r2, #31
 80a209a:	bf5c      	itt	pl
 80a209c:	2201      	movpl	r2, #1
 80a209e:	601a      	strpl	r2, [r3, #0]
 80a20a0:	4b22      	ldr	r3, [pc, #136]	; (80a212c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a20a2:	681a      	ldr	r2, [r3, #0]
 80a20a4:	07d1      	lsls	r1, r2, #31
 80a20a6:	bf5c      	itt	pl
 80a20a8:	2201      	movpl	r2, #1
 80a20aa:	601a      	strpl	r2, [r3, #0]
 80a20ac:	4b20      	ldr	r3, [pc, #128]	; (80a2130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a20ae:	681a      	ldr	r2, [r3, #0]
 80a20b0:	07d2      	lsls	r2, r2, #31
 80a20b2:	bf5c      	itt	pl
 80a20b4:	2201      	movpl	r2, #1
 80a20b6:	601a      	strpl	r2, [r3, #0]
 80a20b8:	4b1e      	ldr	r3, [pc, #120]	; (80a2134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a20ba:	681a      	ldr	r2, [r3, #0]
 80a20bc:	07d0      	lsls	r0, r2, #31
 80a20be:	bf5c      	itt	pl
 80a20c0:	2201      	movpl	r2, #1
 80a20c2:	601a      	strpl	r2, [r3, #0]
 80a20c4:	4b1c      	ldr	r3, [pc, #112]	; (80a2138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a20c6:	681a      	ldr	r2, [r3, #0]
 80a20c8:	07d1      	lsls	r1, r2, #31
 80a20ca:	bf5c      	itt	pl
 80a20cc:	2201      	movpl	r2, #1
 80a20ce:	601a      	strpl	r2, [r3, #0]
 80a20d0:	4b1a      	ldr	r3, [pc, #104]	; (80a213c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a20d2:	681a      	ldr	r2, [r3, #0]
 80a20d4:	07d2      	lsls	r2, r2, #31
 80a20d6:	bf5c      	itt	pl
 80a20d8:	2201      	movpl	r2, #1
 80a20da:	601a      	strpl	r2, [r3, #0]
 80a20dc:	4b18      	ldr	r3, [pc, #96]	; (80a2140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a20de:	681a      	ldr	r2, [r3, #0]
 80a20e0:	07d0      	lsls	r0, r2, #31
 80a20e2:	bf5c      	itt	pl
 80a20e4:	2201      	movpl	r2, #1
 80a20e6:	601a      	strpl	r2, [r3, #0]
 80a20e8:	4b16      	ldr	r3, [pc, #88]	; (80a2144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a20ea:	681a      	ldr	r2, [r3, #0]
 80a20ec:	07d1      	lsls	r1, r2, #31
 80a20ee:	bf5c      	itt	pl
 80a20f0:	2201      	movpl	r2, #1
 80a20f2:	601a      	strpl	r2, [r3, #0]
 80a20f4:	4b14      	ldr	r3, [pc, #80]	; (80a2148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a20f6:	681a      	ldr	r2, [r3, #0]
 80a20f8:	07d2      	lsls	r2, r2, #31
 80a20fa:	bf5c      	itt	pl
 80a20fc:	2201      	movpl	r2, #1
 80a20fe:	601a      	strpl	r2, [r3, #0]
 80a2100:	4b12      	ldr	r3, [pc, #72]	; (80a214c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2102:	681a      	ldr	r2, [r3, #0]
 80a2104:	07d0      	lsls	r0, r2, #31
 80a2106:	bf5c      	itt	pl
 80a2108:	2201      	movpl	r2, #1
 80a210a:	601a      	strpl	r2, [r3, #0]
 80a210c:	4b10      	ldr	r3, [pc, #64]	; (80a2150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a210e:	681a      	ldr	r2, [r3, #0]
 80a2110:	07d1      	lsls	r1, r2, #31
 80a2112:	bf5c      	itt	pl
 80a2114:	2201      	movpl	r2, #1
 80a2116:	601a      	strpl	r2, [r3, #0]
 80a2118:	4b0e      	ldr	r3, [pc, #56]	; (80a2154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a211a:	681a      	ldr	r2, [r3, #0]
 80a211c:	07d2      	lsls	r2, r2, #31
 80a211e:	bf5c      	itt	pl
 80a2120:	2201      	movpl	r2, #1
 80a2122:	601a      	strpl	r2, [r3, #0]
 80a2124:	4770      	bx	lr
 80a2126:	bf00      	nop
 80a2128:	200005d0 	.word	0x200005d0
 80a212c:	200005cc 	.word	0x200005cc
 80a2130:	200005c8 	.word	0x200005c8
 80a2134:	200005c4 	.word	0x200005c4
 80a2138:	200005c0 	.word	0x200005c0
 80a213c:	200005bc 	.word	0x200005bc
 80a2140:	200005b8 	.word	0x200005b8
 80a2144:	200005b4 	.word	0x200005b4
 80a2148:	200005b0 	.word	0x200005b0
 80a214c:	200005ac 	.word	0x200005ac
 80a2150:	200005a8 	.word	0x200005a8
 80a2154:	200005a4 	.word	0x200005a4

080a2158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2158:	4b18      	ldr	r3, [pc, #96]	; (80a21bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a215a:	681a      	ldr	r2, [r3, #0]
 80a215c:	07d1      	lsls	r1, r2, #31
 80a215e:	bf5c      	itt	pl
 80a2160:	2201      	movpl	r2, #1
 80a2162:	601a      	strpl	r2, [r3, #0]
 80a2164:	4b16      	ldr	r3, [pc, #88]	; (80a21c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2166:	681a      	ldr	r2, [r3, #0]
 80a2168:	07d2      	lsls	r2, r2, #31
 80a216a:	bf5c      	itt	pl
 80a216c:	2201      	movpl	r2, #1
 80a216e:	601a      	strpl	r2, [r3, #0]
 80a2170:	4b14      	ldr	r3, [pc, #80]	; (80a21c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2172:	681a      	ldr	r2, [r3, #0]
 80a2174:	07d0      	lsls	r0, r2, #31
 80a2176:	bf5c      	itt	pl
 80a2178:	2201      	movpl	r2, #1
 80a217a:	601a      	strpl	r2, [r3, #0]
 80a217c:	4b12      	ldr	r3, [pc, #72]	; (80a21c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a217e:	681a      	ldr	r2, [r3, #0]
 80a2180:	07d1      	lsls	r1, r2, #31
 80a2182:	bf5c      	itt	pl
 80a2184:	2201      	movpl	r2, #1
 80a2186:	601a      	strpl	r2, [r3, #0]
 80a2188:	4b10      	ldr	r3, [pc, #64]	; (80a21cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a218a:	681a      	ldr	r2, [r3, #0]
 80a218c:	07d2      	lsls	r2, r2, #31
 80a218e:	bf5c      	itt	pl
 80a2190:	2201      	movpl	r2, #1
 80a2192:	601a      	strpl	r2, [r3, #0]
 80a2194:	4b0e      	ldr	r3, [pc, #56]	; (80a21d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2196:	681a      	ldr	r2, [r3, #0]
 80a2198:	07d0      	lsls	r0, r2, #31
 80a219a:	bf5c      	itt	pl
 80a219c:	2201      	movpl	r2, #1
 80a219e:	601a      	strpl	r2, [r3, #0]
 80a21a0:	4b0c      	ldr	r3, [pc, #48]	; (80a21d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a21a2:	681a      	ldr	r2, [r3, #0]
 80a21a4:	07d1      	lsls	r1, r2, #31
 80a21a6:	bf5c      	itt	pl
 80a21a8:	2201      	movpl	r2, #1
 80a21aa:	601a      	strpl	r2, [r3, #0]
 80a21ac:	4b0a      	ldr	r3, [pc, #40]	; (80a21d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a21ae:	681a      	ldr	r2, [r3, #0]
 80a21b0:	07d2      	lsls	r2, r2, #31
 80a21b2:	bf5c      	itt	pl
 80a21b4:	2201      	movpl	r2, #1
 80a21b6:	601a      	strpl	r2, [r3, #0]
 80a21b8:	4770      	bx	lr
 80a21ba:	bf00      	nop
 80a21bc:	200005f0 	.word	0x200005f0
 80a21c0:	200005ec 	.word	0x200005ec
 80a21c4:	200005e8 	.word	0x200005e8
 80a21c8:	200005e4 	.word	0x200005e4
 80a21cc:	200005e0 	.word	0x200005e0
 80a21d0:	200005dc 	.word	0x200005dc
 80a21d4:	200005d8 	.word	0x200005d8
 80a21d8:	200005d4 	.word	0x200005d4

080a21dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a21dc:	4b18      	ldr	r3, [pc, #96]	; (80a2240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a21de:	681a      	ldr	r2, [r3, #0]
 80a21e0:	07d1      	lsls	r1, r2, #31
 80a21e2:	bf5c      	itt	pl
 80a21e4:	2201      	movpl	r2, #1
 80a21e6:	601a      	strpl	r2, [r3, #0]
 80a21e8:	4b16      	ldr	r3, [pc, #88]	; (80a2244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a21ea:	681a      	ldr	r2, [r3, #0]
 80a21ec:	07d2      	lsls	r2, r2, #31
 80a21ee:	bf5c      	itt	pl
 80a21f0:	2201      	movpl	r2, #1
 80a21f2:	601a      	strpl	r2, [r3, #0]
 80a21f4:	4b14      	ldr	r3, [pc, #80]	; (80a2248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a21f6:	681a      	ldr	r2, [r3, #0]
 80a21f8:	07d0      	lsls	r0, r2, #31
 80a21fa:	bf5c      	itt	pl
 80a21fc:	2201      	movpl	r2, #1
 80a21fe:	601a      	strpl	r2, [r3, #0]
 80a2200:	4b12      	ldr	r3, [pc, #72]	; (80a224c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2202:	681a      	ldr	r2, [r3, #0]
 80a2204:	07d1      	lsls	r1, r2, #31
 80a2206:	bf5c      	itt	pl
 80a2208:	2201      	movpl	r2, #1
 80a220a:	601a      	strpl	r2, [r3, #0]
 80a220c:	4b10      	ldr	r3, [pc, #64]	; (80a2250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a220e:	681a      	ldr	r2, [r3, #0]
 80a2210:	07d2      	lsls	r2, r2, #31
 80a2212:	bf5c      	itt	pl
 80a2214:	2201      	movpl	r2, #1
 80a2216:	601a      	strpl	r2, [r3, #0]
 80a2218:	4b0e      	ldr	r3, [pc, #56]	; (80a2254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a221a:	681a      	ldr	r2, [r3, #0]
 80a221c:	07d0      	lsls	r0, r2, #31
 80a221e:	bf5c      	itt	pl
 80a2220:	2201      	movpl	r2, #1
 80a2222:	601a      	strpl	r2, [r3, #0]
 80a2224:	4b0c      	ldr	r3, [pc, #48]	; (80a2258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2226:	681a      	ldr	r2, [r3, #0]
 80a2228:	07d1      	lsls	r1, r2, #31
 80a222a:	bf5c      	itt	pl
 80a222c:	2201      	movpl	r2, #1
 80a222e:	601a      	strpl	r2, [r3, #0]
 80a2230:	4b0a      	ldr	r3, [pc, #40]	; (80a225c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2232:	681a      	ldr	r2, [r3, #0]
 80a2234:	07d2      	lsls	r2, r2, #31
 80a2236:	bf5c      	itt	pl
 80a2238:	2201      	movpl	r2, #1
 80a223a:	601a      	strpl	r2, [r3, #0]
 80a223c:	4770      	bx	lr
 80a223e:	bf00      	nop
 80a2240:	20000610 	.word	0x20000610
 80a2244:	2000060c 	.word	0x2000060c
 80a2248:	20000608 	.word	0x20000608
 80a224c:	20000604 	.word	0x20000604
 80a2250:	20000600 	.word	0x20000600
 80a2254:	200005fc 	.word	0x200005fc
 80a2258:	200005f8 	.word	0x200005f8
 80a225c:	200005f4 	.word	0x200005f4

080a2260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2260:	4b24      	ldr	r3, [pc, #144]	; (80a22f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2262:	681a      	ldr	r2, [r3, #0]
 80a2264:	07d0      	lsls	r0, r2, #31
 80a2266:	bf5c      	itt	pl
 80a2268:	2201      	movpl	r2, #1
 80a226a:	601a      	strpl	r2, [r3, #0]
 80a226c:	4b22      	ldr	r3, [pc, #136]	; (80a22f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a226e:	681a      	ldr	r2, [r3, #0]
 80a2270:	07d1      	lsls	r1, r2, #31
 80a2272:	bf5c      	itt	pl
 80a2274:	2201      	movpl	r2, #1
 80a2276:	601a      	strpl	r2, [r3, #0]
 80a2278:	4b20      	ldr	r3, [pc, #128]	; (80a22fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a227a:	681a      	ldr	r2, [r3, #0]
 80a227c:	07d2      	lsls	r2, r2, #31
 80a227e:	bf5c      	itt	pl
 80a2280:	2201      	movpl	r2, #1
 80a2282:	601a      	strpl	r2, [r3, #0]
 80a2284:	4b1e      	ldr	r3, [pc, #120]	; (80a2300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2286:	681a      	ldr	r2, [r3, #0]
 80a2288:	07d0      	lsls	r0, r2, #31
 80a228a:	bf5c      	itt	pl
 80a228c:	2201      	movpl	r2, #1
 80a228e:	601a      	strpl	r2, [r3, #0]
 80a2290:	4b1c      	ldr	r3, [pc, #112]	; (80a2304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2292:	681a      	ldr	r2, [r3, #0]
 80a2294:	07d1      	lsls	r1, r2, #31
 80a2296:	bf5c      	itt	pl
 80a2298:	2201      	movpl	r2, #1
 80a229a:	601a      	strpl	r2, [r3, #0]
 80a229c:	4b1a      	ldr	r3, [pc, #104]	; (80a2308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a229e:	681a      	ldr	r2, [r3, #0]
 80a22a0:	07d2      	lsls	r2, r2, #31
 80a22a2:	bf5c      	itt	pl
 80a22a4:	2201      	movpl	r2, #1
 80a22a6:	601a      	strpl	r2, [r3, #0]
 80a22a8:	4b18      	ldr	r3, [pc, #96]	; (80a230c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a22aa:	681a      	ldr	r2, [r3, #0]
 80a22ac:	07d0      	lsls	r0, r2, #31
 80a22ae:	bf5c      	itt	pl
 80a22b0:	2201      	movpl	r2, #1
 80a22b2:	601a      	strpl	r2, [r3, #0]
 80a22b4:	4b16      	ldr	r3, [pc, #88]	; (80a2310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a22b6:	681a      	ldr	r2, [r3, #0]
 80a22b8:	07d1      	lsls	r1, r2, #31
 80a22ba:	bf5c      	itt	pl
 80a22bc:	2201      	movpl	r2, #1
 80a22be:	601a      	strpl	r2, [r3, #0]
 80a22c0:	4b14      	ldr	r3, [pc, #80]	; (80a2314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a22c2:	681a      	ldr	r2, [r3, #0]
 80a22c4:	07d2      	lsls	r2, r2, #31
 80a22c6:	bf5c      	itt	pl
 80a22c8:	2201      	movpl	r2, #1
 80a22ca:	601a      	strpl	r2, [r3, #0]
 80a22cc:	4b12      	ldr	r3, [pc, #72]	; (80a2318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a22ce:	681a      	ldr	r2, [r3, #0]
 80a22d0:	07d0      	lsls	r0, r2, #31
 80a22d2:	bf5c      	itt	pl
 80a22d4:	2201      	movpl	r2, #1
 80a22d6:	601a      	strpl	r2, [r3, #0]
 80a22d8:	4b10      	ldr	r3, [pc, #64]	; (80a231c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a22da:	681a      	ldr	r2, [r3, #0]
 80a22dc:	07d1      	lsls	r1, r2, #31
 80a22de:	bf5c      	itt	pl
 80a22e0:	2201      	movpl	r2, #1
 80a22e2:	601a      	strpl	r2, [r3, #0]
 80a22e4:	4b0e      	ldr	r3, [pc, #56]	; (80a2320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a22e6:	681a      	ldr	r2, [r3, #0]
 80a22e8:	07d2      	lsls	r2, r2, #31
 80a22ea:	bf5c      	itt	pl
 80a22ec:	2201      	movpl	r2, #1
 80a22ee:	601a      	strpl	r2, [r3, #0]
 80a22f0:	4770      	bx	lr
 80a22f2:	bf00      	nop
 80a22f4:	20000640 	.word	0x20000640
 80a22f8:	2000063c 	.word	0x2000063c
 80a22fc:	20000638 	.word	0x20000638
 80a2300:	20000634 	.word	0x20000634
 80a2304:	20000630 	.word	0x20000630
 80a2308:	2000062c 	.word	0x2000062c
 80a230c:	20000628 	.word	0x20000628
 80a2310:	20000624 	.word	0x20000624
 80a2314:	20000620 	.word	0x20000620
 80a2318:	2000061c 	.word	0x2000061c
 80a231c:	20000618 	.word	0x20000618
 80a2320:	20000614 	.word	0x20000614

080a2324 <__cxa_atexit>:
 80a2324:	b510      	push	{r4, lr}
 80a2326:	4c05      	ldr	r4, [pc, #20]	; (80a233c <__cxa_atexit+0x18>)
 80a2328:	4613      	mov	r3, r2
 80a232a:	b12c      	cbz	r4, 80a2338 <__cxa_atexit+0x14>
 80a232c:	460a      	mov	r2, r1
 80a232e:	4601      	mov	r1, r0
 80a2330:	2002      	movs	r0, #2
 80a2332:	f3af 8000 	nop.w
 80a2336:	bd10      	pop	{r4, pc}
 80a2338:	4620      	mov	r0, r4
 80a233a:	bd10      	pop	{r4, pc}
 80a233c:	00000000 	.word	0x00000000

080a2340 <memcpy>:
 80a2340:	b510      	push	{r4, lr}
 80a2342:	1e43      	subs	r3, r0, #1
 80a2344:	440a      	add	r2, r1
 80a2346:	4291      	cmp	r1, r2
 80a2348:	d004      	beq.n	80a2354 <memcpy+0x14>
 80a234a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a234e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2352:	e7f8      	b.n	80a2346 <memcpy+0x6>
 80a2354:	bd10      	pop	{r4, pc}

080a2356 <memset>:
 80a2356:	4603      	mov	r3, r0
 80a2358:	4402      	add	r2, r0
 80a235a:	4293      	cmp	r3, r2
 80a235c:	d002      	beq.n	80a2364 <memset+0xe>
 80a235e:	f803 1b01 	strb.w	r1, [r3], #1
 80a2362:	e7fa      	b.n	80a235a <memset+0x4>
 80a2364:	4770      	bx	lr
	...

080a2368 <srand>:
 80a2368:	b538      	push	{r3, r4, r5, lr}
 80a236a:	4b12      	ldr	r3, [pc, #72]	; (80a23b4 <srand+0x4c>)
 80a236c:	4605      	mov	r5, r0
 80a236e:	681c      	ldr	r4, [r3, #0]
 80a2370:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2372:	b9d3      	cbnz	r3, 80a23aa <srand+0x42>
 80a2374:	2018      	movs	r0, #24
 80a2376:	f7ff f8cf 	bl	80a1518 <malloc>
 80a237a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a237e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2380:	8003      	strh	r3, [r0, #0]
 80a2382:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2386:	8043      	strh	r3, [r0, #2]
 80a2388:	f241 2334 	movw	r3, #4660	; 0x1234
 80a238c:	8083      	strh	r3, [r0, #4]
 80a238e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2392:	80c3      	strh	r3, [r0, #6]
 80a2394:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2398:	8103      	strh	r3, [r0, #8]
 80a239a:	2305      	movs	r3, #5
 80a239c:	8143      	strh	r3, [r0, #10]
 80a239e:	230b      	movs	r3, #11
 80a23a0:	8183      	strh	r3, [r0, #12]
 80a23a2:	2201      	movs	r2, #1
 80a23a4:	2300      	movs	r3, #0
 80a23a6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a23aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a23ac:	2200      	movs	r2, #0
 80a23ae:	611d      	str	r5, [r3, #16]
 80a23b0:	615a      	str	r2, [r3, #20]
 80a23b2:	bd38      	pop	{r3, r4, r5, pc}
 80a23b4:	2000047c 	.word	0x2000047c

080a23b8 <strlen>:
 80a23b8:	4603      	mov	r3, r0
 80a23ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a23be:	2a00      	cmp	r2, #0
 80a23c0:	d1fb      	bne.n	80a23ba <strlen+0x2>
 80a23c2:	1a18      	subs	r0, r3, r0
 80a23c4:	3801      	subs	r0, #1
 80a23c6:	4770      	bx	lr

080a23c8 <dynalib_user>:
 80a23c8:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a23d8:	0000 0000 504d 3152 3132 6e20 746f 6620     ....MPR121 not f
 80a23e8:	756f 646e 202c 6863 6365 206b 6977 6972     ound, check wiri
 80a23f8:	676e 003f 504d 3152 3132 6620 756f 646e     ng?.MPR121 found
 80a2408:	0021 7845 6574 6e72 6c61 4820 7261 7764     !.External Hardw
 80a2418:	7261 2065 6554 7473 2a00 2a2a 2000 202d     are Test.***. - 
 80a2428:	2000 6f74 6375 6568 0064 7220 6c65 6165     . touched. relea
 80a2438:	6573 0064                                   sed.

080a243c <_ZTV12Adafruit_GFX>:
	...
 80a244c:	0985 080a 17bd 080a 00a5 080a 0681 080a     ................
 80a245c:	07a1 080a 07bd 080a 0741 080a 07d7 080a     ........A.......
 80a246c:	080f 080a 082b 080a                         ....+...

080a2474 <_ZL4font>:
 80a2474:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 80a2484:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 80a2494:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 80a24a4:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 80a24b4:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 80a24c4:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 80a24d4:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 80a24e4:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 80a24f4:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 80a2504:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 80a2514:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 80a2524:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 80a2534:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 80a2544:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 80a2554:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 80a2564:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 80a2574:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 80a2584:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 80a2594:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 80a25a4:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 80a25b4:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 80a25c4:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 80a25d4:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 80a25e4:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 80a25f4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 80a2604:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 80a2614:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 80a2624:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 80a2634:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 80a2644:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 80a2654:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 80a2664:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 80a2674:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 80a2684:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 80a2694:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 80a26a4:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 80a26b4:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 80a26c4:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 80a26d4:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 80a26e4:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 80a26f4:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 80a2704:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
 80a2714:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 80a2724:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 80a2734:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
 80a2744:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 80a2754:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
 80a2764:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
 80a2774:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
 80a2784:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 80a2794:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 80a27a4:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 80a27b4:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 80a27c4:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 80a27d4:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 80a27e4:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
 80a27f4:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
 80a2804:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
 80a2814:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
 80a2824:	141f 1414 001f 1010 f010 0000 0000 101f     ................
 80a2834:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
 80a2844:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
 80a2854:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
 80a2864:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
 80a2874:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
 80a2884:	1414 f414 1014 f010 f010 0000 101f 001f     ................
 80a2894:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
 80a28a4:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
 80a28b4:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
 80a28c4:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
 80a28d4:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
 80a28e4:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
 80a28f4:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
 80a2904:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
 80a2914:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
 80a2924:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
 80a2934:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
 80a2944:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
 80a2954:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
 80a2964:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

080a2970 <_ZTV16Adafruit_SSD1306>:
	...
 80a2978:	00c9 080a 03f5 080a 0985 080a 17bd 080a     ................
 80a2988:	0d25 080a 0681 080a 0b8d 080a 0a19 080a     %...............
 80a2998:	0741 080a 07d7 080a 080f 080a 082b 080a     A...........+...

080a29a8 <_ZTV7TwoWire>:
	...
 80a29b0:	1551 080a 159b 080a 1573 080a 1553 080a     Q.......s...S...
 80a29c0:	157b 080a 1583 080a 158b 080a 1593 080a     {...............

080a29d0 <_ZTV9IPAddress>:
	...
 80a29d8:	1629 080a 1619 080a 161b 080a 6162 6475     )...........baud
 80a29e8:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a29f8:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a2a08:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a2a18:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a2a28:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a2a38:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a2a48:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a2a58:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a2a68:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a2a78:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a2a88:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a2a98:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a2aa8:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a2ab8:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a2ac8 <_ZTVN5spark12NetworkClassE>:
	...
 80a2ad0:	16f1 080a 16fb 080a 1705 080a 170f 080a     ................
 80a2ae0:	1719 080a 1725 080a 1731 080a 173d 080a     ....%...1...=...
 80a2af0:	1745 080a 174f 080a 1759 080a               E...O...Y...

080a2afc <_ZTV8SPIClass>:
	...
 80a2b04:	190d 080a 190f 080a                         ........

080a2b0c <_ZL14clock_divisors>:
 80a2b0c:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
 80a2b1c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a2b2c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2b3c:	0000 0000                                   ....

080a2b40 <_ZTV11USARTSerial>:
	...
 80a2b48:	1a51 080a 1aa1 080a 1aaf 080a 17bd 080a     Q...............
 80a2b58:	1a65 080a 1a87 080a 1a73 080a 1a9b 080a     e.......s.......
 80a2b68:	1a53 080a 1a57 080a                         S...W...

080a2b70 <_ZTV9USBSerial>:
	...
 80a2b78:	1b8d 080a 1bdd 080a 1beb 080a 17bd 080a     ................
 80a2b88:	1bc9 080a 1b8f 080a 1ba5 080a 1bd7 080a     ................
 80a2b98:	1bbb 080a 1b89 080a                         ........

080a2ba0 <_ZTVN5spark9WiFiClassE>:
	...
 80a2ba8:	1d97 080a 1d8d 080a 1d83 080a 1cf5 080a     ................
 80a2bb8:	1d77 080a 1d6b 080a 1d5f 080a 1d57 080a     w...k..._...W...
 80a2bc8:	1d4d 080a 1d43 080a 1cff 080a               M...C.......

080a2bd4 <__sf_fake_stdin>:
	...

080a2bf4 <__sf_fake_stdout>:
	...

080a2c14 <__sf_fake_stderr>:
	...
 80a2c34:	0043                                        C.

080a2c36 <link_const_variable_data_end>:
	...

080a2c38 <link_constructors_location>:
 80a2c38:	080a0405 	.word	0x080a0405
 80a2c3c:	080a067d 	.word	0x080a067d
 80a2c40:	080a0a15 	.word	0x080a0a15
 80a2c44:	080a1115 	.word	0x080a1115
 80a2c48:	080a1119 	.word	0x080a1119
 80a2c4c:	080a111d 	.word	0x080a111d
 80a2c50:	080a1121 	.word	0x080a1121
 80a2c54:	080a1139 	.word	0x080a1139
 80a2c58:	080a16e1 	.word	0x080a16e1
 80a2c5c:	080a17a9 	.word	0x080a17a9
 80a2c60:	080a18f1 	.word	0x080a18f1
 80a2c64:	080a1a25 	.word	0x080a1a25
 80a2c68:	080a1a3d 	.word	0x080a1a3d
 80a2c6c:	080a1da1 	.word	0x080a1da1
 80a2c70:	080a2011 	.word	0x080a2011
 80a2c74:	080a2041 	.word	0x080a2041
 80a2c78:	080a2095 	.word	0x080a2095
 80a2c7c:	080a2159 	.word	0x080a2159
 80a2c80:	080a21dd 	.word	0x080a21dd
 80a2c84:	080a2261 	.word	0x080a2261

080a2c88 <link_constructors_end>:
	...
