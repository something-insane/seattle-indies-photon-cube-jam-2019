
c:/Users/me/Dropbox/2019-games/particle/seattle-indies-photon-cube-jam-2019/cube-debug/target/1.4.0/photon/cube-debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003130  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3150  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080a3154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005b4  20000070  20000070  00030070  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a31c4  080a31c4  000231c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a31ec  080a31ec  000231ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000cc3bd  00000000  00000000  000231f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013649  00000000  00000000  000ef5ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00015531  00000000  00000000  00102bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ff0  00000000  00000000  00118127  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002e20  00000000  00000000  0011a117  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002d3b8  00000000  00000000  0011cf37  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002f490  00000000  00000000  0014a2ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a564d  00000000  00000000  0017977f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b974  00000000  00000000  0021edcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f002 feb9 	bl	80a2da8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f002 febe 	bl	80a2dbe <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a3154 	.word	0x080a3154
 80a0050:	20000070 	.word	0x20000070
 80a0054:	20000070 	.word	0x20000070
 80a0058:	20000624 	.word	0x20000624
 80a005c:	20000624 	.word	0x20000624

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f001 fdb5 	bl	80a1bd0 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a30f8 	.word	0x080a30f8
 80a0088:	080a3148 	.word	0x080a3148

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b82a 	b.w	80a00e4 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f869 	bl	80a0168 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f001 bd5b 	b.w	80a1b54 <_post_loop>

080a009e <_ZdlPv>:
 80a009e:	f001 bc4f 	b.w	80a1940 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z13neoPixelSetupv>:
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

void neoPixelSetup() {
 80a00b4:	b510      	push	{r4, lr}
  strip.setBrightness(BRIGHTNESS);
 80a00b6:	4c06      	ldr	r4, [pc, #24]	; (80a00d0 <_Z13neoPixelSetupv+0x1c>)
 80a00b8:	21ff      	movs	r1, #255	; 0xff
 80a00ba:	4620      	mov	r0, r4
 80a00bc:	f001 fa6c 	bl	80a1598 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  strip.begin();
 80a00c0:	4620      	mov	r0, r4
 80a00c2:	f000 f929 	bl	80a0318 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
 80a00c6:	4620      	mov	r0, r4
}
 80a00c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

void neoPixelSetup() {
  strip.setBrightness(BRIGHTNESS);
  strip.begin();
  strip.show();
 80a00cc:	f000 b95a 	b.w	80a0384 <_ZN17Adafruit_NeoPixel4showEv>
 80a00d0:	20000078 	.word	0x20000078

080a00d4 <_Z11beeperSetupv>:
}
#endif

#ifdef TEST_BEEPER
void beeperSetup() {
  pinMode(BEEPER_PIN, OUTPUT);
 80a00d4:	2101      	movs	r1, #1
 80a00d6:	2013      	movs	r0, #19
 80a00d8:	f002 b89a 	b.w	80a2210 <pinMode>

080a00dc <_Z11buzzerSetupv>:
}
#endif

#ifdef TEST_BUZZER
void buzzerSetup() {
  pinMode(BUZZER_PIN, OUTPUT);
 80a00dc:	2101      	movs	r1, #1
 80a00de:	2011      	movs	r0, #17
 80a00e0:	f002 b896 	b.w	80a2210 <pinMode>

080a00e4 <setup>:
}
#endif

void setup() {
 80a00e4:	b510      	push	{r4, lr}
  Serial.begin(9600);
 80a00e6:	f001 fe73 	bl	80a1dd0 <_Z16_fetch_usbserialv>
  delay(1000);
  Serial.println("External Hardware Test");
 80a00ea:	4c1d      	ldr	r4, [pc, #116]	; (80a0160 <setup+0x7c>)
  pinMode(BUZZER_PIN, OUTPUT);
}
#endif

void setup() {
  Serial.begin(9600);
 80a00ec:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00f0:	f001 fe54 	bl	80a1d9c <_ZN9USBSerial5beginEl>
  delay(1000);
 80a00f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a00f8:	f001 fcda 	bl	80a1ab0 <delay>
  Serial.println("External Hardware Test");
 80a00fc:	f001 fe68 	bl	80a1dd0 <_Z16_fetch_usbserialv>
 80a0100:	4621      	mov	r1, r4
 80a0102:	f001 fc86 	bl	80a1a12 <_ZN5Print7printlnEPKc>
  delay(1000);
 80a0106:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a010a:	f001 fcd1 	bl	80a1ab0 <delay>
  Serial.println("External Hardware Test");
 80a010e:	f001 fe5f 	bl	80a1dd0 <_Z16_fetch_usbserialv>
 80a0112:	4621      	mov	r1, r4
 80a0114:	f001 fc7d 	bl	80a1a12 <_ZN5Print7printlnEPKc>
  delay(1000);
 80a0118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a011c:	f001 fcc8 	bl	80a1ab0 <delay>
  Serial.println("External Hardware Test");
 80a0120:	f001 fe56 	bl	80a1dd0 <_Z16_fetch_usbserialv>
 80a0124:	4621      	mov	r1, r4
 80a0126:	f001 fc74 	bl	80a1a12 <_ZN5Print7printlnEPKc>
  delay(1000);
 80a012a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a012e:	f001 fcbf 	bl	80a1ab0 <delay>
  Serial.println("External Hardware Test");
 80a0132:	f001 fe4d 	bl	80a1dd0 <_Z16_fetch_usbserialv>
 80a0136:	4621      	mov	r1, r4
 80a0138:	f001 fc6b 	bl	80a1a12 <_ZN5Print7printlnEPKc>
  delay(1000);
 80a013c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0140:	f001 fcb6 	bl	80a1ab0 <delay>
  Serial.println("External Hardware Test");
 80a0144:	f001 fe44 	bl	80a1dd0 <_Z16_fetch_usbserialv>
 80a0148:	4621      	mov	r1, r4
 80a014a:	f001 fc62 	bl	80a1a12 <_ZN5Print7printlnEPKc>
  #ifdef TEST_TOUCH
  touchSetup();
  #endif

  #ifdef TEST_NEOPIXEL
  neoPixelSetup();
 80a014e:	f7ff ffb1 	bl	80a00b4 <_Z13neoPixelSetupv>
  #endif

  #ifdef TEST_BEEPER
  beeperSetup();
 80a0152:	f7ff ffbf 	bl	80a00d4 <_Z11beeperSetupv>
  #endif

  #ifdef TEST_BUZZER
  buzzerSetup();
  #endif
}
 80a0156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  #ifdef TEST_BEEPER
  beeperSetup();
  #endif

  #ifdef TEST_BUZZER
  buzzerSetup();
 80a015a:	f7ff bfbf 	b.w	80a00dc <_Z11buzzerSetupv>
 80a015e:	bf00      	nop
 80a0160:	080a2e44 	.word	0x080a2e44
 80a0164:	00000000 	.word	0x00000000

080a0168 <loop>:

bool goingUp = true;
int value = 0;
int rate = 2;

void loop() {
 80a0168:	b510      	push	{r4, lr}
  // cap.setThresholds(touch_threshold, release_threshold);
  // Get the currently touched pads
  currtouched = cap.touched();
  #endif

  if (goingUp) {
 80a016a:	4a37      	ldr	r2, [pc, #220]	; (80a0248 <loop+0xe0>)
 80a016c:	4c37      	ldr	r4, [pc, #220]	; (80a024c <loop+0xe4>)
 80a016e:	7811      	ldrb	r1, [r2, #0]
 80a0170:	4837      	ldr	r0, [pc, #220]	; (80a0250 <loop+0xe8>)
 80a0172:	b149      	cbz	r1, 80a0188 <loop+0x20>
    value += rate;
 80a0174:	6821      	ldr	r1, [r4, #0]
 80a0176:	6803      	ldr	r3, [r0, #0]
 80a0178:	440b      	add	r3, r1
    if (value > 255) {
 80a017a:	2bff      	cmp	r3, #255	; 0xff
 80a017c:	dd08      	ble.n	80a0190 <loop+0x28>
      value = 255;
 80a017e:	23ff      	movs	r3, #255	; 0xff
 80a0180:	6023      	str	r3, [r4, #0]
      goingUp = false;
 80a0182:	2300      	movs	r3, #0
 80a0184:	7013      	strb	r3, [r2, #0]
 80a0186:	e008      	b.n	80a019a <loop+0x32>
    }
  } else {
    value -= rate;
 80a0188:	6823      	ldr	r3, [r4, #0]
 80a018a:	6800      	ldr	r0, [r0, #0]
    if (value < 0) {
 80a018c:	1a1b      	subs	r3, r3, r0
 80a018e:	d401      	bmi.n	80a0194 <loop+0x2c>
    if (value > 255) {
      value = 255;
      goingUp = false;
    }
  } else {
    value -= rate;
 80a0190:	6023      	str	r3, [r4, #0]
 80a0192:	e002      	b.n	80a019a <loop+0x32>
    if (value < 0) {
      value = 0;
      goingUp = true;
 80a0194:	2301      	movs	r3, #1
      goingUp = false;
    }
  } else {
    value -= rate;
    if (value < 0) {
      value = 0;
 80a0196:	6021      	str	r1, [r4, #0]
      goingUp = true;
 80a0198:	7013      	strb	r3, [r2, #0]
    }
  }
  
  #ifdef TEST_BEEPER
  tone(BEEPER_PIN, (double)value / 255.0 * 5000, 0);
 80a019a:	6820      	ldr	r0, [r4, #0]
 80a019c:	f002 fb5e 	bl	80a285c <__aeabi_i2d>
 80a01a0:	a325      	add	r3, pc, #148	; (adr r3, 80a0238 <loop+0xd0>)
 80a01a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01a6:	f002 fce9 	bl	80a2b7c <__aeabi_ddiv>
 80a01aa:	a325      	add	r3, pc, #148	; (adr r3, 80a0240 <loop+0xd8>)
 80a01ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01b0:	f002 fbba 	bl	80a2928 <__aeabi_dmul>
 80a01b4:	f002 fdca 	bl	80a2d4c <__aeabi_d2uiz>
 80a01b8:	2200      	movs	r2, #0
 80a01ba:	4601      	mov	r1, r0
 80a01bc:	2013      	movs	r0, #19
 80a01be:	f001 fe69 	bl	80a1e94 <tone>
  // pinMode(TX, OUTPUT);
  // noTone(TX);
  #endif
  
  #ifdef TEST_BUZZER
  tone(BUZZER_PIN, (double)value / 255.0 * 5000, 0);
 80a01c2:	6820      	ldr	r0, [r4, #0]
 80a01c4:	f002 fb4a 	bl	80a285c <__aeabi_i2d>
 80a01c8:	a31b      	add	r3, pc, #108	; (adr r3, 80a0238 <loop+0xd0>)
 80a01ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01ce:	f002 fcd5 	bl	80a2b7c <__aeabi_ddiv>
 80a01d2:	a31b      	add	r3, pc, #108	; (adr r3, 80a0240 <loop+0xd8>)
 80a01d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01d8:	f002 fba6 	bl	80a2928 <__aeabi_dmul>
 80a01dc:	f002 fdb6 	bl	80a2d4c <__aeabi_d2uiz>
 80a01e0:	2200      	movs	r2, #0
 80a01e2:	4601      	mov	r1, r0
 80a01e4:	2011      	movs	r0, #17
 80a01e6:	f001 fe55 	bl	80a1e94 <tone>
  // noTone(TX);
  #endif

  #ifdef TEST_NEOPIXEL
  
  strip.setPixelColor(0, strip.Color(value, 00000, 00000));
 80a01ea:	2200      	movs	r2, #0
 80a01ec:	4611      	mov	r1, r2
 80a01ee:	7820      	ldrb	r0, [r4, #0]
 80a01f0:	f001 f9cd 	bl	80a158e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a01f4:	2100      	movs	r1, #0
 80a01f6:	4602      	mov	r2, r0
 80a01f8:	4816      	ldr	r0, [pc, #88]	; (80a0254 <loop+0xec>)
 80a01fa:	f001 f97d 	bl	80a14f8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  strip.setPixelColor(1, strip.Color(00000, value, 00000));
 80a01fe:	2200      	movs	r2, #0
 80a0200:	7821      	ldrb	r1, [r4, #0]
 80a0202:	4610      	mov	r0, r2
 80a0204:	f001 f9c3 	bl	80a158e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0208:	2101      	movs	r1, #1
 80a020a:	4602      	mov	r2, r0
 80a020c:	4811      	ldr	r0, [pc, #68]	; (80a0254 <loop+0xec>)
 80a020e:	f001 f973 	bl	80a14f8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  strip.setPixelColor(2, strip.Color(00000, 00000, value));
 80a0212:	2100      	movs	r1, #0
 80a0214:	7822      	ldrb	r2, [r4, #0]
 80a0216:	4608      	mov	r0, r1
 80a0218:	f001 f9b9 	bl	80a158e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a021c:	2102      	movs	r1, #2
 80a021e:	4602      	mov	r2, r0
 80a0220:	480c      	ldr	r0, [pc, #48]	; (80a0254 <loop+0xec>)
 80a0222:	f001 f969 	bl	80a14f8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    
    strip.setPixelColor(PIXEL_COUNT - 1, strip.Color(value, 00000, 00000));
    strip.setPixelColor(PIXEL_COUNT - 2, strip.Color(00000, value, 00000));
    strip.setPixelColor(PIXEL_COUNT - 3, strip.Color(00000, 00000, value));
  }
  strip.show();
 80a0226:	480b      	ldr	r0, [pc, #44]	; (80a0254 <loop+0xec>)
 80a0228:	f000 f8ac 	bl	80a0384 <_ZN17Adafruit_NeoPixel4showEv>
  #endif
  #endif

  // put a delay so it isn't overwhelming
  delay(50);
 80a022c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.println();
  #endif
  #endif

  // put a delay so it isn't overwhelming
  delay(50);
 80a0230:	2032      	movs	r0, #50	; 0x32
 80a0232:	f001 bc3d 	b.w	80a1ab0 <delay>
 80a0236:	bf00      	nop
 80a0238:	00000000 	.word	0x00000000
 80a023c:	406fe000 	.word	0x406fe000
 80a0240:	00000000 	.word	0x00000000
 80a0244:	40b38800 	.word	0x40b38800
 80a0248:	20000004 	.word	0x20000004
 80a024c:	20000074 	.word	0x20000074
 80a0250:	20000000 	.word	0x20000000
 80a0254:	20000078 	.word	0x20000078

080a0258 <_GLOBAL__sub_I_SystemMode>:
 80a0258:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a025a:	f001 f9d3 	bl	80a1604 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a025e:	4b0c      	ldr	r3, [pc, #48]	; (80a0290 <_GLOBAL__sub_I_SystemMode+0x38>)
 80a0260:	2200      	movs	r2, #0
 80a0262:	701a      	strb	r2, [r3, #0]
 80a0264:	805a      	strh	r2, [r3, #2]
 80a0266:	f64f 72ff 	movw	r2, #65535	; 0xffff
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a026a:	4c0a      	ldr	r4, [pc, #40]	; (80a0294 <_GLOBAL__sub_I_SystemMode+0x3c>)
 80a026c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a026e:	2003      	movs	r0, #3
 80a0270:	f001 fae2 	bl	80a1838 <set_system_mode>
 80a0274:	2302      	movs	r3, #2
 80a0276:	461a      	mov	r2, r3
 80a0278:	2103      	movs	r1, #3
 80a027a:	4620      	mov	r0, r4
 80a027c:	f000 f871 	bl	80a0362 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0280:	4620      	mov	r0, r4
  #endif
  #endif

  // put a delay so it isn't overwhelming
  delay(50);
 80a0282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0286:	4a04      	ldr	r2, [pc, #16]	; (80a0298 <_GLOBAL__sub_I_SystemMode+0x40>)
 80a0288:	4904      	ldr	r1, [pc, #16]	; (80a029c <_GLOBAL__sub_I_SystemMode+0x44>)
 80a028a:	f002 b845 	b.w	80a2318 <__aeabi_atexit>
 80a028e:	bf00      	nop
 80a0290:	2000008c 	.word	0x2000008c
 80a0294:	20000078 	.word	0x20000078
 80a0298:	20000070 	.word	0x20000070
 80a029c:	080a02c5 	.word	0x080a02c5

080a02a0 <_GLOBAL__sub_I__ZN15Adafruit_MPR121C2Ev>:
 80a02a0:	f001 b9b0 	b.w	80a1604 <HAL_Pin_Map>

080a02a4 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff>:
  q[1] = q2 * norm;
  q[2] = q3 * norm;
  q[3] = q4 * norm;
}

const float * getQ () { return q; }
 80a02a4:	b508      	push	{r3, lr}
 80a02a6:	f001 f9ad 	bl	80a1604 <HAL_Pin_Map>
// noticed any reduction in solution accuracy. This is essentially the I
// coefficient in a PID control sense; the bigger the feedback coefficient,
// the faster the solution converges, usually at the expense of accuracy.
// In any case, this is the free parameter in the Madgwick filtering and
// fusion scheme.
static float beta = sqrt(3.0f / 4.0f) * GyroMeasError;   // Compute beta
 80a02aa:	4a02      	ldr	r2, [pc, #8]	; (80a02b4 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x10>)
 80a02ac:	4b02      	ldr	r3, [pc, #8]	; (80a02b8 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x14>)
 80a02ae:	601a      	str	r2, [r3, #0]
 80a02b0:	bd08      	pop	{r3, pc}
 80a02b2:	bf00      	nop
 80a02b4:	3f1ac70d 	.word	0x3f1ac70d
 80a02b8:	20000094 	.word	0x20000094

080a02bc <_GLOBAL__sub_I__ZN7MPU92507getMresEv>:
 80a02bc:	f001 b9a2 	b.w	80a1604 <HAL_Pin_Map>

080a02c0 <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a02c0:	f001 b9e0 	b.w	80a1684 <HAL_Timer_Get_Micro_Seconds>

080a02c4 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a02c4:	b510      	push	{r4, lr}
 80a02c6:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a02c8:	68c0      	ldr	r0, [r0, #12]
 80a02ca:	b108      	cbz	r0, 80a02d0 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a02cc:	f001 fb38 	bl	80a1940 <free>
  if (begun) pinMode(pin, INPUT);
 80a02d0:	7823      	ldrb	r3, [r4, #0]
 80a02d2:	b11b      	cbz	r3, 80a02dc <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a02d4:	2100      	movs	r1, #0
 80a02d6:	79e0      	ldrb	r0, [r4, #7]
 80a02d8:	f001 ff9a 	bl	80a2210 <pinMode>
}
 80a02dc:	4620      	mov	r0, r4
 80a02de:	bd10      	pop	{r4, pc}

080a02e0 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a02e0:	b538      	push	{r3, r4, r5, lr}
 80a02e2:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a02e4:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a02e6:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a02e8:	b108      	cbz	r0, 80a02ee <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a02ea:	f001 fb29 	bl	80a1940 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a02ee:	79a3      	ldrb	r3, [r4, #6]
 80a02f0:	2b06      	cmp	r3, #6
 80a02f2:	bf0c      	ite	eq
 80a02f4:	2004      	moveq	r0, #4
 80a02f6:	2003      	movne	r0, #3
 80a02f8:	4368      	muls	r0, r5
 80a02fa:	b280      	uxth	r0, r0
 80a02fc:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a02fe:	f001 fb17 	bl	80a1930 <malloc>
 80a0302:	60e0      	str	r0, [r4, #12]
 80a0304:	b128      	cbz	r0, 80a0312 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a0306:	88a2      	ldrh	r2, [r4, #4]
 80a0308:	2100      	movs	r1, #0
 80a030a:	f002 fd58 	bl	80a2dbe <memset>
    numLEDs = n;
 80a030e:	8065      	strh	r5, [r4, #2]
 80a0310:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a0312:	80a0      	strh	r0, [r4, #4]
 80a0314:	8060      	strh	r0, [r4, #2]
 80a0316:	bd38      	pop	{r3, r4, r5, pc}

080a0318 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a0318:	b510      	push	{r4, lr}
 80a031a:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a031c:	2101      	movs	r1, #1
 80a031e:	79c0      	ldrb	r0, [r0, #7]
 80a0320:	f001 ff76 	bl	80a2210 <pinMode>
  digitalWrite(pin, LOW);
 80a0324:	2100      	movs	r1, #0
 80a0326:	79e0      	ldrb	r0, [r4, #7]
 80a0328:	f001 ff83 	bl	80a2232 <digitalWrite>
  begun = true;
 80a032c:	2301      	movs	r3, #1
 80a032e:	7023      	strb	r3, [r4, #0]
 80a0330:	bd10      	pop	{r4, pc}

080a0332 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0332:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0334:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0336:	4605      	mov	r5, r0
 80a0338:	460c      	mov	r4, r1
    if (begun) {
 80a033a:	b11b      	cbz	r3, 80a0344 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a033c:	2100      	movs	r1, #0
 80a033e:	79c0      	ldrb	r0, [r0, #7]
 80a0340:	f001 ff66 	bl	80a2210 <pinMode>
    }
    pin = p;
    if (begun) {
 80a0344:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a0346:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0348:	b153      	cbz	r3, 80a0360 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a034a:	b2a4      	uxth	r4, r4
 80a034c:	4620      	mov	r0, r4
 80a034e:	2101      	movs	r1, #1
 80a0350:	f001 ff5e 	bl	80a2210 <pinMode>
        digitalWrite(p, LOW);
 80a0354:	4620      	mov	r0, r4
    }
}
 80a0356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a035a:	2100      	movs	r1, #0
 80a035c:	f001 bf69 	b.w	80a2232 <digitalWrite>
 80a0360:	bd38      	pop	{r3, r4, r5, pc}

080a0362 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0362:	b570      	push	{r4, r5, r6, lr}
 80a0364:	4604      	mov	r4, r0
 80a0366:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0368:	2500      	movs	r5, #0
 80a036a:	7183      	strb	r3, [r0, #6]
 80a036c:	7005      	strb	r5, [r0, #0]
 80a036e:	7205      	strb	r5, [r0, #8]
 80a0370:	60c5      	str	r5, [r0, #12]
 80a0372:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a0374:	f7ff ffb4 	bl	80a02e0 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0378:	4620      	mov	r0, r4
 80a037a:	4631      	mov	r1, r6
 80a037c:	f7ff ffd9 	bl	80a0332 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0380:	4620      	mov	r0, r4
 80a0382:	bd70      	pop	{r4, r5, r6, pc}

080a0384 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0384:	68c3      	ldr	r3, [r0, #12]
 80a0386:	2b00      	cmp	r3, #0
 80a0388:	f000 858e 	beq.w	80a0ea8 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a038c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0390:	4604      	mov	r4, r0
 80a0392:	7983      	ldrb	r3, [r0, #6]
 80a0394:	b086      	sub	sp, #24
 80a0396:	3b02      	subs	r3, #2
 80a0398:	b2db      	uxtb	r3, r3
 80a039a:	2b04      	cmp	r3, #4
 80a039c:	bf96      	itet	ls
 80a039e:	4a29      	ldrls	r2, [pc, #164]	; (80a0444 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a03a0:	2532      	movhi	r5, #50	; 0x32
 80a03a2:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a03a6:	f7ff ff8b 	bl	80a02c0 <micros>
 80a03aa:	6923      	ldr	r3, [r4, #16]
 80a03ac:	1ac0      	subs	r0, r0, r3
 80a03ae:	42a8      	cmp	r0, r5
 80a03b0:	d3f9      	bcc.n	80a03a6 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a03b2:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a03b4:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a03b6:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a03b8:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a03ba:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a03be:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a03c2:	f000 8272 	beq.w	80a08aa <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a03c6:	2907      	cmp	r1, #7
 80a03c8:	f000 826f 	beq.w	80a08aa <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a03cc:	2906      	cmp	r1, #6
 80a03ce:	f000 8432 	beq.w	80a0c36 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a03d2:	2905      	cmp	r1, #5
 80a03d4:	f000 83ab 	beq.w	80a0b2e <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a03d8:	2908      	cmp	r1, #8
 80a03da:	f000 83a8 	beq.w	80a0b2e <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a03de:	2900      	cmp	r1, #0
 80a03e0:	f040 8563 	bne.w	80a0eaa <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a03e4:	4a18      	ldr	r2, [pc, #96]	; (80a0448 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a03e6:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a03ea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a03ee:	b29b      	uxth	r3, r3
 80a03f0:	2b00      	cmp	r3, #0
 80a03f2:	f000 8395 	beq.w	80a0b20 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a03f6:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a03f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a03fc:	f10e 0503 	add.w	r5, lr, #3
 80a0400:	3b03      	subs	r3, #3
 80a0402:	b29b      	uxth	r3, r3
 80a0404:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0408:	f89e 3000 	ldrb.w	r3, [lr]
 80a040c:	b2db      	uxtb	r3, r3
 80a040e:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0412:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0416:	b2db      	uxtb	r3, r3
 80a0418:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a041c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0420:	b2db      	uxtb	r3, r3
 80a0422:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0426:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a042a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a042e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0432:	021b      	lsls	r3, r3, #8
 80a0434:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0438:	4303      	orrs	r3, r0
 80a043a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a043c:	f88d 1005 	strb.w	r1, [sp, #5]
 80a0440:	e11b      	b.n	80a067a <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a0442:	bf00      	nop
 80a0444:	080a2e5c 	.word	0x080a2e5c
 80a0448:	20000098 	.word	0x20000098
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a044c:	4600      	mov	r0, r0
 80a044e:	bf00      	nop
 80a0450:	bf00      	nop
 80a0452:	bf00      	nop
 80a0454:	bf00      	nop
 80a0456:	bf00      	nop
 80a0458:	bf00      	nop
 80a045a:	bf00      	nop
 80a045c:	bf00      	nop
 80a045e:	bf00      	nop
 80a0460:	bf00      	nop
 80a0462:	bf00      	nop
 80a0464:	bf00      	nop
 80a0466:	bf00      	nop
 80a0468:	bf00      	nop
 80a046a:	bf00      	nop
 80a046c:	bf00      	nop
 80a046e:	bf00      	nop
 80a0470:	bf00      	nop
 80a0472:	bf00      	nop
 80a0474:	bf00      	nop
 80a0476:	bf00      	nop
 80a0478:	bf00      	nop
 80a047a:	bf00      	nop
 80a047c:	bf00      	nop
 80a047e:	bf00      	nop
 80a0480:	bf00      	nop
 80a0482:	bf00      	nop
 80a0484:	bf00      	nop
 80a0486:	bf00      	nop
 80a0488:	bf00      	nop
 80a048a:	bf00      	nop
 80a048c:	bf00      	nop
 80a048e:	bf00      	nop
 80a0490:	bf00      	nop
 80a0492:	bf00      	nop
 80a0494:	bf00      	nop
 80a0496:	bf00      	nop
 80a0498:	bf00      	nop
 80a049a:	bf00      	nop
 80a049c:	bf00      	nop
 80a049e:	bf00      	nop
 80a04a0:	bf00      	nop
 80a04a2:	bf00      	nop
 80a04a4:	bf00      	nop
 80a04a6:	bf00      	nop
 80a04a8:	bf00      	nop
 80a04aa:	bf00      	nop
 80a04ac:	bf00      	nop
 80a04ae:	bf00      	nop
 80a04b0:	bf00      	nop
 80a04b2:	bf00      	nop
 80a04b4:	bf00      	nop
 80a04b6:	bf00      	nop
 80a04b8:	bf00      	nop
 80a04ba:	bf00      	nop
 80a04bc:	bf00      	nop
 80a04be:	bf00      	nop
 80a04c0:	bf00      	nop
 80a04c2:	bf00      	nop
 80a04c4:	bf00      	nop
 80a04c6:	bf00      	nop
 80a04c8:	bf00      	nop
 80a04ca:	bf00      	nop
 80a04cc:	bf00      	nop
 80a04ce:	bf00      	nop
 80a04d0:	bf00      	nop
 80a04d2:	bf00      	nop
 80a04d4:	bf00      	nop
 80a04d6:	bf00      	nop
 80a04d8:	bf00      	nop
 80a04da:	bf00      	nop
 80a04dc:	bf00      	nop
 80a04de:	bf00      	nop
 80a04e0:	bf00      	nop
 80a04e2:	bf00      	nop
 80a04e4:	bf00      	nop
 80a04e6:	bf00      	nop
 80a04e8:	bf00      	nop
 80a04ea:	bf00      	nop
 80a04ec:	bf00      	nop
 80a04ee:	bf00      	nop
 80a04f0:	bf00      	nop
 80a04f2:	bf00      	nop
 80a04f4:	bf00      	nop
 80a04f6:	bf00      	nop
 80a04f8:	bf00      	nop
 80a04fa:	bf00      	nop
 80a04fc:	bf00      	nop
 80a04fe:	bf00      	nop
 80a0500:	bf00      	nop
 80a0502:	bf00      	nop
 80a0504:	bf00      	nop
 80a0506:	bf00      	nop
 80a0508:	bf00      	nop
 80a050a:	bf00      	nop
 80a050c:	bf00      	nop
 80a050e:	bf00      	nop
 80a0510:	bf00      	nop
 80a0512:	bf00      	nop
 80a0514:	bf00      	nop
 80a0516:	bf00      	nop
 80a0518:	bf00      	nop
 80a051a:	bf00      	nop
 80a051c:	bf00      	nop
 80a051e:	bf00      	nop
 80a0520:	bf00      	nop
 80a0522:	bf00      	nop
 80a0524:	bf00      	nop
 80a0526:	bf00      	nop
 80a0528:	bf00      	nop
 80a052a:	bf00      	nop
 80a052c:	bf00      	nop
 80a052e:	bf00      	nop
 80a0530:	bf00      	nop
 80a0532:	bf00      	nop
 80a0534:	bf00      	nop
 80a0536:	bf00      	nop
 80a0538:	bf00      	nop
 80a053a:	bf00      	nop
 80a053c:	bf00      	nop
 80a053e:	bf00      	nop
 80a0540:	bf00      	nop
 80a0542:	bf00      	nop
 80a0544:	bf00      	nop
 80a0546:	bf00      	nop
 80a0548:	bf00      	nop
 80a054a:	bf00      	nop
 80a054c:	bf00      	nop
 80a054e:	bf00      	nop
 80a0550:	bf00      	nop
 80a0552:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0554:	79e3      	ldrb	r3, [r4, #7]
 80a0556:	6810      	ldr	r0, [r2, #0]
 80a0558:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a055c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0560:	88bf      	ldrh	r7, [r7, #4]
 80a0562:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0566:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0568:	4600      	mov	r0, r0
 80a056a:	bf00      	nop
 80a056c:	bf00      	nop
 80a056e:	bf00      	nop
 80a0570:	bf00      	nop
 80a0572:	bf00      	nop
 80a0574:	bf00      	nop
 80a0576:	bf00      	nop
 80a0578:	bf00      	nop
 80a057a:	bf00      	nop
 80a057c:	bf00      	nop
 80a057e:	bf00      	nop
 80a0580:	bf00      	nop
 80a0582:	bf00      	nop
 80a0584:	bf00      	nop
 80a0586:	bf00      	nop
 80a0588:	bf00      	nop
 80a058a:	bf00      	nop
 80a058c:	bf00      	nop
 80a058e:	bf00      	nop
 80a0590:	bf00      	nop
 80a0592:	bf00      	nop
 80a0594:	bf00      	nop
 80a0596:	bf00      	nop
 80a0598:	bf00      	nop
 80a059a:	bf00      	nop
 80a059c:	bf00      	nop
 80a059e:	bf00      	nop
 80a05a0:	bf00      	nop
 80a05a2:	bf00      	nop
 80a05a4:	bf00      	nop
 80a05a6:	bf00      	nop
 80a05a8:	bf00      	nop
 80a05aa:	bf00      	nop
 80a05ac:	bf00      	nop
 80a05ae:	bf00      	nop
 80a05b0:	bf00      	nop
 80a05b2:	bf00      	nop
 80a05b4:	bf00      	nop
 80a05b6:	bf00      	nop
 80a05b8:	bf00      	nop
 80a05ba:	bf00      	nop
 80a05bc:	bf00      	nop
 80a05be:	bf00      	nop
 80a05c0:	bf00      	nop
 80a05c2:	bf00      	nop
 80a05c4:	bf00      	nop
 80a05c6:	bf00      	nop
 80a05c8:	bf00      	nop
 80a05ca:	bf00      	nop
 80a05cc:	bf00      	nop
 80a05ce:	bf00      	nop
 80a05d0:	bf00      	nop
 80a05d2:	bf00      	nop
 80a05d4:	bf00      	nop
 80a05d6:	bf00      	nop
 80a05d8:	bf00      	nop
 80a05da:	bf00      	nop
 80a05dc:	bf00      	nop
 80a05de:	bf00      	nop
 80a05e0:	bf00      	nop
 80a05e2:	bf00      	nop
 80a05e4:	bf00      	nop
 80a05e6:	bf00      	nop
 80a05e8:	bf00      	nop
 80a05ea:	bf00      	nop
 80a05ec:	bf00      	nop
 80a05ee:	bf00      	nop
 80a05f0:	bf00      	nop
 80a05f2:	bf00      	nop
 80a05f4:	bf00      	nop
 80a05f6:	bf00      	nop
 80a05f8:	bf00      	nop
 80a05fa:	bf00      	nop
 80a05fc:	bf00      	nop
 80a05fe:	bf00      	nop
 80a0600:	bf00      	nop
 80a0602:	bf00      	nop
 80a0604:	bf00      	nop
 80a0606:	bf00      	nop
 80a0608:	bf00      	nop
 80a060a:	bf00      	nop
 80a060c:	bf00      	nop
 80a060e:	bf00      	nop
 80a0610:	bf00      	nop
 80a0612:	bf00      	nop
 80a0614:	bf00      	nop
 80a0616:	bf00      	nop
 80a0618:	bf00      	nop
 80a061a:	bf00      	nop
 80a061c:	bf00      	nop
 80a061e:	bf00      	nop
 80a0620:	bf00      	nop
 80a0622:	bf00      	nop
 80a0624:	bf00      	nop
 80a0626:	bf00      	nop
 80a0628:	bf00      	nop
 80a062a:	bf00      	nop
 80a062c:	bf00      	nop
 80a062e:	bf00      	nop
 80a0630:	bf00      	nop
 80a0632:	bf00      	nop
 80a0634:	bf00      	nop
 80a0636:	bf00      	nop
 80a0638:	bf00      	nop
 80a063a:	bf00      	nop
 80a063c:	bf00      	nop
 80a063e:	bf00      	nop
 80a0640:	bf00      	nop
 80a0642:	bf00      	nop
 80a0644:	bf00      	nop
 80a0646:	bf00      	nop
 80a0648:	bf00      	nop
 80a064a:	bf00      	nop
 80a064c:	bf00      	nop
 80a064e:	bf00      	nop
 80a0650:	bf00      	nop
 80a0652:	bf00      	nop
 80a0654:	bf00      	nop
 80a0656:	bf00      	nop
 80a0658:	bf00      	nop
 80a065a:	bf00      	nop
 80a065c:	bf00      	nop
 80a065e:	bf00      	nop
 80a0660:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0662:	9b04      	ldr	r3, [sp, #16]
 80a0664:	085b      	lsrs	r3, r3, #1
 80a0666:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0668:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a066c:	3301      	adds	r3, #1
 80a066e:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0670:	2b17      	cmp	r3, #23
 80a0672:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0676:	f200 82db 	bhi.w	80a0c30 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a067a:	79e3      	ldrb	r3, [r4, #7]
 80a067c:	6810      	ldr	r0, [r2, #0]
 80a067e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0682:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0686:	88bf      	ldrh	r7, [r7, #4]
 80a0688:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a068c:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a068e:	9803      	ldr	r0, [sp, #12]
 80a0690:	9b04      	ldr	r3, [sp, #16]
 80a0692:	4218      	tst	r0, r3
 80a0694:	f47f aeda 	bne.w	80a044c <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0698:	4600      	mov	r0, r0
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
 80a06c2:	bf00      	nop
 80a06c4:	bf00      	nop
 80a06c6:	bf00      	nop
 80a06c8:	bf00      	nop
 80a06ca:	bf00      	nop
 80a06cc:	bf00      	nop
 80a06ce:	bf00      	nop
 80a06d0:	bf00      	nop
 80a06d2:	bf00      	nop
 80a06d4:	bf00      	nop
 80a06d6:	bf00      	nop
 80a06d8:	bf00      	nop
 80a06da:	bf00      	nop
 80a06dc:	bf00      	nop
 80a06de:	bf00      	nop
 80a06e0:	bf00      	nop
 80a06e2:	bf00      	nop
 80a06e4:	bf00      	nop
 80a06e6:	bf00      	nop
 80a06e8:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a06ea:	79e3      	ldrb	r3, [r4, #7]
 80a06ec:	6810      	ldr	r0, [r2, #0]
 80a06ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a06f2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a06f6:	88bf      	ldrh	r7, [r7, #4]
 80a06f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a06fc:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a06fe:	4600      	mov	r0, r0
 80a0700:	bf00      	nop
 80a0702:	bf00      	nop
 80a0704:	bf00      	nop
 80a0706:	bf00      	nop
 80a0708:	bf00      	nop
 80a070a:	bf00      	nop
 80a070c:	bf00      	nop
 80a070e:	bf00      	nop
 80a0710:	bf00      	nop
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
 80a071e:	bf00      	nop
 80a0720:	bf00      	nop
 80a0722:	bf00      	nop
 80a0724:	bf00      	nop
 80a0726:	bf00      	nop
 80a0728:	bf00      	nop
 80a072a:	bf00      	nop
 80a072c:	bf00      	nop
 80a072e:	bf00      	nop
 80a0730:	bf00      	nop
 80a0732:	bf00      	nop
 80a0734:	bf00      	nop
 80a0736:	bf00      	nop
 80a0738:	bf00      	nop
 80a073a:	bf00      	nop
 80a073c:	bf00      	nop
 80a073e:	bf00      	nop
 80a0740:	bf00      	nop
 80a0742:	bf00      	nop
 80a0744:	bf00      	nop
 80a0746:	bf00      	nop
 80a0748:	bf00      	nop
 80a074a:	bf00      	nop
 80a074c:	bf00      	nop
 80a074e:	bf00      	nop
 80a0750:	bf00      	nop
 80a0752:	bf00      	nop
 80a0754:	bf00      	nop
 80a0756:	bf00      	nop
 80a0758:	bf00      	nop
 80a075a:	bf00      	nop
 80a075c:	bf00      	nop
 80a075e:	bf00      	nop
 80a0760:	bf00      	nop
 80a0762:	bf00      	nop
 80a0764:	bf00      	nop
 80a0766:	bf00      	nop
 80a0768:	bf00      	nop
 80a076a:	bf00      	nop
 80a076c:	bf00      	nop
 80a076e:	bf00      	nop
 80a0770:	bf00      	nop
 80a0772:	bf00      	nop
 80a0774:	bf00      	nop
 80a0776:	bf00      	nop
 80a0778:	bf00      	nop
 80a077a:	bf00      	nop
 80a077c:	bf00      	nop
 80a077e:	bf00      	nop
 80a0780:	bf00      	nop
 80a0782:	bf00      	nop
 80a0784:	bf00      	nop
 80a0786:	bf00      	nop
 80a0788:	bf00      	nop
 80a078a:	bf00      	nop
 80a078c:	bf00      	nop
 80a078e:	bf00      	nop
 80a0790:	bf00      	nop
 80a0792:	bf00      	nop
 80a0794:	bf00      	nop
 80a0796:	bf00      	nop
 80a0798:	bf00      	nop
 80a079a:	bf00      	nop
 80a079c:	bf00      	nop
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
 80a07a6:	bf00      	nop
 80a07a8:	bf00      	nop
 80a07aa:	bf00      	nop
 80a07ac:	bf00      	nop
 80a07ae:	bf00      	nop
 80a07b0:	bf00      	nop
 80a07b2:	bf00      	nop
 80a07b4:	bf00      	nop
 80a07b6:	bf00      	nop
 80a07b8:	bf00      	nop
 80a07ba:	bf00      	nop
 80a07bc:	bf00      	nop
 80a07be:	bf00      	nop
 80a07c0:	bf00      	nop
 80a07c2:	bf00      	nop
 80a07c4:	bf00      	nop
 80a07c6:	bf00      	nop
 80a07c8:	bf00      	nop
 80a07ca:	bf00      	nop
 80a07cc:	bf00      	nop
 80a07ce:	bf00      	nop
 80a07d0:	bf00      	nop
 80a07d2:	bf00      	nop
 80a07d4:	bf00      	nop
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	bf00      	nop
 80a0816:	bf00      	nop
 80a0818:	bf00      	nop
 80a081a:	bf00      	nop
 80a081c:	bf00      	nop
 80a081e:	bf00      	nop
 80a0820:	bf00      	nop
 80a0822:	bf00      	nop
 80a0824:	bf00      	nop
 80a0826:	bf00      	nop
 80a0828:	bf00      	nop
 80a082a:	bf00      	nop
 80a082c:	bf00      	nop
 80a082e:	bf00      	nop
 80a0830:	bf00      	nop
 80a0832:	bf00      	nop
 80a0834:	bf00      	nop
 80a0836:	bf00      	nop
 80a0838:	bf00      	nop
 80a083a:	bf00      	nop
 80a083c:	bf00      	nop
 80a083e:	bf00      	nop
 80a0840:	bf00      	nop
 80a0842:	bf00      	nop
 80a0844:	bf00      	nop
 80a0846:	bf00      	nop
 80a0848:	bf00      	nop
 80a084a:	bf00      	nop
 80a084c:	bf00      	nop
 80a084e:	bf00      	nop
 80a0850:	bf00      	nop
 80a0852:	bf00      	nop
 80a0854:	bf00      	nop
 80a0856:	bf00      	nop
 80a0858:	bf00      	nop
 80a085a:	bf00      	nop
 80a085c:	bf00      	nop
 80a085e:	bf00      	nop
 80a0860:	bf00      	nop
 80a0862:	bf00      	nop
 80a0864:	bf00      	nop
 80a0866:	bf00      	nop
 80a0868:	bf00      	nop
 80a086a:	bf00      	nop
 80a086c:	bf00      	nop
 80a086e:	bf00      	nop
 80a0870:	bf00      	nop
 80a0872:	bf00      	nop
 80a0874:	bf00      	nop
 80a0876:	bf00      	nop
 80a0878:	bf00      	nop
 80a087a:	bf00      	nop
 80a087c:	bf00      	nop
 80a087e:	bf00      	nop
 80a0880:	bf00      	nop
 80a0882:	bf00      	nop
 80a0884:	bf00      	nop
 80a0886:	bf00      	nop
 80a0888:	bf00      	nop
 80a088a:	bf00      	nop
 80a088c:	bf00      	nop
 80a088e:	bf00      	nop
 80a0890:	bf00      	nop
 80a0892:	bf00      	nop
 80a0894:	bf00      	nop
 80a0896:	bf00      	nop
 80a0898:	bf00      	nop
 80a089a:	bf00      	nop
 80a089c:	bf00      	nop
 80a089e:	bf00      	nop
 80a08a0:	bf00      	nop
 80a08a2:	bf00      	nop
 80a08a4:	bf00      	nop
 80a08a6:	bf00      	nop
 80a08a8:	e6db      	b.n	80a0662 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a08aa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a08ae:	4a17      	ldr	r2, [pc, #92]	; (80a090c <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a08b0:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a08b2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a08b6:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a08b8:	2b00      	cmp	r3, #0
 80a08ba:	f000 8131 	beq.w	80a0b20 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a08be:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a08c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a08c4:	f10e 0103 	add.w	r1, lr, #3
 80a08c8:	3b03      	subs	r3, #3
 80a08ca:	b29b      	uxth	r3, r3
 80a08cc:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a08d0:	f89e 3000 	ldrb.w	r3, [lr]
 80a08d4:	b2db      	uxtb	r3, r3
 80a08d6:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a08da:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a08de:	b2db      	uxtb	r3, r3
 80a08e0:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a08e4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a08e8:	b2db      	uxtb	r3, r3
 80a08ea:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a08ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a08f2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a08f6:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a08fa:	0200      	lsls	r0, r0, #8
 80a08fc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a0900:	433b      	orrs	r3, r7
 80a0902:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0904:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0908:	e080      	b.n	80a0a0c <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a090a:	bf00      	nop
 80a090c:	20000098 	.word	0x20000098
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0910:	4600      	mov	r0, r0
 80a0912:	bf00      	nop
 80a0914:	bf00      	nop
 80a0916:	bf00      	nop
 80a0918:	bf00      	nop
 80a091a:	bf00      	nop
 80a091c:	bf00      	nop
 80a091e:	bf00      	nop
 80a0920:	bf00      	nop
 80a0922:	bf00      	nop
 80a0924:	bf00      	nop
 80a0926:	bf00      	nop
 80a0928:	bf00      	nop
 80a092a:	bf00      	nop
 80a092c:	bf00      	nop
 80a092e:	bf00      	nop
 80a0930:	bf00      	nop
 80a0932:	bf00      	nop
 80a0934:	bf00      	nop
 80a0936:	bf00      	nop
 80a0938:	bf00      	nop
 80a093a:	bf00      	nop
 80a093c:	bf00      	nop
 80a093e:	bf00      	nop
 80a0940:	bf00      	nop
 80a0942:	bf00      	nop
 80a0944:	bf00      	nop
 80a0946:	bf00      	nop
 80a0948:	bf00      	nop
 80a094a:	bf00      	nop
 80a094c:	bf00      	nop
 80a094e:	bf00      	nop
 80a0950:	bf00      	nop
 80a0952:	bf00      	nop
 80a0954:	bf00      	nop
 80a0956:	bf00      	nop
 80a0958:	bf00      	nop
 80a095a:	bf00      	nop
 80a095c:	bf00      	nop
 80a095e:	bf00      	nop
 80a0960:	bf00      	nop
 80a0962:	bf00      	nop
 80a0964:	bf00      	nop
 80a0966:	bf00      	nop
 80a0968:	bf00      	nop
 80a096a:	bf00      	nop
 80a096c:	bf00      	nop
 80a096e:	bf00      	nop
 80a0970:	bf00      	nop
 80a0972:	bf00      	nop
 80a0974:	bf00      	nop
 80a0976:	bf00      	nop
 80a0978:	bf00      	nop
 80a097a:	bf00      	nop
 80a097c:	bf00      	nop
 80a097e:	bf00      	nop
 80a0980:	bf00      	nop
 80a0982:	bf00      	nop
 80a0984:	bf00      	nop
 80a0986:	bf00      	nop
 80a0988:	bf00      	nop
 80a098a:	bf00      	nop
 80a098c:	bf00      	nop
 80a098e:	bf00      	nop
 80a0990:	bf00      	nop
 80a0992:	bf00      	nop
 80a0994:	bf00      	nop
 80a0996:	bf00      	nop
 80a0998:	bf00      	nop
 80a099a:	bf00      	nop
 80a099c:	bf00      	nop
 80a099e:	bf00      	nop
 80a09a0:	bf00      	nop
 80a09a2:	bf00      	nop
 80a09a4:	bf00      	nop
 80a09a6:	bf00      	nop
 80a09a8:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a09aa:	79e3      	ldrb	r3, [r4, #7]
 80a09ac:	6810      	ldr	r0, [r2, #0]
 80a09ae:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a09b2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a09b6:	88bf      	ldrh	r7, [r7, #4]
 80a09b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a09bc:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a09be:	4600      	mov	r0, r0
 80a09c0:	bf00      	nop
 80a09c2:	bf00      	nop
 80a09c4:	bf00      	nop
 80a09c6:	bf00      	nop
 80a09c8:	bf00      	nop
 80a09ca:	bf00      	nop
 80a09cc:	bf00      	nop
 80a09ce:	bf00      	nop
 80a09d0:	bf00      	nop
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
 80a09e4:	bf00      	nop
 80a09e6:	bf00      	nop
 80a09e8:	bf00      	nop
 80a09ea:	bf00      	nop
 80a09ec:	bf00      	nop
 80a09ee:	bf00      	nop
 80a09f0:	bf00      	nop
 80a09f2:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a09f4:	9b04      	ldr	r3, [sp, #16]
 80a09f6:	085b      	lsrs	r3, r3, #1
 80a09f8:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a09fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a09fe:	3301      	adds	r3, #1
 80a0a00:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0a02:	2b17      	cmp	r3, #23
 80a0a04:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0a08:	f200 8083 	bhi.w	80a0b12 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a0a0c:	79e3      	ldrb	r3, [r4, #7]
 80a0a0e:	6810      	ldr	r0, [r2, #0]
 80a0a10:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0a14:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0a18:	88bf      	ldrh	r7, [r7, #4]
 80a0a1a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0a1e:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0a20:	9803      	ldr	r0, [sp, #12]
 80a0a22:	9b04      	ldr	r3, [sp, #16]
 80a0a24:	4218      	tst	r0, r3
 80a0a26:	f47f af73 	bne.w	80a0910 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0a2a:	4600      	mov	r0, r0
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a0a52:	79e3      	ldrb	r3, [r4, #7]
 80a0a54:	6810      	ldr	r0, [r2, #0]
 80a0a56:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0a5a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0a5e:	88bf      	ldrh	r7, [r7, #4]
 80a0a60:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0a64:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0a66:	4600      	mov	r0, r0
 80a0a68:	bf00      	nop
 80a0a6a:	bf00      	nop
 80a0a6c:	bf00      	nop
 80a0a6e:	bf00      	nop
 80a0a70:	bf00      	nop
 80a0a72:	bf00      	nop
 80a0a74:	bf00      	nop
 80a0a76:	bf00      	nop
 80a0a78:	bf00      	nop
 80a0a7a:	bf00      	nop
 80a0a7c:	bf00      	nop
 80a0a7e:	bf00      	nop
 80a0a80:	bf00      	nop
 80a0a82:	bf00      	nop
 80a0a84:	bf00      	nop
 80a0a86:	bf00      	nop
 80a0a88:	bf00      	nop
 80a0a8a:	bf00      	nop
 80a0a8c:	bf00      	nop
 80a0a8e:	bf00      	nop
 80a0a90:	bf00      	nop
 80a0a92:	bf00      	nop
 80a0a94:	bf00      	nop
 80a0a96:	bf00      	nop
 80a0a98:	bf00      	nop
 80a0a9a:	bf00      	nop
 80a0a9c:	bf00      	nop
 80a0a9e:	bf00      	nop
 80a0aa0:	bf00      	nop
 80a0aa2:	bf00      	nop
 80a0aa4:	bf00      	nop
 80a0aa6:	bf00      	nop
 80a0aa8:	bf00      	nop
 80a0aaa:	bf00      	nop
 80a0aac:	bf00      	nop
 80a0aae:	bf00      	nop
 80a0ab0:	bf00      	nop
 80a0ab2:	bf00      	nop
 80a0ab4:	bf00      	nop
 80a0ab6:	bf00      	nop
 80a0ab8:	bf00      	nop
 80a0aba:	bf00      	nop
 80a0abc:	bf00      	nop
 80a0abe:	bf00      	nop
 80a0ac0:	bf00      	nop
 80a0ac2:	bf00      	nop
 80a0ac4:	bf00      	nop
 80a0ac6:	bf00      	nop
 80a0ac8:	bf00      	nop
 80a0aca:	bf00      	nop
 80a0acc:	bf00      	nop
 80a0ace:	bf00      	nop
 80a0ad0:	bf00      	nop
 80a0ad2:	bf00      	nop
 80a0ad4:	bf00      	nop
 80a0ad6:	bf00      	nop
 80a0ad8:	bf00      	nop
 80a0ada:	bf00      	nop
 80a0adc:	bf00      	nop
 80a0ade:	bf00      	nop
 80a0ae0:	bf00      	nop
 80a0ae2:	bf00      	nop
 80a0ae4:	bf00      	nop
 80a0ae6:	bf00      	nop
 80a0ae8:	bf00      	nop
 80a0aea:	bf00      	nop
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
 80a0b00:	bf00      	nop
 80a0b02:	bf00      	nop
 80a0b04:	bf00      	nop
 80a0b06:	bf00      	nop
 80a0b08:	bf00      	nop
 80a0b0a:	bf00      	nop
 80a0b0c:	bf00      	nop
 80a0b0e:	bf00      	nop
 80a0b10:	e770      	b.n	80a09f4 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b12:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0b16:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b18:	b29b      	uxth	r3, r3
 80a0b1a:	2b00      	cmp	r3, #0
 80a0b1c:	f47f aecf 	bne.w	80a08be <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a0b20:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0b22:	f7ff fbcd 	bl	80a02c0 <micros>
 80a0b26:	6120      	str	r0, [r4, #16]
}
 80a0b28:	b006      	add	sp, #24
 80a0b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0b2e:	4b5e      	ldr	r3, [pc, #376]	; (80a0ca8 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a0b30:	4a5e      	ldr	r2, [pc, #376]	; (80a0cac <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0b32:	4618      	mov	r0, r3
 80a0b34:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0b36:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0b3a:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b3c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0b40:	b292      	uxth	r2, r2
 80a0b42:	2a00      	cmp	r2, #0
 80a0b44:	d0ec      	beq.n	80a0b20 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0b46:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0b4a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0b4e:	f10e 0503 	add.w	r5, lr, #3
 80a0b52:	3a03      	subs	r2, #3
 80a0b54:	b292      	uxth	r2, r2
 80a0b56:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0b5a:	f89e 2000 	ldrb.w	r2, [lr]
 80a0b5e:	b2d2      	uxtb	r2, r2
 80a0b60:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0b64:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a0b68:	b2d2      	uxtb	r2, r2
 80a0b6a:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0b6e:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a0b72:	b2d2      	uxtb	r2, r2
 80a0b74:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0b78:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0b7c:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a0b80:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a0b84:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a0b88:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a0b8c:	ea42 020c 	orr.w	r2, r2, ip
 80a0b90:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0b92:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a0b96:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0b98:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0b9a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0b9e:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0ba2:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0ba6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0baa:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0bac:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0bb0:	9e03      	ldr	r6, [sp, #12]
 80a0bb2:	9a04      	ldr	r2, [sp, #16]
 80a0bb4:	4216      	tst	r6, r2
 80a0bb6:	d023      	beq.n	80a0c00 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0bb8:	685a      	ldr	r2, [r3, #4]
 80a0bba:	9e05      	ldr	r6, [sp, #20]
 80a0bbc:	1b92      	subs	r2, r2, r6
 80a0bbe:	2a4f      	cmp	r2, #79	; 0x4f
 80a0bc0:	d9fa      	bls.n	80a0bb8 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a0bc2:	79e2      	ldrb	r2, [r4, #7]
 80a0bc4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0bc8:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0bcc:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0bd0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0bd4:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0bd8:	6842      	ldr	r2, [r0, #4]
 80a0bda:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0bdc:	685a      	ldr	r2, [r3, #4]
 80a0bde:	9e05      	ldr	r6, [sp, #20]
 80a0be0:	1b92      	subs	r2, r2, r6
 80a0be2:	2a07      	cmp	r2, #7
 80a0be4:	d9fa      	bls.n	80a0bdc <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a0be6:	9a04      	ldr	r2, [sp, #16]
 80a0be8:	0852      	lsrs	r2, r2, #1
 80a0bea:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0bec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0bf0:	3201      	adds	r2, #1
 80a0bf2:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0bf4:	2a17      	cmp	r2, #23
 80a0bf6:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0bfa:	d9cc      	bls.n	80a0b96 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0bfc:	46ae      	mov	lr, r5
 80a0bfe:	e79d      	b.n	80a0b3c <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0c00:	685a      	ldr	r2, [r3, #4]
 80a0c02:	9e05      	ldr	r6, [sp, #20]
 80a0c04:	1b92      	subs	r2, r2, r6
 80a0c06:	2a18      	cmp	r2, #24
 80a0c08:	d9fa      	bls.n	80a0c00 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a0c0a:	79e2      	ldrb	r2, [r4, #7]
 80a0c0c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c10:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0c14:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0c18:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0c1c:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0c20:	6842      	ldr	r2, [r0, #4]
 80a0c22:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0c24:	685a      	ldr	r2, [r3, #4]
 80a0c26:	9e05      	ldr	r6, [sp, #20]
 80a0c28:	1b92      	subs	r2, r2, r6
 80a0c2a:	2a45      	cmp	r2, #69	; 0x45
 80a0c2c:	d9fa      	bls.n	80a0c24 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a0c2e:	e7da      	b.n	80a0be6 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0c30:	46ae      	mov	lr, r5
 80a0c32:	f7ff bbda 	b.w	80a03ea <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a0c36:	4a1d      	ldr	r2, [pc, #116]	; (80a0cac <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a0c38:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a0c3c:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0c3e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0c42:	b29b      	uxth	r3, r3
 80a0c44:	2b00      	cmp	r3, #0
 80a0c46:	f43f af6b 	beq.w	80a0b20 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a0c4a:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0c4c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0c50:	f10e 0104 	add.w	r1, lr, #4
 80a0c54:	3b04      	subs	r3, #4
 80a0c56:	b29b      	uxth	r3, r3
 80a0c58:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0c5c:	f89e 3000 	ldrb.w	r3, [lr]
 80a0c60:	b2db      	uxtb	r3, r3
 80a0c62:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0c66:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0c6a:	b2db      	uxtb	r3, r3
 80a0c6c:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0c70:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0c74:	b2db      	uxtb	r3, r3
 80a0c76:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0c7a:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a0c7e:	b2db      	uxtb	r3, r3
 80a0c80:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0c84:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0c88:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a0c8c:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a0c90:	043f      	lsls	r7, r7, #16
 80a0c92:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a0c96:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a0c9a:	4303      	orrs	r3, r0
 80a0c9c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a0ca0:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0ca2:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0ca6:	e07e      	b.n	80a0da6 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a0ca8:	e0001000 	.word	0xe0001000
 80a0cac:	20000098 	.word	0x20000098
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0cb0:	4600      	mov	r0, r0
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	bf00      	nop
 80a0d00:	bf00      	nop
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
 80a0d0e:	bf00      	nop
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a0d1e:	79e3      	ldrb	r3, [r4, #7]
 80a0d20:	6810      	ldr	r0, [r2, #0]
 80a0d22:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d26:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0d2a:	88bf      	ldrh	r7, [r7, #4]
 80a0d2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0d30:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0d32:	4600      	mov	r0, r0
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0d90:	9b04      	ldr	r3, [sp, #16]
 80a0d92:	085b      	lsrs	r3, r3, #1
 80a0d94:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0d96:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0d9a:	3301      	adds	r3, #1
 80a0d9c:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a0d9e:	2b1f      	cmp	r3, #31
 80a0da0:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0da4:	d87e      	bhi.n	80a0ea4 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a0da6:	79e3      	ldrb	r3, [r4, #7]
 80a0da8:	6810      	ldr	r0, [r2, #0]
 80a0daa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0dae:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0db2:	88bf      	ldrh	r7, [r7, #4]
 80a0db4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0db8:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0dba:	9803      	ldr	r0, [sp, #12]
 80a0dbc:	9b04      	ldr	r3, [sp, #16]
 80a0dbe:	4218      	tst	r0, r3
 80a0dc0:	f47f af76 	bne.w	80a0cb0 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0dc4:	4600      	mov	r0, r0
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a0dec:	79e3      	ldrb	r3, [r4, #7]
 80a0dee:	6810      	ldr	r0, [r2, #0]
 80a0df0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0df4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0df8:	88bf      	ldrh	r7, [r7, #4]
 80a0dfa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0dfe:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0e00:	4600      	mov	r0, r0
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
 80a0e24:	bf00      	nop
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
 80a0e54:	bf00      	nop
 80a0e56:	bf00      	nop
 80a0e58:	bf00      	nop
 80a0e5a:	bf00      	nop
 80a0e5c:	bf00      	nop
 80a0e5e:	bf00      	nop
 80a0e60:	bf00      	nop
 80a0e62:	bf00      	nop
 80a0e64:	bf00      	nop
 80a0e66:	bf00      	nop
 80a0e68:	bf00      	nop
 80a0e6a:	bf00      	nop
 80a0e6c:	bf00      	nop
 80a0e6e:	bf00      	nop
 80a0e70:	bf00      	nop
 80a0e72:	bf00      	nop
 80a0e74:	bf00      	nop
 80a0e76:	bf00      	nop
 80a0e78:	bf00      	nop
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	e775      	b.n	80a0d90 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a0ea4:	468e      	mov	lr, r1
 80a0ea6:	e6ca      	b.n	80a0c3e <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a0ea8:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a0eaa:	2903      	cmp	r1, #3
 80a0eac:	f000 812e 	beq.w	80a110c <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0eb0:	4a1e      	ldr	r2, [pc, #120]	; (80a0f2c <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0eb2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0eb6:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0eb8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0ebc:	b29b      	uxth	r3, r3
 80a0ebe:	2b00      	cmp	r3, #0
 80a0ec0:	f43f ae2e 	beq.w	80a0b20 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0ec4:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0ec6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0eca:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a0ecc:	3b03      	subs	r3, #3
 80a0ece:	b29b      	uxth	r3, r3
 80a0ed0:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0ed4:	f89e 3000 	ldrb.w	r3, [lr]
 80a0ed8:	f10e 0103 	add.w	r1, lr, #3
 80a0edc:	b2db      	uxtb	r3, r3
 80a0ede:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0ee2:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0ee6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0eea:	b2db      	uxtb	r3, r3
 80a0eec:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a0ef0:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0ef4:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a0ef8:	b2db      	uxtb	r3, r3
 80a0efa:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0efe:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0f02:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f06:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0f0a:	021b      	lsls	r3, r3, #8
 80a0f0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0f10:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f14:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a0f18:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0f1c:	433b      	orrs	r3, r7
 80a0f1e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0f20:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a0f24:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a0f28:	e07d      	b.n	80a1026 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a0f2a:	bf00      	nop
 80a0f2c:	20000098 	.word	0x20000098
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a0f30:	9b04      	ldr	r3, [sp, #16]
 80a0f32:	085b      	lsrs	r3, r3, #1
 80a0f34:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f36:	4600      	mov	r0, r0
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
 80a0f60:	bf00      	nop
 80a0f62:	bf00      	nop
 80a0f64:	bf00      	nop
 80a0f66:	bf00      	nop
 80a0f68:	bf00      	nop
 80a0f6a:	bf00      	nop
 80a0f6c:	bf00      	nop
 80a0f6e:	bf00      	nop
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
 80a0f76:	bf00      	nop
 80a0f78:	bf00      	nop
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
 80a0f86:	bf00      	nop
 80a0f88:	bf00      	nop
 80a0f8a:	bf00      	nop
 80a0f8c:	bf00      	nop
 80a0f8e:	bf00      	nop
 80a0f90:	bf00      	nop
 80a0f92:	bf00      	nop
 80a0f94:	bf00      	nop
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
 80a0fae:	bf00      	nop
 80a0fb0:	bf00      	nop
 80a0fb2:	bf00      	nop
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a0fbc:	79e0      	ldrb	r0, [r4, #7]
 80a0fbe:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a0fc0:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a0fc4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a0fc8:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a0fcc:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0fd0:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a0fd4:	3301      	adds	r3, #1
 80a0fd6:	b2db      	uxtb	r3, r3
 80a0fd8:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a0fdc:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0fe0:	4600      	mov	r0, r0
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
          if(j==24) break;
 80a100a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a100e:	2b18      	cmp	r3, #24
 80a1010:	d07a      	beq.n	80a1108 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a1012:	79e3      	ldrb	r3, [r4, #7]
 80a1014:	6810      	ldr	r0, [r2, #0]
 80a1016:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a101a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a101e:	88bf      	ldrh	r7, [r7, #4]
 80a1020:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1024:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a1026:	9803      	ldr	r0, [sp, #12]
 80a1028:	9b04      	ldr	r3, [sp, #16]
 80a102a:	4218      	tst	r0, r3
 80a102c:	d180      	bne.n	80a0f30 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a102e:	4600      	mov	r0, r0
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a1050:	79e3      	ldrb	r3, [r4, #7]
 80a1052:	6810      	ldr	r0, [r2, #0]
 80a1054:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1058:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a105c:	88bf      	ldrh	r7, [r7, #4]
 80a105e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1062:	831f      	strh	r7, [r3, #24]
          j++;
 80a1064:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1068:	3301      	adds	r3, #1
 80a106a:	b2db      	uxtb	r3, r3
 80a106c:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a1070:	9b04      	ldr	r3, [sp, #16]
 80a1072:	085b      	lsrs	r3, r3, #1
 80a1074:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1076:	4600      	mov	r0, r0
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
 80a10d2:	bf00      	nop
 80a10d4:	bf00      	nop
 80a10d6:	bf00      	nop
 80a10d8:	bf00      	nop
 80a10da:	bf00      	nop
 80a10dc:	bf00      	nop
 80a10de:	bf00      	nop
 80a10e0:	bf00      	nop
 80a10e2:	bf00      	nop
 80a10e4:	bf00      	nop
 80a10e6:	bf00      	nop
 80a10e8:	bf00      	nop
 80a10ea:	bf00      	nop
 80a10ec:	bf00      	nop
 80a10ee:	bf00      	nop
 80a10f0:	bf00      	nop
 80a10f2:	bf00      	nop
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
          if(j==24) break;
 80a1100:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1104:	2b18      	cmp	r3, #24
 80a1106:	d184      	bne.n	80a1012 <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1108:	468e      	mov	lr, r1
 80a110a:	e6d5      	b.n	80a0eb8 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a110c:	4a17      	ldr	r2, [pc, #92]	; (80a116c <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a110e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1112:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1114:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1118:	b29b      	uxth	r3, r3
 80a111a:	2b00      	cmp	r3, #0
 80a111c:	f43f ad00 	beq.w	80a0b20 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1120:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1122:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1126:	f10e 0103 	add.w	r1, lr, #3
 80a112a:	3b03      	subs	r3, #3
 80a112c:	b29b      	uxth	r3, r3
 80a112e:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1132:	f89e 3000 	ldrb.w	r3, [lr]
 80a1136:	b2db      	uxtb	r3, r3
 80a1138:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a113c:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1140:	b2db      	uxtb	r3, r3
 80a1142:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a1146:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a114a:	b2db      	uxtb	r3, r3
 80a114c:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1150:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1154:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1158:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a115c:	021b      	lsls	r3, r3, #8
 80a115e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1162:	4303      	orrs	r3, r0
 80a1164:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1166:	f88d 6005 	strb.w	r6, [sp, #5]
 80a116a:	e0e0      	b.n	80a132e <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a116c:	20000098 	.word	0x20000098
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1170:	4600      	mov	r0, r0
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	bf00      	nop
 80a11da:	bf00      	nop
 80a11dc:	bf00      	nop
 80a11de:	bf00      	nop
 80a11e0:	bf00      	nop
 80a11e2:	bf00      	nop
 80a11e4:	bf00      	nop
 80a11e6:	bf00      	nop
 80a11e8:	bf00      	nop
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a1292:	79e3      	ldrb	r3, [r4, #7]
 80a1294:	6810      	ldr	r0, [r2, #0]
 80a1296:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a129a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a129e:	88bf      	ldrh	r7, [r7, #4]
 80a12a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a12a4:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a12a6:	4600      	mov	r0, r0
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1316:	9b04      	ldr	r3, [sp, #16]
 80a1318:	085b      	lsrs	r3, r3, #1
 80a131a:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a131c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1320:	3301      	adds	r3, #1
 80a1322:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1324:	2b17      	cmp	r3, #23
 80a1326:	f88d 3005 	strb.w	r3, [sp, #5]
 80a132a:	f200 80e3 	bhi.w	80a14f4 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a132e:	79e3      	ldrb	r3, [r4, #7]
 80a1330:	6810      	ldr	r0, [r2, #0]
 80a1332:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1336:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a133a:	88bf      	ldrh	r7, [r7, #4]
 80a133c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1340:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1342:	9803      	ldr	r0, [sp, #12]
 80a1344:	9b04      	ldr	r3, [sp, #16]
 80a1346:	4218      	tst	r0, r3
 80a1348:	f47f af12 	bne.w	80a1170 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a134c:	4600      	mov	r0, r0
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a13ce:	79e3      	ldrb	r3, [r4, #7]
 80a13d0:	6810      	ldr	r0, [r2, #0]
 80a13d2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a13d6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a13da:	88bf      	ldrh	r7, [r7, #4]
 80a13dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a13e0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a13e2:	4600      	mov	r0, r0
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	e710      	b.n	80a1316 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a14f4:	468e      	mov	lr, r1
 80a14f6:	e60d      	b.n	80a1114 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a14f8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a14f8:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a14fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a14fc:	428b      	cmp	r3, r1
 80a14fe:	d945      	bls.n	80a158c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a1500:	7a05      	ldrb	r5, [r0, #8]
 80a1502:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a1506:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a150a:	b2d6      	uxtb	r6, r2
 80a150c:	b145      	cbz	r5, 80a1520 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a150e:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a1510:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a1512:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a1514:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1518:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a151c:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1520:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a1524:	68c7      	ldr	r7, [r0, #12]
 80a1526:	f1bc 0f06 	cmp.w	ip, #6
 80a152a:	bf0c      	ite	eq
 80a152c:	2504      	moveq	r5, #4
 80a152e:	2503      	movne	r5, #3
 80a1530:	4369      	muls	r1, r5
 80a1532:	f1bc 0f08 	cmp.w	ip, #8
 80a1536:	eb07 0501 	add.w	r5, r7, r1
 80a153a:	d824      	bhi.n	80a1586 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a153c:	f04f 0e01 	mov.w	lr, #1
 80a1540:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a1544:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a1548:	d10c      	bne.n	80a1564 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a154a:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a154e:	d10d      	bne.n	80a156c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a1550:	f01e 0f10 	tst.w	lr, #16
 80a1554:	d017      	beq.n	80a1586 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a1556:	2bff      	cmp	r3, #255	; 0xff
 80a1558:	bf08      	it	eq
 80a155a:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a155c:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a155e:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a1560:	70ac      	strb	r4, [r5, #2]
        } break;
 80a1562:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1564:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a1566:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a1568:	70ae      	strb	r6, [r5, #2]
        } break;
 80a156a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a156c:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a156e:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a1570:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1572:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1574:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1576:	b90b      	cbnz	r3, 80a157c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1578:	b2d2      	uxtb	r2, r2
 80a157a:	e002      	b.n	80a1582 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a157c:	435a      	muls	r2, r3
 80a157e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a1582:	70ea      	strb	r2, [r5, #3]
        } break;
 80a1584:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a1586:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1588:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a158a:	70ae      	strb	r6, [r5, #2]
 80a158c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a158e <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a158e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a1592:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a1596:	4770      	bx	lr

080a1598 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a1598:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a159a:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a159c:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a159e:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a15a0:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a15a2:	d01e      	beq.n	80a15e2 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a15a4:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a15a6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a15aa:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a15ac:	d00c      	beq.n	80a15c8 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a15ae:	29ff      	cmp	r1, #255	; 0xff
 80a15b0:	bf0f      	iteee	eq
 80a15b2:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a15b6:	0211      	lslne	r1, r2, #8
 80a15b8:	f101 31ff 	addne.w	r1, r1, #4294967295
 80a15bc:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a15c0:	bf0c      	ite	eq
 80a15c2:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a15c6:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a15c8:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a15ca:	1b29      	subs	r1, r5, r4
 80a15cc:	8886      	ldrh	r6, [r0, #4]
 80a15ce:	b289      	uxth	r1, r1
 80a15d0:	428e      	cmp	r6, r1
 80a15d2:	d905      	bls.n	80a15e0 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a15d4:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a15d6:	4359      	muls	r1, r3
 80a15d8:	1209      	asrs	r1, r1, #8
 80a15da:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a15de:	e7f4      	b.n	80a15ca <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a15e0:	7202      	strb	r2, [r0, #8]
 80a15e2:	bd70      	pop	{r4, r5, r6, pc}

080a15e4 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a15e4:	b508      	push	{r3, lr}
 80a15e6:	f000 f80d 	bl	80a1604 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a15ea:	f000 f80b 	bl	80a1604 <HAL_Pin_Map>
 80a15ee:	4b01      	ldr	r3, [pc, #4]	; (80a15f4 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a15f0:	6018      	str	r0, [r3, #0]
 80a15f2:	bd08      	pop	{r3, pc}
 80a15f4:	20000098 	.word	0x20000098

080a15f8 <_GLOBAL__sub_I__ZN7MPU9250C2Ev>:
 80a15f8:	f000 b804 	b.w	80a1604 <HAL_Pin_Map>

080a15fc <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
 80a15fc:	f000 b802 	b.w	80a1604 <HAL_Pin_Map>

080a1600 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a1600:	f000 b800 	b.w	80a1604 <HAL_Pin_Map>

080a1604 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1604:	b508      	push	{r3, lr}
 80a1606:	4b02      	ldr	r3, [pc, #8]	; (80a1610 <HAL_Pin_Map+0xc>)
 80a1608:	681b      	ldr	r3, [r3, #0]
 80a160a:	681b      	ldr	r3, [r3, #0]
 80a160c:	9301      	str	r3, [sp, #4]
 80a160e:	bd08      	pop	{r3, pc}
 80a1610:	080601b0 	.word	0x080601b0

080a1614 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1614:	b508      	push	{r3, lr}
 80a1616:	4b02      	ldr	r3, [pc, #8]	; (80a1620 <HAL_Validate_Pin_Function+0xc>)
 80a1618:	681b      	ldr	r3, [r3, #0]
 80a161a:	685b      	ldr	r3, [r3, #4]
 80a161c:	9301      	str	r3, [sp, #4]
 80a161e:	bd08      	pop	{r3, pc}
 80a1620:	080601b0 	.word	0x080601b0

080a1624 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1624:	b508      	push	{r3, lr}
 80a1626:	4b02      	ldr	r3, [pc, #8]	; (80a1630 <HAL_Pin_Mode+0xc>)
 80a1628:	681b      	ldr	r3, [r3, #0]
 80a162a:	689b      	ldr	r3, [r3, #8]
 80a162c:	9301      	str	r3, [sp, #4]
 80a162e:	bd08      	pop	{r3, pc}
 80a1630:	080601b0 	.word	0x080601b0

080a1634 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1634:	b508      	push	{r3, lr}
 80a1636:	4b02      	ldr	r3, [pc, #8]	; (80a1640 <HAL_Get_Pin_Mode+0xc>)
 80a1638:	681b      	ldr	r3, [r3, #0]
 80a163a:	68db      	ldr	r3, [r3, #12]
 80a163c:	9301      	str	r3, [sp, #4]
 80a163e:	bd08      	pop	{r3, pc}
 80a1640:	080601b0 	.word	0x080601b0

080a1644 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1644:	b508      	push	{r3, lr}
 80a1646:	4b02      	ldr	r3, [pc, #8]	; (80a1650 <HAL_GPIO_Write+0xc>)
 80a1648:	681b      	ldr	r3, [r3, #0]
 80a164a:	691b      	ldr	r3, [r3, #16]
 80a164c:	9301      	str	r3, [sp, #4]
 80a164e:	bd08      	pop	{r3, pc}
 80a1650:	080601b0 	.word	0x080601b0

080a1654 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1654:	b508      	push	{r3, lr}
 80a1656:	4b02      	ldr	r3, [pc, #8]	; (80a1660 <HAL_SPI_Init+0xc>)
 80a1658:	681b      	ldr	r3, [r3, #0]
 80a165a:	69db      	ldr	r3, [r3, #28]
 80a165c:	9301      	str	r3, [sp, #4]
 80a165e:	bd08      	pop	{r3, pc}
 80a1660:	080601b4 	.word	0x080601b4

080a1664 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1664:	b508      	push	{r3, lr}
 80a1666:	4b02      	ldr	r3, [pc, #8]	; (80a1670 <HAL_SPI_Is_Enabled+0xc>)
 80a1668:	681b      	ldr	r3, [r3, #0]
 80a166a:	6a1b      	ldr	r3, [r3, #32]
 80a166c:	9301      	str	r3, [sp, #4]
 80a166e:	bd08      	pop	{r3, pc}
 80a1670:	080601b4 	.word	0x080601b4

080a1674 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1674:	b508      	push	{r3, lr}
 80a1676:	4b02      	ldr	r3, [pc, #8]	; (80a1680 <HAL_RNG_GetRandomNumber+0xc>)
 80a1678:	681b      	ldr	r3, [r3, #0]
 80a167a:	685b      	ldr	r3, [r3, #4]
 80a167c:	9301      	str	r3, [sp, #4]
 80a167e:	bd08      	pop	{r3, pc}
 80a1680:	0806019c 	.word	0x0806019c

080a1684 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1684:	b508      	push	{r3, lr}
 80a1686:	4b02      	ldr	r3, [pc, #8]	; (80a1690 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1688:	681b      	ldr	r3, [r3, #0]
 80a168a:	691b      	ldr	r3, [r3, #16]
 80a168c:	9301      	str	r3, [sp, #4]
 80a168e:	bd08      	pop	{r3, pc}
 80a1690:	0806019c 	.word	0x0806019c

080a1694 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1694:	b508      	push	{r3, lr}
 80a1696:	4b02      	ldr	r3, [pc, #8]	; (80a16a0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1698:	681b      	ldr	r3, [r3, #0]
 80a169a:	695b      	ldr	r3, [r3, #20]
 80a169c:	9301      	str	r3, [sp, #4]
 80a169e:	bd08      	pop	{r3, pc}
 80a16a0:	0806019c 	.word	0x0806019c

080a16a4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a16a4:	b508      	push	{r3, lr}
 80a16a6:	4b02      	ldr	r3, [pc, #8]	; (80a16b0 <os_mutex_create+0xc>)
 80a16a8:	681b      	ldr	r3, [r3, #0]
 80a16aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a16ac:	9301      	str	r3, [sp, #4]
 80a16ae:	bd08      	pop	{r3, pc}
 80a16b0:	080601d0 	.word	0x080601d0

080a16b4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a16b4:	b508      	push	{r3, lr}
 80a16b6:	4b02      	ldr	r3, [pc, #8]	; (80a16c0 <HAL_USART_Init+0xc>)
 80a16b8:	681b      	ldr	r3, [r3, #0]
 80a16ba:	699b      	ldr	r3, [r3, #24]
 80a16bc:	9301      	str	r3, [sp, #4]
 80a16be:	bd08      	pop	{r3, pc}
 80a16c0:	080601c4 	.word	0x080601c4

080a16c4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a16c4:	b508      	push	{r3, lr}
 80a16c6:	4b02      	ldr	r3, [pc, #8]	; (80a16d0 <HAL_USART_Write_Data+0xc>)
 80a16c8:	681b      	ldr	r3, [r3, #0]
 80a16ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a16cc:	9301      	str	r3, [sp, #4]
 80a16ce:	bd08      	pop	{r3, pc}
 80a16d0:	080601c4 	.word	0x080601c4

080a16d4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a16d4:	b508      	push	{r3, lr}
 80a16d6:	4b02      	ldr	r3, [pc, #8]	; (80a16e0 <HAL_USART_Available_Data+0xc>)
 80a16d8:	681b      	ldr	r3, [r3, #0]
 80a16da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a16dc:	9301      	str	r3, [sp, #4]
 80a16de:	bd08      	pop	{r3, pc}
 80a16e0:	080601c4 	.word	0x080601c4

080a16e4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a16e4:	b508      	push	{r3, lr}
 80a16e6:	4b02      	ldr	r3, [pc, #8]	; (80a16f0 <HAL_USART_Read_Data+0xc>)
 80a16e8:	681b      	ldr	r3, [r3, #0]
 80a16ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a16ec:	9301      	str	r3, [sp, #4]
 80a16ee:	bd08      	pop	{r3, pc}
 80a16f0:	080601c4 	.word	0x080601c4

080a16f4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a16f4:	b508      	push	{r3, lr}
 80a16f6:	4b02      	ldr	r3, [pc, #8]	; (80a1700 <HAL_USART_Peek_Data+0xc>)
 80a16f8:	681b      	ldr	r3, [r3, #0]
 80a16fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a16fc:	9301      	str	r3, [sp, #4]
 80a16fe:	bd08      	pop	{r3, pc}
 80a1700:	080601c4 	.word	0x080601c4

080a1704 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1704:	b508      	push	{r3, lr}
 80a1706:	4b02      	ldr	r3, [pc, #8]	; (80a1710 <HAL_USART_Flush_Data+0xc>)
 80a1708:	681b      	ldr	r3, [r3, #0]
 80a170a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a170c:	9301      	str	r3, [sp, #4]
 80a170e:	bd08      	pop	{r3, pc}
 80a1710:	080601c4 	.word	0x080601c4

080a1714 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1714:	b508      	push	{r3, lr}
 80a1716:	4b02      	ldr	r3, [pc, #8]	; (80a1720 <HAL_USART_Is_Enabled+0xc>)
 80a1718:	681b      	ldr	r3, [r3, #0]
 80a171a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a171c:	9301      	str	r3, [sp, #4]
 80a171e:	bd08      	pop	{r3, pc}
 80a1720:	080601c4 	.word	0x080601c4

080a1724 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1724:	b508      	push	{r3, lr}
 80a1726:	4b02      	ldr	r3, [pc, #8]	; (80a1730 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1728:	681b      	ldr	r3, [r3, #0]
 80a172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a172c:	9301      	str	r3, [sp, #4]
 80a172e:	bd08      	pop	{r3, pc}
 80a1730:	080601c4 	.word	0x080601c4

080a1734 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1734:	b508      	push	{r3, lr}
 80a1736:	4b02      	ldr	r3, [pc, #8]	; (80a1740 <HAL_I2C_Write_Data+0xc>)
 80a1738:	681b      	ldr	r3, [r3, #0]
 80a173a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a173c:	9301      	str	r3, [sp, #4]
 80a173e:	bd08      	pop	{r3, pc}
 80a1740:	080601ac 	.word	0x080601ac

080a1744 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1744:	b508      	push	{r3, lr}
 80a1746:	4b02      	ldr	r3, [pc, #8]	; (80a1750 <HAL_I2C_Available_Data+0xc>)
 80a1748:	681b      	ldr	r3, [r3, #0]
 80a174a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a174c:	9301      	str	r3, [sp, #4]
 80a174e:	bd08      	pop	{r3, pc}
 80a1750:	080601ac 	.word	0x080601ac

080a1754 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1754:	b508      	push	{r3, lr}
 80a1756:	4b02      	ldr	r3, [pc, #8]	; (80a1760 <HAL_I2C_Read_Data+0xc>)
 80a1758:	681b      	ldr	r3, [r3, #0]
 80a175a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a175c:	9301      	str	r3, [sp, #4]
 80a175e:	bd08      	pop	{r3, pc}
 80a1760:	080601ac 	.word	0x080601ac

080a1764 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1764:	b508      	push	{r3, lr}
 80a1766:	4b02      	ldr	r3, [pc, #8]	; (80a1770 <HAL_I2C_Peek_Data+0xc>)
 80a1768:	681b      	ldr	r3, [r3, #0]
 80a176a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a176c:	9301      	str	r3, [sp, #4]
 80a176e:	bd08      	pop	{r3, pc}
 80a1770:	080601ac 	.word	0x080601ac

080a1774 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1774:	b508      	push	{r3, lr}
 80a1776:	4b02      	ldr	r3, [pc, #8]	; (80a1780 <HAL_I2C_Flush_Data+0xc>)
 80a1778:	681b      	ldr	r3, [r3, #0]
 80a177a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a177c:	9301      	str	r3, [sp, #4]
 80a177e:	bd08      	pop	{r3, pc}
 80a1780:	080601ac 	.word	0x080601ac

080a1784 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1784:	b508      	push	{r3, lr}
 80a1786:	4b02      	ldr	r3, [pc, #8]	; (80a1790 <HAL_I2C_Is_Enabled+0xc>)
 80a1788:	681b      	ldr	r3, [r3, #0]
 80a178a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a178c:	9301      	str	r3, [sp, #4]
 80a178e:	bd08      	pop	{r3, pc}
 80a1790:	080601ac 	.word	0x080601ac

080a1794 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1794:	b508      	push	{r3, lr}
 80a1796:	4b03      	ldr	r3, [pc, #12]	; (80a17a4 <HAL_I2C_Init+0x10>)
 80a1798:	681b      	ldr	r3, [r3, #0]
 80a179a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a179e:	9301      	str	r3, [sp, #4]
 80a17a0:	bd08      	pop	{r3, pc}
 80a17a2:	0000      	.short	0x0000
 80a17a4:	080601ac 	.word	0x080601ac

080a17a8 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
 80a17a8:	b508      	push	{r3, lr}
 80a17aa:	4b02      	ldr	r3, [pc, #8]	; (80a17b4 <HAL_Tone_Start+0xc>)
 80a17ac:	681b      	ldr	r3, [r3, #0]
 80a17ae:	681b      	ldr	r3, [r3, #0]
 80a17b0:	9301      	str	r3, [sp, #4]
 80a17b2:	bd08      	pop	{r3, pc}
 80a17b4:	080601a8 	.word	0x080601a8

080a17b8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a17b8:	b508      	push	{r3, lr}
 80a17ba:	4b02      	ldr	r3, [pc, #8]	; (80a17c4 <HAL_USB_USART_Init+0xc>)
 80a17bc:	681b      	ldr	r3, [r3, #0]
 80a17be:	681b      	ldr	r3, [r3, #0]
 80a17c0:	9301      	str	r3, [sp, #4]
 80a17c2:	bd08      	pop	{r3, pc}
 80a17c4:	080601d8 	.word	0x080601d8

080a17c8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a17c8:	b508      	push	{r3, lr}
 80a17ca:	4b02      	ldr	r3, [pc, #8]	; (80a17d4 <HAL_USB_USART_Begin+0xc>)
 80a17cc:	681b      	ldr	r3, [r3, #0]
 80a17ce:	685b      	ldr	r3, [r3, #4]
 80a17d0:	9301      	str	r3, [sp, #4]
 80a17d2:	bd08      	pop	{r3, pc}
 80a17d4:	080601d8 	.word	0x080601d8

080a17d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a17d8:	b508      	push	{r3, lr}
 80a17da:	4b02      	ldr	r3, [pc, #8]	; (80a17e4 <HAL_USB_USART_Available_Data+0xc>)
 80a17dc:	681b      	ldr	r3, [r3, #0]
 80a17de:	691b      	ldr	r3, [r3, #16]
 80a17e0:	9301      	str	r3, [sp, #4]
 80a17e2:	bd08      	pop	{r3, pc}
 80a17e4:	080601d8 	.word	0x080601d8

080a17e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a17e8:	b508      	push	{r3, lr}
 80a17ea:	4b02      	ldr	r3, [pc, #8]	; (80a17f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a17ec:	681b      	ldr	r3, [r3, #0]
 80a17ee:	695b      	ldr	r3, [r3, #20]
 80a17f0:	9301      	str	r3, [sp, #4]
 80a17f2:	bd08      	pop	{r3, pc}
 80a17f4:	080601d8 	.word	0x080601d8

080a17f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a17f8:	b508      	push	{r3, lr}
 80a17fa:	4b02      	ldr	r3, [pc, #8]	; (80a1804 <HAL_USB_USART_Receive_Data+0xc>)
 80a17fc:	681b      	ldr	r3, [r3, #0]
 80a17fe:	699b      	ldr	r3, [r3, #24]
 80a1800:	9301      	str	r3, [sp, #4]
 80a1802:	bd08      	pop	{r3, pc}
 80a1804:	080601d8 	.word	0x080601d8

080a1808 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1808:	b508      	push	{r3, lr}
 80a180a:	4b02      	ldr	r3, [pc, #8]	; (80a1814 <HAL_USB_USART_Send_Data+0xc>)
 80a180c:	681b      	ldr	r3, [r3, #0]
 80a180e:	69db      	ldr	r3, [r3, #28]
 80a1810:	9301      	str	r3, [sp, #4]
 80a1812:	bd08      	pop	{r3, pc}
 80a1814:	080601d8 	.word	0x080601d8

080a1818 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1818:	b508      	push	{r3, lr}
 80a181a:	4b02      	ldr	r3, [pc, #8]	; (80a1824 <HAL_USB_USART_Flush_Data+0xc>)
 80a181c:	681b      	ldr	r3, [r3, #0]
 80a181e:	6a1b      	ldr	r3, [r3, #32]
 80a1820:	9301      	str	r3, [sp, #4]
 80a1822:	bd08      	pop	{r3, pc}
 80a1824:	080601d8 	.word	0x080601d8

080a1828 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1828:	b508      	push	{r3, lr}
 80a182a:	4b02      	ldr	r3, [pc, #8]	; (80a1834 <inet_gethostbyname+0xc>)
 80a182c:	681b      	ldr	r3, [r3, #0]
 80a182e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1830:	9301      	str	r3, [sp, #4]
 80a1832:	bd08      	pop	{r3, pc}
 80a1834:	080601c0 	.word	0x080601c0

080a1838 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1838:	b508      	push	{r3, lr}
 80a183a:	4b02      	ldr	r3, [pc, #8]	; (80a1844 <set_system_mode+0xc>)
 80a183c:	681b      	ldr	r3, [r3, #0]
 80a183e:	685b      	ldr	r3, [r3, #4]
 80a1840:	9301      	str	r3, [sp, #4]
 80a1842:	bd08      	pop	{r3, pc}
 80a1844:	080601a4 	.word	0x080601a4

080a1848 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1848:	b508      	push	{r3, lr}
 80a184a:	4b02      	ldr	r3, [pc, #8]	; (80a1854 <system_delay_ms+0xc>)
 80a184c:	681b      	ldr	r3, [r3, #0]
 80a184e:	695b      	ldr	r3, [r3, #20]
 80a1850:	9301      	str	r3, [sp, #4]
 80a1852:	bd08      	pop	{r3, pc}
 80a1854:	080601a4 	.word	0x080601a4

080a1858 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1858:	b508      	push	{r3, lr}
 80a185a:	4b03      	ldr	r3, [pc, #12]	; (80a1868 <system_ctrl_set_app_request_handler+0x10>)
 80a185c:	681b      	ldr	r3, [r3, #0]
 80a185e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1862:	9301      	str	r3, [sp, #4]
 80a1864:	bd08      	pop	{r3, pc}
 80a1866:	0000      	.short	0x0000
 80a1868:	080601a4 	.word	0x080601a4

080a186c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a186c:	b508      	push	{r3, lr}
 80a186e:	4b03      	ldr	r3, [pc, #12]	; (80a187c <system_ctrl_set_result+0x10>)
 80a1870:	681b      	ldr	r3, [r3, #0]
 80a1872:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1876:	9301      	str	r3, [sp, #4]
 80a1878:	bd08      	pop	{r3, pc}
 80a187a:	0000      	.short	0x0000
 80a187c:	080601a4 	.word	0x080601a4

080a1880 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1880:	b508      	push	{r3, lr}
 80a1882:	4b02      	ldr	r3, [pc, #8]	; (80a188c <network_connect+0xc>)
 80a1884:	681b      	ldr	r3, [r3, #0]
 80a1886:	685b      	ldr	r3, [r3, #4]
 80a1888:	9301      	str	r3, [sp, #4]
 80a188a:	bd08      	pop	{r3, pc}
 80a188c:	080601c8 	.word	0x080601c8

080a1890 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1890:	b508      	push	{r3, lr}
 80a1892:	4b02      	ldr	r3, [pc, #8]	; (80a189c <network_connecting+0xc>)
 80a1894:	681b      	ldr	r3, [r3, #0]
 80a1896:	689b      	ldr	r3, [r3, #8]
 80a1898:	9301      	str	r3, [sp, #4]
 80a189a:	bd08      	pop	{r3, pc}
 80a189c:	080601c8 	.word	0x080601c8

080a18a0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a18a0:	b508      	push	{r3, lr}
 80a18a2:	4b02      	ldr	r3, [pc, #8]	; (80a18ac <network_disconnect+0xc>)
 80a18a4:	681b      	ldr	r3, [r3, #0]
 80a18a6:	68db      	ldr	r3, [r3, #12]
 80a18a8:	9301      	str	r3, [sp, #4]
 80a18aa:	bd08      	pop	{r3, pc}
 80a18ac:	080601c8 	.word	0x080601c8

080a18b0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a18b0:	b508      	push	{r3, lr}
 80a18b2:	4b02      	ldr	r3, [pc, #8]	; (80a18bc <network_ready+0xc>)
 80a18b4:	681b      	ldr	r3, [r3, #0]
 80a18b6:	691b      	ldr	r3, [r3, #16]
 80a18b8:	9301      	str	r3, [sp, #4]
 80a18ba:	bd08      	pop	{r3, pc}
 80a18bc:	080601c8 	.word	0x080601c8

080a18c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a18c0:	b508      	push	{r3, lr}
 80a18c2:	4b02      	ldr	r3, [pc, #8]	; (80a18cc <network_on+0xc>)
 80a18c4:	681b      	ldr	r3, [r3, #0]
 80a18c6:	695b      	ldr	r3, [r3, #20]
 80a18c8:	9301      	str	r3, [sp, #4]
 80a18ca:	bd08      	pop	{r3, pc}
 80a18cc:	080601c8 	.word	0x080601c8

080a18d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a18d0:	b508      	push	{r3, lr}
 80a18d2:	4b02      	ldr	r3, [pc, #8]	; (80a18dc <network_off+0xc>)
 80a18d4:	681b      	ldr	r3, [r3, #0]
 80a18d6:	699b      	ldr	r3, [r3, #24]
 80a18d8:	9301      	str	r3, [sp, #4]
 80a18da:	bd08      	pop	{r3, pc}
 80a18dc:	080601c8 	.word	0x080601c8

080a18e0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a18e0:	b508      	push	{r3, lr}
 80a18e2:	4b02      	ldr	r3, [pc, #8]	; (80a18ec <network_listen+0xc>)
 80a18e4:	681b      	ldr	r3, [r3, #0]
 80a18e6:	69db      	ldr	r3, [r3, #28]
 80a18e8:	9301      	str	r3, [sp, #4]
 80a18ea:	bd08      	pop	{r3, pc}
 80a18ec:	080601c8 	.word	0x080601c8

080a18f0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a18f0:	b508      	push	{r3, lr}
 80a18f2:	4b02      	ldr	r3, [pc, #8]	; (80a18fc <network_listening+0xc>)
 80a18f4:	681b      	ldr	r3, [r3, #0]
 80a18f6:	6a1b      	ldr	r3, [r3, #32]
 80a18f8:	9301      	str	r3, [sp, #4]
 80a18fa:	bd08      	pop	{r3, pc}
 80a18fc:	080601c8 	.word	0x080601c8

080a1900 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1900:	b508      	push	{r3, lr}
 80a1902:	4b02      	ldr	r3, [pc, #8]	; (80a190c <network_set_listen_timeout+0xc>)
 80a1904:	681b      	ldr	r3, [r3, #0]
 80a1906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1908:	9301      	str	r3, [sp, #4]
 80a190a:	bd08      	pop	{r3, pc}
 80a190c:	080601c8 	.word	0x080601c8

080a1910 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1910:	b508      	push	{r3, lr}
 80a1912:	4b02      	ldr	r3, [pc, #8]	; (80a191c <network_get_listen_timeout+0xc>)
 80a1914:	681b      	ldr	r3, [r3, #0]
 80a1916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1918:	9301      	str	r3, [sp, #4]
 80a191a:	bd08      	pop	{r3, pc}
 80a191c:	080601c8 	.word	0x080601c8

080a1920 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1920:	b508      	push	{r3, lr}
 80a1922:	4b02      	ldr	r3, [pc, #8]	; (80a192c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1924:	681b      	ldr	r3, [r3, #0]
 80a1926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1928:	9301      	str	r3, [sp, #4]
 80a192a:	bd08      	pop	{r3, pc}
 80a192c:	080601cc 	.word	0x080601cc

080a1930 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1930:	b508      	push	{r3, lr}
 80a1932:	4b02      	ldr	r3, [pc, #8]	; (80a193c <malloc+0xc>)
 80a1934:	681b      	ldr	r3, [r3, #0]
 80a1936:	681b      	ldr	r3, [r3, #0]
 80a1938:	9301      	str	r3, [sp, #4]
 80a193a:	bd08      	pop	{r3, pc}
 80a193c:	080601a0 	.word	0x080601a0

080a1940 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1940:	b508      	push	{r3, lr}
 80a1942:	4b02      	ldr	r3, [pc, #8]	; (80a194c <free+0xc>)
 80a1944:	681b      	ldr	r3, [r3, #0]
 80a1946:	685b      	ldr	r3, [r3, #4]
 80a1948:	9301      	str	r3, [sp, #4]
 80a194a:	bd08      	pop	{r3, pc}
 80a194c:	080601a0 	.word	0x080601a0

080a1950 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1950:	4770      	bx	lr

080a1952 <_ZN8SPIClassD0Ev>:
 80a1952:	b510      	push	{r4, lr}
 80a1954:	4604      	mov	r4, r0
 80a1956:	2110      	movs	r1, #16
 80a1958:	f000 fce3 	bl	80a2322 <_ZdlPvj>
 80a195c:	4620      	mov	r0, r4
 80a195e:	bd10      	pop	{r4, pc}

080a1960 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1960:	b570      	push	{r4, r5, r6, lr}
 80a1962:	4604      	mov	r4, r0
 80a1964:	460e      	mov	r6, r1
 80a1966:	4b07      	ldr	r3, [pc, #28]	; (80a1984 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1968:	2500      	movs	r5, #0
 80a196a:	6003      	str	r3, [r0, #0]
 80a196c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1970:	f7ff fe98 	bl	80a16a4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1974:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1976:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1978:	f7ff fe6c 	bl	80a1654 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a197c:	60a5      	str	r5, [r4, #8]
}
 80a197e:	4620      	mov	r0, r4
 80a1980:	bd70      	pop	{r4, r5, r6, pc}
 80a1982:	bf00      	nop
 80a1984:	080a2e78 	.word	0x080a2e78

080a1988 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1988:	7900      	ldrb	r0, [r0, #4]
 80a198a:	f7ff be6b 	b.w	80a1664 <HAL_SPI_Is_Enabled>
	...

080a1990 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1994:	4b03      	ldr	r3, [pc, #12]	; (80a19a4 <_GLOBAL__sub_I_System+0x14>)
 80a1996:	2000      	movs	r0, #0
 80a1998:	7018      	strb	r0, [r3, #0]
 80a199a:	8058      	strh	r0, [r3, #2]
 80a199c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a199e:	f7ff bf4b 	b.w	80a1838 <set_system_mode>
 80a19a2:	bf00      	nop
 80a19a4:	2000009c 	.word	0x2000009c

080a19a8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a19a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a19aa:	4606      	mov	r6, r0
 80a19ac:	460d      	mov	r5, r1
 80a19ae:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a19b0:	2400      	movs	r4, #0
  while (size--) {
 80a19b2:	42bd      	cmp	r5, r7
 80a19b4:	d00c      	beq.n	80a19d0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a19b6:	6833      	ldr	r3, [r6, #0]
 80a19b8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a19bc:	689b      	ldr	r3, [r3, #8]
 80a19be:	4630      	mov	r0, r6
 80a19c0:	4798      	blx	r3
     if (chunk>=0)
 80a19c2:	2800      	cmp	r0, #0
 80a19c4:	db01      	blt.n	80a19ca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a19c6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a19c8:	e7f3      	b.n	80a19b2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a19ca:	2c00      	cmp	r4, #0
 80a19cc:	bf08      	it	eq
 80a19ce:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a19d0:	4620      	mov	r0, r4
 80a19d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a19d4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a19d4:	b570      	push	{r4, r5, r6, lr}
 80a19d6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a19d8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a19da:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a19dc:	b149      	cbz	r1, 80a19f2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a19de:	f001 fa1f 	bl	80a2e20 <strlen>
 80a19e2:	682b      	ldr	r3, [r5, #0]
 80a19e4:	4602      	mov	r2, r0
 80a19e6:	4621      	mov	r1, r4
 80a19e8:	4628      	mov	r0, r5
    }
 80a19ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a19ee:	68db      	ldr	r3, [r3, #12]
 80a19f0:	4718      	bx	r3
    }
 80a19f2:	bd70      	pop	{r4, r5, r6, pc}

080a19f4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a19f4:	6803      	ldr	r3, [r0, #0]
 80a19f6:	689b      	ldr	r3, [r3, #8]
 80a19f8:	4718      	bx	r3

080a19fa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a19fa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a19fc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a19fe:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1a00:	f7ff fff8 	bl	80a19f4 <_ZN5Print5printEc>
  n += print('\n');
 80a1a04:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1a06:	4604      	mov	r4, r0
  n += print('\n');
 80a1a08:	4628      	mov	r0, r5
 80a1a0a:	f7ff fff3 	bl	80a19f4 <_ZN5Print5printEc>
  return n;
}
 80a1a0e:	4420      	add	r0, r4
 80a1a10:	bd38      	pop	{r3, r4, r5, pc}

080a1a12 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1a12:	b538      	push	{r3, r4, r5, lr}
 80a1a14:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1a16:	f7ff ffdd 	bl	80a19d4 <_ZN5Print5writeEPKc>
 80a1a1a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1a1c:	4628      	mov	r0, r5
 80a1a1e:	f7ff ffec 	bl	80a19fa <_ZN5Print7printlnEv>
  return n;
}
 80a1a22:	4420      	add	r0, r4
 80a1a24:	bd38      	pop	{r3, r4, r5, pc}

080a1a26 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1a26:	2a01      	cmp	r2, #1
 80a1a28:	bf98      	it	ls
 80a1a2a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1a2c:	b530      	push	{r4, r5, lr}
 80a1a2e:	460b      	mov	r3, r1
 80a1a30:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1a32:	2100      	movs	r1, #0
 80a1a34:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1a38:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1a3c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1a40:	fb05 3312 	mls	r3, r5, r2, r3
 80a1a44:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1a46:	2b09      	cmp	r3, #9
 80a1a48:	bf94      	ite	ls
 80a1a4a:	3330      	addls	r3, #48	; 0x30
 80a1a4c:	3337      	addhi	r3, #55	; 0x37
 80a1a4e:	b2db      	uxtb	r3, r3
 80a1a50:	4621      	mov	r1, r4
 80a1a52:	f804 3901 	strb.w	r3, [r4], #-1
 80a1a56:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1a58:	2d00      	cmp	r5, #0
 80a1a5a:	d1ef      	bne.n	80a1a3c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1a5c:	f7ff ffba 	bl	80a19d4 <_ZN5Print5writeEPKc>
}
 80a1a60:	b00b      	add	sp, #44	; 0x2c
 80a1a62:	bd30      	pop	{r4, r5, pc}

080a1a64 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1a64:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1a66:	b922      	cbnz	r2, 80a1a72 <_ZN5Print5printEmi+0xe>
 80a1a68:	6803      	ldr	r3, [r0, #0]
 80a1a6a:	b2c9      	uxtb	r1, r1
 80a1a6c:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1a6e:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1a70:	4718      	bx	r3
  else return printNumber(n, base);
 80a1a72:	b2d2      	uxtb	r2, r2
}
 80a1a74:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1a76:	f7ff bfd6 	b.w	80a1a26 <_ZN5Print11printNumberEmh>

080a1a7a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1a7a:	f7ff bff3 	b.w	80a1a64 <_ZN5Print5printEmi>

080a1a7e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1a7e:	2300      	movs	r3, #0
 80a1a80:	461a      	mov	r2, r3
 80a1a82:	4619      	mov	r1, r3
 80a1a84:	6840      	ldr	r0, [r0, #4]
 80a1a86:	f7ff bf1b 	b.w	80a18c0 <network_on>
	...

080a1a8c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1a8c:	4a01      	ldr	r2, [pc, #4]	; (80a1a94 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1a8e:	4b02      	ldr	r3, [pc, #8]	; (80a1a98 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1a90:	601a      	str	r2, [r3, #0]
 80a1a92:	4770      	bx	lr
 80a1a94:	080a2ef6 	.word	0x080a2ef6
 80a1a98:	200000a4 	.word	0x200000a4

080a1a9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1a9c:	4b02      	ldr	r3, [pc, #8]	; (80a1aa8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1a9e:	681a      	ldr	r2, [r3, #0]
 80a1aa0:	4b02      	ldr	r3, [pc, #8]	; (80a1aac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1aa2:	601a      	str	r2, [r3, #0]
 80a1aa4:	4770      	bx	lr
 80a1aa6:	bf00      	nop
 80a1aa8:	20000008 	.word	0x20000008
 80a1aac:	200000a8 	.word	0x200000a8

080a1ab0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1ab0:	2100      	movs	r1, #0
 80a1ab2:	f7ff bec9 	b.w	80a1848 <system_delay_ms>

080a1ab6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1ab6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1ab8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1aba:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1abc:	b113      	cbz	r3, 80a1ac4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1abe:	2203      	movs	r2, #3
 80a1ac0:	4601      	mov	r1, r0
 80a1ac2:	4798      	blx	r3
    }
 80a1ac4:	4620      	mov	r0, r4
 80a1ac6:	bd10      	pop	{r4, pc}

080a1ac8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1ac8:	b510      	push	{r4, lr}
 80a1aca:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1acc:	f7ff fff3 	bl	80a1ab6 <_ZNSt14_Function_baseD1Ev>
 80a1ad0:	4620      	mov	r0, r4
 80a1ad2:	bd10      	pop	{r4, pc}

080a1ad4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1ad4:	4803      	ldr	r0, [pc, #12]	; (80a1ae4 <_GLOBAL__sub_I_RGB+0x10>)
 80a1ad6:	2300      	movs	r3, #0
 80a1ad8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1ada:	4a03      	ldr	r2, [pc, #12]	; (80a1ae8 <_GLOBAL__sub_I_RGB+0x14>)
 80a1adc:	4903      	ldr	r1, [pc, #12]	; (80a1aec <_GLOBAL__sub_I_RGB+0x18>)
 80a1ade:	f000 bc1b 	b.w	80a2318 <__aeabi_atexit>
 80a1ae2:	bf00      	nop
 80a1ae4:	200000ac 	.word	0x200000ac
 80a1ae8:	20000070 	.word	0x20000070
 80a1aec:	080a1ac9 	.word	0x080a1ac9

080a1af0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1af0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1af2:	4b14      	ldr	r3, [pc, #80]	; (80a1b44 <serialEventRun+0x54>)
 80a1af4:	b133      	cbz	r3, 80a1b04 <serialEventRun+0x14>
 80a1af6:	f000 f96b 	bl	80a1dd0 <_Z16_fetch_usbserialv>
 80a1afa:	6803      	ldr	r3, [r0, #0]
 80a1afc:	691b      	ldr	r3, [r3, #16]
 80a1afe:	4798      	blx	r3
 80a1b00:	2800      	cmp	r0, #0
 80a1b02:	dc16      	bgt.n	80a1b32 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1b04:	4b10      	ldr	r3, [pc, #64]	; (80a1b48 <serialEventRun+0x58>)
 80a1b06:	b133      	cbz	r3, 80a1b16 <serialEventRun+0x26>
 80a1b08:	f000 fa36 	bl	80a1f78 <_Z22__fetch_global_Serial1v>
 80a1b0c:	6803      	ldr	r3, [r0, #0]
 80a1b0e:	691b      	ldr	r3, [r3, #16]
 80a1b10:	4798      	blx	r3
 80a1b12:	2800      	cmp	r0, #0
 80a1b14:	dc10      	bgt.n	80a1b38 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1b16:	4b0d      	ldr	r3, [pc, #52]	; (80a1b4c <serialEventRun+0x5c>)
 80a1b18:	b10b      	cbz	r3, 80a1b1e <serialEventRun+0x2e>
 80a1b1a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1b1e:	4b0c      	ldr	r3, [pc, #48]	; (80a1b50 <serialEventRun+0x60>)
 80a1b20:	b17b      	cbz	r3, 80a1b42 <serialEventRun+0x52>
 80a1b22:	f000 f991 	bl	80a1e48 <_Z17_fetch_usbserial1v>
 80a1b26:	6803      	ldr	r3, [r0, #0]
 80a1b28:	691b      	ldr	r3, [r3, #16]
 80a1b2a:	4798      	blx	r3
 80a1b2c:	2800      	cmp	r0, #0
 80a1b2e:	dc06      	bgt.n	80a1b3e <serialEventRun+0x4e>
 80a1b30:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1b32:	f3af 8000 	nop.w
 80a1b36:	e7e5      	b.n	80a1b04 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1b38:	f3af 8000 	nop.w
 80a1b3c:	e7eb      	b.n	80a1b16 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1b3e:	f3af 8000 	nop.w
 80a1b42:	bd08      	pop	{r3, pc}
	...

080a1b54 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1b54:	b508      	push	{r3, lr}
	serialEventRun();
 80a1b56:	f7ff ffcb 	bl	80a1af0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1b5a:	f7ff fd9b 	bl	80a1694 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1b5e:	4b01      	ldr	r3, [pc, #4]	; (80a1b64 <_post_loop+0x10>)
 80a1b60:	6018      	str	r0, [r3, #0]
 80a1b62:	bd08      	pop	{r3, pc}
 80a1b64:	20000550 	.word	0x20000550

080a1b68 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1b68:	4802      	ldr	r0, [pc, #8]	; (80a1b74 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1b6a:	4a03      	ldr	r2, [pc, #12]	; (80a1b78 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1b6c:	4903      	ldr	r1, [pc, #12]	; (80a1b7c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1b6e:	1a12      	subs	r2, r2, r0
 80a1b70:	f001 b91a 	b.w	80a2da8 <memcpy>
 80a1b74:	40024000 	.word	0x40024000
 80a1b78:	40024004 	.word	0x40024004
 80a1b7c:	080a3150 	.word	0x080a3150

080a1b80 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1b80:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1b82:	2300      	movs	r3, #0
 80a1b84:	9300      	str	r3, [sp, #0]
 80a1b86:	461a      	mov	r2, r3
 80a1b88:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1b8c:	f7ff fe6e 	bl	80a186c <system_ctrl_set_result>
}
 80a1b90:	b003      	add	sp, #12
 80a1b92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1b98 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1b98:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1b9a:	8843      	ldrh	r3, [r0, #2]
 80a1b9c:	2b0a      	cmp	r3, #10
 80a1b9e:	d008      	beq.n	80a1bb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1ba0:	2b50      	cmp	r3, #80	; 0x50
 80a1ba2:	d109      	bne.n	80a1bb8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1ba4:	4b09      	ldr	r3, [pc, #36]	; (80a1bcc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1ba6:	681b      	ldr	r3, [r3, #0]
 80a1ba8:	b13b      	cbz	r3, 80a1bba <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1baa:	b003      	add	sp, #12
 80a1bac:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1bb0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1bb2:	f7ff ffe5 	bl	80a1b80 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1bb6:	e006      	b.n	80a1bc6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1bb8:	2300      	movs	r3, #0
 80a1bba:	9300      	str	r3, [sp, #0]
 80a1bbc:	461a      	mov	r2, r3
 80a1bbe:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1bc2:	f7ff fe53 	bl	80a186c <system_ctrl_set_result>
        break;
    }
}
 80a1bc6:	b003      	add	sp, #12
 80a1bc8:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1bcc:	200000bc 	.word	0x200000bc

080a1bd0 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1bd0:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1bd2:	4c10      	ldr	r4, [pc, #64]	; (80a1c14 <module_user_init_hook+0x44>)
 80a1bd4:	4d10      	ldr	r5, [pc, #64]	; (80a1c18 <module_user_init_hook+0x48>)
 80a1bd6:	6823      	ldr	r3, [r4, #0]
 80a1bd8:	42ab      	cmp	r3, r5
 80a1bda:	4b10      	ldr	r3, [pc, #64]	; (80a1c1c <module_user_init_hook+0x4c>)
 80a1bdc:	bf0c      	ite	eq
 80a1bde:	2201      	moveq	r2, #1
 80a1be0:	2200      	movne	r2, #0
 80a1be2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1be4:	d002      	beq.n	80a1bec <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1be6:	f7ff ffbf 	bl	80a1b68 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1bea:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1bec:	f7ff fd42 	bl	80a1674 <HAL_RNG_GetRandomNumber>
 80a1bf0:	4604      	mov	r4, r0
    srand(seed);
 80a1bf2:	f001 f8ed 	bl	80a2dd0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1bf6:	4b0a      	ldr	r3, [pc, #40]	; (80a1c20 <module_user_init_hook+0x50>)
 80a1bf8:	b113      	cbz	r3, 80a1c00 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1bfa:	4620      	mov	r0, r4
 80a1bfc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1c00:	2100      	movs	r1, #0
 80a1c02:	4807      	ldr	r0, [pc, #28]	; (80a1c20 <module_user_init_hook+0x50>)
 80a1c04:	f7ff fe8c 	bl	80a1920 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1c0c:	2100      	movs	r1, #0
 80a1c0e:	4805      	ldr	r0, [pc, #20]	; (80a1c24 <module_user_init_hook+0x54>)
 80a1c10:	f7ff be22 	b.w	80a1858 <system_ctrl_set_app_request_handler>
 80a1c14:	40024000 	.word	0x40024000
 80a1c18:	9a271c1e 	.word	0x9a271c1e
 80a1c1c:	200000c0 	.word	0x200000c0
 80a1c20:	00000000 	.word	0x00000000
 80a1c24:	080a1b99 	.word	0x080a1b99

080a1c28 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1c28:	4770      	bx	lr

080a1c2a <_ZN9IPAddressD0Ev>:
 80a1c2a:	b510      	push	{r4, lr}
 80a1c2c:	4604      	mov	r4, r0
 80a1c2e:	2118      	movs	r1, #24
 80a1c30:	f000 fb77 	bl	80a2322 <_ZdlPvj>
 80a1c34:	4620      	mov	r0, r4
 80a1c36:	bd10      	pop	{r4, pc}

080a1c38 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c3a:	460f      	mov	r7, r1
 80a1c3c:	f100 0608 	add.w	r6, r0, #8
 80a1c40:	1d05      	adds	r5, r0, #4
 80a1c42:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1c44:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1c48:	220a      	movs	r2, #10
 80a1c4a:	4638      	mov	r0, r7
 80a1c4c:	f7ff ff15 	bl	80a1a7a <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1c50:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1c52:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1c54:	d007      	beq.n	80a1c66 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1c56:	2c00      	cmp	r4, #0
 80a1c58:	d0f4      	beq.n	80a1c44 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1c5a:	212e      	movs	r1, #46	; 0x2e
 80a1c5c:	4638      	mov	r0, r7
 80a1c5e:	f7ff fec9 	bl	80a19f4 <_ZN5Print5printEc>
 80a1c62:	4404      	add	r4, r0
 80a1c64:	e7ee      	b.n	80a1c44 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1c66:	4620      	mov	r0, r4
 80a1c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1c6c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1c6c:	b510      	push	{r4, lr}
 80a1c6e:	4604      	mov	r4, r0
 80a1c70:	4b04      	ldr	r3, [pc, #16]	; (80a1c84 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1c72:	2211      	movs	r2, #17
 80a1c74:	f840 3b04 	str.w	r3, [r0], #4
 80a1c78:	2100      	movs	r1, #0
 80a1c7a:	f001 f8a0 	bl	80a2dbe <memset>
{
    clear();
}
 80a1c7e:	4620      	mov	r0, r4
 80a1c80:	bd10      	pop	{r4, pc}
 80a1c82:	bf00      	nop
 80a1c84:	080a2f98 	.word	0x080a2f98

080a1c88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1c88:	4603      	mov	r3, r0
 80a1c8a:	4a07      	ldr	r2, [pc, #28]	; (80a1ca8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1c8c:	b510      	push	{r4, lr}
 80a1c8e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1c92:	f101 0210 	add.w	r2, r1, #16
 80a1c96:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1c9a:	4291      	cmp	r1, r2
 80a1c9c:	f843 4b04 	str.w	r4, [r3], #4
 80a1ca0:	d1f9      	bne.n	80a1c96 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1ca2:	780a      	ldrb	r2, [r1, #0]
 80a1ca4:	701a      	strb	r2, [r3, #0]
}
 80a1ca6:	bd10      	pop	{r4, pc}
 80a1ca8:	080a2f98 	.word	0x080a2f98

080a1cac <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1cac:	4a02      	ldr	r2, [pc, #8]	; (80a1cb8 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1cae:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1cb0:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1cb2:	2204      	movs	r2, #4
 80a1cb4:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1cb6:	4770      	bx	lr
 80a1cb8:	080a2f98 	.word	0x080a2f98

080a1cbc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1cbc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1cbe:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1cc2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1cc6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1cca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1cce:	2304      	movs	r3, #4
 80a1cd0:	6041      	str	r1, [r0, #4]
 80a1cd2:	7503      	strb	r3, [r0, #20]
 80a1cd4:	bd10      	pop	{r4, pc}
	...

080a1cd8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1cda:	4d04      	ldr	r5, [pc, #16]	; (80a1cec <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1cdc:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1cde:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1ce2:	9500      	str	r5, [sp, #0]
 80a1ce4:	f7ff ffea 	bl	80a1cbc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1ce8:	b003      	add	sp, #12
 80a1cea:	bd30      	pop	{r4, r5, pc}
 80a1cec:	080a2f98 	.word	0x080a2f98

080a1cf0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1cf0:	7441      	strb	r1, [r0, #17]
 80a1cf2:	4770      	bx	lr

080a1cf4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1cf4:	4770      	bx	lr

080a1cf6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1cf6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1cf8:	2100      	movs	r1, #0
 80a1cfa:	7c00      	ldrb	r0, [r0, #16]
 80a1cfc:	f7ff fd7c 	bl	80a17f8 <HAL_USB_USART_Receive_Data>
}
 80a1d00:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1d04:	bf28      	it	cs
 80a1d06:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1d0a:	bd08      	pop	{r3, pc}

080a1d0c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1d0c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1d0e:	2101      	movs	r1, #1
 80a1d10:	7c00      	ldrb	r0, [r0, #16]
 80a1d12:	f7ff fd71 	bl	80a17f8 <HAL_USB_USART_Receive_Data>
}
 80a1d16:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1d1a:	bf28      	it	cs
 80a1d1c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1d20:	bd08      	pop	{r3, pc}

080a1d22 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1d22:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1d24:	7c00      	ldrb	r0, [r0, #16]
 80a1d26:	f7ff fd5f 	bl	80a17e8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1d2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1d2e:	bd08      	pop	{r3, pc}

080a1d30 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1d30:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1d32:	7c00      	ldrb	r0, [r0, #16]
 80a1d34:	f7ff fd50 	bl	80a17d8 <HAL_USB_USART_Available_Data>
}
 80a1d38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1d3c:	bd08      	pop	{r3, pc}

080a1d3e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1d3e:	7c00      	ldrb	r0, [r0, #16]
 80a1d40:	f7ff bd6a 	b.w	80a1818 <HAL_USB_USART_Flush_Data>

080a1d44 <_ZN9USBSerialD0Ev>:
 80a1d44:	b510      	push	{r4, lr}
 80a1d46:	4604      	mov	r4, r0
 80a1d48:	2114      	movs	r1, #20
 80a1d4a:	f000 faea 	bl	80a2322 <_ZdlPvj>
 80a1d4e:	4620      	mov	r0, r4
 80a1d50:	bd10      	pop	{r4, pc}

080a1d52 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1d52:	b538      	push	{r3, r4, r5, lr}
 80a1d54:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1d56:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1d58:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1d5a:	f7ff fd45 	bl	80a17e8 <HAL_USB_USART_Available_Data_For_Write>
 80a1d5e:	2800      	cmp	r0, #0
 80a1d60:	dc01      	bgt.n	80a1d66 <_ZN9USBSerial5writeEh+0x14>
 80a1d62:	7c60      	ldrb	r0, [r4, #17]
 80a1d64:	b128      	cbz	r0, 80a1d72 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1d66:	4629      	mov	r1, r5
 80a1d68:	7c20      	ldrb	r0, [r4, #16]
 80a1d6a:	f7ff fd4d 	bl	80a1808 <HAL_USB_USART_Send_Data>
 80a1d6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1d72:	bd38      	pop	{r3, r4, r5, pc}

080a1d74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1d74:	b510      	push	{r4, lr}
 80a1d76:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1d78:	2300      	movs	r3, #0
 80a1d7a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1d80:	60a3      	str	r3, [r4, #8]
 80a1d82:	4b05      	ldr	r3, [pc, #20]	; (80a1d98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1d84:	4608      	mov	r0, r1
 80a1d86:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1d88:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1d8a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1d8c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1d8e:	4611      	mov	r1, r2
 80a1d90:	f7ff fd12 	bl	80a17b8 <HAL_USB_USART_Init>
}
 80a1d94:	4620      	mov	r0, r4
 80a1d96:	bd10      	pop	{r4, pc}
 80a1d98:	080a2fac 	.word	0x080a2fac

080a1d9c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1d9c:	2200      	movs	r2, #0
 80a1d9e:	7c00      	ldrb	r0, [r0, #16]
 80a1da0:	f7ff bd12 	b.w	80a17c8 <HAL_USB_USART_Begin>

080a1da4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1da4:	b510      	push	{r4, lr}
 80a1da6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1da8:	2214      	movs	r2, #20
 80a1daa:	2100      	movs	r1, #0
 80a1dac:	f001 f807 	bl	80a2dbe <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1db0:	4b05      	ldr	r3, [pc, #20]	; (80a1dc8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1db2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1db4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1db6:	4b05      	ldr	r3, [pc, #20]	; (80a1dcc <_Z19acquireSerialBufferv+0x28>)
 80a1db8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1dba:	f240 1301 	movw	r3, #257	; 0x101
 80a1dbe:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1dc0:	2381      	movs	r3, #129	; 0x81
 80a1dc2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1dc4:	bd10      	pop	{r4, pc}
 80a1dc6:	bf00      	nop
 80a1dc8:	20000149 	.word	0x20000149
 80a1dcc:	200000c8 	.word	0x200000c8

080a1dd0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1dd0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1dd2:	4d0e      	ldr	r5, [pc, #56]	; (80a1e0c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1dd4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1dd6:	a801      	add	r0, sp, #4
 80a1dd8:	f7ff ffe4 	bl	80a1da4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1ddc:	6829      	ldr	r1, [r5, #0]
 80a1dde:	f011 0401 	ands.w	r4, r1, #1
 80a1de2:	d110      	bne.n	80a1e06 <_Z16_fetch_usbserialv+0x36>
 80a1de4:	4628      	mov	r0, r5
 80a1de6:	f7fe f95c 	bl	80a00a2 <__cxa_guard_acquire>
 80a1dea:	b160      	cbz	r0, 80a1e06 <_Z16_fetch_usbserialv+0x36>
 80a1dec:	aa01      	add	r2, sp, #4
 80a1dee:	4621      	mov	r1, r4
 80a1df0:	4807      	ldr	r0, [pc, #28]	; (80a1e10 <_Z16_fetch_usbserialv+0x40>)
 80a1df2:	f7ff ffbf 	bl	80a1d74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1df6:	4628      	mov	r0, r5
 80a1df8:	f7fe f958 	bl	80a00ac <__cxa_guard_release>
 80a1dfc:	4a05      	ldr	r2, [pc, #20]	; (80a1e14 <_Z16_fetch_usbserialv+0x44>)
 80a1dfe:	4906      	ldr	r1, [pc, #24]	; (80a1e18 <_Z16_fetch_usbserialv+0x48>)
 80a1e00:	4803      	ldr	r0, [pc, #12]	; (80a1e10 <_Z16_fetch_usbserialv+0x40>)
 80a1e02:	f000 fa89 	bl	80a2318 <__aeabi_atexit>
	return _usbserial;
}
 80a1e06:	4802      	ldr	r0, [pc, #8]	; (80a1e10 <_Z16_fetch_usbserialv+0x40>)
 80a1e08:	b007      	add	sp, #28
 80a1e0a:	bd30      	pop	{r4, r5, pc}
 80a1e0c:	200000c4 	.word	0x200000c4
 80a1e10:	2000024c 	.word	0x2000024c
 80a1e14:	20000070 	.word	0x20000070
 80a1e18:	080a1cf5 	.word	0x080a1cf5

080a1e1c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1e1c:	b510      	push	{r4, lr}
 80a1e1e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1e20:	2214      	movs	r2, #20
 80a1e22:	2100      	movs	r1, #0
 80a1e24:	f000 ffcb 	bl	80a2dbe <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1e28:	4b05      	ldr	r3, [pc, #20]	; (80a1e40 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1e2a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1e2c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1e2e:	4b05      	ldr	r3, [pc, #20]	; (80a1e44 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1e30:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1e32:	f240 1301 	movw	r3, #257	; 0x101
 80a1e36:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1e38:	2381      	movs	r3, #129	; 0x81
 80a1e3a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1e3c:	bd10      	pop	{r4, pc}
 80a1e3e:	bf00      	nop
 80a1e40:	200002fc 	.word	0x200002fc
 80a1e44:	20000264 	.word	0x20000264

080a1e48 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1e48:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1e4a:	4c0e      	ldr	r4, [pc, #56]	; (80a1e84 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1e4c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1e4e:	a801      	add	r0, sp, #4
 80a1e50:	f7ff ffe4 	bl	80a1e1c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1e54:	6823      	ldr	r3, [r4, #0]
 80a1e56:	07db      	lsls	r3, r3, #31
 80a1e58:	d410      	bmi.n	80a1e7c <_Z17_fetch_usbserial1v+0x34>
 80a1e5a:	4620      	mov	r0, r4
 80a1e5c:	f7fe f921 	bl	80a00a2 <__cxa_guard_acquire>
 80a1e60:	b160      	cbz	r0, 80a1e7c <_Z17_fetch_usbserial1v+0x34>
 80a1e62:	aa01      	add	r2, sp, #4
 80a1e64:	2101      	movs	r1, #1
 80a1e66:	4808      	ldr	r0, [pc, #32]	; (80a1e88 <_Z17_fetch_usbserial1v+0x40>)
 80a1e68:	f7ff ff84 	bl	80a1d74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1e6c:	4620      	mov	r0, r4
 80a1e6e:	f7fe f91d 	bl	80a00ac <__cxa_guard_release>
 80a1e72:	4a06      	ldr	r2, [pc, #24]	; (80a1e8c <_Z17_fetch_usbserial1v+0x44>)
 80a1e74:	4906      	ldr	r1, [pc, #24]	; (80a1e90 <_Z17_fetch_usbserial1v+0x48>)
 80a1e76:	4804      	ldr	r0, [pc, #16]	; (80a1e88 <_Z17_fetch_usbserial1v+0x40>)
 80a1e78:	f000 fa4e 	bl	80a2318 <__aeabi_atexit>
  return _usbserial1;
}
 80a1e7c:	4802      	ldr	r0, [pc, #8]	; (80a1e88 <_Z17_fetch_usbserial1v+0x40>)
 80a1e7e:	b006      	add	sp, #24
 80a1e80:	bd10      	pop	{r4, pc}
 80a1e82:	bf00      	nop
 80a1e84:	20000260 	.word	0x20000260
 80a1e88:	200002e8 	.word	0x200002e8
 80a1e8c:	20000070 	.word	0x20000070
 80a1e90:	080a1cf5 	.word	0x080a1cf5

080a1e94 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
 80a1e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a1e96:	b285      	uxth	r5, r0

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
 80a1e98:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a1e9a:	4628      	mov	r0, r5

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
 80a1e9c:	460e      	mov	r6, r1
 80a1e9e:	4617      	mov	r7, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a1ea0:	f000 f992 	bl	80a21c8 <pinAvailable>
 80a1ea4:	b160      	cbz	r0, 80a1ec0 <tone+0x2c>
 80a1ea6:	2102      	movs	r1, #2
 80a1ea8:	4628      	mov	r0, r5
 80a1eaa:	f7ff fbb3 	bl	80a1614 <HAL_Validate_Pin_Function>
 80a1eae:	2802      	cmp	r0, #2
 80a1eb0:	d106      	bne.n	80a1ec0 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
 80a1eb2:	463a      	mov	r2, r7
 80a1eb4:	4631      	mov	r1, r6
 80a1eb6:	4620      	mov	r0, r4
    }
}
 80a1eb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Start(pin, frequency, duration);
 80a1ebc:	f7ff bc74 	b.w	80a17a8 <HAL_Tone_Start>
 80a1ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1ec2 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1ec2:	4770      	bx	lr

080a1ec4 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1ec4:	7441      	strb	r1, [r0, #17]
 80a1ec6:	4770      	bx	lr

080a1ec8 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1ec8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1eca:	7c00      	ldrb	r0, [r0, #16]
 80a1ecc:	f7ff fc2a 	bl	80a1724 <HAL_USART_Available_Data_For_Write>
}
 80a1ed0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1ed4:	bd08      	pop	{r3, pc}

080a1ed6 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1ed6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1ed8:	7c00      	ldrb	r0, [r0, #16]
 80a1eda:	f7ff fbfb 	bl	80a16d4 <HAL_USART_Available_Data>
}
 80a1ede:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1ee2:	bd08      	pop	{r3, pc}

080a1ee4 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1ee4:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1ee6:	7c00      	ldrb	r0, [r0, #16]
 80a1ee8:	f7ff fc04 	bl	80a16f4 <HAL_USART_Peek_Data>
}
 80a1eec:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1ef0:	bf28      	it	cs
 80a1ef2:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1ef6:	bd08      	pop	{r3, pc}

080a1ef8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1ef8:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1efa:	7c00      	ldrb	r0, [r0, #16]
 80a1efc:	f7ff fbf2 	bl	80a16e4 <HAL_USART_Read_Data>
}
 80a1f00:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1f04:	bf28      	it	cs
 80a1f06:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1f0a:	bd08      	pop	{r3, pc}

080a1f0c <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1f0c:	7c00      	ldrb	r0, [r0, #16]
 80a1f0e:	f7ff bbf9 	b.w	80a1704 <HAL_USART_Flush_Data>

080a1f12 <_ZN11USARTSerialD0Ev>:
 80a1f12:	b510      	push	{r4, lr}
 80a1f14:	4604      	mov	r4, r0
 80a1f16:	2114      	movs	r1, #20
 80a1f18:	f000 fa03 	bl	80a2322 <_ZdlPvj>
 80a1f1c:	4620      	mov	r0, r4
 80a1f1e:	bd10      	pop	{r4, pc}

080a1f20 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1f20:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1f22:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1f24:	4604      	mov	r4, r0
 80a1f26:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1f28:	b925      	cbnz	r5, 80a1f34 <_ZN11USARTSerial5writeEh+0x14>
 80a1f2a:	7c00      	ldrb	r0, [r0, #16]
 80a1f2c:	f7ff fbfa 	bl	80a1724 <HAL_USART_Available_Data_For_Write>
 80a1f30:	2800      	cmp	r0, #0
 80a1f32:	dd05      	ble.n	80a1f40 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1f34:	4631      	mov	r1, r6
 80a1f36:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1f38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1f3c:	f7ff bbc2 	b.w	80a16c4 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1f40:	4628      	mov	r0, r5
 80a1f42:	bd70      	pop	{r4, r5, r6, pc}

080a1f44 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1f44:	b510      	push	{r4, lr}
 80a1f46:	4604      	mov	r4, r0
 80a1f48:	4608      	mov	r0, r1
 80a1f4a:	4611      	mov	r1, r2
 80a1f4c:	2200      	movs	r2, #0
 80a1f4e:	6062      	str	r2, [r4, #4]
 80a1f50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1f54:	60a2      	str	r2, [r4, #8]
 80a1f56:	4a05      	ldr	r2, [pc, #20]	; (80a1f6c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1f58:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1f5a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1f5c:	2201      	movs	r2, #1
 80a1f5e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1f60:	461a      	mov	r2, r3
 80a1f62:	f7ff fba7 	bl	80a16b4 <HAL_USART_Init>
}
 80a1f66:	4620      	mov	r0, r4
 80a1f68:	bd10      	pop	{r4, pc}
 80a1f6a:	bf00      	nop
 80a1f6c:	080a2fdc 	.word	0x080a2fdc

080a1f70 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1f70:	7c00      	ldrb	r0, [r0, #16]
 80a1f72:	f7ff bbcf 	b.w	80a1714 <HAL_USART_Is_Enabled>
	...

080a1f78 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1f78:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1f7a:	4d0c      	ldr	r5, [pc, #48]	; (80a1fac <_Z22__fetch_global_Serial1v+0x34>)
 80a1f7c:	6829      	ldr	r1, [r5, #0]
 80a1f7e:	f011 0401 	ands.w	r4, r1, #1
 80a1f82:	d111      	bne.n	80a1fa8 <_Z22__fetch_global_Serial1v+0x30>
 80a1f84:	4628      	mov	r0, r5
 80a1f86:	f7fe f88c 	bl	80a00a2 <__cxa_guard_acquire>
 80a1f8a:	b168      	cbz	r0, 80a1fa8 <_Z22__fetch_global_Serial1v+0x30>
 80a1f8c:	4a08      	ldr	r2, [pc, #32]	; (80a1fb0 <_Z22__fetch_global_Serial1v+0x38>)
 80a1f8e:	4621      	mov	r1, r4
 80a1f90:	4b08      	ldr	r3, [pc, #32]	; (80a1fb4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1f92:	4809      	ldr	r0, [pc, #36]	; (80a1fb8 <_Z22__fetch_global_Serial1v+0x40>)
 80a1f94:	f7ff ffd6 	bl	80a1f44 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1f98:	4628      	mov	r0, r5
 80a1f9a:	f7fe f887 	bl	80a00ac <__cxa_guard_release>
 80a1f9e:	4a07      	ldr	r2, [pc, #28]	; (80a1fbc <_Z22__fetch_global_Serial1v+0x44>)
 80a1fa0:	4907      	ldr	r1, [pc, #28]	; (80a1fc0 <_Z22__fetch_global_Serial1v+0x48>)
 80a1fa2:	4805      	ldr	r0, [pc, #20]	; (80a1fb8 <_Z22__fetch_global_Serial1v+0x40>)
 80a1fa4:	f000 f9b8 	bl	80a2318 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1fa8:	4803      	ldr	r0, [pc, #12]	; (80a1fb8 <_Z22__fetch_global_Serial1v+0x40>)
 80a1faa:	bd38      	pop	{r3, r4, r5, pc}
 80a1fac:	20000498 	.word	0x20000498
 80a1fb0:	2000049c 	.word	0x2000049c
 80a1fb4:	20000414 	.word	0x20000414
 80a1fb8:	20000400 	.word	0x20000400
 80a1fbc:	20000070 	.word	0x20000070
 80a1fc0:	080a1ec3 	.word	0x080a1ec3

080a1fc4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1fc4:	4770      	bx	lr

080a1fc6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1fc8:	4606      	mov	r6, r0
 80a1fca:	4615      	mov	r5, r2
 80a1fcc:	460c      	mov	r4, r1
 80a1fce:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1fd0:	42bc      	cmp	r4, r7
 80a1fd2:	d006      	beq.n	80a1fe2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1fd4:	6833      	ldr	r3, [r6, #0]
 80a1fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1fda:	689b      	ldr	r3, [r3, #8]
 80a1fdc:	4630      	mov	r0, r6
 80a1fde:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1fe0:	e7f6      	b.n	80a1fd0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1fe2:	4628      	mov	r0, r5
 80a1fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1fe6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1fe6:	2200      	movs	r2, #0
 80a1fe8:	7c00      	ldrb	r0, [r0, #16]
 80a1fea:	f7ff bba3 	b.w	80a1734 <HAL_I2C_Write_Data>

080a1fee <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1fee:	2100      	movs	r1, #0
 80a1ff0:	7c00      	ldrb	r0, [r0, #16]
 80a1ff2:	f7ff bba7 	b.w	80a1744 <HAL_I2C_Available_Data>

080a1ff6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1ff6:	2100      	movs	r1, #0
 80a1ff8:	7c00      	ldrb	r0, [r0, #16]
 80a1ffa:	f7ff bbab 	b.w	80a1754 <HAL_I2C_Read_Data>

080a1ffe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1ffe:	2100      	movs	r1, #0
 80a2000:	7c00      	ldrb	r0, [r0, #16]
 80a2002:	f7ff bbaf 	b.w	80a1764 <HAL_I2C_Peek_Data>

080a2006 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2006:	2100      	movs	r1, #0
 80a2008:	7c00      	ldrb	r0, [r0, #16]
 80a200a:	f7ff bbb3 	b.w	80a1774 <HAL_I2C_Flush_Data>

080a200e <_ZN7TwoWireD0Ev>:
 80a200e:	b510      	push	{r4, lr}
 80a2010:	4604      	mov	r4, r0
 80a2012:	2114      	movs	r1, #20
 80a2014:	f000 f985 	bl	80a2322 <_ZdlPvj>
 80a2018:	4620      	mov	r0, r4
 80a201a:	bd10      	pop	{r4, pc}

080a201c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a201c:	b510      	push	{r4, lr}
 80a201e:	4604      	mov	r4, r0
 80a2020:	4608      	mov	r0, r1
 80a2022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2026:	60a3      	str	r3, [r4, #8]
 80a2028:	4b04      	ldr	r3, [pc, #16]	; (80a203c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a202a:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a202c:	7420      	strb	r0, [r4, #16]
 80a202e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2030:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a2032:	f7ff fbaf 	bl	80a1794 <HAL_I2C_Init>

}
 80a2036:	4620      	mov	r0, r4
 80a2038:	bd10      	pop	{r4, pc}
 80a203a:	bf00      	nop
 80a203c:	080a300c 	.word	0x080a300c

080a2040 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a2040:	2100      	movs	r1, #0
 80a2042:	7c00      	ldrb	r0, [r0, #16]
 80a2044:	f7ff bb9e 	b.w	80a1784 <HAL_I2C_Is_Enabled>

080a2048 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2048:	2200      	movs	r2, #0
 80a204a:	4611      	mov	r1, r2
 80a204c:	6840      	ldr	r0, [r0, #4]
 80a204e:	f7ff bc2f 	b.w	80a18b0 <network_ready>

080a2052 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2052:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2054:	4616      	mov	r6, r2
 80a2056:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2058:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a205a:	460f      	mov	r7, r1
 80a205c:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a205e:	2100      	movs	r1, #0
 80a2060:	a803      	add	r0, sp, #12
 80a2062:	f000 feac 	bl	80a2dbe <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2066:	4630      	mov	r0, r6
 80a2068:	f000 feda 	bl	80a2e20 <strlen>
 80a206c:	2500      	movs	r5, #0
 80a206e:	9500      	str	r5, [sp, #0]
 80a2070:	b281      	uxth	r1, r0
 80a2072:	687b      	ldr	r3, [r7, #4]
 80a2074:	aa03      	add	r2, sp, #12
 80a2076:	4630      	mov	r0, r6
 80a2078:	f7ff fbd6 	bl	80a1828 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a207c:	b120      	cbz	r0, 80a2088 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a207e:	4629      	mov	r1, r5
 80a2080:	4620      	mov	r0, r4
 80a2082:	f7ff fe13 	bl	80a1cac <_ZN9IPAddressC1Em>
 80a2086:	e003      	b.n	80a2090 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2088:	a903      	add	r1, sp, #12
 80a208a:	4620      	mov	r0, r4
 80a208c:	f7ff fdfc 	bl	80a1c88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2090:	4620      	mov	r0, r4
 80a2092:	b009      	add	sp, #36	; 0x24
 80a2094:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2096 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2096:	2200      	movs	r2, #0
 80a2098:	4611      	mov	r1, r2
 80a209a:	6840      	ldr	r0, [r0, #4]
 80a209c:	f7ff bc28 	b.w	80a18f0 <network_listening>

080a20a0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a20a0:	2200      	movs	r2, #0
 80a20a2:	4611      	mov	r1, r2
 80a20a4:	6840      	ldr	r0, [r0, #4]
 80a20a6:	f7ff bc33 	b.w	80a1910 <network_get_listen_timeout>

080a20aa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a20aa:	2200      	movs	r2, #0
 80a20ac:	6840      	ldr	r0, [r0, #4]
 80a20ae:	f7ff bc27 	b.w	80a1900 <network_set_listen_timeout>

080a20b2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a20b2:	2200      	movs	r2, #0
 80a20b4:	f081 0101 	eor.w	r1, r1, #1
 80a20b8:	6840      	ldr	r0, [r0, #4]
 80a20ba:	f7ff bc11 	b.w	80a18e0 <network_listen>

080a20be <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a20be:	2300      	movs	r3, #0
 80a20c0:	461a      	mov	r2, r3
 80a20c2:	4619      	mov	r1, r3
 80a20c4:	6840      	ldr	r0, [r0, #4]
 80a20c6:	f7ff bc03 	b.w	80a18d0 <network_off>

080a20ca <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a20ca:	2200      	movs	r2, #0
 80a20cc:	4611      	mov	r1, r2
 80a20ce:	6840      	ldr	r0, [r0, #4]
 80a20d0:	f7ff bbde 	b.w	80a1890 <network_connecting>

080a20d4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a20d4:	2200      	movs	r2, #0
 80a20d6:	2102      	movs	r1, #2
 80a20d8:	6840      	ldr	r0, [r0, #4]
 80a20da:	f7ff bbe1 	b.w	80a18a0 <network_disconnect>

080a20de <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a20de:	2300      	movs	r3, #0
 80a20e0:	461a      	mov	r2, r3
 80a20e2:	6840      	ldr	r0, [r0, #4]
 80a20e4:	f7ff bbcc 	b.w	80a1880 <network_connect>

080a20e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a20e8:	4b02      	ldr	r3, [pc, #8]	; (80a20f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a20ea:	2204      	movs	r2, #4
 80a20ec:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a20ee:	4a02      	ldr	r2, [pc, #8]	; (80a20f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a20f0:	601a      	str	r2, [r3, #0]
 80a20f2:	4770      	bx	lr
 80a20f4:	20000520 	.word	0x20000520
 80a20f8:	080a3034 	.word	0x080a3034

080a20fc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a20fc:	2300      	movs	r3, #0
 80a20fe:	461a      	mov	r2, r3
 80a2100:	6840      	ldr	r0, [r0, #4]
 80a2102:	f7ff bbbd 	b.w	80a1880 <network_connect>

080a2106 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2106:	2200      	movs	r2, #0
 80a2108:	2102      	movs	r1, #2
 80a210a:	6840      	ldr	r0, [r0, #4]
 80a210c:	f7ff bbc8 	b.w	80a18a0 <network_disconnect>

080a2110 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2110:	2200      	movs	r2, #0
 80a2112:	4611      	mov	r1, r2
 80a2114:	6840      	ldr	r0, [r0, #4]
 80a2116:	f7ff bbbb 	b.w	80a1890 <network_connecting>

080a211a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a211a:	2200      	movs	r2, #0
 80a211c:	4611      	mov	r1, r2
 80a211e:	6840      	ldr	r0, [r0, #4]
 80a2120:	f7ff bbc6 	b.w	80a18b0 <network_ready>

080a2124 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2124:	2300      	movs	r3, #0
 80a2126:	461a      	mov	r2, r3
 80a2128:	4619      	mov	r1, r3
 80a212a:	6840      	ldr	r0, [r0, #4]
 80a212c:	f7ff bbc8 	b.w	80a18c0 <network_on>

080a2130 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2130:	2300      	movs	r3, #0
 80a2132:	461a      	mov	r2, r3
 80a2134:	4619      	mov	r1, r3
 80a2136:	6840      	ldr	r0, [r0, #4]
 80a2138:	f7ff bbca 	b.w	80a18d0 <network_off>

080a213c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a213c:	2200      	movs	r2, #0
 80a213e:	f081 0101 	eor.w	r1, r1, #1
 80a2142:	6840      	ldr	r0, [r0, #4]
 80a2144:	f7ff bbcc 	b.w	80a18e0 <network_listen>

080a2148 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2148:	2200      	movs	r2, #0
 80a214a:	6840      	ldr	r0, [r0, #4]
 80a214c:	f7ff bbd8 	b.w	80a1900 <network_set_listen_timeout>

080a2150 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2150:	2200      	movs	r2, #0
 80a2152:	4611      	mov	r1, r2
 80a2154:	6840      	ldr	r0, [r0, #4]
 80a2156:	f7ff bbdb 	b.w	80a1910 <network_get_listen_timeout>

080a215a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a215a:	2200      	movs	r2, #0
 80a215c:	4611      	mov	r1, r2
 80a215e:	6840      	ldr	r0, [r0, #4]
 80a2160:	f7ff bbc6 	b.w	80a18f0 <network_listening>

080a2164 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2164:	b570      	push	{r4, r5, r6, lr}
 80a2166:	4616      	mov	r6, r2
 80a2168:	b08e      	sub	sp, #56	; 0x38
 80a216a:	4604      	mov	r4, r0
    IPAddress addr;
 80a216c:	a808      	add	r0, sp, #32
 80a216e:	f7ff fd7d 	bl	80a1c6c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2172:	2211      	movs	r2, #17
 80a2174:	2100      	movs	r1, #0
 80a2176:	a803      	add	r0, sp, #12
 80a2178:	f000 fe21 	bl	80a2dbe <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a217c:	4630      	mov	r0, r6
 80a217e:	f000 fe4f 	bl	80a2e20 <strlen>
 80a2182:	2500      	movs	r5, #0
 80a2184:	4b0a      	ldr	r3, [pc, #40]	; (80a21b0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2186:	9500      	str	r5, [sp, #0]
 80a2188:	b281      	uxth	r1, r0
 80a218a:	685b      	ldr	r3, [r3, #4]
 80a218c:	aa03      	add	r2, sp, #12
 80a218e:	4630      	mov	r0, r6
 80a2190:	f7ff fb4a 	bl	80a1828 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2194:	b120      	cbz	r0, 80a21a0 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2196:	4629      	mov	r1, r5
 80a2198:	4620      	mov	r0, r4
 80a219a:	f7ff fd87 	bl	80a1cac <_ZN9IPAddressC1Em>
 80a219e:	e003      	b.n	80a21a8 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a21a0:	a903      	add	r1, sp, #12
 80a21a2:	4620      	mov	r0, r4
 80a21a4:	f7ff fd70 	bl	80a1c88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a21a8:	4620      	mov	r0, r4
 80a21aa:	b00e      	add	sp, #56	; 0x38
 80a21ac:	bd70      	pop	{r4, r5, r6, pc}
 80a21ae:	bf00      	nop
 80a21b0:	20000520 	.word	0x20000520

080a21b4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a21b4:	4b02      	ldr	r3, [pc, #8]	; (80a21c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a21b6:	4a03      	ldr	r2, [pc, #12]	; (80a21c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a21b8:	601a      	str	r2, [r3, #0]
 80a21ba:	2200      	movs	r2, #0
 80a21bc:	605a      	str	r2, [r3, #4]
 80a21be:	4770      	bx	lr
 80a21c0:	20000528 	.word	0x20000528
 80a21c4:	080a3068 	.word	0x080a3068

080a21c8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a21c8:	b510      	push	{r4, lr}
 80a21ca:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a21cc:	480f      	ldr	r0, [pc, #60]	; (80a220c <pinAvailable+0x44>)
 80a21ce:	f7ff fbdb 	bl	80a1988 <_ZN8SPIClass9isEnabledEv>
 80a21d2:	b128      	cbz	r0, 80a21e0 <pinAvailable+0x18>
 80a21d4:	f1a4 030d 	sub.w	r3, r4, #13
 80a21d8:	2b02      	cmp	r3, #2
 80a21da:	d801      	bhi.n	80a21e0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a21dc:	2000      	movs	r0, #0
 80a21de:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a21e0:	f000 f87a 	bl	80a22d8 <_Z19__fetch_global_Wirev>
 80a21e4:	f7ff ff2c 	bl	80a2040 <_ZN7TwoWire9isEnabledEv>
 80a21e8:	b108      	cbz	r0, 80a21ee <pinAvailable+0x26>
 80a21ea:	2c01      	cmp	r4, #1
 80a21ec:	d9f6      	bls.n	80a21dc <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a21ee:	f7ff fec3 	bl	80a1f78 <_Z22__fetch_global_Serial1v>
 80a21f2:	f7ff febd 	bl	80a1f70 <_ZN11USARTSerial9isEnabledEv>
 80a21f6:	b118      	cbz	r0, 80a2200 <pinAvailable+0x38>
 80a21f8:	f1a4 0312 	sub.w	r3, r4, #18
 80a21fc:	2b01      	cmp	r3, #1
 80a21fe:	d9ed      	bls.n	80a21dc <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2200:	2c17      	cmp	r4, #23
 80a2202:	bf8c      	ite	hi
 80a2204:	2000      	movhi	r0, #0
 80a2206:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2208:	bd10      	pop	{r4, pc}
 80a220a:	bf00      	nop
 80a220c:	20000530 	.word	0x20000530

080a2210 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2210:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2212:	b538      	push	{r3, r4, r5, lr}
 80a2214:	4604      	mov	r4, r0
 80a2216:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2218:	d80a      	bhi.n	80a2230 <pinMode+0x20>
 80a221a:	29ff      	cmp	r1, #255	; 0xff
 80a221c:	d008      	beq.n	80a2230 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a221e:	f7ff ffd3 	bl	80a21c8 <pinAvailable>
 80a2222:	b128      	cbz	r0, 80a2230 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2224:	4629      	mov	r1, r5
 80a2226:	4620      	mov	r0, r4
}
 80a2228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a222c:	f7ff b9fa 	b.w	80a1624 <HAL_Pin_Mode>
 80a2230:	bd38      	pop	{r3, r4, r5, pc}

080a2232 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2232:	b538      	push	{r3, r4, r5, lr}
 80a2234:	4604      	mov	r4, r0
 80a2236:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2238:	f7ff f9fc 	bl	80a1634 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a223c:	28ff      	cmp	r0, #255	; 0xff
 80a223e:	d010      	beq.n	80a2262 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2240:	2806      	cmp	r0, #6
 80a2242:	d804      	bhi.n	80a224e <digitalWrite+0x1c>
 80a2244:	234d      	movs	r3, #77	; 0x4d
 80a2246:	fa23 f000 	lsr.w	r0, r3, r0
 80a224a:	07c3      	lsls	r3, r0, #31
 80a224c:	d409      	bmi.n	80a2262 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a224e:	4620      	mov	r0, r4
 80a2250:	f7ff ffba 	bl	80a21c8 <pinAvailable>
 80a2254:	b128      	cbz	r0, 80a2262 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2256:	4629      	mov	r1, r5
 80a2258:	4620      	mov	r0, r4
}
 80a225a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a225e:	f7ff b9f1 	b.w	80a1644 <HAL_GPIO_Write>
 80a2262:	bd38      	pop	{r3, r4, r5, pc}

080a2264 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2264:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2266:	4c0c      	ldr	r4, [pc, #48]	; (80a2298 <_GLOBAL__sub_I_SPI+0x34>)
 80a2268:	4e0c      	ldr	r6, [pc, #48]	; (80a229c <_GLOBAL__sub_I_SPI+0x38>)
 80a226a:	4d0d      	ldr	r5, [pc, #52]	; (80a22a0 <_GLOBAL__sub_I_SPI+0x3c>)
 80a226c:	2100      	movs	r1, #0
 80a226e:	4620      	mov	r0, r4
 80a2270:	f7ff fb76 	bl	80a1960 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2274:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2276:	4c0b      	ldr	r4, [pc, #44]	; (80a22a4 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2278:	4632      	mov	r2, r6
 80a227a:	4629      	mov	r1, r5
 80a227c:	f000 f84c 	bl	80a2318 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2280:	2101      	movs	r1, #1
 80a2282:	4620      	mov	r0, r4
 80a2284:	f7ff fb6c 	bl	80a1960 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2288:	4632      	mov	r2, r6
 80a228a:	4629      	mov	r1, r5
 80a228c:	4620      	mov	r0, r4
 80a228e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2292:	f000 b841 	b.w	80a2318 <__aeabi_atexit>
 80a2296:	bf00      	nop
 80a2298:	20000530 	.word	0x20000530
 80a229c:	20000070 	.word	0x20000070
 80a22a0:	080a1951 	.word	0x080a1951
 80a22a4:	20000540 	.word	0x20000540

080a22a8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a22a8:	b513      	push	{r0, r1, r4, lr}
 80a22aa:	4c08      	ldr	r4, [pc, #32]	; (80a22cc <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a22ac:	2300      	movs	r3, #0
 80a22ae:	461a      	mov	r2, r3
 80a22b0:	4619      	mov	r1, r3
 80a22b2:	9300      	str	r3, [sp, #0]
 80a22b4:	4620      	mov	r0, r4
 80a22b6:	f7ff fd0f 	bl	80a1cd8 <_ZN9IPAddressC1Ehhhh>
 80a22ba:	4620      	mov	r0, r4
 80a22bc:	4a04      	ldr	r2, [pc, #16]	; (80a22d0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a22be:	4905      	ldr	r1, [pc, #20]	; (80a22d4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a22c0:	b002      	add	sp, #8
 80a22c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a22c6:	f000 b827 	b.w	80a2318 <__aeabi_atexit>
 80a22ca:	bf00      	nop
 80a22cc:	20000554 	.word	0x20000554
 80a22d0:	20000070 	.word	0x20000070
 80a22d4:	080a1c29 	.word	0x080a1c29

080a22d8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a22d8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a22da:	4d0b      	ldr	r5, [pc, #44]	; (80a2308 <_Z19__fetch_global_Wirev+0x30>)
 80a22dc:	6829      	ldr	r1, [r5, #0]
 80a22de:	f011 0401 	ands.w	r4, r1, #1
 80a22e2:	d10f      	bne.n	80a2304 <_Z19__fetch_global_Wirev+0x2c>
 80a22e4:	4628      	mov	r0, r5
 80a22e6:	f7fd fedc 	bl	80a00a2 <__cxa_guard_acquire>
 80a22ea:	b158      	cbz	r0, 80a2304 <_Z19__fetch_global_Wirev+0x2c>
 80a22ec:	4621      	mov	r1, r4
 80a22ee:	4807      	ldr	r0, [pc, #28]	; (80a230c <_Z19__fetch_global_Wirev+0x34>)
 80a22f0:	f7ff fe94 	bl	80a201c <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a22f4:	4628      	mov	r0, r5
 80a22f6:	f7fd fed9 	bl	80a00ac <__cxa_guard_release>
 80a22fa:	4a05      	ldr	r2, [pc, #20]	; (80a2310 <_Z19__fetch_global_Wirev+0x38>)
 80a22fc:	4905      	ldr	r1, [pc, #20]	; (80a2314 <_Z19__fetch_global_Wirev+0x3c>)
 80a22fe:	4803      	ldr	r0, [pc, #12]	; (80a230c <_Z19__fetch_global_Wirev+0x34>)
 80a2300:	f000 f80a 	bl	80a2318 <__aeabi_atexit>
	return wire;
}
 80a2304:	4801      	ldr	r0, [pc, #4]	; (80a230c <_Z19__fetch_global_Wirev+0x34>)
 80a2306:	bd38      	pop	{r3, r4, r5, pc}
 80a2308:	2000056c 	.word	0x2000056c
 80a230c:	20000570 	.word	0x20000570
 80a2310:	20000070 	.word	0x20000070
 80a2314:	080a1fc5 	.word	0x080a1fc5

080a2318 <__aeabi_atexit>:
 80a2318:	460b      	mov	r3, r1
 80a231a:	4601      	mov	r1, r0
 80a231c:	4618      	mov	r0, r3
 80a231e:	f000 bd35 	b.w	80a2d8c <__cxa_atexit>

080a2322 <_ZdlPvj>:
 80a2322:	f7fd bebc 	b.w	80a009e <_ZdlPv>
	...

080a2328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2328:	4b18      	ldr	r3, [pc, #96]	; (80a238c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a232a:	681a      	ldr	r2, [r3, #0]
 80a232c:	07d1      	lsls	r1, r2, #31
 80a232e:	bf5c      	itt	pl
 80a2330:	2201      	movpl	r2, #1
 80a2332:	601a      	strpl	r2, [r3, #0]
 80a2334:	4b16      	ldr	r3, [pc, #88]	; (80a2390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2336:	681a      	ldr	r2, [r3, #0]
 80a2338:	07d2      	lsls	r2, r2, #31
 80a233a:	bf5c      	itt	pl
 80a233c:	2201      	movpl	r2, #1
 80a233e:	601a      	strpl	r2, [r3, #0]
 80a2340:	4b14      	ldr	r3, [pc, #80]	; (80a2394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2342:	681a      	ldr	r2, [r3, #0]
 80a2344:	07d0      	lsls	r0, r2, #31
 80a2346:	bf5c      	itt	pl
 80a2348:	2201      	movpl	r2, #1
 80a234a:	601a      	strpl	r2, [r3, #0]
 80a234c:	4b12      	ldr	r3, [pc, #72]	; (80a2398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a234e:	681a      	ldr	r2, [r3, #0]
 80a2350:	07d1      	lsls	r1, r2, #31
 80a2352:	bf5c      	itt	pl
 80a2354:	2201      	movpl	r2, #1
 80a2356:	601a      	strpl	r2, [r3, #0]
 80a2358:	4b10      	ldr	r3, [pc, #64]	; (80a239c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a235a:	681a      	ldr	r2, [r3, #0]
 80a235c:	07d2      	lsls	r2, r2, #31
 80a235e:	bf5c      	itt	pl
 80a2360:	2201      	movpl	r2, #1
 80a2362:	601a      	strpl	r2, [r3, #0]
 80a2364:	4b0e      	ldr	r3, [pc, #56]	; (80a23a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2366:	681a      	ldr	r2, [r3, #0]
 80a2368:	07d0      	lsls	r0, r2, #31
 80a236a:	bf5c      	itt	pl
 80a236c:	2201      	movpl	r2, #1
 80a236e:	601a      	strpl	r2, [r3, #0]
 80a2370:	4b0c      	ldr	r3, [pc, #48]	; (80a23a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2372:	681a      	ldr	r2, [r3, #0]
 80a2374:	07d1      	lsls	r1, r2, #31
 80a2376:	bf5c      	itt	pl
 80a2378:	2201      	movpl	r2, #1
 80a237a:	601a      	strpl	r2, [r3, #0]
 80a237c:	4b0a      	ldr	r3, [pc, #40]	; (80a23a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a237e:	681a      	ldr	r2, [r3, #0]
 80a2380:	07d2      	lsls	r2, r2, #31
 80a2382:	bf5c      	itt	pl
 80a2384:	2201      	movpl	r2, #1
 80a2386:	601a      	strpl	r2, [r3, #0]
 80a2388:	4770      	bx	lr
 80a238a:	bf00      	nop
 80a238c:	200005a0 	.word	0x200005a0
 80a2390:	2000059c 	.word	0x2000059c
 80a2394:	20000598 	.word	0x20000598
 80a2398:	20000594 	.word	0x20000594
 80a239c:	20000590 	.word	0x20000590
 80a23a0:	2000058c 	.word	0x2000058c
 80a23a4:	20000588 	.word	0x20000588
 80a23a8:	20000584 	.word	0x20000584

080a23ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a23ac:	4b24      	ldr	r3, [pc, #144]	; (80a2440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a23ae:	681a      	ldr	r2, [r3, #0]
 80a23b0:	07d0      	lsls	r0, r2, #31
 80a23b2:	bf5c      	itt	pl
 80a23b4:	2201      	movpl	r2, #1
 80a23b6:	601a      	strpl	r2, [r3, #0]
 80a23b8:	4b22      	ldr	r3, [pc, #136]	; (80a2444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a23ba:	681a      	ldr	r2, [r3, #0]
 80a23bc:	07d1      	lsls	r1, r2, #31
 80a23be:	bf5c      	itt	pl
 80a23c0:	2201      	movpl	r2, #1
 80a23c2:	601a      	strpl	r2, [r3, #0]
 80a23c4:	4b20      	ldr	r3, [pc, #128]	; (80a2448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a23c6:	681a      	ldr	r2, [r3, #0]
 80a23c8:	07d2      	lsls	r2, r2, #31
 80a23ca:	bf5c      	itt	pl
 80a23cc:	2201      	movpl	r2, #1
 80a23ce:	601a      	strpl	r2, [r3, #0]
 80a23d0:	4b1e      	ldr	r3, [pc, #120]	; (80a244c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a23d2:	681a      	ldr	r2, [r3, #0]
 80a23d4:	07d0      	lsls	r0, r2, #31
 80a23d6:	bf5c      	itt	pl
 80a23d8:	2201      	movpl	r2, #1
 80a23da:	601a      	strpl	r2, [r3, #0]
 80a23dc:	4b1c      	ldr	r3, [pc, #112]	; (80a2450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a23de:	681a      	ldr	r2, [r3, #0]
 80a23e0:	07d1      	lsls	r1, r2, #31
 80a23e2:	bf5c      	itt	pl
 80a23e4:	2201      	movpl	r2, #1
 80a23e6:	601a      	strpl	r2, [r3, #0]
 80a23e8:	4b1a      	ldr	r3, [pc, #104]	; (80a2454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a23ea:	681a      	ldr	r2, [r3, #0]
 80a23ec:	07d2      	lsls	r2, r2, #31
 80a23ee:	bf5c      	itt	pl
 80a23f0:	2201      	movpl	r2, #1
 80a23f2:	601a      	strpl	r2, [r3, #0]
 80a23f4:	4b18      	ldr	r3, [pc, #96]	; (80a2458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a23f6:	681a      	ldr	r2, [r3, #0]
 80a23f8:	07d0      	lsls	r0, r2, #31
 80a23fa:	bf5c      	itt	pl
 80a23fc:	2201      	movpl	r2, #1
 80a23fe:	601a      	strpl	r2, [r3, #0]
 80a2400:	4b16      	ldr	r3, [pc, #88]	; (80a245c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2402:	681a      	ldr	r2, [r3, #0]
 80a2404:	07d1      	lsls	r1, r2, #31
 80a2406:	bf5c      	itt	pl
 80a2408:	2201      	movpl	r2, #1
 80a240a:	601a      	strpl	r2, [r3, #0]
 80a240c:	4b14      	ldr	r3, [pc, #80]	; (80a2460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a240e:	681a      	ldr	r2, [r3, #0]
 80a2410:	07d2      	lsls	r2, r2, #31
 80a2412:	bf5c      	itt	pl
 80a2414:	2201      	movpl	r2, #1
 80a2416:	601a      	strpl	r2, [r3, #0]
 80a2418:	4b12      	ldr	r3, [pc, #72]	; (80a2464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a241a:	681a      	ldr	r2, [r3, #0]
 80a241c:	07d0      	lsls	r0, r2, #31
 80a241e:	bf5c      	itt	pl
 80a2420:	2201      	movpl	r2, #1
 80a2422:	601a      	strpl	r2, [r3, #0]
 80a2424:	4b10      	ldr	r3, [pc, #64]	; (80a2468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2426:	681a      	ldr	r2, [r3, #0]
 80a2428:	07d1      	lsls	r1, r2, #31
 80a242a:	bf5c      	itt	pl
 80a242c:	2201      	movpl	r2, #1
 80a242e:	601a      	strpl	r2, [r3, #0]
 80a2430:	4b0e      	ldr	r3, [pc, #56]	; (80a246c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2432:	681a      	ldr	r2, [r3, #0]
 80a2434:	07d2      	lsls	r2, r2, #31
 80a2436:	bf5c      	itt	pl
 80a2438:	2201      	movpl	r2, #1
 80a243a:	601a      	strpl	r2, [r3, #0]
 80a243c:	4770      	bx	lr
 80a243e:	bf00      	nop
 80a2440:	200005d0 	.word	0x200005d0
 80a2444:	200005cc 	.word	0x200005cc
 80a2448:	200005c8 	.word	0x200005c8
 80a244c:	200005c4 	.word	0x200005c4
 80a2450:	200005c0 	.word	0x200005c0
 80a2454:	200005bc 	.word	0x200005bc
 80a2458:	200005b8 	.word	0x200005b8
 80a245c:	200005b4 	.word	0x200005b4
 80a2460:	200005b0 	.word	0x200005b0
 80a2464:	200005ac 	.word	0x200005ac
 80a2468:	200005a8 	.word	0x200005a8
 80a246c:	200005a4 	.word	0x200005a4

080a2470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2470:	4b24      	ldr	r3, [pc, #144]	; (80a2504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2472:	681a      	ldr	r2, [r3, #0]
 80a2474:	07d0      	lsls	r0, r2, #31
 80a2476:	bf5c      	itt	pl
 80a2478:	2201      	movpl	r2, #1
 80a247a:	601a      	strpl	r2, [r3, #0]
 80a247c:	4b22      	ldr	r3, [pc, #136]	; (80a2508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a247e:	681a      	ldr	r2, [r3, #0]
 80a2480:	07d1      	lsls	r1, r2, #31
 80a2482:	bf5c      	itt	pl
 80a2484:	2201      	movpl	r2, #1
 80a2486:	601a      	strpl	r2, [r3, #0]
 80a2488:	4b20      	ldr	r3, [pc, #128]	; (80a250c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a248a:	681a      	ldr	r2, [r3, #0]
 80a248c:	07d2      	lsls	r2, r2, #31
 80a248e:	bf5c      	itt	pl
 80a2490:	2201      	movpl	r2, #1
 80a2492:	601a      	strpl	r2, [r3, #0]
 80a2494:	4b1e      	ldr	r3, [pc, #120]	; (80a2510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2496:	681a      	ldr	r2, [r3, #0]
 80a2498:	07d0      	lsls	r0, r2, #31
 80a249a:	bf5c      	itt	pl
 80a249c:	2201      	movpl	r2, #1
 80a249e:	601a      	strpl	r2, [r3, #0]
 80a24a0:	4b1c      	ldr	r3, [pc, #112]	; (80a2514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a24a2:	681a      	ldr	r2, [r3, #0]
 80a24a4:	07d1      	lsls	r1, r2, #31
 80a24a6:	bf5c      	itt	pl
 80a24a8:	2201      	movpl	r2, #1
 80a24aa:	601a      	strpl	r2, [r3, #0]
 80a24ac:	4b1a      	ldr	r3, [pc, #104]	; (80a2518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a24ae:	681a      	ldr	r2, [r3, #0]
 80a24b0:	07d2      	lsls	r2, r2, #31
 80a24b2:	bf5c      	itt	pl
 80a24b4:	2201      	movpl	r2, #1
 80a24b6:	601a      	strpl	r2, [r3, #0]
 80a24b8:	4b18      	ldr	r3, [pc, #96]	; (80a251c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a24ba:	681a      	ldr	r2, [r3, #0]
 80a24bc:	07d0      	lsls	r0, r2, #31
 80a24be:	bf5c      	itt	pl
 80a24c0:	2201      	movpl	r2, #1
 80a24c2:	601a      	strpl	r2, [r3, #0]
 80a24c4:	4b16      	ldr	r3, [pc, #88]	; (80a2520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a24c6:	681a      	ldr	r2, [r3, #0]
 80a24c8:	07d1      	lsls	r1, r2, #31
 80a24ca:	bf5c      	itt	pl
 80a24cc:	2201      	movpl	r2, #1
 80a24ce:	601a      	strpl	r2, [r3, #0]
 80a24d0:	4b14      	ldr	r3, [pc, #80]	; (80a2524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a24d2:	681a      	ldr	r2, [r3, #0]
 80a24d4:	07d2      	lsls	r2, r2, #31
 80a24d6:	bf5c      	itt	pl
 80a24d8:	2201      	movpl	r2, #1
 80a24da:	601a      	strpl	r2, [r3, #0]
 80a24dc:	4b12      	ldr	r3, [pc, #72]	; (80a2528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a24de:	681a      	ldr	r2, [r3, #0]
 80a24e0:	07d0      	lsls	r0, r2, #31
 80a24e2:	bf5c      	itt	pl
 80a24e4:	2201      	movpl	r2, #1
 80a24e6:	601a      	strpl	r2, [r3, #0]
 80a24e8:	4b10      	ldr	r3, [pc, #64]	; (80a252c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a24ea:	681a      	ldr	r2, [r3, #0]
 80a24ec:	07d1      	lsls	r1, r2, #31
 80a24ee:	bf5c      	itt	pl
 80a24f0:	2201      	movpl	r2, #1
 80a24f2:	601a      	strpl	r2, [r3, #0]
 80a24f4:	4b0e      	ldr	r3, [pc, #56]	; (80a2530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a24f6:	681a      	ldr	r2, [r3, #0]
 80a24f8:	07d2      	lsls	r2, r2, #31
 80a24fa:	bf5c      	itt	pl
 80a24fc:	2201      	movpl	r2, #1
 80a24fe:	601a      	strpl	r2, [r3, #0]
 80a2500:	4770      	bx	lr
 80a2502:	bf00      	nop
 80a2504:	20000600 	.word	0x20000600
 80a2508:	200005fc 	.word	0x200005fc
 80a250c:	200005f8 	.word	0x200005f8
 80a2510:	200005f4 	.word	0x200005f4
 80a2514:	200005f0 	.word	0x200005f0
 80a2518:	200005ec 	.word	0x200005ec
 80a251c:	200005e8 	.word	0x200005e8
 80a2520:	200005e4 	.word	0x200005e4
 80a2524:	200005e0 	.word	0x200005e0
 80a2528:	200005dc 	.word	0x200005dc
 80a252c:	200005d8 	.word	0x200005d8
 80a2530:	200005d4 	.word	0x200005d4

080a2534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2534:	4b18      	ldr	r3, [pc, #96]	; (80a2598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2536:	681a      	ldr	r2, [r3, #0]
 80a2538:	07d1      	lsls	r1, r2, #31
 80a253a:	bf5c      	itt	pl
 80a253c:	2201      	movpl	r2, #1
 80a253e:	601a      	strpl	r2, [r3, #0]
 80a2540:	4b16      	ldr	r3, [pc, #88]	; (80a259c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2542:	681a      	ldr	r2, [r3, #0]
 80a2544:	07d2      	lsls	r2, r2, #31
 80a2546:	bf5c      	itt	pl
 80a2548:	2201      	movpl	r2, #1
 80a254a:	601a      	strpl	r2, [r3, #0]
 80a254c:	4b14      	ldr	r3, [pc, #80]	; (80a25a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a254e:	681a      	ldr	r2, [r3, #0]
 80a2550:	07d0      	lsls	r0, r2, #31
 80a2552:	bf5c      	itt	pl
 80a2554:	2201      	movpl	r2, #1
 80a2556:	601a      	strpl	r2, [r3, #0]
 80a2558:	4b12      	ldr	r3, [pc, #72]	; (80a25a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a255a:	681a      	ldr	r2, [r3, #0]
 80a255c:	07d1      	lsls	r1, r2, #31
 80a255e:	bf5c      	itt	pl
 80a2560:	2201      	movpl	r2, #1
 80a2562:	601a      	strpl	r2, [r3, #0]
 80a2564:	4b10      	ldr	r3, [pc, #64]	; (80a25a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2566:	681a      	ldr	r2, [r3, #0]
 80a2568:	07d2      	lsls	r2, r2, #31
 80a256a:	bf5c      	itt	pl
 80a256c:	2201      	movpl	r2, #1
 80a256e:	601a      	strpl	r2, [r3, #0]
 80a2570:	4b0e      	ldr	r3, [pc, #56]	; (80a25ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2572:	681a      	ldr	r2, [r3, #0]
 80a2574:	07d0      	lsls	r0, r2, #31
 80a2576:	bf5c      	itt	pl
 80a2578:	2201      	movpl	r2, #1
 80a257a:	601a      	strpl	r2, [r3, #0]
 80a257c:	4b0c      	ldr	r3, [pc, #48]	; (80a25b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a257e:	681a      	ldr	r2, [r3, #0]
 80a2580:	07d1      	lsls	r1, r2, #31
 80a2582:	bf5c      	itt	pl
 80a2584:	2201      	movpl	r2, #1
 80a2586:	601a      	strpl	r2, [r3, #0]
 80a2588:	4b0a      	ldr	r3, [pc, #40]	; (80a25b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a258a:	681a      	ldr	r2, [r3, #0]
 80a258c:	07d2      	lsls	r2, r2, #31
 80a258e:	bf5c      	itt	pl
 80a2590:	2201      	movpl	r2, #1
 80a2592:	601a      	strpl	r2, [r3, #0]
 80a2594:	4770      	bx	lr
 80a2596:	bf00      	nop
 80a2598:	20000620 	.word	0x20000620
 80a259c:	2000061c 	.word	0x2000061c
 80a25a0:	20000618 	.word	0x20000618
 80a25a4:	20000614 	.word	0x20000614
 80a25a8:	20000610 	.word	0x20000610
 80a25ac:	2000060c 	.word	0x2000060c
 80a25b0:	20000608 	.word	0x20000608
 80a25b4:	20000604 	.word	0x20000604

080a25b8 <__aeabi_drsub>:
 80a25b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a25bc:	e002      	b.n	80a25c4 <__adddf3>
 80a25be:	bf00      	nop

080a25c0 <__aeabi_dsub>:
 80a25c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a25c4 <__adddf3>:
 80a25c4:	b530      	push	{r4, r5, lr}
 80a25c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a25ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a25ce:	ea94 0f05 	teq	r4, r5
 80a25d2:	bf08      	it	eq
 80a25d4:	ea90 0f02 	teqeq	r0, r2
 80a25d8:	bf1f      	itttt	ne
 80a25da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a25de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a25e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a25e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a25ea:	f000 80e2 	beq.w	80a27b2 <__adddf3+0x1ee>
 80a25ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a25f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a25f6:	bfb8      	it	lt
 80a25f8:	426d      	neglt	r5, r5
 80a25fa:	dd0c      	ble.n	80a2616 <__adddf3+0x52>
 80a25fc:	442c      	add	r4, r5
 80a25fe:	ea80 0202 	eor.w	r2, r0, r2
 80a2602:	ea81 0303 	eor.w	r3, r1, r3
 80a2606:	ea82 0000 	eor.w	r0, r2, r0
 80a260a:	ea83 0101 	eor.w	r1, r3, r1
 80a260e:	ea80 0202 	eor.w	r2, r0, r2
 80a2612:	ea81 0303 	eor.w	r3, r1, r3
 80a2616:	2d36      	cmp	r5, #54	; 0x36
 80a2618:	bf88      	it	hi
 80a261a:	bd30      	pophi	{r4, r5, pc}
 80a261c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2620:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2624:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2628:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a262c:	d002      	beq.n	80a2634 <__adddf3+0x70>
 80a262e:	4240      	negs	r0, r0
 80a2630:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2634:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2638:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a263c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2640:	d002      	beq.n	80a2648 <__adddf3+0x84>
 80a2642:	4252      	negs	r2, r2
 80a2644:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2648:	ea94 0f05 	teq	r4, r5
 80a264c:	f000 80a7 	beq.w	80a279e <__adddf3+0x1da>
 80a2650:	f1a4 0401 	sub.w	r4, r4, #1
 80a2654:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2658:	db0d      	blt.n	80a2676 <__adddf3+0xb2>
 80a265a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a265e:	fa22 f205 	lsr.w	r2, r2, r5
 80a2662:	1880      	adds	r0, r0, r2
 80a2664:	f141 0100 	adc.w	r1, r1, #0
 80a2668:	fa03 f20e 	lsl.w	r2, r3, lr
 80a266c:	1880      	adds	r0, r0, r2
 80a266e:	fa43 f305 	asr.w	r3, r3, r5
 80a2672:	4159      	adcs	r1, r3
 80a2674:	e00e      	b.n	80a2694 <__adddf3+0xd0>
 80a2676:	f1a5 0520 	sub.w	r5, r5, #32
 80a267a:	f10e 0e20 	add.w	lr, lr, #32
 80a267e:	2a01      	cmp	r2, #1
 80a2680:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2684:	bf28      	it	cs
 80a2686:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a268a:	fa43 f305 	asr.w	r3, r3, r5
 80a268e:	18c0      	adds	r0, r0, r3
 80a2690:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2694:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2698:	d507      	bpl.n	80a26aa <__adddf3+0xe6>
 80a269a:	f04f 0e00 	mov.w	lr, #0
 80a269e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a26a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a26a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80a26aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a26ae:	d31b      	bcc.n	80a26e8 <__adddf3+0x124>
 80a26b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a26b4:	d30c      	bcc.n	80a26d0 <__adddf3+0x10c>
 80a26b6:	0849      	lsrs	r1, r1, #1
 80a26b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80a26bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a26c0:	f104 0401 	add.w	r4, r4, #1
 80a26c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a26c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a26cc:	f080 809a 	bcs.w	80a2804 <__adddf3+0x240>
 80a26d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a26d4:	bf08      	it	eq
 80a26d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a26da:	f150 0000 	adcs.w	r0, r0, #0
 80a26de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a26e2:	ea41 0105 	orr.w	r1, r1, r5
 80a26e6:	bd30      	pop	{r4, r5, pc}
 80a26e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a26ec:	4140      	adcs	r0, r0
 80a26ee:	eb41 0101 	adc.w	r1, r1, r1
 80a26f2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a26f6:	f1a4 0401 	sub.w	r4, r4, #1
 80a26fa:	d1e9      	bne.n	80a26d0 <__adddf3+0x10c>
 80a26fc:	f091 0f00 	teq	r1, #0
 80a2700:	bf04      	itt	eq
 80a2702:	4601      	moveq	r1, r0
 80a2704:	2000      	moveq	r0, #0
 80a2706:	fab1 f381 	clz	r3, r1
 80a270a:	bf08      	it	eq
 80a270c:	3320      	addeq	r3, #32
 80a270e:	f1a3 030b 	sub.w	r3, r3, #11
 80a2712:	f1b3 0220 	subs.w	r2, r3, #32
 80a2716:	da0c      	bge.n	80a2732 <__adddf3+0x16e>
 80a2718:	320c      	adds	r2, #12
 80a271a:	dd08      	ble.n	80a272e <__adddf3+0x16a>
 80a271c:	f102 0c14 	add.w	ip, r2, #20
 80a2720:	f1c2 020c 	rsb	r2, r2, #12
 80a2724:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2728:	fa21 f102 	lsr.w	r1, r1, r2
 80a272c:	e00c      	b.n	80a2748 <__adddf3+0x184>
 80a272e:	f102 0214 	add.w	r2, r2, #20
 80a2732:	bfd8      	it	le
 80a2734:	f1c2 0c20 	rsble	ip, r2, #32
 80a2738:	fa01 f102 	lsl.w	r1, r1, r2
 80a273c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2740:	bfdc      	itt	le
 80a2742:	ea41 010c 	orrle.w	r1, r1, ip
 80a2746:	4090      	lslle	r0, r2
 80a2748:	1ae4      	subs	r4, r4, r3
 80a274a:	bfa2      	ittt	ge
 80a274c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2750:	4329      	orrge	r1, r5
 80a2752:	bd30      	popge	{r4, r5, pc}
 80a2754:	ea6f 0404 	mvn.w	r4, r4
 80a2758:	3c1f      	subs	r4, #31
 80a275a:	da1c      	bge.n	80a2796 <__adddf3+0x1d2>
 80a275c:	340c      	adds	r4, #12
 80a275e:	dc0e      	bgt.n	80a277e <__adddf3+0x1ba>
 80a2760:	f104 0414 	add.w	r4, r4, #20
 80a2764:	f1c4 0220 	rsb	r2, r4, #32
 80a2768:	fa20 f004 	lsr.w	r0, r0, r4
 80a276c:	fa01 f302 	lsl.w	r3, r1, r2
 80a2770:	ea40 0003 	orr.w	r0, r0, r3
 80a2774:	fa21 f304 	lsr.w	r3, r1, r4
 80a2778:	ea45 0103 	orr.w	r1, r5, r3
 80a277c:	bd30      	pop	{r4, r5, pc}
 80a277e:	f1c4 040c 	rsb	r4, r4, #12
 80a2782:	f1c4 0220 	rsb	r2, r4, #32
 80a2786:	fa20 f002 	lsr.w	r0, r0, r2
 80a278a:	fa01 f304 	lsl.w	r3, r1, r4
 80a278e:	ea40 0003 	orr.w	r0, r0, r3
 80a2792:	4629      	mov	r1, r5
 80a2794:	bd30      	pop	{r4, r5, pc}
 80a2796:	fa21 f004 	lsr.w	r0, r1, r4
 80a279a:	4629      	mov	r1, r5
 80a279c:	bd30      	pop	{r4, r5, pc}
 80a279e:	f094 0f00 	teq	r4, #0
 80a27a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a27a6:	bf06      	itte	eq
 80a27a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a27ac:	3401      	addeq	r4, #1
 80a27ae:	3d01      	subne	r5, #1
 80a27b0:	e74e      	b.n	80a2650 <__adddf3+0x8c>
 80a27b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a27b6:	bf18      	it	ne
 80a27b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a27bc:	d029      	beq.n	80a2812 <__adddf3+0x24e>
 80a27be:	ea94 0f05 	teq	r4, r5
 80a27c2:	bf08      	it	eq
 80a27c4:	ea90 0f02 	teqeq	r0, r2
 80a27c8:	d005      	beq.n	80a27d6 <__adddf3+0x212>
 80a27ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80a27ce:	bf04      	itt	eq
 80a27d0:	4619      	moveq	r1, r3
 80a27d2:	4610      	moveq	r0, r2
 80a27d4:	bd30      	pop	{r4, r5, pc}
 80a27d6:	ea91 0f03 	teq	r1, r3
 80a27da:	bf1e      	ittt	ne
 80a27dc:	2100      	movne	r1, #0
 80a27de:	2000      	movne	r0, #0
 80a27e0:	bd30      	popne	{r4, r5, pc}
 80a27e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a27e6:	d105      	bne.n	80a27f4 <__adddf3+0x230>
 80a27e8:	0040      	lsls	r0, r0, #1
 80a27ea:	4149      	adcs	r1, r1
 80a27ec:	bf28      	it	cs
 80a27ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a27f2:	bd30      	pop	{r4, r5, pc}
 80a27f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a27f8:	bf3c      	itt	cc
 80a27fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a27fe:	bd30      	popcc	{r4, r5, pc}
 80a2800:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2804:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a280c:	f04f 0000 	mov.w	r0, #0
 80a2810:	bd30      	pop	{r4, r5, pc}
 80a2812:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2816:	bf1a      	itte	ne
 80a2818:	4619      	movne	r1, r3
 80a281a:	4610      	movne	r0, r2
 80a281c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2820:	bf1c      	itt	ne
 80a2822:	460b      	movne	r3, r1
 80a2824:	4602      	movne	r2, r0
 80a2826:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a282a:	bf06      	itte	eq
 80a282c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2830:	ea91 0f03 	teqeq	r1, r3
 80a2834:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2838:	bd30      	pop	{r4, r5, pc}
 80a283a:	bf00      	nop

080a283c <__aeabi_ui2d>:
 80a283c:	f090 0f00 	teq	r0, #0
 80a2840:	bf04      	itt	eq
 80a2842:	2100      	moveq	r1, #0
 80a2844:	4770      	bxeq	lr
 80a2846:	b530      	push	{r4, r5, lr}
 80a2848:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a284c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2850:	f04f 0500 	mov.w	r5, #0
 80a2854:	f04f 0100 	mov.w	r1, #0
 80a2858:	e750      	b.n	80a26fc <__adddf3+0x138>
 80a285a:	bf00      	nop

080a285c <__aeabi_i2d>:
 80a285c:	f090 0f00 	teq	r0, #0
 80a2860:	bf04      	itt	eq
 80a2862:	2100      	moveq	r1, #0
 80a2864:	4770      	bxeq	lr
 80a2866:	b530      	push	{r4, r5, lr}
 80a2868:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a286c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2870:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2874:	bf48      	it	mi
 80a2876:	4240      	negmi	r0, r0
 80a2878:	f04f 0100 	mov.w	r1, #0
 80a287c:	e73e      	b.n	80a26fc <__adddf3+0x138>
 80a287e:	bf00      	nop

080a2880 <__aeabi_f2d>:
 80a2880:	0042      	lsls	r2, r0, #1
 80a2882:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2886:	ea4f 0131 	mov.w	r1, r1, rrx
 80a288a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a288e:	bf1f      	itttt	ne
 80a2890:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2894:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2898:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a289c:	4770      	bxne	lr
 80a289e:	f092 0f00 	teq	r2, #0
 80a28a2:	bf14      	ite	ne
 80a28a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a28a8:	4770      	bxeq	lr
 80a28aa:	b530      	push	{r4, r5, lr}
 80a28ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a28b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a28b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a28b8:	e720      	b.n	80a26fc <__adddf3+0x138>
 80a28ba:	bf00      	nop

080a28bc <__aeabi_ul2d>:
 80a28bc:	ea50 0201 	orrs.w	r2, r0, r1
 80a28c0:	bf08      	it	eq
 80a28c2:	4770      	bxeq	lr
 80a28c4:	b530      	push	{r4, r5, lr}
 80a28c6:	f04f 0500 	mov.w	r5, #0
 80a28ca:	e00a      	b.n	80a28e2 <__aeabi_l2d+0x16>

080a28cc <__aeabi_l2d>:
 80a28cc:	ea50 0201 	orrs.w	r2, r0, r1
 80a28d0:	bf08      	it	eq
 80a28d2:	4770      	bxeq	lr
 80a28d4:	b530      	push	{r4, r5, lr}
 80a28d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a28da:	d502      	bpl.n	80a28e2 <__aeabi_l2d+0x16>
 80a28dc:	4240      	negs	r0, r0
 80a28de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a28e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a28e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a28ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a28ee:	f43f aedc 	beq.w	80a26aa <__adddf3+0xe6>
 80a28f2:	f04f 0203 	mov.w	r2, #3
 80a28f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a28fa:	bf18      	it	ne
 80a28fc:	3203      	addne	r2, #3
 80a28fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2902:	bf18      	it	ne
 80a2904:	3203      	addne	r2, #3
 80a2906:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a290a:	f1c2 0320 	rsb	r3, r2, #32
 80a290e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2912:	fa20 f002 	lsr.w	r0, r0, r2
 80a2916:	fa01 fe03 	lsl.w	lr, r1, r3
 80a291a:	ea40 000e 	orr.w	r0, r0, lr
 80a291e:	fa21 f102 	lsr.w	r1, r1, r2
 80a2922:	4414      	add	r4, r2
 80a2924:	e6c1      	b.n	80a26aa <__adddf3+0xe6>
 80a2926:	bf00      	nop

080a2928 <__aeabi_dmul>:
 80a2928:	b570      	push	{r4, r5, r6, lr}
 80a292a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a292e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2932:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2936:	bf1d      	ittte	ne
 80a2938:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a293c:	ea94 0f0c 	teqne	r4, ip
 80a2940:	ea95 0f0c 	teqne	r5, ip
 80a2944:	f000 f8de 	bleq	80a2b04 <__aeabi_dmul+0x1dc>
 80a2948:	442c      	add	r4, r5
 80a294a:	ea81 0603 	eor.w	r6, r1, r3
 80a294e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2952:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2956:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a295a:	bf18      	it	ne
 80a295c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2964:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2968:	d038      	beq.n	80a29dc <__aeabi_dmul+0xb4>
 80a296a:	fba0 ce02 	umull	ip, lr, r0, r2
 80a296e:	f04f 0500 	mov.w	r5, #0
 80a2972:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2976:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a297a:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a297e:	f04f 0600 	mov.w	r6, #0
 80a2982:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2986:	f09c 0f00 	teq	ip, #0
 80a298a:	bf18      	it	ne
 80a298c:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2990:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2994:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2998:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a299c:	d204      	bcs.n	80a29a8 <__aeabi_dmul+0x80>
 80a299e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a29a2:	416d      	adcs	r5, r5
 80a29a4:	eb46 0606 	adc.w	r6, r6, r6
 80a29a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a29ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a29b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a29b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a29b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a29bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a29c0:	bf88      	it	hi
 80a29c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a29c6:	d81e      	bhi.n	80a2a06 <__aeabi_dmul+0xde>
 80a29c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a29cc:	bf08      	it	eq
 80a29ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a29d2:	f150 0000 	adcs.w	r0, r0, #0
 80a29d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a29da:	bd70      	pop	{r4, r5, r6, pc}
 80a29dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a29e0:	ea46 0101 	orr.w	r1, r6, r1
 80a29e4:	ea40 0002 	orr.w	r0, r0, r2
 80a29e8:	ea81 0103 	eor.w	r1, r1, r3
 80a29ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a29f0:	bfc2      	ittt	gt
 80a29f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a29f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a29fa:	bd70      	popgt	{r4, r5, r6, pc}
 80a29fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2a00:	f04f 0e00 	mov.w	lr, #0
 80a2a04:	3c01      	subs	r4, #1
 80a2a06:	f300 80ab 	bgt.w	80a2b60 <__aeabi_dmul+0x238>
 80a2a0a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2a0e:	bfde      	ittt	le
 80a2a10:	2000      	movle	r0, #0
 80a2a12:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2a16:	bd70      	pople	{r4, r5, r6, pc}
 80a2a18:	f1c4 0400 	rsb	r4, r4, #0
 80a2a1c:	3c20      	subs	r4, #32
 80a2a1e:	da35      	bge.n	80a2a8c <__aeabi_dmul+0x164>
 80a2a20:	340c      	adds	r4, #12
 80a2a22:	dc1b      	bgt.n	80a2a5c <__aeabi_dmul+0x134>
 80a2a24:	f104 0414 	add.w	r4, r4, #20
 80a2a28:	f1c4 0520 	rsb	r5, r4, #32
 80a2a2c:	fa00 f305 	lsl.w	r3, r0, r5
 80a2a30:	fa20 f004 	lsr.w	r0, r0, r4
 80a2a34:	fa01 f205 	lsl.w	r2, r1, r5
 80a2a38:	ea40 0002 	orr.w	r0, r0, r2
 80a2a3c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2a40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2a44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2a48:	fa21 f604 	lsr.w	r6, r1, r4
 80a2a4c:	eb42 0106 	adc.w	r1, r2, r6
 80a2a50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2a54:	bf08      	it	eq
 80a2a56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2a5a:	bd70      	pop	{r4, r5, r6, pc}
 80a2a5c:	f1c4 040c 	rsb	r4, r4, #12
 80a2a60:	f1c4 0520 	rsb	r5, r4, #32
 80a2a64:	fa00 f304 	lsl.w	r3, r0, r4
 80a2a68:	fa20 f005 	lsr.w	r0, r0, r5
 80a2a6c:	fa01 f204 	lsl.w	r2, r1, r4
 80a2a70:	ea40 0002 	orr.w	r0, r0, r2
 80a2a74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2a78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2a7c:	f141 0100 	adc.w	r1, r1, #0
 80a2a80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2a84:	bf08      	it	eq
 80a2a86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2a8a:	bd70      	pop	{r4, r5, r6, pc}
 80a2a8c:	f1c4 0520 	rsb	r5, r4, #32
 80a2a90:	fa00 f205 	lsl.w	r2, r0, r5
 80a2a94:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2a98:	fa20 f304 	lsr.w	r3, r0, r4
 80a2a9c:	fa01 f205 	lsl.w	r2, r1, r5
 80a2aa0:	ea43 0302 	orr.w	r3, r3, r2
 80a2aa4:	fa21 f004 	lsr.w	r0, r1, r4
 80a2aa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2aac:	fa21 f204 	lsr.w	r2, r1, r4
 80a2ab0:	ea20 0002 	bic.w	r0, r0, r2
 80a2ab4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2ab8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2abc:	bf08      	it	eq
 80a2abe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2ac2:	bd70      	pop	{r4, r5, r6, pc}
 80a2ac4:	f094 0f00 	teq	r4, #0
 80a2ac8:	d10f      	bne.n	80a2aea <__aeabi_dmul+0x1c2>
 80a2aca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2ace:	0040      	lsls	r0, r0, #1
 80a2ad0:	eb41 0101 	adc.w	r1, r1, r1
 80a2ad4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2ad8:	bf08      	it	eq
 80a2ada:	3c01      	subeq	r4, #1
 80a2adc:	d0f7      	beq.n	80a2ace <__aeabi_dmul+0x1a6>
 80a2ade:	ea41 0106 	orr.w	r1, r1, r6
 80a2ae2:	f095 0f00 	teq	r5, #0
 80a2ae6:	bf18      	it	ne
 80a2ae8:	4770      	bxne	lr
 80a2aea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2aee:	0052      	lsls	r2, r2, #1
 80a2af0:	eb43 0303 	adc.w	r3, r3, r3
 80a2af4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2af8:	bf08      	it	eq
 80a2afa:	3d01      	subeq	r5, #1
 80a2afc:	d0f7      	beq.n	80a2aee <__aeabi_dmul+0x1c6>
 80a2afe:	ea43 0306 	orr.w	r3, r3, r6
 80a2b02:	4770      	bx	lr
 80a2b04:	ea94 0f0c 	teq	r4, ip
 80a2b08:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2b0c:	bf18      	it	ne
 80a2b0e:	ea95 0f0c 	teqne	r5, ip
 80a2b12:	d00c      	beq.n	80a2b2e <__aeabi_dmul+0x206>
 80a2b14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2b18:	bf18      	it	ne
 80a2b1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2b1e:	d1d1      	bne.n	80a2ac4 <__aeabi_dmul+0x19c>
 80a2b20:	ea81 0103 	eor.w	r1, r1, r3
 80a2b24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2b28:	f04f 0000 	mov.w	r0, #0
 80a2b2c:	bd70      	pop	{r4, r5, r6, pc}
 80a2b2e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2b32:	bf06      	itte	eq
 80a2b34:	4610      	moveq	r0, r2
 80a2b36:	4619      	moveq	r1, r3
 80a2b38:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2b3c:	d019      	beq.n	80a2b72 <__aeabi_dmul+0x24a>
 80a2b3e:	ea94 0f0c 	teq	r4, ip
 80a2b42:	d102      	bne.n	80a2b4a <__aeabi_dmul+0x222>
 80a2b44:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2b48:	d113      	bne.n	80a2b72 <__aeabi_dmul+0x24a>
 80a2b4a:	ea95 0f0c 	teq	r5, ip
 80a2b4e:	d105      	bne.n	80a2b5c <__aeabi_dmul+0x234>
 80a2b50:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2b54:	bf1c      	itt	ne
 80a2b56:	4610      	movne	r0, r2
 80a2b58:	4619      	movne	r1, r3
 80a2b5a:	d10a      	bne.n	80a2b72 <__aeabi_dmul+0x24a>
 80a2b5c:	ea81 0103 	eor.w	r1, r1, r3
 80a2b60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2b64:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2b68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2b6c:	f04f 0000 	mov.w	r0, #0
 80a2b70:	bd70      	pop	{r4, r5, r6, pc}
 80a2b72:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2b76:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2b7a:	bd70      	pop	{r4, r5, r6, pc}

080a2b7c <__aeabi_ddiv>:
 80a2b7c:	b570      	push	{r4, r5, r6, lr}
 80a2b7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2b82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2b86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2b8a:	bf1d      	ittte	ne
 80a2b8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2b90:	ea94 0f0c 	teqne	r4, ip
 80a2b94:	ea95 0f0c 	teqne	r5, ip
 80a2b98:	f000 f8a7 	bleq	80a2cea <__aeabi_ddiv+0x16e>
 80a2b9c:	eba4 0405 	sub.w	r4, r4, r5
 80a2ba0:	ea81 0e03 	eor.w	lr, r1, r3
 80a2ba4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2ba8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2bac:	f000 8088 	beq.w	80a2cc0 <__aeabi_ddiv+0x144>
 80a2bb0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2bb4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2bb8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2bbc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2bc0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2bc4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2bc8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2bcc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2bd0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2bd4:	429d      	cmp	r5, r3
 80a2bd6:	bf08      	it	eq
 80a2bd8:	4296      	cmpeq	r6, r2
 80a2bda:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2bde:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2be2:	d202      	bcs.n	80a2bea <__aeabi_ddiv+0x6e>
 80a2be4:	085b      	lsrs	r3, r3, #1
 80a2be6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2bea:	1ab6      	subs	r6, r6, r2
 80a2bec:	eb65 0503 	sbc.w	r5, r5, r3
 80a2bf0:	085b      	lsrs	r3, r3, #1
 80a2bf2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2bf6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2bfa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2bfe:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2c02:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2c06:	bf22      	ittt	cs
 80a2c08:	1ab6      	subcs	r6, r6, r2
 80a2c0a:	4675      	movcs	r5, lr
 80a2c0c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2c10:	085b      	lsrs	r3, r3, #1
 80a2c12:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2c16:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2c1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2c1e:	bf22      	ittt	cs
 80a2c20:	1ab6      	subcs	r6, r6, r2
 80a2c22:	4675      	movcs	r5, lr
 80a2c24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2c28:	085b      	lsrs	r3, r3, #1
 80a2c2a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2c2e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2c32:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2c36:	bf22      	ittt	cs
 80a2c38:	1ab6      	subcs	r6, r6, r2
 80a2c3a:	4675      	movcs	r5, lr
 80a2c3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2c40:	085b      	lsrs	r3, r3, #1
 80a2c42:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2c46:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2c4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2c4e:	bf22      	ittt	cs
 80a2c50:	1ab6      	subcs	r6, r6, r2
 80a2c52:	4675      	movcs	r5, lr
 80a2c54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2c58:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2c5c:	d018      	beq.n	80a2c90 <__aeabi_ddiv+0x114>
 80a2c5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2c62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2c66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2c6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2c6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2c72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2c76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2c7a:	d1c0      	bne.n	80a2bfe <__aeabi_ddiv+0x82>
 80a2c7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2c80:	d10b      	bne.n	80a2c9a <__aeabi_ddiv+0x11e>
 80a2c82:	ea41 0100 	orr.w	r1, r1, r0
 80a2c86:	f04f 0000 	mov.w	r0, #0
 80a2c8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2c8e:	e7b6      	b.n	80a2bfe <__aeabi_ddiv+0x82>
 80a2c90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2c94:	bf04      	itt	eq
 80a2c96:	4301      	orreq	r1, r0
 80a2c98:	2000      	moveq	r0, #0
 80a2c9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2c9e:	bf88      	it	hi
 80a2ca0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2ca4:	f63f aeaf 	bhi.w	80a2a06 <__aeabi_dmul+0xde>
 80a2ca8:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2cac:	bf04      	itt	eq
 80a2cae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2cb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2cb6:	f150 0000 	adcs.w	r0, r0, #0
 80a2cba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2cbe:	bd70      	pop	{r4, r5, r6, pc}
 80a2cc0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2cc4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2cc8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2ccc:	bfc2      	ittt	gt
 80a2cce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2cd2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2cd6:	bd70      	popgt	{r4, r5, r6, pc}
 80a2cd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2cdc:	f04f 0e00 	mov.w	lr, #0
 80a2ce0:	3c01      	subs	r4, #1
 80a2ce2:	e690      	b.n	80a2a06 <__aeabi_dmul+0xde>
 80a2ce4:	ea45 0e06 	orr.w	lr, r5, r6
 80a2ce8:	e68d      	b.n	80a2a06 <__aeabi_dmul+0xde>
 80a2cea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2cee:	ea94 0f0c 	teq	r4, ip
 80a2cf2:	bf08      	it	eq
 80a2cf4:	ea95 0f0c 	teqeq	r5, ip
 80a2cf8:	f43f af3b 	beq.w	80a2b72 <__aeabi_dmul+0x24a>
 80a2cfc:	ea94 0f0c 	teq	r4, ip
 80a2d00:	d10a      	bne.n	80a2d18 <__aeabi_ddiv+0x19c>
 80a2d02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2d06:	f47f af34 	bne.w	80a2b72 <__aeabi_dmul+0x24a>
 80a2d0a:	ea95 0f0c 	teq	r5, ip
 80a2d0e:	f47f af25 	bne.w	80a2b5c <__aeabi_dmul+0x234>
 80a2d12:	4610      	mov	r0, r2
 80a2d14:	4619      	mov	r1, r3
 80a2d16:	e72c      	b.n	80a2b72 <__aeabi_dmul+0x24a>
 80a2d18:	ea95 0f0c 	teq	r5, ip
 80a2d1c:	d106      	bne.n	80a2d2c <__aeabi_ddiv+0x1b0>
 80a2d1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2d22:	f43f aefd 	beq.w	80a2b20 <__aeabi_dmul+0x1f8>
 80a2d26:	4610      	mov	r0, r2
 80a2d28:	4619      	mov	r1, r3
 80a2d2a:	e722      	b.n	80a2b72 <__aeabi_dmul+0x24a>
 80a2d2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2d30:	bf18      	it	ne
 80a2d32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2d36:	f47f aec5 	bne.w	80a2ac4 <__aeabi_dmul+0x19c>
 80a2d3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2d3e:	f47f af0d 	bne.w	80a2b5c <__aeabi_dmul+0x234>
 80a2d42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2d46:	f47f aeeb 	bne.w	80a2b20 <__aeabi_dmul+0x1f8>
 80a2d4a:	e712      	b.n	80a2b72 <__aeabi_dmul+0x24a>

080a2d4c <__aeabi_d2uiz>:
 80a2d4c:	004a      	lsls	r2, r1, #1
 80a2d4e:	d211      	bcs.n	80a2d74 <__aeabi_d2uiz+0x28>
 80a2d50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2d54:	d211      	bcs.n	80a2d7a <__aeabi_d2uiz+0x2e>
 80a2d56:	d50d      	bpl.n	80a2d74 <__aeabi_d2uiz+0x28>
 80a2d58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2d5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2d60:	d40e      	bmi.n	80a2d80 <__aeabi_d2uiz+0x34>
 80a2d62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2d66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2d6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2d6e:	fa23 f002 	lsr.w	r0, r3, r2
 80a2d72:	4770      	bx	lr
 80a2d74:	f04f 0000 	mov.w	r0, #0
 80a2d78:	4770      	bx	lr
 80a2d7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a2d7e:	d102      	bne.n	80a2d86 <__aeabi_d2uiz+0x3a>
 80a2d80:	f04f 30ff 	mov.w	r0, #4294967295
 80a2d84:	4770      	bx	lr
 80a2d86:	f04f 0000 	mov.w	r0, #0
 80a2d8a:	4770      	bx	lr

080a2d8c <__cxa_atexit>:
 80a2d8c:	b510      	push	{r4, lr}
 80a2d8e:	4c05      	ldr	r4, [pc, #20]	; (80a2da4 <__cxa_atexit+0x18>)
 80a2d90:	4613      	mov	r3, r2
 80a2d92:	b12c      	cbz	r4, 80a2da0 <__cxa_atexit+0x14>
 80a2d94:	460a      	mov	r2, r1
 80a2d96:	4601      	mov	r1, r0
 80a2d98:	2002      	movs	r0, #2
 80a2d9a:	f3af 8000 	nop.w
 80a2d9e:	bd10      	pop	{r4, pc}
 80a2da0:	4620      	mov	r0, r4
 80a2da2:	bd10      	pop	{r4, pc}
 80a2da4:	00000000 	.word	0x00000000

080a2da8 <memcpy>:
 80a2da8:	b510      	push	{r4, lr}
 80a2daa:	1e43      	subs	r3, r0, #1
 80a2dac:	440a      	add	r2, r1
 80a2dae:	4291      	cmp	r1, r2
 80a2db0:	d004      	beq.n	80a2dbc <memcpy+0x14>
 80a2db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2db6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2dba:	e7f8      	b.n	80a2dae <memcpy+0x6>
 80a2dbc:	bd10      	pop	{r4, pc}

080a2dbe <memset>:
 80a2dbe:	4603      	mov	r3, r0
 80a2dc0:	4402      	add	r2, r0
 80a2dc2:	4293      	cmp	r3, r2
 80a2dc4:	d002      	beq.n	80a2dcc <memset+0xe>
 80a2dc6:	f803 1b01 	strb.w	r1, [r3], #1
 80a2dca:	e7fa      	b.n	80a2dc2 <memset+0x4>
 80a2dcc:	4770      	bx	lr
	...

080a2dd0 <srand>:
 80a2dd0:	b538      	push	{r3, r4, r5, lr}
 80a2dd2:	4b12      	ldr	r3, [pc, #72]	; (80a2e1c <srand+0x4c>)
 80a2dd4:	4605      	mov	r5, r0
 80a2dd6:	681c      	ldr	r4, [r3, #0]
 80a2dd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2dda:	b9d3      	cbnz	r3, 80a2e12 <srand+0x42>
 80a2ddc:	2018      	movs	r0, #24
 80a2dde:	f7fe fda7 	bl	80a1930 <malloc>
 80a2de2:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2de6:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2de8:	8003      	strh	r3, [r0, #0]
 80a2dea:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2dee:	8043      	strh	r3, [r0, #2]
 80a2df0:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2df4:	8083      	strh	r3, [r0, #4]
 80a2df6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2dfa:	80c3      	strh	r3, [r0, #6]
 80a2dfc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2e00:	8103      	strh	r3, [r0, #8]
 80a2e02:	2305      	movs	r3, #5
 80a2e04:	8143      	strh	r3, [r0, #10]
 80a2e06:	230b      	movs	r3, #11
 80a2e08:	8183      	strh	r3, [r0, #12]
 80a2e0a:	2201      	movs	r2, #1
 80a2e0c:	2300      	movs	r3, #0
 80a2e0e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2e12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2e14:	2200      	movs	r2, #0
 80a2e16:	611d      	str	r5, [r3, #16]
 80a2e18:	615a      	str	r2, [r3, #20]
 80a2e1a:	bd38      	pop	{r3, r4, r5, pc}
 80a2e1c:	2000006c 	.word	0x2000006c

080a2e20 <strlen>:
 80a2e20:	4603      	mov	r3, r0
 80a2e22:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2e26:	2a00      	cmp	r2, #0
 80a2e28:	d1fb      	bne.n	80a2e22 <strlen+0x2>
 80a2e2a:	1a18      	subs	r0, r3, r0
 80a2e2c:	3801      	subs	r0, #1
 80a2e2e:	4770      	bx	lr

080a2e30 <dynalib_user>:
 80a2e30:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a2e40:	0000 0000 7845 6574 6e72 6c61 4820 7261     ....External Har
 80a2e50:	7764 7261 2065 6554 7473 0000               dware Test..

080a2e5c <CSWTCH.215>:
 80a2e5c:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a2e6c:	0050 0000                                   P...

080a2e70 <_ZTV8SPIClass>:
	...
 80a2e78:	1951 080a 1953 080a 6162 6475 5300 7265     Q...S...baud.Ser
 80a2e88:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 80a2e98:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 80a2ea8:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 80a2eb8:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 80a2ec8:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 80a2ed8:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 80a2ee8:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 80a2ef8:	0070 3025 3031 2075 5d00 0020 6425 2c00     p.%010u .] .%d.,
 80a2f08:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
 80a2f18:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
 80a2f28:	0a0d 6600 6c00 006e 6e66 6300 646f 0065     ...f.ln.fn.code.
 80a2f38:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
 80a2f48:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 80a2f58:	0072 6170 696e 0063 6c61 006c 005a 2b25     r.panic.all.Z.%+
 80a2f68:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a2f78:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a2f88:	6974 656d 0000 0000                         time....

080a2f90 <_ZTV9IPAddress>:
	...
 80a2f98:	1c39 080a 1c29 080a 1c2b 080a               9...)...+...

080a2fa4 <_ZTV9USBSerial>:
	...
 80a2fac:	1cf5 080a 1d45 080a 1d53 080a 19a9 080a     ....E...S.......
 80a2fbc:	1d31 080a 1cf7 080a 1d0d 080a 1d3f 080a     1...........?...
 80a2fcc:	1d23 080a 1cf1 080a                         #.......

080a2fd4 <_ZTV11USARTSerial>:
	...
 80a2fdc:	1ec3 080a 1f13 080a 1f21 080a 19a9 080a     ........!.......
 80a2fec:	1ed7 080a 1ef9 080a 1ee5 080a 1f0d 080a     ................
 80a2ffc:	1ec5 080a 1ec9 080a                         ........

080a3004 <_ZTV7TwoWire>:
	...
 80a300c:	1fc5 080a 200f 080a 1fe7 080a 1fc7 080a     ..... ..........
 80a301c:	1fef 080a 1ff7 080a 1fff 080a 2007 080a     ............. ..

080a302c <_ZTVN5spark9WiFiClassE>:
	...
 80a3034:	20df 080a 20d5 080a 20cb 080a 2049 080a     . ... ... ..I ..
 80a3044:	1a7f 080a 20bf 080a 20b3 080a 20ab 080a     ..... ... ... ..
 80a3054:	20a1 080a 2097 080a 2053 080a               . ... ..S ..

080a3060 <_ZTVN5spark12NetworkClassE>:
	...
 80a3068:	20fd 080a 2107 080a 2111 080a 211b 080a     . ...!...!...!..
 80a3078:	2125 080a 2131 080a 213d 080a 2149 080a     %!..1!..=!..I!..
 80a3088:	2151 080a 215b 080a 2165 080a               Q!..[!..e!..

080a3094 <__sf_fake_stdin>:
	...

080a30b4 <__sf_fake_stdout>:
	...

080a30d4 <__sf_fake_stderr>:
	...
 80a30f4:	0043                                        C.

080a30f6 <link_const_variable_data_end>:
	...

080a30f8 <link_constructors_location>:
 80a30f8:	080a0259 	.word	0x080a0259
 80a30fc:	080a02a1 	.word	0x080a02a1
 80a3100:	080a02a5 	.word	0x080a02a5
 80a3104:	080a02bd 	.word	0x080a02bd
 80a3108:	080a15e5 	.word	0x080a15e5
 80a310c:	080a15f9 	.word	0x080a15f9
 80a3110:	080a15fd 	.word	0x080a15fd
 80a3114:	080a1601 	.word	0x080a1601
 80a3118:	080a1991 	.word	0x080a1991
 80a311c:	080a1a8d 	.word	0x080a1a8d
 80a3120:	080a1a9d 	.word	0x080a1a9d
 80a3124:	080a1ad5 	.word	0x080a1ad5
 80a3128:	080a20e9 	.word	0x080a20e9
 80a312c:	080a21b5 	.word	0x080a21b5
 80a3130:	080a2265 	.word	0x080a2265
 80a3134:	080a22a9 	.word	0x080a22a9
 80a3138:	080a2329 	.word	0x080a2329
 80a313c:	080a23ad 	.word	0x080a23ad
 80a3140:	080a2471 	.word	0x080a2471
 80a3144:	080a2535 	.word	0x080a2535

080a3148 <link_constructors_end>:
	...
