
c:/Users/me/Dropbox/2019-games/particle/seattle-indies-photon-cube-jam-2019/cube-debug/target/1.4.0/photon/cube-debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004bb0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a4bd0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000480  20000000  080a4bd4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005e4  20000480  20000480  00040480  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a5054  080a5054  00035054  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a507c  080a507c  0003507c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d4647  00000000  00000000  00035080  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013a5f  00000000  00000000  001096c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00015a8f  00000000  00000000  0011d126  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000021f8  00000000  00000000  00132bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000030b8  00000000  00000000  00134dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002dd08  00000000  00000000  00137e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002fa61  00000000  00000000  00165b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a5f0f  00000000  00000000  001955ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bdbc  00000000  00000000  0023b4e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f004 f8e1 	bl	80a41f8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f004 f8e6 	bl	80a420e <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a4bd4 	.word	0x080a4bd4
 80a0050:	20000480 	.word	0x20000480
 80a0054:	20000480 	.word	0x20000480
 80a0058:	20000a64 	.word	0x20000a64
 80a005c:	20000a64 	.word	0x20000a64

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 fee7 	bl	80a2e34 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a4b78 	.word	0x080a4b78
 80a0088:	080a4bc8 	.word	0x080a4bc8

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b862 	b.w	80a0154 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f945 	bl	80a0320 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f002 be8d 	b.w	80a2db8 <_post_loop>

080a009e <_ZdlPv>:
 80a009e:	f002 bced 	b.w	80a2a7c <free>
	...

080a00a4 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a6:	4a03      	ldr	r2, [pc, #12]	; (80a00b4 <__cxa_pure_virtual+0x10>)
 80a00a8:	2100      	movs	r1, #0
 80a00aa:	200c      	movs	r0, #12
 80a00ac:	f002 fc52 	bl	80a2954 <panic_>
 80a00b0:	e7fe      	b.n	80a00b0 <__cxa_pure_virtual+0xc>
 80a00b2:	bf00      	nop
 80a00b4:	080a2751 	.word	0x080a2751

080a00b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b8:	7800      	ldrb	r0, [r0, #0]
 80a00ba:	fab0 f080 	clz	r0, r0
 80a00be:	0940      	lsrs	r0, r0, #5
 80a00c0:	4770      	bx	lr

080a00c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c2:	2301      	movs	r3, #1
 80a00c4:	7003      	strb	r3, [r0, #0]
 80a00c6:	4770      	bx	lr

080a00c8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
 80a00c8:	4770      	bx	lr
	...

080a00cc <_Z12displaySetupv>:
#define OLED_RESET  A2
#define OLED_DC     A3
#define OLED_CS     A4
Adafruit_SSD1306 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);

void displaySetup() {
 80a00cc:	b510      	push	{r4, lr}
  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  display.begin(SSD1306_SWITCHCAPVCC);
 80a00ce:	4c05      	ldr	r4, [pc, #20]	; (80a00e4 <_Z12displaySetupv+0x18>)
 80a00d0:	223c      	movs	r2, #60	; 0x3c
 80a00d2:	4620      	mov	r0, r4
 80a00d4:	2102      	movs	r1, #2
 80a00d6:	f001 ffaf 	bl	80a2038 <_ZN16Adafruit_SSD13065beginEhh>
  // init done
  
  display.display(); // show splashscreen
 80a00da:	4620      	mov	r0, r4
}
 80a00dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void displaySetup() {
  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  display.begin(SSD1306_SWITCHCAPVCC);
  // init done
  
  display.display(); // show splashscreen
 80a00e0:	f002 b87a 	b.w	80a21d8 <_ZN16Adafruit_SSD13067displayEv>
 80a00e4:	2000049c 	.word	0x2000049c

080a00e8 <_Z10touchSetupv>:
// Keeps track of the last pins touched
// so we know when buttons are 'released'
uint16_t lasttouched = 0;
uint16_t currtouched = 0;

void touchSetup() {
 80a00e8:	b510      	push	{r4, lr}
  // Default address is 0x5A, if tied to 3.3V its 0x5B
  // If tied to SDA its 0x5C and if SCL then 0x5D
  if (!cap.begin(0x5A)) {
 80a00ea:	215a      	movs	r1, #90	; 0x5a
 80a00ec:	480b      	ldr	r0, [pc, #44]	; (80a011c <_Z10touchSetupv+0x34>)
 80a00ee:	f000 fb56 	bl	80a079e <_ZN15Adafruit_MPR1215beginEh>
 80a00f2:	b958      	cbnz	r0, 80a010c <_Z10touchSetupv+0x24>
    Serial.println("MPR121 not found, check wiring?");
 80a00f4:	f002 ff9e 	bl	80a3034 <_Z16_fetch_usbserialv>
 80a00f8:	4909      	ldr	r1, [pc, #36]	; (80a0120 <_Z10touchSetupv+0x38>)
 80a00fa:	f002 fd98 	bl	80a2c2e <_ZN5Print7printlnEPKc>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00fe:	4c09      	ldr	r4, [pc, #36]	; (80a0124 <_Z10touchSetupv+0x3c>)
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0100:	f002 fb36 	bl	80a2770 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0104:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a0106:	f002 fca1 	bl	80a2a4c <spark_process>
 80a010a:	e7f9      	b.n	80a0100 <_Z10touchSetupv+0x18>
      #endif
    }

  }

  Serial.println("MPR121 found!");
 80a010c:	f002 ff92 	bl	80a3034 <_Z16_fetch_usbserialv>
}
 80a0110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      #endif
    }

  }

  Serial.println("MPR121 found!");
 80a0114:	4904      	ldr	r1, [pc, #16]	; (80a0128 <_Z10touchSetupv+0x40>)
 80a0116:	f002 bd8a 	b.w	80a2c2e <_ZN5Print7printlnEPKc>
 80a011a:	bf00      	nop
 80a011c:	200004c8 	.word	0x200004c8
 80a0120:	080a4308 	.word	0x080a4308
 80a0124:	20000990 	.word	0x20000990
 80a0128:	080a4328 	.word	0x080a4328

080a012c <_Z13neoPixelSetupv>:
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

void neoPixelSetup() {
 80a012c:	b510      	push	{r4, lr}
  strip.setBrightness(BRIGHTNESS);
 80a012e:	4c06      	ldr	r4, [pc, #24]	; (80a0148 <_Z13neoPixelSetupv+0x1c>)
 80a0130:	21ff      	movs	r1, #255	; 0xff
 80a0132:	4620      	mov	r0, r4
 80a0134:	f001 fd1e 	bl	80a1b74 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  strip.begin();
 80a0138:	4620      	mov	r0, r4
 80a013a:	f000 fbdb 	bl	80a08f4 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
 80a013e:	4620      	mov	r0, r4
}
 80a0140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

void neoPixelSetup() {
  strip.setBrightness(BRIGHTNESS);
  strip.begin();
  strip.show();
 80a0144:	f000 bc0c 	b.w	80a0960 <_ZN17Adafruit_NeoPixel4showEv>
 80a0148:	20000484 	.word	0x20000484

080a014c <_Z11buzzerSetupv>:
}
#endif

#ifdef TEST_BUZZER
void buzzerSetup() {
  pinMode(BUZZER_PIN, OUTPUT);
 80a014c:	2101      	movs	r1, #1
 80a014e:	2011      	movs	r0, #17
 80a0150:	f003 b9b2 	b.w	80a34b8 <pinMode>

080a0154 <setup>:
}
#endif

void setup() {
 80a0154:	b510      	push	{r4, lr}
  Serial.begin(9600);
 80a0156:	f002 ff6d 	bl	80a3034 <_Z16_fetch_usbserialv>
  delay(1000);
  Serial.println("External Hardware Test");
 80a015a:	4c20      	ldr	r4, [pc, #128]	; (80a01dc <setup+0x88>)
  pinMode(BUZZER_PIN, OUTPUT);
}
#endif

void setup() {
  Serial.begin(9600);
 80a015c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0160:	f002 ff4e 	bl	80a3000 <_ZN9USBSerial5beginEl>
  delay(1000);
 80a0164:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0168:	f002 fdd4 	bl	80a2d14 <delay>
  Serial.println("External Hardware Test");
 80a016c:	f002 ff62 	bl	80a3034 <_Z16_fetch_usbserialv>
 80a0170:	4621      	mov	r1, r4
 80a0172:	f002 fd5c 	bl	80a2c2e <_ZN5Print7printlnEPKc>
  delay(1000);
 80a0176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a017a:	f002 fdcb 	bl	80a2d14 <delay>
  Serial.println("External Hardware Test");
 80a017e:	f002 ff59 	bl	80a3034 <_Z16_fetch_usbserialv>
 80a0182:	4621      	mov	r1, r4
 80a0184:	f002 fd53 	bl	80a2c2e <_ZN5Print7printlnEPKc>
  delay(1000);
 80a0188:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a018c:	f002 fdc2 	bl	80a2d14 <delay>
  Serial.println("External Hardware Test");
 80a0190:	f002 ff50 	bl	80a3034 <_Z16_fetch_usbserialv>
 80a0194:	4621      	mov	r1, r4
 80a0196:	f002 fd4a 	bl	80a2c2e <_ZN5Print7printlnEPKc>
  delay(1000);
 80a019a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a019e:	f002 fdb9 	bl	80a2d14 <delay>
  Serial.println("External Hardware Test");
 80a01a2:	f002 ff47 	bl	80a3034 <_Z16_fetch_usbserialv>
 80a01a6:	4621      	mov	r1, r4
 80a01a8:	f002 fd41 	bl	80a2c2e <_ZN5Print7printlnEPKc>
  delay(1000);
 80a01ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a01b0:	f002 fdb0 	bl	80a2d14 <delay>
  Serial.println("External Hardware Test");
 80a01b4:	f002 ff3e 	bl	80a3034 <_Z16_fetch_usbserialv>
 80a01b8:	4621      	mov	r1, r4
 80a01ba:	f002 fd38 	bl	80a2c2e <_ZN5Print7printlnEPKc>
  #ifdef TEST_DISPLAY
  displaySetup();
 80a01be:	f7ff ff85 	bl	80a00cc <_Z12displaySetupv>
  #endif

  #ifdef TEST_TOUCH
  touchSetup();
 80a01c2:	f7ff ff91 	bl	80a00e8 <_Z10touchSetupv>
  #endif

  #ifdef TEST_NEOPIXEL
  neoPixelSetup();
 80a01c6:	f7ff ffb1 	bl	80a012c <_Z13neoPixelSetupv>
  #ifdef TEST_BEEPER
  beeperSetup();
  #endif

  #ifdef TEST_BUZZER
  buzzerSetup();
 80a01ca:	f7ff ffbf 	bl	80a014c <_Z11buzzerSetupv>
  #endif

  pinMode(CHARGING_PIN, INPUT_PULLDOWN);
}
 80a01ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  #ifdef TEST_BUZZER
  buzzerSetup();
  #endif

  pinMode(CHARGING_PIN, INPUT_PULLDOWN);
 80a01d2:	2103      	movs	r1, #3
 80a01d4:	2007      	movs	r0, #7
 80a01d6:	f003 b96f 	b.w	80a34b8 <pinMode>
 80a01da:	bf00      	nop
 80a01dc:	080a4336 	.word	0x080a4336

080a01e0 <_Z11printStatust>:
}

#ifdef TEST_DISPLAY
#ifdef TEST_TOUCH
unsigned long nextTime = 0;
void printStatus(uint16_t currtouched) {
 80a01e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a01e4:	2500      	movs	r5, #0
 80a01e6:	4606      	mov	r6, r0
  int textSize = 5 + 1 + 5 + 1 + 5;
  int gapSize = (128 - (textSize * 6)) / 5;
  for (int i = 0; i < 6; i++) {
 80a01e8:	462c      	mov	r4, r5
    display.setCursor((i * (gapSize+textSize)), 0);
    display.print(currtouched & (1 << i) ? "***" : " - ");
 80a01ea:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80a0258 <_Z11printStatust+0x78>
 80a01ee:	4f18      	ldr	r7, [pc, #96]	; (80a0250 <_Z11printStatust+0x70>)
unsigned long nextTime = 0;
void printStatus(uint16_t currtouched) {
  int textSize = 5 + 1 + 5 + 1 + 5;
  int gapSize = (128 - (textSize * 6)) / 5;
  for (int i = 0; i < 6; i++) {
    display.setCursor((i * (gapSize+textSize)), 0);
 80a01f0:	b229      	sxth	r1, r5
 80a01f2:	2200      	movs	r2, #0
 80a01f4:	4817      	ldr	r0, [pc, #92]	; (80a0254 <_Z11printStatust+0x74>)
 80a01f6:	f002 fa26 	bl	80a2646 <_ZN12Adafruit_GFX9setCursorEss>
    display.print(currtouched & (1 << i) ? "***" : " - ");
 80a01fa:	fa46 f304 	asr.w	r3, r6, r4
 80a01fe:	f013 0f01 	tst.w	r3, #1
 80a0202:	bf14      	ite	ne
 80a0204:	4641      	movne	r1, r8
 80a0206:	4639      	moveq	r1, r7
 80a0208:	4812      	ldr	r0, [pc, #72]	; (80a0254 <_Z11printStatust+0x74>)
#ifdef TEST_TOUCH
unsigned long nextTime = 0;
void printStatus(uint16_t currtouched) {
  int textSize = 5 + 1 + 5 + 1 + 5;
  int gapSize = (128 - (textSize * 6)) / 5;
  for (int i = 0; i < 6; i++) {
 80a020a:	3401      	adds	r4, #1
    display.setCursor((i * (gapSize+textSize)), 0);
    display.print(currtouched & (1 << i) ? "***" : " - ");
 80a020c:	f002 fcfc 	bl	80a2c08 <_ZN5Print5printEPKc>
 80a0210:	3516      	adds	r5, #22
#ifdef TEST_TOUCH
unsigned long nextTime = 0;
void printStatus(uint16_t currtouched) {
  int textSize = 5 + 1 + 5 + 1 + 5;
  int gapSize = (128 - (textSize * 6)) / 5;
  for (int i = 0; i < 6; i++) {
 80a0212:	2c06      	cmp	r4, #6
 80a0214:	b2ad      	uxth	r5, r5
 80a0216:	d1eb      	bne.n	80a01f0 <_Z11printStatust+0x10>
    display.setCursor((i * (gapSize+textSize)), 0);
    display.print(currtouched & (1 << i) ? "***" : " - ");
  }
  for (int i = 0; i < 6; i++) {
    display.setCursor((i * (gapSize+textSize)), 32);
    display.print(currtouched & (1 << (i + 6)) ? "***" : " - ");
 80a0218:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80a0258 <_Z11printStatust+0x78>
 80a021c:	4f0c      	ldr	r7, [pc, #48]	; (80a0250 <_Z11printStatust+0x70>)
 80a021e:	2500      	movs	r5, #0
  for (int i = 0; i < 6; i++) {
    display.setCursor((i * (gapSize+textSize)), 0);
    display.print(currtouched & (1 << i) ? "***" : " - ");
  }
  for (int i = 0; i < 6; i++) {
    display.setCursor((i * (gapSize+textSize)), 32);
 80a0220:	b229      	sxth	r1, r5
 80a0222:	2220      	movs	r2, #32
 80a0224:	480b      	ldr	r0, [pc, #44]	; (80a0254 <_Z11printStatust+0x74>)
 80a0226:	f002 fa0e 	bl	80a2646 <_ZN12Adafruit_GFX9setCursorEss>
    display.print(currtouched & (1 << (i + 6)) ? "***" : " - ");
 80a022a:	fa46 f304 	asr.w	r3, r6, r4
 80a022e:	f013 0f01 	tst.w	r3, #1
 80a0232:	f105 0516 	add.w	r5, r5, #22
 80a0236:	bf14      	ite	ne
 80a0238:	4641      	movne	r1, r8
 80a023a:	4639      	moveq	r1, r7
 80a023c:	4805      	ldr	r0, [pc, #20]	; (80a0254 <_Z11printStatust+0x74>)
 80a023e:	b2ad      	uxth	r5, r5
 80a0240:	f002 fce2 	bl	80a2c08 <_ZN5Print5printEPKc>
  int gapSize = (128 - (textSize * 6)) / 5;
  for (int i = 0; i < 6; i++) {
    display.setCursor((i * (gapSize+textSize)), 0);
    display.print(currtouched & (1 << i) ? "***" : " - ");
  }
  for (int i = 0; i < 6; i++) {
 80a0244:	2d84      	cmp	r5, #132	; 0x84
 80a0246:	f104 0401 	add.w	r4, r4, #1
 80a024a:	d1e9      	bne.n	80a0220 <_Z11printStatust+0x40>
    display.setCursor((i * (gapSize+textSize)), 32);
    display.print(currtouched & (1 << (i + 6)) ? "***" : " - ");
  }
}
 80a024c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0250:	080a4351 	.word	0x080a4351
 80a0254:	2000049c 	.word	0x2000049c
 80a0258:	080a434d 	.word	0x080a434d

080a025c <_Z17printBaselineDatat>:

void printBaselineData(uint16_t currtouched) {
 80a025c:	b538      	push	{r3, r4, r5, lr}
 80a025e:	2500      	movs	r5, #0
  int textSize = 5 + 1 + 5 + 1 + 5;
  int gapSize = (128 - (textSize * 6)) / 5;
  for (int i = 0; i < 6; i++) {
 80a0260:	462c      	mov	r4, r5
    display.setCursor(i * (gapSize+textSize), 0 + 8);
 80a0262:	2208      	movs	r2, #8
 80a0264:	b229      	sxth	r1, r5
 80a0266:	4813      	ldr	r0, [pc, #76]	; (80a02b4 <_Z17printBaselineDatat+0x58>)
 80a0268:	f002 f9ed 	bl	80a2646 <_ZN12Adafruit_GFX9setCursorEss>
    display.print(cap.baselineData(i));
 80a026c:	b2e1      	uxtb	r1, r4
 80a026e:	4812      	ldr	r0, [pc, #72]	; (80a02b8 <_Z17printBaselineDatat+0x5c>)
 80a0270:	f000 fa1b 	bl	80a06aa <_ZN15Adafruit_MPR12112baselineDataEh>
}

void printBaselineData(uint16_t currtouched) {
  int textSize = 5 + 1 + 5 + 1 + 5;
  int gapSize = (128 - (textSize * 6)) / 5;
  for (int i = 0; i < 6; i++) {
 80a0274:	3401      	adds	r4, #1
    display.setCursor(i * (gapSize+textSize), 0 + 8);
    display.print(cap.baselineData(i));
 80a0276:	4601      	mov	r1, r0
 80a0278:	220a      	movs	r2, #10
 80a027a:	480e      	ldr	r0, [pc, #56]	; (80a02b4 <_Z17printBaselineDatat+0x58>)
 80a027c:	f002 fd2f 	bl	80a2cde <_ZN5Print5printEii>
 80a0280:	3516      	adds	r5, #22
}

void printBaselineData(uint16_t currtouched) {
  int textSize = 5 + 1 + 5 + 1 + 5;
  int gapSize = (128 - (textSize * 6)) / 5;
  for (int i = 0; i < 6; i++) {
 80a0282:	2c06      	cmp	r4, #6
 80a0284:	b2ad      	uxth	r5, r5
 80a0286:	d1ec      	bne.n	80a0262 <_Z17printBaselineDatat+0x6>
 80a0288:	2500      	movs	r5, #0
    display.setCursor(i * (gapSize+textSize), 0 + 8);
    display.print(cap.baselineData(i));
  }
  for (int i = 0; i < 6; i++) {
    display.setCursor(i * (gapSize+textSize), 32 + 8);
 80a028a:	2228      	movs	r2, #40	; 0x28
 80a028c:	b229      	sxth	r1, r5
 80a028e:	4809      	ldr	r0, [pc, #36]	; (80a02b4 <_Z17printBaselineDatat+0x58>)
 80a0290:	f002 f9d9 	bl	80a2646 <_ZN12Adafruit_GFX9setCursorEss>
    display.print(cap.baselineData(i + 6));
 80a0294:	4621      	mov	r1, r4
 80a0296:	4808      	ldr	r0, [pc, #32]	; (80a02b8 <_Z17printBaselineDatat+0x5c>)
 80a0298:	f000 fa07 	bl	80a06aa <_ZN15Adafruit_MPR12112baselineDataEh>
 80a029c:	3516      	adds	r5, #22
 80a029e:	4601      	mov	r1, r0
 80a02a0:	220a      	movs	r2, #10
 80a02a2:	4804      	ldr	r0, [pc, #16]	; (80a02b4 <_Z17printBaselineDatat+0x58>)
 80a02a4:	b2ad      	uxth	r5, r5
 80a02a6:	f002 fd1a 	bl	80a2cde <_ZN5Print5printEii>
 80a02aa:	3401      	adds	r4, #1
  int gapSize = (128 - (textSize * 6)) / 5;
  for (int i = 0; i < 6; i++) {
    display.setCursor(i * (gapSize+textSize), 0 + 8);
    display.print(cap.baselineData(i));
  }
  for (int i = 0; i < 6; i++) {
 80a02ac:	2d84      	cmp	r5, #132	; 0x84
 80a02ae:	b2e4      	uxtb	r4, r4
 80a02b0:	d1eb      	bne.n	80a028a <_Z17printBaselineDatat+0x2e>
    display.setCursor(i * (gapSize+textSize), 32 + 8);
    display.print(cap.baselineData(i + 6));
  }
}
 80a02b2:	bd38      	pop	{r3, r4, r5, pc}
 80a02b4:	2000049c 	.word	0x2000049c
 80a02b8:	200004c8 	.word	0x200004c8

080a02bc <_Z17printFilteredDatat>:

void printFilteredData(uint16_t currtouched) {
 80a02bc:	b538      	push	{r3, r4, r5, lr}
 80a02be:	2500      	movs	r5, #0
  int textSize = 5 + 1 + 5 + 1 + 5;
  int gapSize = (128 - (textSize * 6)) / 5;
  for (int i = 0; i < 6; i++) {
 80a02c0:	462c      	mov	r4, r5
    display.setCursor(i * (gapSize+textSize), 0 + 8 + 10);
 80a02c2:	2212      	movs	r2, #18
 80a02c4:	b229      	sxth	r1, r5
 80a02c6:	4813      	ldr	r0, [pc, #76]	; (80a0314 <_Z17printFilteredDatat+0x58>)
 80a02c8:	f002 f9bd 	bl	80a2646 <_ZN12Adafruit_GFX9setCursorEss>
    display.print(cap.filteredData(i));
 80a02cc:	b2e1      	uxtb	r1, r4
 80a02ce:	4812      	ldr	r0, [pc, #72]	; (80a0318 <_Z17printFilteredDatat+0x5c>)
 80a02d0:	f000 fa23 	bl	80a071a <_ZN15Adafruit_MPR12112filteredDataEh>
}

void printFilteredData(uint16_t currtouched) {
  int textSize = 5 + 1 + 5 + 1 + 5;
  int gapSize = (128 - (textSize * 6)) / 5;
  for (int i = 0; i < 6; i++) {
 80a02d4:	3401      	adds	r4, #1
    display.setCursor(i * (gapSize+textSize), 0 + 8 + 10);
    display.print(cap.filteredData(i));
 80a02d6:	4601      	mov	r1, r0
 80a02d8:	220a      	movs	r2, #10
 80a02da:	480e      	ldr	r0, [pc, #56]	; (80a0314 <_Z17printFilteredDatat+0x58>)
 80a02dc:	f002 fcff 	bl	80a2cde <_ZN5Print5printEii>
 80a02e0:	3516      	adds	r5, #22
}

void printFilteredData(uint16_t currtouched) {
  int textSize = 5 + 1 + 5 + 1 + 5;
  int gapSize = (128 - (textSize * 6)) / 5;
  for (int i = 0; i < 6; i++) {
 80a02e2:	2c06      	cmp	r4, #6
 80a02e4:	b2ad      	uxth	r5, r5
 80a02e6:	d1ec      	bne.n	80a02c2 <_Z17printFilteredDatat+0x6>
 80a02e8:	2500      	movs	r5, #0
    display.setCursor(i * (gapSize+textSize), 0 + 8 + 10);
    display.print(cap.filteredData(i));
  }
  for (int i = 0; i < 6; i++) {
    display.setCursor(i * (gapSize+textSize), 32 + 8 + 10);
 80a02ea:	2232      	movs	r2, #50	; 0x32
 80a02ec:	b229      	sxth	r1, r5
 80a02ee:	4809      	ldr	r0, [pc, #36]	; (80a0314 <_Z17printFilteredDatat+0x58>)
 80a02f0:	f002 f9a9 	bl	80a2646 <_ZN12Adafruit_GFX9setCursorEss>
    display.print(cap.filteredData(i + 6));
 80a02f4:	4621      	mov	r1, r4
 80a02f6:	4808      	ldr	r0, [pc, #32]	; (80a0318 <_Z17printFilteredDatat+0x5c>)
 80a02f8:	f000 fa0f 	bl	80a071a <_ZN15Adafruit_MPR12112filteredDataEh>
 80a02fc:	3516      	adds	r5, #22
 80a02fe:	4601      	mov	r1, r0
 80a0300:	220a      	movs	r2, #10
 80a0302:	4804      	ldr	r0, [pc, #16]	; (80a0314 <_Z17printFilteredDatat+0x58>)
 80a0304:	b2ad      	uxth	r5, r5
 80a0306:	f002 fcea 	bl	80a2cde <_ZN5Print5printEii>
 80a030a:	3401      	adds	r4, #1
  int gapSize = (128 - (textSize * 6)) / 5;
  for (int i = 0; i < 6; i++) {
    display.setCursor(i * (gapSize+textSize), 0 + 8 + 10);
    display.print(cap.filteredData(i));
  }
  for (int i = 0; i < 6; i++) {
 80a030c:	2d84      	cmp	r5, #132	; 0x84
 80a030e:	b2e4      	uxtb	r4, r4
 80a0310:	d1eb      	bne.n	80a02ea <_Z17printFilteredDatat+0x2e>
    display.setCursor(i * (gapSize+textSize), 32 + 8 + 10);
    display.print(cap.filteredData(i + 6));
  }
}
 80a0312:	bd38      	pop	{r3, r4, r5, pc}
 80a0314:	2000049c 	.word	0x2000049c
 80a0318:	200004c8 	.word	0x200004c8
 80a031c:	00000000 	.word	0x00000000

080a0320 <loop>:

bool goingUp = true;
int value = 0;
int rate = 2;

void loop() {
 80a0320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  #ifdef TEST_TOUCH
  // cap.setThresholds(touch_threshold, release_threshold);
  // Get the currently touched pads
  currtouched = cap.touched();
 80a0324:	489c      	ldr	r0, [pc, #624]	; (80a0598 <loop+0x278>)
 80a0326:	f000 fa02 	bl	80a072e <_ZN15Adafruit_MPR1217touchedEv>
 80a032a:	4b9c      	ldr	r3, [pc, #624]	; (80a059c <loop+0x27c>)
  #endif

  if (goingUp) {
 80a032c:	499c      	ldr	r1, [pc, #624]	; (80a05a0 <loop+0x280>)
void loop() {

  #ifdef TEST_TOUCH
  // cap.setThresholds(touch_threshold, release_threshold);
  // Get the currently touched pads
  currtouched = cap.touched();
 80a032e:	8018      	strh	r0, [r3, #0]
  #endif

  if (goingUp) {
 80a0330:	7808      	ldrb	r0, [r1, #0]
 80a0332:	469a      	mov	sl, r3
 80a0334:	4c9b      	ldr	r4, [pc, #620]	; (80a05a4 <loop+0x284>)
 80a0336:	4b9c      	ldr	r3, [pc, #624]	; (80a05a8 <loop+0x288>)
 80a0338:	b148      	cbz	r0, 80a034e <loop+0x2e>
    value += rate;
 80a033a:	6818      	ldr	r0, [r3, #0]
 80a033c:	6822      	ldr	r2, [r4, #0]
 80a033e:	4402      	add	r2, r0
    if (value > 255) {
 80a0340:	2aff      	cmp	r2, #255	; 0xff
 80a0342:	dd08      	ble.n	80a0356 <loop+0x36>
      value = 255;
 80a0344:	22ff      	movs	r2, #255	; 0xff
 80a0346:	601a      	str	r2, [r3, #0]
      goingUp = false;
 80a0348:	2200      	movs	r2, #0
 80a034a:	700a      	strb	r2, [r1, #0]
 80a034c:	e008      	b.n	80a0360 <loop+0x40>
    }
  } else {
    value -= rate;
 80a034e:	681a      	ldr	r2, [r3, #0]
 80a0350:	6824      	ldr	r4, [r4, #0]
    if (value < 0) {
 80a0352:	1b12      	subs	r2, r2, r4
 80a0354:	d401      	bmi.n	80a035a <loop+0x3a>
    if (value > 255) {
      value = 255;
      goingUp = false;
    }
  } else {
    value -= rate;
 80a0356:	601a      	str	r2, [r3, #0]
 80a0358:	e002      	b.n	80a0360 <loop+0x40>
    if (value < 0) {
      value = 0;
      goingUp = true;
 80a035a:	2201      	movs	r2, #1
      goingUp = false;
    }
  } else {
    value -= rate;
    if (value < 0) {
      value = 0;
 80a035c:	6018      	str	r0, [r3, #0]
      goingUp = true;
 80a035e:	700a      	strb	r2, [r1, #0]
  // pinMode(TX, OUTPUT);
  // noTone(TX);
  #endif
  
  #ifdef TEST_BUZZER
  tone(BUZZER_PIN, (double)value / 255.0 * 5000, 0);
 80a0360:	6818      	ldr	r0, [r3, #0]
 80a0362:	f003 fbf3 	bl	80a3b4c <__aeabi_i2d>
 80a0366:	a388      	add	r3, pc, #544	; (adr r3, 80a0588 <loop+0x268>)
 80a0368:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a036c:	f003 fd7e 	bl	80a3e6c <__aeabi_ddiv>
 80a0370:	a387      	add	r3, pc, #540	; (adr r3, 80a0590 <loop+0x270>)
 80a0372:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0376:	f003 fc4f 	bl	80a3c18 <__aeabi_dmul>
 80a037a:	f003 ff0f 	bl	80a419c <__aeabi_d2uiz>
 80a037e:	2200      	movs	r2, #0
 80a0380:	4601      	mov	r1, r0
 80a0382:	2011      	movs	r0, #17
 80a0384:	f002 feb8 	bl	80a30f8 <tone>
  // pinMode(TX, OUTPUT);
  // noTone(TX);
  #endif

  #ifdef TEST_NEOPIXEL
  for (int i = 0; i < PIXEL_COUNT - 3; i++) {
 80a0388:	f04f 0b00 	mov.w	fp, #0
    rgb color = hsv2rgb(hsv {
      (rand() % 36000)/ 100.0, // hue 0..1
 80a038c:	f003 ff70 	bl	80a4270 <rand>
 80a0390:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 80a0394:	fb90 f2f3 	sdiv	r2, r0, r3
 80a0398:	fb02 0013 	mls	r0, r2, r3, r0
 80a039c:	f003 fbd6 	bl	80a3b4c <__aeabi_i2d>
 80a03a0:	2200      	movs	r2, #0
 80a03a2:	4b82      	ldr	r3, [pc, #520]	; (80a05ac <loop+0x28c>)
 80a03a4:	f003 fd62 	bl	80a3e6c <__aeabi_ddiv>
        out.g = in.v;
        out.b = in.v;
        return out;
    }
    hh = in.h;
    if(hh >= 360.0) hh = 0.0;
 80a03a8:	2200      	movs	r2, #0
 80a03aa:	4b81      	ldr	r3, [pc, #516]	; (80a05b0 <loop+0x290>)
  #endif

  #ifdef TEST_NEOPIXEL
  for (int i = 0; i < PIXEL_COUNT - 3; i++) {
    rgb color = hsv2rgb(hsv {
      (rand() % 36000)/ 100.0, // hue 0..1
 80a03ac:	4604      	mov	r4, r0
 80a03ae:	460d      	mov	r5, r1
        out.g = in.v;
        out.b = in.v;
        return out;
    }
    hh = in.h;
    if(hh >= 360.0) hh = 0.0;
 80a03b0:	f003 feb8 	bl	80a4124 <__aeabi_dcmpge>
 80a03b4:	b108      	cbz	r0, 80a03ba <loop+0x9a>
 80a03b6:	2400      	movs	r4, #0
 80a03b8:	2500      	movs	r5, #0
    hh /= 60.0;
 80a03ba:	2200      	movs	r2, #0
 80a03bc:	4b7d      	ldr	r3, [pc, #500]	; (80a05b4 <loop+0x294>)
 80a03be:	4620      	mov	r0, r4
 80a03c0:	4629      	mov	r1, r5
 80a03c2:	f003 fd53 	bl	80a3e6c <__aeabi_ddiv>
 80a03c6:	460d      	mov	r5, r1
 80a03c8:	4604      	mov	r4, r0
    i = (long)hh;
 80a03ca:	f003 febf 	bl	80a414c <__aeabi_d2iz>
 80a03ce:	4680      	mov	r8, r0
    ff = hh - i;
    p = in.v * (1.0 - in.s);
    q = in.v * (1.0 - (in.s * ff));
 80a03d0:	f003 fbbc 	bl	80a3b4c <__aeabi_i2d>
 80a03d4:	4602      	mov	r2, r0
 80a03d6:	460b      	mov	r3, r1
 80a03d8:	4620      	mov	r0, r4
 80a03da:	4629      	mov	r1, r5
 80a03dc:	f003 fa68 	bl	80a38b0 <__aeabi_dsub>
 80a03e0:	4602      	mov	r2, r0
 80a03e2:	460b      	mov	r3, r1
 80a03e4:	2000      	movs	r0, #0
 80a03e6:	4974      	ldr	r1, [pc, #464]	; (80a05b8 <loop+0x298>)
 80a03e8:	f003 fa62 	bl	80a38b0 <__aeabi_dsub>
    t = in.v * (1.0 - (in.s * (1.0 - ff)));
 80a03ec:	4602      	mov	r2, r0
 80a03ee:	460b      	mov	r3, r1
    if(hh >= 360.0) hh = 0.0;
    hh /= 60.0;
    i = (long)hh;
    ff = hh - i;
    p = in.v * (1.0 - in.s);
    q = in.v * (1.0 - (in.s * ff));
 80a03f0:	4604      	mov	r4, r0
 80a03f2:	460d      	mov	r5, r1
    t = in.v * (1.0 - (in.s * (1.0 - ff)));
 80a03f4:	2000      	movs	r0, #0
 80a03f6:	4970      	ldr	r1, [pc, #448]	; (80a05b8 <loop+0x298>)
 80a03f8:	f003 fa5a 	bl	80a38b0 <__aeabi_dsub>
 80a03fc:	4606      	mov	r6, r0
 80a03fe:	460f      	mov	r7, r1

    switch(i) {
 80a0400:	f1b8 0f04 	cmp.w	r8, #4
 80a0404:	d824      	bhi.n	80a0450 <loop+0x130>
 80a0406:	e8df f008 	tbb	[pc, r8]
 80a040a:	032a      	.short	0x032a
 80a040c:	130a      	.short	0x130a
 80a040e:	1c          	.byte	0x1c
 80a040f:	00          	.byte	0x00
        out.r = in.v;
        out.g = t;
        out.b = p;
        break;
    case 1:
        out.r = q;
 80a0410:	46a0      	mov	r8, r4
 80a0412:	46a9      	mov	r9, r5
        out.g = in.v;
        out.b = p;
 80a0414:	2400      	movs	r4, #0
 80a0416:	2500      	movs	r5, #0
        out.g = t;
        out.b = p;
        break;
    case 1:
        out.r = q;
        out.g = in.v;
 80a0418:	2600      	movs	r6, #0
 80a041a:	4f67      	ldr	r7, [pc, #412]	; (80a05b8 <loop+0x298>)
 80a041c:	e025      	b.n	80a046a <loop+0x14a>
        out.b = p;
        break;
    case 2:
        out.r = p;
        out.g = in.v;
        out.b = t;
 80a041e:	4604      	mov	r4, r0
 80a0420:	460d      	mov	r5, r1
        out.g = in.v;
        out.b = p;
        break;
    case 2:
        out.r = p;
        out.g = in.v;
 80a0422:	2600      	movs	r6, #0
 80a0424:	4f64      	ldr	r7, [pc, #400]	; (80a05b8 <loop+0x298>)
        out.r = q;
        out.g = in.v;
        out.b = p;
        break;
    case 2:
        out.r = p;
 80a0426:	f04f 0800 	mov.w	r8, #0
 80a042a:	f04f 0900 	mov.w	r9, #0
 80a042e:	e01c      	b.n	80a046a <loop+0x14a>
        out.b = t;
        break;

    case 3:
        out.r = p;
        out.g = q;
 80a0430:	4626      	mov	r6, r4
 80a0432:	462f      	mov	r7, r5
        out.b = in.v;
 80a0434:	2400      	movs	r4, #0
 80a0436:	4d60      	ldr	r5, [pc, #384]	; (80a05b8 <loop+0x298>)
        out.g = in.v;
        out.b = t;
        break;

    case 3:
        out.r = p;
 80a0438:	f04f 0800 	mov.w	r8, #0
 80a043c:	f04f 0900 	mov.w	r9, #0
 80a0440:	e013      	b.n	80a046a <loop+0x14a>
        out.g = q;
        out.b = in.v;
        break;
    case 4:
        out.r = t;
 80a0442:	4680      	mov	r8, r0
 80a0444:	4689      	mov	r9, r1
        out.g = p;
        out.b = in.v;
 80a0446:	2400      	movs	r4, #0
 80a0448:	4d5b      	ldr	r5, [pc, #364]	; (80a05b8 <loop+0x298>)
        out.g = q;
        out.b = in.v;
        break;
    case 4:
        out.r = t;
        out.g = p;
 80a044a:	2600      	movs	r6, #0
 80a044c:	2700      	movs	r7, #0
 80a044e:	e00c      	b.n	80a046a <loop+0x14a>
        out.b = in.v;
        break;
    case 5:
    default:
        out.r = in.v;
        out.g = p;
 80a0450:	2600      	movs	r6, #0
 80a0452:	2700      	movs	r7, #0
        out.g = p;
        out.b = in.v;
        break;
    case 5:
    default:
        out.r = in.v;
 80a0454:	f04f 0800 	mov.w	r8, #0
 80a0458:	f8df 915c 	ldr.w	r9, [pc, #348]	; 80a05b8 <loop+0x298>
 80a045c:	e005      	b.n	80a046a <loop+0x14a>
    q = in.v * (1.0 - (in.s * ff));
    t = in.v * (1.0 - (in.s * (1.0 - ff)));

    switch(i) {
    case 0:
        out.r = in.v;
 80a045e:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80a05b8 <loop+0x298>
        out.g = t;
        out.b = p;
 80a0462:	2400      	movs	r4, #0
 80a0464:	2500      	movs	r5, #0
    q = in.v * (1.0 - (in.s * ff));
    t = in.v * (1.0 - (in.s * (1.0 - ff)));

    switch(i) {
    case 0:
        out.r = in.v;
 80a0466:	f04f 0800 	mov.w	r8, #0
    rgb color = hsv2rgb(hsv {
      (rand() % 36000)/ 100.0, // hue 0..1
      1, // saturation 0..1
      1 // value 0..1
    });
    strip.setPixelColor(i, strip.Color(color.r * 255, color.g * 255, color.b * 255));
 80a046a:	a347      	add	r3, pc, #284	; (adr r3, 80a0588 <loop+0x268>)
 80a046c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0470:	4620      	mov	r0, r4
 80a0472:	4629      	mov	r1, r5
 80a0474:	f003 fbd0 	bl	80a3c18 <__aeabi_dmul>
 80a0478:	f003 fe90 	bl	80a419c <__aeabi_d2uiz>
 80a047c:	a342      	add	r3, pc, #264	; (adr r3, 80a0588 <loop+0x268>)
 80a047e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0482:	b2c5      	uxtb	r5, r0
 80a0484:	4639      	mov	r1, r7
 80a0486:	4630      	mov	r0, r6
 80a0488:	f003 fbc6 	bl	80a3c18 <__aeabi_dmul>
 80a048c:	f003 fe86 	bl	80a419c <__aeabi_d2uiz>
 80a0490:	a33d      	add	r3, pc, #244	; (adr r3, 80a0588 <loop+0x268>)
 80a0492:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0496:	b2c4      	uxtb	r4, r0
 80a0498:	4649      	mov	r1, r9
 80a049a:	4640      	mov	r0, r8
 80a049c:	f003 fbbc 	bl	80a3c18 <__aeabi_dmul>
 80a04a0:	f003 fe7c 	bl	80a419c <__aeabi_d2uiz>
 80a04a4:	462a      	mov	r2, r5
 80a04a6:	4621      	mov	r1, r4
 80a04a8:	b2c0      	uxtb	r0, r0
 80a04aa:	f001 fb5e 	bl	80a1b6a <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a04ae:	fa1f f18b 	uxth.w	r1, fp
 80a04b2:	4602      	mov	r2, r0
  // pinMode(TX, OUTPUT);
  // noTone(TX);
  #endif

  #ifdef TEST_NEOPIXEL
  for (int i = 0; i < PIXEL_COUNT - 3; i++) {
 80a04b4:	f10b 0b01 	add.w	fp, fp, #1
    rgb color = hsv2rgb(hsv {
      (rand() % 36000)/ 100.0, // hue 0..1
      1, // saturation 0..1
      1 // value 0..1
    });
    strip.setPixelColor(i, strip.Color(color.r * 255, color.g * 255, color.b * 255));
 80a04b8:	4840      	ldr	r0, [pc, #256]	; (80a05bc <loop+0x29c>)
 80a04ba:	f001 fb0b 	bl	80a1ad4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  // pinMode(TX, OUTPUT);
  // noTone(TX);
  #endif

  #ifdef TEST_NEOPIXEL
  for (int i = 0; i < PIXEL_COUNT - 3; i++) {
 80a04be:	f1bb 0f15 	cmp.w	fp, #21
 80a04c2:	f47f af63 	bne.w	80a038c <loop+0x6c>
      1, // saturation 0..1
      1 // value 0..1
    });
    strip.setPixelColor(i, strip.Color(color.r * 255, color.g * 255, color.b * 255));
  }
  strip.show();
 80a04c6:	483d      	ldr	r0, [pc, #244]	; (80a05bc <loop+0x29c>)
 80a04c8:	f000 fa4a 	bl	80a0960 <_ZN17Adafruit_NeoPixel4showEv>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a04cc:	f002 f950 	bl	80a2770 <HAL_Timer_Get_Milli_Seconds>
  #endif

  #ifdef TEST_DISPLAY
  #ifdef TEST_TOUCH
  if (millis() > nextTime) {
 80a04d0:	4c3b      	ldr	r4, [pc, #236]	; (80a05c0 <loop+0x2a0>)
 80a04d2:	6823      	ldr	r3, [r4, #0]
 80a04d4:	4283      	cmp	r3, r0
 80a04d6:	d222      	bcs.n	80a051e <loop+0x1fe>
    display.clearDisplay();
 80a04d8:	483a      	ldr	r0, [pc, #232]	; (80a05c4 <loop+0x2a4>)
 80a04da:	f001 fef3 	bl	80a22c4 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1);
 80a04de:	2101      	movs	r1, #1
 80a04e0:	4838      	ldr	r0, [pc, #224]	; (80a05c4 <loop+0x2a4>)
 80a04e2:	f002 f8b3 	bl	80a264c <_ZN12Adafruit_GFX11setTextSizeEh>
    display.setTextColor(WHITE);
 80a04e6:	2101      	movs	r1, #1
 80a04e8:	4836      	ldr	r0, [pc, #216]	; (80a05c4 <loop+0x2a4>)
 80a04ea:	f002 f8b4 	bl	80a2656 <_ZN12Adafruit_GFX12setTextColorEt>
    display.setCursor(0,0);
 80a04ee:	2200      	movs	r2, #0
 80a04f0:	4611      	mov	r1, r2
 80a04f2:	4834      	ldr	r0, [pc, #208]	; (80a05c4 <loop+0x2a4>)
 80a04f4:	f002 f8a7 	bl	80a2646 <_ZN12Adafruit_GFX9setCursorEss>
    printStatus(currtouched);
 80a04f8:	f8ba 0000 	ldrh.w	r0, [sl]
 80a04fc:	f7ff fe70 	bl	80a01e0 <_Z11printStatust>
    printFilteredData(currtouched);
 80a0500:	f8ba 0000 	ldrh.w	r0, [sl]
 80a0504:	f7ff feda 	bl	80a02bc <_Z17printFilteredDatat>
    printBaselineData(currtouched);
 80a0508:	f8ba 0000 	ldrh.w	r0, [sl]
 80a050c:	f7ff fea6 	bl	80a025c <_Z17printBaselineDatat>
 80a0510:	f002 f92e 	bl	80a2770 <HAL_Timer_Get_Milli_Seconds>
    nextTime = millis() + 100;
 80a0514:	3064      	adds	r0, #100	; 0x64
 80a0516:	6020      	str	r0, [r4, #0]
    display.display();
 80a0518:	482a      	ldr	r0, [pc, #168]	; (80a05c4 <loop+0x2a4>)
 80a051a:	f001 fe5d 	bl	80a21d8 <_ZN16Adafruit_SSD13067displayEv>
  }
  

  for (uint8_t i=0; i<12; i++) {
    // it if *is* touched and *wasnt* touched before, alert!
    if ((currtouched & _BV(i)) && !(lasttouched & _BV(i)) ) {
 80a051e:	4d2a      	ldr	r5, [pc, #168]	; (80a05c8 <loop+0x2a8>)
        out.r = q;
        out.g = in.v;
        out.b = p;
        break;
    case 2:
        out.r = p;
 80a0520:	2400      	movs	r4, #0
  }
  

  for (uint8_t i=0; i<12; i++) {
    // it if *is* touched and *wasnt* touched before, alert!
    if ((currtouched & _BV(i)) && !(lasttouched & _BV(i)) ) {
 80a0522:	f8ba 3000 	ldrh.w	r3, [sl]
 80a0526:	b2e6      	uxtb	r6, r4
 80a0528:	4123      	asrs	r3, r4
 80a052a:	07d8      	lsls	r0, r3, #31
 80a052c:	d50e      	bpl.n	80a054c <loop+0x22c>
 80a052e:	882b      	ldrh	r3, [r5, #0]
 80a0530:	4123      	asrs	r3, r4
 80a0532:	07d9      	lsls	r1, r3, #31
 80a0534:	d40a      	bmi.n	80a054c <loop+0x22c>
      Serial.print(i); Serial.println(" touched");
 80a0536:	f002 fd7d 	bl	80a3034 <_Z16_fetch_usbserialv>
 80a053a:	4631      	mov	r1, r6
 80a053c:	220a      	movs	r2, #10
 80a053e:	f002 fbaa 	bl	80a2c96 <_ZN5Print5printEhi>
 80a0542:	f002 fd77 	bl	80a3034 <_Z16_fetch_usbserialv>
 80a0546:	4921      	ldr	r1, [pc, #132]	; (80a05cc <loop+0x2ac>)
 80a0548:	f002 fb71 	bl	80a2c2e <_ZN5Print7printlnEPKc>
    }
    // if it *was* touched and now *isnt*, alert!
    if (!(currtouched & _BV(i)) && (lasttouched & _BV(i)) ) {
 80a054c:	f8ba 3000 	ldrh.w	r3, [sl]
 80a0550:	4123      	asrs	r3, r4
 80a0552:	07da      	lsls	r2, r3, #31
 80a0554:	d40e      	bmi.n	80a0574 <loop+0x254>
 80a0556:	882b      	ldrh	r3, [r5, #0]
 80a0558:	4123      	asrs	r3, r4
 80a055a:	07db      	lsls	r3, r3, #31
 80a055c:	d50a      	bpl.n	80a0574 <loop+0x254>
      Serial.print(i); Serial.println(" released");
 80a055e:	f002 fd69 	bl	80a3034 <_Z16_fetch_usbserialv>
 80a0562:	4631      	mov	r1, r6
 80a0564:	220a      	movs	r2, #10
 80a0566:	f002 fb96 	bl	80a2c96 <_ZN5Print5printEhi>
 80a056a:	f002 fd63 	bl	80a3034 <_Z16_fetch_usbserialv>
 80a056e:	4918      	ldr	r1, [pc, #96]	; (80a05d0 <loop+0x2b0>)
 80a0570:	f002 fb5d 	bl	80a2c2e <_ZN5Print7printlnEPKc>
 80a0574:	3401      	adds	r4, #1
    nextTime = millis() + 100;
    display.display();
  }
  

  for (uint8_t i=0; i<12; i++) {
 80a0576:	2c0c      	cmp	r4, #12
 80a0578:	d1d3      	bne.n	80a0522 <loop+0x202>
      Serial.print(i); Serial.println(" released");
    }
  }

  // reset our state
  lasttouched = currtouched;
 80a057a:	f8ba 2000 	ldrh.w	r2, [sl]
 80a057e:	4b12      	ldr	r3, [pc, #72]	; (80a05c8 <loop+0x2a8>)
 80a0580:	801a      	strh	r2, [r3, #0]
 80a0582:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0586:	bf00      	nop
 80a0588:	00000000 	.word	0x00000000
 80a058c:	406fe000 	.word	0x406fe000
 80a0590:	00000000 	.word	0x00000000
 80a0594:	40b38800 	.word	0x40b38800
 80a0598:	200004c8 	.word	0x200004c8
 80a059c:	200004d0 	.word	0x200004d0
 80a05a0:	20000004 	.word	0x20000004
 80a05a4:	20000000 	.word	0x20000000
 80a05a8:	20000498 	.word	0x20000498
 80a05ac:	40590000 	.word	0x40590000
 80a05b0:	40768000 	.word	0x40768000
 80a05b4:	404e0000 	.word	0x404e0000
 80a05b8:	3ff00000 	.word	0x3ff00000
 80a05bc:	20000484 	.word	0x20000484
 80a05c0:	200004cc 	.word	0x200004cc
 80a05c4:	2000049c 	.word	0x2000049c
 80a05c8:	200004c0 	.word	0x200004c0
 80a05cc:	080a4355 	.word	0x080a4355
 80a05d0:	080a435e 	.word	0x080a435e

080a05d4 <_ZN16Adafruit_SSD1306D0Ev>:
 80a05d4:	b510      	push	{r4, lr}
 80a05d6:	4604      	mov	r4, r0
 80a05d8:	2124      	movs	r1, #36	; 0x24
 80a05da:	f003 f81a 	bl	80a3612 <_ZdlPvj>
 80a05de:	4620      	mov	r0, r4
 80a05e0:	bd10      	pop	{r4, pc}
	...

080a05e4 <_GLOBAL__sub_I_SystemMode>:
  #endif
  #endif

  // put a delay so it isn't overwhelming
  delay(50);
 80a05e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a05e6:	f002 f843 	bl	80a2670 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a05ea:	4b16      	ldr	r3, [pc, #88]	; (80a0644 <_GLOBAL__sub_I_SystemMode+0x60>)
 80a05ec:	2200      	movs	r2, #0
 80a05ee:	701a      	strb	r2, [r3, #0]
 80a05f0:	805a      	strh	r2, [r3, #2]
 80a05f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
#define OLED_CLK    A0
#define OLED_MOSI   A1
#define OLED_RESET  A2
#define OLED_DC     A3
#define OLED_CS     A4
Adafruit_SSD1306 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);
 80a05f6:	4c14      	ldr	r4, [pc, #80]	; (80a0648 <_GLOBAL__sub_I_SystemMode+0x64>)
 80a05f8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a05fa:	2003      	movs	r0, #3
 80a05fc:	f002 f9b2 	bl	80a2964 <set_system_mode>
 80a0600:	4d12      	ldr	r5, [pc, #72]	; (80a064c <_GLOBAL__sub_I_SystemMode+0x68>)
 80a0602:	220c      	movs	r2, #12
 80a0604:	230e      	movs	r3, #14
 80a0606:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a060a:	210b      	movs	r1, #11
 80a060c:	230d      	movs	r3, #13
 80a060e:	220a      	movs	r2, #10
 80a0610:	4620      	mov	r0, r4
 80a0612:	f001 fcb1 	bl	80a1f78 <_ZN16Adafruit_SSD1306C1Eaaaaa>
 80a0616:	462a      	mov	r2, r5
 80a0618:	490d      	ldr	r1, [pc, #52]	; (80a0650 <_GLOBAL__sub_I_SystemMode+0x6c>)
 80a061a:	4620      	mov	r0, r4
 80a061c:	f002 fff4 	bl	80a3608 <__aeabi_atexit>
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0620:	4c0c      	ldr	r4, [pc, #48]	; (80a0654 <_GLOBAL__sub_I_SystemMode+0x70>)

/**
 * Touch Board
 */
#ifdef TEST_TOUCH
Adafruit_MPR121 cap = Adafruit_MPR121();
 80a0622:	480d      	ldr	r0, [pc, #52]	; (80a0658 <_GLOBAL__sub_I_SystemMode+0x74>)
 80a0624:	f000 f81c 	bl	80a0660 <_ZN15Adafruit_MPR121C1Ev>
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0628:	2302      	movs	r3, #2
 80a062a:	461a      	mov	r2, r3
 80a062c:	2118      	movs	r1, #24
 80a062e:	4620      	mov	r0, r4
 80a0630:	f000 f985 	bl	80a093e <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0634:	462a      	mov	r2, r5
 80a0636:	4620      	mov	r0, r4
 80a0638:	4908      	ldr	r1, [pc, #32]	; (80a065c <_GLOBAL__sub_I_SystemMode+0x78>)
  #endif
  #endif

  // put a delay so it isn't overwhelming
  delay(50);
 80a063a:	b003      	add	sp, #12
 80a063c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0640:	f002 bfe2 	b.w	80a3608 <__aeabi_atexit>
 80a0644:	200004c2 	.word	0x200004c2
 80a0648:	2000049c 	.word	0x2000049c
 80a064c:	20000480 	.word	0x20000480
 80a0650:	080a00c9 	.word	0x080a00c9
 80a0654:	20000484 	.word	0x20000484
 80a0658:	200004c8 	.word	0x200004c8
 80a065c:	080a08a1 	.word	0x080a08a1

080a0660 <_ZN15Adafruit_MPR121C1Ev>:
 ****************************************************/

#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}
 80a0660:	4770      	bx	lr

080a0662 <_ZN15Adafruit_MPR12113readRegister8Eh>:
}

/*********************************************************************/


uint8_t Adafruit_MPR121::readRegister8(uint8_t reg) {
 80a0662:	b538      	push	{r3, r4, r5, lr}
 80a0664:	4604      	mov	r4, r0
 80a0666:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a0668:	f002 ffae 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a066c:	f994 1000 	ldrsb.w	r1, [r4]
 80a0670:	f002 fe30 	bl	80a32d4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a0674:	f002 ffa8 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a0678:	6803      	ldr	r3, [r0, #0]
 80a067a:	4629      	mov	r1, r5
 80a067c:	689b      	ldr	r3, [r3, #8]
 80a067e:	4798      	blx	r3
    Wire.endTransmission(false);
 80a0680:	f002 ffa2 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a0684:	2100      	movs	r1, #0
 80a0686:	f002 fe28 	bl	80a32da <_ZN7TwoWire15endTransmissionEh>
    while (Wire.requestFrom(_i2caddr, 1) != 1);
 80a068a:	f002 ff9d 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a068e:	2201      	movs	r2, #1
 80a0690:	f994 1000 	ldrsb.w	r1, [r4]
 80a0694:	f002 fe15 	bl	80a32c2 <_ZN7TwoWire11requestFromEii>
 80a0698:	2801      	cmp	r0, #1
 80a069a:	d1f6      	bne.n	80a068a <_ZN15Adafruit_MPR12113readRegister8Eh+0x28>
    return ( Wire.read());
 80a069c:	f002 ff94 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a06a0:	6803      	ldr	r3, [r0, #0]
 80a06a2:	695b      	ldr	r3, [r3, #20]
 80a06a4:	4798      	blx	r3
}
 80a06a6:	b2c0      	uxtb	r0, r0
 80a06a8:	bd38      	pop	{r3, r4, r5, pc}

080a06aa <_ZN15Adafruit_MPR12112baselineDataEh>:
  if (t > 12) return 0;
  return readRegister16(MPR121_FILTDATA_0L + t*2);
}

uint16_t  Adafruit_MPR121::baselineData(uint8_t t) {
  if (t > 12) return 0;
 80a06aa:	290c      	cmp	r1, #12
uint16_t  Adafruit_MPR121::filteredData(uint8_t t) {
  if (t > 12) return 0;
  return readRegister16(MPR121_FILTDATA_0L + t*2);
}

uint16_t  Adafruit_MPR121::baselineData(uint8_t t) {
 80a06ac:	b508      	push	{r3, lr}
  if (t > 12) return 0;
 80a06ae:	d806      	bhi.n	80a06be <_ZN15Adafruit_MPR12112baselineDataEh+0x14>
  uint16_t bl = readRegister8(MPR121_BASELINE_0 + t);
 80a06b0:	311e      	adds	r1, #30
 80a06b2:	b2c9      	uxtb	r1, r1
 80a06b4:	f7ff ffd5 	bl	80a0662 <_ZN15Adafruit_MPR12113readRegister8Eh>
  return (bl << 2);
 80a06b8:	0080      	lsls	r0, r0, #2
 80a06ba:	b280      	uxth	r0, r0
 80a06bc:	bd08      	pop	{r3, pc}
  if (t > 12) return 0;
  return readRegister16(MPR121_FILTDATA_0L + t*2);
}

uint16_t  Adafruit_MPR121::baselineData(uint8_t t) {
  if (t > 12) return 0;
 80a06be:	2000      	movs	r0, #0
  uint16_t bl = readRegister8(MPR121_BASELINE_0 + t);
  return (bl << 2);
}
 80a06c0:	bd08      	pop	{r3, pc}

080a06c2 <_ZN15Adafruit_MPR12114readRegister16Eh>:
    Wire.endTransmission(false);
    while (Wire.requestFrom(_i2caddr, 1) != 1);
    return ( Wire.read());
}

uint16_t Adafruit_MPR121::readRegister16(uint8_t reg) {
 80a06c2:	b538      	push	{r3, r4, r5, lr}
 80a06c4:	4604      	mov	r4, r0
 80a06c6:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a06c8:	f002 ff7e 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a06cc:	f994 1000 	ldrsb.w	r1, [r4]
 80a06d0:	f002 fe00 	bl	80a32d4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a06d4:	f002 ff78 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a06d8:	6803      	ldr	r3, [r0, #0]
 80a06da:	4629      	mov	r1, r5
 80a06dc:	689b      	ldr	r3, [r3, #8]
 80a06de:	4798      	blx	r3
    Wire.endTransmission(false);
 80a06e0:	f002 ff72 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a06e4:	2100      	movs	r1, #0
 80a06e6:	f002 fdf8 	bl	80a32da <_ZN7TwoWire15endTransmissionEh>
    while (Wire.requestFrom(_i2caddr, 2) != 2);
 80a06ea:	f002 ff6d 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a06ee:	2202      	movs	r2, #2
 80a06f0:	f994 1000 	ldrsb.w	r1, [r4]
 80a06f4:	f002 fde5 	bl	80a32c2 <_ZN7TwoWire11requestFromEii>
 80a06f8:	2802      	cmp	r0, #2
 80a06fa:	d1f6      	bne.n	80a06ea <_ZN15Adafruit_MPR12114readRegister16Eh+0x28>
    uint16_t v = Wire.read();
 80a06fc:	f002 ff64 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a0700:	6803      	ldr	r3, [r0, #0]
 80a0702:	695b      	ldr	r3, [r3, #20]
 80a0704:	4798      	blx	r3
 80a0706:	4604      	mov	r4, r0
    v |=  ((uint16_t) Wire.read()) << 8;
 80a0708:	f002 ff5e 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a070c:	6803      	ldr	r3, [r0, #0]
 80a070e:	695b      	ldr	r3, [r3, #20]
 80a0710:	4798      	blx	r3
    return v;
 80a0712:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
 80a0716:	b280      	uxth	r0, r0
 80a0718:	bd38      	pop	{r3, r4, r5, pc}

080a071a <_ZN15Adafruit_MPR12112filteredDataEh>:
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
  }
}

uint16_t  Adafruit_MPR121::filteredData(uint8_t t) {
  if (t > 12) return 0;
 80a071a:	290c      	cmp	r1, #12
 80a071c:	d805      	bhi.n	80a072a <_ZN15Adafruit_MPR12112filteredDataEh+0x10>
  return readRegister16(MPR121_FILTDATA_0L + t*2);
 80a071e:	3102      	adds	r1, #2
 80a0720:	0049      	lsls	r1, r1, #1
 80a0722:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80a0726:	f7ff bfcc 	b.w	80a06c2 <_ZN15Adafruit_MPR12114readRegister16Eh>
}
 80a072a:	2000      	movs	r0, #0
 80a072c:	4770      	bx	lr

080a072e <_ZN15Adafruit_MPR1217touchedEv>:
  if (t > 12) return 0;
  uint16_t bl = readRegister8(MPR121_BASELINE_0 + t);
  return (bl << 2);
}

uint16_t  Adafruit_MPR121::touched(void) {
 80a072e:	b508      	push	{r3, lr}
  uint16_t t = readRegister16(MPR121_TOUCHSTATUS_L);
 80a0730:	2100      	movs	r1, #0
 80a0732:	f7ff ffc6 	bl	80a06c2 <_ZN15Adafruit_MPR12114readRegister16Eh>
  return t & 0x0FFF;
}
 80a0736:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80a073a:	bd08      	pop	{r3, pc}

080a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>:
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
 80a073c:	b570      	push	{r4, r5, r6, lr}
 80a073e:	4606      	mov	r6, r0
 80a0740:	4614      	mov	r4, r2
 80a0742:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a0744:	f002 ff40 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a0748:	f996 1000 	ldrsb.w	r1, [r6]
 80a074c:	f002 fdc2 	bl	80a32d4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 80a0750:	f002 ff3a 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a0754:	6803      	ldr	r3, [r0, #0]
 80a0756:	4629      	mov	r1, r5
 80a0758:	689b      	ldr	r3, [r3, #8]
 80a075a:	4798      	blx	r3
    Wire.write((uint8_t)(value));
 80a075c:	f002 ff34 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a0760:	6803      	ldr	r3, [r0, #0]
 80a0762:	4621      	mov	r1, r4
 80a0764:	689b      	ldr	r3, [r3, #8]
 80a0766:	4798      	blx	r3
    Wire.endTransmission();
 80a0768:	f002 ff2e 	bl	80a35c8 <_Z19__fetch_global_Wirev>
}
 80a076c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
    Wire.beginTransmission(_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)(value));
    Wire.endTransmission();
 80a0770:	f002 bdb7 	b.w	80a32e2 <_ZN7TwoWire15endTransmissionEv>

080a0774 <_ZN15Adafruit_MPR12113setThresholdsEhh>:
void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
 80a0774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0776:	4605      	mov	r5, r0
 80a0778:	460f      	mov	r7, r1
 80a077a:	4616      	mov	r6, r2
 80a077c:	2441      	movs	r4, #65	; 0x41
  for (uint8_t i=0; i<12; i++) {
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
 80a077e:	4621      	mov	r1, r4
 80a0780:	463a      	mov	r2, r7
 80a0782:	4628      	mov	r0, r5
 80a0784:	f7ff ffda 	bl	80a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
 80a0788:	1c61      	adds	r1, r4, #1
 80a078a:	3402      	adds	r4, #2
 80a078c:	4632      	mov	r2, r6
 80a078e:	b2c9      	uxtb	r1, r1
 80a0790:	4628      	mov	r0, r5
 80a0792:	b2e4      	uxtb	r4, r4
 80a0794:	f7ff ffd2 	bl	80a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
  for (uint8_t i=0; i<12; i++) {
 80a0798:	2c59      	cmp	r4, #89	; 0x59
 80a079a:	d1f0      	bne.n	80a077e <_ZN15Adafruit_MPR12113setThresholdsEhh+0xa>
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
  }
}
 80a079c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a079e <_ZN15Adafruit_MPR1215beginEh>:
#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
 80a079e:	b538      	push	{r3, r4, r5, lr}
 80a07a0:	4604      	mov	r4, r0
 80a07a2:	460d      	mov	r5, r1
  Wire.begin();
 80a07a4:	f002 ff10 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a07a8:	f002 fd7c 	bl	80a32a4 <_ZN7TwoWire5beginEv>
    
  _i2caddr = i2caddr;

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a07ac:	2263      	movs	r2, #99	; 0x63
 80a07ae:	2180      	movs	r1, #128	; 0x80
 80a07b0:	4620      	mov	r0, r4
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
  Wire.begin();
    
  _i2caddr = i2caddr;
 80a07b2:	7025      	strb	r5, [r4, #0]

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a07b4:	f7ff ffc2 	bl	80a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  delay(1);
 80a07b8:	2001      	movs	r0, #1
 80a07ba:	f002 faab 	bl	80a2d14 <delay>
  //  Serial.print("$"); Serial.print(i, HEX); 
  //  Serial.print(": 0x"); Serial.println(readRegister8(i));
  }
  

  writeRegister(MPR121_ECR, 0x0);
 80a07be:	2200      	movs	r2, #0
 80a07c0:	215e      	movs	r1, #94	; 0x5e
 80a07c2:	4620      	mov	r0, r4
 80a07c4:	f7ff ffba 	bl	80a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>

  uint8_t c = readRegister8(MPR121_CONFIG2);
 80a07c8:	215d      	movs	r1, #93	; 0x5d
 80a07ca:	4620      	mov	r0, r4
 80a07cc:	f7ff ff49 	bl	80a0662 <_ZN15Adafruit_MPR12113readRegister8Eh>
  
  if (c != 0x24) return false;
 80a07d0:	2824      	cmp	r0, #36	; 0x24
 80a07d2:	d151      	bne.n	80a0878 <_ZN15Adafruit_MPR1215beginEh+0xda>
  return true;
}

void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
 80a07d4:	4620      	mov	r0, r4
 80a07d6:	2206      	movs	r2, #6
 80a07d8:	210c      	movs	r1, #12
 80a07da:	f7ff ffcb 	bl	80a0774 <_ZN15Adafruit_MPR12113setThresholdsEhh>
  
  if (c != 0x24) return false;


  setThreshholds(12, 6);
  writeRegister(MPR121_MHDR, 0x01);
 80a07de:	4620      	mov	r0, r4
 80a07e0:	2201      	movs	r2, #1
 80a07e2:	212b      	movs	r1, #43	; 0x2b
 80a07e4:	f7ff ffaa 	bl	80a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDR, 0x01);
 80a07e8:	4620      	mov	r0, r4
 80a07ea:	2201      	movs	r2, #1
 80a07ec:	212c      	movs	r1, #44	; 0x2c
 80a07ee:	f7ff ffa5 	bl	80a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLR, 0x0E);
 80a07f2:	4620      	mov	r0, r4
 80a07f4:	220e      	movs	r2, #14
 80a07f6:	212d      	movs	r1, #45	; 0x2d
 80a07f8:	f7ff ffa0 	bl	80a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLR, 0x00);
 80a07fc:	4620      	mov	r0, r4
 80a07fe:	2200      	movs	r2, #0
 80a0800:	212e      	movs	r1, #46	; 0x2e
 80a0802:	f7ff ff9b 	bl	80a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_MHDF, 0x01);
 80a0806:	4620      	mov	r0, r4
 80a0808:	2201      	movs	r2, #1
 80a080a:	212f      	movs	r1, #47	; 0x2f
 80a080c:	f7ff ff96 	bl	80a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDF, 0x05);
 80a0810:	4620      	mov	r0, r4
 80a0812:	2205      	movs	r2, #5
 80a0814:	2130      	movs	r1, #48	; 0x30
 80a0816:	f7ff ff91 	bl	80a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLF, 0x01);
 80a081a:	4620      	mov	r0, r4
 80a081c:	2201      	movs	r2, #1
 80a081e:	2131      	movs	r1, #49	; 0x31
 80a0820:	f7ff ff8c 	bl	80a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLF, 0x00);
 80a0824:	4620      	mov	r0, r4
 80a0826:	2200      	movs	r2, #0
 80a0828:	2132      	movs	r1, #50	; 0x32
 80a082a:	f7ff ff87 	bl	80a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_NHDT, 0x00);
 80a082e:	4620      	mov	r0, r4
 80a0830:	2200      	movs	r2, #0
 80a0832:	2133      	movs	r1, #51	; 0x33
 80a0834:	f7ff ff82 	bl	80a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLT, 0x00);
 80a0838:	4620      	mov	r0, r4
 80a083a:	2200      	movs	r2, #0
 80a083c:	2134      	movs	r1, #52	; 0x34
 80a083e:	f7ff ff7d 	bl	80a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLT, 0x00);
 80a0842:	4620      	mov	r0, r4
 80a0844:	2200      	movs	r2, #0
 80a0846:	2135      	movs	r1, #53	; 0x35
 80a0848:	f7ff ff78 	bl	80a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_DEBOUNCE, 0);
 80a084c:	4620      	mov	r0, r4
 80a084e:	2200      	movs	r2, #0
 80a0850:	215b      	movs	r1, #91	; 0x5b
 80a0852:	f7ff ff73 	bl	80a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 80a0856:	4620      	mov	r0, r4
 80a0858:	2210      	movs	r2, #16
 80a085a:	215c      	movs	r1, #92	; 0x5c
 80a085c:	f7ff ff6e 	bl	80a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 80a0860:	4620      	mov	r0, r4
 80a0862:	2220      	movs	r2, #32
 80a0864:	215d      	movs	r1, #93	; 0x5d
 80a0866:	f7ff ff69 	bl	80a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>

//  writeRegister(MPR121_UPLIMIT, 150);
//  writeRegister(MPR121_TARGETLIMIT, 100); // should be ~400 (100 shifted)
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking
 80a086a:	4620      	mov	r0, r4
 80a086c:	228f      	movs	r2, #143	; 0x8f
 80a086e:	215e      	movs	r1, #94	; 0x5e
 80a0870:	f7ff ff64 	bl	80a073c <_ZN15Adafruit_MPR12113writeRegisterEhh>

  return true;
 80a0874:	2001      	movs	r0, #1
 80a0876:	bd38      	pop	{r3, r4, r5, pc}

  writeRegister(MPR121_ECR, 0x0);

  uint8_t c = readRegister8(MPR121_CONFIG2);
  
  if (c != 0x24) return false;
 80a0878:	2000      	movs	r0, #0
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking

  return true;
}
 80a087a:	bd38      	pop	{r3, r4, r5, pc}

080a087c <_GLOBAL__sub_I__ZN15Adafruit_MPR121C2Ev>:
 80a087c:	f001 bef8 	b.w	80a2670 <HAL_Pin_Map>

080a0880 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff>:
  q[1] = q2 * norm;
  q[2] = q3 * norm;
  q[3] = q4 * norm;
}

const float * getQ () { return q; }
 80a0880:	b508      	push	{r3, lr}
 80a0882:	f001 fef5 	bl	80a2670 <HAL_Pin_Map>
// noticed any reduction in solution accuracy. This is essentially the I
// coefficient in a PID control sense; the bigger the feedback coefficient,
// the faster the solution converges, usually at the expense of accuracy.
// In any case, this is the free parameter in the Madgwick filtering and
// fusion scheme.
static float beta = sqrt(3.0f / 4.0f) * GyroMeasError;   // Compute beta
 80a0886:	4a02      	ldr	r2, [pc, #8]	; (80a0890 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x10>)
 80a0888:	4b02      	ldr	r3, [pc, #8]	; (80a0894 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x14>)
 80a088a:	601a      	str	r2, [r3, #0]
 80a088c:	bd08      	pop	{r3, pc}
 80a088e:	bf00      	nop
 80a0890:	3f1ac70d 	.word	0x3f1ac70d
 80a0894:	200004d4 	.word	0x200004d4

080a0898 <_GLOBAL__sub_I__ZN7MPU92507getMresEv>:
 80a0898:	f001 beea 	b.w	80a2670 <HAL_Pin_Map>

080a089c <micros>:
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a089c:	f001 bf60 	b.w	80a2760 <HAL_Timer_Get_Micro_Seconds>

080a08a0 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a08a0:	b510      	push	{r4, lr}
 80a08a2:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a08a4:	68c0      	ldr	r0, [r0, #12]
 80a08a6:	b108      	cbz	r0, 80a08ac <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a08a8:	f002 f8e8 	bl	80a2a7c <free>
  if (begun) pinMode(pin, INPUT);
 80a08ac:	7823      	ldrb	r3, [r4, #0]
 80a08ae:	b11b      	cbz	r3, 80a08b8 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a08b0:	2100      	movs	r1, #0
 80a08b2:	79e0      	ldrb	r0, [r4, #7]
 80a08b4:	f002 fe00 	bl	80a34b8 <pinMode>
}
 80a08b8:	4620      	mov	r0, r4
 80a08ba:	bd10      	pop	{r4, pc}

080a08bc <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a08bc:	b538      	push	{r3, r4, r5, lr}
 80a08be:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a08c0:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a08c2:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a08c4:	b108      	cbz	r0, 80a08ca <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a08c6:	f002 f8d9 	bl	80a2a7c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a08ca:	79a3      	ldrb	r3, [r4, #6]
 80a08cc:	2b06      	cmp	r3, #6
 80a08ce:	bf0c      	ite	eq
 80a08d0:	2004      	moveq	r0, #4
 80a08d2:	2003      	movne	r0, #3
 80a08d4:	4368      	muls	r0, r5
 80a08d6:	b280      	uxth	r0, r0
 80a08d8:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a08da:	f002 f8c7 	bl	80a2a6c <malloc>
 80a08de:	60e0      	str	r0, [r4, #12]
 80a08e0:	b128      	cbz	r0, 80a08ee <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a08e2:	88a2      	ldrh	r2, [r4, #4]
 80a08e4:	2100      	movs	r1, #0
 80a08e6:	f003 fc92 	bl	80a420e <memset>
    numLEDs = n;
 80a08ea:	8065      	strh	r5, [r4, #2]
 80a08ec:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a08ee:	80a0      	strh	r0, [r4, #4]
 80a08f0:	8060      	strh	r0, [r4, #2]
 80a08f2:	bd38      	pop	{r3, r4, r5, pc}

080a08f4 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a08f4:	b510      	push	{r4, lr}
 80a08f6:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a08f8:	2101      	movs	r1, #1
 80a08fa:	79c0      	ldrb	r0, [r0, #7]
 80a08fc:	f002 fddc 	bl	80a34b8 <pinMode>
  digitalWrite(pin, LOW);
 80a0900:	2100      	movs	r1, #0
 80a0902:	79e0      	ldrb	r0, [r4, #7]
 80a0904:	f002 fde9 	bl	80a34da <digitalWrite>
  begun = true;
 80a0908:	2301      	movs	r3, #1
 80a090a:	7023      	strb	r3, [r4, #0]
 80a090c:	bd10      	pop	{r4, pc}

080a090e <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a090e:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0910:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0912:	4605      	mov	r5, r0
 80a0914:	460c      	mov	r4, r1
    if (begun) {
 80a0916:	b11b      	cbz	r3, 80a0920 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a0918:	2100      	movs	r1, #0
 80a091a:	79c0      	ldrb	r0, [r0, #7]
 80a091c:	f002 fdcc 	bl	80a34b8 <pinMode>
    }
    pin = p;
    if (begun) {
 80a0920:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a0922:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0924:	b153      	cbz	r3, 80a093c <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a0926:	b2a4      	uxth	r4, r4
 80a0928:	4620      	mov	r0, r4
 80a092a:	2101      	movs	r1, #1
 80a092c:	f002 fdc4 	bl	80a34b8 <pinMode>
        digitalWrite(p, LOW);
 80a0930:	4620      	mov	r0, r4
    }
}
 80a0932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a0936:	2100      	movs	r1, #0
 80a0938:	f002 bdcf 	b.w	80a34da <digitalWrite>
 80a093c:	bd38      	pop	{r3, r4, r5, pc}

080a093e <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a093e:	b570      	push	{r4, r5, r6, lr}
 80a0940:	4604      	mov	r4, r0
 80a0942:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0944:	2500      	movs	r5, #0
 80a0946:	7183      	strb	r3, [r0, #6]
 80a0948:	7005      	strb	r5, [r0, #0]
 80a094a:	7205      	strb	r5, [r0, #8]
 80a094c:	60c5      	str	r5, [r0, #12]
 80a094e:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a0950:	f7ff ffb4 	bl	80a08bc <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0954:	4620      	mov	r0, r4
 80a0956:	4631      	mov	r1, r6
 80a0958:	f7ff ffd9 	bl	80a090e <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a095c:	4620      	mov	r0, r4
 80a095e:	bd70      	pop	{r4, r5, r6, pc}

080a0960 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0960:	68c3      	ldr	r3, [r0, #12]
 80a0962:	2b00      	cmp	r3, #0
 80a0964:	f000 858e 	beq.w	80a1484 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a0968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a096c:	4604      	mov	r4, r0
 80a096e:	7983      	ldrb	r3, [r0, #6]
 80a0970:	b086      	sub	sp, #24
 80a0972:	3b02      	subs	r3, #2
 80a0974:	b2db      	uxtb	r3, r3
 80a0976:	2b04      	cmp	r3, #4
 80a0978:	bf96      	itet	ls
 80a097a:	4a29      	ldrls	r2, [pc, #164]	; (80a0a20 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a097c:	2532      	movhi	r5, #50	; 0x32
 80a097e:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0982:	f7ff ff8b 	bl	80a089c <micros>
 80a0986:	6923      	ldr	r3, [r4, #16]
 80a0988:	1ac0      	subs	r0, r0, r3
 80a098a:	42a8      	cmp	r0, r5
 80a098c:	d3f9      	bcc.n	80a0982 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a098e:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0990:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0992:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0994:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0996:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a099a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a099e:	f000 8272 	beq.w	80a0e86 <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a09a2:	2907      	cmp	r1, #7
 80a09a4:	f000 826f 	beq.w	80a0e86 <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a09a8:	2906      	cmp	r1, #6
 80a09aa:	f000 8432 	beq.w	80a1212 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a09ae:	2905      	cmp	r1, #5
 80a09b0:	f000 83ab 	beq.w	80a110a <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a09b4:	2908      	cmp	r1, #8
 80a09b6:	f000 83a8 	beq.w	80a110a <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a09ba:	2900      	cmp	r1, #0
 80a09bc:	f040 8563 	bne.w	80a1486 <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a09c0:	4a18      	ldr	r2, [pc, #96]	; (80a0a24 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a09c2:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a09c6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a09ca:	b29b      	uxth	r3, r3
 80a09cc:	2b00      	cmp	r3, #0
 80a09ce:	f000 8395 	beq.w	80a10fc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a09d2:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a09d4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a09d8:	f10e 0503 	add.w	r5, lr, #3
 80a09dc:	3b03      	subs	r3, #3
 80a09de:	b29b      	uxth	r3, r3
 80a09e0:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a09e4:	f89e 3000 	ldrb.w	r3, [lr]
 80a09e8:	b2db      	uxtb	r3, r3
 80a09ea:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a09ee:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a09f2:	b2db      	uxtb	r3, r3
 80a09f4:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a09f8:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a09fc:	b2db      	uxtb	r3, r3
 80a09fe:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0a02:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0a06:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0a0a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0a0e:	021b      	lsls	r3, r3, #8
 80a0a10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0a14:	4303      	orrs	r3, r0
 80a0a16:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0a18:	f88d 1005 	strb.w	r1, [sp, #5]
 80a0a1c:	e11b      	b.n	80a0c56 <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a0a1e:	bf00      	nop
 80a0a20:	080a4368 	.word	0x080a4368
 80a0a24:	200004d8 	.word	0x200004d8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0a28:	4600      	mov	r0, r0
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
 80a0a66:	bf00      	nop
 80a0a68:	bf00      	nop
 80a0a6a:	bf00      	nop
 80a0a6c:	bf00      	nop
 80a0a6e:	bf00      	nop
 80a0a70:	bf00      	nop
 80a0a72:	bf00      	nop
 80a0a74:	bf00      	nop
 80a0a76:	bf00      	nop
 80a0a78:	bf00      	nop
 80a0a7a:	bf00      	nop
 80a0a7c:	bf00      	nop
 80a0a7e:	bf00      	nop
 80a0a80:	bf00      	nop
 80a0a82:	bf00      	nop
 80a0a84:	bf00      	nop
 80a0a86:	bf00      	nop
 80a0a88:	bf00      	nop
 80a0a8a:	bf00      	nop
 80a0a8c:	bf00      	nop
 80a0a8e:	bf00      	nop
 80a0a90:	bf00      	nop
 80a0a92:	bf00      	nop
 80a0a94:	bf00      	nop
 80a0a96:	bf00      	nop
 80a0a98:	bf00      	nop
 80a0a9a:	bf00      	nop
 80a0a9c:	bf00      	nop
 80a0a9e:	bf00      	nop
 80a0aa0:	bf00      	nop
 80a0aa2:	bf00      	nop
 80a0aa4:	bf00      	nop
 80a0aa6:	bf00      	nop
 80a0aa8:	bf00      	nop
 80a0aaa:	bf00      	nop
 80a0aac:	bf00      	nop
 80a0aae:	bf00      	nop
 80a0ab0:	bf00      	nop
 80a0ab2:	bf00      	nop
 80a0ab4:	bf00      	nop
 80a0ab6:	bf00      	nop
 80a0ab8:	bf00      	nop
 80a0aba:	bf00      	nop
 80a0abc:	bf00      	nop
 80a0abe:	bf00      	nop
 80a0ac0:	bf00      	nop
 80a0ac2:	bf00      	nop
 80a0ac4:	bf00      	nop
 80a0ac6:	bf00      	nop
 80a0ac8:	bf00      	nop
 80a0aca:	bf00      	nop
 80a0acc:	bf00      	nop
 80a0ace:	bf00      	nop
 80a0ad0:	bf00      	nop
 80a0ad2:	bf00      	nop
 80a0ad4:	bf00      	nop
 80a0ad6:	bf00      	nop
 80a0ad8:	bf00      	nop
 80a0ada:	bf00      	nop
 80a0adc:	bf00      	nop
 80a0ade:	bf00      	nop
 80a0ae0:	bf00      	nop
 80a0ae2:	bf00      	nop
 80a0ae4:	bf00      	nop
 80a0ae6:	bf00      	nop
 80a0ae8:	bf00      	nop
 80a0aea:	bf00      	nop
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
 80a0b00:	bf00      	nop
 80a0b02:	bf00      	nop
 80a0b04:	bf00      	nop
 80a0b06:	bf00      	nop
 80a0b08:	bf00      	nop
 80a0b0a:	bf00      	nop
 80a0b0c:	bf00      	nop
 80a0b0e:	bf00      	nop
 80a0b10:	bf00      	nop
 80a0b12:	bf00      	nop
 80a0b14:	bf00      	nop
 80a0b16:	bf00      	nop
 80a0b18:	bf00      	nop
 80a0b1a:	bf00      	nop
 80a0b1c:	bf00      	nop
 80a0b1e:	bf00      	nop
 80a0b20:	bf00      	nop
 80a0b22:	bf00      	nop
 80a0b24:	bf00      	nop
 80a0b26:	bf00      	nop
 80a0b28:	bf00      	nop
 80a0b2a:	bf00      	nop
 80a0b2c:	bf00      	nop
 80a0b2e:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0b30:	79e3      	ldrb	r3, [r4, #7]
 80a0b32:	6810      	ldr	r0, [r2, #0]
 80a0b34:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0b38:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0b3c:	88bf      	ldrh	r7, [r7, #4]
 80a0b3e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0b42:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0b44:	4600      	mov	r0, r0
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
 80a0b7a:	bf00      	nop
 80a0b7c:	bf00      	nop
 80a0b7e:	bf00      	nop
 80a0b80:	bf00      	nop
 80a0b82:	bf00      	nop
 80a0b84:	bf00      	nop
 80a0b86:	bf00      	nop
 80a0b88:	bf00      	nop
 80a0b8a:	bf00      	nop
 80a0b8c:	bf00      	nop
 80a0b8e:	bf00      	nop
 80a0b90:	bf00      	nop
 80a0b92:	bf00      	nop
 80a0b94:	bf00      	nop
 80a0b96:	bf00      	nop
 80a0b98:	bf00      	nop
 80a0b9a:	bf00      	nop
 80a0b9c:	bf00      	nop
 80a0b9e:	bf00      	nop
 80a0ba0:	bf00      	nop
 80a0ba2:	bf00      	nop
 80a0ba4:	bf00      	nop
 80a0ba6:	bf00      	nop
 80a0ba8:	bf00      	nop
 80a0baa:	bf00      	nop
 80a0bac:	bf00      	nop
 80a0bae:	bf00      	nop
 80a0bb0:	bf00      	nop
 80a0bb2:	bf00      	nop
 80a0bb4:	bf00      	nop
 80a0bb6:	bf00      	nop
 80a0bb8:	bf00      	nop
 80a0bba:	bf00      	nop
 80a0bbc:	bf00      	nop
 80a0bbe:	bf00      	nop
 80a0bc0:	bf00      	nop
 80a0bc2:	bf00      	nop
 80a0bc4:	bf00      	nop
 80a0bc6:	bf00      	nop
 80a0bc8:	bf00      	nop
 80a0bca:	bf00      	nop
 80a0bcc:	bf00      	nop
 80a0bce:	bf00      	nop
 80a0bd0:	bf00      	nop
 80a0bd2:	bf00      	nop
 80a0bd4:	bf00      	nop
 80a0bd6:	bf00      	nop
 80a0bd8:	bf00      	nop
 80a0bda:	bf00      	nop
 80a0bdc:	bf00      	nop
 80a0bde:	bf00      	nop
 80a0be0:	bf00      	nop
 80a0be2:	bf00      	nop
 80a0be4:	bf00      	nop
 80a0be6:	bf00      	nop
 80a0be8:	bf00      	nop
 80a0bea:	bf00      	nop
 80a0bec:	bf00      	nop
 80a0bee:	bf00      	nop
 80a0bf0:	bf00      	nop
 80a0bf2:	bf00      	nop
 80a0bf4:	bf00      	nop
 80a0bf6:	bf00      	nop
 80a0bf8:	bf00      	nop
 80a0bfa:	bf00      	nop
 80a0bfc:	bf00      	nop
 80a0bfe:	bf00      	nop
 80a0c00:	bf00      	nop
 80a0c02:	bf00      	nop
 80a0c04:	bf00      	nop
 80a0c06:	bf00      	nop
 80a0c08:	bf00      	nop
 80a0c0a:	bf00      	nop
 80a0c0c:	bf00      	nop
 80a0c0e:	bf00      	nop
 80a0c10:	bf00      	nop
 80a0c12:	bf00      	nop
 80a0c14:	bf00      	nop
 80a0c16:	bf00      	nop
 80a0c18:	bf00      	nop
 80a0c1a:	bf00      	nop
 80a0c1c:	bf00      	nop
 80a0c1e:	bf00      	nop
 80a0c20:	bf00      	nop
 80a0c22:	bf00      	nop
 80a0c24:	bf00      	nop
 80a0c26:	bf00      	nop
 80a0c28:	bf00      	nop
 80a0c2a:	bf00      	nop
 80a0c2c:	bf00      	nop
 80a0c2e:	bf00      	nop
 80a0c30:	bf00      	nop
 80a0c32:	bf00      	nop
 80a0c34:	bf00      	nop
 80a0c36:	bf00      	nop
 80a0c38:	bf00      	nop
 80a0c3a:	bf00      	nop
 80a0c3c:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0c3e:	9b04      	ldr	r3, [sp, #16]
 80a0c40:	085b      	lsrs	r3, r3, #1
 80a0c42:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0c44:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0c48:	3301      	adds	r3, #1
 80a0c4a:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0c4c:	2b17      	cmp	r3, #23
 80a0c4e:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0c52:	f200 82db 	bhi.w	80a120c <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a0c56:	79e3      	ldrb	r3, [r4, #7]
 80a0c58:	6810      	ldr	r0, [r2, #0]
 80a0c5a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c5e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c62:	88bf      	ldrh	r7, [r7, #4]
 80a0c64:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c68:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0c6a:	9803      	ldr	r0, [sp, #12]
 80a0c6c:	9b04      	ldr	r3, [sp, #16]
 80a0c6e:	4218      	tst	r0, r3
 80a0c70:	f47f aeda 	bne.w	80a0a28 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0c74:	4600      	mov	r0, r0
 80a0c76:	bf00      	nop
 80a0c78:	bf00      	nop
 80a0c7a:	bf00      	nop
 80a0c7c:	bf00      	nop
 80a0c7e:	bf00      	nop
 80a0c80:	bf00      	nop
 80a0c82:	bf00      	nop
 80a0c84:	bf00      	nop
 80a0c86:	bf00      	nop
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
 80a0c8c:	bf00      	nop
 80a0c8e:	bf00      	nop
 80a0c90:	bf00      	nop
 80a0c92:	bf00      	nop
 80a0c94:	bf00      	nop
 80a0c96:	bf00      	nop
 80a0c98:	bf00      	nop
 80a0c9a:	bf00      	nop
 80a0c9c:	bf00      	nop
 80a0c9e:	bf00      	nop
 80a0ca0:	bf00      	nop
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a0cc6:	79e3      	ldrb	r3, [r4, #7]
 80a0cc8:	6810      	ldr	r0, [r2, #0]
 80a0cca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0cce:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0cd2:	88bf      	ldrh	r7, [r7, #4]
 80a0cd4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0cd8:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0cda:	4600      	mov	r0, r0
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	bf00      	nop
 80a0d00:	bf00      	nop
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
 80a0d0e:	bf00      	nop
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
 80a0e24:	bf00      	nop
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
 80a0e54:	bf00      	nop
 80a0e56:	bf00      	nop
 80a0e58:	bf00      	nop
 80a0e5a:	bf00      	nop
 80a0e5c:	bf00      	nop
 80a0e5e:	bf00      	nop
 80a0e60:	bf00      	nop
 80a0e62:	bf00      	nop
 80a0e64:	bf00      	nop
 80a0e66:	bf00      	nop
 80a0e68:	bf00      	nop
 80a0e6a:	bf00      	nop
 80a0e6c:	bf00      	nop
 80a0e6e:	bf00      	nop
 80a0e70:	bf00      	nop
 80a0e72:	bf00      	nop
 80a0e74:	bf00      	nop
 80a0e76:	bf00      	nop
 80a0e78:	bf00      	nop
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	e6db      	b.n	80a0c3e <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0e86:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0e8a:	4a17      	ldr	r2, [pc, #92]	; (80a0ee8 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a0e8c:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a0e8e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0e92:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0e94:	2b00      	cmp	r3, #0
 80a0e96:	f000 8131 	beq.w	80a10fc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0e9a:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0e9c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0ea0:	f10e 0103 	add.w	r1, lr, #3
 80a0ea4:	3b03      	subs	r3, #3
 80a0ea6:	b29b      	uxth	r3, r3
 80a0ea8:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0eac:	f89e 3000 	ldrb.w	r3, [lr]
 80a0eb0:	b2db      	uxtb	r3, r3
 80a0eb2:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0eb6:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0eba:	b2db      	uxtb	r3, r3
 80a0ebc:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0ec0:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0ec4:	b2db      	uxtb	r3, r3
 80a0ec6:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0eca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0ece:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a0ed2:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a0ed6:	0200      	lsls	r0, r0, #8
 80a0ed8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a0edc:	433b      	orrs	r3, r7
 80a0ede:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0ee0:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0ee4:	e080      	b.n	80a0fe8 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a0ee6:	bf00      	nop
 80a0ee8:	200004d8 	.word	0x200004d8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0eec:	4600      	mov	r0, r0
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
 80a0f60:	bf00      	nop
 80a0f62:	bf00      	nop
 80a0f64:	bf00      	nop
 80a0f66:	bf00      	nop
 80a0f68:	bf00      	nop
 80a0f6a:	bf00      	nop
 80a0f6c:	bf00      	nop
 80a0f6e:	bf00      	nop
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
 80a0f76:	bf00      	nop
 80a0f78:	bf00      	nop
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a0f86:	79e3      	ldrb	r3, [r4, #7]
 80a0f88:	6810      	ldr	r0, [r2, #0]
 80a0f8a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0f8e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0f92:	88bf      	ldrh	r7, [r7, #4]
 80a0f94:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f98:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f9a:	4600      	mov	r0, r0
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
 80a0fae:	bf00      	nop
 80a0fb0:	bf00      	nop
 80a0fb2:	bf00      	nop
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0fd0:	9b04      	ldr	r3, [sp, #16]
 80a0fd2:	085b      	lsrs	r3, r3, #1
 80a0fd4:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0fd6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0fda:	3301      	adds	r3, #1
 80a0fdc:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0fde:	2b17      	cmp	r3, #23
 80a0fe0:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0fe4:	f200 8083 	bhi.w	80a10ee <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a0fe8:	79e3      	ldrb	r3, [r4, #7]
 80a0fea:	6810      	ldr	r0, [r2, #0]
 80a0fec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0ff0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0ff4:	88bf      	ldrh	r7, [r7, #4]
 80a0ff6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0ffa:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0ffc:	9803      	ldr	r0, [sp, #12]
 80a0ffe:	9b04      	ldr	r3, [sp, #16]
 80a1000:	4218      	tst	r0, r3
 80a1002:	f47f af73 	bne.w	80a0eec <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1006:	4600      	mov	r0, r0
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a102e:	79e3      	ldrb	r3, [r4, #7]
 80a1030:	6810      	ldr	r0, [r2, #0]
 80a1032:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1036:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a103a:	88bf      	ldrh	r7, [r7, #4]
 80a103c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1040:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1042:	4600      	mov	r0, r0
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
 80a10d2:	bf00      	nop
 80a10d4:	bf00      	nop
 80a10d6:	bf00      	nop
 80a10d8:	bf00      	nop
 80a10da:	bf00      	nop
 80a10dc:	bf00      	nop
 80a10de:	bf00      	nop
 80a10e0:	bf00      	nop
 80a10e2:	bf00      	nop
 80a10e4:	bf00      	nop
 80a10e6:	bf00      	nop
 80a10e8:	bf00      	nop
 80a10ea:	bf00      	nop
 80a10ec:	e770      	b.n	80a0fd0 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a10ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a10f2:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a10f4:	b29b      	uxth	r3, r3
 80a10f6:	2b00      	cmp	r3, #0
 80a10f8:	f47f aecf 	bne.w	80a0e9a <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a10fc:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a10fe:	f7ff fbcd 	bl	80a089c <micros>
 80a1102:	6120      	str	r0, [r4, #16]
}
 80a1104:	b006      	add	sp, #24
 80a1106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a110a:	4b5e      	ldr	r3, [pc, #376]	; (80a1284 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a110c:	4a5e      	ldr	r2, [pc, #376]	; (80a1288 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a110e:	4618      	mov	r0, r3
 80a1110:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1112:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1116:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1118:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a111c:	b292      	uxth	r2, r2
 80a111e:	2a00      	cmp	r2, #0
 80a1120:	d0ec      	beq.n	80a10fc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1122:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1126:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a112a:	f10e 0503 	add.w	r5, lr, #3
 80a112e:	3a03      	subs	r2, #3
 80a1130:	b292      	uxth	r2, r2
 80a1132:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a1136:	f89e 2000 	ldrb.w	r2, [lr]
 80a113a:	b2d2      	uxtb	r2, r2
 80a113c:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a1140:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a1144:	b2d2      	uxtb	r2, r2
 80a1146:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a114a:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a114e:	b2d2      	uxtb	r2, r2
 80a1150:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1154:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a1158:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a115c:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a1160:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a1164:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a1168:	ea42 020c 	orr.w	r2, r2, ip
 80a116c:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a116e:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a1172:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1174:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a1176:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a117a:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a117e:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1182:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1186:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a1188:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a118c:	9e03      	ldr	r6, [sp, #12]
 80a118e:	9a04      	ldr	r2, [sp, #16]
 80a1190:	4216      	tst	r6, r2
 80a1192:	d023      	beq.n	80a11dc <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1194:	685a      	ldr	r2, [r3, #4]
 80a1196:	9e05      	ldr	r6, [sp, #20]
 80a1198:	1b92      	subs	r2, r2, r6
 80a119a:	2a4f      	cmp	r2, #79	; 0x4f
 80a119c:	d9fa      	bls.n	80a1194 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a119e:	79e2      	ldrb	r2, [r4, #7]
 80a11a0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a11a4:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a11a8:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a11ac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a11b0:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a11b4:	6842      	ldr	r2, [r0, #4]
 80a11b6:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a11b8:	685a      	ldr	r2, [r3, #4]
 80a11ba:	9e05      	ldr	r6, [sp, #20]
 80a11bc:	1b92      	subs	r2, r2, r6
 80a11be:	2a07      	cmp	r2, #7
 80a11c0:	d9fa      	bls.n	80a11b8 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a11c2:	9a04      	ldr	r2, [sp, #16]
 80a11c4:	0852      	lsrs	r2, r2, #1
 80a11c6:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a11c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a11cc:	3201      	adds	r2, #1
 80a11ce:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a11d0:	2a17      	cmp	r2, #23
 80a11d2:	f88d 2005 	strb.w	r2, [sp, #5]
 80a11d6:	d9cc      	bls.n	80a1172 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a11d8:	46ae      	mov	lr, r5
 80a11da:	e79d      	b.n	80a1118 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a11dc:	685a      	ldr	r2, [r3, #4]
 80a11de:	9e05      	ldr	r6, [sp, #20]
 80a11e0:	1b92      	subs	r2, r2, r6
 80a11e2:	2a18      	cmp	r2, #24
 80a11e4:	d9fa      	bls.n	80a11dc <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a11e6:	79e2      	ldrb	r2, [r4, #7]
 80a11e8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a11ec:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a11f0:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a11f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a11f8:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a11fc:	6842      	ldr	r2, [r0, #4]
 80a11fe:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a1200:	685a      	ldr	r2, [r3, #4]
 80a1202:	9e05      	ldr	r6, [sp, #20]
 80a1204:	1b92      	subs	r2, r2, r6
 80a1206:	2a45      	cmp	r2, #69	; 0x45
 80a1208:	d9fa      	bls.n	80a1200 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a120a:	e7da      	b.n	80a11c2 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a120c:	46ae      	mov	lr, r5
 80a120e:	f7ff bbda 	b.w	80a09c6 <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a1212:	4a1d      	ldr	r2, [pc, #116]	; (80a1288 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a1214:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a1218:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a121a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a121e:	b29b      	uxth	r3, r3
 80a1220:	2b00      	cmp	r3, #0
 80a1222:	f43f af6b 	beq.w	80a10fc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a1226:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a1228:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a122c:	f10e 0104 	add.w	r1, lr, #4
 80a1230:	3b04      	subs	r3, #4
 80a1232:	b29b      	uxth	r3, r3
 80a1234:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1238:	f89e 3000 	ldrb.w	r3, [lr]
 80a123c:	b2db      	uxtb	r3, r3
 80a123e:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a1242:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1246:	b2db      	uxtb	r3, r3
 80a1248:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a124c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1250:	b2db      	uxtb	r3, r3
 80a1252:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a1256:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a125a:	b2db      	uxtb	r3, r3
 80a125c:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a1260:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a1264:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a1268:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a126c:	043f      	lsls	r7, r7, #16
 80a126e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a1272:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a1276:	4303      	orrs	r3, r0
 80a1278:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a127c:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a127e:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1282:	e07e      	b.n	80a1382 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a1284:	e0001000 	.word	0xe0001000
 80a1288:	200004d8 	.word	0x200004d8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a128c:	4600      	mov	r0, r0
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a12fa:	79e3      	ldrb	r3, [r4, #7]
 80a12fc:	6810      	ldr	r0, [r2, #0]
 80a12fe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1302:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1306:	88bf      	ldrh	r7, [r7, #4]
 80a1308:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a130c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a130e:	4600      	mov	r0, r0
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a136c:	9b04      	ldr	r3, [sp, #16]
 80a136e:	085b      	lsrs	r3, r3, #1
 80a1370:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a1372:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1376:	3301      	adds	r3, #1
 80a1378:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a137a:	2b1f      	cmp	r3, #31
 80a137c:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1380:	d87e      	bhi.n	80a1480 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a1382:	79e3      	ldrb	r3, [r4, #7]
 80a1384:	6810      	ldr	r0, [r2, #0]
 80a1386:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a138a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a138e:	88bf      	ldrh	r7, [r7, #4]
 80a1390:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1394:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1396:	9803      	ldr	r0, [sp, #12]
 80a1398:	9b04      	ldr	r3, [sp, #16]
 80a139a:	4218      	tst	r0, r3
 80a139c:	f47f af76 	bne.w	80a128c <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a13a0:	4600      	mov	r0, r0
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a13c8:	79e3      	ldrb	r3, [r4, #7]
 80a13ca:	6810      	ldr	r0, [r2, #0]
 80a13cc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a13d0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a13d4:	88bf      	ldrh	r7, [r7, #4]
 80a13d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a13da:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a13dc:	4600      	mov	r0, r0
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	e775      	b.n	80a136c <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a1480:	468e      	mov	lr, r1
 80a1482:	e6ca      	b.n	80a121a <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a1484:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a1486:	2903      	cmp	r1, #3
 80a1488:	f000 812e 	beq.w	80a16e8 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a148c:	4a1e      	ldr	r2, [pc, #120]	; (80a1508 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a148e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1492:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1494:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1498:	b29b      	uxth	r3, r3
 80a149a:	2b00      	cmp	r3, #0
 80a149c:	f43f ae2e 	beq.w	80a10fc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a14a0:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a14a2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a14a6:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a14a8:	3b03      	subs	r3, #3
 80a14aa:	b29b      	uxth	r3, r3
 80a14ac:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a14b0:	f89e 3000 	ldrb.w	r3, [lr]
 80a14b4:	f10e 0103 	add.w	r1, lr, #3
 80a14b8:	b2db      	uxtb	r3, r3
 80a14ba:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a14be:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a14c2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a14c6:	b2db      	uxtb	r3, r3
 80a14c8:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a14cc:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a14d0:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a14d4:	b2db      	uxtb	r3, r3
 80a14d6:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a14da:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a14de:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a14e2:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a14e6:	021b      	lsls	r3, r3, #8
 80a14e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a14ec:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a14f0:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a14f4:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a14f8:	433b      	orrs	r3, r7
 80a14fa:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a14fc:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a1500:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a1504:	e07d      	b.n	80a1602 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a1506:	bf00      	nop
 80a1508:	200004d8 	.word	0x200004d8
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a150c:	9b04      	ldr	r3, [sp, #16]
 80a150e:	085b      	lsrs	r3, r3, #1
 80a1510:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1512:	4600      	mov	r0, r0
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	bf00      	nop
 80a155c:	bf00      	nop
 80a155e:	bf00      	nop
 80a1560:	bf00      	nop
 80a1562:	bf00      	nop
 80a1564:	bf00      	nop
 80a1566:	bf00      	nop
 80a1568:	bf00      	nop
 80a156a:	bf00      	nop
 80a156c:	bf00      	nop
 80a156e:	bf00      	nop
 80a1570:	bf00      	nop
 80a1572:	bf00      	nop
 80a1574:	bf00      	nop
 80a1576:	bf00      	nop
 80a1578:	bf00      	nop
 80a157a:	bf00      	nop
 80a157c:	bf00      	nop
 80a157e:	bf00      	nop
 80a1580:	bf00      	nop
 80a1582:	bf00      	nop
 80a1584:	bf00      	nop
 80a1586:	bf00      	nop
 80a1588:	bf00      	nop
 80a158a:	bf00      	nop
 80a158c:	bf00      	nop
 80a158e:	bf00      	nop
 80a1590:	bf00      	nop
 80a1592:	bf00      	nop
 80a1594:	bf00      	nop
 80a1596:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1598:	79e0      	ldrb	r0, [r4, #7]
 80a159a:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a159c:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a15a0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a15a4:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a15a8:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a15ac:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a15b0:	3301      	adds	r3, #1
 80a15b2:	b2db      	uxtb	r3, r3
 80a15b4:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a15b8:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a15bc:	4600      	mov	r0, r0
 80a15be:	bf00      	nop
 80a15c0:	bf00      	nop
 80a15c2:	bf00      	nop
 80a15c4:	bf00      	nop
 80a15c6:	bf00      	nop
 80a15c8:	bf00      	nop
 80a15ca:	bf00      	nop
 80a15cc:	bf00      	nop
 80a15ce:	bf00      	nop
 80a15d0:	bf00      	nop
 80a15d2:	bf00      	nop
 80a15d4:	bf00      	nop
 80a15d6:	bf00      	nop
 80a15d8:	bf00      	nop
 80a15da:	bf00      	nop
 80a15dc:	bf00      	nop
 80a15de:	bf00      	nop
 80a15e0:	bf00      	nop
 80a15e2:	bf00      	nop
 80a15e4:	bf00      	nop
          if(j==24) break;
 80a15e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a15ea:	2b18      	cmp	r3, #24
 80a15ec:	d07a      	beq.n	80a16e4 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a15ee:	79e3      	ldrb	r3, [r4, #7]
 80a15f0:	6810      	ldr	r0, [r2, #0]
 80a15f2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a15f6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a15fa:	88bf      	ldrh	r7, [r7, #4]
 80a15fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1600:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a1602:	9803      	ldr	r0, [sp, #12]
 80a1604:	9b04      	ldr	r3, [sp, #16]
 80a1606:	4218      	tst	r0, r3
 80a1608:	d180      	bne.n	80a150c <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a160a:	4600      	mov	r0, r0
 80a160c:	bf00      	nop
 80a160e:	bf00      	nop
 80a1610:	bf00      	nop
 80a1612:	bf00      	nop
 80a1614:	bf00      	nop
 80a1616:	bf00      	nop
 80a1618:	bf00      	nop
 80a161a:	bf00      	nop
 80a161c:	bf00      	nop
 80a161e:	bf00      	nop
 80a1620:	bf00      	nop
 80a1622:	bf00      	nop
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a162c:	79e3      	ldrb	r3, [r4, #7]
 80a162e:	6810      	ldr	r0, [r2, #0]
 80a1630:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1634:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1638:	88bf      	ldrh	r7, [r7, #4]
 80a163a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a163e:	831f      	strh	r7, [r3, #24]
          j++;
 80a1640:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1644:	3301      	adds	r3, #1
 80a1646:	b2db      	uxtb	r3, r3
 80a1648:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a164c:	9b04      	ldr	r3, [sp, #16]
 80a164e:	085b      	lsrs	r3, r3, #1
 80a1650:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1652:	4600      	mov	r0, r0
 80a1654:	bf00      	nop
 80a1656:	bf00      	nop
 80a1658:	bf00      	nop
 80a165a:	bf00      	nop
 80a165c:	bf00      	nop
 80a165e:	bf00      	nop
 80a1660:	bf00      	nop
 80a1662:	bf00      	nop
 80a1664:	bf00      	nop
 80a1666:	bf00      	nop
 80a1668:	bf00      	nop
 80a166a:	bf00      	nop
 80a166c:	bf00      	nop
 80a166e:	bf00      	nop
 80a1670:	bf00      	nop
 80a1672:	bf00      	nop
 80a1674:	bf00      	nop
 80a1676:	bf00      	nop
 80a1678:	bf00      	nop
 80a167a:	bf00      	nop
 80a167c:	bf00      	nop
 80a167e:	bf00      	nop
 80a1680:	bf00      	nop
 80a1682:	bf00      	nop
 80a1684:	bf00      	nop
 80a1686:	bf00      	nop
 80a1688:	bf00      	nop
 80a168a:	bf00      	nop
 80a168c:	bf00      	nop
 80a168e:	bf00      	nop
 80a1690:	bf00      	nop
 80a1692:	bf00      	nop
 80a1694:	bf00      	nop
 80a1696:	bf00      	nop
 80a1698:	bf00      	nop
 80a169a:	bf00      	nop
 80a169c:	bf00      	nop
 80a169e:	bf00      	nop
 80a16a0:	bf00      	nop
 80a16a2:	bf00      	nop
 80a16a4:	bf00      	nop
 80a16a6:	bf00      	nop
 80a16a8:	bf00      	nop
 80a16aa:	bf00      	nop
 80a16ac:	bf00      	nop
 80a16ae:	bf00      	nop
 80a16b0:	bf00      	nop
 80a16b2:	bf00      	nop
 80a16b4:	bf00      	nop
 80a16b6:	bf00      	nop
 80a16b8:	bf00      	nop
 80a16ba:	bf00      	nop
 80a16bc:	bf00      	nop
 80a16be:	bf00      	nop
 80a16c0:	bf00      	nop
 80a16c2:	bf00      	nop
 80a16c4:	bf00      	nop
 80a16c6:	bf00      	nop
 80a16c8:	bf00      	nop
 80a16ca:	bf00      	nop
 80a16cc:	bf00      	nop
 80a16ce:	bf00      	nop
 80a16d0:	bf00      	nop
 80a16d2:	bf00      	nop
 80a16d4:	bf00      	nop
 80a16d6:	bf00      	nop
 80a16d8:	bf00      	nop
 80a16da:	bf00      	nop
          if(j==24) break;
 80a16dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a16e0:	2b18      	cmp	r3, #24
 80a16e2:	d184      	bne.n	80a15ee <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a16e4:	468e      	mov	lr, r1
 80a16e6:	e6d5      	b.n	80a1494 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a16e8:	4a17      	ldr	r2, [pc, #92]	; (80a1748 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a16ea:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a16ee:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a16f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a16f4:	b29b      	uxth	r3, r3
 80a16f6:	2b00      	cmp	r3, #0
 80a16f8:	f43f ad00 	beq.w	80a10fc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a16fc:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a16fe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1702:	f10e 0103 	add.w	r1, lr, #3
 80a1706:	3b03      	subs	r3, #3
 80a1708:	b29b      	uxth	r3, r3
 80a170a:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a170e:	f89e 3000 	ldrb.w	r3, [lr]
 80a1712:	b2db      	uxtb	r3, r3
 80a1714:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a1718:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a171c:	b2db      	uxtb	r3, r3
 80a171e:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a1722:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1726:	b2db      	uxtb	r3, r3
 80a1728:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a172c:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1730:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1734:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1738:	021b      	lsls	r3, r3, #8
 80a173a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a173e:	4303      	orrs	r3, r0
 80a1740:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1742:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1746:	e0e0      	b.n	80a190a <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a1748:	200004d8 	.word	0x200004d8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a174c:	4600      	mov	r0, r0
 80a174e:	bf00      	nop
 80a1750:	bf00      	nop
 80a1752:	bf00      	nop
 80a1754:	bf00      	nop
 80a1756:	bf00      	nop
 80a1758:	bf00      	nop
 80a175a:	bf00      	nop
 80a175c:	bf00      	nop
 80a175e:	bf00      	nop
 80a1760:	bf00      	nop
 80a1762:	bf00      	nop
 80a1764:	bf00      	nop
 80a1766:	bf00      	nop
 80a1768:	bf00      	nop
 80a176a:	bf00      	nop
 80a176c:	bf00      	nop
 80a176e:	bf00      	nop
 80a1770:	bf00      	nop
 80a1772:	bf00      	nop
 80a1774:	bf00      	nop
 80a1776:	bf00      	nop
 80a1778:	bf00      	nop
 80a177a:	bf00      	nop
 80a177c:	bf00      	nop
 80a177e:	bf00      	nop
 80a1780:	bf00      	nop
 80a1782:	bf00      	nop
 80a1784:	bf00      	nop
 80a1786:	bf00      	nop
 80a1788:	bf00      	nop
 80a178a:	bf00      	nop
 80a178c:	bf00      	nop
 80a178e:	bf00      	nop
 80a1790:	bf00      	nop
 80a1792:	bf00      	nop
 80a1794:	bf00      	nop
 80a1796:	bf00      	nop
 80a1798:	bf00      	nop
 80a179a:	bf00      	nop
 80a179c:	bf00      	nop
 80a179e:	bf00      	nop
 80a17a0:	bf00      	nop
 80a17a2:	bf00      	nop
 80a17a4:	bf00      	nop
 80a17a6:	bf00      	nop
 80a17a8:	bf00      	nop
 80a17aa:	bf00      	nop
 80a17ac:	bf00      	nop
 80a17ae:	bf00      	nop
 80a17b0:	bf00      	nop
 80a17b2:	bf00      	nop
 80a17b4:	bf00      	nop
 80a17b6:	bf00      	nop
 80a17b8:	bf00      	nop
 80a17ba:	bf00      	nop
 80a17bc:	bf00      	nop
 80a17be:	bf00      	nop
 80a17c0:	bf00      	nop
 80a17c2:	bf00      	nop
 80a17c4:	bf00      	nop
 80a17c6:	bf00      	nop
 80a17c8:	bf00      	nop
 80a17ca:	bf00      	nop
 80a17cc:	bf00      	nop
 80a17ce:	bf00      	nop
 80a17d0:	bf00      	nop
 80a17d2:	bf00      	nop
 80a17d4:	bf00      	nop
 80a17d6:	bf00      	nop
 80a17d8:	bf00      	nop
 80a17da:	bf00      	nop
 80a17dc:	bf00      	nop
 80a17de:	bf00      	nop
 80a17e0:	bf00      	nop
 80a17e2:	bf00      	nop
 80a17e4:	bf00      	nop
 80a17e6:	bf00      	nop
 80a17e8:	bf00      	nop
 80a17ea:	bf00      	nop
 80a17ec:	bf00      	nop
 80a17ee:	bf00      	nop
 80a17f0:	bf00      	nop
 80a17f2:	bf00      	nop
 80a17f4:	bf00      	nop
 80a17f6:	bf00      	nop
 80a17f8:	bf00      	nop
 80a17fa:	bf00      	nop
 80a17fc:	bf00      	nop
 80a17fe:	bf00      	nop
 80a1800:	bf00      	nop
 80a1802:	bf00      	nop
 80a1804:	bf00      	nop
 80a1806:	bf00      	nop
 80a1808:	bf00      	nop
 80a180a:	bf00      	nop
 80a180c:	bf00      	nop
 80a180e:	bf00      	nop
 80a1810:	bf00      	nop
 80a1812:	bf00      	nop
 80a1814:	bf00      	nop
 80a1816:	bf00      	nop
 80a1818:	bf00      	nop
 80a181a:	bf00      	nop
 80a181c:	bf00      	nop
 80a181e:	bf00      	nop
 80a1820:	bf00      	nop
 80a1822:	bf00      	nop
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
 80a1838:	bf00      	nop
 80a183a:	bf00      	nop
 80a183c:	bf00      	nop
 80a183e:	bf00      	nop
 80a1840:	bf00      	nop
 80a1842:	bf00      	nop
 80a1844:	bf00      	nop
 80a1846:	bf00      	nop
 80a1848:	bf00      	nop
 80a184a:	bf00      	nop
 80a184c:	bf00      	nop
 80a184e:	bf00      	nop
 80a1850:	bf00      	nop
 80a1852:	bf00      	nop
 80a1854:	bf00      	nop
 80a1856:	bf00      	nop
 80a1858:	bf00      	nop
 80a185a:	bf00      	nop
 80a185c:	bf00      	nop
 80a185e:	bf00      	nop
 80a1860:	bf00      	nop
 80a1862:	bf00      	nop
 80a1864:	bf00      	nop
 80a1866:	bf00      	nop
 80a1868:	bf00      	nop
 80a186a:	bf00      	nop
 80a186c:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a186e:	79e3      	ldrb	r3, [r4, #7]
 80a1870:	6810      	ldr	r0, [r2, #0]
 80a1872:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1876:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a187a:	88bf      	ldrh	r7, [r7, #4]
 80a187c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1880:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1882:	4600      	mov	r0, r0
 80a1884:	bf00      	nop
 80a1886:	bf00      	nop
 80a1888:	bf00      	nop
 80a188a:	bf00      	nop
 80a188c:	bf00      	nop
 80a188e:	bf00      	nop
 80a1890:	bf00      	nop
 80a1892:	bf00      	nop
 80a1894:	bf00      	nop
 80a1896:	bf00      	nop
 80a1898:	bf00      	nop
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
 80a18b6:	bf00      	nop
 80a18b8:	bf00      	nop
 80a18ba:	bf00      	nop
 80a18bc:	bf00      	nop
 80a18be:	bf00      	nop
 80a18c0:	bf00      	nop
 80a18c2:	bf00      	nop
 80a18c4:	bf00      	nop
 80a18c6:	bf00      	nop
 80a18c8:	bf00      	nop
 80a18ca:	bf00      	nop
 80a18cc:	bf00      	nop
 80a18ce:	bf00      	nop
 80a18d0:	bf00      	nop
 80a18d2:	bf00      	nop
 80a18d4:	bf00      	nop
 80a18d6:	bf00      	nop
 80a18d8:	bf00      	nop
 80a18da:	bf00      	nop
 80a18dc:	bf00      	nop
 80a18de:	bf00      	nop
 80a18e0:	bf00      	nop
 80a18e2:	bf00      	nop
 80a18e4:	bf00      	nop
 80a18e6:	bf00      	nop
 80a18e8:	bf00      	nop
 80a18ea:	bf00      	nop
 80a18ec:	bf00      	nop
 80a18ee:	bf00      	nop
 80a18f0:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a18f2:	9b04      	ldr	r3, [sp, #16]
 80a18f4:	085b      	lsrs	r3, r3, #1
 80a18f6:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a18f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a18fc:	3301      	adds	r3, #1
 80a18fe:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1900:	2b17      	cmp	r3, #23
 80a1902:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1906:	f200 80e3 	bhi.w	80a1ad0 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a190a:	79e3      	ldrb	r3, [r4, #7]
 80a190c:	6810      	ldr	r0, [r2, #0]
 80a190e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1912:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1916:	88bf      	ldrh	r7, [r7, #4]
 80a1918:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a191c:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a191e:	9803      	ldr	r0, [sp, #12]
 80a1920:	9b04      	ldr	r3, [sp, #16]
 80a1922:	4218      	tst	r0, r3
 80a1924:	f47f af12 	bne.w	80a174c <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1928:	4600      	mov	r0, r0
 80a192a:	bf00      	nop
 80a192c:	bf00      	nop
 80a192e:	bf00      	nop
 80a1930:	bf00      	nop
 80a1932:	bf00      	nop
 80a1934:	bf00      	nop
 80a1936:	bf00      	nop
 80a1938:	bf00      	nop
 80a193a:	bf00      	nop
 80a193c:	bf00      	nop
 80a193e:	bf00      	nop
 80a1940:	bf00      	nop
 80a1942:	bf00      	nop
 80a1944:	bf00      	nop
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
 80a194a:	bf00      	nop
 80a194c:	bf00      	nop
 80a194e:	bf00      	nop
 80a1950:	bf00      	nop
 80a1952:	bf00      	nop
 80a1954:	bf00      	nop
 80a1956:	bf00      	nop
 80a1958:	bf00      	nop
 80a195a:	bf00      	nop
 80a195c:	bf00      	nop
 80a195e:	bf00      	nop
 80a1960:	bf00      	nop
 80a1962:	bf00      	nop
 80a1964:	bf00      	nop
 80a1966:	bf00      	nop
 80a1968:	bf00      	nop
 80a196a:	bf00      	nop
 80a196c:	bf00      	nop
 80a196e:	bf00      	nop
 80a1970:	bf00      	nop
 80a1972:	bf00      	nop
 80a1974:	bf00      	nop
 80a1976:	bf00      	nop
 80a1978:	bf00      	nop
 80a197a:	bf00      	nop
 80a197c:	bf00      	nop
 80a197e:	bf00      	nop
 80a1980:	bf00      	nop
 80a1982:	bf00      	nop
 80a1984:	bf00      	nop
 80a1986:	bf00      	nop
 80a1988:	bf00      	nop
 80a198a:	bf00      	nop
 80a198c:	bf00      	nop
 80a198e:	bf00      	nop
 80a1990:	bf00      	nop
 80a1992:	bf00      	nop
 80a1994:	bf00      	nop
 80a1996:	bf00      	nop
 80a1998:	bf00      	nop
 80a199a:	bf00      	nop
 80a199c:	bf00      	nop
 80a199e:	bf00      	nop
 80a19a0:	bf00      	nop
 80a19a2:	bf00      	nop
 80a19a4:	bf00      	nop
 80a19a6:	bf00      	nop
 80a19a8:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a19aa:	79e3      	ldrb	r3, [r4, #7]
 80a19ac:	6810      	ldr	r0, [r2, #0]
 80a19ae:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a19b2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a19b6:	88bf      	ldrh	r7, [r7, #4]
 80a19b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a19bc:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a19be:	4600      	mov	r0, r0
 80a19c0:	bf00      	nop
 80a19c2:	bf00      	nop
 80a19c4:	bf00      	nop
 80a19c6:	bf00      	nop
 80a19c8:	bf00      	nop
 80a19ca:	bf00      	nop
 80a19cc:	bf00      	nop
 80a19ce:	bf00      	nop
 80a19d0:	bf00      	nop
 80a19d2:	bf00      	nop
 80a19d4:	bf00      	nop
 80a19d6:	bf00      	nop
 80a19d8:	bf00      	nop
 80a19da:	bf00      	nop
 80a19dc:	bf00      	nop
 80a19de:	bf00      	nop
 80a19e0:	bf00      	nop
 80a19e2:	bf00      	nop
 80a19e4:	bf00      	nop
 80a19e6:	bf00      	nop
 80a19e8:	bf00      	nop
 80a19ea:	bf00      	nop
 80a19ec:	bf00      	nop
 80a19ee:	bf00      	nop
 80a19f0:	bf00      	nop
 80a19f2:	bf00      	nop
 80a19f4:	bf00      	nop
 80a19f6:	bf00      	nop
 80a19f8:	bf00      	nop
 80a19fa:	bf00      	nop
 80a19fc:	bf00      	nop
 80a19fe:	bf00      	nop
 80a1a00:	bf00      	nop
 80a1a02:	bf00      	nop
 80a1a04:	bf00      	nop
 80a1a06:	bf00      	nop
 80a1a08:	bf00      	nop
 80a1a0a:	bf00      	nop
 80a1a0c:	bf00      	nop
 80a1a0e:	bf00      	nop
 80a1a10:	bf00      	nop
 80a1a12:	bf00      	nop
 80a1a14:	bf00      	nop
 80a1a16:	bf00      	nop
 80a1a18:	bf00      	nop
 80a1a1a:	bf00      	nop
 80a1a1c:	bf00      	nop
 80a1a1e:	bf00      	nop
 80a1a20:	bf00      	nop
 80a1a22:	bf00      	nop
 80a1a24:	bf00      	nop
 80a1a26:	bf00      	nop
 80a1a28:	bf00      	nop
 80a1a2a:	bf00      	nop
 80a1a2c:	bf00      	nop
 80a1a2e:	bf00      	nop
 80a1a30:	bf00      	nop
 80a1a32:	bf00      	nop
 80a1a34:	bf00      	nop
 80a1a36:	bf00      	nop
 80a1a38:	bf00      	nop
 80a1a3a:	bf00      	nop
 80a1a3c:	bf00      	nop
 80a1a3e:	bf00      	nop
 80a1a40:	bf00      	nop
 80a1a42:	bf00      	nop
 80a1a44:	bf00      	nop
 80a1a46:	bf00      	nop
 80a1a48:	bf00      	nop
 80a1a4a:	bf00      	nop
 80a1a4c:	bf00      	nop
 80a1a4e:	bf00      	nop
 80a1a50:	bf00      	nop
 80a1a52:	bf00      	nop
 80a1a54:	bf00      	nop
 80a1a56:	bf00      	nop
 80a1a58:	bf00      	nop
 80a1a5a:	bf00      	nop
 80a1a5c:	bf00      	nop
 80a1a5e:	bf00      	nop
 80a1a60:	bf00      	nop
 80a1a62:	bf00      	nop
 80a1a64:	bf00      	nop
 80a1a66:	bf00      	nop
 80a1a68:	bf00      	nop
 80a1a6a:	bf00      	nop
 80a1a6c:	bf00      	nop
 80a1a6e:	bf00      	nop
 80a1a70:	bf00      	nop
 80a1a72:	bf00      	nop
 80a1a74:	bf00      	nop
 80a1a76:	bf00      	nop
 80a1a78:	bf00      	nop
 80a1a7a:	bf00      	nop
 80a1a7c:	bf00      	nop
 80a1a7e:	bf00      	nop
 80a1a80:	bf00      	nop
 80a1a82:	bf00      	nop
 80a1a84:	bf00      	nop
 80a1a86:	bf00      	nop
 80a1a88:	bf00      	nop
 80a1a8a:	bf00      	nop
 80a1a8c:	bf00      	nop
 80a1a8e:	bf00      	nop
 80a1a90:	bf00      	nop
 80a1a92:	bf00      	nop
 80a1a94:	bf00      	nop
 80a1a96:	bf00      	nop
 80a1a98:	bf00      	nop
 80a1a9a:	bf00      	nop
 80a1a9c:	bf00      	nop
 80a1a9e:	bf00      	nop
 80a1aa0:	bf00      	nop
 80a1aa2:	bf00      	nop
 80a1aa4:	bf00      	nop
 80a1aa6:	bf00      	nop
 80a1aa8:	bf00      	nop
 80a1aaa:	bf00      	nop
 80a1aac:	bf00      	nop
 80a1aae:	bf00      	nop
 80a1ab0:	bf00      	nop
 80a1ab2:	bf00      	nop
 80a1ab4:	bf00      	nop
 80a1ab6:	bf00      	nop
 80a1ab8:	bf00      	nop
 80a1aba:	bf00      	nop
 80a1abc:	bf00      	nop
 80a1abe:	bf00      	nop
 80a1ac0:	bf00      	nop
 80a1ac2:	bf00      	nop
 80a1ac4:	bf00      	nop
 80a1ac6:	bf00      	nop
 80a1ac8:	bf00      	nop
 80a1aca:	bf00      	nop
 80a1acc:	bf00      	nop
 80a1ace:	e710      	b.n	80a18f2 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1ad0:	468e      	mov	lr, r1
 80a1ad2:	e60d      	b.n	80a16f0 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a1ad4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a1ad4:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a1ad6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1ad8:	428b      	cmp	r3, r1
 80a1ada:	d945      	bls.n	80a1b68 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a1adc:	7a05      	ldrb	r5, [r0, #8]
 80a1ade:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a1ae2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a1ae6:	b2d6      	uxtb	r6, r2
 80a1ae8:	b145      	cbz	r5, 80a1afc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a1aea:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a1aec:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a1aee:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a1af0:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1af4:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a1af8:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1afc:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a1b00:	68c7      	ldr	r7, [r0, #12]
 80a1b02:	f1bc 0f06 	cmp.w	ip, #6
 80a1b06:	bf0c      	ite	eq
 80a1b08:	2504      	moveq	r5, #4
 80a1b0a:	2503      	movne	r5, #3
 80a1b0c:	4369      	muls	r1, r5
 80a1b0e:	f1bc 0f08 	cmp.w	ip, #8
 80a1b12:	eb07 0501 	add.w	r5, r7, r1
 80a1b16:	d824      	bhi.n	80a1b62 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a1b18:	f04f 0e01 	mov.w	lr, #1
 80a1b1c:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a1b20:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a1b24:	d10c      	bne.n	80a1b40 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a1b26:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a1b2a:	d10d      	bne.n	80a1b48 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a1b2c:	f01e 0f10 	tst.w	lr, #16
 80a1b30:	d017      	beq.n	80a1b62 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a1b32:	2bff      	cmp	r3, #255	; 0xff
 80a1b34:	bf08      	it	eq
 80a1b36:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a1b38:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a1b3a:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a1b3c:	70ac      	strb	r4, [r5, #2]
        } break;
 80a1b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1b40:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a1b42:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a1b44:	70ae      	strb	r6, [r5, #2]
        } break;
 80a1b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a1b48:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1b4a:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a1b4c:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1b4e:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1b50:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1b52:	b90b      	cbnz	r3, 80a1b58 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1b54:	b2d2      	uxtb	r2, r2
 80a1b56:	e002      	b.n	80a1b5e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1b58:	435a      	muls	r2, r3
 80a1b5a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a1b5e:	70ea      	strb	r2, [r5, #3]
        } break;
 80a1b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a1b62:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1b64:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a1b66:	70ae      	strb	r6, [r5, #2]
 80a1b68:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1b6a <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a1b6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a1b6e:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a1b72:	4770      	bx	lr

080a1b74 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a1b74:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a1b76:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a1b78:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a1b7a:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a1b7c:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a1b7e:	d01e      	beq.n	80a1bbe <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a1b80:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a1b82:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a1b86:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a1b88:	d00c      	beq.n	80a1ba4 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a1b8a:	29ff      	cmp	r1, #255	; 0xff
 80a1b8c:	bf0f      	iteee	eq
 80a1b8e:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a1b92:	0211      	lslne	r1, r2, #8
 80a1b94:	f101 31ff 	addne.w	r1, r1, #4294967295
 80a1b98:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a1b9c:	bf0c      	ite	eq
 80a1b9e:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a1ba2:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a1ba4:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a1ba6:	1b29      	subs	r1, r5, r4
 80a1ba8:	8886      	ldrh	r6, [r0, #4]
 80a1baa:	b289      	uxth	r1, r1
 80a1bac:	428e      	cmp	r6, r1
 80a1bae:	d905      	bls.n	80a1bbc <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a1bb0:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a1bb2:	4359      	muls	r1, r3
 80a1bb4:	1209      	asrs	r1, r1, #8
 80a1bb6:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a1bba:	e7f4      	b.n	80a1ba6 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a1bbc:	7202      	strb	r2, [r0, #8]
 80a1bbe:	bd70      	pop	{r4, r5, r6, pc}

080a1bc0 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a1bc0:	b508      	push	{r3, lr}
 80a1bc2:	f000 fd55 	bl	80a2670 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a1bc6:	f000 fd53 	bl	80a2670 <HAL_Pin_Map>
 80a1bca:	4b01      	ldr	r3, [pc, #4]	; (80a1bd0 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a1bcc:	6018      	str	r0, [r3, #0]
 80a1bce:	bd08      	pop	{r3, pc}
 80a1bd0:	200004d8 	.word	0x200004d8

080a1bd4 <_GLOBAL__sub_I__ZN7MPU9250C2Ev>:
 80a1bd4:	f000 bd4c 	b.w	80a2670 <HAL_Pin_Map>

080a1bd8 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a1bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
 80a1bda:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a1bdc:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
 80a1be0:	2c02      	cmp	r4, #2
 80a1be2:	d008      	beq.n	80a1bf6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
 80a1be4:	2c03      	cmp	r4, #3
 80a1be6:	d00f      	beq.n	80a1c08 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
 80a1be8:	2c01      	cmp	r4, #1
 80a1bea:	d170      	bne.n	80a1cce <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
 80a1bec:	8904      	ldrh	r4, [r0, #8]
 80a1bee:	3c01      	subs	r4, #1
 80a1bf0:	1aa2      	subs	r2, r4, r2
 80a1bf2:	b212      	sxth	r2, r2
      break;
 80a1bf4:	e00c      	b.n	80a1c10 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
 80a1bf6:	8944      	ldrh	r4, [r0, #10]
 80a1bf8:	3c01      	subs	r4, #1
 80a1bfa:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
 80a1bfc:	8904      	ldrh	r4, [r0, #8]
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
 80a1bfe:	b212      	sxth	r2, r2
      x -= (w-1);
 80a1c00:	1ae4      	subs	r4, r4, r3
 80a1c02:	1a61      	subs	r1, r4, r1
 80a1c04:	b209      	sxth	r1, r1
      break;
 80a1c06:	e062      	b.n	80a1cce <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
 80a1c08:	8944      	ldrh	r4, [r0, #10]
 80a1c0a:	1ae4      	subs	r4, r4, r3
 80a1c0c:	1a61      	subs	r1, r4, r1
 80a1c0e:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 80a1c10:	2a00      	cmp	r2, #0
 80a1c12:	db5b      	blt.n	80a1ccc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
 80a1c14:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a1c18:	4294      	cmp	r4, r2
 80a1c1a:	f340 8090 	ble.w	80a1d3e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
 80a1c1e:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 80a1c20:	bfbe      	ittt	lt
 80a1c22:	185b      	addlt	r3, r3, r1
 80a1c24:	b21b      	sxthlt	r3, r3
    __y = 0;
 80a1c26:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a1c28:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80a1c2c:	18cc      	adds	r4, r1, r3
 80a1c2e:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
 80a1c30:	bfc4      	itt	gt
 80a1c32:	1a43      	subgt	r3, r0, r1
 80a1c34:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
 80a1c36:	2b00      	cmp	r3, #0
 80a1c38:	f340 8081 	ble.w	80a1d3e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 80a1c3c:	b2c9      	uxtb	r1, r1
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a1c3e:	08c8      	lsrs	r0, r1, #3
 80a1c40:	4f3f      	ldr	r7, [pc, #252]	; (80a1d40 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
 80a1c42:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a1c46:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
 80a1c4a:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a1c4c:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a1c50:	d017      	beq.n	80a1c82 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
 80a1c52:	f1c1 0108 	rsb	r1, r1, #8
 80a1c56:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a1c58:	493a      	ldr	r1, [pc, #232]	; (80a1d44 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
 80a1c5a:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a1c5c:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
 80a1c5e:	bf3f      	itttt	cc
 80a1c60:	ebc3 0e00 	rsbcc	lr, r3, r0
 80a1c64:	21ff      	movcc	r1, #255	; 0xff
 80a1c66:	fa41 f10e 	asrcc.w	r1, r1, lr
 80a1c6a:	400e      	andcc	r6, r1
 80a1c6c:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
 80a1c6e:	2d01      	cmp	r5, #1
      *pBuf |= mask;
 80a1c70:	bf0c      	ite	eq
 80a1c72:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
 80a1c74:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a1c76:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
 80a1c78:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a1c7a:	d360      	bcc.n	80a1d3e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
 80a1c7c:	1a18      	subs	r0, r3, r0
 80a1c7e:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
 80a1c80:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
 80a1c82:	2b07      	cmp	r3, #7
 80a1c84:	d917      	bls.n	80a1cb6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
 80a1c86:	2d01      	cmp	r5, #1
 80a1c88:	bf0c      	ite	eq
 80a1c8a:	20ff      	moveq	r0, #255	; 0xff
 80a1c8c:	2000      	movne	r0, #0
 80a1c8e:	461a      	mov	r2, r3
 80a1c90:	f104 0180 	add.w	r1, r4, #128	; 0x80

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 80a1c94:	3a08      	subs	r2, #8
 80a1c96:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
 80a1c98:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
 80a1c9a:	f801 0c80 	strb.w	r0, [r1, #-128]
 80a1c9e:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 80a1ca2:	d8f7      	bhi.n	80a1c94 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
 80a1ca4:	f1a3 0208 	sub.w	r2, r3, #8
 80a1ca8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80a1cac:	3201      	adds	r2, #1
 80a1cae:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 80a1cb2:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
 80a1cb6:	2b00      	cmp	r3, #0
 80a1cb8:	d041      	beq.n	80a1d3e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a1cba:	4a23      	ldr	r2, [pc, #140]	; (80a1d48 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
    if(color == WHITE) { 
 80a1cbc:	2d01      	cmp	r5, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a1cbe:	5cd2      	ldrb	r2, [r2, r3]
 80a1cc0:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
      *pBuf |= mask;
 80a1cc2:	bf0c      	ite	eq
 80a1cc4:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
 80a1cc6:	4393      	bicne	r3, r2
 80a1cc8:	7023      	strb	r3, [r4, #0]
 80a1cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
 80a1cce:	2a00      	cmp	r2, #0
 80a1cd0:	db35      	blt.n	80a1d3e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a1cd2:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a1cd6:	4294      	cmp	r4, r2
 80a1cd8:	dd31      	ble.n	80a1d3e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
 80a1cda:	2900      	cmp	r1, #0
    w += x;
 80a1cdc:	bfbc      	itt	lt
 80a1cde:	18c9      	addlt	r1, r1, r3
 80a1ce0:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a1ce2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
 80a1ce6:	bfb8      	it	lt
 80a1ce8:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a1cea:	18ce      	adds	r6, r1, r3
 80a1cec:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 80a1cee:	bfc4      	itt	gt
 80a1cf0:	1a63      	subgt	r3, r4, r1
 80a1cf2:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
 80a1cf4:	2b00      	cmp	r3, #0
 80a1cf6:	dd22      	ble.n	80a1d3e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a1cf8:	10d0      	asrs	r0, r2, #3
 80a1cfa:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
 80a1cfe:	4810      	ldr	r0, [pc, #64]	; (80a1d40 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
 80a1d00:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a1d04:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
 80a1d06:	2001      	movs	r0, #1
 80a1d08:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
 80a1d0c:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
 80a1d0e:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
 80a1d10:	d109      	bne.n	80a1d26 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
 80a1d12:	3b01      	subs	r3, #1
 80a1d14:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
 80a1d16:	1c5c      	adds	r4, r3, #1
 80a1d18:	d011      	beq.n	80a1d3e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a1d1a:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a1d1e:	4310      	orrs	r0, r2
 80a1d20:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a1d24:	e7f5      	b.n	80a1d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
 80a1d26:	43d2      	mvns	r2, r2
 80a1d28:	b2d2      	uxtb	r2, r2
 80a1d2a:	3b01      	subs	r3, #1
 80a1d2c:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
 80a1d2e:	1c58      	adds	r0, r3, #1
 80a1d30:	d005      	beq.n	80a1d3e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a1d32:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a1d36:	4010      	ands	r0, r2
 80a1d38:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a1d3c:	e7f5      	b.n	80a1d2a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
 80a1d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1d40:	20000015 	.word	0x20000015
 80a1d44:	2000000d 	.word	0x2000000d
 80a1d48:	20000005 	.word	0x20000005

080a1d4c <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a1d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
 80a1d4e:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a1d50:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
 80a1d54:	2c02      	cmp	r4, #2
 80a1d56:	d008      	beq.n	80a1d6a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
 80a1d58:	2c03      	cmp	r4, #3
 80a1d5a:	d00f      	beq.n	80a1d7c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
 80a1d5c:	2c01      	cmp	r4, #1
 80a1d5e:	d112      	bne.n	80a1d86 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
 80a1d60:	8904      	ldrh	r4, [r0, #8]
 80a1d62:	1ae4      	subs	r4, r4, r3
 80a1d64:	1aa2      	subs	r2, r4, r2
 80a1d66:	b212      	sxth	r2, r2
      break;
 80a1d68:	e06d      	b.n	80a1e46 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 80a1d6a:	8904      	ldrh	r4, [r0, #8]
 80a1d6c:	3c01      	subs	r4, #1
 80a1d6e:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
 80a1d70:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 80a1d72:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
 80a1d74:	1ae4      	subs	r4, r4, r3
 80a1d76:	1aa2      	subs	r2, r4, r2
 80a1d78:	b212      	sxth	r2, r2
      break;
 80a1d7a:	e004      	b.n	80a1d86 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
 80a1d7c:	8944      	ldrh	r4, [r0, #10]
 80a1d7e:	3c01      	subs	r4, #1
 80a1d80:	1a61      	subs	r1, r4, r1
 80a1d82:	b209      	sxth	r1, r1
      break;
 80a1d84:	e05f      	b.n	80a1e46 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 80a1d86:	2900      	cmp	r1, #0
 80a1d88:	db5c      	blt.n	80a1e44 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
 80a1d8a:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a1d8e:	428c      	cmp	r4, r1
 80a1d90:	f340 8091 	ble.w	80a1eb6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
 80a1d94:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 80a1d96:	bfbc      	itt	lt
 80a1d98:	18d2      	addlt	r2, r2, r3
 80a1d9a:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a1d9c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
 80a1da0:	bfb8      	it	lt
 80a1da2:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a1da4:	18d4      	adds	r4, r2, r3
 80a1da6:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
 80a1da8:	bfc4      	itt	gt
 80a1daa:	1a83      	subgt	r3, r0, r2
 80a1dac:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
 80a1dae:	2b00      	cmp	r3, #0
 80a1db0:	f340 8081 	ble.w	80a1eb6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 80a1db4:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a1db6:	4e40      	ldr	r6, [pc, #256]	; (80a1eb8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
 80a1db8:	b2da      	uxtb	r2, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a1dba:	08e3      	lsrs	r3, r4, #3
 80a1dbc:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a1dc0:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a1dc4:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a1dc8:	d017      	beq.n	80a1dfa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
 80a1dca:	f1c4 0408 	rsb	r4, r4, #8
 80a1dce:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a1dd0:	4c3a      	ldr	r4, [pc, #232]	; (80a1ebc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
 80a1dd2:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a1dd4:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
 80a1dd6:	bf3f      	itttt	cc
 80a1dd8:	ebc2 0e00 	rsbcc	lr, r2, r0
 80a1ddc:	24ff      	movcc	r4, #255	; 0xff
 80a1dde:	fa44 f40e 	asrcc.w	r4, r4, lr
 80a1de2:	4027      	andcc	r7, r4
 80a1de4:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
 80a1de6:	2d01      	cmp	r5, #1
      *pBuf |= mask;
 80a1de8:	bf0c      	ite	eq
 80a1dea:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
 80a1dec:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a1dee:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
 80a1df0:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a1df2:	d360      	bcc.n	80a1eb6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
 80a1df4:	1a10      	subs	r0, r2, r0
 80a1df6:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
 80a1df8:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
 80a1dfa:	2a07      	cmp	r2, #7
 80a1dfc:	d917      	bls.n	80a1e2e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
 80a1dfe:	2d01      	cmp	r5, #1
 80a1e00:	bf0c      	ite	eq
 80a1e02:	24ff      	moveq	r4, #255	; 0xff
 80a1e04:	2400      	movne	r4, #0
 80a1e06:	4611      	mov	r1, r2
 80a1e08:	f103 0080 	add.w	r0, r3, #128	; 0x80

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 80a1e0c:	3908      	subs	r1, #8
 80a1e0e:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
 80a1e10:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
 80a1e12:	f800 4c80 	strb.w	r4, [r0, #-128]
 80a1e16:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 80a1e1a:	d8f7      	bhi.n	80a1e0c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
 80a1e1c:	f1a2 0108 	sub.w	r1, r2, #8
 80a1e20:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80a1e24:	3101      	adds	r1, #1
 80a1e26:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
 80a1e2a:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
 80a1e2e:	2a00      	cmp	r2, #0
 80a1e30:	d041      	beq.n	80a1eb6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a1e32:	4923      	ldr	r1, [pc, #140]	; (80a1ec0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
    if(color == WHITE) { 
 80a1e34:	2d01      	cmp	r5, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a1e36:	5c89      	ldrb	r1, [r1, r2]
 80a1e38:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
      *pBuf |= mask;
 80a1e3a:	bf0c      	ite	eq
 80a1e3c:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
 80a1e3e:	438a      	bicne	r2, r1
 80a1e40:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
 80a1e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
 80a1e46:	2900      	cmp	r1, #0
 80a1e48:	db35      	blt.n	80a1eb6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a1e4a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a1e4e:	428c      	cmp	r4, r1
 80a1e50:	dd31      	ble.n	80a1eb6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
 80a1e52:	2a00      	cmp	r2, #0
    w += x;
 80a1e54:	bfbc      	itt	lt
 80a1e56:	18d2      	addlt	r2, r2, r3
 80a1e58:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a1e5a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
 80a1e5e:	bfb8      	it	lt
 80a1e60:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a1e62:	18d6      	adds	r6, r2, r3
 80a1e64:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 80a1e66:	bfc4      	itt	gt
 80a1e68:	1aa3      	subgt	r3, r4, r2
 80a1e6a:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
 80a1e6c:	2b00      	cmp	r3, #0
 80a1e6e:	dd22      	ble.n	80a1eb6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a1e70:	10c8      	asrs	r0, r1, #3
 80a1e72:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
 80a1e76:	4810      	ldr	r0, [pc, #64]	; (80a1eb8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
 80a1e78:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a1e7c:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
 80a1e7e:	2201      	movs	r2, #1
 80a1e80:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
 80a1e84:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
 80a1e86:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
 80a1e88:	d109      	bne.n	80a1e9e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
 80a1e8a:	1e5a      	subs	r2, r3, #1
 80a1e8c:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
 80a1e8e:	1c5c      	adds	r4, r3, #1
 80a1e90:	d011      	beq.n	80a1eb6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a1e92:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a1e96:	430a      	orrs	r2, r1
 80a1e98:	f800 2c01 	strb.w	r2, [r0, #-1]
 80a1e9c:	e7f5      	b.n	80a1e8a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
 80a1e9e:	43c9      	mvns	r1, r1
 80a1ea0:	b2c9      	uxtb	r1, r1
 80a1ea2:	1e5a      	subs	r2, r3, #1
 80a1ea4:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
 80a1ea6:	1c5a      	adds	r2, r3, #1
 80a1ea8:	d005      	beq.n	80a1eb6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a1eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a1eae:	400a      	ands	r2, r1
 80a1eb0:	f800 2c01 	strb.w	r2, [r0, #-1]
 80a1eb4:	e7f5      	b.n	80a1ea2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
 80a1eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1eb8:	20000015 	.word	0x20000015
 80a1ebc:	2000000d 	.word	0x2000000d
 80a1ec0:	20000005 	.word	0x20000005

080a1ec4 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>:
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
 80a1ec4:	b410      	push	{r4}
  
  if(hwSPI) {
 80a1ec6:	b122      	cbz	r2, 80a1ed2 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1+0xe>
    (void)SPI.transfer(d);
 80a1ec8:	4619      	mov	r1, r3
 80a1eca:	4805      	ldr	r0, [pc, #20]	; (80a1ee0 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1+0x1c>)
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}
 80a1ecc:	bc10      	pop	{r4}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
    (void)SPI.transfer(d);
 80a1ece:	f000 be5f 	b.w	80a2b90 <_ZN8SPIClass8transferEh>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
 80a1ed2:	2201      	movs	r2, #1
 80a1ed4:	b2c9      	uxtb	r1, r1
 80a1ed6:	b2c0      	uxtb	r0, r0
  }
}
 80a1ed8:	bc10      	pop	{r4}
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
 80a1eda:	f001 bb17 	b.w	80a350c <shiftOut>
 80a1ede:	bf00      	nop
 80a1ee0:	20000970 	.word	0x20000970

080a1ee4 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a1ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 80a1ee6:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a1ee8:	4606      	mov	r6, r0
 80a1eea:	4614      	mov	r4, r2
 80a1eec:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 80a1eee:	db3f      	blt.n	80a1f70 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a1ef0:	f000 fbb6 	bl	80a2660 <_ZN12Adafruit_GFX5widthEv>
 80a1ef4:	4285      	cmp	r5, r0
 80a1ef6:	da3b      	bge.n	80a1f70 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a1ef8:	2c00      	cmp	r4, #0
 80a1efa:	db39      	blt.n	80a1f70 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a1efc:	4630      	mov	r0, r6
 80a1efe:	f000 fbb2 	bl	80a2666 <_ZN12Adafruit_GFX6heightEv>
 80a1f02:	4284      	cmp	r4, r0
 80a1f04:	da34      	bge.n	80a1f70 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a1f06:	4630      	mov	r0, r6
 80a1f08:	f000 fba8 	bl	80a265c <_ZN12Adafruit_GFX11getRotationEv>
 80a1f0c:	2802      	cmp	r0, #2
 80a1f0e:	d127      	bne.n	80a1f60 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a1f10:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
 80a1f12:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a1f14:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
 80a1f16:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a1f18:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
 80a1f1a:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a1f1c:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
 80a1f1e:	b204      	sxth	r4, r0
 80a1f20:	e006      	b.n	80a1f30 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a1f22:	2801      	cmp	r0, #1
 80a1f24:	d104      	bne.n	80a1f30 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
 80a1f26:	8933      	ldrh	r3, [r6, #8]
 80a1f28:	3b01      	subs	r3, #1
 80a1f2a:	1b1b      	subs	r3, r3, r4
 80a1f2c:	462c      	mov	r4, r5
 80a1f2e:	b21d      	sxth	r5, r3
 80a1f30:	2008      	movs	r0, #8
    break;
  }  

  // x is which column
  if (color == WHITE) 
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a1f32:	fb94 f0f0 	sdiv	r0, r4, r0
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
 80a1f36:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a1f38:	b200      	sxth	r0, r0
 80a1f3a:	4b0e      	ldr	r3, [pc, #56]	; (80a1f74 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
 80a1f3c:	f004 0207 	and.w	r2, r4, #7
 80a1f40:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
 80a1f44:	d104      	bne.n	80a1f50 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a1f46:	4097      	lsls	r7, r2
 80a1f48:	5c5a      	ldrb	r2, [r3, r1]
 80a1f4a:	4317      	orrs	r7, r2
 80a1f4c:	545f      	strb	r7, [r3, r1]
 80a1f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
 80a1f50:	5c58      	ldrb	r0, [r3, r1]
 80a1f52:	2701      	movs	r7, #1
 80a1f54:	fa07 f202 	lsl.w	r2, r7, r2
 80a1f58:	ea20 0202 	bic.w	r2, r0, r2
 80a1f5c:	545a      	strb	r2, [r3, r1]
 80a1f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a1f60:	2803      	cmp	r0, #3
 80a1f62:	d1de      	bne.n	80a1f22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
 80a1f64:	8973      	ldrh	r3, [r6, #10]
 80a1f66:	3b01      	subs	r3, #1
 80a1f68:	1b5b      	subs	r3, r3, r5
 80a1f6a:	4625      	mov	r5, r4
 80a1f6c:	b21c      	sxth	r4, r3
 80a1f6e:	e7df      	b.n	80a1f30 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
 80a1f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1f72:	bf00      	nop
 80a1f74:	20000015 	.word	0x20000015

080a1f78 <_ZN16Adafruit_SSD1306C1Eaaaaa>:
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 80a1f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1f7a:	4604      	mov	r4, r0
 80a1f7c:	461f      	mov	r7, r3
 80a1f7e:	460d      	mov	r5, r1
 80a1f80:	4616      	mov	r6, r2
 80a1f82:	2180      	movs	r1, #128	; 0x80
 80a1f84:	2240      	movs	r2, #64	; 0x40
 80a1f86:	f000 fa7d 	bl	80a2484 <_ZN12Adafruit_GFXC1Ess>
 80a1f8a:	4b09      	ldr	r3, [pc, #36]	; (80a1fb0 <_ZN16Adafruit_SSD1306C1Eaaaaa+0x38>)
  cs = CS;
  rst = RST;
  dc = DC;
 80a1f8c:	77e7      	strb	r7, [r4, #31]
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 80a1f8e:	6023      	str	r3, [r4, #0]
  cs = CS;
 80a1f90:	f99d 301c 	ldrsb.w	r3, [sp, #28]
  rst = RST;
  dc = DC;
  sclk = SCLK;
 80a1f94:	77a6      	strb	r6, [r4, #30]
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
  cs = CS;
 80a1f96:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  rst = RST;
 80a1f9a:	f99d 3018 	ldrsb.w	r3, [sp, #24]
  dc = DC;
  sclk = SCLK;
  sid = SID;
 80a1f9e:	7765      	strb	r5, [r4, #29]
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
  cs = CS;
  rst = RST;
 80a1fa0:	f884 3020 	strb.w	r3, [r4, #32]
  dc = DC;
  sclk = SCLK;
  sid = SID;
  hwSPI = false;
 80a1fa4:	2300      	movs	r3, #0
 80a1fa6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 80a1faa:	4620      	mov	r0, r4
 80a1fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1fae:	bf00      	nop
 80a1fb0:	080a4384 	.word	0x080a4384

080a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 80a1fb4:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
 80a1fb6:	f990 301d 	ldrsb.w	r3, [r0, #29]
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 80a1fba:	4604      	mov	r4, r0
  if (sid != -1)
 80a1fbc:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 80a1fbe:	460d      	mov	r5, r1
  if (sid != -1)
 80a1fc0:	d022      	beq.n	80a2008 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x54>
  {
    // SPI
    digitalWrite(cs, HIGH);
 80a1fc2:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
 80a1fc6:	2101      	movs	r1, #1
 80a1fc8:	b280      	uxth	r0, r0
 80a1fca:	f001 fa86 	bl	80a34da <digitalWrite>
    digitalWrite(dc, LOW);
 80a1fce:	f994 001f 	ldrsb.w	r0, [r4, #31]
 80a1fd2:	2100      	movs	r1, #0
 80a1fd4:	b280      	uxth	r0, r0
 80a1fd6:	f001 fa80 	bl	80a34da <digitalWrite>
    digitalWrite(cs, LOW);
 80a1fda:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a1fde:	2100      	movs	r1, #0
 80a1fe0:	b280      	uxth	r0, r0
 80a1fe2:	f001 fa7a 	bl	80a34da <digitalWrite>
    fastSPIwrite(c);
 80a1fe6:	f994 101e 	ldrsb.w	r1, [r4, #30]
 80a1fea:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a1fee:	462b      	mov	r3, r5
 80a1ff0:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 80a1ff4:	f7ff ff66 	bl	80a1ec4 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>
    digitalWrite(cs, HIGH);
 80a1ff8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a1ffc:	2101      	movs	r1, #1
 80a1ffe:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
 80a2000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
 80a2004:	f001 ba69 	b.w	80a34da <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
 80a2008:	f001 fade 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a200c:	f994 101b 	ldrsb.w	r1, [r4, #27]
 80a2010:	f001 f960 	bl	80a32d4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
 80a2014:	f001 fad8 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a2018:	6803      	ldr	r3, [r0, #0]
 80a201a:	2100      	movs	r1, #0
 80a201c:	689b      	ldr	r3, [r3, #8]
 80a201e:	4798      	blx	r3
    Wire.write(c);
 80a2020:	f001 fad2 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a2024:	6803      	ldr	r3, [r0, #0]
 80a2026:	4629      	mov	r1, r5
 80a2028:	689b      	ldr	r3, [r3, #8]
 80a202a:	4798      	blx	r3
    Wire.endTransmission();
 80a202c:	f001 facc 	bl	80a35c8 <_Z19__fetch_global_Wirev>
  }
}
 80a2030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
 80a2034:	f001 b955 	b.w	80a32e2 <_ZN7TwoWire15endTransmissionEv>

080a2038 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
 80a2038:	b538      	push	{r3, r4, r5, lr}
 80a203a:	4604      	mov	r4, r0
  _vccstate = vccstate;
 80a203c:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
 80a203e:	f990 301d 	ldrsb.w	r3, [r0, #29]
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
 80a2042:	460d      	mov	r5, r1
  _vccstate = vccstate;
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
 80a2044:	3301      	adds	r3, #1
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
 80a2046:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
 80a2048:	d033      	beq.n	80a20b2 <_ZN16Adafruit_SSD13065beginEhh+0x7a>
    pinMode(dc, OUTPUT);
 80a204a:	f990 001f 	ldrsb.w	r0, [r0, #31]
 80a204e:	2101      	movs	r1, #1
 80a2050:	b280      	uxth	r0, r0
 80a2052:	f001 fa31 	bl	80a34b8 <pinMode>
    pinMode(cs, OUTPUT);
 80a2056:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a205a:	2101      	movs	r1, #1
 80a205c:	b280      	uxth	r0, r0
 80a205e:	f001 fa2b 	bl	80a34b8 <pinMode>
    if (!hwSPI){
 80a2062:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80a2066:	b95b      	cbnz	r3, 80a2080 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
 80a2068:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a206c:	2101      	movs	r1, #1
 80a206e:	b280      	uxth	r0, r0
 80a2070:	f001 fa22 	bl	80a34b8 <pinMode>
    	pinMode(sclk, OUTPUT);
 80a2074:	f994 001e 	ldrsb.w	r0, [r4, #30]
 80a2078:	2101      	movs	r1, #1
 80a207a:	b280      	uxth	r0, r0
 80a207c:	f001 fa1c 	bl	80a34b8 <pinMode>
    	}
    if (hwSPI){
 80a2080:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80a2084:	b1cb      	cbz	r3, 80a20ba <_ZN16Adafruit_SSD13065beginEhh+0x82>
        digitalWrite(cs, HIGH);
 80a2086:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a208a:	2101      	movs	r1, #1
 80a208c:	b280      	uxth	r0, r0
 80a208e:	f001 fa24 	bl	80a34da <digitalWrite>
        SPI.setBitOrder(MSBFIRST);
 80a2092:	2101      	movs	r1, #1
 80a2094:	484f      	ldr	r0, [pc, #316]	; (80a21d4 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
 80a2096:	f000 fd1a 	bl	80a2ace <_ZN8SPIClass11setBitOrderEh>
        SPI.setClockDivider(SPI_CLOCK_DIV8);	// 72MHz / 8 = 9Mhz
 80a209a:	2110      	movs	r1, #16
 80a209c:	484d      	ldr	r0, [pc, #308]	; (80a21d4 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
 80a209e:	f000 fd63 	bl	80a2b68 <_ZN8SPIClass15setClockDividerEh>
        SPI.setDataMode(0);
 80a20a2:	2100      	movs	r1, #0
 80a20a4:	484b      	ldr	r0, [pc, #300]	; (80a21d4 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
 80a20a6:	f000 fd15 	bl	80a2ad4 <_ZN8SPIClass11setDataModeEh>
        SPI.begin();	
 80a20aa:	484a      	ldr	r0, [pc, #296]	; (80a21d4 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
 80a20ac:	f000 fd0a 	bl	80a2ac4 <_ZN8SPIClass5beginEv>
 80a20b0:	e003      	b.n	80a20ba <_ZN16Adafruit_SSD13065beginEhh+0x82>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
 80a20b2:	f001 fa89 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a20b6:	f001 f8f5 	bl	80a32a4 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
 80a20ba:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a20be:	2101      	movs	r1, #1
 80a20c0:	b280      	uxth	r0, r0
 80a20c2:	f001 f9f9 	bl	80a34b8 <pinMode>
  digitalWrite(rst, HIGH);
 80a20c6:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a20ca:	2101      	movs	r1, #1
 80a20cc:	b280      	uxth	r0, r0
 80a20ce:	f001 fa04 	bl	80a34da <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
 80a20d2:	2001      	movs	r0, #1
 80a20d4:	f000 fe1e 	bl	80a2d14 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
 80a20d8:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a20dc:	2100      	movs	r1, #0
 80a20de:	b280      	uxth	r0, r0
 80a20e0:	f001 f9fb 	bl	80a34da <digitalWrite>
  // wait 10ms
  delay(10);
 80a20e4:	200a      	movs	r0, #10
 80a20e6:	f000 fe15 	bl	80a2d14 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
 80a20ea:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a20ee:	2101      	movs	r1, #1
 80a20f0:	b280      	uxth	r0, r0
 80a20f2:	f001 f9f2 	bl	80a34da <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 80a20f6:	4620      	mov	r0, r4
 80a20f8:	21ae      	movs	r1, #174	; 0xae
 80a20fa:	f7ff ff5b 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 80a20fe:	4620      	mov	r0, r4
 80a2100:	21d5      	movs	r1, #213	; 0xd5
 80a2102:	f7ff ff57 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
 80a2106:	4620      	mov	r0, r4
 80a2108:	2180      	movs	r1, #128	; 0x80
 80a210a:	f7ff ff53 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 80a210e:	4620      	mov	r0, r4
 80a2110:	21a8      	movs	r1, #168	; 0xa8
 80a2112:	f7ff ff4f 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
 80a2116:	4620      	mov	r0, r4
 80a2118:	213f      	movs	r1, #63	; 0x3f
 80a211a:	f7ff ff4b 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 80a211e:	4620      	mov	r0, r4
 80a2120:	21d3      	movs	r1, #211	; 0xd3
 80a2122:	f7ff ff47 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
 80a2126:	4620      	mov	r0, r4
 80a2128:	2100      	movs	r1, #0
 80a212a:	f7ff ff43 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 80a212e:	4620      	mov	r0, r4
 80a2130:	2140      	movs	r1, #64	; 0x40
 80a2132:	f7ff ff3f 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 80a2136:	218d      	movs	r1, #141	; 0x8d
 80a2138:	4620      	mov	r0, r4
 80a213a:	f7ff ff3b 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 80a213e:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
 80a2140:	bf0c      	ite	eq
 80a2142:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
 80a2144:	2114      	movne	r1, #20
 80a2146:	4620      	mov	r0, r4
 80a2148:	f7ff ff34 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 80a214c:	4620      	mov	r0, r4
 80a214e:	2120      	movs	r1, #32
 80a2150:	f7ff ff30 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
 80a2154:	4620      	mov	r0, r4
 80a2156:	2100      	movs	r1, #0
 80a2158:	f7ff ff2c 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
 80a215c:	4620      	mov	r0, r4
 80a215e:	21a1      	movs	r1, #161	; 0xa1
 80a2160:	f7ff ff28 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
 80a2164:	4620      	mov	r0, r4
 80a2166:	21c8      	movs	r1, #200	; 0xc8
 80a2168:	f7ff ff24 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 80a216c:	4620      	mov	r0, r4
 80a216e:	21da      	movs	r1, #218	; 0xda
 80a2170:	f7ff ff20 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
 80a2174:	4620      	mov	r0, r4
 80a2176:	2112      	movs	r1, #18
 80a2178:	f7ff ff1c 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 80a217c:	2181      	movs	r1, #129	; 0x81
 80a217e:	4620      	mov	r0, r4
 80a2180:	f7ff ff18 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 80a2184:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
 80a2186:	bf0c      	ite	eq
 80a2188:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
 80a218a:	21cf      	movne	r1, #207	; 0xcf
 80a218c:	4620      	mov	r0, r4
 80a218e:	f7ff ff11 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 80a2192:	21d9      	movs	r1, #217	; 0xd9
 80a2194:	4620      	mov	r0, r4
 80a2196:	f7ff ff0d 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 80a219a:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
 80a219c:	bf0c      	ite	eq
 80a219e:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
 80a21a0:	21f1      	movne	r1, #241	; 0xf1
 80a21a2:	4620      	mov	r0, r4
 80a21a4:	f7ff ff06 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 80a21a8:	4620      	mov	r0, r4
 80a21aa:	21db      	movs	r1, #219	; 0xdb
 80a21ac:	f7ff ff02 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
 80a21b0:	4620      	mov	r0, r4
 80a21b2:	2140      	movs	r1, #64	; 0x40
 80a21b4:	f7ff fefe 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 80a21b8:	4620      	mov	r0, r4
 80a21ba:	21a4      	movs	r1, #164	; 0xa4
 80a21bc:	f7ff fefa 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 80a21c0:	4620      	mov	r0, r4
 80a21c2:	21a6      	movs	r1, #166	; 0xa6
 80a21c4:	f7ff fef6 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 80a21c8:	4620      	mov	r0, r4
}
 80a21ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 80a21ce:	21af      	movs	r1, #175	; 0xaf
 80a21d0:	f7ff bef0 	b.w	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
 80a21d4:	20000970 	.word	0x20000970

080a21d8 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
 80a21d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a21dc:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
 80a21de:	2121      	movs	r1, #33	; 0x21
 80a21e0:	f7ff fee8 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
 80a21e4:	2100      	movs	r1, #0
 80a21e6:	4620      	mov	r0, r4
 80a21e8:	f7ff fee4 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
 80a21ec:	217f      	movs	r1, #127	; 0x7f
 80a21ee:	4620      	mov	r0, r4
 80a21f0:	f7ff fee0 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
 80a21f4:	2122      	movs	r1, #34	; 0x22
 80a21f6:	4620      	mov	r0, r4
 80a21f8:	f7ff fedc 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
 80a21fc:	2100      	movs	r1, #0
 80a21fe:	4620      	mov	r0, r4
 80a2200:	f7ff fed8 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
 80a2204:	2107      	movs	r1, #7
 80a2206:	4620      	mov	r0, r4
 80a2208:	f7ff fed4 	bl	80a1fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
 80a220c:	f994 301d 	ldrsb.w	r3, [r4, #29]
 80a2210:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a22c0 <_ZN16Adafruit_SSD13067displayEv+0xe8>
 80a2214:	3301      	adds	r3, #1
 80a2216:	d02e      	beq.n	80a2276 <_ZN16Adafruit_SSD13067displayEv+0x9e>
  {
    // SPI
    digitalWrite(cs, HIGH);
 80a2218:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a221c:	2101      	movs	r1, #1
 80a221e:	b280      	uxth	r0, r0
 80a2220:	f001 f95b 	bl	80a34da <digitalWrite>
    digitalWrite(dc, HIGH);
 80a2224:	f994 001f 	ldrsb.w	r0, [r4, #31]
 80a2228:	2101      	movs	r1, #1
 80a222a:	b280      	uxth	r0, r0
 80a222c:	f001 f955 	bl	80a34da <digitalWrite>
    digitalWrite(cs, LOW);
 80a2230:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a2234:	2100      	movs	r1, #0
 80a2236:	b280      	uxth	r0, r0
 80a2238:	f001 f94f 	bl	80a34da <digitalWrite>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a223c:	2001      	movs	r0, #1
 80a223e:	f000 fa87 	bl	80a2750 <HAL_Delay_Microseconds>
 80a2242:	2500      	movs	r5, #0
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
 80a2244:	f818 3005 	ldrb.w	r3, [r8, r5]
 80a2248:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 80a224c:	f994 101e 	ldrsb.w	r1, [r4, #30]
 80a2250:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a2254:	3501      	adds	r5, #1
 80a2256:	f7ff fe35 	bl	80a1ec4 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
 80a225a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80a225e:	d1f1      	bne.n	80a2244 <_ZN16Adafruit_SSD13067displayEv+0x6c>
 80a2260:	2001      	movs	r0, #1
 80a2262:	f000 fa75 	bl	80a2750 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
 80a2266:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a226a:	2101      	movs	r1, #1
 80a226c:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
 80a226e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
 80a2272:	f001 b932 	b.w	80a34da <digitalWrite>
 80a2276:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
 80a2278:	f001 f9a6 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a227c:	f994 101b 	ldrsb.w	r1, [r4, #27]
 80a2280:	f001 f828 	bl	80a32d4 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
 80a2284:	f001 f9a0 	bl	80a35c8 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a2288:	6803      	ldr	r3, [r0, #0]
 80a228a:	2140      	movs	r1, #64	; 0x40
 80a228c:	689b      	ldr	r3, [r3, #8]
 80a228e:	4798      	blx	r3
 80a2290:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
 80a2292:	f001 f999 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a2296:	19af      	adds	r7, r5, r6
 80a2298:	6803      	ldr	r3, [r0, #0]
 80a229a:	b2bf      	uxth	r7, r7
 80a229c:	689b      	ldr	r3, [r3, #8]
 80a229e:	f818 1007 	ldrb.w	r1, [r8, r7]
 80a22a2:	3601      	adds	r6, #1
 80a22a4:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
 80a22a6:	2e10      	cmp	r6, #16
 80a22a8:	d1f3      	bne.n	80a2292 <_ZN16Adafruit_SSD13067displayEv+0xba>
 80a22aa:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
 80a22ac:	f001 f98c 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a22b0:	b2ad      	uxth	r5, r5
 80a22b2:	f001 f816 	bl	80a32e2 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
 80a22b6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80a22ba:	d1dd      	bne.n	80a2278 <_ZN16Adafruit_SSD13067displayEv+0xa0>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
 80a22bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a22c0:	20000015 	.word	0x20000015

080a22c4 <_ZN16Adafruit_SSD130612clearDisplayEv>:

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
 80a22c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a22c8:	2100      	movs	r1, #0
 80a22ca:	4801      	ldr	r0, [pc, #4]	; (80a22d0 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
 80a22cc:	f001 bf9f 	b.w	80a420e <memset>
 80a22d0:	20000015 	.word	0x20000015

080a22d4 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
 80a22d4:	f000 b9cc 	b.w	80a2670 <HAL_Pin_Map>

080a22d8 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a22d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a22dc:	461e      	mov	r6, r3
 80a22de:	b085      	sub	sp, #20
 80a22e0:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80a22e4:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a22e6:	1a9a      	subs	r2, r3, r2
 80a22e8:	2a00      	cmp	r2, #0
 80a22ea:	bfb8      	it	lt
 80a22ec:	4252      	neglt	r2, r2
 80a22ee:	9200      	str	r2, [sp, #0]
 80a22f0:	1a72      	subs	r2, r6, r1
 80a22f2:	2a00      	cmp	r2, #0
 80a22f4:	bfb8      	it	lt
 80a22f6:	4252      	neglt	r2, r2
 80a22f8:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a22fa:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a22fc:	9a00      	ldr	r2, [sp, #0]
 80a22fe:	9901      	ldr	r1, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a2300:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a2302:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a2304:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a2308:	dd05      	ble.n	80a2316 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
 80a230a:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
 80a230c:	461e      	mov	r6, r3
 80a230e:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a2310:	4622      	mov	r2, r4
    swap(x0, y0);
 80a2312:	462c      	mov	r4, r5
 80a2314:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
 80a2316:	42b4      	cmp	r4, r6
 80a2318:	dd05      	ble.n	80a2326 <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
 80a231a:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
 80a231c:	461d      	mov	r5, r3
 80a231e:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
 80a2320:	4622      	mov	r2, r4
 80a2322:	4634      	mov	r4, r6
 80a2324:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
 80a2326:	1b5a      	subs	r2, r3, r5
 80a2328:	2a00      	cmp	r2, #0
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a232a:	ebc4 0806 	rsb	r8, r4, r6
  dy = abs(y1 - y0);
 80a232e:	bfb8      	it	lt
 80a2330:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a2332:	fa1f f888 	uxth.w	r8, r8
  dy = abs(y1 - y0);
 80a2336:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
 80a2338:	fa0f f788 	sxth.w	r7, r8
 80a233c:	2202      	movs	r2, #2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a233e:	429d      	cmp	r5, r3
 80a2340:	bfb4      	ite	lt
 80a2342:	2301      	movlt	r3, #1
 80a2344:	f04f 33ff 	movge.w	r3, #4294967295

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);

  int16_t err = dx / 2;
 80a2348:	fb97 f7f2 	sdiv	r7, r7, r2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a234c:	9302      	str	r3, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 80a234e:	42b4      	cmp	r4, r6
 80a2350:	dc1f      	bgt.n	80a2392 <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
 80a2352:	9a01      	ldr	r2, [sp, #4]
 80a2354:	9b00      	ldr	r3, [sp, #0]
      drawPixel(y0, x0, color);
    } else {
      drawPixel(x0, y0, color);
 80a2356:	4648      	mov	r0, r9
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
 80a2358:	4293      	cmp	r3, r2
 80a235a:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
 80a235e:	bfc8      	it	gt
 80a2360:	4622      	movgt	r2, r4
 80a2362:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a2366:	bfc8      	it	gt
 80a2368:	4629      	movgt	r1, r5
 80a236a:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
 80a236c:	bfdc      	itt	le
 80a236e:	462a      	movle	r2, r5
 80a2370:	4621      	movle	r1, r4
 80a2372:	47d8      	blx	fp
    }
    err -= dy;
 80a2374:	9b03      	ldr	r3, [sp, #12]
 80a2376:	1aff      	subs	r7, r7, r3
 80a2378:	b2bb      	uxth	r3, r7
 80a237a:	b21f      	sxth	r7, r3
    if (err < 0) {
 80a237c:	2f00      	cmp	r7, #0
 80a237e:	da05      	bge.n	80a238c <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
 80a2380:	9a02      	ldr	r2, [sp, #8]
      err += dx;
 80a2382:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
 80a2386:	4415      	add	r5, r2
 80a2388:	b22d      	sxth	r5, r5
      err += dx;
 80a238a:	b23f      	sxth	r7, r7
 80a238c:	3401      	adds	r4, #1
 80a238e:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
 80a2390:	e7dd      	b.n	80a234e <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
 80a2392:	b005      	add	sp, #20
 80a2394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2398 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a2398:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a239c:	4604      	mov	r4, r0
 80a239e:	4691      	mov	r9, r2
 80a23a0:	460d      	mov	r5, r1
 80a23a2:	4698      	mov	r8, r3
 80a23a4:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 80a23a8:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a23aa:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 80a23ae:	9600      	str	r6, [sp, #0]
 80a23b0:	69ff      	ldr	r7, [r7, #28]
 80a23b2:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 80a23b4:	6823      	ldr	r3, [r4, #0]
 80a23b6:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a23ba:	9600      	str	r6, [sp, #0]
 80a23bc:	444a      	add	r2, r9
 80a23be:	69df      	ldr	r7, [r3, #28]
 80a23c0:	4629      	mov	r1, r5
 80a23c2:	4643      	mov	r3, r8
 80a23c4:	4620      	mov	r0, r4
 80a23c6:	b212      	sxth	r2, r2
 80a23c8:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 80a23ca:	6823      	ldr	r3, [r4, #0]
 80a23cc:	9600      	str	r6, [sp, #0]
 80a23ce:	699f      	ldr	r7, [r3, #24]
 80a23d0:	464a      	mov	r2, r9
 80a23d2:	4653      	mov	r3, sl
 80a23d4:	4629      	mov	r1, r5
 80a23d6:	4620      	mov	r0, r4
 80a23d8:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 80a23da:	6823      	ldr	r3, [r4, #0]
 80a23dc:	f108 31ff 	add.w	r1, r8, #4294967295
 80a23e0:	960a      	str	r6, [sp, #40]	; 0x28
 80a23e2:	4429      	add	r1, r5
 80a23e4:	699d      	ldr	r5, [r3, #24]
 80a23e6:	464a      	mov	r2, r9
 80a23e8:	4653      	mov	r3, sl
 80a23ea:	4620      	mov	r0, r4
 80a23ec:	46ac      	mov	ip, r5
 80a23ee:	b209      	sxth	r1, r1
}
 80a23f0:	b002      	add	sp, #8
 80a23f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
 80a23f6:	4760      	bx	ip

080a23f8 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 80a23f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 80a23fa:	3b01      	subs	r3, #1
 80a23fc:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a2400:	4413      	add	r3, r2
 80a2402:	6804      	ldr	r4, [r0, #0]
 80a2404:	b21b      	sxth	r3, r3
 80a2406:	9300      	str	r3, [sp, #0]
 80a2408:	9501      	str	r5, [sp, #4]
 80a240a:	6964      	ldr	r4, [r4, #20]
 80a240c:	460b      	mov	r3, r1
 80a240e:	47a0      	blx	r4
}
 80a2410:	b003      	add	sp, #12
 80a2412:	bd30      	pop	{r4, r5, pc}

080a2414 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 80a2414:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 80a2416:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a241a:	6804      	ldr	r4, [r0, #0]
 80a241c:	e88d 0024 	stmia.w	sp, {r2, r5}
 80a2420:	3b01      	subs	r3, #1
 80a2422:	440b      	add	r3, r1
 80a2424:	6964      	ldr	r4, [r4, #20]
 80a2426:	b21b      	sxth	r3, r3
 80a2428:	47a0      	blx	r4
}
 80a242a:	b003      	add	sp, #12
 80a242c:	bd30      	pop	{r4, r5, pc}

080a242e <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a242e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a2432:	4605      	mov	r5, r0
 80a2434:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a2436:	460c      	mov	r4, r1
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a2438:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80a243c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a2440:	eb01 0a03 	add.w	sl, r1, r3
 80a2444:	4554      	cmp	r4, sl
 80a2446:	da0b      	bge.n	80a2460 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
 80a2448:	682b      	ldr	r3, [r5, #0]
 80a244a:	f8cd 9000 	str.w	r9, [sp]
 80a244e:	699e      	ldr	r6, [r3, #24]
 80a2450:	4621      	mov	r1, r4
 80a2452:	4643      	mov	r3, r8
 80a2454:	463a      	mov	r2, r7
 80a2456:	4628      	mov	r0, r5
 80a2458:	3401      	adds	r4, #1
 80a245a:	47b0      	blx	r6
 80a245c:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a245e:	e7f1      	b.n	80a2444 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
 80a2460:	b002      	add	sp, #8
 80a2462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a2466 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 80a2466:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 80a2468:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80a246c:	6804      	ldr	r4, [r0, #0]
 80a246e:	9101      	str	r1, [sp, #4]
 80a2470:	9200      	str	r2, [sp, #0]
 80a2472:	2200      	movs	r2, #0
 80a2474:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a2478:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80a247a:	4611      	mov	r1, r2
 80a247c:	47a0      	blx	r4
}
 80a247e:	b002      	add	sp, #8
 80a2480:	bd10      	pop	{r4, pc}

080a2482 <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
 80a2482:	4770      	bx	lr

080a2484 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a2484:	8101      	strh	r1, [r0, #8]
{
  _width    = WIDTH;
 80a2486:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
 80a2488:	f64f 71ff 	movw	r1, #65535	; 0xffff
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 80a248c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
 80a248e:	4d07      	ldr	r5, [pc, #28]	; (80a24ac <_ZN12Adafruit_GFXC1Ess+0x28>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2490:	2400      	movs	r4, #0
 80a2492:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
  _height   = HEIGHT;
 80a2494:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
 80a2496:	2201      	movs	r2, #1
 80a2498:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a249a:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
 80a249c:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
 80a249e:	8204      	strh	r4, [r0, #16]
 80a24a0:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
 80a24a2:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
 80a24a4:	82c1      	strh	r1, [r0, #22]
 80a24a6:	8281      	strh	r1, [r0, #20]
  wrap      = true;
 80a24a8:	7682      	strb	r2, [r0, #26]
}
 80a24aa:	bd30      	pop	{r4, r5, pc}
 80a24ac:	080a43bc 	.word	0x080a43bc

080a24b0 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
 80a24b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a24b4:	b08f      	sub	sp, #60	; 0x3c
 80a24b6:	9106      	str	r1, [sp, #24]
 80a24b8:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 80a24bc:	4604      	mov	r4, r0
 80a24be:	9107      	str	r1, [sp, #28]
 80a24c0:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80a24c4:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 80a24c8:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
 80a24ca:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80a24ce:	9806      	ldr	r0, [sp, #24]
 80a24d0:	4281      	cmp	r1, r0
 80a24d2:	dd7d      	ble.n	80a25d0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
 80a24d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80a24d8:	4291      	cmp	r1, r2
 80a24da:	dd79      	ble.n	80a25d0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
     (y >= _height)           || // Clip bottom
 80a24dc:	2106      	movs	r1, #6
 80a24de:	fb01 0008 	mla	r0, r1, r8, r0
 80a24e2:	2800      	cmp	r0, #0
 80a24e4:	dd74      	ble.n	80a25d0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
     ((x + 6 * size - 1) < 0) || // Clip left
 80a24e6:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
 80a24ea:	2800      	cmp	r0, #0
 80a24ec:	dd70      	ble.n	80a25d0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
 80a24ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80a24f2:	b295      	uxth	r5, r2
 80a24f4:	930c      	str	r3, [sp, #48]	; 0x30
 80a24f6:	f105 0308 	add.w	r3, r5, #8
 80a24fa:	b29b      	uxth	r3, r3
 80a24fc:	9109      	str	r1, [sp, #36]	; 0x24
 80a24fe:	2600      	movs	r6, #0
 80a2500:	930d      	str	r3, [sp, #52]	; 0x34
 80a2502:	462f      	mov	r7, r5
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a2504:	46a9      	mov	r9, r5
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
 80a2506:	2e05      	cmp	r6, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
 80a2508:	bf1f      	itttt	ne
 80a250a:	4b33      	ldrne	r3, [pc, #204]	; (80a25d8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x128>)
 80a250c:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
 80a250e:	199b      	addne	r3, r3, r6
 80a2510:	f813 a002 	ldrbne.w	sl, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a2514:	fa1f f388 	uxth.w	r3, r8
 80a2518:	9304      	str	r3, [sp, #16]
 80a251a:	9904      	ldr	r1, [sp, #16]
 80a251c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80a2520:	b2b2      	uxth	r2, r6
 80a2522:	fb01 3102 	mla	r1, r1, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a2526:	4413      	add	r3, r2
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a2528:	b209      	sxth	r1, r1
 80a252a:	910a      	str	r1, [sp, #40]	; 0x28
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a252c:	b21b      	sxth	r3, r3
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a252e:	fa0f f188 	sxth.w	r1, r8
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
 80a2532:	bf08      	it	eq
 80a2534:	f04f 0a00 	moveq.w	sl, #0
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a2538:	9505      	str	r5, [sp, #20]
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a253a:	9103      	str	r1, [sp, #12]
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a253c:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
 80a253e:	f01a 0f01 	tst.w	sl, #1
 80a2542:	d011      	beq.n	80a2568 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb8>
        if (size == 1) // default size
 80a2544:	f1b8 0f01 	cmp.w	r8, #1
 80a2548:	6823      	ldr	r3, [r4, #0]
 80a254a:	d103      	bne.n	80a2554 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa4>
          drawPixel(x+i, y+j, color);
 80a254c:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a2550:	9b07      	ldr	r3, [sp, #28]
 80a2552:	e014      	b.n	80a257e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a2554:	9a07      	ldr	r2, [sp, #28]
 80a2556:	9201      	str	r2, [sp, #4]
 80a2558:	9a03      	ldr	r2, [sp, #12]
 80a255a:	9200      	str	r2, [sp, #0]
 80a255c:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a2560:	4613      	mov	r3, r2
 80a2562:	fa0f f289 	sxth.w	r2, r9
 80a2566:	e018      	b.n	80a259a <_ZN12Adafruit_GFX8drawCharEsshtth+0xea>
        } 
      } else if (bg != color) {
 80a2568:	9b07      	ldr	r3, [sp, #28]
 80a256a:	9a08      	ldr	r2, [sp, #32]
 80a256c:	4293      	cmp	r3, r2
 80a256e:	d017      	beq.n	80a25a0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf0>
        if (size == 1) // default size
 80a2570:	f1b8 0f01 	cmp.w	r8, #1
 80a2574:	6823      	ldr	r3, [r4, #0]
 80a2576:	d107      	bne.n	80a2588 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, bg);
 80a2578:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a257c:	4613      	mov	r3, r2
 80a257e:	b23a      	sxth	r2, r7
 80a2580:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80a2582:	4620      	mov	r0, r4
 80a2584:	47d8      	blx	fp
 80a2586:	e00b      	b.n	80a25a0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf0>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a2588:	9a08      	ldr	r2, [sp, #32]
 80a258a:	9201      	str	r2, [sp, #4]
 80a258c:	9a03      	ldr	r2, [sp, #12]
 80a258e:	9200      	str	r2, [sp, #0]
 80a2590:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a2594:	4613      	mov	r3, r2
 80a2596:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80a259a:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a259c:	4620      	mov	r0, r4
 80a259e:	47d8      	blx	fp
 80a25a0:	9b04      	ldr	r3, [sp, #16]
 80a25a2:	9a04      	ldr	r2, [sp, #16]
 80a25a4:	4499      	add	r9, r3
 80a25a6:	9b05      	ldr	r3, [sp, #20]
 80a25a8:	3701      	adds	r7, #1
 80a25aa:	4413      	add	r3, r2
 80a25ac:	b29b      	uxth	r3, r3
 80a25ae:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 80a25b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a25b2:	b2bf      	uxth	r7, r7
 80a25b4:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
 80a25b6:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 80a25ba:	fa1f f989 	uxth.w	r9, r9
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 80a25be:	d1be      	bne.n	80a253e <_ZN12Adafruit_GFX8drawCharEsshtth+0x8e>
 80a25c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
 80a25c2:	3601      	adds	r6, #1
 80a25c4:	3b01      	subs	r3, #1
 80a25c6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a25ca:	b276      	sxtb	r6, r6
 80a25cc:	9309      	str	r3, [sp, #36]	; 0x24
 80a25ce:	d198      	bne.n	80a2502 <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
 80a25d0:	b00f      	add	sp, #60	; 0x3c
 80a25d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a25d6:	bf00      	nop
 80a25d8:	080a43ec 	.word	0x080a43ec

080a25dc <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a25dc:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
 80a25de:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a25e0:	b085      	sub	sp, #20
 80a25e2:	4604      	mov	r4, r0
 80a25e4:	460b      	mov	r3, r1

  if (c == '\n') {
 80a25e6:	d104      	bne.n	80a25f2 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
 80a25e8:	7e02      	ldrb	r2, [r0, #24]
 80a25ea:	8a43      	ldrh	r3, [r0, #18]
 80a25ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a25f0:	e023      	b.n	80a263a <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
 80a25f2:	290d      	cmp	r1, #13
 80a25f4:	d024      	beq.n	80a2640 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80a25f6:	7e05      	ldrb	r5, [r0, #24]
 80a25f8:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 80a25fc:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 80a2600:	9502      	str	r5, [sp, #8]
 80a2602:	8ac5      	ldrh	r5, [r0, #22]
 80a2604:	9501      	str	r5, [sp, #4]
 80a2606:	8a85      	ldrh	r5, [r0, #20]
 80a2608:	9500      	str	r5, [sp, #0]
 80a260a:	f7ff ff51 	bl	80a24b0 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
 80a260e:	7e22      	ldrb	r2, [r4, #24]
 80a2610:	8a23      	ldrh	r3, [r4, #16]
 80a2612:	b291      	uxth	r1, r2
 80a2614:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80a2618:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80a261c:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
 80a261e:	b21b      	sxth	r3, r3
 80a2620:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80a2622:	b168      	cbz	r0, 80a2640 <_ZN12Adafruit_GFX5writeEh+0x64>
 80a2624:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80a2628:	f06f 0505 	mvn.w	r5, #5
 80a262c:	fb05 0202 	mla	r2, r5, r2, r0
 80a2630:	4293      	cmp	r3, r2
 80a2632:	dd05      	ble.n	80a2640 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
 80a2634:	8a63      	ldrh	r3, [r4, #18]
 80a2636:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80a263a:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
 80a263c:	2300      	movs	r3, #0
 80a263e:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
 80a2640:	2001      	movs	r0, #1
 80a2642:	b005      	add	sp, #20
 80a2644:	bd30      	pop	{r4, r5, pc}

080a2646 <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
 80a2646:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
 80a2648:	8242      	strh	r2, [r0, #18]
 80a264a:	4770      	bx	lr

080a264c <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
 80a264c:	2900      	cmp	r1, #0
 80a264e:	bf08      	it	eq
 80a2650:	2101      	moveq	r1, #1
 80a2652:	7601      	strb	r1, [r0, #24]
 80a2654:	4770      	bx	lr

080a2656 <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
 80a2656:	82c1      	strh	r1, [r0, #22]
 80a2658:	8281      	strh	r1, [r0, #20]
 80a265a:	4770      	bx	lr

080a265c <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
 80a265c:	7e40      	ldrb	r0, [r0, #25]
 80a265e:	4770      	bx	lr

080a2660 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
 80a2660:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80a2664:	4770      	bx	lr

080a2666 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
 80a2666:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80a266a:	4770      	bx	lr

080a266c <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a266c:	f000 b800 	b.w	80a2670 <HAL_Pin_Map>

080a2670 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a2670:	b508      	push	{r3, lr}
 80a2672:	4b02      	ldr	r3, [pc, #8]	; (80a267c <HAL_Pin_Map+0xc>)
 80a2674:	681b      	ldr	r3, [r3, #0]
 80a2676:	681b      	ldr	r3, [r3, #0]
 80a2678:	9301      	str	r3, [sp, #4]
 80a267a:	bd08      	pop	{r3, pc}
 80a267c:	080601b0 	.word	0x080601b0

080a2680 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a2680:	b508      	push	{r3, lr}
 80a2682:	4b02      	ldr	r3, [pc, #8]	; (80a268c <HAL_Validate_Pin_Function+0xc>)
 80a2684:	681b      	ldr	r3, [r3, #0]
 80a2686:	685b      	ldr	r3, [r3, #4]
 80a2688:	9301      	str	r3, [sp, #4]
 80a268a:	bd08      	pop	{r3, pc}
 80a268c:	080601b0 	.word	0x080601b0

080a2690 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a2690:	b508      	push	{r3, lr}
 80a2692:	4b02      	ldr	r3, [pc, #8]	; (80a269c <HAL_Pin_Mode+0xc>)
 80a2694:	681b      	ldr	r3, [r3, #0]
 80a2696:	689b      	ldr	r3, [r3, #8]
 80a2698:	9301      	str	r3, [sp, #4]
 80a269a:	bd08      	pop	{r3, pc}
 80a269c:	080601b0 	.word	0x080601b0

080a26a0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a26a0:	b508      	push	{r3, lr}
 80a26a2:	4b02      	ldr	r3, [pc, #8]	; (80a26ac <HAL_Get_Pin_Mode+0xc>)
 80a26a4:	681b      	ldr	r3, [r3, #0]
 80a26a6:	68db      	ldr	r3, [r3, #12]
 80a26a8:	9301      	str	r3, [sp, #4]
 80a26aa:	bd08      	pop	{r3, pc}
 80a26ac:	080601b0 	.word	0x080601b0

080a26b0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a26b0:	b508      	push	{r3, lr}
 80a26b2:	4b02      	ldr	r3, [pc, #8]	; (80a26bc <HAL_GPIO_Write+0xc>)
 80a26b4:	681b      	ldr	r3, [r3, #0]
 80a26b6:	691b      	ldr	r3, [r3, #16]
 80a26b8:	9301      	str	r3, [sp, #4]
 80a26ba:	bd08      	pop	{r3, pc}
 80a26bc:	080601b0 	.word	0x080601b0

080a26c0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a26c0:	b508      	push	{r3, lr}
 80a26c2:	4b02      	ldr	r3, [pc, #8]	; (80a26cc <HAL_SPI_Begin+0xc>)
 80a26c4:	681b      	ldr	r3, [r3, #0]
 80a26c6:	681b      	ldr	r3, [r3, #0]
 80a26c8:	9301      	str	r3, [sp, #4]
 80a26ca:	bd08      	pop	{r3, pc}
 80a26cc:	080601b4 	.word	0x080601b4

080a26d0 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a26d0:	b508      	push	{r3, lr}
 80a26d2:	4b02      	ldr	r3, [pc, #8]	; (80a26dc <HAL_SPI_Set_Bit_Order+0xc>)
 80a26d4:	681b      	ldr	r3, [r3, #0]
 80a26d6:	689b      	ldr	r3, [r3, #8]
 80a26d8:	9301      	str	r3, [sp, #4]
 80a26da:	bd08      	pop	{r3, pc}
 80a26dc:	080601b4 	.word	0x080601b4

080a26e0 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a26e0:	b508      	push	{r3, lr}
 80a26e2:	4b02      	ldr	r3, [pc, #8]	; (80a26ec <HAL_SPI_Set_Data_Mode+0xc>)
 80a26e4:	681b      	ldr	r3, [r3, #0]
 80a26e6:	68db      	ldr	r3, [r3, #12]
 80a26e8:	9301      	str	r3, [sp, #4]
 80a26ea:	bd08      	pop	{r3, pc}
 80a26ec:	080601b4 	.word	0x080601b4

080a26f0 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a26f0:	b508      	push	{r3, lr}
 80a26f2:	4b02      	ldr	r3, [pc, #8]	; (80a26fc <HAL_SPI_Set_Clock_Divider+0xc>)
 80a26f4:	681b      	ldr	r3, [r3, #0]
 80a26f6:	691b      	ldr	r3, [r3, #16]
 80a26f8:	9301      	str	r3, [sp, #4]
 80a26fa:	bd08      	pop	{r3, pc}
 80a26fc:	080601b4 	.word	0x080601b4

080a2700 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a2700:	b508      	push	{r3, lr}
 80a2702:	4b02      	ldr	r3, [pc, #8]	; (80a270c <HAL_SPI_Send_Receive_Data+0xc>)
 80a2704:	681b      	ldr	r3, [r3, #0]
 80a2706:	695b      	ldr	r3, [r3, #20]
 80a2708:	9301      	str	r3, [sp, #4]
 80a270a:	bd08      	pop	{r3, pc}
 80a270c:	080601b4 	.word	0x080601b4

080a2710 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a2710:	b508      	push	{r3, lr}
 80a2712:	4b02      	ldr	r3, [pc, #8]	; (80a271c <HAL_SPI_Init+0xc>)
 80a2714:	681b      	ldr	r3, [r3, #0]
 80a2716:	69db      	ldr	r3, [r3, #28]
 80a2718:	9301      	str	r3, [sp, #4]
 80a271a:	bd08      	pop	{r3, pc}
 80a271c:	080601b4 	.word	0x080601b4

080a2720 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a2720:	b508      	push	{r3, lr}
 80a2722:	4b02      	ldr	r3, [pc, #8]	; (80a272c <HAL_SPI_Is_Enabled+0xc>)
 80a2724:	681b      	ldr	r3, [r3, #0]
 80a2726:	6a1b      	ldr	r3, [r3, #32]
 80a2728:	9301      	str	r3, [sp, #4]
 80a272a:	bd08      	pop	{r3, pc}
 80a272c:	080601b4 	.word	0x080601b4

080a2730 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a2730:	b508      	push	{r3, lr}
 80a2732:	4b02      	ldr	r3, [pc, #8]	; (80a273c <HAL_SPI_Info+0xc>)
 80a2734:	681b      	ldr	r3, [r3, #0]
 80a2736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2738:	9301      	str	r3, [sp, #4]
 80a273a:	bd08      	pop	{r3, pc}
 80a273c:	080601b4 	.word	0x080601b4

080a2740 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a2740:	b508      	push	{r3, lr}
 80a2742:	4b02      	ldr	r3, [pc, #8]	; (80a274c <HAL_RNG_GetRandomNumber+0xc>)
 80a2744:	681b      	ldr	r3, [r3, #0]
 80a2746:	685b      	ldr	r3, [r3, #4]
 80a2748:	9301      	str	r3, [sp, #4]
 80a274a:	bd08      	pop	{r3, pc}
 80a274c:	0806019c 	.word	0x0806019c

080a2750 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a2750:	b508      	push	{r3, lr}
 80a2752:	4b02      	ldr	r3, [pc, #8]	; (80a275c <HAL_Delay_Microseconds+0xc>)
 80a2754:	681b      	ldr	r3, [r3, #0]
 80a2756:	68db      	ldr	r3, [r3, #12]
 80a2758:	9301      	str	r3, [sp, #4]
 80a275a:	bd08      	pop	{r3, pc}
 80a275c:	0806019c 	.word	0x0806019c

080a2760 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a2760:	b508      	push	{r3, lr}
 80a2762:	4b02      	ldr	r3, [pc, #8]	; (80a276c <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a2764:	681b      	ldr	r3, [r3, #0]
 80a2766:	691b      	ldr	r3, [r3, #16]
 80a2768:	9301      	str	r3, [sp, #4]
 80a276a:	bd08      	pop	{r3, pc}
 80a276c:	0806019c 	.word	0x0806019c

080a2770 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a2770:	b508      	push	{r3, lr}
 80a2772:	4b02      	ldr	r3, [pc, #8]	; (80a277c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a2774:	681b      	ldr	r3, [r3, #0]
 80a2776:	695b      	ldr	r3, [r3, #20]
 80a2778:	9301      	str	r3, [sp, #4]
 80a277a:	bd08      	pop	{r3, pc}
 80a277c:	0806019c 	.word	0x0806019c

080a2780 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a2780:	b508      	push	{r3, lr}
 80a2782:	4b02      	ldr	r3, [pc, #8]	; (80a278c <os_mutex_create+0xc>)
 80a2784:	681b      	ldr	r3, [r3, #0]
 80a2786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2788:	9301      	str	r3, [sp, #4]
 80a278a:	bd08      	pop	{r3, pc}
 80a278c:	080601d0 	.word	0x080601d0

080a2790 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a2790:	b508      	push	{r3, lr}
 80a2792:	4b02      	ldr	r3, [pc, #8]	; (80a279c <HAL_USART_Init+0xc>)
 80a2794:	681b      	ldr	r3, [r3, #0]
 80a2796:	699b      	ldr	r3, [r3, #24]
 80a2798:	9301      	str	r3, [sp, #4]
 80a279a:	bd08      	pop	{r3, pc}
 80a279c:	080601c4 	.word	0x080601c4

080a27a0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a27a0:	b508      	push	{r3, lr}
 80a27a2:	4b02      	ldr	r3, [pc, #8]	; (80a27ac <HAL_USART_Write_Data+0xc>)
 80a27a4:	681b      	ldr	r3, [r3, #0]
 80a27a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a27a8:	9301      	str	r3, [sp, #4]
 80a27aa:	bd08      	pop	{r3, pc}
 80a27ac:	080601c4 	.word	0x080601c4

080a27b0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a27b0:	b508      	push	{r3, lr}
 80a27b2:	4b02      	ldr	r3, [pc, #8]	; (80a27bc <HAL_USART_Available_Data+0xc>)
 80a27b4:	681b      	ldr	r3, [r3, #0]
 80a27b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a27b8:	9301      	str	r3, [sp, #4]
 80a27ba:	bd08      	pop	{r3, pc}
 80a27bc:	080601c4 	.word	0x080601c4

080a27c0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a27c0:	b508      	push	{r3, lr}
 80a27c2:	4b02      	ldr	r3, [pc, #8]	; (80a27cc <HAL_USART_Read_Data+0xc>)
 80a27c4:	681b      	ldr	r3, [r3, #0]
 80a27c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a27c8:	9301      	str	r3, [sp, #4]
 80a27ca:	bd08      	pop	{r3, pc}
 80a27cc:	080601c4 	.word	0x080601c4

080a27d0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a27d0:	b508      	push	{r3, lr}
 80a27d2:	4b02      	ldr	r3, [pc, #8]	; (80a27dc <HAL_USART_Peek_Data+0xc>)
 80a27d4:	681b      	ldr	r3, [r3, #0]
 80a27d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a27d8:	9301      	str	r3, [sp, #4]
 80a27da:	bd08      	pop	{r3, pc}
 80a27dc:	080601c4 	.word	0x080601c4

080a27e0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a27e0:	b508      	push	{r3, lr}
 80a27e2:	4b02      	ldr	r3, [pc, #8]	; (80a27ec <HAL_USART_Flush_Data+0xc>)
 80a27e4:	681b      	ldr	r3, [r3, #0]
 80a27e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a27e8:	9301      	str	r3, [sp, #4]
 80a27ea:	bd08      	pop	{r3, pc}
 80a27ec:	080601c4 	.word	0x080601c4

080a27f0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a27f0:	b508      	push	{r3, lr}
 80a27f2:	4b02      	ldr	r3, [pc, #8]	; (80a27fc <HAL_USART_Is_Enabled+0xc>)
 80a27f4:	681b      	ldr	r3, [r3, #0]
 80a27f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a27f8:	9301      	str	r3, [sp, #4]
 80a27fa:	bd08      	pop	{r3, pc}
 80a27fc:	080601c4 	.word	0x080601c4

080a2800 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a2800:	b508      	push	{r3, lr}
 80a2802:	4b02      	ldr	r3, [pc, #8]	; (80a280c <HAL_USART_Available_Data_For_Write+0xc>)
 80a2804:	681b      	ldr	r3, [r3, #0]
 80a2806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2808:	9301      	str	r3, [sp, #4]
 80a280a:	bd08      	pop	{r3, pc}
 80a280c:	080601c4 	.word	0x080601c4

080a2810 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a2810:	b508      	push	{r3, lr}
 80a2812:	4b02      	ldr	r3, [pc, #8]	; (80a281c <HAL_I2C_Begin+0xc>)
 80a2814:	681b      	ldr	r3, [r3, #0]
 80a2816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2818:	9301      	str	r3, [sp, #4]
 80a281a:	bd08      	pop	{r3, pc}
 80a281c:	080601ac 	.word	0x080601ac

080a2820 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a2820:	b508      	push	{r3, lr}
 80a2822:	4b02      	ldr	r3, [pc, #8]	; (80a282c <HAL_I2C_Request_Data+0xc>)
 80a2824:	681b      	ldr	r3, [r3, #0]
 80a2826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2828:	9301      	str	r3, [sp, #4]
 80a282a:	bd08      	pop	{r3, pc}
 80a282c:	080601ac 	.word	0x080601ac

080a2830 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a2830:	b508      	push	{r3, lr}
 80a2832:	4b02      	ldr	r3, [pc, #8]	; (80a283c <HAL_I2C_Begin_Transmission+0xc>)
 80a2834:	681b      	ldr	r3, [r3, #0]
 80a2836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2838:	9301      	str	r3, [sp, #4]
 80a283a:	bd08      	pop	{r3, pc}
 80a283c:	080601ac 	.word	0x080601ac

080a2840 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a2840:	b508      	push	{r3, lr}
 80a2842:	4b02      	ldr	r3, [pc, #8]	; (80a284c <HAL_I2C_End_Transmission+0xc>)
 80a2844:	681b      	ldr	r3, [r3, #0]
 80a2846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2848:	9301      	str	r3, [sp, #4]
 80a284a:	bd08      	pop	{r3, pc}
 80a284c:	080601ac 	.word	0x080601ac

080a2850 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a2850:	b508      	push	{r3, lr}
 80a2852:	4b02      	ldr	r3, [pc, #8]	; (80a285c <HAL_I2C_Write_Data+0xc>)
 80a2854:	681b      	ldr	r3, [r3, #0]
 80a2856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2858:	9301      	str	r3, [sp, #4]
 80a285a:	bd08      	pop	{r3, pc}
 80a285c:	080601ac 	.word	0x080601ac

080a2860 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a2860:	b508      	push	{r3, lr}
 80a2862:	4b02      	ldr	r3, [pc, #8]	; (80a286c <HAL_I2C_Available_Data+0xc>)
 80a2864:	681b      	ldr	r3, [r3, #0]
 80a2866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2868:	9301      	str	r3, [sp, #4]
 80a286a:	bd08      	pop	{r3, pc}
 80a286c:	080601ac 	.word	0x080601ac

080a2870 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a2870:	b508      	push	{r3, lr}
 80a2872:	4b02      	ldr	r3, [pc, #8]	; (80a287c <HAL_I2C_Read_Data+0xc>)
 80a2874:	681b      	ldr	r3, [r3, #0]
 80a2876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2878:	9301      	str	r3, [sp, #4]
 80a287a:	bd08      	pop	{r3, pc}
 80a287c:	080601ac 	.word	0x080601ac

080a2880 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a2880:	b508      	push	{r3, lr}
 80a2882:	4b02      	ldr	r3, [pc, #8]	; (80a288c <HAL_I2C_Peek_Data+0xc>)
 80a2884:	681b      	ldr	r3, [r3, #0]
 80a2886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2888:	9301      	str	r3, [sp, #4]
 80a288a:	bd08      	pop	{r3, pc}
 80a288c:	080601ac 	.word	0x080601ac

080a2890 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a2890:	b508      	push	{r3, lr}
 80a2892:	4b02      	ldr	r3, [pc, #8]	; (80a289c <HAL_I2C_Flush_Data+0xc>)
 80a2894:	681b      	ldr	r3, [r3, #0]
 80a2896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2898:	9301      	str	r3, [sp, #4]
 80a289a:	bd08      	pop	{r3, pc}
 80a289c:	080601ac 	.word	0x080601ac

080a28a0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a28a0:	b508      	push	{r3, lr}
 80a28a2:	4b02      	ldr	r3, [pc, #8]	; (80a28ac <HAL_I2C_Is_Enabled+0xc>)
 80a28a4:	681b      	ldr	r3, [r3, #0]
 80a28a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a28a8:	9301      	str	r3, [sp, #4]
 80a28aa:	bd08      	pop	{r3, pc}
 80a28ac:	080601ac 	.word	0x080601ac

080a28b0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a28b0:	b508      	push	{r3, lr}
 80a28b2:	4b03      	ldr	r3, [pc, #12]	; (80a28c0 <HAL_I2C_Init+0x10>)
 80a28b4:	681b      	ldr	r3, [r3, #0]
 80a28b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a28ba:	9301      	str	r3, [sp, #4]
 80a28bc:	bd08      	pop	{r3, pc}
 80a28be:	0000      	.short	0x0000
 80a28c0:	080601ac 	.word	0x080601ac

080a28c4 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
 80a28c4:	b508      	push	{r3, lr}
 80a28c6:	4b02      	ldr	r3, [pc, #8]	; (80a28d0 <HAL_Tone_Start+0xc>)
 80a28c8:	681b      	ldr	r3, [r3, #0]
 80a28ca:	681b      	ldr	r3, [r3, #0]
 80a28cc:	9301      	str	r3, [sp, #4]
 80a28ce:	bd08      	pop	{r3, pc}
 80a28d0:	080601a8 	.word	0x080601a8

080a28d4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a28d4:	b508      	push	{r3, lr}
 80a28d6:	4b02      	ldr	r3, [pc, #8]	; (80a28e0 <HAL_USB_USART_Init+0xc>)
 80a28d8:	681b      	ldr	r3, [r3, #0]
 80a28da:	681b      	ldr	r3, [r3, #0]
 80a28dc:	9301      	str	r3, [sp, #4]
 80a28de:	bd08      	pop	{r3, pc}
 80a28e0:	080601d8 	.word	0x080601d8

080a28e4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a28e4:	b508      	push	{r3, lr}
 80a28e6:	4b02      	ldr	r3, [pc, #8]	; (80a28f0 <HAL_USB_USART_Begin+0xc>)
 80a28e8:	681b      	ldr	r3, [r3, #0]
 80a28ea:	685b      	ldr	r3, [r3, #4]
 80a28ec:	9301      	str	r3, [sp, #4]
 80a28ee:	bd08      	pop	{r3, pc}
 80a28f0:	080601d8 	.word	0x080601d8

080a28f4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a28f4:	b508      	push	{r3, lr}
 80a28f6:	4b02      	ldr	r3, [pc, #8]	; (80a2900 <HAL_USB_USART_Available_Data+0xc>)
 80a28f8:	681b      	ldr	r3, [r3, #0]
 80a28fa:	691b      	ldr	r3, [r3, #16]
 80a28fc:	9301      	str	r3, [sp, #4]
 80a28fe:	bd08      	pop	{r3, pc}
 80a2900:	080601d8 	.word	0x080601d8

080a2904 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2904:	b508      	push	{r3, lr}
 80a2906:	4b02      	ldr	r3, [pc, #8]	; (80a2910 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2908:	681b      	ldr	r3, [r3, #0]
 80a290a:	695b      	ldr	r3, [r3, #20]
 80a290c:	9301      	str	r3, [sp, #4]
 80a290e:	bd08      	pop	{r3, pc}
 80a2910:	080601d8 	.word	0x080601d8

080a2914 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2914:	b508      	push	{r3, lr}
 80a2916:	4b02      	ldr	r3, [pc, #8]	; (80a2920 <HAL_USB_USART_Receive_Data+0xc>)
 80a2918:	681b      	ldr	r3, [r3, #0]
 80a291a:	699b      	ldr	r3, [r3, #24]
 80a291c:	9301      	str	r3, [sp, #4]
 80a291e:	bd08      	pop	{r3, pc}
 80a2920:	080601d8 	.word	0x080601d8

080a2924 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2924:	b508      	push	{r3, lr}
 80a2926:	4b02      	ldr	r3, [pc, #8]	; (80a2930 <HAL_USB_USART_Send_Data+0xc>)
 80a2928:	681b      	ldr	r3, [r3, #0]
 80a292a:	69db      	ldr	r3, [r3, #28]
 80a292c:	9301      	str	r3, [sp, #4]
 80a292e:	bd08      	pop	{r3, pc}
 80a2930:	080601d8 	.word	0x080601d8

080a2934 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a2934:	b508      	push	{r3, lr}
 80a2936:	4b02      	ldr	r3, [pc, #8]	; (80a2940 <HAL_USB_USART_Flush_Data+0xc>)
 80a2938:	681b      	ldr	r3, [r3, #0]
 80a293a:	6a1b      	ldr	r3, [r3, #32]
 80a293c:	9301      	str	r3, [sp, #4]
 80a293e:	bd08      	pop	{r3, pc}
 80a2940:	080601d8 	.word	0x080601d8

080a2944 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a2944:	b508      	push	{r3, lr}
 80a2946:	4b02      	ldr	r3, [pc, #8]	; (80a2950 <inet_gethostbyname+0xc>)
 80a2948:	681b      	ldr	r3, [r3, #0]
 80a294a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a294c:	9301      	str	r3, [sp, #4]
 80a294e:	bd08      	pop	{r3, pc}
 80a2950:	080601c0 	.word	0x080601c0

080a2954 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a2954:	b508      	push	{r3, lr}
 80a2956:	4b02      	ldr	r3, [pc, #8]	; (80a2960 <panic_+0xc>)
 80a2958:	681b      	ldr	r3, [r3, #0]
 80a295a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a295c:	9301      	str	r3, [sp, #4]
 80a295e:	bd08      	pop	{r3, pc}
 80a2960:	080201a8 	.word	0x080201a8

080a2964 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2964:	b508      	push	{r3, lr}
 80a2966:	4b02      	ldr	r3, [pc, #8]	; (80a2970 <set_system_mode+0xc>)
 80a2968:	681b      	ldr	r3, [r3, #0]
 80a296a:	685b      	ldr	r3, [r3, #4]
 80a296c:	9301      	str	r3, [sp, #4]
 80a296e:	bd08      	pop	{r3, pc}
 80a2970:	080601a4 	.word	0x080601a4

080a2974 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2974:	b508      	push	{r3, lr}
 80a2976:	4b02      	ldr	r3, [pc, #8]	; (80a2980 <system_delay_ms+0xc>)
 80a2978:	681b      	ldr	r3, [r3, #0]
 80a297a:	695b      	ldr	r3, [r3, #20]
 80a297c:	9301      	str	r3, [sp, #4]
 80a297e:	bd08      	pop	{r3, pc}
 80a2980:	080601a4 	.word	0x080601a4

080a2984 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2984:	b508      	push	{r3, lr}
 80a2986:	4b03      	ldr	r3, [pc, #12]	; (80a2994 <system_ctrl_set_app_request_handler+0x10>)
 80a2988:	681b      	ldr	r3, [r3, #0]
 80a298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a298e:	9301      	str	r3, [sp, #4]
 80a2990:	bd08      	pop	{r3, pc}
 80a2992:	0000      	.short	0x0000
 80a2994:	080601a4 	.word	0x080601a4

080a2998 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2998:	b508      	push	{r3, lr}
 80a299a:	4b03      	ldr	r3, [pc, #12]	; (80a29a8 <system_ctrl_set_result+0x10>)
 80a299c:	681b      	ldr	r3, [r3, #0]
 80a299e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a29a2:	9301      	str	r3, [sp, #4]
 80a29a4:	bd08      	pop	{r3, pc}
 80a29a6:	0000      	.short	0x0000
 80a29a8:	080601a4 	.word	0x080601a4

080a29ac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a29ac:	b508      	push	{r3, lr}
 80a29ae:	4b02      	ldr	r3, [pc, #8]	; (80a29b8 <network_connect+0xc>)
 80a29b0:	681b      	ldr	r3, [r3, #0]
 80a29b2:	685b      	ldr	r3, [r3, #4]
 80a29b4:	9301      	str	r3, [sp, #4]
 80a29b6:	bd08      	pop	{r3, pc}
 80a29b8:	080601c8 	.word	0x080601c8

080a29bc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a29bc:	b508      	push	{r3, lr}
 80a29be:	4b02      	ldr	r3, [pc, #8]	; (80a29c8 <network_connecting+0xc>)
 80a29c0:	681b      	ldr	r3, [r3, #0]
 80a29c2:	689b      	ldr	r3, [r3, #8]
 80a29c4:	9301      	str	r3, [sp, #4]
 80a29c6:	bd08      	pop	{r3, pc}
 80a29c8:	080601c8 	.word	0x080601c8

080a29cc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a29cc:	b508      	push	{r3, lr}
 80a29ce:	4b02      	ldr	r3, [pc, #8]	; (80a29d8 <network_disconnect+0xc>)
 80a29d0:	681b      	ldr	r3, [r3, #0]
 80a29d2:	68db      	ldr	r3, [r3, #12]
 80a29d4:	9301      	str	r3, [sp, #4]
 80a29d6:	bd08      	pop	{r3, pc}
 80a29d8:	080601c8 	.word	0x080601c8

080a29dc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a29dc:	b508      	push	{r3, lr}
 80a29de:	4b02      	ldr	r3, [pc, #8]	; (80a29e8 <network_ready+0xc>)
 80a29e0:	681b      	ldr	r3, [r3, #0]
 80a29e2:	691b      	ldr	r3, [r3, #16]
 80a29e4:	9301      	str	r3, [sp, #4]
 80a29e6:	bd08      	pop	{r3, pc}
 80a29e8:	080601c8 	.word	0x080601c8

080a29ec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a29ec:	b508      	push	{r3, lr}
 80a29ee:	4b02      	ldr	r3, [pc, #8]	; (80a29f8 <network_on+0xc>)
 80a29f0:	681b      	ldr	r3, [r3, #0]
 80a29f2:	695b      	ldr	r3, [r3, #20]
 80a29f4:	9301      	str	r3, [sp, #4]
 80a29f6:	bd08      	pop	{r3, pc}
 80a29f8:	080601c8 	.word	0x080601c8

080a29fc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a29fc:	b508      	push	{r3, lr}
 80a29fe:	4b02      	ldr	r3, [pc, #8]	; (80a2a08 <network_off+0xc>)
 80a2a00:	681b      	ldr	r3, [r3, #0]
 80a2a02:	699b      	ldr	r3, [r3, #24]
 80a2a04:	9301      	str	r3, [sp, #4]
 80a2a06:	bd08      	pop	{r3, pc}
 80a2a08:	080601c8 	.word	0x080601c8

080a2a0c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a2a0c:	b508      	push	{r3, lr}
 80a2a0e:	4b02      	ldr	r3, [pc, #8]	; (80a2a18 <network_listen+0xc>)
 80a2a10:	681b      	ldr	r3, [r3, #0]
 80a2a12:	69db      	ldr	r3, [r3, #28]
 80a2a14:	9301      	str	r3, [sp, #4]
 80a2a16:	bd08      	pop	{r3, pc}
 80a2a18:	080601c8 	.word	0x080601c8

080a2a1c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a2a1c:	b508      	push	{r3, lr}
 80a2a1e:	4b02      	ldr	r3, [pc, #8]	; (80a2a28 <network_listening+0xc>)
 80a2a20:	681b      	ldr	r3, [r3, #0]
 80a2a22:	6a1b      	ldr	r3, [r3, #32]
 80a2a24:	9301      	str	r3, [sp, #4]
 80a2a26:	bd08      	pop	{r3, pc}
 80a2a28:	080601c8 	.word	0x080601c8

080a2a2c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a2a2c:	b508      	push	{r3, lr}
 80a2a2e:	4b02      	ldr	r3, [pc, #8]	; (80a2a38 <network_set_listen_timeout+0xc>)
 80a2a30:	681b      	ldr	r3, [r3, #0]
 80a2a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2a34:	9301      	str	r3, [sp, #4]
 80a2a36:	bd08      	pop	{r3, pc}
 80a2a38:	080601c8 	.word	0x080601c8

080a2a3c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a2a3c:	b508      	push	{r3, lr}
 80a2a3e:	4b02      	ldr	r3, [pc, #8]	; (80a2a48 <network_get_listen_timeout+0xc>)
 80a2a40:	681b      	ldr	r3, [r3, #0]
 80a2a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2a44:	9301      	str	r3, [sp, #4]
 80a2a46:	bd08      	pop	{r3, pc}
 80a2a48:	080601c8 	.word	0x080601c8

080a2a4c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a2a4c:	b508      	push	{r3, lr}
 80a2a4e:	4b02      	ldr	r3, [pc, #8]	; (80a2a58 <spark_process+0xc>)
 80a2a50:	681b      	ldr	r3, [r3, #0]
 80a2a52:	689b      	ldr	r3, [r3, #8]
 80a2a54:	9301      	str	r3, [sp, #4]
 80a2a56:	bd08      	pop	{r3, pc}
 80a2a58:	080601cc 	.word	0x080601cc

080a2a5c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a2a5c:	b508      	push	{r3, lr}
 80a2a5e:	4b02      	ldr	r3, [pc, #8]	; (80a2a68 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2a60:	681b      	ldr	r3, [r3, #0]
 80a2a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2a64:	9301      	str	r3, [sp, #4]
 80a2a66:	bd08      	pop	{r3, pc}
 80a2a68:	080601cc 	.word	0x080601cc

080a2a6c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a2a6c:	b508      	push	{r3, lr}
 80a2a6e:	4b02      	ldr	r3, [pc, #8]	; (80a2a78 <malloc+0xc>)
 80a2a70:	681b      	ldr	r3, [r3, #0]
 80a2a72:	681b      	ldr	r3, [r3, #0]
 80a2a74:	9301      	str	r3, [sp, #4]
 80a2a76:	bd08      	pop	{r3, pc}
 80a2a78:	080601a0 	.word	0x080601a0

080a2a7c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a2a7c:	b508      	push	{r3, lr}
 80a2a7e:	4b02      	ldr	r3, [pc, #8]	; (80a2a88 <free+0xc>)
 80a2a80:	681b      	ldr	r3, [r3, #0]
 80a2a82:	685b      	ldr	r3, [r3, #4]
 80a2a84:	9301      	str	r3, [sp, #4]
 80a2a86:	bd08      	pop	{r3, pc}
 80a2a88:	080601a0 	.word	0x080601a0

080a2a8c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a2a8c:	4770      	bx	lr

080a2a8e <_ZN8SPIClassD0Ev>:
 80a2a8e:	b510      	push	{r4, lr}
 80a2a90:	4604      	mov	r4, r0
 80a2a92:	2110      	movs	r1, #16
 80a2a94:	f000 fdbd 	bl	80a3612 <_ZdlPvj>
 80a2a98:	4620      	mov	r0, r4
 80a2a9a:	bd10      	pop	{r4, pc}

080a2a9c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2a9c:	b570      	push	{r4, r5, r6, lr}
 80a2a9e:	4604      	mov	r4, r0
 80a2aa0:	460e      	mov	r6, r1
 80a2aa2:	4b07      	ldr	r3, [pc, #28]	; (80a2ac0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a2aa4:	2500      	movs	r5, #0
 80a2aa6:	6003      	str	r3, [r0, #0]
 80a2aa8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a2aac:	f7ff fe68 	bl	80a2780 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a2ab0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a2ab2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a2ab4:	f7ff fe2c 	bl	80a2710 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a2ab8:	60a5      	str	r5, [r4, #8]
}
 80a2aba:	4620      	mov	r0, r4
 80a2abc:	bd70      	pop	{r4, r5, r6, pc}
 80a2abe:	bf00      	nop
 80a2ac0:	080a48f0 	.word	0x080a48f0

080a2ac4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a2ac4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a2ac8:	7900      	ldrb	r0, [r0, #4]
 80a2aca:	f7ff bdf9 	b.w	80a26c0 <HAL_SPI_Begin>

080a2ace <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a2ace:	7900      	ldrb	r0, [r0, #4]
 80a2ad0:	f7ff bdfe 	b.w	80a26d0 <HAL_SPI_Set_Bit_Order>

080a2ad4 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a2ad4:	7900      	ldrb	r0, [r0, #4]
 80a2ad6:	f7ff be03 	b.w	80a26e0 <HAL_SPI_Set_Data_Mode>
	...

080a2adc <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a2adc:	4a05      	ldr	r2, [pc, #20]	; (80a2af4 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a2ade:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a2ae0:	5c99      	ldrb	r1, [r3, r2]
 80a2ae2:	4281      	cmp	r1, r0
 80a2ae4:	d002      	beq.n	80a2aec <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a2ae6:	3301      	adds	r3, #1
 80a2ae8:	2b08      	cmp	r3, #8
 80a2aea:	d1f9      	bne.n	80a2ae0 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a2aec:	1c58      	adds	r0, r3, #1
}
 80a2aee:	b2c0      	uxtb	r0, r0
 80a2af0:	4770      	bx	lr
 80a2af2:	bf00      	nop
 80a2af4:	080a48f8 	.word	0x080a48f8

080a2af8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a2af8:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a2afa:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a2afc:	6018      	str	r0, [r3, #0]
 80a2afe:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a2b00:	6818      	ldr	r0, [r3, #0]
 80a2b02:	b2e5      	uxtb	r5, r4
 80a2b04:	4288      	cmp	r0, r1
 80a2b06:	d906      	bls.n	80a2b16 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a2b08:	3401      	adds	r4, #1
 80a2b0a:	2c08      	cmp	r4, #8
 80a2b0c:	d002      	beq.n	80a2b14 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a2b0e:	0840      	lsrs	r0, r0, #1
 80a2b10:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a2b12:	e7f5      	b.n	80a2b00 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a2b14:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a2b16:	4b02      	ldr	r3, [pc, #8]	; (80a2b20 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a2b18:	5d5b      	ldrb	r3, [r3, r5]
 80a2b1a:	7013      	strb	r3, [r2, #0]
 80a2b1c:	bd30      	pop	{r4, r5, pc}
 80a2b1e:	bf00      	nop
 80a2b20:	080a48f8 	.word	0x080a48f8

080a2b24 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a2b24:	b570      	push	{r4, r5, r6, lr}
 80a2b26:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a2b28:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a2b2c:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a2b2e:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a2b30:	2214      	movs	r2, #20
 80a2b32:	2100      	movs	r1, #0
 80a2b34:	a803      	add	r0, sp, #12
 80a2b36:	f001 fb6a 	bl	80a420e <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a2b3a:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a2b3c:	a903      	add	r1, sp, #12
 80a2b3e:	4630      	mov	r0, r6
 80a2b40:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a2b42:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a2b46:	f7ff fdf3 	bl	80a2730 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a2b4a:	ab02      	add	r3, sp, #8
 80a2b4c:	f10d 0207 	add.w	r2, sp, #7
 80a2b50:	4629      	mov	r1, r5
 80a2b52:	9804      	ldr	r0, [sp, #16]
 80a2b54:	f7ff ffd0 	bl	80a2af8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2b58:	7920      	ldrb	r0, [r4, #4]
 80a2b5a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a2b5e:	f7ff fdc7 	bl	80a26f0 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a2b62:	9802      	ldr	r0, [sp, #8]
 80a2b64:	b008      	add	sp, #32
 80a2b66:	bd70      	pop	{r4, r5, r6, pc}

080a2b68 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a2b68:	b538      	push	{r3, r4, r5, lr}
 80a2b6a:	4604      	mov	r4, r0
    if (dividerReference)
 80a2b6c:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a2b6e:	4608      	mov	r0, r1
    if (dividerReference)
 80a2b70:	b14d      	cbz	r5, 80a2b86 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a2b72:	f7ff ffb3 	bl	80a2adc <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a2b76:	2201      	movs	r2, #1
 80a2b78:	fa25 f100 	lsr.w	r1, r5, r0
 80a2b7c:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a2b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a2b82:	f7ff bfcf 	b.w	80a2b24 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2b86:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a2b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2b8c:	f7ff bdb0 	b.w	80a26f0 <HAL_SPI_Set_Clock_Divider>

080a2b90 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a2b90:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a2b92:	7900      	ldrb	r0, [r0, #4]
 80a2b94:	f7ff fdb4 	bl	80a2700 <HAL_SPI_Send_Receive_Data>
}
 80a2b98:	b2c0      	uxtb	r0, r0
 80a2b9a:	bd08      	pop	{r3, pc}

080a2b9c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a2b9c:	7900      	ldrb	r0, [r0, #4]
 80a2b9e:	f7ff bdbf 	b.w	80a2720 <HAL_SPI_Is_Enabled>
	...

080a2ba4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a2ba8:	4b03      	ldr	r3, [pc, #12]	; (80a2bb8 <_GLOBAL__sub_I_System+0x14>)
 80a2baa:	2000      	movs	r0, #0
 80a2bac:	7018      	strb	r0, [r3, #0]
 80a2bae:	8058      	strh	r0, [r3, #2]
 80a2bb0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2bb2:	f7ff bed7 	b.w	80a2964 <set_system_mode>
 80a2bb6:	bf00      	nop
 80a2bb8:	200004dc 	.word	0x200004dc

080a2bbc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2bbe:	4606      	mov	r6, r0
 80a2bc0:	460d      	mov	r5, r1
 80a2bc2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a2bc4:	2400      	movs	r4, #0
  while (size--) {
 80a2bc6:	42bd      	cmp	r5, r7
 80a2bc8:	d00c      	beq.n	80a2be4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2bca:	6833      	ldr	r3, [r6, #0]
 80a2bcc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2bd0:	689b      	ldr	r3, [r3, #8]
 80a2bd2:	4630      	mov	r0, r6
 80a2bd4:	4798      	blx	r3
     if (chunk>=0)
 80a2bd6:	2800      	cmp	r0, #0
 80a2bd8:	db01      	blt.n	80a2bde <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2bda:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a2bdc:	e7f3      	b.n	80a2bc6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2bde:	2c00      	cmp	r4, #0
 80a2be0:	bf08      	it	eq
 80a2be2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2be4:	4620      	mov	r0, r4
 80a2be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2be8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2be8:	b570      	push	{r4, r5, r6, lr}
 80a2bea:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2bec:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a2bee:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a2bf0:	b149      	cbz	r1, 80a2c06 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2bf2:	f001 fb77 	bl	80a42e4 <strlen>
 80a2bf6:	682b      	ldr	r3, [r5, #0]
 80a2bf8:	4602      	mov	r2, r0
 80a2bfa:	4621      	mov	r1, r4
 80a2bfc:	4628      	mov	r0, r5
    }
 80a2bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a2c02:	68db      	ldr	r3, [r3, #12]
 80a2c04:	4718      	bx	r3
    }
 80a2c06:	bd70      	pop	{r4, r5, r6, pc}

080a2c08 <_ZN5Print5printEPKc>:
 80a2c08:	b508      	push	{r3, lr}
 80a2c0a:	f7ff ffed 	bl	80a2be8 <_ZN5Print5writeEPKc>
 80a2c0e:	bd08      	pop	{r3, pc}

080a2c10 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2c10:	6803      	ldr	r3, [r0, #0]
 80a2c12:	689b      	ldr	r3, [r3, #8]
 80a2c14:	4718      	bx	r3

080a2c16 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2c16:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2c18:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2c1a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2c1c:	f7ff fff8 	bl	80a2c10 <_ZN5Print5printEc>
  n += print('\n');
 80a2c20:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a2c22:	4604      	mov	r4, r0
  n += print('\n');
 80a2c24:	4628      	mov	r0, r5
 80a2c26:	f7ff fff3 	bl	80a2c10 <_ZN5Print5printEc>
  return n;
}
 80a2c2a:	4420      	add	r0, r4
 80a2c2c:	bd38      	pop	{r3, r4, r5, pc}

080a2c2e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2c2e:	b538      	push	{r3, r4, r5, lr}
 80a2c30:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2c32:	f7ff ffd9 	bl	80a2be8 <_ZN5Print5writeEPKc>
 80a2c36:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a2c38:	4628      	mov	r0, r5
 80a2c3a:	f7ff ffec 	bl	80a2c16 <_ZN5Print7printlnEv>
  return n;
}
 80a2c3e:	4420      	add	r0, r4
 80a2c40:	bd38      	pop	{r3, r4, r5, pc}

080a2c42 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2c42:	2a01      	cmp	r2, #1
 80a2c44:	bf98      	it	ls
 80a2c46:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2c48:	b530      	push	{r4, r5, lr}
 80a2c4a:	460b      	mov	r3, r1
 80a2c4c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2c4e:	2100      	movs	r1, #0
 80a2c50:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a2c54:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a2c58:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a2c5c:	fb05 3312 	mls	r3, r5, r2, r3
 80a2c60:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2c62:	2b09      	cmp	r3, #9
 80a2c64:	bf94      	ite	ls
 80a2c66:	3330      	addls	r3, #48	; 0x30
 80a2c68:	3337      	addhi	r3, #55	; 0x37
 80a2c6a:	b2db      	uxtb	r3, r3
 80a2c6c:	4621      	mov	r1, r4
 80a2c6e:	f804 3901 	strb.w	r3, [r4], #-1
 80a2c72:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2c74:	2d00      	cmp	r5, #0
 80a2c76:	d1ef      	bne.n	80a2c58 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2c78:	f7ff ffb6 	bl	80a2be8 <_ZN5Print5writeEPKc>
}
 80a2c7c:	b00b      	add	sp, #44	; 0x2c
 80a2c7e:	bd30      	pop	{r4, r5, pc}

080a2c80 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a2c80:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a2c82:	b922      	cbnz	r2, 80a2c8e <_ZN5Print5printEmi+0xe>
 80a2c84:	6803      	ldr	r3, [r0, #0]
 80a2c86:	b2c9      	uxtb	r1, r1
 80a2c88:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a2c8a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a2c8c:	4718      	bx	r3
  else return printNumber(n, base);
 80a2c8e:	b2d2      	uxtb	r2, r2
}
 80a2c90:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2c92:	f7ff bfd6 	b.w	80a2c42 <_ZN5Print11printNumberEmh>

080a2c96 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a2c96:	f7ff bff3 	b.w	80a2c80 <_ZN5Print5printEmi>

080a2c9a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a2c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2c9e:	4607      	mov	r7, r0
 80a2ca0:	460e      	mov	r6, r1
  if (base == 0) {
 80a2ca2:	4615      	mov	r5, r2
 80a2ca4:	b92a      	cbnz	r2, 80a2cb2 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a2ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a2caa:	6803      	ldr	r3, [r0, #0]
 80a2cac:	b2c9      	uxtb	r1, r1
 80a2cae:	689b      	ldr	r3, [r3, #8]
 80a2cb0:	4718      	bx	r3
  } else if (base == 10) {
 80a2cb2:	2a0a      	cmp	r2, #10
 80a2cb4:	d102      	bne.n	80a2cbc <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a2cb6:	2900      	cmp	r1, #0
 80a2cb8:	da01      	bge.n	80a2cbe <_ZN5Print5printEli+0x24>
 80a2cba:	e004      	b.n	80a2cc6 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a2cbc:	b2d2      	uxtb	r2, r2
  }
}
 80a2cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a2cc2:	f7ff bfbe 	b.w	80a2c42 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a2cc6:	212d      	movs	r1, #45	; 0x2d
 80a2cc8:	f7ff ffa2 	bl	80a2c10 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a2ccc:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a2cce:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a2cd0:	4271      	negs	r1, r6
 80a2cd2:	4638      	mov	r0, r7
 80a2cd4:	f7ff ffb5 	bl	80a2c42 <_ZN5Print11printNumberEmh>
 80a2cd8:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a2cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2cde <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a2cde:	f7ff bfdc 	b.w	80a2c9a <_ZN5Print5printEli>

080a2ce2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2ce2:	2300      	movs	r3, #0
 80a2ce4:	461a      	mov	r2, r3
 80a2ce6:	4619      	mov	r1, r3
 80a2ce8:	6840      	ldr	r0, [r0, #4]
 80a2cea:	f7ff be7f 	b.w	80a29ec <network_on>
	...

080a2cf0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2cf0:	4a01      	ldr	r2, [pc, #4]	; (80a2cf8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2cf2:	4b02      	ldr	r3, [pc, #8]	; (80a2cfc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2cf4:	601a      	str	r2, [r3, #0]
 80a2cf6:	4770      	bx	lr
 80a2cf8:	080a4976 	.word	0x080a4976
 80a2cfc:	200004e4 	.word	0x200004e4

080a2d00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2d00:	4b02      	ldr	r3, [pc, #8]	; (80a2d0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2d02:	681a      	ldr	r2, [r3, #0]
 80a2d04:	4b02      	ldr	r3, [pc, #8]	; (80a2d10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2d06:	601a      	str	r2, [r3, #0]
 80a2d08:	4770      	bx	lr
 80a2d0a:	bf00      	nop
 80a2d0c:	20000418 	.word	0x20000418
 80a2d10:	200004e8 	.word	0x200004e8

080a2d14 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2d14:	2100      	movs	r1, #0
 80a2d16:	f7ff be2d 	b.w	80a2974 <system_delay_ms>

080a2d1a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2d1a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2d1c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2d1e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a2d20:	b113      	cbz	r3, 80a2d28 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2d22:	2203      	movs	r2, #3
 80a2d24:	4601      	mov	r1, r0
 80a2d26:	4798      	blx	r3
    }
 80a2d28:	4620      	mov	r0, r4
 80a2d2a:	bd10      	pop	{r4, pc}

080a2d2c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2d2c:	b510      	push	{r4, lr}
 80a2d2e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2d30:	f7ff fff3 	bl	80a2d1a <_ZNSt14_Function_baseD1Ev>
 80a2d34:	4620      	mov	r0, r4
 80a2d36:	bd10      	pop	{r4, pc}

080a2d38 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2d38:	4803      	ldr	r0, [pc, #12]	; (80a2d48 <_GLOBAL__sub_I_RGB+0x10>)
 80a2d3a:	2300      	movs	r3, #0
 80a2d3c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2d3e:	4a03      	ldr	r2, [pc, #12]	; (80a2d4c <_GLOBAL__sub_I_RGB+0x14>)
 80a2d40:	4903      	ldr	r1, [pc, #12]	; (80a2d50 <_GLOBAL__sub_I_RGB+0x18>)
 80a2d42:	f000 bc61 	b.w	80a3608 <__aeabi_atexit>
 80a2d46:	bf00      	nop
 80a2d48:	200004ec 	.word	0x200004ec
 80a2d4c:	20000480 	.word	0x20000480
 80a2d50:	080a2d2d 	.word	0x080a2d2d

080a2d54 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2d54:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2d56:	4b14      	ldr	r3, [pc, #80]	; (80a2da8 <serialEventRun+0x54>)
 80a2d58:	b133      	cbz	r3, 80a2d68 <serialEventRun+0x14>
 80a2d5a:	f000 f96b 	bl	80a3034 <_Z16_fetch_usbserialv>
 80a2d5e:	6803      	ldr	r3, [r0, #0]
 80a2d60:	691b      	ldr	r3, [r3, #16]
 80a2d62:	4798      	blx	r3
 80a2d64:	2800      	cmp	r0, #0
 80a2d66:	dc16      	bgt.n	80a2d96 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2d68:	4b10      	ldr	r3, [pc, #64]	; (80a2dac <serialEventRun+0x58>)
 80a2d6a:	b133      	cbz	r3, 80a2d7a <serialEventRun+0x26>
 80a2d6c:	f000 fa36 	bl	80a31dc <_Z22__fetch_global_Serial1v>
 80a2d70:	6803      	ldr	r3, [r0, #0]
 80a2d72:	691b      	ldr	r3, [r3, #16]
 80a2d74:	4798      	blx	r3
 80a2d76:	2800      	cmp	r0, #0
 80a2d78:	dc10      	bgt.n	80a2d9c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2d7a:	4b0d      	ldr	r3, [pc, #52]	; (80a2db0 <serialEventRun+0x5c>)
 80a2d7c:	b10b      	cbz	r3, 80a2d82 <serialEventRun+0x2e>
 80a2d7e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2d82:	4b0c      	ldr	r3, [pc, #48]	; (80a2db4 <serialEventRun+0x60>)
 80a2d84:	b17b      	cbz	r3, 80a2da6 <serialEventRun+0x52>
 80a2d86:	f000 f991 	bl	80a30ac <_Z17_fetch_usbserial1v>
 80a2d8a:	6803      	ldr	r3, [r0, #0]
 80a2d8c:	691b      	ldr	r3, [r3, #16]
 80a2d8e:	4798      	blx	r3
 80a2d90:	2800      	cmp	r0, #0
 80a2d92:	dc06      	bgt.n	80a2da2 <serialEventRun+0x4e>
 80a2d94:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2d96:	f3af 8000 	nop.w
 80a2d9a:	e7e5      	b.n	80a2d68 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2d9c:	f3af 8000 	nop.w
 80a2da0:	e7eb      	b.n	80a2d7a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2da2:	f3af 8000 	nop.w
 80a2da6:	bd08      	pop	{r3, pc}
	...

080a2db8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2db8:	b508      	push	{r3, lr}
	serialEventRun();
 80a2dba:	f7ff ffcb 	bl	80a2d54 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2dbe:	f7ff fcd7 	bl	80a2770 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2dc2:	4b01      	ldr	r3, [pc, #4]	; (80a2dc8 <_post_loop+0x10>)
 80a2dc4:	6018      	str	r0, [r3, #0]
 80a2dc6:	bd08      	pop	{r3, pc}
 80a2dc8:	20000990 	.word	0x20000990

080a2dcc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2dcc:	4802      	ldr	r0, [pc, #8]	; (80a2dd8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2dce:	4a03      	ldr	r2, [pc, #12]	; (80a2ddc <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2dd0:	4903      	ldr	r1, [pc, #12]	; (80a2de0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2dd2:	1a12      	subs	r2, r2, r0
 80a2dd4:	f001 ba10 	b.w	80a41f8 <memcpy>
 80a2dd8:	40024000 	.word	0x40024000
 80a2ddc:	40024004 	.word	0x40024004
 80a2de0:	080a4bd0 	.word	0x080a4bd0

080a2de4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2de4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2de6:	2300      	movs	r3, #0
 80a2de8:	9300      	str	r3, [sp, #0]
 80a2dea:	461a      	mov	r2, r3
 80a2dec:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2df0:	f7ff fdd2 	bl	80a2998 <system_ctrl_set_result>
}
 80a2df4:	b003      	add	sp, #12
 80a2df6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2dfc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2dfc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2dfe:	8843      	ldrh	r3, [r0, #2]
 80a2e00:	2b0a      	cmp	r3, #10
 80a2e02:	d008      	beq.n	80a2e16 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2e04:	2b50      	cmp	r3, #80	; 0x50
 80a2e06:	d109      	bne.n	80a2e1c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2e08:	4b09      	ldr	r3, [pc, #36]	; (80a2e30 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2e0a:	681b      	ldr	r3, [r3, #0]
 80a2e0c:	b13b      	cbz	r3, 80a2e1e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2e0e:	b003      	add	sp, #12
 80a2e10:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2e14:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2e16:	f7ff ffe5 	bl	80a2de4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2e1a:	e006      	b.n	80a2e2a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2e1c:	2300      	movs	r3, #0
 80a2e1e:	9300      	str	r3, [sp, #0]
 80a2e20:	461a      	mov	r2, r3
 80a2e22:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2e26:	f7ff fdb7 	bl	80a2998 <system_ctrl_set_result>
        break;
    }
}
 80a2e2a:	b003      	add	sp, #12
 80a2e2c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2e30:	200004fc 	.word	0x200004fc

080a2e34 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2e34:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2e36:	4c10      	ldr	r4, [pc, #64]	; (80a2e78 <module_user_init_hook+0x44>)
 80a2e38:	4d10      	ldr	r5, [pc, #64]	; (80a2e7c <module_user_init_hook+0x48>)
 80a2e3a:	6823      	ldr	r3, [r4, #0]
 80a2e3c:	42ab      	cmp	r3, r5
 80a2e3e:	4b10      	ldr	r3, [pc, #64]	; (80a2e80 <module_user_init_hook+0x4c>)
 80a2e40:	bf0c      	ite	eq
 80a2e42:	2201      	moveq	r2, #1
 80a2e44:	2200      	movne	r2, #0
 80a2e46:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2e48:	d002      	beq.n	80a2e50 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2e4a:	f7ff ffbf 	bl	80a2dcc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2e4e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2e50:	f7ff fc76 	bl	80a2740 <HAL_RNG_GetRandomNumber>
 80a2e54:	4604      	mov	r4, r0
    srand(seed);
 80a2e56:	f001 f9e3 	bl	80a4220 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2e5a:	4b0a      	ldr	r3, [pc, #40]	; (80a2e84 <module_user_init_hook+0x50>)
 80a2e5c:	b113      	cbz	r3, 80a2e64 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2e5e:	4620      	mov	r0, r4
 80a2e60:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2e64:	2100      	movs	r1, #0
 80a2e66:	4807      	ldr	r0, [pc, #28]	; (80a2e84 <module_user_init_hook+0x50>)
 80a2e68:	f7ff fdf8 	bl	80a2a5c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2e70:	2100      	movs	r1, #0
 80a2e72:	4805      	ldr	r0, [pc, #20]	; (80a2e88 <module_user_init_hook+0x54>)
 80a2e74:	f7ff bd86 	b.w	80a2984 <system_ctrl_set_app_request_handler>
 80a2e78:	40024000 	.word	0x40024000
 80a2e7c:	9a271c1e 	.word	0x9a271c1e
 80a2e80:	20000500 	.word	0x20000500
 80a2e84:	00000000 	.word	0x00000000
 80a2e88:	080a2dfd 	.word	0x080a2dfd

080a2e8c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2e8c:	4770      	bx	lr

080a2e8e <_ZN9IPAddressD0Ev>:
 80a2e8e:	b510      	push	{r4, lr}
 80a2e90:	4604      	mov	r4, r0
 80a2e92:	2118      	movs	r1, #24
 80a2e94:	f000 fbbd 	bl	80a3612 <_ZdlPvj>
 80a2e98:	4620      	mov	r0, r4
 80a2e9a:	bd10      	pop	{r4, pc}

080a2e9c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2e9e:	460f      	mov	r7, r1
 80a2ea0:	f100 0608 	add.w	r6, r0, #8
 80a2ea4:	1d05      	adds	r5, r0, #4
 80a2ea6:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2ea8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2eac:	220a      	movs	r2, #10
 80a2eae:	4638      	mov	r0, r7
 80a2eb0:	f7ff fef1 	bl	80a2c96 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2eb4:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2eb6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2eb8:	d007      	beq.n	80a2eca <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2eba:	2c00      	cmp	r4, #0
 80a2ebc:	d0f4      	beq.n	80a2ea8 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2ebe:	212e      	movs	r1, #46	; 0x2e
 80a2ec0:	4638      	mov	r0, r7
 80a2ec2:	f7ff fea5 	bl	80a2c10 <_ZN5Print5printEc>
 80a2ec6:	4404      	add	r4, r0
 80a2ec8:	e7ee      	b.n	80a2ea8 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2eca:	4620      	mov	r0, r4
 80a2ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2ed0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2ed0:	b510      	push	{r4, lr}
 80a2ed2:	4604      	mov	r4, r0
 80a2ed4:	4b04      	ldr	r3, [pc, #16]	; (80a2ee8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2ed6:	2211      	movs	r2, #17
 80a2ed8:	f840 3b04 	str.w	r3, [r0], #4
 80a2edc:	2100      	movs	r1, #0
 80a2ede:	f001 f996 	bl	80a420e <memset>
{
    clear();
}
 80a2ee2:	4620      	mov	r0, r4
 80a2ee4:	bd10      	pop	{r4, pc}
 80a2ee6:	bf00      	nop
 80a2ee8:	080a4a18 	.word	0x080a4a18

080a2eec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2eec:	4603      	mov	r3, r0
 80a2eee:	4a07      	ldr	r2, [pc, #28]	; (80a2f0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2ef0:	b510      	push	{r4, lr}
 80a2ef2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a2ef6:	f101 0210 	add.w	r2, r1, #16
 80a2efa:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2efe:	4291      	cmp	r1, r2
 80a2f00:	f843 4b04 	str.w	r4, [r3], #4
 80a2f04:	d1f9      	bne.n	80a2efa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2f06:	780a      	ldrb	r2, [r1, #0]
 80a2f08:	701a      	strb	r2, [r3, #0]
}
 80a2f0a:	bd10      	pop	{r4, pc}
 80a2f0c:	080a4a18 	.word	0x080a4a18

080a2f10 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2f10:	4a02      	ldr	r2, [pc, #8]	; (80a2f1c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a2f12:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2f14:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a2f16:	2204      	movs	r2, #4
 80a2f18:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a2f1a:	4770      	bx	lr
 80a2f1c:	080a4a18 	.word	0x080a4a18

080a2f20 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2f20:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2f22:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2f26:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a2f2a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a2f2e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a2f32:	2304      	movs	r3, #4
 80a2f34:	6041      	str	r1, [r0, #4]
 80a2f36:	7503      	strb	r3, [r0, #20]
 80a2f38:	bd10      	pop	{r4, pc}
	...

080a2f3c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2f3e:	4d04      	ldr	r5, [pc, #16]	; (80a2f50 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2f40:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2f42:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2f46:	9500      	str	r5, [sp, #0]
 80a2f48:	f7ff ffea 	bl	80a2f20 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2f4c:	b003      	add	sp, #12
 80a2f4e:	bd30      	pop	{r4, r5, pc}
 80a2f50:	080a4a18 	.word	0x080a4a18

080a2f54 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2f54:	7441      	strb	r1, [r0, #17]
 80a2f56:	4770      	bx	lr

080a2f58 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2f58:	4770      	bx	lr

080a2f5a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2f5a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2f5c:	2100      	movs	r1, #0
 80a2f5e:	7c00      	ldrb	r0, [r0, #16]
 80a2f60:	f7ff fcd8 	bl	80a2914 <HAL_USB_USART_Receive_Data>
}
 80a2f64:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2f68:	bf28      	it	cs
 80a2f6a:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2f6e:	bd08      	pop	{r3, pc}

080a2f70 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2f70:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2f72:	2101      	movs	r1, #1
 80a2f74:	7c00      	ldrb	r0, [r0, #16]
 80a2f76:	f7ff fccd 	bl	80a2914 <HAL_USB_USART_Receive_Data>
}
 80a2f7a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2f7e:	bf28      	it	cs
 80a2f80:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2f84:	bd08      	pop	{r3, pc}

080a2f86 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2f86:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2f88:	7c00      	ldrb	r0, [r0, #16]
 80a2f8a:	f7ff fcbb 	bl	80a2904 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2f8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2f92:	bd08      	pop	{r3, pc}

080a2f94 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2f94:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2f96:	7c00      	ldrb	r0, [r0, #16]
 80a2f98:	f7ff fcac 	bl	80a28f4 <HAL_USB_USART_Available_Data>
}
 80a2f9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2fa0:	bd08      	pop	{r3, pc}

080a2fa2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2fa2:	7c00      	ldrb	r0, [r0, #16]
 80a2fa4:	f7ff bcc6 	b.w	80a2934 <HAL_USB_USART_Flush_Data>

080a2fa8 <_ZN9USBSerialD0Ev>:
 80a2fa8:	b510      	push	{r4, lr}
 80a2faa:	4604      	mov	r4, r0
 80a2fac:	2114      	movs	r1, #20
 80a2fae:	f000 fb30 	bl	80a3612 <_ZdlPvj>
 80a2fb2:	4620      	mov	r0, r4
 80a2fb4:	bd10      	pop	{r4, pc}

080a2fb6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2fb6:	b538      	push	{r3, r4, r5, lr}
 80a2fb8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2fba:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2fbc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2fbe:	f7ff fca1 	bl	80a2904 <HAL_USB_USART_Available_Data_For_Write>
 80a2fc2:	2800      	cmp	r0, #0
 80a2fc4:	dc01      	bgt.n	80a2fca <_ZN9USBSerial5writeEh+0x14>
 80a2fc6:	7c60      	ldrb	r0, [r4, #17]
 80a2fc8:	b128      	cbz	r0, 80a2fd6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2fca:	4629      	mov	r1, r5
 80a2fcc:	7c20      	ldrb	r0, [r4, #16]
 80a2fce:	f7ff fca9 	bl	80a2924 <HAL_USB_USART_Send_Data>
 80a2fd2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2fd6:	bd38      	pop	{r3, r4, r5, pc}

080a2fd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2fd8:	b510      	push	{r4, lr}
 80a2fda:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2fdc:	2300      	movs	r3, #0
 80a2fde:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2fe4:	60a3      	str	r3, [r4, #8]
 80a2fe6:	4b05      	ldr	r3, [pc, #20]	; (80a2ffc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2fe8:	4608      	mov	r0, r1
 80a2fea:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2fec:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2fee:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2ff0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2ff2:	4611      	mov	r1, r2
 80a2ff4:	f7ff fc6e 	bl	80a28d4 <HAL_USB_USART_Init>
}
 80a2ff8:	4620      	mov	r0, r4
 80a2ffa:	bd10      	pop	{r4, pc}
 80a2ffc:	080a4a2c 	.word	0x080a4a2c

080a3000 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a3000:	2200      	movs	r2, #0
 80a3002:	7c00      	ldrb	r0, [r0, #16]
 80a3004:	f7ff bc6e 	b.w	80a28e4 <HAL_USB_USART_Begin>

080a3008 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a3008:	b510      	push	{r4, lr}
 80a300a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a300c:	2214      	movs	r2, #20
 80a300e:	2100      	movs	r1, #0
 80a3010:	f001 f8fd 	bl	80a420e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3014:	4b05      	ldr	r3, [pc, #20]	; (80a302c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3016:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3018:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a301a:	4b05      	ldr	r3, [pc, #20]	; (80a3030 <_Z19acquireSerialBufferv+0x28>)
 80a301c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a301e:	f240 1301 	movw	r3, #257	; 0x101
 80a3022:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3024:	2381      	movs	r3, #129	; 0x81
 80a3026:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3028:	bd10      	pop	{r4, pc}
 80a302a:	bf00      	nop
 80a302c:	20000589 	.word	0x20000589
 80a3030:	20000508 	.word	0x20000508

080a3034 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a3034:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3036:	4d0e      	ldr	r5, [pc, #56]	; (80a3070 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a3038:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a303a:	a801      	add	r0, sp, #4
 80a303c:	f7ff ffe4 	bl	80a3008 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3040:	6829      	ldr	r1, [r5, #0]
 80a3042:	f011 0401 	ands.w	r4, r1, #1
 80a3046:	d110      	bne.n	80a306a <_Z16_fetch_usbserialv+0x36>
 80a3048:	4628      	mov	r0, r5
 80a304a:	f7fd f835 	bl	80a00b8 <__cxa_guard_acquire>
 80a304e:	b160      	cbz	r0, 80a306a <_Z16_fetch_usbserialv+0x36>
 80a3050:	aa01      	add	r2, sp, #4
 80a3052:	4621      	mov	r1, r4
 80a3054:	4807      	ldr	r0, [pc, #28]	; (80a3074 <_Z16_fetch_usbserialv+0x40>)
 80a3056:	f7ff ffbf 	bl	80a2fd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a305a:	4628      	mov	r0, r5
 80a305c:	f7fd f831 	bl	80a00c2 <__cxa_guard_release>
 80a3060:	4a05      	ldr	r2, [pc, #20]	; (80a3078 <_Z16_fetch_usbserialv+0x44>)
 80a3062:	4906      	ldr	r1, [pc, #24]	; (80a307c <_Z16_fetch_usbserialv+0x48>)
 80a3064:	4803      	ldr	r0, [pc, #12]	; (80a3074 <_Z16_fetch_usbserialv+0x40>)
 80a3066:	f000 facf 	bl	80a3608 <__aeabi_atexit>
	return _usbserial;
}
 80a306a:	4802      	ldr	r0, [pc, #8]	; (80a3074 <_Z16_fetch_usbserialv+0x40>)
 80a306c:	b007      	add	sp, #28
 80a306e:	bd30      	pop	{r4, r5, pc}
 80a3070:	20000504 	.word	0x20000504
 80a3074:	2000068c 	.word	0x2000068c
 80a3078:	20000480 	.word	0x20000480
 80a307c:	080a2f59 	.word	0x080a2f59

080a3080 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3080:	b510      	push	{r4, lr}
 80a3082:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3084:	2214      	movs	r2, #20
 80a3086:	2100      	movs	r1, #0
 80a3088:	f001 f8c1 	bl	80a420e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a308c:	4b05      	ldr	r3, [pc, #20]	; (80a30a4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a308e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3090:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a3092:	4b05      	ldr	r3, [pc, #20]	; (80a30a8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a3094:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3096:	f240 1301 	movw	r3, #257	; 0x101
 80a309a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a309c:	2381      	movs	r3, #129	; 0x81
 80a309e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a30a0:	bd10      	pop	{r4, pc}
 80a30a2:	bf00      	nop
 80a30a4:	2000073c 	.word	0x2000073c
 80a30a8:	200006a4 	.word	0x200006a4

080a30ac <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a30ac:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a30ae:	4c0e      	ldr	r4, [pc, #56]	; (80a30e8 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a30b0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a30b2:	a801      	add	r0, sp, #4
 80a30b4:	f7ff ffe4 	bl	80a3080 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a30b8:	6823      	ldr	r3, [r4, #0]
 80a30ba:	07db      	lsls	r3, r3, #31
 80a30bc:	d410      	bmi.n	80a30e0 <_Z17_fetch_usbserial1v+0x34>
 80a30be:	4620      	mov	r0, r4
 80a30c0:	f7fc fffa 	bl	80a00b8 <__cxa_guard_acquire>
 80a30c4:	b160      	cbz	r0, 80a30e0 <_Z17_fetch_usbserial1v+0x34>
 80a30c6:	aa01      	add	r2, sp, #4
 80a30c8:	2101      	movs	r1, #1
 80a30ca:	4808      	ldr	r0, [pc, #32]	; (80a30ec <_Z17_fetch_usbserial1v+0x40>)
 80a30cc:	f7ff ff84 	bl	80a2fd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a30d0:	4620      	mov	r0, r4
 80a30d2:	f7fc fff6 	bl	80a00c2 <__cxa_guard_release>
 80a30d6:	4a06      	ldr	r2, [pc, #24]	; (80a30f0 <_Z17_fetch_usbserial1v+0x44>)
 80a30d8:	4906      	ldr	r1, [pc, #24]	; (80a30f4 <_Z17_fetch_usbserial1v+0x48>)
 80a30da:	4804      	ldr	r0, [pc, #16]	; (80a30ec <_Z17_fetch_usbserial1v+0x40>)
 80a30dc:	f000 fa94 	bl	80a3608 <__aeabi_atexit>
  return _usbserial1;
}
 80a30e0:	4802      	ldr	r0, [pc, #8]	; (80a30ec <_Z17_fetch_usbserial1v+0x40>)
 80a30e2:	b006      	add	sp, #24
 80a30e4:	bd10      	pop	{r4, pc}
 80a30e6:	bf00      	nop
 80a30e8:	200006a0 	.word	0x200006a0
 80a30ec:	20000728 	.word	0x20000728
 80a30f0:	20000480 	.word	0x20000480
 80a30f4:	080a2f59 	.word	0x080a2f59

080a30f8 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
 80a30f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a30fa:	b285      	uxth	r5, r0

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
 80a30fc:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a30fe:	4628      	mov	r0, r5

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
 80a3100:	460e      	mov	r6, r1
 80a3102:	4617      	mov	r7, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a3104:	f000 f9b4 	bl	80a3470 <pinAvailable>
 80a3108:	b160      	cbz	r0, 80a3124 <tone+0x2c>
 80a310a:	2102      	movs	r1, #2
 80a310c:	4628      	mov	r0, r5
 80a310e:	f7ff fab7 	bl	80a2680 <HAL_Validate_Pin_Function>
 80a3112:	2802      	cmp	r0, #2
 80a3114:	d106      	bne.n	80a3124 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
 80a3116:	463a      	mov	r2, r7
 80a3118:	4631      	mov	r1, r6
 80a311a:	4620      	mov	r0, r4
    }
}
 80a311c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Start(pin, frequency, duration);
 80a3120:	f7ff bbd0 	b.w	80a28c4 <HAL_Tone_Start>
 80a3124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3126 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a3126:	4770      	bx	lr

080a3128 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3128:	7441      	strb	r1, [r0, #17]
 80a312a:	4770      	bx	lr

080a312c <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a312c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a312e:	7c00      	ldrb	r0, [r0, #16]
 80a3130:	f7ff fb66 	bl	80a2800 <HAL_USART_Available_Data_For_Write>
}
 80a3134:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3138:	bd08      	pop	{r3, pc}

080a313a <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a313a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a313c:	7c00      	ldrb	r0, [r0, #16]
 80a313e:	f7ff fb37 	bl	80a27b0 <HAL_USART_Available_Data>
}
 80a3142:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3146:	bd08      	pop	{r3, pc}

080a3148 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a3148:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a314a:	7c00      	ldrb	r0, [r0, #16]
 80a314c:	f7ff fb40 	bl	80a27d0 <HAL_USART_Peek_Data>
}
 80a3150:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3154:	bf28      	it	cs
 80a3156:	f04f 30ff 	movcs.w	r0, #4294967295
 80a315a:	bd08      	pop	{r3, pc}

080a315c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a315c:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a315e:	7c00      	ldrb	r0, [r0, #16]
 80a3160:	f7ff fb2e 	bl	80a27c0 <HAL_USART_Read_Data>
}
 80a3164:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3168:	bf28      	it	cs
 80a316a:	f04f 30ff 	movcs.w	r0, #4294967295
 80a316e:	bd08      	pop	{r3, pc}

080a3170 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a3170:	7c00      	ldrb	r0, [r0, #16]
 80a3172:	f7ff bb35 	b.w	80a27e0 <HAL_USART_Flush_Data>

080a3176 <_ZN11USARTSerialD0Ev>:
 80a3176:	b510      	push	{r4, lr}
 80a3178:	4604      	mov	r4, r0
 80a317a:	2114      	movs	r1, #20
 80a317c:	f000 fa49 	bl	80a3612 <_ZdlPvj>
 80a3180:	4620      	mov	r0, r4
 80a3182:	bd10      	pop	{r4, pc}

080a3184 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3184:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3186:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a3188:	4604      	mov	r4, r0
 80a318a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a318c:	b925      	cbnz	r5, 80a3198 <_ZN11USARTSerial5writeEh+0x14>
 80a318e:	7c00      	ldrb	r0, [r0, #16]
 80a3190:	f7ff fb36 	bl	80a2800 <HAL_USART_Available_Data_For_Write>
 80a3194:	2800      	cmp	r0, #0
 80a3196:	dd05      	ble.n	80a31a4 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3198:	4631      	mov	r1, r6
 80a319a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a319c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a31a0:	f7ff bafe 	b.w	80a27a0 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a31a4:	4628      	mov	r0, r5
 80a31a6:	bd70      	pop	{r4, r5, r6, pc}

080a31a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a31a8:	b510      	push	{r4, lr}
 80a31aa:	4604      	mov	r4, r0
 80a31ac:	4608      	mov	r0, r1
 80a31ae:	4611      	mov	r1, r2
 80a31b0:	2200      	movs	r2, #0
 80a31b2:	6062      	str	r2, [r4, #4]
 80a31b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a31b8:	60a2      	str	r2, [r4, #8]
 80a31ba:	4a05      	ldr	r2, [pc, #20]	; (80a31d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a31bc:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a31be:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a31c0:	2201      	movs	r2, #1
 80a31c2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a31c4:	461a      	mov	r2, r3
 80a31c6:	f7ff fae3 	bl	80a2790 <HAL_USART_Init>
}
 80a31ca:	4620      	mov	r0, r4
 80a31cc:	bd10      	pop	{r4, pc}
 80a31ce:	bf00      	nop
 80a31d0:	080a4a5c 	.word	0x080a4a5c

080a31d4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a31d4:	7c00      	ldrb	r0, [r0, #16]
 80a31d6:	f7ff bb0b 	b.w	80a27f0 <HAL_USART_Is_Enabled>
	...

080a31dc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a31dc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a31de:	4d0c      	ldr	r5, [pc, #48]	; (80a3210 <_Z22__fetch_global_Serial1v+0x34>)
 80a31e0:	6829      	ldr	r1, [r5, #0]
 80a31e2:	f011 0401 	ands.w	r4, r1, #1
 80a31e6:	d111      	bne.n	80a320c <_Z22__fetch_global_Serial1v+0x30>
 80a31e8:	4628      	mov	r0, r5
 80a31ea:	f7fc ff65 	bl	80a00b8 <__cxa_guard_acquire>
 80a31ee:	b168      	cbz	r0, 80a320c <_Z22__fetch_global_Serial1v+0x30>
 80a31f0:	4a08      	ldr	r2, [pc, #32]	; (80a3214 <_Z22__fetch_global_Serial1v+0x38>)
 80a31f2:	4621      	mov	r1, r4
 80a31f4:	4b08      	ldr	r3, [pc, #32]	; (80a3218 <_Z22__fetch_global_Serial1v+0x3c>)
 80a31f6:	4809      	ldr	r0, [pc, #36]	; (80a321c <_Z22__fetch_global_Serial1v+0x40>)
 80a31f8:	f7ff ffd6 	bl	80a31a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a31fc:	4628      	mov	r0, r5
 80a31fe:	f7fc ff60 	bl	80a00c2 <__cxa_guard_release>
 80a3202:	4a07      	ldr	r2, [pc, #28]	; (80a3220 <_Z22__fetch_global_Serial1v+0x44>)
 80a3204:	4907      	ldr	r1, [pc, #28]	; (80a3224 <_Z22__fetch_global_Serial1v+0x48>)
 80a3206:	4805      	ldr	r0, [pc, #20]	; (80a321c <_Z22__fetch_global_Serial1v+0x40>)
 80a3208:	f000 f9fe 	bl	80a3608 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a320c:	4803      	ldr	r0, [pc, #12]	; (80a321c <_Z22__fetch_global_Serial1v+0x40>)
 80a320e:	bd38      	pop	{r3, r4, r5, pc}
 80a3210:	200008d8 	.word	0x200008d8
 80a3214:	200008dc 	.word	0x200008dc
 80a3218:	20000854 	.word	0x20000854
 80a321c:	20000840 	.word	0x20000840
 80a3220:	20000480 	.word	0x20000480
 80a3224:	080a3127 	.word	0x080a3127

080a3228 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a3228:	4770      	bx	lr

080a322a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a322a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a322c:	4606      	mov	r6, r0
 80a322e:	4615      	mov	r5, r2
 80a3230:	460c      	mov	r4, r1
 80a3232:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3234:	42bc      	cmp	r4, r7
 80a3236:	d006      	beq.n	80a3246 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3238:	6833      	ldr	r3, [r6, #0]
 80a323a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a323e:	689b      	ldr	r3, [r3, #8]
 80a3240:	4630      	mov	r0, r6
 80a3242:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3244:	e7f6      	b.n	80a3234 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a3246:	4628      	mov	r0, r5
 80a3248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a324a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a324a:	2200      	movs	r2, #0
 80a324c:	7c00      	ldrb	r0, [r0, #16]
 80a324e:	f7ff baff 	b.w	80a2850 <HAL_I2C_Write_Data>

080a3252 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a3252:	2100      	movs	r1, #0
 80a3254:	7c00      	ldrb	r0, [r0, #16]
 80a3256:	f7ff bb03 	b.w	80a2860 <HAL_I2C_Available_Data>

080a325a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a325a:	2100      	movs	r1, #0
 80a325c:	7c00      	ldrb	r0, [r0, #16]
 80a325e:	f7ff bb07 	b.w	80a2870 <HAL_I2C_Read_Data>

080a3262 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a3262:	2100      	movs	r1, #0
 80a3264:	7c00      	ldrb	r0, [r0, #16]
 80a3266:	f7ff bb0b 	b.w	80a2880 <HAL_I2C_Peek_Data>

080a326a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a326a:	2100      	movs	r1, #0
 80a326c:	7c00      	ldrb	r0, [r0, #16]
 80a326e:	f7ff bb0f 	b.w	80a2890 <HAL_I2C_Flush_Data>

080a3272 <_ZN7TwoWireD0Ev>:
 80a3272:	b510      	push	{r4, lr}
 80a3274:	4604      	mov	r4, r0
 80a3276:	2114      	movs	r1, #20
 80a3278:	f000 f9cb 	bl	80a3612 <_ZdlPvj>
 80a327c:	4620      	mov	r0, r4
 80a327e:	bd10      	pop	{r4, pc}

080a3280 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a3280:	b510      	push	{r4, lr}
 80a3282:	4604      	mov	r4, r0
 80a3284:	4608      	mov	r0, r1
 80a3286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a328a:	60a3      	str	r3, [r4, #8]
 80a328c:	4b04      	ldr	r3, [pc, #16]	; (80a32a0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a328e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a3290:	7420      	strb	r0, [r4, #16]
 80a3292:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a3294:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a3296:	f7ff fb0b 	bl	80a28b0 <HAL_I2C_Init>

}
 80a329a:	4620      	mov	r0, r4
 80a329c:	bd10      	pop	{r4, pc}
 80a329e:	bf00      	nop
 80a32a0:	080a4a8c 	.word	0x080a4a8c

080a32a4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a32a4:	2300      	movs	r3, #0
 80a32a6:	461a      	mov	r2, r3
 80a32a8:	4619      	mov	r1, r3
 80a32aa:	7c00      	ldrb	r0, [r0, #16]
 80a32ac:	f7ff bab0 	b.w	80a2810 <HAL_I2C_Begin>

080a32b0 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a32b0:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a32b2:	2400      	movs	r4, #0
 80a32b4:	7c00      	ldrb	r0, [r0, #16]
 80a32b6:	9400      	str	r4, [sp, #0]
 80a32b8:	f7ff fab2 	bl	80a2820 <HAL_I2C_Request_Data>
  return result;
}
 80a32bc:	b2c0      	uxtb	r0, r0
 80a32be:	b002      	add	sp, #8
 80a32c0:	bd10      	pop	{r4, pc}

080a32c2 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a32c2:	2301      	movs	r3, #1
 80a32c4:	b2d2      	uxtb	r2, r2
 80a32c6:	b2c9      	uxtb	r1, r1
 80a32c8:	f7ff bff2 	b.w	80a32b0 <_ZN7TwoWire11requestFromEhhh>

080a32cc <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a32cc:	2200      	movs	r2, #0
 80a32ce:	7c00      	ldrb	r0, [r0, #16]
 80a32d0:	f7ff baae 	b.w	80a2830 <HAL_I2C_Begin_Transmission>

080a32d4 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a32d4:	b2c9      	uxtb	r1, r1
 80a32d6:	f7ff bff9 	b.w	80a32cc <_ZN7TwoWire17beginTransmissionEh>

080a32da <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a32da:	2200      	movs	r2, #0
 80a32dc:	7c00      	ldrb	r0, [r0, #16]
 80a32de:	f7ff baaf 	b.w	80a2840 <HAL_I2C_End_Transmission>

080a32e2 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a32e2:	2101      	movs	r1, #1
 80a32e4:	f7ff bff9 	b.w	80a32da <_ZN7TwoWire15endTransmissionEh>

080a32e8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a32e8:	2100      	movs	r1, #0
 80a32ea:	7c00      	ldrb	r0, [r0, #16]
 80a32ec:	f7ff bad8 	b.w	80a28a0 <HAL_I2C_Is_Enabled>

080a32f0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a32f0:	2200      	movs	r2, #0
 80a32f2:	4611      	mov	r1, r2
 80a32f4:	6840      	ldr	r0, [r0, #4]
 80a32f6:	f7ff bb71 	b.w	80a29dc <network_ready>

080a32fa <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a32fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a32fc:	4616      	mov	r6, r2
 80a32fe:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a3300:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a3302:	460f      	mov	r7, r1
 80a3304:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a3306:	2100      	movs	r1, #0
 80a3308:	a803      	add	r0, sp, #12
 80a330a:	f000 ff80 	bl	80a420e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a330e:	4630      	mov	r0, r6
 80a3310:	f000 ffe8 	bl	80a42e4 <strlen>
 80a3314:	2500      	movs	r5, #0
 80a3316:	9500      	str	r5, [sp, #0]
 80a3318:	b281      	uxth	r1, r0
 80a331a:	687b      	ldr	r3, [r7, #4]
 80a331c:	aa03      	add	r2, sp, #12
 80a331e:	4630      	mov	r0, r6
 80a3320:	f7ff fb10 	bl	80a2944 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3324:	b120      	cbz	r0, 80a3330 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a3326:	4629      	mov	r1, r5
 80a3328:	4620      	mov	r0, r4
 80a332a:	f7ff fdf1 	bl	80a2f10 <_ZN9IPAddressC1Em>
 80a332e:	e003      	b.n	80a3338 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a3330:	a903      	add	r1, sp, #12
 80a3332:	4620      	mov	r0, r4
 80a3334:	f7ff fdda 	bl	80a2eec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a3338:	4620      	mov	r0, r4
 80a333a:	b009      	add	sp, #36	; 0x24
 80a333c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a333e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a333e:	2200      	movs	r2, #0
 80a3340:	4611      	mov	r1, r2
 80a3342:	6840      	ldr	r0, [r0, #4]
 80a3344:	f7ff bb6a 	b.w	80a2a1c <network_listening>

080a3348 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a3348:	2200      	movs	r2, #0
 80a334a:	4611      	mov	r1, r2
 80a334c:	6840      	ldr	r0, [r0, #4]
 80a334e:	f7ff bb75 	b.w	80a2a3c <network_get_listen_timeout>

080a3352 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a3352:	2200      	movs	r2, #0
 80a3354:	6840      	ldr	r0, [r0, #4]
 80a3356:	f7ff bb69 	b.w	80a2a2c <network_set_listen_timeout>

080a335a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a335a:	2200      	movs	r2, #0
 80a335c:	f081 0101 	eor.w	r1, r1, #1
 80a3360:	6840      	ldr	r0, [r0, #4]
 80a3362:	f7ff bb53 	b.w	80a2a0c <network_listen>

080a3366 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a3366:	2300      	movs	r3, #0
 80a3368:	461a      	mov	r2, r3
 80a336a:	4619      	mov	r1, r3
 80a336c:	6840      	ldr	r0, [r0, #4]
 80a336e:	f7ff bb45 	b.w	80a29fc <network_off>

080a3372 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a3372:	2200      	movs	r2, #0
 80a3374:	4611      	mov	r1, r2
 80a3376:	6840      	ldr	r0, [r0, #4]
 80a3378:	f7ff bb20 	b.w	80a29bc <network_connecting>

080a337c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a337c:	2200      	movs	r2, #0
 80a337e:	2102      	movs	r1, #2
 80a3380:	6840      	ldr	r0, [r0, #4]
 80a3382:	f7ff bb23 	b.w	80a29cc <network_disconnect>

080a3386 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a3386:	2300      	movs	r3, #0
 80a3388:	461a      	mov	r2, r3
 80a338a:	6840      	ldr	r0, [r0, #4]
 80a338c:	f7ff bb0e 	b.w	80a29ac <network_connect>

080a3390 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a3390:	4b02      	ldr	r3, [pc, #8]	; (80a339c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a3392:	2204      	movs	r2, #4
 80a3394:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a3396:	4a02      	ldr	r2, [pc, #8]	; (80a33a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a3398:	601a      	str	r2, [r3, #0]
 80a339a:	4770      	bx	lr
 80a339c:	20000960 	.word	0x20000960
 80a33a0:	080a4ab4 	.word	0x080a4ab4

080a33a4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a33a4:	2300      	movs	r3, #0
 80a33a6:	461a      	mov	r2, r3
 80a33a8:	6840      	ldr	r0, [r0, #4]
 80a33aa:	f7ff baff 	b.w	80a29ac <network_connect>

080a33ae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a33ae:	2200      	movs	r2, #0
 80a33b0:	2102      	movs	r1, #2
 80a33b2:	6840      	ldr	r0, [r0, #4]
 80a33b4:	f7ff bb0a 	b.w	80a29cc <network_disconnect>

080a33b8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a33b8:	2200      	movs	r2, #0
 80a33ba:	4611      	mov	r1, r2
 80a33bc:	6840      	ldr	r0, [r0, #4]
 80a33be:	f7ff bafd 	b.w	80a29bc <network_connecting>

080a33c2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a33c2:	2200      	movs	r2, #0
 80a33c4:	4611      	mov	r1, r2
 80a33c6:	6840      	ldr	r0, [r0, #4]
 80a33c8:	f7ff bb08 	b.w	80a29dc <network_ready>

080a33cc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a33cc:	2300      	movs	r3, #0
 80a33ce:	461a      	mov	r2, r3
 80a33d0:	4619      	mov	r1, r3
 80a33d2:	6840      	ldr	r0, [r0, #4]
 80a33d4:	f7ff bb0a 	b.w	80a29ec <network_on>

080a33d8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a33d8:	2300      	movs	r3, #0
 80a33da:	461a      	mov	r2, r3
 80a33dc:	4619      	mov	r1, r3
 80a33de:	6840      	ldr	r0, [r0, #4]
 80a33e0:	f7ff bb0c 	b.w	80a29fc <network_off>

080a33e4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a33e4:	2200      	movs	r2, #0
 80a33e6:	f081 0101 	eor.w	r1, r1, #1
 80a33ea:	6840      	ldr	r0, [r0, #4]
 80a33ec:	f7ff bb0e 	b.w	80a2a0c <network_listen>

080a33f0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a33f0:	2200      	movs	r2, #0
 80a33f2:	6840      	ldr	r0, [r0, #4]
 80a33f4:	f7ff bb1a 	b.w	80a2a2c <network_set_listen_timeout>

080a33f8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a33f8:	2200      	movs	r2, #0
 80a33fa:	4611      	mov	r1, r2
 80a33fc:	6840      	ldr	r0, [r0, #4]
 80a33fe:	f7ff bb1d 	b.w	80a2a3c <network_get_listen_timeout>

080a3402 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a3402:	2200      	movs	r2, #0
 80a3404:	4611      	mov	r1, r2
 80a3406:	6840      	ldr	r0, [r0, #4]
 80a3408:	f7ff bb08 	b.w	80a2a1c <network_listening>

080a340c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a340c:	b570      	push	{r4, r5, r6, lr}
 80a340e:	4616      	mov	r6, r2
 80a3410:	b08e      	sub	sp, #56	; 0x38
 80a3412:	4604      	mov	r4, r0
    IPAddress addr;
 80a3414:	a808      	add	r0, sp, #32
 80a3416:	f7ff fd5b 	bl	80a2ed0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a341a:	2211      	movs	r2, #17
 80a341c:	2100      	movs	r1, #0
 80a341e:	a803      	add	r0, sp, #12
 80a3420:	f000 fef5 	bl	80a420e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3424:	4630      	mov	r0, r6
 80a3426:	f000 ff5d 	bl	80a42e4 <strlen>
 80a342a:	2500      	movs	r5, #0
 80a342c:	4b0a      	ldr	r3, [pc, #40]	; (80a3458 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a342e:	9500      	str	r5, [sp, #0]
 80a3430:	b281      	uxth	r1, r0
 80a3432:	685b      	ldr	r3, [r3, #4]
 80a3434:	aa03      	add	r2, sp, #12
 80a3436:	4630      	mov	r0, r6
 80a3438:	f7ff fa84 	bl	80a2944 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a343c:	b120      	cbz	r0, 80a3448 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a343e:	4629      	mov	r1, r5
 80a3440:	4620      	mov	r0, r4
 80a3442:	f7ff fd65 	bl	80a2f10 <_ZN9IPAddressC1Em>
 80a3446:	e003      	b.n	80a3450 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a3448:	a903      	add	r1, sp, #12
 80a344a:	4620      	mov	r0, r4
 80a344c:	f7ff fd4e 	bl	80a2eec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a3450:	4620      	mov	r0, r4
 80a3452:	b00e      	add	sp, #56	; 0x38
 80a3454:	bd70      	pop	{r4, r5, r6, pc}
 80a3456:	bf00      	nop
 80a3458:	20000960 	.word	0x20000960

080a345c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a345c:	4b02      	ldr	r3, [pc, #8]	; (80a3468 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a345e:	4a03      	ldr	r2, [pc, #12]	; (80a346c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a3460:	601a      	str	r2, [r3, #0]
 80a3462:	2200      	movs	r2, #0
 80a3464:	605a      	str	r2, [r3, #4]
 80a3466:	4770      	bx	lr
 80a3468:	20000968 	.word	0x20000968
 80a346c:	080a4ae8 	.word	0x080a4ae8

080a3470 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a3470:	b510      	push	{r4, lr}
 80a3472:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a3474:	480f      	ldr	r0, [pc, #60]	; (80a34b4 <pinAvailable+0x44>)
 80a3476:	f7ff fb91 	bl	80a2b9c <_ZN8SPIClass9isEnabledEv>
 80a347a:	b128      	cbz	r0, 80a3488 <pinAvailable+0x18>
 80a347c:	f1a4 030d 	sub.w	r3, r4, #13
 80a3480:	2b02      	cmp	r3, #2
 80a3482:	d801      	bhi.n	80a3488 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a3484:	2000      	movs	r0, #0
 80a3486:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a3488:	f000 f89e 	bl	80a35c8 <_Z19__fetch_global_Wirev>
 80a348c:	f7ff ff2c 	bl	80a32e8 <_ZN7TwoWire9isEnabledEv>
 80a3490:	b108      	cbz	r0, 80a3496 <pinAvailable+0x26>
 80a3492:	2c01      	cmp	r4, #1
 80a3494:	d9f6      	bls.n	80a3484 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a3496:	f7ff fea1 	bl	80a31dc <_Z22__fetch_global_Serial1v>
 80a349a:	f7ff fe9b 	bl	80a31d4 <_ZN11USARTSerial9isEnabledEv>
 80a349e:	b118      	cbz	r0, 80a34a8 <pinAvailable+0x38>
 80a34a0:	f1a4 0312 	sub.w	r3, r4, #18
 80a34a4:	2b01      	cmp	r3, #1
 80a34a6:	d9ed      	bls.n	80a3484 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a34a8:	2c17      	cmp	r4, #23
 80a34aa:	bf8c      	ite	hi
 80a34ac:	2000      	movhi	r0, #0
 80a34ae:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a34b0:	bd10      	pop	{r4, pc}
 80a34b2:	bf00      	nop
 80a34b4:	20000970 	.word	0x20000970

080a34b8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a34b8:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a34ba:	b538      	push	{r3, r4, r5, lr}
 80a34bc:	4604      	mov	r4, r0
 80a34be:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a34c0:	d80a      	bhi.n	80a34d8 <pinMode+0x20>
 80a34c2:	29ff      	cmp	r1, #255	; 0xff
 80a34c4:	d008      	beq.n	80a34d8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a34c6:	f7ff ffd3 	bl	80a3470 <pinAvailable>
 80a34ca:	b128      	cbz	r0, 80a34d8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a34cc:	4629      	mov	r1, r5
 80a34ce:	4620      	mov	r0, r4
}
 80a34d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a34d4:	f7ff b8dc 	b.w	80a2690 <HAL_Pin_Mode>
 80a34d8:	bd38      	pop	{r3, r4, r5, pc}

080a34da <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a34da:	b538      	push	{r3, r4, r5, lr}
 80a34dc:	4604      	mov	r4, r0
 80a34de:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a34e0:	f7ff f8de 	bl	80a26a0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a34e4:	28ff      	cmp	r0, #255	; 0xff
 80a34e6:	d010      	beq.n	80a350a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a34e8:	2806      	cmp	r0, #6
 80a34ea:	d804      	bhi.n	80a34f6 <digitalWrite+0x1c>
 80a34ec:	234d      	movs	r3, #77	; 0x4d
 80a34ee:	fa23 f000 	lsr.w	r0, r3, r0
 80a34f2:	07c3      	lsls	r3, r0, #31
 80a34f4:	d409      	bmi.n	80a350a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a34f6:	4620      	mov	r0, r4
 80a34f8:	f7ff ffba 	bl	80a3470 <pinAvailable>
 80a34fc:	b128      	cbz	r0, 80a350a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a34fe:	4629      	mov	r1, r5
 80a3500:	4620      	mov	r0, r4
}
 80a3502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3506:	f7ff b8d3 	b.w	80a26b0 <HAL_GPIO_Write>
 80a350a:	bd38      	pop	{r3, r4, r5, pc}

080a350c <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 80a350c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3510:	4690      	mov	r8, r2
 80a3512:	461e      	mov	r6, r3
 80a3514:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
 80a3516:	460d      	mov	r5, r1
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 80a3518:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
 80a351a:	f1b8 0f00 	cmp.w	r8, #0
 80a351e:	d104      	bne.n	80a352a <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
 80a3520:	f1c4 0107 	rsb	r1, r4, #7
 80a3524:	fa46 f101 	asr.w	r1, r6, r1
 80a3528:	e001      	b.n	80a352e <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 80a352a:	fa46 f104 	asr.w	r1, r6, r4
 80a352e:	f001 0101 	and.w	r1, r1, #1
 80a3532:	4638      	mov	r0, r7
 80a3534:	f7ff ffd1 	bl	80a34da <digitalWrite>

    digitalWrite(clockPin, HIGH);
 80a3538:	2101      	movs	r1, #1
 80a353a:	4628      	mov	r0, r5
 80a353c:	f7ff ffcd 	bl	80a34da <digitalWrite>
    digitalWrite(clockPin, LOW);
 80a3540:	2100      	movs	r1, #0
 80a3542:	4628      	mov	r0, r5
 80a3544:	f7ff ffc9 	bl	80a34da <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
 80a3548:	f114 34ff 	adds.w	r4, r4, #4294967295
 80a354c:	d2e5      	bcs.n	80a351a <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
 80a354e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a3554 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3554:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3556:	4c0c      	ldr	r4, [pc, #48]	; (80a3588 <_GLOBAL__sub_I_SPI+0x34>)
 80a3558:	4e0c      	ldr	r6, [pc, #48]	; (80a358c <_GLOBAL__sub_I_SPI+0x38>)
 80a355a:	4d0d      	ldr	r5, [pc, #52]	; (80a3590 <_GLOBAL__sub_I_SPI+0x3c>)
 80a355c:	2100      	movs	r1, #0
 80a355e:	4620      	mov	r0, r4
 80a3560:	f7ff fa9c 	bl	80a2a9c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3564:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3566:	4c0b      	ldr	r4, [pc, #44]	; (80a3594 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3568:	4632      	mov	r2, r6
 80a356a:	4629      	mov	r1, r5
 80a356c:	f000 f84c 	bl	80a3608 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3570:	2101      	movs	r1, #1
 80a3572:	4620      	mov	r0, r4
 80a3574:	f7ff fa92 	bl	80a2a9c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3578:	4632      	mov	r2, r6
 80a357a:	4629      	mov	r1, r5
 80a357c:	4620      	mov	r0, r4
 80a357e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a3582:	f000 b841 	b.w	80a3608 <__aeabi_atexit>
 80a3586:	bf00      	nop
 80a3588:	20000970 	.word	0x20000970
 80a358c:	20000480 	.word	0x20000480
 80a3590:	080a2a8d 	.word	0x080a2a8d
 80a3594:	20000980 	.word	0x20000980

080a3598 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3598:	b513      	push	{r0, r1, r4, lr}
 80a359a:	4c08      	ldr	r4, [pc, #32]	; (80a35bc <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a359c:	2300      	movs	r3, #0
 80a359e:	461a      	mov	r2, r3
 80a35a0:	4619      	mov	r1, r3
 80a35a2:	9300      	str	r3, [sp, #0]
 80a35a4:	4620      	mov	r0, r4
 80a35a6:	f7ff fcc9 	bl	80a2f3c <_ZN9IPAddressC1Ehhhh>
 80a35aa:	4620      	mov	r0, r4
 80a35ac:	4a04      	ldr	r2, [pc, #16]	; (80a35c0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a35ae:	4905      	ldr	r1, [pc, #20]	; (80a35c4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a35b0:	b002      	add	sp, #8
 80a35b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a35b6:	f000 b827 	b.w	80a3608 <__aeabi_atexit>
 80a35ba:	bf00      	nop
 80a35bc:	20000994 	.word	0x20000994
 80a35c0:	20000480 	.word	0x20000480
 80a35c4:	080a2e8d 	.word	0x080a2e8d

080a35c8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a35c8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a35ca:	4d0b      	ldr	r5, [pc, #44]	; (80a35f8 <_Z19__fetch_global_Wirev+0x30>)
 80a35cc:	6829      	ldr	r1, [r5, #0]
 80a35ce:	f011 0401 	ands.w	r4, r1, #1
 80a35d2:	d10f      	bne.n	80a35f4 <_Z19__fetch_global_Wirev+0x2c>
 80a35d4:	4628      	mov	r0, r5
 80a35d6:	f7fc fd6f 	bl	80a00b8 <__cxa_guard_acquire>
 80a35da:	b158      	cbz	r0, 80a35f4 <_Z19__fetch_global_Wirev+0x2c>
 80a35dc:	4621      	mov	r1, r4
 80a35de:	4807      	ldr	r0, [pc, #28]	; (80a35fc <_Z19__fetch_global_Wirev+0x34>)
 80a35e0:	f7ff fe4e 	bl	80a3280 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a35e4:	4628      	mov	r0, r5
 80a35e6:	f7fc fd6c 	bl	80a00c2 <__cxa_guard_release>
 80a35ea:	4a05      	ldr	r2, [pc, #20]	; (80a3600 <_Z19__fetch_global_Wirev+0x38>)
 80a35ec:	4905      	ldr	r1, [pc, #20]	; (80a3604 <_Z19__fetch_global_Wirev+0x3c>)
 80a35ee:	4803      	ldr	r0, [pc, #12]	; (80a35fc <_Z19__fetch_global_Wirev+0x34>)
 80a35f0:	f000 f80a 	bl	80a3608 <__aeabi_atexit>
	return wire;
}
 80a35f4:	4801      	ldr	r0, [pc, #4]	; (80a35fc <_Z19__fetch_global_Wirev+0x34>)
 80a35f6:	bd38      	pop	{r3, r4, r5, pc}
 80a35f8:	200009ac 	.word	0x200009ac
 80a35fc:	200009b0 	.word	0x200009b0
 80a3600:	20000480 	.word	0x20000480
 80a3604:	080a3229 	.word	0x080a3229

080a3608 <__aeabi_atexit>:
 80a3608:	460b      	mov	r3, r1
 80a360a:	4601      	mov	r1, r0
 80a360c:	4618      	mov	r0, r3
 80a360e:	f000 bde5 	b.w	80a41dc <__cxa_atexit>

080a3612 <_ZdlPvj>:
 80a3612:	f7fc bd44 	b.w	80a009e <_ZdlPv>
	...

080a3618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3618:	4b18      	ldr	r3, [pc, #96]	; (80a367c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a361a:	681a      	ldr	r2, [r3, #0]
 80a361c:	07d1      	lsls	r1, r2, #31
 80a361e:	bf5c      	itt	pl
 80a3620:	2201      	movpl	r2, #1
 80a3622:	601a      	strpl	r2, [r3, #0]
 80a3624:	4b16      	ldr	r3, [pc, #88]	; (80a3680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3626:	681a      	ldr	r2, [r3, #0]
 80a3628:	07d2      	lsls	r2, r2, #31
 80a362a:	bf5c      	itt	pl
 80a362c:	2201      	movpl	r2, #1
 80a362e:	601a      	strpl	r2, [r3, #0]
 80a3630:	4b14      	ldr	r3, [pc, #80]	; (80a3684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3632:	681a      	ldr	r2, [r3, #0]
 80a3634:	07d0      	lsls	r0, r2, #31
 80a3636:	bf5c      	itt	pl
 80a3638:	2201      	movpl	r2, #1
 80a363a:	601a      	strpl	r2, [r3, #0]
 80a363c:	4b12      	ldr	r3, [pc, #72]	; (80a3688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a363e:	681a      	ldr	r2, [r3, #0]
 80a3640:	07d1      	lsls	r1, r2, #31
 80a3642:	bf5c      	itt	pl
 80a3644:	2201      	movpl	r2, #1
 80a3646:	601a      	strpl	r2, [r3, #0]
 80a3648:	4b10      	ldr	r3, [pc, #64]	; (80a368c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a364a:	681a      	ldr	r2, [r3, #0]
 80a364c:	07d2      	lsls	r2, r2, #31
 80a364e:	bf5c      	itt	pl
 80a3650:	2201      	movpl	r2, #1
 80a3652:	601a      	strpl	r2, [r3, #0]
 80a3654:	4b0e      	ldr	r3, [pc, #56]	; (80a3690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3656:	681a      	ldr	r2, [r3, #0]
 80a3658:	07d0      	lsls	r0, r2, #31
 80a365a:	bf5c      	itt	pl
 80a365c:	2201      	movpl	r2, #1
 80a365e:	601a      	strpl	r2, [r3, #0]
 80a3660:	4b0c      	ldr	r3, [pc, #48]	; (80a3694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3662:	681a      	ldr	r2, [r3, #0]
 80a3664:	07d1      	lsls	r1, r2, #31
 80a3666:	bf5c      	itt	pl
 80a3668:	2201      	movpl	r2, #1
 80a366a:	601a      	strpl	r2, [r3, #0]
 80a366c:	4b0a      	ldr	r3, [pc, #40]	; (80a3698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a366e:	681a      	ldr	r2, [r3, #0]
 80a3670:	07d2      	lsls	r2, r2, #31
 80a3672:	bf5c      	itt	pl
 80a3674:	2201      	movpl	r2, #1
 80a3676:	601a      	strpl	r2, [r3, #0]
 80a3678:	4770      	bx	lr
 80a367a:	bf00      	nop
 80a367c:	200009e0 	.word	0x200009e0
 80a3680:	200009dc 	.word	0x200009dc
 80a3684:	200009d8 	.word	0x200009d8
 80a3688:	200009d4 	.word	0x200009d4
 80a368c:	200009d0 	.word	0x200009d0
 80a3690:	200009cc 	.word	0x200009cc
 80a3694:	200009c8 	.word	0x200009c8
 80a3698:	200009c4 	.word	0x200009c4

080a369c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a369c:	4b24      	ldr	r3, [pc, #144]	; (80a3730 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a369e:	681a      	ldr	r2, [r3, #0]
 80a36a0:	07d0      	lsls	r0, r2, #31
 80a36a2:	bf5c      	itt	pl
 80a36a4:	2201      	movpl	r2, #1
 80a36a6:	601a      	strpl	r2, [r3, #0]
 80a36a8:	4b22      	ldr	r3, [pc, #136]	; (80a3734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a36aa:	681a      	ldr	r2, [r3, #0]
 80a36ac:	07d1      	lsls	r1, r2, #31
 80a36ae:	bf5c      	itt	pl
 80a36b0:	2201      	movpl	r2, #1
 80a36b2:	601a      	strpl	r2, [r3, #0]
 80a36b4:	4b20      	ldr	r3, [pc, #128]	; (80a3738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a36b6:	681a      	ldr	r2, [r3, #0]
 80a36b8:	07d2      	lsls	r2, r2, #31
 80a36ba:	bf5c      	itt	pl
 80a36bc:	2201      	movpl	r2, #1
 80a36be:	601a      	strpl	r2, [r3, #0]
 80a36c0:	4b1e      	ldr	r3, [pc, #120]	; (80a373c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a36c2:	681a      	ldr	r2, [r3, #0]
 80a36c4:	07d0      	lsls	r0, r2, #31
 80a36c6:	bf5c      	itt	pl
 80a36c8:	2201      	movpl	r2, #1
 80a36ca:	601a      	strpl	r2, [r3, #0]
 80a36cc:	4b1c      	ldr	r3, [pc, #112]	; (80a3740 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a36ce:	681a      	ldr	r2, [r3, #0]
 80a36d0:	07d1      	lsls	r1, r2, #31
 80a36d2:	bf5c      	itt	pl
 80a36d4:	2201      	movpl	r2, #1
 80a36d6:	601a      	strpl	r2, [r3, #0]
 80a36d8:	4b1a      	ldr	r3, [pc, #104]	; (80a3744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a36da:	681a      	ldr	r2, [r3, #0]
 80a36dc:	07d2      	lsls	r2, r2, #31
 80a36de:	bf5c      	itt	pl
 80a36e0:	2201      	movpl	r2, #1
 80a36e2:	601a      	strpl	r2, [r3, #0]
 80a36e4:	4b18      	ldr	r3, [pc, #96]	; (80a3748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a36e6:	681a      	ldr	r2, [r3, #0]
 80a36e8:	07d0      	lsls	r0, r2, #31
 80a36ea:	bf5c      	itt	pl
 80a36ec:	2201      	movpl	r2, #1
 80a36ee:	601a      	strpl	r2, [r3, #0]
 80a36f0:	4b16      	ldr	r3, [pc, #88]	; (80a374c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a36f2:	681a      	ldr	r2, [r3, #0]
 80a36f4:	07d1      	lsls	r1, r2, #31
 80a36f6:	bf5c      	itt	pl
 80a36f8:	2201      	movpl	r2, #1
 80a36fa:	601a      	strpl	r2, [r3, #0]
 80a36fc:	4b14      	ldr	r3, [pc, #80]	; (80a3750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a36fe:	681a      	ldr	r2, [r3, #0]
 80a3700:	07d2      	lsls	r2, r2, #31
 80a3702:	bf5c      	itt	pl
 80a3704:	2201      	movpl	r2, #1
 80a3706:	601a      	strpl	r2, [r3, #0]
 80a3708:	4b12      	ldr	r3, [pc, #72]	; (80a3754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a370a:	681a      	ldr	r2, [r3, #0]
 80a370c:	07d0      	lsls	r0, r2, #31
 80a370e:	bf5c      	itt	pl
 80a3710:	2201      	movpl	r2, #1
 80a3712:	601a      	strpl	r2, [r3, #0]
 80a3714:	4b10      	ldr	r3, [pc, #64]	; (80a3758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a3716:	681a      	ldr	r2, [r3, #0]
 80a3718:	07d1      	lsls	r1, r2, #31
 80a371a:	bf5c      	itt	pl
 80a371c:	2201      	movpl	r2, #1
 80a371e:	601a      	strpl	r2, [r3, #0]
 80a3720:	4b0e      	ldr	r3, [pc, #56]	; (80a375c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a3722:	681a      	ldr	r2, [r3, #0]
 80a3724:	07d2      	lsls	r2, r2, #31
 80a3726:	bf5c      	itt	pl
 80a3728:	2201      	movpl	r2, #1
 80a372a:	601a      	strpl	r2, [r3, #0]
 80a372c:	4770      	bx	lr
 80a372e:	bf00      	nop
 80a3730:	20000a10 	.word	0x20000a10
 80a3734:	20000a0c 	.word	0x20000a0c
 80a3738:	20000a08 	.word	0x20000a08
 80a373c:	20000a04 	.word	0x20000a04
 80a3740:	20000a00 	.word	0x20000a00
 80a3744:	200009fc 	.word	0x200009fc
 80a3748:	200009f8 	.word	0x200009f8
 80a374c:	200009f4 	.word	0x200009f4
 80a3750:	200009f0 	.word	0x200009f0
 80a3754:	200009ec 	.word	0x200009ec
 80a3758:	200009e8 	.word	0x200009e8
 80a375c:	200009e4 	.word	0x200009e4

080a3760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a3760:	4b24      	ldr	r3, [pc, #144]	; (80a37f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a3762:	681a      	ldr	r2, [r3, #0]
 80a3764:	07d0      	lsls	r0, r2, #31
 80a3766:	bf5c      	itt	pl
 80a3768:	2201      	movpl	r2, #1
 80a376a:	601a      	strpl	r2, [r3, #0]
 80a376c:	4b22      	ldr	r3, [pc, #136]	; (80a37f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a376e:	681a      	ldr	r2, [r3, #0]
 80a3770:	07d1      	lsls	r1, r2, #31
 80a3772:	bf5c      	itt	pl
 80a3774:	2201      	movpl	r2, #1
 80a3776:	601a      	strpl	r2, [r3, #0]
 80a3778:	4b20      	ldr	r3, [pc, #128]	; (80a37fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a377a:	681a      	ldr	r2, [r3, #0]
 80a377c:	07d2      	lsls	r2, r2, #31
 80a377e:	bf5c      	itt	pl
 80a3780:	2201      	movpl	r2, #1
 80a3782:	601a      	strpl	r2, [r3, #0]
 80a3784:	4b1e      	ldr	r3, [pc, #120]	; (80a3800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a3786:	681a      	ldr	r2, [r3, #0]
 80a3788:	07d0      	lsls	r0, r2, #31
 80a378a:	bf5c      	itt	pl
 80a378c:	2201      	movpl	r2, #1
 80a378e:	601a      	strpl	r2, [r3, #0]
 80a3790:	4b1c      	ldr	r3, [pc, #112]	; (80a3804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a3792:	681a      	ldr	r2, [r3, #0]
 80a3794:	07d1      	lsls	r1, r2, #31
 80a3796:	bf5c      	itt	pl
 80a3798:	2201      	movpl	r2, #1
 80a379a:	601a      	strpl	r2, [r3, #0]
 80a379c:	4b1a      	ldr	r3, [pc, #104]	; (80a3808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a379e:	681a      	ldr	r2, [r3, #0]
 80a37a0:	07d2      	lsls	r2, r2, #31
 80a37a2:	bf5c      	itt	pl
 80a37a4:	2201      	movpl	r2, #1
 80a37a6:	601a      	strpl	r2, [r3, #0]
 80a37a8:	4b18      	ldr	r3, [pc, #96]	; (80a380c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a37aa:	681a      	ldr	r2, [r3, #0]
 80a37ac:	07d0      	lsls	r0, r2, #31
 80a37ae:	bf5c      	itt	pl
 80a37b0:	2201      	movpl	r2, #1
 80a37b2:	601a      	strpl	r2, [r3, #0]
 80a37b4:	4b16      	ldr	r3, [pc, #88]	; (80a3810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a37b6:	681a      	ldr	r2, [r3, #0]
 80a37b8:	07d1      	lsls	r1, r2, #31
 80a37ba:	bf5c      	itt	pl
 80a37bc:	2201      	movpl	r2, #1
 80a37be:	601a      	strpl	r2, [r3, #0]
 80a37c0:	4b14      	ldr	r3, [pc, #80]	; (80a3814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a37c2:	681a      	ldr	r2, [r3, #0]
 80a37c4:	07d2      	lsls	r2, r2, #31
 80a37c6:	bf5c      	itt	pl
 80a37c8:	2201      	movpl	r2, #1
 80a37ca:	601a      	strpl	r2, [r3, #0]
 80a37cc:	4b12      	ldr	r3, [pc, #72]	; (80a3818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a37ce:	681a      	ldr	r2, [r3, #0]
 80a37d0:	07d0      	lsls	r0, r2, #31
 80a37d2:	bf5c      	itt	pl
 80a37d4:	2201      	movpl	r2, #1
 80a37d6:	601a      	strpl	r2, [r3, #0]
 80a37d8:	4b10      	ldr	r3, [pc, #64]	; (80a381c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a37da:	681a      	ldr	r2, [r3, #0]
 80a37dc:	07d1      	lsls	r1, r2, #31
 80a37de:	bf5c      	itt	pl
 80a37e0:	2201      	movpl	r2, #1
 80a37e2:	601a      	strpl	r2, [r3, #0]
 80a37e4:	4b0e      	ldr	r3, [pc, #56]	; (80a3820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a37e6:	681a      	ldr	r2, [r3, #0]
 80a37e8:	07d2      	lsls	r2, r2, #31
 80a37ea:	bf5c      	itt	pl
 80a37ec:	2201      	movpl	r2, #1
 80a37ee:	601a      	strpl	r2, [r3, #0]
 80a37f0:	4770      	bx	lr
 80a37f2:	bf00      	nop
 80a37f4:	20000a40 	.word	0x20000a40
 80a37f8:	20000a3c 	.word	0x20000a3c
 80a37fc:	20000a38 	.word	0x20000a38
 80a3800:	20000a34 	.word	0x20000a34
 80a3804:	20000a30 	.word	0x20000a30
 80a3808:	20000a2c 	.word	0x20000a2c
 80a380c:	20000a28 	.word	0x20000a28
 80a3810:	20000a24 	.word	0x20000a24
 80a3814:	20000a20 	.word	0x20000a20
 80a3818:	20000a1c 	.word	0x20000a1c
 80a381c:	20000a18 	.word	0x20000a18
 80a3820:	20000a14 	.word	0x20000a14

080a3824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3824:	4b18      	ldr	r3, [pc, #96]	; (80a3888 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3826:	681a      	ldr	r2, [r3, #0]
 80a3828:	07d1      	lsls	r1, r2, #31
 80a382a:	bf5c      	itt	pl
 80a382c:	2201      	movpl	r2, #1
 80a382e:	601a      	strpl	r2, [r3, #0]
 80a3830:	4b16      	ldr	r3, [pc, #88]	; (80a388c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3832:	681a      	ldr	r2, [r3, #0]
 80a3834:	07d2      	lsls	r2, r2, #31
 80a3836:	bf5c      	itt	pl
 80a3838:	2201      	movpl	r2, #1
 80a383a:	601a      	strpl	r2, [r3, #0]
 80a383c:	4b14      	ldr	r3, [pc, #80]	; (80a3890 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a383e:	681a      	ldr	r2, [r3, #0]
 80a3840:	07d0      	lsls	r0, r2, #31
 80a3842:	bf5c      	itt	pl
 80a3844:	2201      	movpl	r2, #1
 80a3846:	601a      	strpl	r2, [r3, #0]
 80a3848:	4b12      	ldr	r3, [pc, #72]	; (80a3894 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a384a:	681a      	ldr	r2, [r3, #0]
 80a384c:	07d1      	lsls	r1, r2, #31
 80a384e:	bf5c      	itt	pl
 80a3850:	2201      	movpl	r2, #1
 80a3852:	601a      	strpl	r2, [r3, #0]
 80a3854:	4b10      	ldr	r3, [pc, #64]	; (80a3898 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3856:	681a      	ldr	r2, [r3, #0]
 80a3858:	07d2      	lsls	r2, r2, #31
 80a385a:	bf5c      	itt	pl
 80a385c:	2201      	movpl	r2, #1
 80a385e:	601a      	strpl	r2, [r3, #0]
 80a3860:	4b0e      	ldr	r3, [pc, #56]	; (80a389c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3862:	681a      	ldr	r2, [r3, #0]
 80a3864:	07d0      	lsls	r0, r2, #31
 80a3866:	bf5c      	itt	pl
 80a3868:	2201      	movpl	r2, #1
 80a386a:	601a      	strpl	r2, [r3, #0]
 80a386c:	4b0c      	ldr	r3, [pc, #48]	; (80a38a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a386e:	681a      	ldr	r2, [r3, #0]
 80a3870:	07d1      	lsls	r1, r2, #31
 80a3872:	bf5c      	itt	pl
 80a3874:	2201      	movpl	r2, #1
 80a3876:	601a      	strpl	r2, [r3, #0]
 80a3878:	4b0a      	ldr	r3, [pc, #40]	; (80a38a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a387a:	681a      	ldr	r2, [r3, #0]
 80a387c:	07d2      	lsls	r2, r2, #31
 80a387e:	bf5c      	itt	pl
 80a3880:	2201      	movpl	r2, #1
 80a3882:	601a      	strpl	r2, [r3, #0]
 80a3884:	4770      	bx	lr
 80a3886:	bf00      	nop
 80a3888:	20000a60 	.word	0x20000a60
 80a388c:	20000a5c 	.word	0x20000a5c
 80a3890:	20000a58 	.word	0x20000a58
 80a3894:	20000a54 	.word	0x20000a54
 80a3898:	20000a50 	.word	0x20000a50
 80a389c:	20000a4c 	.word	0x20000a4c
 80a38a0:	20000a48 	.word	0x20000a48
 80a38a4:	20000a44 	.word	0x20000a44

080a38a8 <__aeabi_drsub>:
 80a38a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a38ac:	e002      	b.n	80a38b4 <__adddf3>
 80a38ae:	bf00      	nop

080a38b0 <__aeabi_dsub>:
 80a38b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a38b4 <__adddf3>:
 80a38b4:	b530      	push	{r4, r5, lr}
 80a38b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a38ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a38be:	ea94 0f05 	teq	r4, r5
 80a38c2:	bf08      	it	eq
 80a38c4:	ea90 0f02 	teqeq	r0, r2
 80a38c8:	bf1f      	itttt	ne
 80a38ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a38ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a38d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a38d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a38da:	f000 80e2 	beq.w	80a3aa2 <__adddf3+0x1ee>
 80a38de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a38e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a38e6:	bfb8      	it	lt
 80a38e8:	426d      	neglt	r5, r5
 80a38ea:	dd0c      	ble.n	80a3906 <__adddf3+0x52>
 80a38ec:	442c      	add	r4, r5
 80a38ee:	ea80 0202 	eor.w	r2, r0, r2
 80a38f2:	ea81 0303 	eor.w	r3, r1, r3
 80a38f6:	ea82 0000 	eor.w	r0, r2, r0
 80a38fa:	ea83 0101 	eor.w	r1, r3, r1
 80a38fe:	ea80 0202 	eor.w	r2, r0, r2
 80a3902:	ea81 0303 	eor.w	r3, r1, r3
 80a3906:	2d36      	cmp	r5, #54	; 0x36
 80a3908:	bf88      	it	hi
 80a390a:	bd30      	pophi	{r4, r5, pc}
 80a390c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3910:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3914:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3918:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a391c:	d002      	beq.n	80a3924 <__adddf3+0x70>
 80a391e:	4240      	negs	r0, r0
 80a3920:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3924:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3928:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a392c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3930:	d002      	beq.n	80a3938 <__adddf3+0x84>
 80a3932:	4252      	negs	r2, r2
 80a3934:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3938:	ea94 0f05 	teq	r4, r5
 80a393c:	f000 80a7 	beq.w	80a3a8e <__adddf3+0x1da>
 80a3940:	f1a4 0401 	sub.w	r4, r4, #1
 80a3944:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3948:	db0d      	blt.n	80a3966 <__adddf3+0xb2>
 80a394a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a394e:	fa22 f205 	lsr.w	r2, r2, r5
 80a3952:	1880      	adds	r0, r0, r2
 80a3954:	f141 0100 	adc.w	r1, r1, #0
 80a3958:	fa03 f20e 	lsl.w	r2, r3, lr
 80a395c:	1880      	adds	r0, r0, r2
 80a395e:	fa43 f305 	asr.w	r3, r3, r5
 80a3962:	4159      	adcs	r1, r3
 80a3964:	e00e      	b.n	80a3984 <__adddf3+0xd0>
 80a3966:	f1a5 0520 	sub.w	r5, r5, #32
 80a396a:	f10e 0e20 	add.w	lr, lr, #32
 80a396e:	2a01      	cmp	r2, #1
 80a3970:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a3974:	bf28      	it	cs
 80a3976:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a397a:	fa43 f305 	asr.w	r3, r3, r5
 80a397e:	18c0      	adds	r0, r0, r3
 80a3980:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a3984:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3988:	d507      	bpl.n	80a399a <__adddf3+0xe6>
 80a398a:	f04f 0e00 	mov.w	lr, #0
 80a398e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a3992:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a3996:	eb6e 0101 	sbc.w	r1, lr, r1
 80a399a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a399e:	d31b      	bcc.n	80a39d8 <__adddf3+0x124>
 80a39a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a39a4:	d30c      	bcc.n	80a39c0 <__adddf3+0x10c>
 80a39a6:	0849      	lsrs	r1, r1, #1
 80a39a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80a39ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a39b0:	f104 0401 	add.w	r4, r4, #1
 80a39b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a39b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a39bc:	f080 809a 	bcs.w	80a3af4 <__adddf3+0x240>
 80a39c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a39c4:	bf08      	it	eq
 80a39c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a39ca:	f150 0000 	adcs.w	r0, r0, #0
 80a39ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a39d2:	ea41 0105 	orr.w	r1, r1, r5
 80a39d6:	bd30      	pop	{r4, r5, pc}
 80a39d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a39dc:	4140      	adcs	r0, r0
 80a39de:	eb41 0101 	adc.w	r1, r1, r1
 80a39e2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a39e6:	f1a4 0401 	sub.w	r4, r4, #1
 80a39ea:	d1e9      	bne.n	80a39c0 <__adddf3+0x10c>
 80a39ec:	f091 0f00 	teq	r1, #0
 80a39f0:	bf04      	itt	eq
 80a39f2:	4601      	moveq	r1, r0
 80a39f4:	2000      	moveq	r0, #0
 80a39f6:	fab1 f381 	clz	r3, r1
 80a39fa:	bf08      	it	eq
 80a39fc:	3320      	addeq	r3, #32
 80a39fe:	f1a3 030b 	sub.w	r3, r3, #11
 80a3a02:	f1b3 0220 	subs.w	r2, r3, #32
 80a3a06:	da0c      	bge.n	80a3a22 <__adddf3+0x16e>
 80a3a08:	320c      	adds	r2, #12
 80a3a0a:	dd08      	ble.n	80a3a1e <__adddf3+0x16a>
 80a3a0c:	f102 0c14 	add.w	ip, r2, #20
 80a3a10:	f1c2 020c 	rsb	r2, r2, #12
 80a3a14:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3a18:	fa21 f102 	lsr.w	r1, r1, r2
 80a3a1c:	e00c      	b.n	80a3a38 <__adddf3+0x184>
 80a3a1e:	f102 0214 	add.w	r2, r2, #20
 80a3a22:	bfd8      	it	le
 80a3a24:	f1c2 0c20 	rsble	ip, r2, #32
 80a3a28:	fa01 f102 	lsl.w	r1, r1, r2
 80a3a2c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3a30:	bfdc      	itt	le
 80a3a32:	ea41 010c 	orrle.w	r1, r1, ip
 80a3a36:	4090      	lslle	r0, r2
 80a3a38:	1ae4      	subs	r4, r4, r3
 80a3a3a:	bfa2      	ittt	ge
 80a3a3c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a3a40:	4329      	orrge	r1, r5
 80a3a42:	bd30      	popge	{r4, r5, pc}
 80a3a44:	ea6f 0404 	mvn.w	r4, r4
 80a3a48:	3c1f      	subs	r4, #31
 80a3a4a:	da1c      	bge.n	80a3a86 <__adddf3+0x1d2>
 80a3a4c:	340c      	adds	r4, #12
 80a3a4e:	dc0e      	bgt.n	80a3a6e <__adddf3+0x1ba>
 80a3a50:	f104 0414 	add.w	r4, r4, #20
 80a3a54:	f1c4 0220 	rsb	r2, r4, #32
 80a3a58:	fa20 f004 	lsr.w	r0, r0, r4
 80a3a5c:	fa01 f302 	lsl.w	r3, r1, r2
 80a3a60:	ea40 0003 	orr.w	r0, r0, r3
 80a3a64:	fa21 f304 	lsr.w	r3, r1, r4
 80a3a68:	ea45 0103 	orr.w	r1, r5, r3
 80a3a6c:	bd30      	pop	{r4, r5, pc}
 80a3a6e:	f1c4 040c 	rsb	r4, r4, #12
 80a3a72:	f1c4 0220 	rsb	r2, r4, #32
 80a3a76:	fa20 f002 	lsr.w	r0, r0, r2
 80a3a7a:	fa01 f304 	lsl.w	r3, r1, r4
 80a3a7e:	ea40 0003 	orr.w	r0, r0, r3
 80a3a82:	4629      	mov	r1, r5
 80a3a84:	bd30      	pop	{r4, r5, pc}
 80a3a86:	fa21 f004 	lsr.w	r0, r1, r4
 80a3a8a:	4629      	mov	r1, r5
 80a3a8c:	bd30      	pop	{r4, r5, pc}
 80a3a8e:	f094 0f00 	teq	r4, #0
 80a3a92:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a3a96:	bf06      	itte	eq
 80a3a98:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3a9c:	3401      	addeq	r4, #1
 80a3a9e:	3d01      	subne	r5, #1
 80a3aa0:	e74e      	b.n	80a3940 <__adddf3+0x8c>
 80a3aa2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3aa6:	bf18      	it	ne
 80a3aa8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3aac:	d029      	beq.n	80a3b02 <__adddf3+0x24e>
 80a3aae:	ea94 0f05 	teq	r4, r5
 80a3ab2:	bf08      	it	eq
 80a3ab4:	ea90 0f02 	teqeq	r0, r2
 80a3ab8:	d005      	beq.n	80a3ac6 <__adddf3+0x212>
 80a3aba:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3abe:	bf04      	itt	eq
 80a3ac0:	4619      	moveq	r1, r3
 80a3ac2:	4610      	moveq	r0, r2
 80a3ac4:	bd30      	pop	{r4, r5, pc}
 80a3ac6:	ea91 0f03 	teq	r1, r3
 80a3aca:	bf1e      	ittt	ne
 80a3acc:	2100      	movne	r1, #0
 80a3ace:	2000      	movne	r0, #0
 80a3ad0:	bd30      	popne	{r4, r5, pc}
 80a3ad2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a3ad6:	d105      	bne.n	80a3ae4 <__adddf3+0x230>
 80a3ad8:	0040      	lsls	r0, r0, #1
 80a3ada:	4149      	adcs	r1, r1
 80a3adc:	bf28      	it	cs
 80a3ade:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a3ae2:	bd30      	pop	{r4, r5, pc}
 80a3ae4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3ae8:	bf3c      	itt	cc
 80a3aea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3aee:	bd30      	popcc	{r4, r5, pc}
 80a3af0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3af4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3af8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3afc:	f04f 0000 	mov.w	r0, #0
 80a3b00:	bd30      	pop	{r4, r5, pc}
 80a3b02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3b06:	bf1a      	itte	ne
 80a3b08:	4619      	movne	r1, r3
 80a3b0a:	4610      	movne	r0, r2
 80a3b0c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3b10:	bf1c      	itt	ne
 80a3b12:	460b      	movne	r3, r1
 80a3b14:	4602      	movne	r2, r0
 80a3b16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3b1a:	bf06      	itte	eq
 80a3b1c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3b20:	ea91 0f03 	teqeq	r1, r3
 80a3b24:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3b28:	bd30      	pop	{r4, r5, pc}
 80a3b2a:	bf00      	nop

080a3b2c <__aeabi_ui2d>:
 80a3b2c:	f090 0f00 	teq	r0, #0
 80a3b30:	bf04      	itt	eq
 80a3b32:	2100      	moveq	r1, #0
 80a3b34:	4770      	bxeq	lr
 80a3b36:	b530      	push	{r4, r5, lr}
 80a3b38:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3b3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3b40:	f04f 0500 	mov.w	r5, #0
 80a3b44:	f04f 0100 	mov.w	r1, #0
 80a3b48:	e750      	b.n	80a39ec <__adddf3+0x138>
 80a3b4a:	bf00      	nop

080a3b4c <__aeabi_i2d>:
 80a3b4c:	f090 0f00 	teq	r0, #0
 80a3b50:	bf04      	itt	eq
 80a3b52:	2100      	moveq	r1, #0
 80a3b54:	4770      	bxeq	lr
 80a3b56:	b530      	push	{r4, r5, lr}
 80a3b58:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3b5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3b60:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a3b64:	bf48      	it	mi
 80a3b66:	4240      	negmi	r0, r0
 80a3b68:	f04f 0100 	mov.w	r1, #0
 80a3b6c:	e73e      	b.n	80a39ec <__adddf3+0x138>
 80a3b6e:	bf00      	nop

080a3b70 <__aeabi_f2d>:
 80a3b70:	0042      	lsls	r2, r0, #1
 80a3b72:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a3b76:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3b7a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a3b7e:	bf1f      	itttt	ne
 80a3b80:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3b84:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3b88:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3b8c:	4770      	bxne	lr
 80a3b8e:	f092 0f00 	teq	r2, #0
 80a3b92:	bf14      	ite	ne
 80a3b94:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3b98:	4770      	bxeq	lr
 80a3b9a:	b530      	push	{r4, r5, lr}
 80a3b9c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3ba0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3ba4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3ba8:	e720      	b.n	80a39ec <__adddf3+0x138>
 80a3baa:	bf00      	nop

080a3bac <__aeabi_ul2d>:
 80a3bac:	ea50 0201 	orrs.w	r2, r0, r1
 80a3bb0:	bf08      	it	eq
 80a3bb2:	4770      	bxeq	lr
 80a3bb4:	b530      	push	{r4, r5, lr}
 80a3bb6:	f04f 0500 	mov.w	r5, #0
 80a3bba:	e00a      	b.n	80a3bd2 <__aeabi_l2d+0x16>

080a3bbc <__aeabi_l2d>:
 80a3bbc:	ea50 0201 	orrs.w	r2, r0, r1
 80a3bc0:	bf08      	it	eq
 80a3bc2:	4770      	bxeq	lr
 80a3bc4:	b530      	push	{r4, r5, lr}
 80a3bc6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3bca:	d502      	bpl.n	80a3bd2 <__aeabi_l2d+0x16>
 80a3bcc:	4240      	negs	r0, r0
 80a3bce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3bd2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3bd6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3bda:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a3bde:	f43f aedc 	beq.w	80a399a <__adddf3+0xe6>
 80a3be2:	f04f 0203 	mov.w	r2, #3
 80a3be6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3bea:	bf18      	it	ne
 80a3bec:	3203      	addne	r2, #3
 80a3bee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3bf2:	bf18      	it	ne
 80a3bf4:	3203      	addne	r2, #3
 80a3bf6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3bfa:	f1c2 0320 	rsb	r3, r2, #32
 80a3bfe:	fa00 fc03 	lsl.w	ip, r0, r3
 80a3c02:	fa20 f002 	lsr.w	r0, r0, r2
 80a3c06:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3c0a:	ea40 000e 	orr.w	r0, r0, lr
 80a3c0e:	fa21 f102 	lsr.w	r1, r1, r2
 80a3c12:	4414      	add	r4, r2
 80a3c14:	e6c1      	b.n	80a399a <__adddf3+0xe6>
 80a3c16:	bf00      	nop

080a3c18 <__aeabi_dmul>:
 80a3c18:	b570      	push	{r4, r5, r6, lr}
 80a3c1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3c1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3c22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3c26:	bf1d      	ittte	ne
 80a3c28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3c2c:	ea94 0f0c 	teqne	r4, ip
 80a3c30:	ea95 0f0c 	teqne	r5, ip
 80a3c34:	f000 f8de 	bleq	80a3df4 <__aeabi_dmul+0x1dc>
 80a3c38:	442c      	add	r4, r5
 80a3c3a:	ea81 0603 	eor.w	r6, r1, r3
 80a3c3e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a3c42:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a3c46:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a3c4a:	bf18      	it	ne
 80a3c4c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a3c50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3c54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a3c58:	d038      	beq.n	80a3ccc <__aeabi_dmul+0xb4>
 80a3c5a:	fba0 ce02 	umull	ip, lr, r0, r2
 80a3c5e:	f04f 0500 	mov.w	r5, #0
 80a3c62:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a3c66:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a3c6a:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a3c6e:	f04f 0600 	mov.w	r6, #0
 80a3c72:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a3c76:	f09c 0f00 	teq	ip, #0
 80a3c7a:	bf18      	it	ne
 80a3c7c:	f04e 0e01 	orrne.w	lr, lr, #1
 80a3c80:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a3c84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a3c88:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3c8c:	d204      	bcs.n	80a3c98 <__aeabi_dmul+0x80>
 80a3c8e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a3c92:	416d      	adcs	r5, r5
 80a3c94:	eb46 0606 	adc.w	r6, r6, r6
 80a3c98:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3c9c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3ca0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3ca4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a3ca8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3cac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3cb0:	bf88      	it	hi
 80a3cb2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3cb6:	d81e      	bhi.n	80a3cf6 <__aeabi_dmul+0xde>
 80a3cb8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3cbc:	bf08      	it	eq
 80a3cbe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a3cc2:	f150 0000 	adcs.w	r0, r0, #0
 80a3cc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3cca:	bd70      	pop	{r4, r5, r6, pc}
 80a3ccc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a3cd0:	ea46 0101 	orr.w	r1, r6, r1
 80a3cd4:	ea40 0002 	orr.w	r0, r0, r2
 80a3cd8:	ea81 0103 	eor.w	r1, r1, r3
 80a3cdc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a3ce0:	bfc2      	ittt	gt
 80a3ce2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3ce6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3cea:	bd70      	popgt	{r4, r5, r6, pc}
 80a3cec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3cf0:	f04f 0e00 	mov.w	lr, #0
 80a3cf4:	3c01      	subs	r4, #1
 80a3cf6:	f300 80ab 	bgt.w	80a3e50 <__aeabi_dmul+0x238>
 80a3cfa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a3cfe:	bfde      	ittt	le
 80a3d00:	2000      	movle	r0, #0
 80a3d02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a3d06:	bd70      	pople	{r4, r5, r6, pc}
 80a3d08:	f1c4 0400 	rsb	r4, r4, #0
 80a3d0c:	3c20      	subs	r4, #32
 80a3d0e:	da35      	bge.n	80a3d7c <__aeabi_dmul+0x164>
 80a3d10:	340c      	adds	r4, #12
 80a3d12:	dc1b      	bgt.n	80a3d4c <__aeabi_dmul+0x134>
 80a3d14:	f104 0414 	add.w	r4, r4, #20
 80a3d18:	f1c4 0520 	rsb	r5, r4, #32
 80a3d1c:	fa00 f305 	lsl.w	r3, r0, r5
 80a3d20:	fa20 f004 	lsr.w	r0, r0, r4
 80a3d24:	fa01 f205 	lsl.w	r2, r1, r5
 80a3d28:	ea40 0002 	orr.w	r0, r0, r2
 80a3d2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a3d30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3d34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3d38:	fa21 f604 	lsr.w	r6, r1, r4
 80a3d3c:	eb42 0106 	adc.w	r1, r2, r6
 80a3d40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3d44:	bf08      	it	eq
 80a3d46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3d4a:	bd70      	pop	{r4, r5, r6, pc}
 80a3d4c:	f1c4 040c 	rsb	r4, r4, #12
 80a3d50:	f1c4 0520 	rsb	r5, r4, #32
 80a3d54:	fa00 f304 	lsl.w	r3, r0, r4
 80a3d58:	fa20 f005 	lsr.w	r0, r0, r5
 80a3d5c:	fa01 f204 	lsl.w	r2, r1, r4
 80a3d60:	ea40 0002 	orr.w	r0, r0, r2
 80a3d64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3d68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3d6c:	f141 0100 	adc.w	r1, r1, #0
 80a3d70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3d74:	bf08      	it	eq
 80a3d76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3d7a:	bd70      	pop	{r4, r5, r6, pc}
 80a3d7c:	f1c4 0520 	rsb	r5, r4, #32
 80a3d80:	fa00 f205 	lsl.w	r2, r0, r5
 80a3d84:	ea4e 0e02 	orr.w	lr, lr, r2
 80a3d88:	fa20 f304 	lsr.w	r3, r0, r4
 80a3d8c:	fa01 f205 	lsl.w	r2, r1, r5
 80a3d90:	ea43 0302 	orr.w	r3, r3, r2
 80a3d94:	fa21 f004 	lsr.w	r0, r1, r4
 80a3d98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3d9c:	fa21 f204 	lsr.w	r2, r1, r4
 80a3da0:	ea20 0002 	bic.w	r0, r0, r2
 80a3da4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a3da8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3dac:	bf08      	it	eq
 80a3dae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3db2:	bd70      	pop	{r4, r5, r6, pc}
 80a3db4:	f094 0f00 	teq	r4, #0
 80a3db8:	d10f      	bne.n	80a3dda <__aeabi_dmul+0x1c2>
 80a3dba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a3dbe:	0040      	lsls	r0, r0, #1
 80a3dc0:	eb41 0101 	adc.w	r1, r1, r1
 80a3dc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3dc8:	bf08      	it	eq
 80a3dca:	3c01      	subeq	r4, #1
 80a3dcc:	d0f7      	beq.n	80a3dbe <__aeabi_dmul+0x1a6>
 80a3dce:	ea41 0106 	orr.w	r1, r1, r6
 80a3dd2:	f095 0f00 	teq	r5, #0
 80a3dd6:	bf18      	it	ne
 80a3dd8:	4770      	bxne	lr
 80a3dda:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a3dde:	0052      	lsls	r2, r2, #1
 80a3de0:	eb43 0303 	adc.w	r3, r3, r3
 80a3de4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3de8:	bf08      	it	eq
 80a3dea:	3d01      	subeq	r5, #1
 80a3dec:	d0f7      	beq.n	80a3dde <__aeabi_dmul+0x1c6>
 80a3dee:	ea43 0306 	orr.w	r3, r3, r6
 80a3df2:	4770      	bx	lr
 80a3df4:	ea94 0f0c 	teq	r4, ip
 80a3df8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3dfc:	bf18      	it	ne
 80a3dfe:	ea95 0f0c 	teqne	r5, ip
 80a3e02:	d00c      	beq.n	80a3e1e <__aeabi_dmul+0x206>
 80a3e04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3e08:	bf18      	it	ne
 80a3e0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3e0e:	d1d1      	bne.n	80a3db4 <__aeabi_dmul+0x19c>
 80a3e10:	ea81 0103 	eor.w	r1, r1, r3
 80a3e14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3e18:	f04f 0000 	mov.w	r0, #0
 80a3e1c:	bd70      	pop	{r4, r5, r6, pc}
 80a3e1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3e22:	bf06      	itte	eq
 80a3e24:	4610      	moveq	r0, r2
 80a3e26:	4619      	moveq	r1, r3
 80a3e28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3e2c:	d019      	beq.n	80a3e62 <__aeabi_dmul+0x24a>
 80a3e2e:	ea94 0f0c 	teq	r4, ip
 80a3e32:	d102      	bne.n	80a3e3a <__aeabi_dmul+0x222>
 80a3e34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a3e38:	d113      	bne.n	80a3e62 <__aeabi_dmul+0x24a>
 80a3e3a:	ea95 0f0c 	teq	r5, ip
 80a3e3e:	d105      	bne.n	80a3e4c <__aeabi_dmul+0x234>
 80a3e40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a3e44:	bf1c      	itt	ne
 80a3e46:	4610      	movne	r0, r2
 80a3e48:	4619      	movne	r1, r3
 80a3e4a:	d10a      	bne.n	80a3e62 <__aeabi_dmul+0x24a>
 80a3e4c:	ea81 0103 	eor.w	r1, r1, r3
 80a3e50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3e54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3e58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3e5c:	f04f 0000 	mov.w	r0, #0
 80a3e60:	bd70      	pop	{r4, r5, r6, pc}
 80a3e62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3e66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a3e6a:	bd70      	pop	{r4, r5, r6, pc}

080a3e6c <__aeabi_ddiv>:
 80a3e6c:	b570      	push	{r4, r5, r6, lr}
 80a3e6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3e72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3e76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3e7a:	bf1d      	ittte	ne
 80a3e7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3e80:	ea94 0f0c 	teqne	r4, ip
 80a3e84:	ea95 0f0c 	teqne	r5, ip
 80a3e88:	f000 f8a7 	bleq	80a3fda <__aeabi_ddiv+0x16e>
 80a3e8c:	eba4 0405 	sub.w	r4, r4, r5
 80a3e90:	ea81 0e03 	eor.w	lr, r1, r3
 80a3e94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3e98:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3e9c:	f000 8088 	beq.w	80a3fb0 <__aeabi_ddiv+0x144>
 80a3ea0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3ea4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3ea8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3eac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3eb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3eb4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3eb8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3ebc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3ec0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3ec4:	429d      	cmp	r5, r3
 80a3ec6:	bf08      	it	eq
 80a3ec8:	4296      	cmpeq	r6, r2
 80a3eca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a3ece:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a3ed2:	d202      	bcs.n	80a3eda <__aeabi_ddiv+0x6e>
 80a3ed4:	085b      	lsrs	r3, r3, #1
 80a3ed6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3eda:	1ab6      	subs	r6, r6, r2
 80a3edc:	eb65 0503 	sbc.w	r5, r5, r3
 80a3ee0:	085b      	lsrs	r3, r3, #1
 80a3ee2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3ee6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a3eea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a3eee:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3ef2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3ef6:	bf22      	ittt	cs
 80a3ef8:	1ab6      	subcs	r6, r6, r2
 80a3efa:	4675      	movcs	r5, lr
 80a3efc:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3f00:	085b      	lsrs	r3, r3, #1
 80a3f02:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3f06:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3f0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3f0e:	bf22      	ittt	cs
 80a3f10:	1ab6      	subcs	r6, r6, r2
 80a3f12:	4675      	movcs	r5, lr
 80a3f14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3f18:	085b      	lsrs	r3, r3, #1
 80a3f1a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3f1e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3f22:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3f26:	bf22      	ittt	cs
 80a3f28:	1ab6      	subcs	r6, r6, r2
 80a3f2a:	4675      	movcs	r5, lr
 80a3f2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3f30:	085b      	lsrs	r3, r3, #1
 80a3f32:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3f36:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3f3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3f3e:	bf22      	ittt	cs
 80a3f40:	1ab6      	subcs	r6, r6, r2
 80a3f42:	4675      	movcs	r5, lr
 80a3f44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3f48:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3f4c:	d018      	beq.n	80a3f80 <__aeabi_ddiv+0x114>
 80a3f4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a3f52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a3f56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a3f5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3f5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a3f62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a3f66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a3f6a:	d1c0      	bne.n	80a3eee <__aeabi_ddiv+0x82>
 80a3f6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3f70:	d10b      	bne.n	80a3f8a <__aeabi_ddiv+0x11e>
 80a3f72:	ea41 0100 	orr.w	r1, r1, r0
 80a3f76:	f04f 0000 	mov.w	r0, #0
 80a3f7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3f7e:	e7b6      	b.n	80a3eee <__aeabi_ddiv+0x82>
 80a3f80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3f84:	bf04      	itt	eq
 80a3f86:	4301      	orreq	r1, r0
 80a3f88:	2000      	moveq	r0, #0
 80a3f8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3f8e:	bf88      	it	hi
 80a3f90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3f94:	f63f aeaf 	bhi.w	80a3cf6 <__aeabi_dmul+0xde>
 80a3f98:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3f9c:	bf04      	itt	eq
 80a3f9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3fa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3fa6:	f150 0000 	adcs.w	r0, r0, #0
 80a3faa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3fae:	bd70      	pop	{r4, r5, r6, pc}
 80a3fb0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3fb4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3fb8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3fbc:	bfc2      	ittt	gt
 80a3fbe:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3fc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3fc6:	bd70      	popgt	{r4, r5, r6, pc}
 80a3fc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3fcc:	f04f 0e00 	mov.w	lr, #0
 80a3fd0:	3c01      	subs	r4, #1
 80a3fd2:	e690      	b.n	80a3cf6 <__aeabi_dmul+0xde>
 80a3fd4:	ea45 0e06 	orr.w	lr, r5, r6
 80a3fd8:	e68d      	b.n	80a3cf6 <__aeabi_dmul+0xde>
 80a3fda:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3fde:	ea94 0f0c 	teq	r4, ip
 80a3fe2:	bf08      	it	eq
 80a3fe4:	ea95 0f0c 	teqeq	r5, ip
 80a3fe8:	f43f af3b 	beq.w	80a3e62 <__aeabi_dmul+0x24a>
 80a3fec:	ea94 0f0c 	teq	r4, ip
 80a3ff0:	d10a      	bne.n	80a4008 <__aeabi_ddiv+0x19c>
 80a3ff2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3ff6:	f47f af34 	bne.w	80a3e62 <__aeabi_dmul+0x24a>
 80a3ffa:	ea95 0f0c 	teq	r5, ip
 80a3ffe:	f47f af25 	bne.w	80a3e4c <__aeabi_dmul+0x234>
 80a4002:	4610      	mov	r0, r2
 80a4004:	4619      	mov	r1, r3
 80a4006:	e72c      	b.n	80a3e62 <__aeabi_dmul+0x24a>
 80a4008:	ea95 0f0c 	teq	r5, ip
 80a400c:	d106      	bne.n	80a401c <__aeabi_ddiv+0x1b0>
 80a400e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4012:	f43f aefd 	beq.w	80a3e10 <__aeabi_dmul+0x1f8>
 80a4016:	4610      	mov	r0, r2
 80a4018:	4619      	mov	r1, r3
 80a401a:	e722      	b.n	80a3e62 <__aeabi_dmul+0x24a>
 80a401c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4020:	bf18      	it	ne
 80a4022:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4026:	f47f aec5 	bne.w	80a3db4 <__aeabi_dmul+0x19c>
 80a402a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a402e:	f47f af0d 	bne.w	80a3e4c <__aeabi_dmul+0x234>
 80a4032:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a4036:	f47f aeeb 	bne.w	80a3e10 <__aeabi_dmul+0x1f8>
 80a403a:	e712      	b.n	80a3e62 <__aeabi_dmul+0x24a>

080a403c <__gedf2>:
 80a403c:	f04f 3cff 	mov.w	ip, #4294967295
 80a4040:	e006      	b.n	80a4050 <__cmpdf2+0x4>
 80a4042:	bf00      	nop

080a4044 <__ledf2>:
 80a4044:	f04f 0c01 	mov.w	ip, #1
 80a4048:	e002      	b.n	80a4050 <__cmpdf2+0x4>
 80a404a:	bf00      	nop

080a404c <__cmpdf2>:
 80a404c:	f04f 0c01 	mov.w	ip, #1
 80a4050:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4054:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4058:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a405c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4060:	bf18      	it	ne
 80a4062:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a4066:	d01b      	beq.n	80a40a0 <__cmpdf2+0x54>
 80a4068:	b001      	add	sp, #4
 80a406a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a406e:	bf0c      	ite	eq
 80a4070:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a4074:	ea91 0f03 	teqne	r1, r3
 80a4078:	bf02      	ittt	eq
 80a407a:	ea90 0f02 	teqeq	r0, r2
 80a407e:	2000      	moveq	r0, #0
 80a4080:	4770      	bxeq	lr
 80a4082:	f110 0f00 	cmn.w	r0, #0
 80a4086:	ea91 0f03 	teq	r1, r3
 80a408a:	bf58      	it	pl
 80a408c:	4299      	cmppl	r1, r3
 80a408e:	bf08      	it	eq
 80a4090:	4290      	cmpeq	r0, r2
 80a4092:	bf2c      	ite	cs
 80a4094:	17d8      	asrcs	r0, r3, #31
 80a4096:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a409a:	f040 0001 	orr.w	r0, r0, #1
 80a409e:	4770      	bx	lr
 80a40a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a40a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a40a8:	d102      	bne.n	80a40b0 <__cmpdf2+0x64>
 80a40aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a40ae:	d107      	bne.n	80a40c0 <__cmpdf2+0x74>
 80a40b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a40b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a40b8:	d1d6      	bne.n	80a4068 <__cmpdf2+0x1c>
 80a40ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a40be:	d0d3      	beq.n	80a4068 <__cmpdf2+0x1c>
 80a40c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a40c4:	4770      	bx	lr
 80a40c6:	bf00      	nop

080a40c8 <__aeabi_cdrcmple>:
 80a40c8:	4684      	mov	ip, r0
 80a40ca:	4610      	mov	r0, r2
 80a40cc:	4662      	mov	r2, ip
 80a40ce:	468c      	mov	ip, r1
 80a40d0:	4619      	mov	r1, r3
 80a40d2:	4663      	mov	r3, ip
 80a40d4:	e000      	b.n	80a40d8 <__aeabi_cdcmpeq>
 80a40d6:	bf00      	nop

080a40d8 <__aeabi_cdcmpeq>:
 80a40d8:	b501      	push	{r0, lr}
 80a40da:	f7ff ffb7 	bl	80a404c <__cmpdf2>
 80a40de:	2800      	cmp	r0, #0
 80a40e0:	bf48      	it	mi
 80a40e2:	f110 0f00 	cmnmi.w	r0, #0
 80a40e6:	bd01      	pop	{r0, pc}

080a40e8 <__aeabi_dcmpeq>:
 80a40e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a40ec:	f7ff fff4 	bl	80a40d8 <__aeabi_cdcmpeq>
 80a40f0:	bf0c      	ite	eq
 80a40f2:	2001      	moveq	r0, #1
 80a40f4:	2000      	movne	r0, #0
 80a40f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a40fa:	bf00      	nop

080a40fc <__aeabi_dcmplt>:
 80a40fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4100:	f7ff ffea 	bl	80a40d8 <__aeabi_cdcmpeq>
 80a4104:	bf34      	ite	cc
 80a4106:	2001      	movcc	r0, #1
 80a4108:	2000      	movcs	r0, #0
 80a410a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a410e:	bf00      	nop

080a4110 <__aeabi_dcmple>:
 80a4110:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4114:	f7ff ffe0 	bl	80a40d8 <__aeabi_cdcmpeq>
 80a4118:	bf94      	ite	ls
 80a411a:	2001      	movls	r0, #1
 80a411c:	2000      	movhi	r0, #0
 80a411e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4122:	bf00      	nop

080a4124 <__aeabi_dcmpge>:
 80a4124:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4128:	f7ff ffce 	bl	80a40c8 <__aeabi_cdrcmple>
 80a412c:	bf94      	ite	ls
 80a412e:	2001      	movls	r0, #1
 80a4130:	2000      	movhi	r0, #0
 80a4132:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4136:	bf00      	nop

080a4138 <__aeabi_dcmpgt>:
 80a4138:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a413c:	f7ff ffc4 	bl	80a40c8 <__aeabi_cdrcmple>
 80a4140:	bf34      	ite	cc
 80a4142:	2001      	movcc	r0, #1
 80a4144:	2000      	movcs	r0, #0
 80a4146:	f85d fb08 	ldr.w	pc, [sp], #8
 80a414a:	bf00      	nop

080a414c <__aeabi_d2iz>:
 80a414c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4150:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4154:	d215      	bcs.n	80a4182 <__aeabi_d2iz+0x36>
 80a4156:	d511      	bpl.n	80a417c <__aeabi_d2iz+0x30>
 80a4158:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a415c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4160:	d912      	bls.n	80a4188 <__aeabi_d2iz+0x3c>
 80a4162:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4166:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a416a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a416e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4172:	fa23 f002 	lsr.w	r0, r3, r2
 80a4176:	bf18      	it	ne
 80a4178:	4240      	negne	r0, r0
 80a417a:	4770      	bx	lr
 80a417c:	f04f 0000 	mov.w	r0, #0
 80a4180:	4770      	bx	lr
 80a4182:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4186:	d105      	bne.n	80a4194 <__aeabi_d2iz+0x48>
 80a4188:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a418c:	bf08      	it	eq
 80a418e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4192:	4770      	bx	lr
 80a4194:	f04f 0000 	mov.w	r0, #0
 80a4198:	4770      	bx	lr
 80a419a:	bf00      	nop

080a419c <__aeabi_d2uiz>:
 80a419c:	004a      	lsls	r2, r1, #1
 80a419e:	d211      	bcs.n	80a41c4 <__aeabi_d2uiz+0x28>
 80a41a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a41a4:	d211      	bcs.n	80a41ca <__aeabi_d2uiz+0x2e>
 80a41a6:	d50d      	bpl.n	80a41c4 <__aeabi_d2uiz+0x28>
 80a41a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a41ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a41b0:	d40e      	bmi.n	80a41d0 <__aeabi_d2uiz+0x34>
 80a41b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a41b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a41ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a41be:	fa23 f002 	lsr.w	r0, r3, r2
 80a41c2:	4770      	bx	lr
 80a41c4:	f04f 0000 	mov.w	r0, #0
 80a41c8:	4770      	bx	lr
 80a41ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a41ce:	d102      	bne.n	80a41d6 <__aeabi_d2uiz+0x3a>
 80a41d0:	f04f 30ff 	mov.w	r0, #4294967295
 80a41d4:	4770      	bx	lr
 80a41d6:	f04f 0000 	mov.w	r0, #0
 80a41da:	4770      	bx	lr

080a41dc <__cxa_atexit>:
 80a41dc:	b510      	push	{r4, lr}
 80a41de:	4c05      	ldr	r4, [pc, #20]	; (80a41f4 <__cxa_atexit+0x18>)
 80a41e0:	4613      	mov	r3, r2
 80a41e2:	b12c      	cbz	r4, 80a41f0 <__cxa_atexit+0x14>
 80a41e4:	460a      	mov	r2, r1
 80a41e6:	4601      	mov	r1, r0
 80a41e8:	2002      	movs	r0, #2
 80a41ea:	f3af 8000 	nop.w
 80a41ee:	bd10      	pop	{r4, pc}
 80a41f0:	4620      	mov	r0, r4
 80a41f2:	bd10      	pop	{r4, pc}
 80a41f4:	00000000 	.word	0x00000000

080a41f8 <memcpy>:
 80a41f8:	b510      	push	{r4, lr}
 80a41fa:	1e43      	subs	r3, r0, #1
 80a41fc:	440a      	add	r2, r1
 80a41fe:	4291      	cmp	r1, r2
 80a4200:	d004      	beq.n	80a420c <memcpy+0x14>
 80a4202:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4206:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a420a:	e7f8      	b.n	80a41fe <memcpy+0x6>
 80a420c:	bd10      	pop	{r4, pc}

080a420e <memset>:
 80a420e:	4603      	mov	r3, r0
 80a4210:	4402      	add	r2, r0
 80a4212:	4293      	cmp	r3, r2
 80a4214:	d002      	beq.n	80a421c <memset+0xe>
 80a4216:	f803 1b01 	strb.w	r1, [r3], #1
 80a421a:	e7fa      	b.n	80a4212 <memset+0x4>
 80a421c:	4770      	bx	lr
	...

080a4220 <srand>:
 80a4220:	b538      	push	{r3, r4, r5, lr}
 80a4222:	4b12      	ldr	r3, [pc, #72]	; (80a426c <srand+0x4c>)
 80a4224:	4605      	mov	r5, r0
 80a4226:	681c      	ldr	r4, [r3, #0]
 80a4228:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a422a:	b9d3      	cbnz	r3, 80a4262 <srand+0x42>
 80a422c:	2018      	movs	r0, #24
 80a422e:	f7fe fc1d 	bl	80a2a6c <malloc>
 80a4232:	f243 330e 	movw	r3, #13070	; 0x330e
 80a4236:	63a0      	str	r0, [r4, #56]	; 0x38
 80a4238:	8003      	strh	r3, [r0, #0]
 80a423a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a423e:	8043      	strh	r3, [r0, #2]
 80a4240:	f241 2334 	movw	r3, #4660	; 0x1234
 80a4244:	8083      	strh	r3, [r0, #4]
 80a4246:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a424a:	80c3      	strh	r3, [r0, #6]
 80a424c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a4250:	8103      	strh	r3, [r0, #8]
 80a4252:	2305      	movs	r3, #5
 80a4254:	8143      	strh	r3, [r0, #10]
 80a4256:	230b      	movs	r3, #11
 80a4258:	8183      	strh	r3, [r0, #12]
 80a425a:	2201      	movs	r2, #1
 80a425c:	2300      	movs	r3, #0
 80a425e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a4262:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4264:	2200      	movs	r2, #0
 80a4266:	611d      	str	r5, [r3, #16]
 80a4268:	615a      	str	r2, [r3, #20]
 80a426a:	bd38      	pop	{r3, r4, r5, pc}
 80a426c:	2000047c 	.word	0x2000047c

080a4270 <rand>:
 80a4270:	4b19      	ldr	r3, [pc, #100]	; (80a42d8 <rand+0x68>)
 80a4272:	b510      	push	{r4, lr}
 80a4274:	681c      	ldr	r4, [r3, #0]
 80a4276:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4278:	b9d3      	cbnz	r3, 80a42b0 <rand+0x40>
 80a427a:	2018      	movs	r0, #24
 80a427c:	f7fe fbf6 	bl	80a2a6c <malloc>
 80a4280:	f243 330e 	movw	r3, #13070	; 0x330e
 80a4284:	63a0      	str	r0, [r4, #56]	; 0x38
 80a4286:	8003      	strh	r3, [r0, #0]
 80a4288:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a428c:	8043      	strh	r3, [r0, #2]
 80a428e:	f241 2334 	movw	r3, #4660	; 0x1234
 80a4292:	8083      	strh	r3, [r0, #4]
 80a4294:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a4298:	80c3      	strh	r3, [r0, #6]
 80a429a:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a429e:	8103      	strh	r3, [r0, #8]
 80a42a0:	2305      	movs	r3, #5
 80a42a2:	8143      	strh	r3, [r0, #10]
 80a42a4:	230b      	movs	r3, #11
 80a42a6:	8183      	strh	r3, [r0, #12]
 80a42a8:	2201      	movs	r2, #1
 80a42aa:	2300      	movs	r3, #0
 80a42ac:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a42b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a42b2:	4c0a      	ldr	r4, [pc, #40]	; (80a42dc <rand+0x6c>)
 80a42b4:	690b      	ldr	r3, [r1, #16]
 80a42b6:	6948      	ldr	r0, [r1, #20]
 80a42b8:	435c      	muls	r4, r3
 80a42ba:	4a09      	ldr	r2, [pc, #36]	; (80a42e0 <rand+0x70>)
 80a42bc:	fb02 4000 	mla	r0, r2, r0, r4
 80a42c0:	fba3 2302 	umull	r2, r3, r3, r2
 80a42c4:	3201      	adds	r2, #1
 80a42c6:	4403      	add	r3, r0
 80a42c8:	f143 0300 	adc.w	r3, r3, #0
 80a42cc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80a42d0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80a42d4:	bd10      	pop	{r4, pc}
 80a42d6:	bf00      	nop
 80a42d8:	2000047c 	.word	0x2000047c
 80a42dc:	5851f42d 	.word	0x5851f42d
 80a42e0:	4c957f2d 	.word	0x4c957f2d

080a42e4 <strlen>:
 80a42e4:	4603      	mov	r3, r0
 80a42e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a42ea:	2a00      	cmp	r2, #0
 80a42ec:	d1fb      	bne.n	80a42e6 <strlen+0x2>
 80a42ee:	1a18      	subs	r0, r3, r0
 80a42f0:	3801      	subs	r0, #1
 80a42f2:	4770      	bx	lr

080a42f4 <dynalib_user>:
 80a42f4:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a4304:	0000 0000 504d 3152 3132 6e20 746f 6620     ....MPR121 not f
 80a4314:	756f 646e 202c 6863 6365 206b 6977 6972     ound, check wiri
 80a4324:	676e 003f 504d 3152 3132 6620 756f 646e     ng?.MPR121 found
 80a4334:	0021 7845 6574 6e72 6c61 4820 7261 7764     !.External Hardw
 80a4344:	7261 2065 6554 7473 2a00 2a2a 2000 202d     are Test.***. - 
 80a4354:	2000 6f74 6375 6568 0064 7220 6c65 6165     . touched. relea
 80a4364:	6573 0064                                   sed.

080a4368 <CSWTCH.215>:
 80a4368:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a4378:	0050 0000                                   P...

080a437c <_ZTV16Adafruit_SSD1306>:
	...
 80a4384:	00c9 080a 05d5 080a 25dd 080a 2bbd 080a     .........%...+..
 80a4394:	1ee5 080a 22d9 080a 1d4d 080a 1bd9 080a     ....."..M.......
 80a43a4:	2399 080a 242f 080a 2467 080a 2483 080a     .#../$..g$...$..

080a43b4 <_ZTV12Adafruit_GFX>:
	...
 80a43c4:	25dd 080a 2bbd 080a 00a5 080a 22d9 080a     .%...+......."..
 80a43d4:	23f9 080a 2415 080a 2399 080a 242f 080a     .#...$...#../$..
 80a43e4:	2467 080a 2483 080a                         g$...$..

080a43ec <_ZL4font>:
 80a43ec:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 80a43fc:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 80a440c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 80a441c:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 80a442c:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 80a443c:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 80a444c:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 80a445c:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 80a446c:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 80a447c:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 80a448c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 80a449c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 80a44ac:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 80a44bc:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 80a44cc:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 80a44dc:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 80a44ec:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 80a44fc:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 80a450c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 80a451c:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 80a452c:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 80a453c:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 80a454c:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 80a455c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 80a456c:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 80a457c:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 80a458c:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 80a459c:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 80a45ac:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 80a45bc:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 80a45cc:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 80a45dc:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 80a45ec:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 80a45fc:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 80a460c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 80a461c:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 80a462c:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 80a463c:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 80a464c:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 80a465c:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 80a466c:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 80a467c:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
 80a468c:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 80a469c:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 80a46ac:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
 80a46bc:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 80a46cc:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
 80a46dc:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
 80a46ec:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
 80a46fc:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 80a470c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 80a471c:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 80a472c:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 80a473c:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 80a474c:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 80a475c:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
 80a476c:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
 80a477c:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
 80a478c:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
 80a479c:	141f 1414 001f 1010 f010 0000 0000 101f     ................
 80a47ac:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
 80a47bc:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
 80a47cc:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
 80a47dc:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
 80a47ec:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
 80a47fc:	1414 f414 1014 f010 f010 0000 101f 001f     ................
 80a480c:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
 80a481c:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
 80a482c:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
 80a483c:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
 80a484c:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
 80a485c:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
 80a486c:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
 80a487c:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
 80a488c:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
 80a489c:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
 80a48ac:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
 80a48bc:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
 80a48cc:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
 80a48dc:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

080a48e8 <_ZTV8SPIClass>:
	...
 80a48f0:	2a8d 080a 2a8f 080a                         .*...*..

080a48f8 <_ZL14clock_divisors>:
 80a48f8:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
 80a4908:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 80a4918:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 80a4928:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 80a4938:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 80a4948:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 80a4958:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 80a4968:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 80a4978:	0070 3025 3031 2075 5d00 0020 6425 2c00     p.%010u .] .%d.,
 80a4988:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
 80a4998:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
 80a49a8:	0a0d 6600 6c00 006e 6e66 6300 646f 0065     ...f.ln.fn.code.
 80a49b8:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
 80a49c8:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 80a49d8:	0072 6170 696e 0063 6c61 006c 005a 2b25     r.panic.all.Z.%+
 80a49e8:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a49f8:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a4a08:	6974 656d 0000 0000                         time....

080a4a10 <_ZTV9IPAddress>:
	...
 80a4a18:	2e9d 080a 2e8d 080a 2e8f 080a               ............

080a4a24 <_ZTV9USBSerial>:
	...
 80a4a2c:	2f59 080a 2fa9 080a 2fb7 080a 2bbd 080a     Y/.../.../...+..
 80a4a3c:	2f95 080a 2f5b 080a 2f71 080a 2fa3 080a     ./..[/..q/.../..
 80a4a4c:	2f87 080a 2f55 080a                         ./..U/..

080a4a54 <_ZTV11USARTSerial>:
	...
 80a4a5c:	3127 080a 3177 080a 3185 080a 2bbd 080a     '1..w1...1...+..
 80a4a6c:	313b 080a 315d 080a 3149 080a 3171 080a     ;1..]1..I1..q1..
 80a4a7c:	3129 080a 312d 080a                         )1..-1..

080a4a84 <_ZTV7TwoWire>:
	...
 80a4a8c:	3229 080a 3273 080a 324b 080a 322b 080a     )2..s2..K2..+2..
 80a4a9c:	3253 080a 325b 080a 3263 080a 326b 080a     S2..[2..c2..k2..

080a4aac <_ZTVN5spark9WiFiClassE>:
	...
 80a4ab4:	3387 080a 337d 080a 3373 080a 32f1 080a     .3..}3..s3...2..
 80a4ac4:	2ce3 080a 3367 080a 335b 080a 3353 080a     .,..g3..[3..S3..
 80a4ad4:	3349 080a 333f 080a 32fb 080a               I3..?3...2..

080a4ae0 <_ZTVN5spark12NetworkClassE>:
	...
 80a4ae8:	33a5 080a 33af 080a 33b9 080a 33c3 080a     .3...3...3...3..
 80a4af8:	33cd 080a 33d9 080a 33e5 080a 33f1 080a     .3...3...3...3..
 80a4b08:	33f9 080a 3403 080a 340d 080a               .3...4...4..

080a4b14 <__sf_fake_stdin>:
	...

080a4b34 <__sf_fake_stdout>:
	...

080a4b54 <__sf_fake_stderr>:
	...
 80a4b74:	0043                                        C.

080a4b76 <link_const_variable_data_end>:
	...

080a4b78 <link_constructors_location>:
 80a4b78:	080a05e5 	.word	0x080a05e5
 80a4b7c:	080a087d 	.word	0x080a087d
 80a4b80:	080a0881 	.word	0x080a0881
 80a4b84:	080a0899 	.word	0x080a0899
 80a4b88:	080a1bc1 	.word	0x080a1bc1
 80a4b8c:	080a1bd5 	.word	0x080a1bd5
 80a4b90:	080a22d5 	.word	0x080a22d5
 80a4b94:	080a266d 	.word	0x080a266d
 80a4b98:	080a2ba5 	.word	0x080a2ba5
 80a4b9c:	080a2cf1 	.word	0x080a2cf1
 80a4ba0:	080a2d01 	.word	0x080a2d01
 80a4ba4:	080a2d39 	.word	0x080a2d39
 80a4ba8:	080a3391 	.word	0x080a3391
 80a4bac:	080a345d 	.word	0x080a345d
 80a4bb0:	080a3555 	.word	0x080a3555
 80a4bb4:	080a3599 	.word	0x080a3599
 80a4bb8:	080a3619 	.word	0x080a3619
 80a4bbc:	080a369d 	.word	0x080a369d
 80a4bc0:	080a3761 	.word	0x080a3761
 80a4bc4:	080a3825 	.word	0x080a3825

080a4bc8 <link_constructors_end>:
	...
