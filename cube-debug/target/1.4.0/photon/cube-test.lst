
c:/Users/me/Dropbox/2019-games/particle/cube-test/target/1.4.0/photon/cube-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000025c4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a25e0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000480  20000000  080a25e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001cc  20000480  20000480  00030480  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2a64  080a2a64  00022a64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2a8c  080a2a8c  00022a8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000bfb73  00000000  00000000  00022a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011944  00000000  00000000  000e2603  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00012f04  00000000  00000000  000f3f47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002008  00000000  00000000  00106e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002eb0  00000000  00000000  00108e53  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00029cbc  00000000  00000000  0010bd03  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002975d  00000000  00000000  001359bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a1a59  00000000  00000000  0015f11c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b820  00000000  00000000  00200b78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fe35 	bl	80a1c9c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fe3a 	bl	80a1cb2 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a25e4 	.word	0x080a25e4
 80a004c:	20000480 	.word	0x20000480
 80a0050:	20000480 	.word	0x20000480
 80a0054:	2000064c 	.word	0x2000064c
 80a0058:	2000064c 	.word	0x2000064c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 f911 	bl	80a1284 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a258c 	.word	0x080a258c
 80a0084:	080a25d4 	.word	0x080a25d4

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b844 	b.w	80a0114 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f853 	bl	80a0138 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 b8b7 	b.w	80a1208 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bfa3 	b.w	80a0fe4 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bfa9 	b.w	80a0ff4 <free>
	...

080a00a4 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a6:	4a03      	ldr	r2, [pc, #12]	; (80a00b4 <__cxa_pure_virtual+0x10>)
 80a00a8:	2100      	movs	r1, #0
 80a00aa:	200c      	movs	r0, #12
 80a00ac:	f000 ff0e 	bl	80a0ecc <panic_>
 80a00b0:	e7fe      	b.n	80a00b0 <__cxa_pure_virtual+0xc>
 80a00b2:	bf00      	nop
 80a00b4:	080a0ce9 	.word	0x080a0ce9

080a00b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b8:	7800      	ldrb	r0, [r0, #0]
 80a00ba:	fab0 f080 	clz	r0, r0
 80a00be:	0940      	lsrs	r0, r0, #5
 80a00c0:	4770      	bx	lr

080a00c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c2:	2301      	movs	r3, #1
 80a00c4:	7003      	strb	r3, [r0, #0]
 80a00c6:	4770      	bx	lr

080a00c8 <_GLOBAL__sub_I_cube_test_copy.cpp>:
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a00c8:	f000 bdd6 	b.w	80a0c78 <HAL_Pin_Map>

080a00cc <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
 80a00cc:	4770      	bx	lr
	...

080a00d0 <_Z10touchSetupv>:
// Keeps track of the last pins touched
// so we know when buttons are 'released'
uint16_t lasttouched = 0;
uint16_t currtouched = 0;

void touchSetup() {
 80a00d0:	b510      	push	{r4, lr}
  // Default address is 0x5A, if tied to 3.3V its 0x5B
  // If tied to SDA its 0x5C and if SCL then 0x5D
  if (!cap.begin(0x5A)) {
 80a00d2:	215a      	movs	r1, #90	; 0x5a
 80a00d4:	480b      	ldr	r0, [pc, #44]	; (80a0104 <_Z10touchSetupv+0x34>)
 80a00d6:	f000 f95e 	bl	80a0396 <_ZN15Adafruit_MPR1215beginEh>
 80a00da:	b958      	cbnz	r0, 80a00f4 <_Z10touchSetupv+0x24>
    Serial.println("MPR121 not found, check wiring?");
 80a00dc:	f001 f9c4 	bl	80a1468 <_Z16_fetch_usbserialv>
 80a00e0:	4909      	ldr	r1, [pc, #36]	; (80a0108 <_Z10touchSetupv+0x38>)
 80a00e2:	f000 fff0 	bl	80a10c6 <_ZN5Print7printlnEPKc>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00e6:	4c09      	ldr	r4, [pc, #36]	; (80a010c <_Z10touchSetupv+0x3c>)
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a00e8:	f000 fe06 	bl	80a0cf8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00ec:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a00ee:	f000 ff69 	bl	80a0fc4 <spark_process>
 80a00f2:	e7f9      	b.n	80a00e8 <_Z10touchSetupv+0x18>
      #endif
    }

  }

  Serial.println("MPR121 found!");
 80a00f4:	f001 f9b8 	bl	80a1468 <_Z16_fetch_usbserialv>
}
 80a00f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      #endif
    }

  }

  Serial.println("MPR121 found!");
 80a00fc:	4904      	ldr	r1, [pc, #16]	; (80a0110 <_Z10touchSetupv+0x40>)
 80a00fe:	f000 bfe2 	b.w	80a10c6 <_ZN5Print7printlnEPKc>
 80a0102:	bf00      	nop
 80a0104:	200004c8 	.word	0x200004c8
 80a0108:	080a1d38 	.word	0x080a1d38
 80a010c:	20000578 	.word	0x20000578
 80a0110:	080a1d58 	.word	0x080a1d58

080a0114 <setup>:
  strip.setBrightness(BRIGHTNESS);
  strip.begin();
  strip.show();
}

void setup() {
 80a0114:	b508      	push	{r3, lr}
  Serial.begin(9600);
 80a0116:	f001 f9a7 	bl	80a1468 <_Z16_fetch_usbserialv>
 80a011a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a011e:	f001 f997 	bl	80a1450 <_ZN9USBSerial5beginEl>
  Serial.println("External Hardware Test");
 80a0122:	f001 f9a1 	bl	80a1468 <_Z16_fetch_usbserialv>
 80a0126:	4903      	ldr	r1, [pc, #12]	; (80a0134 <setup+0x20>)
 80a0128:	f000 ffcd 	bl	80a10c6 <_ZN5Print7printlnEPKc>
  // displaySetup();
  touchSetup();
  // neoPixelSetup();
}
 80a012c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void setup() {
  Serial.begin(9600);
  Serial.println("External Hardware Test");
  // displaySetup();
  touchSetup();
 80a0130:	f7ff bfce 	b.w	80a00d0 <_Z10touchSetupv>
 80a0134:	080a1d66 	.word	0x080a1d66

080a0138 <loop>:

bool goingUp = true;
int value = 0;
int rate = 2;

void loop() {
 80a0138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Particle.process();

  // cap.setThresholds(touch_threshold, release_threshold);
  // Get the currently touched pads
 80a013a:	4827      	ldr	r0, [pc, #156]	; (80a01d8 <loop+0xa0>)
 80a013c:	f000 f8f3 	bl	80a0326 <_ZN15Adafruit_MPR1217touchedEv>
 80a0140:	4d26      	ldr	r5, [pc, #152]	; (80a01dc <loop+0xa4>)
  currtouched = cap.touched();

 80a0142:	4927      	ldr	r1, [pc, #156]	; (80a01e0 <loop+0xa8>)

void loop() {
  Particle.process();

  // cap.setThresholds(touch_threshold, release_threshold);
  // Get the currently touched pads
 80a0144:	8028      	strh	r0, [r5, #0]
  currtouched = cap.touched();

 80a0146:	7808      	ldrb	r0, [r1, #0]
 80a0148:	4b26      	ldr	r3, [pc, #152]	; (80a01e4 <loop+0xac>)
 80a014a:	4c27      	ldr	r4, [pc, #156]	; (80a01e8 <loop+0xb0>)
 80a014c:	b158      	cbz	r0, 80a0166 <loop+0x2e>
  if (goingUp) {
 80a014e:	6818      	ldr	r0, [r3, #0]
 80a0150:	6822      	ldr	r2, [r4, #0]
 80a0152:	4402      	add	r2, r0
    value += rate;
 80a0154:	2aff      	cmp	r2, #255	; 0xff
 80a0156:	dd0a      	ble.n	80a016e <loop+0x36>
    if (value > 255) {
 80a0158:	22ff      	movs	r2, #255	; 0xff
 80a015a:	601a      	str	r2, [r3, #0]
      value = 255;
 80a015c:	2300      	movs	r3, #0
 80a015e:	700b      	strb	r3, [r1, #0]

bool goingUp = true;
int value = 0;
int rate = 2;

void loop() {
 80a0160:	2400      	movs	r4, #0
  //   nextTime = millis() + 100;
  //   display.display();
  // }

  for (uint8_t i=0; i<12; i++) {
    // it if *is* touched and *wasnt* touched before, alert!
 80a0162:	4e22      	ldr	r6, [pc, #136]	; (80a01ec <loop+0xb4>)
 80a0164:	e009      	b.n	80a017a <loop+0x42>
    value += rate;
    if (value > 255) {
      value = 255;
      goingUp = false;
    }
  } else {
 80a0166:	681a      	ldr	r2, [r3, #0]
 80a0168:	6824      	ldr	r4, [r4, #0]
    value -= rate;
 80a016a:	1b12      	subs	r2, r2, r4
 80a016c:	d401      	bmi.n	80a0172 <loop+0x3a>
    value += rate;
    if (value > 255) {
      value = 255;
      goingUp = false;
    }
  } else {
 80a016e:	601a      	str	r2, [r3, #0]
 80a0170:	e7f6      	b.n	80a0160 <loop+0x28>
    value -= rate;
    if (value < 0) {
 80a0172:	6018      	str	r0, [r3, #0]
      value = 0;
 80a0174:	2301      	movs	r3, #1
 80a0176:	700b      	strb	r3, [r1, #0]
 80a0178:	e7f2      	b.n	80a0160 <loop+0x28>
  //   nextTime = millis() + 100;
  //   display.display();
  // }

  for (uint8_t i=0; i<12; i++) {
    // it if *is* touched and *wasnt* touched before, alert!
 80a017a:	882b      	ldrh	r3, [r5, #0]
 80a017c:	b2e7      	uxtb	r7, r4
 80a017e:	4123      	asrs	r3, r4
 80a0180:	07d8      	lsls	r0, r3, #31
 80a0182:	d50e      	bpl.n	80a01a2 <loop+0x6a>
 80a0184:	8833      	ldrh	r3, [r6, #0]
 80a0186:	4123      	asrs	r3, r4
 80a0188:	07d9      	lsls	r1, r3, #31
 80a018a:	d40a      	bmi.n	80a01a2 <loop+0x6a>
    if ((currtouched & _BV(i)) && !(lasttouched & _BV(i)) ) {
 80a018c:	f001 f96c 	bl	80a1468 <_Z16_fetch_usbserialv>
 80a0190:	4639      	mov	r1, r7
 80a0192:	220a      	movs	r2, #10
 80a0194:	f000 ffcb 	bl	80a112e <_ZN5Print5printEhi>
 80a0198:	f001 f966 	bl	80a1468 <_Z16_fetch_usbserialv>
 80a019c:	4914      	ldr	r1, [pc, #80]	; (80a01f0 <loop+0xb8>)
 80a019e:	f000 ff92 	bl	80a10c6 <_ZN5Print7printlnEPKc>
      Serial.print(i); Serial.println(" touched");
    }
    // if it *was* touched and now *isnt*, alert!
 80a01a2:	882b      	ldrh	r3, [r5, #0]
 80a01a4:	4123      	asrs	r3, r4
 80a01a6:	07da      	lsls	r2, r3, #31
 80a01a8:	d40e      	bmi.n	80a01c8 <loop+0x90>
 80a01aa:	8833      	ldrh	r3, [r6, #0]
 80a01ac:	4123      	asrs	r3, r4
 80a01ae:	07db      	lsls	r3, r3, #31
 80a01b0:	d50a      	bpl.n	80a01c8 <loop+0x90>
    if (!(currtouched & _BV(i)) && (lasttouched & _BV(i)) ) {
 80a01b2:	f001 f959 	bl	80a1468 <_Z16_fetch_usbserialv>
 80a01b6:	4639      	mov	r1, r7
 80a01b8:	220a      	movs	r2, #10
 80a01ba:	f000 ffb8 	bl	80a112e <_ZN5Print5printEhi>
 80a01be:	f001 f953 	bl	80a1468 <_Z16_fetch_usbserialv>
 80a01c2:	490c      	ldr	r1, [pc, #48]	; (80a01f4 <loop+0xbc>)
 80a01c4:	f000 ff7f 	bl	80a10c6 <_ZN5Print7printlnEPKc>
 80a01c8:	3401      	adds	r4, #1
  //   printFilteredData(currtouched);
  //   printBaselineData(currtouched);
  //   nextTime = millis() + 100;
  //   display.display();
  // }

 80a01ca:	2c0c      	cmp	r4, #12
 80a01cc:	d1d5      	bne.n	80a017a <loop+0x42>
    if (!(currtouched & _BV(i)) && (lasttouched & _BV(i)) ) {
      Serial.print(i); Serial.println(" released");
    }
  }

  // reset our state
 80a01ce:	882a      	ldrh	r2, [r5, #0]
 80a01d0:	4b06      	ldr	r3, [pc, #24]	; (80a01ec <loop+0xb4>)
 80a01d2:	801a      	strh	r2, [r3, #0]
 80a01d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a01d6:	bf00      	nop
 80a01d8:	200004c8 	.word	0x200004c8
 80a01dc:	200004ca 	.word	0x200004ca
 80a01e0:	20000004 	.word	0x20000004
 80a01e4:	20000498 	.word	0x20000498
 80a01e8:	20000000 	.word	0x20000000
 80a01ec:	200004c0 	.word	0x200004c0
 80a01f0:	080a1d85 	.word	0x080a1d85
 80a01f4:	080a1d8e 	.word	0x080a1d8e

080a01f8 <_ZN16Adafruit_SSD1306D0Ev>:
 80a01f8:	b510      	push	{r4, lr}
 80a01fa:	4604      	mov	r4, r0
 80a01fc:	2124      	movs	r1, #36	; 0x24
 80a01fe:	f001 fbf4 	bl	80a19ea <_ZdlPvj>
 80a0202:	4620      	mov	r0, r4
 80a0204:	bd10      	pop	{r4, pc}
	...

080a0208 <_GLOBAL__sub_I_SystemMode>:
    Serial.print(cap.baselineData(i)); Serial.print("\t");
  }
  Serial.println();

  // put a delay so it isn't overwhelming
  delay(100);
 80a0208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a020a:	f000 fd35 	bl	80a0c78 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a020e:	4b16      	ldr	r3, [pc, #88]	; (80a0268 <_GLOBAL__sub_I_SystemMode+0x60>)
 80a0210:	2200      	movs	r2, #0
 80a0212:	701a      	strb	r2, [r3, #0]
 80a0214:	805a      	strh	r2, [r3, #2]
 80a0216:	f64f 72ff 	movw	r2, #65535	; 0xffff
#define OLED_CLK    A0
#define OLED_MOSI   A1
#define OLED_RESET  A2
#define OLED_DC     A3
#define OLED_CS     A4
Adafruit_SSD1306 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);
 80a021a:	4c14      	ldr	r4, [pc, #80]	; (80a026c <_GLOBAL__sub_I_SystemMode+0x64>)
 80a021c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a021e:	2003      	movs	r0, #3
 80a0220:	f000 fe5c 	bl	80a0edc <set_system_mode>
 80a0224:	4d12      	ldr	r5, [pc, #72]	; (80a0270 <_GLOBAL__sub_I_SystemMode+0x68>)
 80a0226:	220c      	movs	r2, #12
 80a0228:	230e      	movs	r3, #14
 80a022a:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a022e:	210b      	movs	r1, #11
 80a0230:	230d      	movs	r3, #13
 80a0232:	220a      	movs	r2, #10
 80a0234:	4620      	mov	r0, r4
 80a0236:	f000 fb3d 	bl	80a08b4 <_ZN16Adafruit_SSD1306C1Eaaaaa>
 80a023a:	462a      	mov	r2, r5
 80a023c:	490d      	ldr	r1, [pc, #52]	; (80a0274 <_GLOBAL__sub_I_SystemMode+0x6c>)
 80a023e:	4620      	mov	r0, r4
 80a0240:	f001 fbce 	bl	80a19e0 <__aeabi_atexit>
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0244:	4c0c      	ldr	r4, [pc, #48]	; (80a0278 <_GLOBAL__sub_I_SystemMode+0x70>)
}

/**
 * Touch Board
 */
Adafruit_MPR121 cap = Adafruit_MPR121();
 80a0246:	480d      	ldr	r0, [pc, #52]	; (80a027c <_GLOBAL__sub_I_SystemMode+0x74>)
 80a0248:	f000 f81c 	bl	80a0284 <_ZN15Adafruit_MPR121C1Ev>
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a024c:	2302      	movs	r3, #2
 80a024e:	461a      	mov	r2, r3
 80a0250:	2105      	movs	r1, #5
 80a0252:	4620      	mov	r0, r4
 80a0254:	f000 f952 	bl	80a04fc <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0258:	462a      	mov	r2, r5
 80a025a:	4620      	mov	r0, r4
 80a025c:	4908      	ldr	r1, [pc, #32]	; (80a0280 <_GLOBAL__sub_I_SystemMode+0x78>)
    Serial.print(cap.baselineData(i)); Serial.print("\t");
  }
  Serial.println();

  // put a delay so it isn't overwhelming
  delay(100);
 80a025e:	b003      	add	sp, #12
 80a0260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0264:	f001 bbbc 	b.w	80a19e0 <__aeabi_atexit>
 80a0268:	200004c2 	.word	0x200004c2
 80a026c:	2000049c 	.word	0x2000049c
 80a0270:	20000480 	.word	0x20000480
 80a0274:	080a00cd 	.word	0x080a00cd
 80a0278:	20000484 	.word	0x20000484
 80a027c:	200004c8 	.word	0x200004c8
 80a0280:	080a0479 	.word	0x080a0479

080a0284 <_ZN15Adafruit_MPR121C1Ev>:
 ****************************************************/

#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}
 80a0284:	4770      	bx	lr

080a0286 <_ZN15Adafruit_MPR12113readRegister8Eh>:
}

/*********************************************************************/


uint8_t Adafruit_MPR121::readRegister8(uint8_t reg) {
 80a0286:	b538      	push	{r3, r4, r5, lr}
 80a0288:	4604      	mov	r4, r0
 80a028a:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a028c:	f001 fb88 	bl	80a19a0 <_Z19__fetch_global_Wirev>
 80a0290:	f994 1000 	ldrsb.w	r1, [r4]
 80a0294:	f001 fa2e 	bl	80a16f4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a0298:	f001 fb82 	bl	80a19a0 <_Z19__fetch_global_Wirev>
 80a029c:	6803      	ldr	r3, [r0, #0]
 80a029e:	4629      	mov	r1, r5
 80a02a0:	689b      	ldr	r3, [r3, #8]
 80a02a2:	4798      	blx	r3
    Wire.endTransmission(false);
 80a02a4:	f001 fb7c 	bl	80a19a0 <_Z19__fetch_global_Wirev>
 80a02a8:	2100      	movs	r1, #0
 80a02aa:	f001 fa26 	bl	80a16fa <_ZN7TwoWire15endTransmissionEh>
    while (Wire.requestFrom(_i2caddr, 1) != 1);
 80a02ae:	f001 fb77 	bl	80a19a0 <_Z19__fetch_global_Wirev>
 80a02b2:	2201      	movs	r2, #1
 80a02b4:	f994 1000 	ldrsb.w	r1, [r4]
 80a02b8:	f001 fa13 	bl	80a16e2 <_ZN7TwoWire11requestFromEii>
 80a02bc:	2801      	cmp	r0, #1
 80a02be:	d1f6      	bne.n	80a02ae <_ZN15Adafruit_MPR12113readRegister8Eh+0x28>
    return ( Wire.read());
 80a02c0:	f001 fb6e 	bl	80a19a0 <_Z19__fetch_global_Wirev>
 80a02c4:	6803      	ldr	r3, [r0, #0]
 80a02c6:	695b      	ldr	r3, [r3, #20]
 80a02c8:	4798      	blx	r3
}
 80a02ca:	b2c0      	uxtb	r0, r0
 80a02cc:	bd38      	pop	{r3, r4, r5, pc}

080a02ce <_ZN15Adafruit_MPR12114readRegister16Eh>:

uint16_t Adafruit_MPR121::readRegister16(uint8_t reg) {
 80a02ce:	b538      	push	{r3, r4, r5, lr}
 80a02d0:	4604      	mov	r4, r0
 80a02d2:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a02d4:	f001 fb64 	bl	80a19a0 <_Z19__fetch_global_Wirev>
 80a02d8:	f994 1000 	ldrsb.w	r1, [r4]
 80a02dc:	f001 fa0a 	bl	80a16f4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a02e0:	f001 fb5e 	bl	80a19a0 <_Z19__fetch_global_Wirev>
 80a02e4:	6803      	ldr	r3, [r0, #0]
 80a02e6:	4629      	mov	r1, r5
 80a02e8:	689b      	ldr	r3, [r3, #8]
 80a02ea:	4798      	blx	r3
    Wire.endTransmission(false);
 80a02ec:	f001 fb58 	bl	80a19a0 <_Z19__fetch_global_Wirev>
 80a02f0:	2100      	movs	r1, #0
 80a02f2:	f001 fa02 	bl	80a16fa <_ZN7TwoWire15endTransmissionEh>
    while (Wire.requestFrom(_i2caddr, 2) != 2);
 80a02f6:	f001 fb53 	bl	80a19a0 <_Z19__fetch_global_Wirev>
 80a02fa:	2202      	movs	r2, #2
 80a02fc:	f994 1000 	ldrsb.w	r1, [r4]
 80a0300:	f001 f9ef 	bl	80a16e2 <_ZN7TwoWire11requestFromEii>
 80a0304:	2802      	cmp	r0, #2
 80a0306:	d1f6      	bne.n	80a02f6 <_ZN15Adafruit_MPR12114readRegister16Eh+0x28>
    uint16_t v = Wire.read();
 80a0308:	f001 fb4a 	bl	80a19a0 <_Z19__fetch_global_Wirev>
 80a030c:	6803      	ldr	r3, [r0, #0]
 80a030e:	695b      	ldr	r3, [r3, #20]
 80a0310:	4798      	blx	r3
 80a0312:	4604      	mov	r4, r0
    v |=  ((uint16_t) Wire.read()) << 8;
 80a0314:	f001 fb44 	bl	80a19a0 <_Z19__fetch_global_Wirev>
 80a0318:	6803      	ldr	r3, [r0, #0]
 80a031a:	695b      	ldr	r3, [r3, #20]
 80a031c:	4798      	blx	r3
    return v;
 80a031e:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
 80a0322:	b280      	uxth	r0, r0
 80a0324:	bd38      	pop	{r3, r4, r5, pc}

080a0326 <_ZN15Adafruit_MPR1217touchedEv>:
  if (t > 12) return 0;
  uint16_t bl = readRegister8(MPR121_BASELINE_0 + t);
  return (bl << 2);
}

uint16_t  Adafruit_MPR121::touched(void) {
 80a0326:	b508      	push	{r3, lr}
  uint16_t t = readRegister16(MPR121_TOUCHSTATUS_L);
 80a0328:	2100      	movs	r1, #0
 80a032a:	f7ff ffd0 	bl	80a02ce <_ZN15Adafruit_MPR12114readRegister16Eh>
  return t & 0x0FFF;
}
 80a032e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80a0332:	bd08      	pop	{r3, pc}

080a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>:
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
 80a0334:	b570      	push	{r4, r5, r6, lr}
 80a0336:	4606      	mov	r6, r0
 80a0338:	4614      	mov	r4, r2
 80a033a:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a033c:	f001 fb30 	bl	80a19a0 <_Z19__fetch_global_Wirev>
 80a0340:	f996 1000 	ldrsb.w	r1, [r6]
 80a0344:	f001 f9d6 	bl	80a16f4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 80a0348:	f001 fb2a 	bl	80a19a0 <_Z19__fetch_global_Wirev>
 80a034c:	6803      	ldr	r3, [r0, #0]
 80a034e:	4629      	mov	r1, r5
 80a0350:	689b      	ldr	r3, [r3, #8]
 80a0352:	4798      	blx	r3
    Wire.write((uint8_t)(value));
 80a0354:	f001 fb24 	bl	80a19a0 <_Z19__fetch_global_Wirev>
 80a0358:	6803      	ldr	r3, [r0, #0]
 80a035a:	4621      	mov	r1, r4
 80a035c:	689b      	ldr	r3, [r3, #8]
 80a035e:	4798      	blx	r3
    Wire.endTransmission();
 80a0360:	f001 fb1e 	bl	80a19a0 <_Z19__fetch_global_Wirev>
}
 80a0364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
    Wire.beginTransmission(_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)(value));
    Wire.endTransmission();
 80a0368:	f001 b9cb 	b.w	80a1702 <_ZN7TwoWire15endTransmissionEv>

080a036c <_ZN15Adafruit_MPR12113setThresholdsEhh>:
void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
 80a036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a036e:	4605      	mov	r5, r0
 80a0370:	460f      	mov	r7, r1
 80a0372:	4616      	mov	r6, r2
 80a0374:	2441      	movs	r4, #65	; 0x41
  for (uint8_t i=0; i<12; i++) {
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
 80a0376:	4621      	mov	r1, r4
 80a0378:	463a      	mov	r2, r7
 80a037a:	4628      	mov	r0, r5
 80a037c:	f7ff ffda 	bl	80a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
 80a0380:	1c61      	adds	r1, r4, #1
 80a0382:	3402      	adds	r4, #2
 80a0384:	4632      	mov	r2, r6
 80a0386:	b2c9      	uxtb	r1, r1
 80a0388:	4628      	mov	r0, r5
 80a038a:	b2e4      	uxtb	r4, r4
 80a038c:	f7ff ffd2 	bl	80a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
  for (uint8_t i=0; i<12; i++) {
 80a0390:	2c59      	cmp	r4, #89	; 0x59
 80a0392:	d1f0      	bne.n	80a0376 <_ZN15Adafruit_MPR12113setThresholdsEhh+0xa>
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
  }
}
 80a0394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0396 <_ZN15Adafruit_MPR1215beginEh>:
#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
 80a0396:	b538      	push	{r3, r4, r5, lr}
 80a0398:	4604      	mov	r4, r0
 80a039a:	460d      	mov	r5, r1
  Wire.begin();
 80a039c:	f001 fb00 	bl	80a19a0 <_Z19__fetch_global_Wirev>
 80a03a0:	f001 f990 	bl	80a16c4 <_ZN7TwoWire5beginEv>
    
  _i2caddr = i2caddr;

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a03a4:	2263      	movs	r2, #99	; 0x63
 80a03a6:	2180      	movs	r1, #128	; 0x80
 80a03a8:	4620      	mov	r0, r4
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
  Wire.begin();
    
  _i2caddr = i2caddr;
 80a03aa:	7025      	strb	r5, [r4, #0]

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a03ac:	f7ff ffc2 	bl	80a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  delay(1);
 80a03b0:	2001      	movs	r0, #1
 80a03b2:	f000 fed7 	bl	80a1164 <delay>
  //  Serial.print("$"); Serial.print(i, HEX); 
  //  Serial.print(": 0x"); Serial.println(readRegister8(i));
  }
  

  writeRegister(MPR121_ECR, 0x0);
 80a03b6:	2200      	movs	r2, #0
 80a03b8:	215e      	movs	r1, #94	; 0x5e
 80a03ba:	4620      	mov	r0, r4
 80a03bc:	f7ff ffba 	bl	80a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  uint8_t c = readRegister8(MPR121_CONFIG2);
 80a03c0:	215d      	movs	r1, #93	; 0x5d
 80a03c2:	4620      	mov	r0, r4
 80a03c4:	f7ff ff5f 	bl	80a0286 <_ZN15Adafruit_MPR12113readRegister8Eh>
  
  if (c != 0x24) return false;
 80a03c8:	2824      	cmp	r0, #36	; 0x24
 80a03ca:	d151      	bne.n	80a0470 <_ZN15Adafruit_MPR1215beginEh+0xda>
  return true;
}

void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
 80a03cc:	4620      	mov	r0, r4
 80a03ce:	2206      	movs	r2, #6
 80a03d0:	210c      	movs	r1, #12
 80a03d2:	f7ff ffcb 	bl	80a036c <_ZN15Adafruit_MPR12113setThresholdsEhh>
  
  if (c != 0x24) return false;


  setThreshholds(12, 6);
  writeRegister(MPR121_MHDR, 0x01);
 80a03d6:	4620      	mov	r0, r4
 80a03d8:	2201      	movs	r2, #1
 80a03da:	212b      	movs	r1, #43	; 0x2b
 80a03dc:	f7ff ffaa 	bl	80a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDR, 0x01);
 80a03e0:	4620      	mov	r0, r4
 80a03e2:	2201      	movs	r2, #1
 80a03e4:	212c      	movs	r1, #44	; 0x2c
 80a03e6:	f7ff ffa5 	bl	80a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLR, 0x0E);
 80a03ea:	4620      	mov	r0, r4
 80a03ec:	220e      	movs	r2, #14
 80a03ee:	212d      	movs	r1, #45	; 0x2d
 80a03f0:	f7ff ffa0 	bl	80a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLR, 0x00);
 80a03f4:	4620      	mov	r0, r4
 80a03f6:	2200      	movs	r2, #0
 80a03f8:	212e      	movs	r1, #46	; 0x2e
 80a03fa:	f7ff ff9b 	bl	80a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_MHDF, 0x01);
 80a03fe:	4620      	mov	r0, r4
 80a0400:	2201      	movs	r2, #1
 80a0402:	212f      	movs	r1, #47	; 0x2f
 80a0404:	f7ff ff96 	bl	80a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDF, 0x05);
 80a0408:	4620      	mov	r0, r4
 80a040a:	2205      	movs	r2, #5
 80a040c:	2130      	movs	r1, #48	; 0x30
 80a040e:	f7ff ff91 	bl	80a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLF, 0x01);
 80a0412:	4620      	mov	r0, r4
 80a0414:	2201      	movs	r2, #1
 80a0416:	2131      	movs	r1, #49	; 0x31
 80a0418:	f7ff ff8c 	bl	80a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLF, 0x00);
 80a041c:	4620      	mov	r0, r4
 80a041e:	2200      	movs	r2, #0
 80a0420:	2132      	movs	r1, #50	; 0x32
 80a0422:	f7ff ff87 	bl	80a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_NHDT, 0x00);
 80a0426:	4620      	mov	r0, r4
 80a0428:	2200      	movs	r2, #0
 80a042a:	2133      	movs	r1, #51	; 0x33
 80a042c:	f7ff ff82 	bl	80a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLT, 0x00);
 80a0430:	4620      	mov	r0, r4
 80a0432:	2200      	movs	r2, #0
 80a0434:	2134      	movs	r1, #52	; 0x34
 80a0436:	f7ff ff7d 	bl	80a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLT, 0x00);
 80a043a:	4620      	mov	r0, r4
 80a043c:	2200      	movs	r2, #0
 80a043e:	2135      	movs	r1, #53	; 0x35
 80a0440:	f7ff ff78 	bl	80a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_DEBOUNCE, 0);
 80a0444:	4620      	mov	r0, r4
 80a0446:	2200      	movs	r2, #0
 80a0448:	215b      	movs	r1, #91	; 0x5b
 80a044a:	f7ff ff73 	bl	80a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 80a044e:	4620      	mov	r0, r4
 80a0450:	2210      	movs	r2, #16
 80a0452:	215c      	movs	r1, #92	; 0x5c
 80a0454:	f7ff ff6e 	bl	80a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 80a0458:	4620      	mov	r0, r4
 80a045a:	2220      	movs	r2, #32
 80a045c:	215d      	movs	r1, #93	; 0x5d
 80a045e:	f7ff ff69 	bl	80a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>

//  writeRegister(MPR121_UPLIMIT, 150);
//  writeRegister(MPR121_TARGETLIMIT, 100); // should be ~400 (100 shifted)
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking
 80a0462:	4620      	mov	r0, r4
 80a0464:	228f      	movs	r2, #143	; 0x8f
 80a0466:	215e      	movs	r1, #94	; 0x5e
 80a0468:	f7ff ff64 	bl	80a0334 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  return true;
 80a046c:	2001      	movs	r0, #1
 80a046e:	bd38      	pop	{r3, r4, r5, pc}

  writeRegister(MPR121_ECR, 0x0);

  uint8_t c = readRegister8(MPR121_CONFIG2);
  
  if (c != 0x24) return false;
 80a0470:	2000      	movs	r0, #0
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking

  return true;
}
 80a0472:	bd38      	pop	{r3, r4, r5, pc}

080a0474 <_GLOBAL__sub_I__ZN15Adafruit_MPR121C2Ev>:
 80a0474:	f000 bc00 	b.w	80a0c78 <HAL_Pin_Map>

080a0478 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0478:	b510      	push	{r4, lr}
 80a047a:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a047c:	68c0      	ldr	r0, [r0, #12]
 80a047e:	b108      	cbz	r0, 80a0484 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a0480:	f000 fdb8 	bl	80a0ff4 <free>
  if (begun) pinMode(pin, INPUT);
 80a0484:	7823      	ldrb	r3, [r4, #0]
 80a0486:	b11b      	cbz	r3, 80a0490 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0488:	2100      	movs	r1, #0
 80a048a:	79e0      	ldrb	r0, [r4, #7]
 80a048c:	f001 fa24 	bl	80a18d8 <pinMode>
}
 80a0490:	4620      	mov	r0, r4
 80a0492:	bd10      	pop	{r4, pc}

080a0494 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0494:	b538      	push	{r3, r4, r5, lr}
 80a0496:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0498:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a049a:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a049c:	b108      	cbz	r0, 80a04a2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a049e:	f000 fda9 	bl	80a0ff4 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a04a2:	79a3      	ldrb	r3, [r4, #6]
 80a04a4:	2b06      	cmp	r3, #6
 80a04a6:	bf0c      	ite	eq
 80a04a8:	2004      	moveq	r0, #4
 80a04aa:	2003      	movne	r0, #3
 80a04ac:	4368      	muls	r0, r5
 80a04ae:	b280      	uxth	r0, r0
 80a04b0:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a04b2:	f000 fd97 	bl	80a0fe4 <malloc>
 80a04b6:	60e0      	str	r0, [r4, #12]
 80a04b8:	b128      	cbz	r0, 80a04c6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a04ba:	88a2      	ldrh	r2, [r4, #4]
 80a04bc:	2100      	movs	r1, #0
 80a04be:	f001 fbf8 	bl	80a1cb2 <memset>
    numLEDs = n;
 80a04c2:	8065      	strh	r5, [r4, #2]
 80a04c4:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a04c6:	80a0      	strh	r0, [r4, #4]
 80a04c8:	8060      	strh	r0, [r4, #2]
 80a04ca:	bd38      	pop	{r3, r4, r5, pc}

080a04cc <_ZN17Adafruit_NeoPixel6setPinEh>:
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a04cc:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a04ce:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a04d0:	4605      	mov	r5, r0
 80a04d2:	460c      	mov	r4, r1
    if (begun) {
 80a04d4:	b11b      	cbz	r3, 80a04de <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a04d6:	2100      	movs	r1, #0
 80a04d8:	79c0      	ldrb	r0, [r0, #7]
 80a04da:	f001 f9fd 	bl	80a18d8 <pinMode>
    }
    pin = p;
    if (begun) {
 80a04de:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a04e0:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a04e2:	b153      	cbz	r3, 80a04fa <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a04e4:	b2a4      	uxth	r4, r4
 80a04e6:	4620      	mov	r0, r4
 80a04e8:	2101      	movs	r1, #1
 80a04ea:	f001 f9f5 	bl	80a18d8 <pinMode>
        digitalWrite(p, LOW);
 80a04ee:	4620      	mov	r0, r4
    }
}
 80a04f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a04f4:	2100      	movs	r1, #0
 80a04f6:	f001 ba00 	b.w	80a18fa <digitalWrite>
 80a04fa:	bd38      	pop	{r3, r4, r5, pc}

080a04fc <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a04fc:	b570      	push	{r4, r5, r6, lr}
 80a04fe:	4604      	mov	r4, r0
 80a0500:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0502:	2500      	movs	r5, #0
 80a0504:	7183      	strb	r3, [r0, #6]
 80a0506:	7005      	strb	r5, [r0, #0]
 80a0508:	7205      	strb	r5, [r0, #8]
 80a050a:	60c5      	str	r5, [r0, #12]
 80a050c:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a050e:	f7ff ffc1 	bl	80a0494 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0512:	4620      	mov	r0, r4
 80a0514:	4631      	mov	r1, r6
 80a0516:	f7ff ffd9 	bl	80a04cc <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a051a:	4620      	mov	r0, r4
 80a051c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0520 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a0520:	b508      	push	{r3, lr}
 80a0522:	f000 fba9 	bl	80a0c78 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a0526:	f000 fba7 	bl	80a0c78 <HAL_Pin_Map>
 80a052a:	4b01      	ldr	r3, [pc, #4]	; (80a0530 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a052c:	6018      	str	r0, [r3, #0]
 80a052e:	bd08      	pop	{r3, pc}
 80a0530:	200004cc 	.word	0x200004cc

080a0534 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a0534:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
 80a0536:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a0538:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
 80a053c:	2c02      	cmp	r4, #2
 80a053e:	d008      	beq.n	80a0552 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
 80a0540:	2c03      	cmp	r4, #3
 80a0542:	d00f      	beq.n	80a0564 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
 80a0544:	2c01      	cmp	r4, #1
 80a0546:	d170      	bne.n	80a062a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
 80a0548:	8904      	ldrh	r4, [r0, #8]
 80a054a:	3c01      	subs	r4, #1
 80a054c:	1aa2      	subs	r2, r4, r2
 80a054e:	b212      	sxth	r2, r2
      break;
 80a0550:	e00c      	b.n	80a056c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
 80a0552:	8944      	ldrh	r4, [r0, #10]
 80a0554:	3c01      	subs	r4, #1
 80a0556:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
 80a0558:	8904      	ldrh	r4, [r0, #8]
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
 80a055a:	b212      	sxth	r2, r2
      x -= (w-1);
 80a055c:	1ae4      	subs	r4, r4, r3
 80a055e:	1a61      	subs	r1, r4, r1
 80a0560:	b209      	sxth	r1, r1
      break;
 80a0562:	e062      	b.n	80a062a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
 80a0564:	8944      	ldrh	r4, [r0, #10]
 80a0566:	1ae4      	subs	r4, r4, r3
 80a0568:	1a61      	subs	r1, r4, r1
 80a056a:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 80a056c:	2a00      	cmp	r2, #0
 80a056e:	db5b      	blt.n	80a0628 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
 80a0570:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a0574:	4294      	cmp	r4, r2
 80a0576:	f340 8090 	ble.w	80a069a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
 80a057a:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 80a057c:	bfbe      	ittt	lt
 80a057e:	185b      	addlt	r3, r3, r1
 80a0580:	b21b      	sxthlt	r3, r3
    __y = 0;
 80a0582:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a0584:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80a0588:	18cc      	adds	r4, r1, r3
 80a058a:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
 80a058c:	bfc4      	itt	gt
 80a058e:	1a43      	subgt	r3, r0, r1
 80a0590:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
 80a0592:	2b00      	cmp	r3, #0
 80a0594:	f340 8081 	ble.w	80a069a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 80a0598:	b2c9      	uxtb	r1, r1
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a059a:	08c8      	lsrs	r0, r1, #3
 80a059c:	4f3f      	ldr	r7, [pc, #252]	; (80a069c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
 80a059e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a05a2:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
 80a05a6:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a05a8:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a05ac:	d017      	beq.n	80a05de <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
 80a05ae:	f1c1 0108 	rsb	r1, r1, #8
 80a05b2:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a05b4:	493a      	ldr	r1, [pc, #232]	; (80a06a0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
 80a05b6:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a05b8:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
 80a05ba:	bf3f      	itttt	cc
 80a05bc:	ebc3 0e00 	rsbcc	lr, r3, r0
 80a05c0:	21ff      	movcc	r1, #255	; 0xff
 80a05c2:	fa41 f10e 	asrcc.w	r1, r1, lr
 80a05c6:	400e      	andcc	r6, r1
 80a05c8:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
 80a05ca:	2d01      	cmp	r5, #1
      *pBuf |= mask;
 80a05cc:	bf0c      	ite	eq
 80a05ce:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
 80a05d0:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a05d2:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
 80a05d4:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a05d6:	d360      	bcc.n	80a069a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
 80a05d8:	1a18      	subs	r0, r3, r0
 80a05da:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
 80a05dc:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
 80a05de:	2b07      	cmp	r3, #7
 80a05e0:	d917      	bls.n	80a0612 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
 80a05e2:	2d01      	cmp	r5, #1
 80a05e4:	bf0c      	ite	eq
 80a05e6:	20ff      	moveq	r0, #255	; 0xff
 80a05e8:	2000      	movne	r0, #0
 80a05ea:	461a      	mov	r2, r3
 80a05ec:	f104 0180 	add.w	r1, r4, #128	; 0x80

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 80a05f0:	3a08      	subs	r2, #8
 80a05f2:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
 80a05f4:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
 80a05f6:	f801 0c80 	strb.w	r0, [r1, #-128]
 80a05fa:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 80a05fe:	d8f7      	bhi.n	80a05f0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
 80a0600:	f1a3 0208 	sub.w	r2, r3, #8
 80a0604:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80a0608:	3201      	adds	r2, #1
 80a060a:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 80a060e:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
 80a0612:	2b00      	cmp	r3, #0
 80a0614:	d041      	beq.n	80a069a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a0616:	4a23      	ldr	r2, [pc, #140]	; (80a06a4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
    if(color == WHITE) { 
 80a0618:	2d01      	cmp	r5, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a061a:	5cd2      	ldrb	r2, [r2, r3]
 80a061c:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
      *pBuf |= mask;
 80a061e:	bf0c      	ite	eq
 80a0620:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
 80a0622:	4393      	bicne	r3, r2
 80a0624:	7023      	strb	r3, [r4, #0]
 80a0626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0628:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
 80a062a:	2a00      	cmp	r2, #0
 80a062c:	db35      	blt.n	80a069a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a062e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a0632:	4294      	cmp	r4, r2
 80a0634:	dd31      	ble.n	80a069a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
 80a0636:	2900      	cmp	r1, #0
    w += x;
 80a0638:	bfbc      	itt	lt
 80a063a:	18c9      	addlt	r1, r1, r3
 80a063c:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a063e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
 80a0642:	bfb8      	it	lt
 80a0644:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a0646:	18ce      	adds	r6, r1, r3
 80a0648:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 80a064a:	bfc4      	itt	gt
 80a064c:	1a63      	subgt	r3, r4, r1
 80a064e:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
 80a0650:	2b00      	cmp	r3, #0
 80a0652:	dd22      	ble.n	80a069a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0654:	10d0      	asrs	r0, r2, #3
 80a0656:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
 80a065a:	4810      	ldr	r0, [pc, #64]	; (80a069c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
 80a065c:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0660:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
 80a0662:	2001      	movs	r0, #1
 80a0664:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
 80a0668:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
 80a066a:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
 80a066c:	d109      	bne.n	80a0682 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
 80a066e:	3b01      	subs	r3, #1
 80a0670:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
 80a0672:	1c5c      	adds	r4, r3, #1
 80a0674:	d011      	beq.n	80a069a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a0676:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a067a:	4310      	orrs	r0, r2
 80a067c:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a0680:	e7f5      	b.n	80a066e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
 80a0682:	43d2      	mvns	r2, r2
 80a0684:	b2d2      	uxtb	r2, r2
 80a0686:	3b01      	subs	r3, #1
 80a0688:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
 80a068a:	1c58      	adds	r0, r3, #1
 80a068c:	d005      	beq.n	80a069a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a068e:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a0692:	4010      	ands	r0, r2
 80a0694:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a0698:	e7f5      	b.n	80a0686 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
 80a069a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a069c:	20000015 	.word	0x20000015
 80a06a0:	2000000d 	.word	0x2000000d
 80a06a4:	20000005 	.word	0x20000005

080a06a8 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a06a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
 80a06aa:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a06ac:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
 80a06b0:	2c02      	cmp	r4, #2
 80a06b2:	d008      	beq.n	80a06c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
 80a06b4:	2c03      	cmp	r4, #3
 80a06b6:	d00f      	beq.n	80a06d8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
 80a06b8:	2c01      	cmp	r4, #1
 80a06ba:	d112      	bne.n	80a06e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
 80a06bc:	8904      	ldrh	r4, [r0, #8]
 80a06be:	1ae4      	subs	r4, r4, r3
 80a06c0:	1aa2      	subs	r2, r4, r2
 80a06c2:	b212      	sxth	r2, r2
      break;
 80a06c4:	e06d      	b.n	80a07a2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 80a06c6:	8904      	ldrh	r4, [r0, #8]
 80a06c8:	3c01      	subs	r4, #1
 80a06ca:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
 80a06cc:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 80a06ce:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
 80a06d0:	1ae4      	subs	r4, r4, r3
 80a06d2:	1aa2      	subs	r2, r4, r2
 80a06d4:	b212      	sxth	r2, r2
      break;
 80a06d6:	e004      	b.n	80a06e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
 80a06d8:	8944      	ldrh	r4, [r0, #10]
 80a06da:	3c01      	subs	r4, #1
 80a06dc:	1a61      	subs	r1, r4, r1
 80a06de:	b209      	sxth	r1, r1
      break;
 80a06e0:	e05f      	b.n	80a07a2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 80a06e2:	2900      	cmp	r1, #0
 80a06e4:	db5c      	blt.n	80a07a0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
 80a06e6:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a06ea:	428c      	cmp	r4, r1
 80a06ec:	f340 8091 	ble.w	80a0812 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
 80a06f0:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 80a06f2:	bfbc      	itt	lt
 80a06f4:	18d2      	addlt	r2, r2, r3
 80a06f6:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a06f8:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
 80a06fc:	bfb8      	it	lt
 80a06fe:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a0700:	18d4      	adds	r4, r2, r3
 80a0702:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
 80a0704:	bfc4      	itt	gt
 80a0706:	1a83      	subgt	r3, r0, r2
 80a0708:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
 80a070a:	2b00      	cmp	r3, #0
 80a070c:	f340 8081 	ble.w	80a0812 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 80a0710:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0712:	4e40      	ldr	r6, [pc, #256]	; (80a0814 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
 80a0714:	b2da      	uxtb	r2, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0716:	08e3      	lsrs	r3, r4, #3
 80a0718:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a071c:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0720:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a0724:	d017      	beq.n	80a0756 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
 80a0726:	f1c4 0408 	rsb	r4, r4, #8
 80a072a:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a072c:	4c3a      	ldr	r4, [pc, #232]	; (80a0818 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
 80a072e:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a0730:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
 80a0732:	bf3f      	itttt	cc
 80a0734:	ebc2 0e00 	rsbcc	lr, r2, r0
 80a0738:	24ff      	movcc	r4, #255	; 0xff
 80a073a:	fa44 f40e 	asrcc.w	r4, r4, lr
 80a073e:	4027      	andcc	r7, r4
 80a0740:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
 80a0742:	2d01      	cmp	r5, #1
      *pBuf |= mask;
 80a0744:	bf0c      	ite	eq
 80a0746:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
 80a0748:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a074a:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
 80a074c:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a074e:	d360      	bcc.n	80a0812 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
 80a0750:	1a10      	subs	r0, r2, r0
 80a0752:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
 80a0754:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
 80a0756:	2a07      	cmp	r2, #7
 80a0758:	d917      	bls.n	80a078a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
 80a075a:	2d01      	cmp	r5, #1
 80a075c:	bf0c      	ite	eq
 80a075e:	24ff      	moveq	r4, #255	; 0xff
 80a0760:	2400      	movne	r4, #0
 80a0762:	4611      	mov	r1, r2
 80a0764:	f103 0080 	add.w	r0, r3, #128	; 0x80

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 80a0768:	3908      	subs	r1, #8
 80a076a:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
 80a076c:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
 80a076e:	f800 4c80 	strb.w	r4, [r0, #-128]
 80a0772:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 80a0776:	d8f7      	bhi.n	80a0768 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
 80a0778:	f1a2 0108 	sub.w	r1, r2, #8
 80a077c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80a0780:	3101      	adds	r1, #1
 80a0782:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
 80a0786:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
 80a078a:	2a00      	cmp	r2, #0
 80a078c:	d041      	beq.n	80a0812 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a078e:	4923      	ldr	r1, [pc, #140]	; (80a081c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
    if(color == WHITE) { 
 80a0790:	2d01      	cmp	r5, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a0792:	5c89      	ldrb	r1, [r1, r2]
 80a0794:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
      *pBuf |= mask;
 80a0796:	bf0c      	ite	eq
 80a0798:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
 80a079a:	438a      	bicne	r2, r1
 80a079c:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
 80a079e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a07a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
 80a07a2:	2900      	cmp	r1, #0
 80a07a4:	db35      	blt.n	80a0812 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a07a6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a07aa:	428c      	cmp	r4, r1
 80a07ac:	dd31      	ble.n	80a0812 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
 80a07ae:	2a00      	cmp	r2, #0
    w += x;
 80a07b0:	bfbc      	itt	lt
 80a07b2:	18d2      	addlt	r2, r2, r3
 80a07b4:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a07b6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
 80a07ba:	bfb8      	it	lt
 80a07bc:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a07be:	18d6      	adds	r6, r2, r3
 80a07c0:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 80a07c2:	bfc4      	itt	gt
 80a07c4:	1aa3      	subgt	r3, r4, r2
 80a07c6:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
 80a07c8:	2b00      	cmp	r3, #0
 80a07ca:	dd22      	ble.n	80a0812 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a07cc:	10c8      	asrs	r0, r1, #3
 80a07ce:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
 80a07d2:	4810      	ldr	r0, [pc, #64]	; (80a0814 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
 80a07d4:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a07d8:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
 80a07da:	2201      	movs	r2, #1
 80a07dc:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
 80a07e0:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
 80a07e2:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
 80a07e4:	d109      	bne.n	80a07fa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
 80a07e6:	1e5a      	subs	r2, r3, #1
 80a07e8:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
 80a07ea:	1c5c      	adds	r4, r3, #1
 80a07ec:	d011      	beq.n	80a0812 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a07ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a07f2:	430a      	orrs	r2, r1
 80a07f4:	f800 2c01 	strb.w	r2, [r0, #-1]
 80a07f8:	e7f5      	b.n	80a07e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
 80a07fa:	43c9      	mvns	r1, r1
 80a07fc:	b2c9      	uxtb	r1, r1
 80a07fe:	1e5a      	subs	r2, r3, #1
 80a0800:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
 80a0802:	1c5a      	adds	r2, r3, #1
 80a0804:	d005      	beq.n	80a0812 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a0806:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a080a:	400a      	ands	r2, r1
 80a080c:	f800 2c01 	strb.w	r2, [r0, #-1]
 80a0810:	e7f5      	b.n	80a07fe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
 80a0812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0814:	20000015 	.word	0x20000015
 80a0818:	2000000d 	.word	0x2000000d
 80a081c:	20000005 	.word	0x20000005

080a0820 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a0820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 80a0822:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a0824:	4606      	mov	r6, r0
 80a0826:	4614      	mov	r4, r2
 80a0828:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 80a082a:	db3f      	blt.n	80a08ac <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a082c:	f000 fa1b 	bl	80a0c66 <_ZN12Adafruit_GFX5widthEv>
 80a0830:	4285      	cmp	r5, r0
 80a0832:	da3b      	bge.n	80a08ac <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a0834:	2c00      	cmp	r4, #0
 80a0836:	db39      	blt.n	80a08ac <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a0838:	4630      	mov	r0, r6
 80a083a:	f000 fa17 	bl	80a0c6c <_ZN12Adafruit_GFX6heightEv>
 80a083e:	4284      	cmp	r4, r0
 80a0840:	da34      	bge.n	80a08ac <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a0842:	4630      	mov	r0, r6
 80a0844:	f000 fa0d 	bl	80a0c62 <_ZN12Adafruit_GFX11getRotationEv>
 80a0848:	2802      	cmp	r0, #2
 80a084a:	d127      	bne.n	80a089c <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a084c:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
 80a084e:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0850:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
 80a0852:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0854:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
 80a0856:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0858:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
 80a085a:	b204      	sxth	r4, r0
 80a085c:	e006      	b.n	80a086c <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a085e:	2801      	cmp	r0, #1
 80a0860:	d104      	bne.n	80a086c <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
 80a0862:	8933      	ldrh	r3, [r6, #8]
 80a0864:	3b01      	subs	r3, #1
 80a0866:	1b1b      	subs	r3, r3, r4
 80a0868:	462c      	mov	r4, r5
 80a086a:	b21d      	sxth	r5, r3
 80a086c:	2008      	movs	r0, #8
    break;
  }  

  // x is which column
  if (color == WHITE) 
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a086e:	fb94 f0f0 	sdiv	r0, r4, r0
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
 80a0872:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a0874:	b200      	sxth	r0, r0
 80a0876:	4b0e      	ldr	r3, [pc, #56]	; (80a08b0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
 80a0878:	f004 0207 	and.w	r2, r4, #7
 80a087c:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
 80a0880:	d104      	bne.n	80a088c <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a0882:	4097      	lsls	r7, r2
 80a0884:	5c5a      	ldrb	r2, [r3, r1]
 80a0886:	4317      	orrs	r7, r2
 80a0888:	545f      	strb	r7, [r3, r1]
 80a088a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
 80a088c:	5c58      	ldrb	r0, [r3, r1]
 80a088e:	2701      	movs	r7, #1
 80a0890:	fa07 f202 	lsl.w	r2, r7, r2
 80a0894:	ea20 0202 	bic.w	r2, r0, r2
 80a0898:	545a      	strb	r2, [r3, r1]
 80a089a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a089c:	2803      	cmp	r0, #3
 80a089e:	d1de      	bne.n	80a085e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
 80a08a0:	8973      	ldrh	r3, [r6, #10]
 80a08a2:	3b01      	subs	r3, #1
 80a08a4:	1b5b      	subs	r3, r3, r5
 80a08a6:	4625      	mov	r5, r4
 80a08a8:	b21c      	sxth	r4, r3
 80a08aa:	e7df      	b.n	80a086c <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
 80a08ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a08ae:	bf00      	nop
 80a08b0:	20000015 	.word	0x20000015

080a08b4 <_ZN16Adafruit_SSD1306C1Eaaaaa>:
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 80a08b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a08b6:	4604      	mov	r4, r0
 80a08b8:	461f      	mov	r7, r3
 80a08ba:	460d      	mov	r5, r1
 80a08bc:	4616      	mov	r6, r2
 80a08be:	2180      	movs	r1, #128	; 0x80
 80a08c0:	2240      	movs	r2, #64	; 0x40
 80a08c2:	f000 f8ed 	bl	80a0aa0 <_ZN12Adafruit_GFXC1Ess>
 80a08c6:	4b09      	ldr	r3, [pc, #36]	; (80a08ec <_ZN16Adafruit_SSD1306C1Eaaaaa+0x38>)
  cs = CS;
  rst = RST;
  dc = DC;
 80a08c8:	77e7      	strb	r7, [r4, #31]
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 80a08ca:	6023      	str	r3, [r4, #0]
  cs = CS;
 80a08cc:	f99d 301c 	ldrsb.w	r3, [sp, #28]
  rst = RST;
  dc = DC;
  sclk = SCLK;
 80a08d0:	77a6      	strb	r6, [r4, #30]
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
  cs = CS;
 80a08d2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  rst = RST;
 80a08d6:	f99d 3018 	ldrsb.w	r3, [sp, #24]
  dc = DC;
  sclk = SCLK;
  sid = SID;
 80a08da:	7765      	strb	r5, [r4, #29]
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
  cs = CS;
  rst = RST;
 80a08dc:	f884 3020 	strb.w	r3, [r4, #32]
  dc = DC;
  sclk = SCLK;
  sid = SID;
  hwSPI = false;
 80a08e0:	2300      	movs	r3, #0
 80a08e2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 80a08e6:	4620      	mov	r0, r4
 80a08e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a08ea:	bf00      	nop
 80a08ec:	080a1da0 	.word	0x080a1da0

080a08f0 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
 80a08f0:	f000 b9c2 	b.w	80a0c78 <HAL_Pin_Map>

080a08f4 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a08f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a08f8:	461e      	mov	r6, r3
 80a08fa:	b085      	sub	sp, #20
 80a08fc:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80a0900:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a0902:	1a9a      	subs	r2, r3, r2
 80a0904:	2a00      	cmp	r2, #0
 80a0906:	bfb8      	it	lt
 80a0908:	4252      	neglt	r2, r2
 80a090a:	9200      	str	r2, [sp, #0]
 80a090c:	1a72      	subs	r2, r6, r1
 80a090e:	2a00      	cmp	r2, #0
 80a0910:	bfb8      	it	lt
 80a0912:	4252      	neglt	r2, r2
 80a0914:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a0916:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a0918:	9a00      	ldr	r2, [sp, #0]
 80a091a:	9901      	ldr	r1, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a091c:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a091e:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a0920:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a0924:	dd05      	ble.n	80a0932 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
 80a0926:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
 80a0928:	461e      	mov	r6, r3
 80a092a:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a092c:	4622      	mov	r2, r4
    swap(x0, y0);
 80a092e:	462c      	mov	r4, r5
 80a0930:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
 80a0932:	42b4      	cmp	r4, r6
 80a0934:	dd05      	ble.n	80a0942 <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
 80a0936:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
 80a0938:	461d      	mov	r5, r3
 80a093a:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
 80a093c:	4622      	mov	r2, r4
 80a093e:	4634      	mov	r4, r6
 80a0940:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
 80a0942:	1b5a      	subs	r2, r3, r5
 80a0944:	2a00      	cmp	r2, #0
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a0946:	ebc4 0806 	rsb	r8, r4, r6
  dy = abs(y1 - y0);
 80a094a:	bfb8      	it	lt
 80a094c:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a094e:	fa1f f888 	uxth.w	r8, r8
  dy = abs(y1 - y0);
 80a0952:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
 80a0954:	fa0f f788 	sxth.w	r7, r8
 80a0958:	2202      	movs	r2, #2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a095a:	429d      	cmp	r5, r3
 80a095c:	bfb4      	ite	lt
 80a095e:	2301      	movlt	r3, #1
 80a0960:	f04f 33ff 	movge.w	r3, #4294967295

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);

  int16_t err = dx / 2;
 80a0964:	fb97 f7f2 	sdiv	r7, r7, r2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a0968:	9302      	str	r3, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 80a096a:	42b4      	cmp	r4, r6
 80a096c:	dc1f      	bgt.n	80a09ae <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
 80a096e:	9a01      	ldr	r2, [sp, #4]
 80a0970:	9b00      	ldr	r3, [sp, #0]
      drawPixel(y0, x0, color);
    } else {
      drawPixel(x0, y0, color);
 80a0972:	4648      	mov	r0, r9
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
 80a0974:	4293      	cmp	r3, r2
 80a0976:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
 80a097a:	bfc8      	it	gt
 80a097c:	4622      	movgt	r2, r4
 80a097e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a0982:	bfc8      	it	gt
 80a0984:	4629      	movgt	r1, r5
 80a0986:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
 80a0988:	bfdc      	itt	le
 80a098a:	462a      	movle	r2, r5
 80a098c:	4621      	movle	r1, r4
 80a098e:	47d8      	blx	fp
    }
    err -= dy;
 80a0990:	9b03      	ldr	r3, [sp, #12]
 80a0992:	1aff      	subs	r7, r7, r3
 80a0994:	b2bb      	uxth	r3, r7
 80a0996:	b21f      	sxth	r7, r3
    if (err < 0) {
 80a0998:	2f00      	cmp	r7, #0
 80a099a:	da05      	bge.n	80a09a8 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
 80a099c:	9a02      	ldr	r2, [sp, #8]
      err += dx;
 80a099e:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
 80a09a2:	4415      	add	r5, r2
 80a09a4:	b22d      	sxth	r5, r5
      err += dx;
 80a09a6:	b23f      	sxth	r7, r7
 80a09a8:	3401      	adds	r4, #1
 80a09aa:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
 80a09ac:	e7dd      	b.n	80a096a <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
 80a09ae:	b005      	add	sp, #20
 80a09b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a09b4 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a09b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a09b8:	4604      	mov	r4, r0
 80a09ba:	4691      	mov	r9, r2
 80a09bc:	460d      	mov	r5, r1
 80a09be:	4698      	mov	r8, r3
 80a09c0:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 80a09c4:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a09c6:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 80a09ca:	9600      	str	r6, [sp, #0]
 80a09cc:	69ff      	ldr	r7, [r7, #28]
 80a09ce:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 80a09d0:	6823      	ldr	r3, [r4, #0]
 80a09d2:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a09d6:	9600      	str	r6, [sp, #0]
 80a09d8:	444a      	add	r2, r9
 80a09da:	69df      	ldr	r7, [r3, #28]
 80a09dc:	4629      	mov	r1, r5
 80a09de:	4643      	mov	r3, r8
 80a09e0:	4620      	mov	r0, r4
 80a09e2:	b212      	sxth	r2, r2
 80a09e4:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 80a09e6:	6823      	ldr	r3, [r4, #0]
 80a09e8:	9600      	str	r6, [sp, #0]
 80a09ea:	699f      	ldr	r7, [r3, #24]
 80a09ec:	464a      	mov	r2, r9
 80a09ee:	4653      	mov	r3, sl
 80a09f0:	4629      	mov	r1, r5
 80a09f2:	4620      	mov	r0, r4
 80a09f4:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 80a09f6:	6823      	ldr	r3, [r4, #0]
 80a09f8:	f108 31ff 	add.w	r1, r8, #4294967295
 80a09fc:	960a      	str	r6, [sp, #40]	; 0x28
 80a09fe:	4429      	add	r1, r5
 80a0a00:	699d      	ldr	r5, [r3, #24]
 80a0a02:	464a      	mov	r2, r9
 80a0a04:	4653      	mov	r3, sl
 80a0a06:	4620      	mov	r0, r4
 80a0a08:	46ac      	mov	ip, r5
 80a0a0a:	b209      	sxth	r1, r1
}
 80a0a0c:	b002      	add	sp, #8
 80a0a0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
 80a0a12:	4760      	bx	ip

080a0a14 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 80a0a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 80a0a16:	3b01      	subs	r3, #1
 80a0a18:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a0a1c:	4413      	add	r3, r2
 80a0a1e:	6804      	ldr	r4, [r0, #0]
 80a0a20:	b21b      	sxth	r3, r3
 80a0a22:	9300      	str	r3, [sp, #0]
 80a0a24:	9501      	str	r5, [sp, #4]
 80a0a26:	6964      	ldr	r4, [r4, #20]
 80a0a28:	460b      	mov	r3, r1
 80a0a2a:	47a0      	blx	r4
}
 80a0a2c:	b003      	add	sp, #12
 80a0a2e:	bd30      	pop	{r4, r5, pc}

080a0a30 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 80a0a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 80a0a32:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a0a36:	6804      	ldr	r4, [r0, #0]
 80a0a38:	e88d 0024 	stmia.w	sp, {r2, r5}
 80a0a3c:	3b01      	subs	r3, #1
 80a0a3e:	440b      	add	r3, r1
 80a0a40:	6964      	ldr	r4, [r4, #20]
 80a0a42:	b21b      	sxth	r3, r3
 80a0a44:	47a0      	blx	r4
}
 80a0a46:	b003      	add	sp, #12
 80a0a48:	bd30      	pop	{r4, r5, pc}

080a0a4a <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a0a4a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0a4e:	4605      	mov	r5, r0
 80a0a50:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a0a52:	460c      	mov	r4, r1
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a0a54:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80a0a58:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a0a5c:	eb01 0a03 	add.w	sl, r1, r3
 80a0a60:	4554      	cmp	r4, sl
 80a0a62:	da0b      	bge.n	80a0a7c <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
 80a0a64:	682b      	ldr	r3, [r5, #0]
 80a0a66:	f8cd 9000 	str.w	r9, [sp]
 80a0a6a:	699e      	ldr	r6, [r3, #24]
 80a0a6c:	4621      	mov	r1, r4
 80a0a6e:	4643      	mov	r3, r8
 80a0a70:	463a      	mov	r2, r7
 80a0a72:	4628      	mov	r0, r5
 80a0a74:	3401      	adds	r4, #1
 80a0a76:	47b0      	blx	r6
 80a0a78:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a0a7a:	e7f1      	b.n	80a0a60 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
 80a0a7c:	b002      	add	sp, #8
 80a0a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a0a82 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 80a0a82:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 80a0a84:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80a0a88:	6804      	ldr	r4, [r0, #0]
 80a0a8a:	9101      	str	r1, [sp, #4]
 80a0a8c:	9200      	str	r2, [sp, #0]
 80a0a8e:	2200      	movs	r2, #0
 80a0a90:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a0a94:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80a0a96:	4611      	mov	r1, r2
 80a0a98:	47a0      	blx	r4
}
 80a0a9a:	b002      	add	sp, #8
 80a0a9c:	bd10      	pop	{r4, pc}

080a0a9e <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
 80a0a9e:	4770      	bx	lr

080a0aa0 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a0aa0:	8101      	strh	r1, [r0, #8]
{
  _width    = WIDTH;
 80a0aa2:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
 80a0aa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 80a0aa8:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
 80a0aaa:	4d07      	ldr	r5, [pc, #28]	; (80a0ac8 <_ZN12Adafruit_GFXC1Ess+0x28>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0aac:	2400      	movs	r4, #0
 80a0aae:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
  _height   = HEIGHT;
 80a0ab0:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
 80a0ab2:	2201      	movs	r2, #1
 80a0ab4:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a0ab6:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
 80a0ab8:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
 80a0aba:	8204      	strh	r4, [r0, #16]
 80a0abc:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
 80a0abe:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
 80a0ac0:	82c1      	strh	r1, [r0, #22]
 80a0ac2:	8281      	strh	r1, [r0, #20]
  wrap      = true;
 80a0ac4:	7682      	strb	r2, [r0, #26]
}
 80a0ac6:	bd30      	pop	{r4, r5, pc}
 80a0ac8:	080a1dd8 	.word	0x080a1dd8

080a0acc <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
 80a0acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0ad0:	b08f      	sub	sp, #60	; 0x3c
 80a0ad2:	9106      	str	r1, [sp, #24]
 80a0ad4:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 80a0ad8:	4604      	mov	r4, r0
 80a0ada:	9107      	str	r1, [sp, #28]
 80a0adc:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80a0ae0:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 80a0ae4:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
 80a0ae6:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80a0aea:	9806      	ldr	r0, [sp, #24]
 80a0aec:	4281      	cmp	r1, r0
 80a0aee:	dd7d      	ble.n	80a0bec <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
 80a0af0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80a0af4:	4291      	cmp	r1, r2
 80a0af6:	dd79      	ble.n	80a0bec <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
     (y >= _height)           || // Clip bottom
 80a0af8:	2106      	movs	r1, #6
 80a0afa:	fb01 0008 	mla	r0, r1, r8, r0
 80a0afe:	2800      	cmp	r0, #0
 80a0b00:	dd74      	ble.n	80a0bec <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
     ((x + 6 * size - 1) < 0) || // Clip left
 80a0b02:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
 80a0b06:	2800      	cmp	r0, #0
 80a0b08:	dd70      	ble.n	80a0bec <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
 80a0b0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80a0b0e:	b295      	uxth	r5, r2
 80a0b10:	930c      	str	r3, [sp, #48]	; 0x30
 80a0b12:	f105 0308 	add.w	r3, r5, #8
 80a0b16:	b29b      	uxth	r3, r3
 80a0b18:	9109      	str	r1, [sp, #36]	; 0x24
 80a0b1a:	2600      	movs	r6, #0
 80a0b1c:	930d      	str	r3, [sp, #52]	; 0x34
 80a0b1e:	462f      	mov	r7, r5
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0b20:	46a9      	mov	r9, r5
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
 80a0b22:	2e05      	cmp	r6, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
 80a0b24:	bf1f      	itttt	ne
 80a0b26:	4b33      	ldrne	r3, [pc, #204]	; (80a0bf4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x128>)
 80a0b28:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
 80a0b2a:	199b      	addne	r3, r3, r6
 80a0b2c:	f813 a002 	ldrbne.w	sl, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0b30:	fa1f f388 	uxth.w	r3, r8
 80a0b34:	9304      	str	r3, [sp, #16]
 80a0b36:	9904      	ldr	r1, [sp, #16]
 80a0b38:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80a0b3c:	b2b2      	uxth	r2, r6
 80a0b3e:	fb01 3102 	mla	r1, r1, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a0b42:	4413      	add	r3, r2
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0b44:	b209      	sxth	r1, r1
 80a0b46:	910a      	str	r1, [sp, #40]	; 0x28
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a0b48:	b21b      	sxth	r3, r3
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a0b4a:	fa0f f188 	sxth.w	r1, r8
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
 80a0b4e:	bf08      	it	eq
 80a0b50:	f04f 0a00 	moveq.w	sl, #0
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0b54:	9505      	str	r5, [sp, #20]
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a0b56:	9103      	str	r1, [sp, #12]
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a0b58:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
 80a0b5a:	f01a 0f01 	tst.w	sl, #1
 80a0b5e:	d011      	beq.n	80a0b84 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb8>
        if (size == 1) // default size
 80a0b60:	f1b8 0f01 	cmp.w	r8, #1
 80a0b64:	6823      	ldr	r3, [r4, #0]
 80a0b66:	d103      	bne.n	80a0b70 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa4>
          drawPixel(x+i, y+j, color);
 80a0b68:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a0b6c:	9b07      	ldr	r3, [sp, #28]
 80a0b6e:	e014      	b.n	80a0b9a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0b70:	9a07      	ldr	r2, [sp, #28]
 80a0b72:	9201      	str	r2, [sp, #4]
 80a0b74:	9a03      	ldr	r2, [sp, #12]
 80a0b76:	9200      	str	r2, [sp, #0]
 80a0b78:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a0b7c:	4613      	mov	r3, r2
 80a0b7e:	fa0f f289 	sxth.w	r2, r9
 80a0b82:	e018      	b.n	80a0bb6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xea>
        } 
      } else if (bg != color) {
 80a0b84:	9b07      	ldr	r3, [sp, #28]
 80a0b86:	9a08      	ldr	r2, [sp, #32]
 80a0b88:	4293      	cmp	r3, r2
 80a0b8a:	d017      	beq.n	80a0bbc <_ZN12Adafruit_GFX8drawCharEsshtth+0xf0>
        if (size == 1) // default size
 80a0b8c:	f1b8 0f01 	cmp.w	r8, #1
 80a0b90:	6823      	ldr	r3, [r4, #0]
 80a0b92:	d107      	bne.n	80a0ba4 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, bg);
 80a0b94:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a0b98:	4613      	mov	r3, r2
 80a0b9a:	b23a      	sxth	r2, r7
 80a0b9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80a0b9e:	4620      	mov	r0, r4
 80a0ba0:	47d8      	blx	fp
 80a0ba2:	e00b      	b.n	80a0bbc <_ZN12Adafruit_GFX8drawCharEsshtth+0xf0>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a0ba4:	9a08      	ldr	r2, [sp, #32]
 80a0ba6:	9201      	str	r2, [sp, #4]
 80a0ba8:	9a03      	ldr	r2, [sp, #12]
 80a0baa:	9200      	str	r2, [sp, #0]
 80a0bac:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a0bb0:	4613      	mov	r3, r2
 80a0bb2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80a0bb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a0bb8:	4620      	mov	r0, r4
 80a0bba:	47d8      	blx	fp
 80a0bbc:	9b04      	ldr	r3, [sp, #16]
 80a0bbe:	9a04      	ldr	r2, [sp, #16]
 80a0bc0:	4499      	add	r9, r3
 80a0bc2:	9b05      	ldr	r3, [sp, #20]
 80a0bc4:	3701      	adds	r7, #1
 80a0bc6:	4413      	add	r3, r2
 80a0bc8:	b29b      	uxth	r3, r3
 80a0bca:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 80a0bcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a0bce:	b2bf      	uxth	r7, r7
 80a0bd0:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
 80a0bd2:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 80a0bd6:	fa1f f989 	uxth.w	r9, r9
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 80a0bda:	d1be      	bne.n	80a0b5a <_ZN12Adafruit_GFX8drawCharEsshtth+0x8e>
 80a0bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
 80a0bde:	3601      	adds	r6, #1
 80a0be0:	3b01      	subs	r3, #1
 80a0be2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a0be6:	b276      	sxtb	r6, r6
 80a0be8:	9309      	str	r3, [sp, #36]	; 0x24
 80a0bea:	d198      	bne.n	80a0b1e <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
 80a0bec:	b00f      	add	sp, #60	; 0x3c
 80a0bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0bf2:	bf00      	nop
 80a0bf4:	080a1e08 	.word	0x080a1e08

080a0bf8 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a0bf8:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
 80a0bfa:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a0bfc:	b085      	sub	sp, #20
 80a0bfe:	4604      	mov	r4, r0
 80a0c00:	460b      	mov	r3, r1

  if (c == '\n') {
 80a0c02:	d104      	bne.n	80a0c0e <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
 80a0c04:	7e02      	ldrb	r2, [r0, #24]
 80a0c06:	8a43      	ldrh	r3, [r0, #18]
 80a0c08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a0c0c:	e023      	b.n	80a0c56 <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
 80a0c0e:	290d      	cmp	r1, #13
 80a0c10:	d024      	beq.n	80a0c5c <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80a0c12:	7e05      	ldrb	r5, [r0, #24]
 80a0c14:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 80a0c18:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 80a0c1c:	9502      	str	r5, [sp, #8]
 80a0c1e:	8ac5      	ldrh	r5, [r0, #22]
 80a0c20:	9501      	str	r5, [sp, #4]
 80a0c22:	8a85      	ldrh	r5, [r0, #20]
 80a0c24:	9500      	str	r5, [sp, #0]
 80a0c26:	f7ff ff51 	bl	80a0acc <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
 80a0c2a:	7e22      	ldrb	r2, [r4, #24]
 80a0c2c:	8a23      	ldrh	r3, [r4, #16]
 80a0c2e:	b291      	uxth	r1, r2
 80a0c30:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80a0c34:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80a0c38:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
 80a0c3a:	b21b      	sxth	r3, r3
 80a0c3c:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80a0c3e:	b168      	cbz	r0, 80a0c5c <_ZN12Adafruit_GFX5writeEh+0x64>
 80a0c40:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80a0c44:	f06f 0505 	mvn.w	r5, #5
 80a0c48:	fb05 0202 	mla	r2, r5, r2, r0
 80a0c4c:	4293      	cmp	r3, r2
 80a0c4e:	dd05      	ble.n	80a0c5c <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
 80a0c50:	8a63      	ldrh	r3, [r4, #18]
 80a0c52:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80a0c56:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
 80a0c58:	2300      	movs	r3, #0
 80a0c5a:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
 80a0c5c:	2001      	movs	r0, #1
 80a0c5e:	b005      	add	sp, #20
 80a0c60:	bd30      	pop	{r4, r5, pc}

080a0c62 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
 80a0c62:	7e40      	ldrb	r0, [r0, #25]
 80a0c64:	4770      	bx	lr

080a0c66 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
 80a0c66:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80a0c6a:	4770      	bx	lr

080a0c6c <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
 80a0c6c:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80a0c70:	4770      	bx	lr

080a0c72 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a0c72:	f000 b801 	b.w	80a0c78 <HAL_Pin_Map>
	...

080a0c78 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0c78:	b508      	push	{r3, lr}
 80a0c7a:	4b02      	ldr	r3, [pc, #8]	; (80a0c84 <HAL_Pin_Map+0xc>)
 80a0c7c:	681b      	ldr	r3, [r3, #0]
 80a0c7e:	681b      	ldr	r3, [r3, #0]
 80a0c80:	9301      	str	r3, [sp, #4]
 80a0c82:	bd08      	pop	{r3, pc}
 80a0c84:	080601b0 	.word	0x080601b0

080a0c88 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0c88:	b508      	push	{r3, lr}
 80a0c8a:	4b02      	ldr	r3, [pc, #8]	; (80a0c94 <HAL_Pin_Mode+0xc>)
 80a0c8c:	681b      	ldr	r3, [r3, #0]
 80a0c8e:	689b      	ldr	r3, [r3, #8]
 80a0c90:	9301      	str	r3, [sp, #4]
 80a0c92:	bd08      	pop	{r3, pc}
 80a0c94:	080601b0 	.word	0x080601b0

080a0c98 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0c98:	b508      	push	{r3, lr}
 80a0c9a:	4b02      	ldr	r3, [pc, #8]	; (80a0ca4 <HAL_Get_Pin_Mode+0xc>)
 80a0c9c:	681b      	ldr	r3, [r3, #0]
 80a0c9e:	68db      	ldr	r3, [r3, #12]
 80a0ca0:	9301      	str	r3, [sp, #4]
 80a0ca2:	bd08      	pop	{r3, pc}
 80a0ca4:	080601b0 	.word	0x080601b0

080a0ca8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0ca8:	b508      	push	{r3, lr}
 80a0caa:	4b02      	ldr	r3, [pc, #8]	; (80a0cb4 <HAL_GPIO_Write+0xc>)
 80a0cac:	681b      	ldr	r3, [r3, #0]
 80a0cae:	691b      	ldr	r3, [r3, #16]
 80a0cb0:	9301      	str	r3, [sp, #4]
 80a0cb2:	bd08      	pop	{r3, pc}
 80a0cb4:	080601b0 	.word	0x080601b0

080a0cb8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0cb8:	b508      	push	{r3, lr}
 80a0cba:	4b02      	ldr	r3, [pc, #8]	; (80a0cc4 <HAL_SPI_Init+0xc>)
 80a0cbc:	681b      	ldr	r3, [r3, #0]
 80a0cbe:	69db      	ldr	r3, [r3, #28]
 80a0cc0:	9301      	str	r3, [sp, #4]
 80a0cc2:	bd08      	pop	{r3, pc}
 80a0cc4:	080601b4 	.word	0x080601b4

080a0cc8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0cc8:	b508      	push	{r3, lr}
 80a0cca:	4b02      	ldr	r3, [pc, #8]	; (80a0cd4 <HAL_SPI_Is_Enabled+0xc>)
 80a0ccc:	681b      	ldr	r3, [r3, #0]
 80a0cce:	6a1b      	ldr	r3, [r3, #32]
 80a0cd0:	9301      	str	r3, [sp, #4]
 80a0cd2:	bd08      	pop	{r3, pc}
 80a0cd4:	080601b4 	.word	0x080601b4

080a0cd8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0cd8:	b508      	push	{r3, lr}
 80a0cda:	4b02      	ldr	r3, [pc, #8]	; (80a0ce4 <HAL_RNG_GetRandomNumber+0xc>)
 80a0cdc:	681b      	ldr	r3, [r3, #0]
 80a0cde:	685b      	ldr	r3, [r3, #4]
 80a0ce0:	9301      	str	r3, [sp, #4]
 80a0ce2:	bd08      	pop	{r3, pc}
 80a0ce4:	0806019c 	.word	0x0806019c

080a0ce8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0ce8:	b508      	push	{r3, lr}
 80a0cea:	4b02      	ldr	r3, [pc, #8]	; (80a0cf4 <HAL_Delay_Microseconds+0xc>)
 80a0cec:	681b      	ldr	r3, [r3, #0]
 80a0cee:	68db      	ldr	r3, [r3, #12]
 80a0cf0:	9301      	str	r3, [sp, #4]
 80a0cf2:	bd08      	pop	{r3, pc}
 80a0cf4:	0806019c 	.word	0x0806019c

080a0cf8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0cf8:	b508      	push	{r3, lr}
 80a0cfa:	4b02      	ldr	r3, [pc, #8]	; (80a0d04 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0cfc:	681b      	ldr	r3, [r3, #0]
 80a0cfe:	695b      	ldr	r3, [r3, #20]
 80a0d00:	9301      	str	r3, [sp, #4]
 80a0d02:	bd08      	pop	{r3, pc}
 80a0d04:	0806019c 	.word	0x0806019c

080a0d08 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0d08:	b508      	push	{r3, lr}
 80a0d0a:	4b02      	ldr	r3, [pc, #8]	; (80a0d14 <os_mutex_create+0xc>)
 80a0d0c:	681b      	ldr	r3, [r3, #0]
 80a0d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0d10:	9301      	str	r3, [sp, #4]
 80a0d12:	bd08      	pop	{r3, pc}
 80a0d14:	080601d0 	.word	0x080601d0

080a0d18 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0d18:	b508      	push	{r3, lr}
 80a0d1a:	4b02      	ldr	r3, [pc, #8]	; (80a0d24 <HAL_USART_Init+0xc>)
 80a0d1c:	681b      	ldr	r3, [r3, #0]
 80a0d1e:	699b      	ldr	r3, [r3, #24]
 80a0d20:	9301      	str	r3, [sp, #4]
 80a0d22:	bd08      	pop	{r3, pc}
 80a0d24:	080601c4 	.word	0x080601c4

080a0d28 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0d28:	b508      	push	{r3, lr}
 80a0d2a:	4b02      	ldr	r3, [pc, #8]	; (80a0d34 <HAL_USART_Write_Data+0xc>)
 80a0d2c:	681b      	ldr	r3, [r3, #0]
 80a0d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0d30:	9301      	str	r3, [sp, #4]
 80a0d32:	bd08      	pop	{r3, pc}
 80a0d34:	080601c4 	.word	0x080601c4

080a0d38 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0d38:	b508      	push	{r3, lr}
 80a0d3a:	4b02      	ldr	r3, [pc, #8]	; (80a0d44 <HAL_USART_Available_Data+0xc>)
 80a0d3c:	681b      	ldr	r3, [r3, #0]
 80a0d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0d40:	9301      	str	r3, [sp, #4]
 80a0d42:	bd08      	pop	{r3, pc}
 80a0d44:	080601c4 	.word	0x080601c4

080a0d48 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0d48:	b508      	push	{r3, lr}
 80a0d4a:	4b02      	ldr	r3, [pc, #8]	; (80a0d54 <HAL_USART_Read_Data+0xc>)
 80a0d4c:	681b      	ldr	r3, [r3, #0]
 80a0d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0d50:	9301      	str	r3, [sp, #4]
 80a0d52:	bd08      	pop	{r3, pc}
 80a0d54:	080601c4 	.word	0x080601c4

080a0d58 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0d58:	b508      	push	{r3, lr}
 80a0d5a:	4b02      	ldr	r3, [pc, #8]	; (80a0d64 <HAL_USART_Peek_Data+0xc>)
 80a0d5c:	681b      	ldr	r3, [r3, #0]
 80a0d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0d60:	9301      	str	r3, [sp, #4]
 80a0d62:	bd08      	pop	{r3, pc}
 80a0d64:	080601c4 	.word	0x080601c4

080a0d68 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0d68:	b508      	push	{r3, lr}
 80a0d6a:	4b02      	ldr	r3, [pc, #8]	; (80a0d74 <HAL_USART_Flush_Data+0xc>)
 80a0d6c:	681b      	ldr	r3, [r3, #0]
 80a0d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0d70:	9301      	str	r3, [sp, #4]
 80a0d72:	bd08      	pop	{r3, pc}
 80a0d74:	080601c4 	.word	0x080601c4

080a0d78 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0d78:	b508      	push	{r3, lr}
 80a0d7a:	4b02      	ldr	r3, [pc, #8]	; (80a0d84 <HAL_USART_Is_Enabled+0xc>)
 80a0d7c:	681b      	ldr	r3, [r3, #0]
 80a0d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0d80:	9301      	str	r3, [sp, #4]
 80a0d82:	bd08      	pop	{r3, pc}
 80a0d84:	080601c4 	.word	0x080601c4

080a0d88 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0d88:	b508      	push	{r3, lr}
 80a0d8a:	4b02      	ldr	r3, [pc, #8]	; (80a0d94 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0d8c:	681b      	ldr	r3, [r3, #0]
 80a0d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0d90:	9301      	str	r3, [sp, #4]
 80a0d92:	bd08      	pop	{r3, pc}
 80a0d94:	080601c4 	.word	0x080601c4

080a0d98 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a0d98:	b508      	push	{r3, lr}
 80a0d9a:	4b02      	ldr	r3, [pc, #8]	; (80a0da4 <HAL_I2C_Begin+0xc>)
 80a0d9c:	681b      	ldr	r3, [r3, #0]
 80a0d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0da0:	9301      	str	r3, [sp, #4]
 80a0da2:	bd08      	pop	{r3, pc}
 80a0da4:	080601ac 	.word	0x080601ac

080a0da8 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a0da8:	b508      	push	{r3, lr}
 80a0daa:	4b02      	ldr	r3, [pc, #8]	; (80a0db4 <HAL_I2C_Request_Data+0xc>)
 80a0dac:	681b      	ldr	r3, [r3, #0]
 80a0dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0db0:	9301      	str	r3, [sp, #4]
 80a0db2:	bd08      	pop	{r3, pc}
 80a0db4:	080601ac 	.word	0x080601ac

080a0db8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a0db8:	b508      	push	{r3, lr}
 80a0dba:	4b02      	ldr	r3, [pc, #8]	; (80a0dc4 <HAL_I2C_Begin_Transmission+0xc>)
 80a0dbc:	681b      	ldr	r3, [r3, #0]
 80a0dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0dc0:	9301      	str	r3, [sp, #4]
 80a0dc2:	bd08      	pop	{r3, pc}
 80a0dc4:	080601ac 	.word	0x080601ac

080a0dc8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a0dc8:	b508      	push	{r3, lr}
 80a0dca:	4b02      	ldr	r3, [pc, #8]	; (80a0dd4 <HAL_I2C_End_Transmission+0xc>)
 80a0dcc:	681b      	ldr	r3, [r3, #0]
 80a0dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0dd0:	9301      	str	r3, [sp, #4]
 80a0dd2:	bd08      	pop	{r3, pc}
 80a0dd4:	080601ac 	.word	0x080601ac

080a0dd8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0dd8:	b508      	push	{r3, lr}
 80a0dda:	4b02      	ldr	r3, [pc, #8]	; (80a0de4 <HAL_I2C_Write_Data+0xc>)
 80a0ddc:	681b      	ldr	r3, [r3, #0]
 80a0dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0de0:	9301      	str	r3, [sp, #4]
 80a0de2:	bd08      	pop	{r3, pc}
 80a0de4:	080601ac 	.word	0x080601ac

080a0de8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0de8:	b508      	push	{r3, lr}
 80a0dea:	4b02      	ldr	r3, [pc, #8]	; (80a0df4 <HAL_I2C_Available_Data+0xc>)
 80a0dec:	681b      	ldr	r3, [r3, #0]
 80a0dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0df0:	9301      	str	r3, [sp, #4]
 80a0df2:	bd08      	pop	{r3, pc}
 80a0df4:	080601ac 	.word	0x080601ac

080a0df8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0df8:	b508      	push	{r3, lr}
 80a0dfa:	4b02      	ldr	r3, [pc, #8]	; (80a0e04 <HAL_I2C_Read_Data+0xc>)
 80a0dfc:	681b      	ldr	r3, [r3, #0]
 80a0dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0e00:	9301      	str	r3, [sp, #4]
 80a0e02:	bd08      	pop	{r3, pc}
 80a0e04:	080601ac 	.word	0x080601ac

080a0e08 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0e08:	b508      	push	{r3, lr}
 80a0e0a:	4b02      	ldr	r3, [pc, #8]	; (80a0e14 <HAL_I2C_Peek_Data+0xc>)
 80a0e0c:	681b      	ldr	r3, [r3, #0]
 80a0e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0e10:	9301      	str	r3, [sp, #4]
 80a0e12:	bd08      	pop	{r3, pc}
 80a0e14:	080601ac 	.word	0x080601ac

080a0e18 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0e18:	b508      	push	{r3, lr}
 80a0e1a:	4b02      	ldr	r3, [pc, #8]	; (80a0e24 <HAL_I2C_Flush_Data+0xc>)
 80a0e1c:	681b      	ldr	r3, [r3, #0]
 80a0e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0e20:	9301      	str	r3, [sp, #4]
 80a0e22:	bd08      	pop	{r3, pc}
 80a0e24:	080601ac 	.word	0x080601ac

080a0e28 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0e28:	b508      	push	{r3, lr}
 80a0e2a:	4b02      	ldr	r3, [pc, #8]	; (80a0e34 <HAL_I2C_Is_Enabled+0xc>)
 80a0e2c:	681b      	ldr	r3, [r3, #0]
 80a0e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0e30:	9301      	str	r3, [sp, #4]
 80a0e32:	bd08      	pop	{r3, pc}
 80a0e34:	080601ac 	.word	0x080601ac

080a0e38 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0e38:	b508      	push	{r3, lr}
 80a0e3a:	4b03      	ldr	r3, [pc, #12]	; (80a0e48 <HAL_I2C_Init+0x10>)
 80a0e3c:	681b      	ldr	r3, [r3, #0]
 80a0e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0e42:	9301      	str	r3, [sp, #4]
 80a0e44:	bd08      	pop	{r3, pc}
 80a0e46:	0000      	.short	0x0000
 80a0e48:	080601ac 	.word	0x080601ac

080a0e4c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0e4c:	b508      	push	{r3, lr}
 80a0e4e:	4b02      	ldr	r3, [pc, #8]	; (80a0e58 <HAL_USB_USART_Init+0xc>)
 80a0e50:	681b      	ldr	r3, [r3, #0]
 80a0e52:	681b      	ldr	r3, [r3, #0]
 80a0e54:	9301      	str	r3, [sp, #4]
 80a0e56:	bd08      	pop	{r3, pc}
 80a0e58:	080601d8 	.word	0x080601d8

080a0e5c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0e5c:	b508      	push	{r3, lr}
 80a0e5e:	4b02      	ldr	r3, [pc, #8]	; (80a0e68 <HAL_USB_USART_Begin+0xc>)
 80a0e60:	681b      	ldr	r3, [r3, #0]
 80a0e62:	685b      	ldr	r3, [r3, #4]
 80a0e64:	9301      	str	r3, [sp, #4]
 80a0e66:	bd08      	pop	{r3, pc}
 80a0e68:	080601d8 	.word	0x080601d8

080a0e6c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0e6c:	b508      	push	{r3, lr}
 80a0e6e:	4b02      	ldr	r3, [pc, #8]	; (80a0e78 <HAL_USB_USART_Available_Data+0xc>)
 80a0e70:	681b      	ldr	r3, [r3, #0]
 80a0e72:	691b      	ldr	r3, [r3, #16]
 80a0e74:	9301      	str	r3, [sp, #4]
 80a0e76:	bd08      	pop	{r3, pc}
 80a0e78:	080601d8 	.word	0x080601d8

080a0e7c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0e7c:	b508      	push	{r3, lr}
 80a0e7e:	4b02      	ldr	r3, [pc, #8]	; (80a0e88 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0e80:	681b      	ldr	r3, [r3, #0]
 80a0e82:	695b      	ldr	r3, [r3, #20]
 80a0e84:	9301      	str	r3, [sp, #4]
 80a0e86:	bd08      	pop	{r3, pc}
 80a0e88:	080601d8 	.word	0x080601d8

080a0e8c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0e8c:	b508      	push	{r3, lr}
 80a0e8e:	4b02      	ldr	r3, [pc, #8]	; (80a0e98 <HAL_USB_USART_Receive_Data+0xc>)
 80a0e90:	681b      	ldr	r3, [r3, #0]
 80a0e92:	699b      	ldr	r3, [r3, #24]
 80a0e94:	9301      	str	r3, [sp, #4]
 80a0e96:	bd08      	pop	{r3, pc}
 80a0e98:	080601d8 	.word	0x080601d8

080a0e9c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0e9c:	b508      	push	{r3, lr}
 80a0e9e:	4b02      	ldr	r3, [pc, #8]	; (80a0ea8 <HAL_USB_USART_Send_Data+0xc>)
 80a0ea0:	681b      	ldr	r3, [r3, #0]
 80a0ea2:	69db      	ldr	r3, [r3, #28]
 80a0ea4:	9301      	str	r3, [sp, #4]
 80a0ea6:	bd08      	pop	{r3, pc}
 80a0ea8:	080601d8 	.word	0x080601d8

080a0eac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0eac:	b508      	push	{r3, lr}
 80a0eae:	4b02      	ldr	r3, [pc, #8]	; (80a0eb8 <HAL_USB_USART_Flush_Data+0xc>)
 80a0eb0:	681b      	ldr	r3, [r3, #0]
 80a0eb2:	6a1b      	ldr	r3, [r3, #32]
 80a0eb4:	9301      	str	r3, [sp, #4]
 80a0eb6:	bd08      	pop	{r3, pc}
 80a0eb8:	080601d8 	.word	0x080601d8

080a0ebc <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0ebc:	b508      	push	{r3, lr}
 80a0ebe:	4b02      	ldr	r3, [pc, #8]	; (80a0ec8 <inet_gethostbyname+0xc>)
 80a0ec0:	681b      	ldr	r3, [r3, #0]
 80a0ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0ec4:	9301      	str	r3, [sp, #4]
 80a0ec6:	bd08      	pop	{r3, pc}
 80a0ec8:	080601c0 	.word	0x080601c0

080a0ecc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a0ecc:	b508      	push	{r3, lr}
 80a0ece:	4b02      	ldr	r3, [pc, #8]	; (80a0ed8 <panic_+0xc>)
 80a0ed0:	681b      	ldr	r3, [r3, #0]
 80a0ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0ed4:	9301      	str	r3, [sp, #4]
 80a0ed6:	bd08      	pop	{r3, pc}
 80a0ed8:	080201a8 	.word	0x080201a8

080a0edc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0edc:	b508      	push	{r3, lr}
 80a0ede:	4b02      	ldr	r3, [pc, #8]	; (80a0ee8 <set_system_mode+0xc>)
 80a0ee0:	681b      	ldr	r3, [r3, #0]
 80a0ee2:	685b      	ldr	r3, [r3, #4]
 80a0ee4:	9301      	str	r3, [sp, #4]
 80a0ee6:	bd08      	pop	{r3, pc}
 80a0ee8:	080601a4 	.word	0x080601a4

080a0eec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0eec:	b508      	push	{r3, lr}
 80a0eee:	4b02      	ldr	r3, [pc, #8]	; (80a0ef8 <system_delay_ms+0xc>)
 80a0ef0:	681b      	ldr	r3, [r3, #0]
 80a0ef2:	695b      	ldr	r3, [r3, #20]
 80a0ef4:	9301      	str	r3, [sp, #4]
 80a0ef6:	bd08      	pop	{r3, pc}
 80a0ef8:	080601a4 	.word	0x080601a4

080a0efc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0efc:	b508      	push	{r3, lr}
 80a0efe:	4b03      	ldr	r3, [pc, #12]	; (80a0f0c <system_ctrl_set_app_request_handler+0x10>)
 80a0f00:	681b      	ldr	r3, [r3, #0]
 80a0f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0f06:	9301      	str	r3, [sp, #4]
 80a0f08:	bd08      	pop	{r3, pc}
 80a0f0a:	0000      	.short	0x0000
 80a0f0c:	080601a4 	.word	0x080601a4

080a0f10 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0f10:	b508      	push	{r3, lr}
 80a0f12:	4b03      	ldr	r3, [pc, #12]	; (80a0f20 <system_ctrl_set_result+0x10>)
 80a0f14:	681b      	ldr	r3, [r3, #0]
 80a0f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0f1a:	9301      	str	r3, [sp, #4]
 80a0f1c:	bd08      	pop	{r3, pc}
 80a0f1e:	0000      	.short	0x0000
 80a0f20:	080601a4 	.word	0x080601a4

080a0f24 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0f24:	b508      	push	{r3, lr}
 80a0f26:	4b02      	ldr	r3, [pc, #8]	; (80a0f30 <network_connect+0xc>)
 80a0f28:	681b      	ldr	r3, [r3, #0]
 80a0f2a:	685b      	ldr	r3, [r3, #4]
 80a0f2c:	9301      	str	r3, [sp, #4]
 80a0f2e:	bd08      	pop	{r3, pc}
 80a0f30:	080601c8 	.word	0x080601c8

080a0f34 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0f34:	b508      	push	{r3, lr}
 80a0f36:	4b02      	ldr	r3, [pc, #8]	; (80a0f40 <network_connecting+0xc>)
 80a0f38:	681b      	ldr	r3, [r3, #0]
 80a0f3a:	689b      	ldr	r3, [r3, #8]
 80a0f3c:	9301      	str	r3, [sp, #4]
 80a0f3e:	bd08      	pop	{r3, pc}
 80a0f40:	080601c8 	.word	0x080601c8

080a0f44 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0f44:	b508      	push	{r3, lr}
 80a0f46:	4b02      	ldr	r3, [pc, #8]	; (80a0f50 <network_disconnect+0xc>)
 80a0f48:	681b      	ldr	r3, [r3, #0]
 80a0f4a:	68db      	ldr	r3, [r3, #12]
 80a0f4c:	9301      	str	r3, [sp, #4]
 80a0f4e:	bd08      	pop	{r3, pc}
 80a0f50:	080601c8 	.word	0x080601c8

080a0f54 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0f54:	b508      	push	{r3, lr}
 80a0f56:	4b02      	ldr	r3, [pc, #8]	; (80a0f60 <network_ready+0xc>)
 80a0f58:	681b      	ldr	r3, [r3, #0]
 80a0f5a:	691b      	ldr	r3, [r3, #16]
 80a0f5c:	9301      	str	r3, [sp, #4]
 80a0f5e:	bd08      	pop	{r3, pc}
 80a0f60:	080601c8 	.word	0x080601c8

080a0f64 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0f64:	b508      	push	{r3, lr}
 80a0f66:	4b02      	ldr	r3, [pc, #8]	; (80a0f70 <network_on+0xc>)
 80a0f68:	681b      	ldr	r3, [r3, #0]
 80a0f6a:	695b      	ldr	r3, [r3, #20]
 80a0f6c:	9301      	str	r3, [sp, #4]
 80a0f6e:	bd08      	pop	{r3, pc}
 80a0f70:	080601c8 	.word	0x080601c8

080a0f74 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0f74:	b508      	push	{r3, lr}
 80a0f76:	4b02      	ldr	r3, [pc, #8]	; (80a0f80 <network_off+0xc>)
 80a0f78:	681b      	ldr	r3, [r3, #0]
 80a0f7a:	699b      	ldr	r3, [r3, #24]
 80a0f7c:	9301      	str	r3, [sp, #4]
 80a0f7e:	bd08      	pop	{r3, pc}
 80a0f80:	080601c8 	.word	0x080601c8

080a0f84 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0f84:	b508      	push	{r3, lr}
 80a0f86:	4b02      	ldr	r3, [pc, #8]	; (80a0f90 <network_listen+0xc>)
 80a0f88:	681b      	ldr	r3, [r3, #0]
 80a0f8a:	69db      	ldr	r3, [r3, #28]
 80a0f8c:	9301      	str	r3, [sp, #4]
 80a0f8e:	bd08      	pop	{r3, pc}
 80a0f90:	080601c8 	.word	0x080601c8

080a0f94 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0f94:	b508      	push	{r3, lr}
 80a0f96:	4b02      	ldr	r3, [pc, #8]	; (80a0fa0 <network_listening+0xc>)
 80a0f98:	681b      	ldr	r3, [r3, #0]
 80a0f9a:	6a1b      	ldr	r3, [r3, #32]
 80a0f9c:	9301      	str	r3, [sp, #4]
 80a0f9e:	bd08      	pop	{r3, pc}
 80a0fa0:	080601c8 	.word	0x080601c8

080a0fa4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0fa4:	b508      	push	{r3, lr}
 80a0fa6:	4b02      	ldr	r3, [pc, #8]	; (80a0fb0 <network_set_listen_timeout+0xc>)
 80a0fa8:	681b      	ldr	r3, [r3, #0]
 80a0faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0fac:	9301      	str	r3, [sp, #4]
 80a0fae:	bd08      	pop	{r3, pc}
 80a0fb0:	080601c8 	.word	0x080601c8

080a0fb4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0fb4:	b508      	push	{r3, lr}
 80a0fb6:	4b02      	ldr	r3, [pc, #8]	; (80a0fc0 <network_get_listen_timeout+0xc>)
 80a0fb8:	681b      	ldr	r3, [r3, #0]
 80a0fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0fbc:	9301      	str	r3, [sp, #4]
 80a0fbe:	bd08      	pop	{r3, pc}
 80a0fc0:	080601c8 	.word	0x080601c8

080a0fc4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a0fc4:	b508      	push	{r3, lr}
 80a0fc6:	4b02      	ldr	r3, [pc, #8]	; (80a0fd0 <spark_process+0xc>)
 80a0fc8:	681b      	ldr	r3, [r3, #0]
 80a0fca:	689b      	ldr	r3, [r3, #8]
 80a0fcc:	9301      	str	r3, [sp, #4]
 80a0fce:	bd08      	pop	{r3, pc}
 80a0fd0:	080601cc 	.word	0x080601cc

080a0fd4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0fd4:	b508      	push	{r3, lr}
 80a0fd6:	4b02      	ldr	r3, [pc, #8]	; (80a0fe0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0fd8:	681b      	ldr	r3, [r3, #0]
 80a0fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0fdc:	9301      	str	r3, [sp, #4]
 80a0fde:	bd08      	pop	{r3, pc}
 80a0fe0:	080601cc 	.word	0x080601cc

080a0fe4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0fe4:	b508      	push	{r3, lr}
 80a0fe6:	4b02      	ldr	r3, [pc, #8]	; (80a0ff0 <malloc+0xc>)
 80a0fe8:	681b      	ldr	r3, [r3, #0]
 80a0fea:	681b      	ldr	r3, [r3, #0]
 80a0fec:	9301      	str	r3, [sp, #4]
 80a0fee:	bd08      	pop	{r3, pc}
 80a0ff0:	080601a0 	.word	0x080601a0

080a0ff4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0ff4:	b508      	push	{r3, lr}
 80a0ff6:	4b02      	ldr	r3, [pc, #8]	; (80a1000 <free+0xc>)
 80a0ff8:	681b      	ldr	r3, [r3, #0]
 80a0ffa:	685b      	ldr	r3, [r3, #4]
 80a0ffc:	9301      	str	r3, [sp, #4]
 80a0ffe:	bd08      	pop	{r3, pc}
 80a1000:	080601a0 	.word	0x080601a0

080a1004 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1004:	4770      	bx	lr

080a1006 <_ZN8SPIClassD0Ev>:
 80a1006:	b510      	push	{r4, lr}
 80a1008:	4604      	mov	r4, r0
 80a100a:	2110      	movs	r1, #16
 80a100c:	f000 fced 	bl	80a19ea <_ZdlPvj>
 80a1010:	4620      	mov	r0, r4
 80a1012:	bd10      	pop	{r4, pc}

080a1014 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1014:	b570      	push	{r4, r5, r6, lr}
 80a1016:	4604      	mov	r4, r0
 80a1018:	460e      	mov	r6, r1
 80a101a:	4b07      	ldr	r3, [pc, #28]	; (80a1038 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a101c:	2500      	movs	r5, #0
 80a101e:	6003      	str	r3, [r0, #0]
 80a1020:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1024:	f7ff fe70 	bl	80a0d08 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1028:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a102a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a102c:	f7ff fe44 	bl	80a0cb8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1030:	60a5      	str	r5, [r4, #8]
}
 80a1032:	4620      	mov	r0, r4
 80a1034:	bd70      	pop	{r4, r5, r6, pc}
 80a1036:	bf00      	nop
 80a1038:	080a230c 	.word	0x080a230c

080a103c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a103c:	7900      	ldrb	r0, [r0, #4]
 80a103e:	f7ff be43 	b.w	80a0cc8 <HAL_SPI_Is_Enabled>
	...

080a1044 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1044:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1048:	4b03      	ldr	r3, [pc, #12]	; (80a1058 <_GLOBAL__sub_I_System+0x14>)
 80a104a:	2000      	movs	r0, #0
 80a104c:	7018      	strb	r0, [r3, #0]
 80a104e:	8058      	strh	r0, [r3, #2]
 80a1050:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1052:	f7ff bf43 	b.w	80a0edc <set_system_mode>
 80a1056:	bf00      	nop
 80a1058:	200004d0 	.word	0x200004d0

080a105c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a105e:	4606      	mov	r6, r0
 80a1060:	460d      	mov	r5, r1
 80a1062:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1064:	2400      	movs	r4, #0
  while (size--) {
 80a1066:	42bd      	cmp	r5, r7
 80a1068:	d00c      	beq.n	80a1084 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a106a:	6833      	ldr	r3, [r6, #0]
 80a106c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1070:	689b      	ldr	r3, [r3, #8]
 80a1072:	4630      	mov	r0, r6
 80a1074:	4798      	blx	r3
     if (chunk>=0)
 80a1076:	2800      	cmp	r0, #0
 80a1078:	db01      	blt.n	80a107e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a107a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a107c:	e7f3      	b.n	80a1066 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a107e:	2c00      	cmp	r4, #0
 80a1080:	bf08      	it	eq
 80a1082:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1084:	4620      	mov	r0, r4
 80a1086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1088 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1088:	b570      	push	{r4, r5, r6, lr}
 80a108a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a108c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a108e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1090:	b149      	cbz	r1, 80a10a6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1092:	f000 fe3f 	bl	80a1d14 <strlen>
 80a1096:	682b      	ldr	r3, [r5, #0]
 80a1098:	4602      	mov	r2, r0
 80a109a:	4621      	mov	r1, r4
 80a109c:	4628      	mov	r0, r5
    }
 80a109e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a10a2:	68db      	ldr	r3, [r3, #12]
 80a10a4:	4718      	bx	r3
    }
 80a10a6:	bd70      	pop	{r4, r5, r6, pc}

080a10a8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a10a8:	6803      	ldr	r3, [r0, #0]
 80a10aa:	689b      	ldr	r3, [r3, #8]
 80a10ac:	4718      	bx	r3

080a10ae <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a10ae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a10b0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a10b2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a10b4:	f7ff fff8 	bl	80a10a8 <_ZN5Print5printEc>
  n += print('\n');
 80a10b8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a10ba:	4604      	mov	r4, r0
  n += print('\n');
 80a10bc:	4628      	mov	r0, r5
 80a10be:	f7ff fff3 	bl	80a10a8 <_ZN5Print5printEc>
  return n;
}
 80a10c2:	4420      	add	r0, r4
 80a10c4:	bd38      	pop	{r3, r4, r5, pc}

080a10c6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a10c6:	b538      	push	{r3, r4, r5, lr}
 80a10c8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a10ca:	f7ff ffdd 	bl	80a1088 <_ZN5Print5writeEPKc>
 80a10ce:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a10d0:	4628      	mov	r0, r5
 80a10d2:	f7ff ffec 	bl	80a10ae <_ZN5Print7printlnEv>
  return n;
}
 80a10d6:	4420      	add	r0, r4
 80a10d8:	bd38      	pop	{r3, r4, r5, pc}

080a10da <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a10da:	2a01      	cmp	r2, #1
 80a10dc:	bf98      	it	ls
 80a10de:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a10e0:	b530      	push	{r4, r5, lr}
 80a10e2:	460b      	mov	r3, r1
 80a10e4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a10e6:	2100      	movs	r1, #0
 80a10e8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a10ec:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a10f0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a10f4:	fb05 3312 	mls	r3, r5, r2, r3
 80a10f8:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a10fa:	2b09      	cmp	r3, #9
 80a10fc:	bf94      	ite	ls
 80a10fe:	3330      	addls	r3, #48	; 0x30
 80a1100:	3337      	addhi	r3, #55	; 0x37
 80a1102:	b2db      	uxtb	r3, r3
 80a1104:	4621      	mov	r1, r4
 80a1106:	f804 3901 	strb.w	r3, [r4], #-1
 80a110a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a110c:	2d00      	cmp	r5, #0
 80a110e:	d1ef      	bne.n	80a10f0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1110:	f7ff ffba 	bl	80a1088 <_ZN5Print5writeEPKc>
}
 80a1114:	b00b      	add	sp, #44	; 0x2c
 80a1116:	bd30      	pop	{r4, r5, pc}

080a1118 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1118:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a111a:	b922      	cbnz	r2, 80a1126 <_ZN5Print5printEmi+0xe>
 80a111c:	6803      	ldr	r3, [r0, #0]
 80a111e:	b2c9      	uxtb	r1, r1
 80a1120:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1122:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1124:	4718      	bx	r3
  else return printNumber(n, base);
 80a1126:	b2d2      	uxtb	r2, r2
}
 80a1128:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a112a:	f7ff bfd6 	b.w	80a10da <_ZN5Print11printNumberEmh>

080a112e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a112e:	f7ff bff3 	b.w	80a1118 <_ZN5Print5printEmi>

080a1132 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1132:	2300      	movs	r3, #0
 80a1134:	461a      	mov	r2, r3
 80a1136:	4619      	mov	r1, r3
 80a1138:	6840      	ldr	r0, [r0, #4]
 80a113a:	f7ff bf13 	b.w	80a0f64 <network_on>
	...

080a1140 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1140:	4a01      	ldr	r2, [pc, #4]	; (80a1148 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1142:	4b02      	ldr	r3, [pc, #8]	; (80a114c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1144:	601a      	str	r2, [r3, #0]
 80a1146:	4770      	bx	lr
 80a1148:	080a238a 	.word	0x080a238a
 80a114c:	200004d8 	.word	0x200004d8

080a1150 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1150:	4b02      	ldr	r3, [pc, #8]	; (80a115c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1152:	681a      	ldr	r2, [r3, #0]
 80a1154:	4b02      	ldr	r3, [pc, #8]	; (80a1160 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1156:	601a      	str	r2, [r3, #0]
 80a1158:	4770      	bx	lr
 80a115a:	bf00      	nop
 80a115c:	20000418 	.word	0x20000418
 80a1160:	200004dc 	.word	0x200004dc

080a1164 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1164:	2100      	movs	r1, #0
 80a1166:	f7ff bec1 	b.w	80a0eec <system_delay_ms>

080a116a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a116a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a116c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a116e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1170:	b113      	cbz	r3, 80a1178 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1172:	2203      	movs	r2, #3
 80a1174:	4601      	mov	r1, r0
 80a1176:	4798      	blx	r3
    }
 80a1178:	4620      	mov	r0, r4
 80a117a:	bd10      	pop	{r4, pc}

080a117c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a117c:	b510      	push	{r4, lr}
 80a117e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1180:	f7ff fff3 	bl	80a116a <_ZNSt14_Function_baseD1Ev>
 80a1184:	4620      	mov	r0, r4
 80a1186:	bd10      	pop	{r4, pc}

080a1188 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1188:	4803      	ldr	r0, [pc, #12]	; (80a1198 <_GLOBAL__sub_I_RGB+0x10>)
 80a118a:	2300      	movs	r3, #0
 80a118c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a118e:	4a03      	ldr	r2, [pc, #12]	; (80a119c <_GLOBAL__sub_I_RGB+0x14>)
 80a1190:	4903      	ldr	r1, [pc, #12]	; (80a11a0 <_GLOBAL__sub_I_RGB+0x18>)
 80a1192:	f000 bc25 	b.w	80a19e0 <__aeabi_atexit>
 80a1196:	bf00      	nop
 80a1198:	200004e0 	.word	0x200004e0
 80a119c:	20000480 	.word	0x20000480
 80a11a0:	080a117d 	.word	0x080a117d

080a11a4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a11a4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a11a6:	4b14      	ldr	r3, [pc, #80]	; (80a11f8 <serialEventRun+0x54>)
 80a11a8:	b133      	cbz	r3, 80a11b8 <serialEventRun+0x14>
 80a11aa:	f000 f95d 	bl	80a1468 <_Z16_fetch_usbserialv>
 80a11ae:	6803      	ldr	r3, [r0, #0]
 80a11b0:	691b      	ldr	r3, [r3, #16]
 80a11b2:	4798      	blx	r3
 80a11b4:	2800      	cmp	r0, #0
 80a11b6:	dc16      	bgt.n	80a11e6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a11b8:	4b10      	ldr	r3, [pc, #64]	; (80a11fc <serialEventRun+0x58>)
 80a11ba:	b133      	cbz	r3, 80a11ca <serialEventRun+0x26>
 80a11bc:	f000 fa04 	bl	80a15c8 <_Z22__fetch_global_Serial1v>
 80a11c0:	6803      	ldr	r3, [r0, #0]
 80a11c2:	691b      	ldr	r3, [r3, #16]
 80a11c4:	4798      	blx	r3
 80a11c6:	2800      	cmp	r0, #0
 80a11c8:	dc10      	bgt.n	80a11ec <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a11ca:	4b0d      	ldr	r3, [pc, #52]	; (80a1200 <serialEventRun+0x5c>)
 80a11cc:	b10b      	cbz	r3, 80a11d2 <serialEventRun+0x2e>
 80a11ce:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a11d2:	4b0c      	ldr	r3, [pc, #48]	; (80a1204 <serialEventRun+0x60>)
 80a11d4:	b17b      	cbz	r3, 80a11f6 <serialEventRun+0x52>
 80a11d6:	f000 f975 	bl	80a14c4 <_Z17_fetch_usbserial1v>
 80a11da:	6803      	ldr	r3, [r0, #0]
 80a11dc:	691b      	ldr	r3, [r3, #16]
 80a11de:	4798      	blx	r3
 80a11e0:	2800      	cmp	r0, #0
 80a11e2:	dc06      	bgt.n	80a11f2 <serialEventRun+0x4e>
 80a11e4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a11e6:	f3af 8000 	nop.w
 80a11ea:	e7e5      	b.n	80a11b8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a11ec:	f3af 8000 	nop.w
 80a11f0:	e7eb      	b.n	80a11ca <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a11f2:	f3af 8000 	nop.w
 80a11f6:	bd08      	pop	{r3, pc}
	...

080a1208 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1208:	b508      	push	{r3, lr}
	serialEventRun();
 80a120a:	f7ff ffcb 	bl	80a11a4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a120e:	f7ff fd73 	bl	80a0cf8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1212:	4b01      	ldr	r3, [pc, #4]	; (80a1218 <_post_loop+0x10>)
 80a1214:	6018      	str	r0, [r3, #0]
 80a1216:	bd08      	pop	{r3, pc}
 80a1218:	20000578 	.word	0x20000578

080a121c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a121c:	4802      	ldr	r0, [pc, #8]	; (80a1228 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a121e:	4a03      	ldr	r2, [pc, #12]	; (80a122c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1220:	4903      	ldr	r1, [pc, #12]	; (80a1230 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1222:	1a12      	subs	r2, r2, r0
 80a1224:	f000 bd3a 	b.w	80a1c9c <memcpy>
 80a1228:	40024000 	.word	0x40024000
 80a122c:	40024004 	.word	0x40024004
 80a1230:	080a25e0 	.word	0x080a25e0

080a1234 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1234:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1236:	2300      	movs	r3, #0
 80a1238:	9300      	str	r3, [sp, #0]
 80a123a:	461a      	mov	r2, r3
 80a123c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1240:	f7ff fe66 	bl	80a0f10 <system_ctrl_set_result>
}
 80a1244:	b003      	add	sp, #12
 80a1246:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a124c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a124c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a124e:	8843      	ldrh	r3, [r0, #2]
 80a1250:	2b0a      	cmp	r3, #10
 80a1252:	d008      	beq.n	80a1266 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1254:	2b50      	cmp	r3, #80	; 0x50
 80a1256:	d109      	bne.n	80a126c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1258:	4b09      	ldr	r3, [pc, #36]	; (80a1280 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a125a:	681b      	ldr	r3, [r3, #0]
 80a125c:	b13b      	cbz	r3, 80a126e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a125e:	b003      	add	sp, #12
 80a1260:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1264:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1266:	f7ff ffe5 	bl	80a1234 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a126a:	e006      	b.n	80a127a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a126c:	2300      	movs	r3, #0
 80a126e:	9300      	str	r3, [sp, #0]
 80a1270:	461a      	mov	r2, r3
 80a1272:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1276:	f7ff fe4b 	bl	80a0f10 <system_ctrl_set_result>
        break;
    }
}
 80a127a:	b003      	add	sp, #12
 80a127c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1280:	200004f0 	.word	0x200004f0

080a1284 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1284:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1286:	4c10      	ldr	r4, [pc, #64]	; (80a12c8 <module_user_init_hook+0x44>)
 80a1288:	4d10      	ldr	r5, [pc, #64]	; (80a12cc <module_user_init_hook+0x48>)
 80a128a:	6823      	ldr	r3, [r4, #0]
 80a128c:	42ab      	cmp	r3, r5
 80a128e:	4b10      	ldr	r3, [pc, #64]	; (80a12d0 <module_user_init_hook+0x4c>)
 80a1290:	bf0c      	ite	eq
 80a1292:	2201      	moveq	r2, #1
 80a1294:	2200      	movne	r2, #0
 80a1296:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1298:	d002      	beq.n	80a12a0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a129a:	f7ff ffbf 	bl	80a121c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a129e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a12a0:	f7ff fd1a 	bl	80a0cd8 <HAL_RNG_GetRandomNumber>
 80a12a4:	4604      	mov	r4, r0
    srand(seed);
 80a12a6:	f000 fd0d 	bl	80a1cc4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a12aa:	4b0a      	ldr	r3, [pc, #40]	; (80a12d4 <module_user_init_hook+0x50>)
 80a12ac:	b113      	cbz	r3, 80a12b4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a12ae:	4620      	mov	r0, r4
 80a12b0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a12b4:	2100      	movs	r1, #0
 80a12b6:	4807      	ldr	r0, [pc, #28]	; (80a12d4 <module_user_init_hook+0x50>)
 80a12b8:	f7ff fe8c 	bl	80a0fd4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a12bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a12c0:	2100      	movs	r1, #0
 80a12c2:	4805      	ldr	r0, [pc, #20]	; (80a12d8 <module_user_init_hook+0x54>)
 80a12c4:	f7ff be1a 	b.w	80a0efc <system_ctrl_set_app_request_handler>
 80a12c8:	40024000 	.word	0x40024000
 80a12cc:	9a271c1e 	.word	0x9a271c1e
 80a12d0:	200004f4 	.word	0x200004f4
 80a12d4:	00000000 	.word	0x00000000
 80a12d8:	080a124d 	.word	0x080a124d

080a12dc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a12dc:	4770      	bx	lr

080a12de <_ZN9IPAddressD0Ev>:
 80a12de:	b510      	push	{r4, lr}
 80a12e0:	4604      	mov	r4, r0
 80a12e2:	2118      	movs	r1, #24
 80a12e4:	f000 fb81 	bl	80a19ea <_ZdlPvj>
 80a12e8:	4620      	mov	r0, r4
 80a12ea:	bd10      	pop	{r4, pc}

080a12ec <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a12ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a12ee:	460f      	mov	r7, r1
 80a12f0:	f100 0608 	add.w	r6, r0, #8
 80a12f4:	1d05      	adds	r5, r0, #4
 80a12f6:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a12f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a12fc:	220a      	movs	r2, #10
 80a12fe:	4638      	mov	r0, r7
 80a1300:	f7ff ff15 	bl	80a112e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1304:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1306:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1308:	d007      	beq.n	80a131a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a130a:	2c00      	cmp	r4, #0
 80a130c:	d0f4      	beq.n	80a12f8 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a130e:	212e      	movs	r1, #46	; 0x2e
 80a1310:	4638      	mov	r0, r7
 80a1312:	f7ff fec9 	bl	80a10a8 <_ZN5Print5printEc>
 80a1316:	4404      	add	r4, r0
 80a1318:	e7ee      	b.n	80a12f8 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a131a:	4620      	mov	r0, r4
 80a131c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1320 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1320:	b510      	push	{r4, lr}
 80a1322:	4604      	mov	r4, r0
 80a1324:	4b04      	ldr	r3, [pc, #16]	; (80a1338 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1326:	2211      	movs	r2, #17
 80a1328:	f840 3b04 	str.w	r3, [r0], #4
 80a132c:	2100      	movs	r1, #0
 80a132e:	f000 fcc0 	bl	80a1cb2 <memset>
{
    clear();
}
 80a1332:	4620      	mov	r0, r4
 80a1334:	bd10      	pop	{r4, pc}
 80a1336:	bf00      	nop
 80a1338:	080a242c 	.word	0x080a242c

080a133c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a133c:	4603      	mov	r3, r0
 80a133e:	4a07      	ldr	r2, [pc, #28]	; (80a135c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1340:	b510      	push	{r4, lr}
 80a1342:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1346:	f101 0210 	add.w	r2, r1, #16
 80a134a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a134e:	4291      	cmp	r1, r2
 80a1350:	f843 4b04 	str.w	r4, [r3], #4
 80a1354:	d1f9      	bne.n	80a134a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1356:	780a      	ldrb	r2, [r1, #0]
 80a1358:	701a      	strb	r2, [r3, #0]
}
 80a135a:	bd10      	pop	{r4, pc}
 80a135c:	080a242c 	.word	0x080a242c

080a1360 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1360:	4a02      	ldr	r2, [pc, #8]	; (80a136c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1362:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1364:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1366:	2204      	movs	r2, #4
 80a1368:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a136a:	4770      	bx	lr
 80a136c:	080a242c 	.word	0x080a242c

080a1370 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1370:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1372:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1376:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a137a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a137e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1382:	2304      	movs	r3, #4
 80a1384:	6041      	str	r1, [r0, #4]
 80a1386:	7503      	strb	r3, [r0, #20]
 80a1388:	bd10      	pop	{r4, pc}
	...

080a138c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a138c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a138e:	4d04      	ldr	r5, [pc, #16]	; (80a13a0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1390:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1392:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1396:	9500      	str	r5, [sp, #0]
 80a1398:	f7ff ffea 	bl	80a1370 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a139c:	b003      	add	sp, #12
 80a139e:	bd30      	pop	{r4, r5, pc}
 80a13a0:	080a242c 	.word	0x080a242c

080a13a4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a13a4:	7441      	strb	r1, [r0, #17]
 80a13a6:	4770      	bx	lr

080a13a8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a13a8:	4770      	bx	lr

080a13aa <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a13aa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a13ac:	2100      	movs	r1, #0
 80a13ae:	7c00      	ldrb	r0, [r0, #16]
 80a13b0:	f7ff fd6c 	bl	80a0e8c <HAL_USB_USART_Receive_Data>
}
 80a13b4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a13b8:	bf28      	it	cs
 80a13ba:	f04f 30ff 	movcs.w	r0, #4294967295
 80a13be:	bd08      	pop	{r3, pc}

080a13c0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a13c0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a13c2:	2101      	movs	r1, #1
 80a13c4:	7c00      	ldrb	r0, [r0, #16]
 80a13c6:	f7ff fd61 	bl	80a0e8c <HAL_USB_USART_Receive_Data>
}
 80a13ca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a13ce:	bf28      	it	cs
 80a13d0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a13d4:	bd08      	pop	{r3, pc}

080a13d6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a13d6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a13d8:	7c00      	ldrb	r0, [r0, #16]
 80a13da:	f7ff fd4f 	bl	80a0e7c <HAL_USB_USART_Available_Data_For_Write>
}
 80a13de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a13e2:	bd08      	pop	{r3, pc}

080a13e4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a13e4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a13e6:	7c00      	ldrb	r0, [r0, #16]
 80a13e8:	f7ff fd40 	bl	80a0e6c <HAL_USB_USART_Available_Data>
}
 80a13ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a13f0:	bd08      	pop	{r3, pc}

080a13f2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a13f2:	7c00      	ldrb	r0, [r0, #16]
 80a13f4:	f7ff bd5a 	b.w	80a0eac <HAL_USB_USART_Flush_Data>

080a13f8 <_ZN9USBSerialD0Ev>:
 80a13f8:	b510      	push	{r4, lr}
 80a13fa:	4604      	mov	r4, r0
 80a13fc:	2114      	movs	r1, #20
 80a13fe:	f000 faf4 	bl	80a19ea <_ZdlPvj>
 80a1402:	4620      	mov	r0, r4
 80a1404:	bd10      	pop	{r4, pc}

080a1406 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1406:	b538      	push	{r3, r4, r5, lr}
 80a1408:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a140a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a140c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a140e:	f7ff fd35 	bl	80a0e7c <HAL_USB_USART_Available_Data_For_Write>
 80a1412:	2800      	cmp	r0, #0
 80a1414:	dc01      	bgt.n	80a141a <_ZN9USBSerial5writeEh+0x14>
 80a1416:	7c60      	ldrb	r0, [r4, #17]
 80a1418:	b128      	cbz	r0, 80a1426 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a141a:	4629      	mov	r1, r5
 80a141c:	7c20      	ldrb	r0, [r4, #16]
 80a141e:	f7ff fd3d 	bl	80a0e9c <HAL_USB_USART_Send_Data>
 80a1422:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1426:	bd38      	pop	{r3, r4, r5, pc}

080a1428 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1428:	b510      	push	{r4, lr}
 80a142a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a142c:	2300      	movs	r3, #0
 80a142e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1430:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1434:	60a3      	str	r3, [r4, #8]
 80a1436:	4b05      	ldr	r3, [pc, #20]	; (80a144c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1438:	4608      	mov	r0, r1
 80a143a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a143c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a143e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1440:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1442:	4611      	mov	r1, r2
 80a1444:	f7ff fd02 	bl	80a0e4c <HAL_USB_USART_Init>
}
 80a1448:	4620      	mov	r0, r4
 80a144a:	bd10      	pop	{r4, pc}
 80a144c:	080a2440 	.word	0x080a2440

080a1450 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1450:	2200      	movs	r2, #0
 80a1452:	7c00      	ldrb	r0, [r0, #16]
 80a1454:	f7ff bd02 	b.w	80a0e5c <HAL_USB_USART_Begin>

080a1458 <_Z19acquireSerialBufferv>:
 80a1458:	b510      	push	{r4, lr}
 80a145a:	4604      	mov	r4, r0
 80a145c:	2214      	movs	r2, #20
 80a145e:	2100      	movs	r1, #0
 80a1460:	f000 fc27 	bl	80a1cb2 <memset>
 80a1464:	4620      	mov	r0, r4
 80a1466:	bd10      	pop	{r4, pc}

080a1468 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1468:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a146a:	4d0e      	ldr	r5, [pc, #56]	; (80a14a4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a146c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a146e:	a801      	add	r0, sp, #4
 80a1470:	f7ff fff2 	bl	80a1458 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1474:	6829      	ldr	r1, [r5, #0]
 80a1476:	f011 0401 	ands.w	r4, r1, #1
 80a147a:	d110      	bne.n	80a149e <_Z16_fetch_usbserialv+0x36>
 80a147c:	4628      	mov	r0, r5
 80a147e:	f7fe fe1b 	bl	80a00b8 <__cxa_guard_acquire>
 80a1482:	b160      	cbz	r0, 80a149e <_Z16_fetch_usbserialv+0x36>
 80a1484:	aa01      	add	r2, sp, #4
 80a1486:	4621      	mov	r1, r4
 80a1488:	4807      	ldr	r0, [pc, #28]	; (80a14a8 <_Z16_fetch_usbserialv+0x40>)
 80a148a:	f7ff ffcd 	bl	80a1428 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a148e:	4628      	mov	r0, r5
 80a1490:	f7fe fe17 	bl	80a00c2 <__cxa_guard_release>
 80a1494:	4a05      	ldr	r2, [pc, #20]	; (80a14ac <_Z16_fetch_usbserialv+0x44>)
 80a1496:	4906      	ldr	r1, [pc, #24]	; (80a14b0 <_Z16_fetch_usbserialv+0x48>)
 80a1498:	4803      	ldr	r0, [pc, #12]	; (80a14a8 <_Z16_fetch_usbserialv+0x40>)
 80a149a:	f000 faa1 	bl	80a19e0 <__aeabi_atexit>
	return _usbserial;
}
 80a149e:	4802      	ldr	r0, [pc, #8]	; (80a14a8 <_Z16_fetch_usbserialv+0x40>)
 80a14a0:	b007      	add	sp, #28
 80a14a2:	bd30      	pop	{r4, r5, pc}
 80a14a4:	200004f8 	.word	0x200004f8
 80a14a8:	20000500 	.word	0x20000500
 80a14ac:	20000480 	.word	0x20000480
 80a14b0:	080a13a9 	.word	0x080a13a9

080a14b4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a14b4:	b510      	push	{r4, lr}
 80a14b6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a14b8:	2214      	movs	r2, #20
 80a14ba:	2100      	movs	r1, #0
 80a14bc:	f000 fbf9 	bl	80a1cb2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a14c0:	4620      	mov	r0, r4
 80a14c2:	bd10      	pop	{r4, pc}

080a14c4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a14c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a14c6:	4c0e      	ldr	r4, [pc, #56]	; (80a1500 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a14c8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a14ca:	a801      	add	r0, sp, #4
 80a14cc:	f7ff fff2 	bl	80a14b4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a14d0:	6823      	ldr	r3, [r4, #0]
 80a14d2:	07db      	lsls	r3, r3, #31
 80a14d4:	d410      	bmi.n	80a14f8 <_Z17_fetch_usbserial1v+0x34>
 80a14d6:	4620      	mov	r0, r4
 80a14d8:	f7fe fdee 	bl	80a00b8 <__cxa_guard_acquire>
 80a14dc:	b160      	cbz	r0, 80a14f8 <_Z17_fetch_usbserial1v+0x34>
 80a14de:	aa01      	add	r2, sp, #4
 80a14e0:	2101      	movs	r1, #1
 80a14e2:	4808      	ldr	r0, [pc, #32]	; (80a1504 <_Z17_fetch_usbserial1v+0x40>)
 80a14e4:	f7ff ffa0 	bl	80a1428 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a14e8:	4620      	mov	r0, r4
 80a14ea:	f7fe fdea 	bl	80a00c2 <__cxa_guard_release>
 80a14ee:	4a06      	ldr	r2, [pc, #24]	; (80a1508 <_Z17_fetch_usbserial1v+0x44>)
 80a14f0:	4906      	ldr	r1, [pc, #24]	; (80a150c <_Z17_fetch_usbserial1v+0x48>)
 80a14f2:	4804      	ldr	r0, [pc, #16]	; (80a1504 <_Z17_fetch_usbserial1v+0x40>)
 80a14f4:	f000 fa74 	bl	80a19e0 <__aeabi_atexit>
  return _usbserial1;
}
 80a14f8:	4802      	ldr	r0, [pc, #8]	; (80a1504 <_Z17_fetch_usbserial1v+0x40>)
 80a14fa:	b006      	add	sp, #24
 80a14fc:	bd10      	pop	{r4, pc}
 80a14fe:	bf00      	nop
 80a1500:	200004fc 	.word	0x200004fc
 80a1504:	20000514 	.word	0x20000514
 80a1508:	20000480 	.word	0x20000480
 80a150c:	080a13a9 	.word	0x080a13a9

080a1510 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1510:	4770      	bx	lr

080a1512 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1512:	7441      	strb	r1, [r0, #17]
 80a1514:	4770      	bx	lr

080a1516 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1516:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1518:	7c00      	ldrb	r0, [r0, #16]
 80a151a:	f7ff fc35 	bl	80a0d88 <HAL_USART_Available_Data_For_Write>
}
 80a151e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1522:	bd08      	pop	{r3, pc}

080a1524 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1524:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1526:	7c00      	ldrb	r0, [r0, #16]
 80a1528:	f7ff fc06 	bl	80a0d38 <HAL_USART_Available_Data>
}
 80a152c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1530:	bd08      	pop	{r3, pc}

080a1532 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1532:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1534:	7c00      	ldrb	r0, [r0, #16]
 80a1536:	f7ff fc0f 	bl	80a0d58 <HAL_USART_Peek_Data>
}
 80a153a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a153e:	bf28      	it	cs
 80a1540:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1544:	bd08      	pop	{r3, pc}

080a1546 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1546:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1548:	7c00      	ldrb	r0, [r0, #16]
 80a154a:	f7ff fbfd 	bl	80a0d48 <HAL_USART_Read_Data>
}
 80a154e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1552:	bf28      	it	cs
 80a1554:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1558:	bd08      	pop	{r3, pc}

080a155a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a155a:	7c00      	ldrb	r0, [r0, #16]
 80a155c:	f7ff bc04 	b.w	80a0d68 <HAL_USART_Flush_Data>

080a1560 <_ZN11USARTSerialD0Ev>:
 80a1560:	b510      	push	{r4, lr}
 80a1562:	4604      	mov	r4, r0
 80a1564:	2114      	movs	r1, #20
 80a1566:	f000 fa40 	bl	80a19ea <_ZdlPvj>
 80a156a:	4620      	mov	r0, r4
 80a156c:	bd10      	pop	{r4, pc}

080a156e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a156e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1570:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1572:	4604      	mov	r4, r0
 80a1574:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1576:	b925      	cbnz	r5, 80a1582 <_ZN11USARTSerial5writeEh+0x14>
 80a1578:	7c00      	ldrb	r0, [r0, #16]
 80a157a:	f7ff fc05 	bl	80a0d88 <HAL_USART_Available_Data_For_Write>
 80a157e:	2800      	cmp	r0, #0
 80a1580:	dd05      	ble.n	80a158e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1582:	4631      	mov	r1, r6
 80a1584:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a158a:	f7ff bbcd 	b.w	80a0d28 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a158e:	4628      	mov	r0, r5
 80a1590:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1594 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1594:	b510      	push	{r4, lr}
 80a1596:	4604      	mov	r4, r0
 80a1598:	4608      	mov	r0, r1
 80a159a:	4611      	mov	r1, r2
 80a159c:	2200      	movs	r2, #0
 80a159e:	6062      	str	r2, [r4, #4]
 80a15a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a15a4:	60a2      	str	r2, [r4, #8]
 80a15a6:	4a05      	ldr	r2, [pc, #20]	; (80a15bc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a15a8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a15aa:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a15ac:	2201      	movs	r2, #1
 80a15ae:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a15b0:	461a      	mov	r2, r3
 80a15b2:	f7ff fbb1 	bl	80a0d18 <HAL_USART_Init>
}
 80a15b6:	4620      	mov	r0, r4
 80a15b8:	bd10      	pop	{r4, pc}
 80a15ba:	bf00      	nop
 80a15bc:	080a2470 	.word	0x080a2470

080a15c0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a15c0:	7c00      	ldrb	r0, [r0, #16]
 80a15c2:	f7ff bbd9 	b.w	80a0d78 <HAL_USART_Is_Enabled>
	...

080a15c8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a15c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a15ca:	4c19      	ldr	r4, [pc, #100]	; (80a1630 <_Z22__fetch_global_Serial1v+0x68>)
 80a15cc:	6825      	ldr	r5, [r4, #0]
 80a15ce:	b94d      	cbnz	r5, 80a15e4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a15d0:	2084      	movs	r0, #132	; 0x84
 80a15d2:	f7fe fd62 	bl	80a009a <_Znwj>
 80a15d6:	4606      	mov	r6, r0
 80a15d8:	b118      	cbz	r0, 80a15e2 <_Z22__fetch_global_Serial1v+0x1a>
 80a15da:	2284      	movs	r2, #132	; 0x84
 80a15dc:	4629      	mov	r1, r5
 80a15de:	f000 fb68 	bl	80a1cb2 <memset>
 80a15e2:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a15e4:	4d13      	ldr	r5, [pc, #76]	; (80a1634 <_Z22__fetch_global_Serial1v+0x6c>)
 80a15e6:	682e      	ldr	r6, [r5, #0]
 80a15e8:	b94e      	cbnz	r6, 80a15fe <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a15ea:	2084      	movs	r0, #132	; 0x84
 80a15ec:	f7fe fd55 	bl	80a009a <_Znwj>
 80a15f0:	4607      	mov	r7, r0
 80a15f2:	b118      	cbz	r0, 80a15fc <_Z22__fetch_global_Serial1v+0x34>
 80a15f4:	2284      	movs	r2, #132	; 0x84
 80a15f6:	4631      	mov	r1, r6
 80a15f8:	f000 fb5b 	bl	80a1cb2 <memset>
 80a15fc:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a15fe:	4f0e      	ldr	r7, [pc, #56]	; (80a1638 <_Z22__fetch_global_Serial1v+0x70>)
 80a1600:	6839      	ldr	r1, [r7, #0]
 80a1602:	f011 0601 	ands.w	r6, r1, #1
 80a1606:	d111      	bne.n	80a162c <_Z22__fetch_global_Serial1v+0x64>
 80a1608:	4638      	mov	r0, r7
 80a160a:	f7fe fd55 	bl	80a00b8 <__cxa_guard_acquire>
 80a160e:	b168      	cbz	r0, 80a162c <_Z22__fetch_global_Serial1v+0x64>
 80a1610:	6822      	ldr	r2, [r4, #0]
 80a1612:	4631      	mov	r1, r6
 80a1614:	682b      	ldr	r3, [r5, #0]
 80a1616:	4809      	ldr	r0, [pc, #36]	; (80a163c <_Z22__fetch_global_Serial1v+0x74>)
 80a1618:	f7ff ffbc 	bl	80a1594 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a161c:	4638      	mov	r0, r7
 80a161e:	f7fe fd50 	bl	80a00c2 <__cxa_guard_release>
 80a1622:	4a07      	ldr	r2, [pc, #28]	; (80a1640 <_Z22__fetch_global_Serial1v+0x78>)
 80a1624:	4907      	ldr	r1, [pc, #28]	; (80a1644 <_Z22__fetch_global_Serial1v+0x7c>)
 80a1626:	4805      	ldr	r0, [pc, #20]	; (80a163c <_Z22__fetch_global_Serial1v+0x74>)
 80a1628:	f000 f9da 	bl	80a19e0 <__aeabi_atexit>
#endif
	return serial1;
}
 80a162c:	4803      	ldr	r0, [pc, #12]	; (80a163c <_Z22__fetch_global_Serial1v+0x74>)
 80a162e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1630:	20000544 	.word	0x20000544
 80a1634:	2000053c 	.word	0x2000053c
 80a1638:	20000540 	.word	0x20000540
 80a163c:	20000528 	.word	0x20000528
 80a1640:	20000480 	.word	0x20000480
 80a1644:	080a1511 	.word	0x080a1511

080a1648 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1648:	4770      	bx	lr

080a164a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a164a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a164c:	4606      	mov	r6, r0
 80a164e:	4615      	mov	r5, r2
 80a1650:	460c      	mov	r4, r1
 80a1652:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1654:	42bc      	cmp	r4, r7
 80a1656:	d006      	beq.n	80a1666 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1658:	6833      	ldr	r3, [r6, #0]
 80a165a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a165e:	689b      	ldr	r3, [r3, #8]
 80a1660:	4630      	mov	r0, r6
 80a1662:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1664:	e7f6      	b.n	80a1654 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1666:	4628      	mov	r0, r5
 80a1668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a166a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a166a:	2200      	movs	r2, #0
 80a166c:	7c00      	ldrb	r0, [r0, #16]
 80a166e:	f7ff bbb3 	b.w	80a0dd8 <HAL_I2C_Write_Data>

080a1672 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1672:	2100      	movs	r1, #0
 80a1674:	7c00      	ldrb	r0, [r0, #16]
 80a1676:	f7ff bbb7 	b.w	80a0de8 <HAL_I2C_Available_Data>

080a167a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a167a:	2100      	movs	r1, #0
 80a167c:	7c00      	ldrb	r0, [r0, #16]
 80a167e:	f7ff bbbb 	b.w	80a0df8 <HAL_I2C_Read_Data>

080a1682 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1682:	2100      	movs	r1, #0
 80a1684:	7c00      	ldrb	r0, [r0, #16]
 80a1686:	f7ff bbbf 	b.w	80a0e08 <HAL_I2C_Peek_Data>

080a168a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a168a:	2100      	movs	r1, #0
 80a168c:	7c00      	ldrb	r0, [r0, #16]
 80a168e:	f7ff bbc3 	b.w	80a0e18 <HAL_I2C_Flush_Data>

080a1692 <_ZN7TwoWireD0Ev>:
 80a1692:	b510      	push	{r4, lr}
 80a1694:	4604      	mov	r4, r0
 80a1696:	2114      	movs	r1, #20
 80a1698:	f000 f9a7 	bl	80a19ea <_ZdlPvj>
 80a169c:	4620      	mov	r0, r4
 80a169e:	bd10      	pop	{r4, pc}

080a16a0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a16a0:	b510      	push	{r4, lr}
 80a16a2:	4604      	mov	r4, r0
 80a16a4:	4608      	mov	r0, r1
 80a16a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a16aa:	60a3      	str	r3, [r4, #8]
 80a16ac:	4b04      	ldr	r3, [pc, #16]	; (80a16c0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a16ae:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a16b0:	7420      	strb	r0, [r4, #16]
 80a16b2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a16b4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a16b6:	f7ff fbbf 	bl	80a0e38 <HAL_I2C_Init>

}
 80a16ba:	4620      	mov	r0, r4
 80a16bc:	bd10      	pop	{r4, pc}
 80a16be:	bf00      	nop
 80a16c0:	080a24a0 	.word	0x080a24a0

080a16c4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a16c4:	2300      	movs	r3, #0
 80a16c6:	461a      	mov	r2, r3
 80a16c8:	4619      	mov	r1, r3
 80a16ca:	7c00      	ldrb	r0, [r0, #16]
 80a16cc:	f7ff bb64 	b.w	80a0d98 <HAL_I2C_Begin>

080a16d0 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a16d0:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a16d2:	2400      	movs	r4, #0
 80a16d4:	7c00      	ldrb	r0, [r0, #16]
 80a16d6:	9400      	str	r4, [sp, #0]
 80a16d8:	f7ff fb66 	bl	80a0da8 <HAL_I2C_Request_Data>
  return result;
}
 80a16dc:	b2c0      	uxtb	r0, r0
 80a16de:	b002      	add	sp, #8
 80a16e0:	bd10      	pop	{r4, pc}

080a16e2 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a16e2:	2301      	movs	r3, #1
 80a16e4:	b2d2      	uxtb	r2, r2
 80a16e6:	b2c9      	uxtb	r1, r1
 80a16e8:	f7ff bff2 	b.w	80a16d0 <_ZN7TwoWire11requestFromEhhh>

080a16ec <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a16ec:	2200      	movs	r2, #0
 80a16ee:	7c00      	ldrb	r0, [r0, #16]
 80a16f0:	f7ff bb62 	b.w	80a0db8 <HAL_I2C_Begin_Transmission>

080a16f4 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a16f4:	b2c9      	uxtb	r1, r1
 80a16f6:	f7ff bff9 	b.w	80a16ec <_ZN7TwoWire17beginTransmissionEh>

080a16fa <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a16fa:	2200      	movs	r2, #0
 80a16fc:	7c00      	ldrb	r0, [r0, #16]
 80a16fe:	f7ff bb63 	b.w	80a0dc8 <HAL_I2C_End_Transmission>

080a1702 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a1702:	2101      	movs	r1, #1
 80a1704:	f7ff bff9 	b.w	80a16fa <_ZN7TwoWire15endTransmissionEh>

080a1708 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1708:	2100      	movs	r1, #0
 80a170a:	7c00      	ldrb	r0, [r0, #16]
 80a170c:	f7ff bb8c 	b.w	80a0e28 <HAL_I2C_Is_Enabled>

080a1710 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1710:	2200      	movs	r2, #0
 80a1712:	4611      	mov	r1, r2
 80a1714:	6840      	ldr	r0, [r0, #4]
 80a1716:	f7ff bc1d 	b.w	80a0f54 <network_ready>

080a171a <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a171a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a171c:	4616      	mov	r6, r2
 80a171e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1720:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1722:	460f      	mov	r7, r1
 80a1724:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1726:	2100      	movs	r1, #0
 80a1728:	a803      	add	r0, sp, #12
 80a172a:	f000 fac2 	bl	80a1cb2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a172e:	4630      	mov	r0, r6
 80a1730:	f000 faf0 	bl	80a1d14 <strlen>
 80a1734:	2500      	movs	r5, #0
 80a1736:	9500      	str	r5, [sp, #0]
 80a1738:	b281      	uxth	r1, r0
 80a173a:	687b      	ldr	r3, [r7, #4]
 80a173c:	aa03      	add	r2, sp, #12
 80a173e:	4630      	mov	r0, r6
 80a1740:	f7ff fbbc 	bl	80a0ebc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1744:	b120      	cbz	r0, 80a1750 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1746:	4629      	mov	r1, r5
 80a1748:	4620      	mov	r0, r4
 80a174a:	f7ff fe09 	bl	80a1360 <_ZN9IPAddressC1Em>
 80a174e:	e003      	b.n	80a1758 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1750:	a903      	add	r1, sp, #12
 80a1752:	4620      	mov	r0, r4
 80a1754:	f7ff fdf2 	bl	80a133c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1758:	4620      	mov	r0, r4
 80a175a:	b009      	add	sp, #36	; 0x24
 80a175c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a175e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a175e:	2200      	movs	r2, #0
 80a1760:	4611      	mov	r1, r2
 80a1762:	6840      	ldr	r0, [r0, #4]
 80a1764:	f7ff bc16 	b.w	80a0f94 <network_listening>

080a1768 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1768:	2200      	movs	r2, #0
 80a176a:	4611      	mov	r1, r2
 80a176c:	6840      	ldr	r0, [r0, #4]
 80a176e:	f7ff bc21 	b.w	80a0fb4 <network_get_listen_timeout>

080a1772 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1772:	2200      	movs	r2, #0
 80a1774:	6840      	ldr	r0, [r0, #4]
 80a1776:	f7ff bc15 	b.w	80a0fa4 <network_set_listen_timeout>

080a177a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a177a:	2200      	movs	r2, #0
 80a177c:	f081 0101 	eor.w	r1, r1, #1
 80a1780:	6840      	ldr	r0, [r0, #4]
 80a1782:	f7ff bbff 	b.w	80a0f84 <network_listen>

080a1786 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1786:	2300      	movs	r3, #0
 80a1788:	461a      	mov	r2, r3
 80a178a:	4619      	mov	r1, r3
 80a178c:	6840      	ldr	r0, [r0, #4]
 80a178e:	f7ff bbf1 	b.w	80a0f74 <network_off>

080a1792 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1792:	2200      	movs	r2, #0
 80a1794:	4611      	mov	r1, r2
 80a1796:	6840      	ldr	r0, [r0, #4]
 80a1798:	f7ff bbcc 	b.w	80a0f34 <network_connecting>

080a179c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a179c:	2200      	movs	r2, #0
 80a179e:	2102      	movs	r1, #2
 80a17a0:	6840      	ldr	r0, [r0, #4]
 80a17a2:	f7ff bbcf 	b.w	80a0f44 <network_disconnect>

080a17a6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a17a6:	2300      	movs	r3, #0
 80a17a8:	461a      	mov	r2, r3
 80a17aa:	6840      	ldr	r0, [r0, #4]
 80a17ac:	f7ff bbba 	b.w	80a0f24 <network_connect>

080a17b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a17b0:	4b02      	ldr	r3, [pc, #8]	; (80a17bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a17b2:	2204      	movs	r2, #4
 80a17b4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a17b6:	4a02      	ldr	r2, [pc, #8]	; (80a17c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a17b8:	601a      	str	r2, [r3, #0]
 80a17ba:	4770      	bx	lr
 80a17bc:	20000548 	.word	0x20000548
 80a17c0:	080a24c8 	.word	0x080a24c8

080a17c4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a17c4:	2300      	movs	r3, #0
 80a17c6:	461a      	mov	r2, r3
 80a17c8:	6840      	ldr	r0, [r0, #4]
 80a17ca:	f7ff bbab 	b.w	80a0f24 <network_connect>

080a17ce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a17ce:	2200      	movs	r2, #0
 80a17d0:	2102      	movs	r1, #2
 80a17d2:	6840      	ldr	r0, [r0, #4]
 80a17d4:	f7ff bbb6 	b.w	80a0f44 <network_disconnect>

080a17d8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a17d8:	2200      	movs	r2, #0
 80a17da:	4611      	mov	r1, r2
 80a17dc:	6840      	ldr	r0, [r0, #4]
 80a17de:	f7ff bba9 	b.w	80a0f34 <network_connecting>

080a17e2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a17e2:	2200      	movs	r2, #0
 80a17e4:	4611      	mov	r1, r2
 80a17e6:	6840      	ldr	r0, [r0, #4]
 80a17e8:	f7ff bbb4 	b.w	80a0f54 <network_ready>

080a17ec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a17ec:	2300      	movs	r3, #0
 80a17ee:	461a      	mov	r2, r3
 80a17f0:	4619      	mov	r1, r3
 80a17f2:	6840      	ldr	r0, [r0, #4]
 80a17f4:	f7ff bbb6 	b.w	80a0f64 <network_on>

080a17f8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a17f8:	2300      	movs	r3, #0
 80a17fa:	461a      	mov	r2, r3
 80a17fc:	4619      	mov	r1, r3
 80a17fe:	6840      	ldr	r0, [r0, #4]
 80a1800:	f7ff bbb8 	b.w	80a0f74 <network_off>

080a1804 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1804:	2200      	movs	r2, #0
 80a1806:	f081 0101 	eor.w	r1, r1, #1
 80a180a:	6840      	ldr	r0, [r0, #4]
 80a180c:	f7ff bbba 	b.w	80a0f84 <network_listen>

080a1810 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1810:	2200      	movs	r2, #0
 80a1812:	6840      	ldr	r0, [r0, #4]
 80a1814:	f7ff bbc6 	b.w	80a0fa4 <network_set_listen_timeout>

080a1818 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1818:	2200      	movs	r2, #0
 80a181a:	4611      	mov	r1, r2
 80a181c:	6840      	ldr	r0, [r0, #4]
 80a181e:	f7ff bbc9 	b.w	80a0fb4 <network_get_listen_timeout>

080a1822 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1822:	2200      	movs	r2, #0
 80a1824:	4611      	mov	r1, r2
 80a1826:	6840      	ldr	r0, [r0, #4]
 80a1828:	f7ff bbb4 	b.w	80a0f94 <network_listening>

080a182c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a182c:	b570      	push	{r4, r5, r6, lr}
 80a182e:	4616      	mov	r6, r2
 80a1830:	b08e      	sub	sp, #56	; 0x38
 80a1832:	4604      	mov	r4, r0
    IPAddress addr;
 80a1834:	a808      	add	r0, sp, #32
 80a1836:	f7ff fd73 	bl	80a1320 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a183a:	2211      	movs	r2, #17
 80a183c:	2100      	movs	r1, #0
 80a183e:	a803      	add	r0, sp, #12
 80a1840:	f000 fa37 	bl	80a1cb2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1844:	4630      	mov	r0, r6
 80a1846:	f000 fa65 	bl	80a1d14 <strlen>
 80a184a:	2500      	movs	r5, #0
 80a184c:	4b0a      	ldr	r3, [pc, #40]	; (80a1878 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a184e:	9500      	str	r5, [sp, #0]
 80a1850:	b281      	uxth	r1, r0
 80a1852:	685b      	ldr	r3, [r3, #4]
 80a1854:	aa03      	add	r2, sp, #12
 80a1856:	4630      	mov	r0, r6
 80a1858:	f7ff fb30 	bl	80a0ebc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a185c:	b120      	cbz	r0, 80a1868 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a185e:	4629      	mov	r1, r5
 80a1860:	4620      	mov	r0, r4
 80a1862:	f7ff fd7d 	bl	80a1360 <_ZN9IPAddressC1Em>
 80a1866:	e003      	b.n	80a1870 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1868:	a903      	add	r1, sp, #12
 80a186a:	4620      	mov	r0, r4
 80a186c:	f7ff fd66 	bl	80a133c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1870:	4620      	mov	r0, r4
 80a1872:	b00e      	add	sp, #56	; 0x38
 80a1874:	bd70      	pop	{r4, r5, r6, pc}
 80a1876:	bf00      	nop
 80a1878:	20000548 	.word	0x20000548

080a187c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a187c:	4b02      	ldr	r3, [pc, #8]	; (80a1888 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a187e:	4a03      	ldr	r2, [pc, #12]	; (80a188c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1880:	601a      	str	r2, [r3, #0]
 80a1882:	2200      	movs	r2, #0
 80a1884:	605a      	str	r2, [r3, #4]
 80a1886:	4770      	bx	lr
 80a1888:	20000550 	.word	0x20000550
 80a188c:	080a24fc 	.word	0x080a24fc

080a1890 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1890:	b510      	push	{r4, lr}
 80a1892:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1894:	480f      	ldr	r0, [pc, #60]	; (80a18d4 <pinAvailable+0x44>)
 80a1896:	f7ff fbd1 	bl	80a103c <_ZN8SPIClass9isEnabledEv>
 80a189a:	b128      	cbz	r0, 80a18a8 <pinAvailable+0x18>
 80a189c:	f1a4 030d 	sub.w	r3, r4, #13
 80a18a0:	2b02      	cmp	r3, #2
 80a18a2:	d801      	bhi.n	80a18a8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a18a4:	2000      	movs	r0, #0
 80a18a6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a18a8:	f000 f87a 	bl	80a19a0 <_Z19__fetch_global_Wirev>
 80a18ac:	f7ff ff2c 	bl	80a1708 <_ZN7TwoWire9isEnabledEv>
 80a18b0:	b108      	cbz	r0, 80a18b6 <pinAvailable+0x26>
 80a18b2:	2c01      	cmp	r4, #1
 80a18b4:	d9f6      	bls.n	80a18a4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a18b6:	f7ff fe87 	bl	80a15c8 <_Z22__fetch_global_Serial1v>
 80a18ba:	f7ff fe81 	bl	80a15c0 <_ZN11USARTSerial9isEnabledEv>
 80a18be:	b118      	cbz	r0, 80a18c8 <pinAvailable+0x38>
 80a18c0:	f1a4 0312 	sub.w	r3, r4, #18
 80a18c4:	2b01      	cmp	r3, #1
 80a18c6:	d9ed      	bls.n	80a18a4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a18c8:	2c17      	cmp	r4, #23
 80a18ca:	bf8c      	ite	hi
 80a18cc:	2000      	movhi	r0, #0
 80a18ce:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a18d0:	bd10      	pop	{r4, pc}
 80a18d2:	bf00      	nop
 80a18d4:	20000558 	.word	0x20000558

080a18d8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a18d8:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a18da:	b538      	push	{r3, r4, r5, lr}
 80a18dc:	4604      	mov	r4, r0
 80a18de:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a18e0:	d80a      	bhi.n	80a18f8 <pinMode+0x20>
 80a18e2:	29ff      	cmp	r1, #255	; 0xff
 80a18e4:	d008      	beq.n	80a18f8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a18e6:	f7ff ffd3 	bl	80a1890 <pinAvailable>
 80a18ea:	b128      	cbz	r0, 80a18f8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a18ec:	4629      	mov	r1, r5
 80a18ee:	4620      	mov	r0, r4
}
 80a18f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a18f4:	f7ff b9c8 	b.w	80a0c88 <HAL_Pin_Mode>
 80a18f8:	bd38      	pop	{r3, r4, r5, pc}

080a18fa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a18fa:	b538      	push	{r3, r4, r5, lr}
 80a18fc:	4604      	mov	r4, r0
 80a18fe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1900:	f7ff f9ca 	bl	80a0c98 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1904:	28ff      	cmp	r0, #255	; 0xff
 80a1906:	d010      	beq.n	80a192a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1908:	2806      	cmp	r0, #6
 80a190a:	d804      	bhi.n	80a1916 <digitalWrite+0x1c>
 80a190c:	234d      	movs	r3, #77	; 0x4d
 80a190e:	fa23 f000 	lsr.w	r0, r3, r0
 80a1912:	07c3      	lsls	r3, r0, #31
 80a1914:	d409      	bmi.n	80a192a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1916:	4620      	mov	r0, r4
 80a1918:	f7ff ffba 	bl	80a1890 <pinAvailable>
 80a191c:	b128      	cbz	r0, 80a192a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a191e:	4629      	mov	r1, r5
 80a1920:	4620      	mov	r0, r4
}
 80a1922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1926:	f7ff b9bf 	b.w	80a0ca8 <HAL_GPIO_Write>
 80a192a:	bd38      	pop	{r3, r4, r5, pc}

080a192c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a192c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a192e:	4c0c      	ldr	r4, [pc, #48]	; (80a1960 <_GLOBAL__sub_I_SPI+0x34>)
 80a1930:	4e0c      	ldr	r6, [pc, #48]	; (80a1964 <_GLOBAL__sub_I_SPI+0x38>)
 80a1932:	4d0d      	ldr	r5, [pc, #52]	; (80a1968 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1934:	2100      	movs	r1, #0
 80a1936:	4620      	mov	r0, r4
 80a1938:	f7ff fb6c 	bl	80a1014 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a193c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a193e:	4c0b      	ldr	r4, [pc, #44]	; (80a196c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1940:	4632      	mov	r2, r6
 80a1942:	4629      	mov	r1, r5
 80a1944:	f000 f84c 	bl	80a19e0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1948:	2101      	movs	r1, #1
 80a194a:	4620      	mov	r0, r4
 80a194c:	f7ff fb62 	bl	80a1014 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1950:	4632      	mov	r2, r6
 80a1952:	4629      	mov	r1, r5
 80a1954:	4620      	mov	r0, r4
 80a1956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a195a:	f000 b841 	b.w	80a19e0 <__aeabi_atexit>
 80a195e:	bf00      	nop
 80a1960:	20000558 	.word	0x20000558
 80a1964:	20000480 	.word	0x20000480
 80a1968:	080a1005 	.word	0x080a1005
 80a196c:	20000568 	.word	0x20000568

080a1970 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1970:	b513      	push	{r0, r1, r4, lr}
 80a1972:	4c08      	ldr	r4, [pc, #32]	; (80a1994 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1974:	2300      	movs	r3, #0
 80a1976:	461a      	mov	r2, r3
 80a1978:	4619      	mov	r1, r3
 80a197a:	9300      	str	r3, [sp, #0]
 80a197c:	4620      	mov	r0, r4
 80a197e:	f7ff fd05 	bl	80a138c <_ZN9IPAddressC1Ehhhh>
 80a1982:	4620      	mov	r0, r4
 80a1984:	4a04      	ldr	r2, [pc, #16]	; (80a1998 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1986:	4905      	ldr	r1, [pc, #20]	; (80a199c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1988:	b002      	add	sp, #8
 80a198a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a198e:	f000 b827 	b.w	80a19e0 <__aeabi_atexit>
 80a1992:	bf00      	nop
 80a1994:	2000057c 	.word	0x2000057c
 80a1998:	20000480 	.word	0x20000480
 80a199c:	080a12dd 	.word	0x080a12dd

080a19a0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a19a0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a19a2:	4d0b      	ldr	r5, [pc, #44]	; (80a19d0 <_Z19__fetch_global_Wirev+0x30>)
 80a19a4:	6829      	ldr	r1, [r5, #0]
 80a19a6:	f011 0401 	ands.w	r4, r1, #1
 80a19aa:	d10f      	bne.n	80a19cc <_Z19__fetch_global_Wirev+0x2c>
 80a19ac:	4628      	mov	r0, r5
 80a19ae:	f7fe fb83 	bl	80a00b8 <__cxa_guard_acquire>
 80a19b2:	b158      	cbz	r0, 80a19cc <_Z19__fetch_global_Wirev+0x2c>
 80a19b4:	4621      	mov	r1, r4
 80a19b6:	4807      	ldr	r0, [pc, #28]	; (80a19d4 <_Z19__fetch_global_Wirev+0x34>)
 80a19b8:	f7ff fe72 	bl	80a16a0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a19bc:	4628      	mov	r0, r5
 80a19be:	f7fe fb80 	bl	80a00c2 <__cxa_guard_release>
 80a19c2:	4a05      	ldr	r2, [pc, #20]	; (80a19d8 <_Z19__fetch_global_Wirev+0x38>)
 80a19c4:	4905      	ldr	r1, [pc, #20]	; (80a19dc <_Z19__fetch_global_Wirev+0x3c>)
 80a19c6:	4803      	ldr	r0, [pc, #12]	; (80a19d4 <_Z19__fetch_global_Wirev+0x34>)
 80a19c8:	f000 f80a 	bl	80a19e0 <__aeabi_atexit>
	return wire;
}
 80a19cc:	4801      	ldr	r0, [pc, #4]	; (80a19d4 <_Z19__fetch_global_Wirev+0x34>)
 80a19ce:	bd38      	pop	{r3, r4, r5, pc}
 80a19d0:	20000594 	.word	0x20000594
 80a19d4:	20000598 	.word	0x20000598
 80a19d8:	20000480 	.word	0x20000480
 80a19dc:	080a1649 	.word	0x080a1649

080a19e0 <__aeabi_atexit>:
 80a19e0:	460b      	mov	r3, r1
 80a19e2:	4601      	mov	r1, r0
 80a19e4:	4618      	mov	r0, r3
 80a19e6:	f000 b94b 	b.w	80a1c80 <__cxa_atexit>

080a19ea <_ZdlPvj>:
 80a19ea:	f7fe bb58 	b.w	80a009e <_ZdlPv>
	...

080a19f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a19f0:	4b18      	ldr	r3, [pc, #96]	; (80a1a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a19f2:	681a      	ldr	r2, [r3, #0]
 80a19f4:	07d1      	lsls	r1, r2, #31
 80a19f6:	bf5c      	itt	pl
 80a19f8:	2201      	movpl	r2, #1
 80a19fa:	601a      	strpl	r2, [r3, #0]
 80a19fc:	4b16      	ldr	r3, [pc, #88]	; (80a1a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a19fe:	681a      	ldr	r2, [r3, #0]
 80a1a00:	07d2      	lsls	r2, r2, #31
 80a1a02:	bf5c      	itt	pl
 80a1a04:	2201      	movpl	r2, #1
 80a1a06:	601a      	strpl	r2, [r3, #0]
 80a1a08:	4b14      	ldr	r3, [pc, #80]	; (80a1a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1a0a:	681a      	ldr	r2, [r3, #0]
 80a1a0c:	07d0      	lsls	r0, r2, #31
 80a1a0e:	bf5c      	itt	pl
 80a1a10:	2201      	movpl	r2, #1
 80a1a12:	601a      	strpl	r2, [r3, #0]
 80a1a14:	4b12      	ldr	r3, [pc, #72]	; (80a1a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1a16:	681a      	ldr	r2, [r3, #0]
 80a1a18:	07d1      	lsls	r1, r2, #31
 80a1a1a:	bf5c      	itt	pl
 80a1a1c:	2201      	movpl	r2, #1
 80a1a1e:	601a      	strpl	r2, [r3, #0]
 80a1a20:	4b10      	ldr	r3, [pc, #64]	; (80a1a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1a22:	681a      	ldr	r2, [r3, #0]
 80a1a24:	07d2      	lsls	r2, r2, #31
 80a1a26:	bf5c      	itt	pl
 80a1a28:	2201      	movpl	r2, #1
 80a1a2a:	601a      	strpl	r2, [r3, #0]
 80a1a2c:	4b0e      	ldr	r3, [pc, #56]	; (80a1a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1a2e:	681a      	ldr	r2, [r3, #0]
 80a1a30:	07d0      	lsls	r0, r2, #31
 80a1a32:	bf5c      	itt	pl
 80a1a34:	2201      	movpl	r2, #1
 80a1a36:	601a      	strpl	r2, [r3, #0]
 80a1a38:	4b0c      	ldr	r3, [pc, #48]	; (80a1a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1a3a:	681a      	ldr	r2, [r3, #0]
 80a1a3c:	07d1      	lsls	r1, r2, #31
 80a1a3e:	bf5c      	itt	pl
 80a1a40:	2201      	movpl	r2, #1
 80a1a42:	601a      	strpl	r2, [r3, #0]
 80a1a44:	4b0a      	ldr	r3, [pc, #40]	; (80a1a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1a46:	681a      	ldr	r2, [r3, #0]
 80a1a48:	07d2      	lsls	r2, r2, #31
 80a1a4a:	bf5c      	itt	pl
 80a1a4c:	2201      	movpl	r2, #1
 80a1a4e:	601a      	strpl	r2, [r3, #0]
 80a1a50:	4770      	bx	lr
 80a1a52:	bf00      	nop
 80a1a54:	200005c8 	.word	0x200005c8
 80a1a58:	200005c4 	.word	0x200005c4
 80a1a5c:	200005c0 	.word	0x200005c0
 80a1a60:	200005bc 	.word	0x200005bc
 80a1a64:	200005b8 	.word	0x200005b8
 80a1a68:	200005b4 	.word	0x200005b4
 80a1a6c:	200005b0 	.word	0x200005b0
 80a1a70:	200005ac 	.word	0x200005ac

080a1a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1a74:	4b24      	ldr	r3, [pc, #144]	; (80a1b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1a76:	681a      	ldr	r2, [r3, #0]
 80a1a78:	07d0      	lsls	r0, r2, #31
 80a1a7a:	bf5c      	itt	pl
 80a1a7c:	2201      	movpl	r2, #1
 80a1a7e:	601a      	strpl	r2, [r3, #0]
 80a1a80:	4b22      	ldr	r3, [pc, #136]	; (80a1b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1a82:	681a      	ldr	r2, [r3, #0]
 80a1a84:	07d1      	lsls	r1, r2, #31
 80a1a86:	bf5c      	itt	pl
 80a1a88:	2201      	movpl	r2, #1
 80a1a8a:	601a      	strpl	r2, [r3, #0]
 80a1a8c:	4b20      	ldr	r3, [pc, #128]	; (80a1b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1a8e:	681a      	ldr	r2, [r3, #0]
 80a1a90:	07d2      	lsls	r2, r2, #31
 80a1a92:	bf5c      	itt	pl
 80a1a94:	2201      	movpl	r2, #1
 80a1a96:	601a      	strpl	r2, [r3, #0]
 80a1a98:	4b1e      	ldr	r3, [pc, #120]	; (80a1b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1a9a:	681a      	ldr	r2, [r3, #0]
 80a1a9c:	07d0      	lsls	r0, r2, #31
 80a1a9e:	bf5c      	itt	pl
 80a1aa0:	2201      	movpl	r2, #1
 80a1aa2:	601a      	strpl	r2, [r3, #0]
 80a1aa4:	4b1c      	ldr	r3, [pc, #112]	; (80a1b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1aa6:	681a      	ldr	r2, [r3, #0]
 80a1aa8:	07d1      	lsls	r1, r2, #31
 80a1aaa:	bf5c      	itt	pl
 80a1aac:	2201      	movpl	r2, #1
 80a1aae:	601a      	strpl	r2, [r3, #0]
 80a1ab0:	4b1a      	ldr	r3, [pc, #104]	; (80a1b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1ab2:	681a      	ldr	r2, [r3, #0]
 80a1ab4:	07d2      	lsls	r2, r2, #31
 80a1ab6:	bf5c      	itt	pl
 80a1ab8:	2201      	movpl	r2, #1
 80a1aba:	601a      	strpl	r2, [r3, #0]
 80a1abc:	4b18      	ldr	r3, [pc, #96]	; (80a1b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1abe:	681a      	ldr	r2, [r3, #0]
 80a1ac0:	07d0      	lsls	r0, r2, #31
 80a1ac2:	bf5c      	itt	pl
 80a1ac4:	2201      	movpl	r2, #1
 80a1ac6:	601a      	strpl	r2, [r3, #0]
 80a1ac8:	4b16      	ldr	r3, [pc, #88]	; (80a1b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1aca:	681a      	ldr	r2, [r3, #0]
 80a1acc:	07d1      	lsls	r1, r2, #31
 80a1ace:	bf5c      	itt	pl
 80a1ad0:	2201      	movpl	r2, #1
 80a1ad2:	601a      	strpl	r2, [r3, #0]
 80a1ad4:	4b14      	ldr	r3, [pc, #80]	; (80a1b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1ad6:	681a      	ldr	r2, [r3, #0]
 80a1ad8:	07d2      	lsls	r2, r2, #31
 80a1ada:	bf5c      	itt	pl
 80a1adc:	2201      	movpl	r2, #1
 80a1ade:	601a      	strpl	r2, [r3, #0]
 80a1ae0:	4b12      	ldr	r3, [pc, #72]	; (80a1b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1ae2:	681a      	ldr	r2, [r3, #0]
 80a1ae4:	07d0      	lsls	r0, r2, #31
 80a1ae6:	bf5c      	itt	pl
 80a1ae8:	2201      	movpl	r2, #1
 80a1aea:	601a      	strpl	r2, [r3, #0]
 80a1aec:	4b10      	ldr	r3, [pc, #64]	; (80a1b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1aee:	681a      	ldr	r2, [r3, #0]
 80a1af0:	07d1      	lsls	r1, r2, #31
 80a1af2:	bf5c      	itt	pl
 80a1af4:	2201      	movpl	r2, #1
 80a1af6:	601a      	strpl	r2, [r3, #0]
 80a1af8:	4b0e      	ldr	r3, [pc, #56]	; (80a1b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1afa:	681a      	ldr	r2, [r3, #0]
 80a1afc:	07d2      	lsls	r2, r2, #31
 80a1afe:	bf5c      	itt	pl
 80a1b00:	2201      	movpl	r2, #1
 80a1b02:	601a      	strpl	r2, [r3, #0]
 80a1b04:	4770      	bx	lr
 80a1b06:	bf00      	nop
 80a1b08:	200005f8 	.word	0x200005f8
 80a1b0c:	200005f4 	.word	0x200005f4
 80a1b10:	200005f0 	.word	0x200005f0
 80a1b14:	200005ec 	.word	0x200005ec
 80a1b18:	200005e8 	.word	0x200005e8
 80a1b1c:	200005e4 	.word	0x200005e4
 80a1b20:	200005e0 	.word	0x200005e0
 80a1b24:	200005dc 	.word	0x200005dc
 80a1b28:	200005d8 	.word	0x200005d8
 80a1b2c:	200005d4 	.word	0x200005d4
 80a1b30:	200005d0 	.word	0x200005d0
 80a1b34:	200005cc 	.word	0x200005cc

080a1b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1b38:	4b24      	ldr	r3, [pc, #144]	; (80a1bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1b3a:	681a      	ldr	r2, [r3, #0]
 80a1b3c:	07d0      	lsls	r0, r2, #31
 80a1b3e:	bf5c      	itt	pl
 80a1b40:	2201      	movpl	r2, #1
 80a1b42:	601a      	strpl	r2, [r3, #0]
 80a1b44:	4b22      	ldr	r3, [pc, #136]	; (80a1bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1b46:	681a      	ldr	r2, [r3, #0]
 80a1b48:	07d1      	lsls	r1, r2, #31
 80a1b4a:	bf5c      	itt	pl
 80a1b4c:	2201      	movpl	r2, #1
 80a1b4e:	601a      	strpl	r2, [r3, #0]
 80a1b50:	4b20      	ldr	r3, [pc, #128]	; (80a1bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1b52:	681a      	ldr	r2, [r3, #0]
 80a1b54:	07d2      	lsls	r2, r2, #31
 80a1b56:	bf5c      	itt	pl
 80a1b58:	2201      	movpl	r2, #1
 80a1b5a:	601a      	strpl	r2, [r3, #0]
 80a1b5c:	4b1e      	ldr	r3, [pc, #120]	; (80a1bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1b5e:	681a      	ldr	r2, [r3, #0]
 80a1b60:	07d0      	lsls	r0, r2, #31
 80a1b62:	bf5c      	itt	pl
 80a1b64:	2201      	movpl	r2, #1
 80a1b66:	601a      	strpl	r2, [r3, #0]
 80a1b68:	4b1c      	ldr	r3, [pc, #112]	; (80a1bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1b6a:	681a      	ldr	r2, [r3, #0]
 80a1b6c:	07d1      	lsls	r1, r2, #31
 80a1b6e:	bf5c      	itt	pl
 80a1b70:	2201      	movpl	r2, #1
 80a1b72:	601a      	strpl	r2, [r3, #0]
 80a1b74:	4b1a      	ldr	r3, [pc, #104]	; (80a1be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1b76:	681a      	ldr	r2, [r3, #0]
 80a1b78:	07d2      	lsls	r2, r2, #31
 80a1b7a:	bf5c      	itt	pl
 80a1b7c:	2201      	movpl	r2, #1
 80a1b7e:	601a      	strpl	r2, [r3, #0]
 80a1b80:	4b18      	ldr	r3, [pc, #96]	; (80a1be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1b82:	681a      	ldr	r2, [r3, #0]
 80a1b84:	07d0      	lsls	r0, r2, #31
 80a1b86:	bf5c      	itt	pl
 80a1b88:	2201      	movpl	r2, #1
 80a1b8a:	601a      	strpl	r2, [r3, #0]
 80a1b8c:	4b16      	ldr	r3, [pc, #88]	; (80a1be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1b8e:	681a      	ldr	r2, [r3, #0]
 80a1b90:	07d1      	lsls	r1, r2, #31
 80a1b92:	bf5c      	itt	pl
 80a1b94:	2201      	movpl	r2, #1
 80a1b96:	601a      	strpl	r2, [r3, #0]
 80a1b98:	4b14      	ldr	r3, [pc, #80]	; (80a1bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1b9a:	681a      	ldr	r2, [r3, #0]
 80a1b9c:	07d2      	lsls	r2, r2, #31
 80a1b9e:	bf5c      	itt	pl
 80a1ba0:	2201      	movpl	r2, #1
 80a1ba2:	601a      	strpl	r2, [r3, #0]
 80a1ba4:	4b12      	ldr	r3, [pc, #72]	; (80a1bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1ba6:	681a      	ldr	r2, [r3, #0]
 80a1ba8:	07d0      	lsls	r0, r2, #31
 80a1baa:	bf5c      	itt	pl
 80a1bac:	2201      	movpl	r2, #1
 80a1bae:	601a      	strpl	r2, [r3, #0]
 80a1bb0:	4b10      	ldr	r3, [pc, #64]	; (80a1bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1bb2:	681a      	ldr	r2, [r3, #0]
 80a1bb4:	07d1      	lsls	r1, r2, #31
 80a1bb6:	bf5c      	itt	pl
 80a1bb8:	2201      	movpl	r2, #1
 80a1bba:	601a      	strpl	r2, [r3, #0]
 80a1bbc:	4b0e      	ldr	r3, [pc, #56]	; (80a1bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1bbe:	681a      	ldr	r2, [r3, #0]
 80a1bc0:	07d2      	lsls	r2, r2, #31
 80a1bc2:	bf5c      	itt	pl
 80a1bc4:	2201      	movpl	r2, #1
 80a1bc6:	601a      	strpl	r2, [r3, #0]
 80a1bc8:	4770      	bx	lr
 80a1bca:	bf00      	nop
 80a1bcc:	20000628 	.word	0x20000628
 80a1bd0:	20000624 	.word	0x20000624
 80a1bd4:	20000620 	.word	0x20000620
 80a1bd8:	2000061c 	.word	0x2000061c
 80a1bdc:	20000618 	.word	0x20000618
 80a1be0:	20000614 	.word	0x20000614
 80a1be4:	20000610 	.word	0x20000610
 80a1be8:	2000060c 	.word	0x2000060c
 80a1bec:	20000608 	.word	0x20000608
 80a1bf0:	20000604 	.word	0x20000604
 80a1bf4:	20000600 	.word	0x20000600
 80a1bf8:	200005fc 	.word	0x200005fc

080a1bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1bfc:	4b18      	ldr	r3, [pc, #96]	; (80a1c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1bfe:	681a      	ldr	r2, [r3, #0]
 80a1c00:	07d1      	lsls	r1, r2, #31
 80a1c02:	bf5c      	itt	pl
 80a1c04:	2201      	movpl	r2, #1
 80a1c06:	601a      	strpl	r2, [r3, #0]
 80a1c08:	4b16      	ldr	r3, [pc, #88]	; (80a1c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1c0a:	681a      	ldr	r2, [r3, #0]
 80a1c0c:	07d2      	lsls	r2, r2, #31
 80a1c0e:	bf5c      	itt	pl
 80a1c10:	2201      	movpl	r2, #1
 80a1c12:	601a      	strpl	r2, [r3, #0]
 80a1c14:	4b14      	ldr	r3, [pc, #80]	; (80a1c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1c16:	681a      	ldr	r2, [r3, #0]
 80a1c18:	07d0      	lsls	r0, r2, #31
 80a1c1a:	bf5c      	itt	pl
 80a1c1c:	2201      	movpl	r2, #1
 80a1c1e:	601a      	strpl	r2, [r3, #0]
 80a1c20:	4b12      	ldr	r3, [pc, #72]	; (80a1c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1c22:	681a      	ldr	r2, [r3, #0]
 80a1c24:	07d1      	lsls	r1, r2, #31
 80a1c26:	bf5c      	itt	pl
 80a1c28:	2201      	movpl	r2, #1
 80a1c2a:	601a      	strpl	r2, [r3, #0]
 80a1c2c:	4b10      	ldr	r3, [pc, #64]	; (80a1c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1c2e:	681a      	ldr	r2, [r3, #0]
 80a1c30:	07d2      	lsls	r2, r2, #31
 80a1c32:	bf5c      	itt	pl
 80a1c34:	2201      	movpl	r2, #1
 80a1c36:	601a      	strpl	r2, [r3, #0]
 80a1c38:	4b0e      	ldr	r3, [pc, #56]	; (80a1c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1c3a:	681a      	ldr	r2, [r3, #0]
 80a1c3c:	07d0      	lsls	r0, r2, #31
 80a1c3e:	bf5c      	itt	pl
 80a1c40:	2201      	movpl	r2, #1
 80a1c42:	601a      	strpl	r2, [r3, #0]
 80a1c44:	4b0c      	ldr	r3, [pc, #48]	; (80a1c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1c46:	681a      	ldr	r2, [r3, #0]
 80a1c48:	07d1      	lsls	r1, r2, #31
 80a1c4a:	bf5c      	itt	pl
 80a1c4c:	2201      	movpl	r2, #1
 80a1c4e:	601a      	strpl	r2, [r3, #0]
 80a1c50:	4b0a      	ldr	r3, [pc, #40]	; (80a1c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1c52:	681a      	ldr	r2, [r3, #0]
 80a1c54:	07d2      	lsls	r2, r2, #31
 80a1c56:	bf5c      	itt	pl
 80a1c58:	2201      	movpl	r2, #1
 80a1c5a:	601a      	strpl	r2, [r3, #0]
 80a1c5c:	4770      	bx	lr
 80a1c5e:	bf00      	nop
 80a1c60:	20000648 	.word	0x20000648
 80a1c64:	20000644 	.word	0x20000644
 80a1c68:	20000640 	.word	0x20000640
 80a1c6c:	2000063c 	.word	0x2000063c
 80a1c70:	20000638 	.word	0x20000638
 80a1c74:	20000634 	.word	0x20000634
 80a1c78:	20000630 	.word	0x20000630
 80a1c7c:	2000062c 	.word	0x2000062c

080a1c80 <__cxa_atexit>:
 80a1c80:	b510      	push	{r4, lr}
 80a1c82:	4c05      	ldr	r4, [pc, #20]	; (80a1c98 <__cxa_atexit+0x18>)
 80a1c84:	4613      	mov	r3, r2
 80a1c86:	b12c      	cbz	r4, 80a1c94 <__cxa_atexit+0x14>
 80a1c88:	460a      	mov	r2, r1
 80a1c8a:	4601      	mov	r1, r0
 80a1c8c:	2002      	movs	r0, #2
 80a1c8e:	f3af 8000 	nop.w
 80a1c92:	bd10      	pop	{r4, pc}
 80a1c94:	4620      	mov	r0, r4
 80a1c96:	bd10      	pop	{r4, pc}
 80a1c98:	00000000 	.word	0x00000000

080a1c9c <memcpy>:
 80a1c9c:	b510      	push	{r4, lr}
 80a1c9e:	1e43      	subs	r3, r0, #1
 80a1ca0:	440a      	add	r2, r1
 80a1ca2:	4291      	cmp	r1, r2
 80a1ca4:	d004      	beq.n	80a1cb0 <memcpy+0x14>
 80a1ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1caa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1cae:	e7f8      	b.n	80a1ca2 <memcpy+0x6>
 80a1cb0:	bd10      	pop	{r4, pc}

080a1cb2 <memset>:
 80a1cb2:	4603      	mov	r3, r0
 80a1cb4:	4402      	add	r2, r0
 80a1cb6:	4293      	cmp	r3, r2
 80a1cb8:	d002      	beq.n	80a1cc0 <memset+0xe>
 80a1cba:	f803 1b01 	strb.w	r1, [r3], #1
 80a1cbe:	e7fa      	b.n	80a1cb6 <memset+0x4>
 80a1cc0:	4770      	bx	lr
	...

080a1cc4 <srand>:
 80a1cc4:	b538      	push	{r3, r4, r5, lr}
 80a1cc6:	4b12      	ldr	r3, [pc, #72]	; (80a1d10 <srand+0x4c>)
 80a1cc8:	4605      	mov	r5, r0
 80a1cca:	681c      	ldr	r4, [r3, #0]
 80a1ccc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1cce:	b9d3      	cbnz	r3, 80a1d06 <srand+0x42>
 80a1cd0:	2018      	movs	r0, #24
 80a1cd2:	f7ff f987 	bl	80a0fe4 <malloc>
 80a1cd6:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1cda:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1cdc:	8003      	strh	r3, [r0, #0]
 80a1cde:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1ce2:	8043      	strh	r3, [r0, #2]
 80a1ce4:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1ce8:	8083      	strh	r3, [r0, #4]
 80a1cea:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1cee:	80c3      	strh	r3, [r0, #6]
 80a1cf0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1cf4:	8103      	strh	r3, [r0, #8]
 80a1cf6:	2305      	movs	r3, #5
 80a1cf8:	8143      	strh	r3, [r0, #10]
 80a1cfa:	230b      	movs	r3, #11
 80a1cfc:	8183      	strh	r3, [r0, #12]
 80a1cfe:	2201      	movs	r2, #1
 80a1d00:	2300      	movs	r3, #0
 80a1d02:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1d06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1d08:	2200      	movs	r2, #0
 80a1d0a:	611d      	str	r5, [r3, #16]
 80a1d0c:	615a      	str	r2, [r3, #20]
 80a1d0e:	bd38      	pop	{r3, r4, r5, pc}
 80a1d10:	2000047c 	.word	0x2000047c

080a1d14 <strlen>:
 80a1d14:	4603      	mov	r3, r0
 80a1d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1d1a:	2a00      	cmp	r2, #0
 80a1d1c:	d1fb      	bne.n	80a1d16 <strlen+0x2>
 80a1d1e:	1a18      	subs	r0, r3, r0
 80a1d20:	3801      	subs	r0, #1
 80a1d22:	4770      	bx	lr

080a1d24 <dynalib_user>:
 80a1d24:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1d34:	0000 0000 504d 3152 3132 6e20 746f 6620     ....MPR121 not f
 80a1d44:	756f 646e 202c 6863 6365 206b 6977 6972     ound, check wiri
 80a1d54:	676e 003f 504d 3152 3132 6620 756f 646e     ng?.MPR121 found
 80a1d64:	0021 7845 6574 6e72 6c61 4820 7261 7764     !.External Hardw
 80a1d74:	7261 2065 6554 7473 2a00 2a2a 2000 202d     are Test.***. - 
 80a1d84:	2000 6f74 6375 6568 0064 7220 6c65 6165     . touched. relea
 80a1d94:	6573 0064                                   sed.

080a1d98 <_ZTV16Adafruit_SSD1306>:
	...
 80a1da0:	00cd 080a 01f9 080a 0bf9 080a 105d 080a     ............]...
 80a1db0:	0821 080a 08f5 080a 06a9 080a 0535 080a     !...........5...
 80a1dc0:	09b5 080a 0a4b 080a 0a83 080a 0a9f 080a     ....K...........

080a1dd0 <_ZTV12Adafruit_GFX>:
	...
 80a1de0:	0bf9 080a 105d 080a 00a5 080a 08f5 080a     ....]...........
 80a1df0:	0a15 080a 0a31 080a 09b5 080a 0a4b 080a     ....1.......K...
 80a1e00:	0a83 080a 0a9f 080a                         ........

080a1e08 <_ZL4font>:
 80a1e08:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 80a1e18:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 80a1e28:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 80a1e38:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 80a1e48:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 80a1e58:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 80a1e68:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 80a1e78:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 80a1e88:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 80a1e98:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 80a1ea8:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 80a1eb8:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 80a1ec8:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 80a1ed8:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 80a1ee8:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 80a1ef8:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 80a1f08:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 80a1f18:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 80a1f28:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 80a1f38:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 80a1f48:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 80a1f58:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 80a1f68:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 80a1f78:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 80a1f88:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 80a1f98:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 80a1fa8:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 80a1fb8:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 80a1fc8:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 80a1fd8:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 80a1fe8:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 80a1ff8:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 80a2008:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 80a2018:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 80a2028:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 80a2038:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 80a2048:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 80a2058:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 80a2068:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 80a2078:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 80a2088:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 80a2098:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
 80a20a8:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 80a20b8:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 80a20c8:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
 80a20d8:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 80a20e8:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
 80a20f8:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
 80a2108:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
 80a2118:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 80a2128:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 80a2138:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 80a2148:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 80a2158:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 80a2168:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 80a2178:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
 80a2188:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
 80a2198:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
 80a21a8:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
 80a21b8:	141f 1414 001f 1010 f010 0000 0000 101f     ................
 80a21c8:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
 80a21d8:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
 80a21e8:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
 80a21f8:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
 80a2208:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
 80a2218:	1414 f414 1014 f010 f010 0000 101f 001f     ................
 80a2228:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
 80a2238:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
 80a2248:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
 80a2258:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
 80a2268:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
 80a2278:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
 80a2288:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
 80a2298:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
 80a22a8:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
 80a22b8:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
 80a22c8:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
 80a22d8:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
 80a22e8:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
 80a22f8:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

080a2304 <_ZTV8SPIClass>:
	...
 80a230c:	1005 080a 1007 080a 6162 6475 5300 7265     ........baud.Ser
 80a231c:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 80a232c:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 80a233c:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 80a234c:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 80a235c:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 80a236c:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 80a237c:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 80a238c:	0070 3025 3031 2075 5d00 0020 6425 2c00     p.%010u .] .%d.,
 80a239c:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
 80a23ac:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
 80a23bc:	0a0d 6600 6c00 006e 6e66 6300 646f 0065     ...f.ln.fn.code.
 80a23cc:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
 80a23dc:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 80a23ec:	0072 6170 696e 0063 6c61 006c 005a 2b25     r.panic.all.Z.%+
 80a23fc:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a240c:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a241c:	6974 656d 0000 0000                         time....

080a2424 <_ZTV9IPAddress>:
	...
 80a242c:	12ed 080a 12dd 080a 12df 080a               ............

080a2438 <_ZTV9USBSerial>:
	...
 80a2440:	13a9 080a 13f9 080a 1407 080a 105d 080a     ............]...
 80a2450:	13e5 080a 13ab 080a 13c1 080a 13f3 080a     ................
 80a2460:	13d7 080a 13a5 080a                         ........

080a2468 <_ZTV11USARTSerial>:
	...
 80a2470:	1511 080a 1561 080a 156f 080a 105d 080a     ....a...o...]...
 80a2480:	1525 080a 1547 080a 1533 080a 155b 080a     %...G...3...[...
 80a2490:	1513 080a 1517 080a                         ........

080a2498 <_ZTV7TwoWire>:
	...
 80a24a0:	1649 080a 1693 080a 166b 080a 164b 080a     I.......k...K...
 80a24b0:	1673 080a 167b 080a 1683 080a 168b 080a     s...{...........

080a24c0 <_ZTVN5spark9WiFiClassE>:
	...
 80a24c8:	17a7 080a 179d 080a 1793 080a 1711 080a     ................
 80a24d8:	1133 080a 1787 080a 177b 080a 1773 080a     3.......{...s...
 80a24e8:	1769 080a 175f 080a 171b 080a               i..._.......

080a24f4 <_ZTVN5spark12NetworkClassE>:
	...
 80a24fc:	17c5 080a 17cf 080a 17d9 080a 17e3 080a     ................
 80a250c:	17ed 080a 17f9 080a 1805 080a 1811 080a     ................
 80a251c:	1819 080a 1823 080a 182d 080a               ....#...-...

080a2528 <__sf_fake_stdin>:
	...

080a2548 <__sf_fake_stdout>:
	...

080a2568 <__sf_fake_stderr>:
	...
 80a2588:	0043                                        C.

080a258a <link_const_variable_data_end>:
	...

080a258c <link_constructors_location>:
 80a258c:	080a00c9 	.word	0x080a00c9
 80a2590:	080a0209 	.word	0x080a0209
 80a2594:	080a0475 	.word	0x080a0475
 80a2598:	080a0521 	.word	0x080a0521
 80a259c:	080a08f1 	.word	0x080a08f1
 80a25a0:	080a0c73 	.word	0x080a0c73
 80a25a4:	080a1045 	.word	0x080a1045
 80a25a8:	080a1141 	.word	0x080a1141
 80a25ac:	080a1151 	.word	0x080a1151
 80a25b0:	080a1189 	.word	0x080a1189
 80a25b4:	080a17b1 	.word	0x080a17b1
 80a25b8:	080a187d 	.word	0x080a187d
 80a25bc:	080a192d 	.word	0x080a192d
 80a25c0:	080a1971 	.word	0x080a1971
 80a25c4:	080a19f1 	.word	0x080a19f1
 80a25c8:	080a1a75 	.word	0x080a1a75
 80a25cc:	080a1b39 	.word	0x080a1b39
 80a25d0:	080a1bfd 	.word	0x080a1bfd

080a25d4 <link_constructors_end>:
	...
