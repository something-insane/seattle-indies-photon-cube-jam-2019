
/Users/matthewmccord/Workspace/photon_iot/splendid_easter/target/1.4.2/photon/splendid_easter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006160  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a6180  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  20000000  080a6184  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000654  20000084  20000084  00040084  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a6208  080a6208  00036208  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a6230  080a6230  00036230  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a3d90  00000000  00000000  00036234  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f019  00000000  00000000  000d9fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00011738  00000000  00000000  000e8fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001bc8  00000000  00000000  000fa715  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002b88  00000000  00000000  000fc2dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000264f5  00000000  00000000  000fee65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00023b15  00000000  00000000  0012535a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a8013  00000000  00000000  00148e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000afac  00000000  00000000  001f0e84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f005 fd57 	bl	80a5ae4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f005 fd5c 	bl	80a5afa <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a6184 	.word	0x080a6184
 80a0050:	20000084 	.word	0x20000084
 80a0054:	20000084 	.word	0x20000084
 80a0058:	200006d8 	.word	0x200006d8
 80a005c:	200006d8 	.word	0x200006d8

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 fce5 	bl	80a2a30 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a613c 	.word	0x080a613c
 80a0088:	080a6178 	.word	0x080a6178

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b812 	b.w	80a00b4 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f98d 	bl	80a03b0 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f002 bc8b 	b.w	80a29b4 <_post_loop>

080a009e <_ZdlPv>:
 80a009e:	f001 bfa3 	b.w	80a1fe8 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
int myLed  = 13;  // Set up pin 13 led for toggling

MPU9250 myIMU;

void setup()
{
 80a00b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  Wire.begin();
 80a00b6:	f002 fd35 	bl	80a2b24 <_Z19__fetch_global_Wirev>
  // TWBR = 12;  // 400 kbit/sec I2C speed
  Serial.begin(38400);

  // Set up the interrupt pin, its set as active high, push-pull
  pinMode(intPin, INPUT);
 80a00ba:	4ca8      	ldr	r4, [pc, #672]	; (80a035c <setup+0x2a8>)

MPU9250 myIMU;

void setup()
{
  Wire.begin();
 80a00bc:	f001 ffee 	bl	80a209c <_ZN7TwoWire5beginEv>
  // TWBR = 12;  // 400 kbit/sec I2C speed
  Serial.begin(38400);
 80a00c0:	f002 fb84 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a00c4:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 80a00c8:	f002 fb66 	bl	80a2798 <_ZN9USBSerial5beginEl>

  // Set up the interrupt pin, its set as active high, push-pull
  pinMode(intPin, INPUT);
 80a00cc:	8820      	ldrh	r0, [r4, #0]
 80a00ce:	2100      	movs	r1, #0
 80a00d0:	f002 fcfe 	bl	80a2ad0 <pinMode>
  digitalWrite(intPin, LOW);
 80a00d4:	8820      	ldrh	r0, [r4, #0]
  pinMode(myLed, OUTPUT);
 80a00d6:	4ca2      	ldr	r4, [pc, #648]	; (80a0360 <setup+0x2ac>)
  // TWBR = 12;  // 400 kbit/sec I2C speed
  Serial.begin(38400);

  // Set up the interrupt pin, its set as active high, push-pull
  pinMode(intPin, INPUT);
  digitalWrite(intPin, LOW);
 80a00d8:	2100      	movs	r1, #0
 80a00da:	f002 fd0a 	bl	80a2af2 <digitalWrite>
  pinMode(myLed, OUTPUT);
 80a00de:	8820      	ldrh	r0, [r4, #0]
 80a00e0:	2101      	movs	r1, #1
 80a00e2:	f002 fcf5 	bl	80a2ad0 <pinMode>
  digitalWrite(myLed, HIGH);
 80a00e6:	8820      	ldrh	r0, [r4, #0]
  display.setTextColor(BLACK); // Set pixel color; 1 on the monochrome screen
  display.clearDisplay();   // clears the screen and buffer
#endif // LCD

  // Read the WHO_AM_I register, this is a good test of communication
  byte c = myIMU.readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
 80a00e8:	4c9e      	ldr	r4, [pc, #632]	; (80a0364 <setup+0x2b0>)

  // Set up the interrupt pin, its set as active high, push-pull
  pinMode(intPin, INPUT);
  digitalWrite(intPin, LOW);
  pinMode(myLed, OUTPUT);
  digitalWrite(myLed, HIGH);
 80a00ea:	2101      	movs	r1, #1
 80a00ec:	f002 fd01 	bl	80a2af2 <digitalWrite>
  display.setTextColor(BLACK); // Set pixel color; 1 on the monochrome screen
  display.clearDisplay();   // clears the screen and buffer
#endif // LCD

  // Read the WHO_AM_I register, this is a good test of communication
  byte c = myIMU.readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
 80a00f0:	2275      	movs	r2, #117	; 0x75
 80a00f2:	2168      	movs	r1, #104	; 0x68
 80a00f4:	4620      	mov	r0, r4
 80a00f6:	f000 fd54 	bl	80a0ba2 <_ZN7MPU92508readByteEhh>
 80a00fa:	4605      	mov	r5, r0
  Serial.print("MPU9250 "); Serial.print("I AM "); Serial.print(c, HEX);
 80a00fc:	f002 fb66 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0100:	4999      	ldr	r1, [pc, #612]	; (80a0368 <setup+0x2b4>)
 80a0102:	f002 f8e3 	bl	80a22cc <_ZN5Print5printEPKc>
 80a0106:	f002 fb61 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a010a:	4998      	ldr	r1, [pc, #608]	; (80a036c <setup+0x2b8>)
 80a010c:	f002 f8de 	bl	80a22cc <_ZN5Print5printEPKc>
 80a0110:	f002 fb5c 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0114:	2210      	movs	r2, #16
 80a0116:	4629      	mov	r1, r5
 80a0118:	f002 f91f 	bl	80a235a <_ZN5Print5printEhi>
  Serial.print(" I should be "); Serial.println(0x71, HEX);
 80a011c:	f002 fb56 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0120:	4993      	ldr	r1, [pc, #588]	; (80a0370 <setup+0x2bc>)
 80a0122:	f002 f8d3 	bl	80a22cc <_ZN5Print5printEPKc>
 80a0126:	f002 fb51 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a012a:	2210      	movs	r2, #16
 80a012c:	2171      	movs	r1, #113	; 0x71
 80a012e:	f002 f944 	bl	80a23ba <_ZN5Print7printlnEii>
  display.setCursor(0,40); display.print(0x71, HEX);
  display.display();
  delay(1000);
#endif // LCD

  if (c == 0x71) // WHO_AM_I should always be 0x68
 80a0132:	2d71      	cmp	r5, #113	; 0x71
 80a0134:	f040 8105 	bne.w	80a0342 <setup+0x28e>
  {
    Serial.println("MPU9250 is online...");
 80a0138:	f002 fb48 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a013c:	498d      	ldr	r1, [pc, #564]	; (80a0374 <setup+0x2c0>)
 80a013e:	f002 f8d8 	bl	80a22f2 <_ZN5Print7printlnEPKc>

    // Start by performing self test and reporting values
    myIMU.MPU9250SelfTest(myIMU.SelfTest);
 80a0142:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 80a0146:	4620      	mov	r0, r4
 80a0148:	f001 f896 	bl	80a1278 <_ZN7MPU925015MPU9250SelfTestEPf>
    Serial.print("x-axis self test: acceleration trim within : ");
 80a014c:	f002 fb3e 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0150:	4989      	ldr	r1, [pc, #548]	; (80a0378 <setup+0x2c4>)
 80a0152:	f002 f8bb 	bl	80a22cc <_ZN5Print5printEPKc>
    Serial.print(myIMU.SelfTest[0],1); Serial.println("% of factory value");
 80a0156:	f002 fb39 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a015a:	4606      	mov	r6, r0
 80a015c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 80a0160:	f004 fe1c 	bl	80a4d9c <__aeabi_f2d>
 80a0164:	2501      	movs	r5, #1
 80a0166:	4602      	mov	r2, r0
 80a0168:	460b      	mov	r3, r1
 80a016a:	9500      	str	r5, [sp, #0]
 80a016c:	4630      	mov	r0, r6
 80a016e:	f002 f9dd 	bl	80a252c <_ZN5Print5printEdi>
 80a0172:	f002 fb2b 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0176:	4981      	ldr	r1, [pc, #516]	; (80a037c <setup+0x2c8>)
 80a0178:	f002 f8bb 	bl	80a22f2 <_ZN5Print7printlnEPKc>
    Serial.print("y-axis self test: acceleration trim within : ");
 80a017c:	f002 fb26 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0180:	497f      	ldr	r1, [pc, #508]	; (80a0380 <setup+0x2cc>)
 80a0182:	f002 f8a3 	bl	80a22cc <_ZN5Print5printEPKc>
    Serial.print(myIMU.SelfTest[1],1); Serial.println("% of factory value");
 80a0186:	f002 fb21 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a018a:	4606      	mov	r6, r0
 80a018c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80a0190:	f004 fe04 	bl	80a4d9c <__aeabi_f2d>
 80a0194:	9500      	str	r5, [sp, #0]
 80a0196:	4602      	mov	r2, r0
 80a0198:	460b      	mov	r3, r1
 80a019a:	4630      	mov	r0, r6
 80a019c:	f002 f9c6 	bl	80a252c <_ZN5Print5printEdi>
 80a01a0:	f002 fb14 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a01a4:	4975      	ldr	r1, [pc, #468]	; (80a037c <setup+0x2c8>)
 80a01a6:	f002 f8a4 	bl	80a22f2 <_ZN5Print7printlnEPKc>
    Serial.print("z-axis self test: acceleration trim within : ");
 80a01aa:	f002 fb0f 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a01ae:	4975      	ldr	r1, [pc, #468]	; (80a0384 <setup+0x2d0>)
 80a01b0:	f002 f88c 	bl	80a22cc <_ZN5Print5printEPKc>
    Serial.print(myIMU.SelfTest[2],1); Serial.println("% of factory value");
 80a01b4:	f002 fb0a 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a01b8:	4606      	mov	r6, r0
 80a01ba:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80a01be:	f004 fded 	bl	80a4d9c <__aeabi_f2d>
 80a01c2:	9500      	str	r5, [sp, #0]
 80a01c4:	4602      	mov	r2, r0
 80a01c6:	460b      	mov	r3, r1
 80a01c8:	4630      	mov	r0, r6
 80a01ca:	f002 f9af 	bl	80a252c <_ZN5Print5printEdi>
 80a01ce:	f002 fafd 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a01d2:	496a      	ldr	r1, [pc, #424]	; (80a037c <setup+0x2c8>)
 80a01d4:	f002 f88d 	bl	80a22f2 <_ZN5Print7printlnEPKc>
    Serial.print("x-axis self test: gyration trim within : ");
 80a01d8:	f002 faf8 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a01dc:	496a      	ldr	r1, [pc, #424]	; (80a0388 <setup+0x2d4>)
 80a01de:	f002 f875 	bl	80a22cc <_ZN5Print5printEPKc>
    Serial.print(myIMU.SelfTest[3],1); Serial.println("% of factory value");
 80a01e2:	f002 faf3 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a01e6:	4606      	mov	r6, r0
 80a01e8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 80a01ec:	f004 fdd6 	bl	80a4d9c <__aeabi_f2d>
 80a01f0:	9500      	str	r5, [sp, #0]
 80a01f2:	4602      	mov	r2, r0
 80a01f4:	460b      	mov	r3, r1
 80a01f6:	4630      	mov	r0, r6
 80a01f8:	f002 f998 	bl	80a252c <_ZN5Print5printEdi>
 80a01fc:	f002 fae6 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0200:	495e      	ldr	r1, [pc, #376]	; (80a037c <setup+0x2c8>)
 80a0202:	f002 f876 	bl	80a22f2 <_ZN5Print7printlnEPKc>
    Serial.print("y-axis self test: gyration trim within : ");
 80a0206:	f002 fae1 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a020a:	4960      	ldr	r1, [pc, #384]	; (80a038c <setup+0x2d8>)
 80a020c:	f002 f85e 	bl	80a22cc <_ZN5Print5printEPKc>
    Serial.print(myIMU.SelfTest[4],1); Serial.println("% of factory value");
 80a0210:	f002 fadc 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0214:	4606      	mov	r6, r0
 80a0216:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80a021a:	f004 fdbf 	bl	80a4d9c <__aeabi_f2d>
 80a021e:	9500      	str	r5, [sp, #0]
 80a0220:	4602      	mov	r2, r0
 80a0222:	460b      	mov	r3, r1
 80a0224:	4630      	mov	r0, r6
 80a0226:	f002 f981 	bl	80a252c <_ZN5Print5printEdi>
 80a022a:	f002 facf 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a022e:	4953      	ldr	r1, [pc, #332]	; (80a037c <setup+0x2c8>)
 80a0230:	f002 f85f 	bl	80a22f2 <_ZN5Print7printlnEPKc>
    Serial.print("z-axis self test: gyration trim within : ");
 80a0234:	f002 faca 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0238:	4955      	ldr	r1, [pc, #340]	; (80a0390 <setup+0x2dc>)
 80a023a:	f002 f847 	bl	80a22cc <_ZN5Print5printEPKc>
    Serial.print(myIMU.SelfTest[5],1); Serial.println("% of factory value");
 80a023e:	f002 fac5 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0242:	4606      	mov	r6, r0
 80a0244:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80a0248:	f004 fda8 	bl	80a4d9c <__aeabi_f2d>
 80a024c:	9500      	str	r5, [sp, #0]
 80a024e:	460b      	mov	r3, r1
 80a0250:	4602      	mov	r2, r0
 80a0252:	4630      	mov	r0, r6
 80a0254:	f002 f96a 	bl	80a252c <_ZN5Print5printEdi>
 80a0258:	f002 fab8 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a025c:	4947      	ldr	r1, [pc, #284]	; (80a037c <setup+0x2c8>)
 80a025e:	f002 f848 	bl	80a22f2 <_ZN5Print7printlnEPKc>

    // Calibrate gyro and accelerometers, load biases in bias registers
    myIMU.calibrateMPU9250(myIMU.gyroBias, myIMU.accelBias);
 80a0262:	f104 0298 	add.w	r2, r4, #152	; 0x98
 80a0266:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 80a026a:	4620      	mov	r0, r4
 80a026c:	f000 fe22 	bl	80a0eb4 <_ZN7MPU925016calibrateMPU9250EPfS0_>

    display.display();
    delay(1000);
#endif // LCD

    myIMU.initMPU9250();
 80a0270:	4620      	mov	r0, r4
 80a0272:	f000 fcb6 	bl	80a0be2 <_ZN7MPU925011initMPU9250Ev>
    // Initialize device for active mode read of acclerometer, gyroscope, and
    // temperature
    Serial.println("MPU9250 initialized for active data mode....");
 80a0276:	f002 faa9 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a027a:	4946      	ldr	r1, [pc, #280]	; (80a0394 <setup+0x2e0>)
 80a027c:	f002 f839 	bl	80a22f2 <_ZN5Print7printlnEPKc>

    // Read the WHO_AM_I register of the magnetometer, this is a good test of
    // communication
    byte d = myIMU.readByte(AK8963_ADDRESS, WHO_AM_I_AK8963);
 80a0280:	2200      	movs	r2, #0
 80a0282:	210c      	movs	r1, #12
 80a0284:	4620      	mov	r0, r4
 80a0286:	f000 fc8c 	bl	80a0ba2 <_ZN7MPU92508readByteEhh>
 80a028a:	4605      	mov	r5, r0
    Serial.print("AK8963 "); Serial.print("I AM "); Serial.print(d, HEX);
 80a028c:	f002 fa9e 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0290:	4941      	ldr	r1, [pc, #260]	; (80a0398 <setup+0x2e4>)
 80a0292:	f002 f81b 	bl	80a22cc <_ZN5Print5printEPKc>
 80a0296:	f002 fa99 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a029a:	4934      	ldr	r1, [pc, #208]	; (80a036c <setup+0x2b8>)
 80a029c:	f002 f816 	bl	80a22cc <_ZN5Print5printEPKc>
 80a02a0:	f002 fa94 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a02a4:	2210      	movs	r2, #16
 80a02a6:	4629      	mov	r1, r5
 80a02a8:	f002 f857 	bl	80a235a <_ZN5Print5printEhi>
    Serial.print(" I should be "); Serial.println(0x48, HEX);
 80a02ac:	f002 fa8e 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a02b0:	492f      	ldr	r1, [pc, #188]	; (80a0370 <setup+0x2bc>)
 80a02b2:	f002 f80b 	bl	80a22cc <_ZN5Print5printEPKc>
 80a02b6:	f002 fa89 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a02ba:	2210      	movs	r2, #16
 80a02bc:	2148      	movs	r1, #72	; 0x48
 80a02be:	f002 f87c 	bl	80a23ba <_ZN5Print7printlnEii>
    display.display();
    delay(1000);
#endif // LCD

    // Get magnetometer calibration from AK8963 ROM
    myIMU.initAK8963(myIMU.magCalibration);
 80a02c2:	f104 0174 	add.w	r1, r4, #116	; 0x74
 80a02c6:	4620      	mov	r0, r4
 80a02c8:	f000 fd84 	bl	80a0dd4 <_ZN7MPU925010initAK8963EPf>
    // Initialize device for active mode read of magnetometer
    Serial.println("AK8963 initialized for active data mode....");
 80a02cc:	f002 fa7e 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a02d0:	4932      	ldr	r1, [pc, #200]	; (80a039c <setup+0x2e8>)
 80a02d2:	f002 f80e 	bl	80a22f2 <_ZN5Print7printlnEPKc>
    if (SerialDebug)
    {
      //  Serial.println("Calibration values: ");
      Serial.print("X-Axis sensitivity adjustment value ");
 80a02d6:	f002 fa79 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a02da:	4931      	ldr	r1, [pc, #196]	; (80a03a0 <setup+0x2ec>)
 80a02dc:	f001 fff6 	bl	80a22cc <_ZN5Print5printEPKc>
      Serial.println(myIMU.magCalibration[0], 2);
 80a02e0:	f002 fa74 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a02e4:	4606      	mov	r6, r0
 80a02e6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80a02e8:	f004 fd58 	bl	80a4d9c <__aeabi_f2d>
 80a02ec:	2502      	movs	r5, #2
 80a02ee:	4602      	mov	r2, r0
 80a02f0:	460b      	mov	r3, r1
 80a02f2:	9500      	str	r5, [sp, #0]
 80a02f4:	4630      	mov	r0, r6
 80a02f6:	f002 f91e 	bl	80a2536 <_ZN5Print7printlnEdi>
      Serial.print("Y-Axis sensitivity adjustment value ");
 80a02fa:	f002 fa67 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a02fe:	4929      	ldr	r1, [pc, #164]	; (80a03a4 <setup+0x2f0>)
 80a0300:	f001 ffe4 	bl	80a22cc <_ZN5Print5printEPKc>
      Serial.println(myIMU.magCalibration[1], 2);
 80a0304:	f002 fa62 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0308:	4606      	mov	r6, r0
 80a030a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80a030c:	f004 fd46 	bl	80a4d9c <__aeabi_f2d>
 80a0310:	9500      	str	r5, [sp, #0]
 80a0312:	4602      	mov	r2, r0
 80a0314:	460b      	mov	r3, r1
 80a0316:	4630      	mov	r0, r6
 80a0318:	f002 f90d 	bl	80a2536 <_ZN5Print7printlnEdi>
      Serial.print("Z-Axis sensitivity adjustment value ");
 80a031c:	f002 fa56 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0320:	4921      	ldr	r1, [pc, #132]	; (80a03a8 <setup+0x2f4>)
 80a0322:	f001 ffd3 	bl	80a22cc <_ZN5Print5printEPKc>
      Serial.println(myIMU.magCalibration[2], 2);
 80a0326:	f002 fa51 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a032a:	4606      	mov	r6, r0
 80a032c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80a032e:	f004 fd35 	bl	80a4d9c <__aeabi_f2d>
 80a0332:	9500      	str	r5, [sp, #0]
 80a0334:	4602      	mov	r2, r0
 80a0336:	460b      	mov	r3, r1
 80a0338:	4630      	mov	r0, r6
 80a033a:	f002 f8fc 	bl	80a2536 <_ZN5Print7printlnEdi>
  {
    Serial.print("Could not connect to MPU9250: 0x");
    Serial.println(c, HEX);
    while(1) ; // Loop forever if communication doesn't happen
  }
}
 80a033e:	b002      	add	sp, #8
 80a0340:	bd70      	pop	{r4, r5, r6, pc}
    delay(1000);
#endif // LCD
  } // if (c == 0x71)
  else
  {
    Serial.print("Could not connect to MPU9250: 0x");
 80a0342:	f002 fa43 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0346:	4919      	ldr	r1, [pc, #100]	; (80a03ac <setup+0x2f8>)
 80a0348:	f001 ffc0 	bl	80a22cc <_ZN5Print5printEPKc>
    Serial.println(c, HEX);
 80a034c:	f002 fa3e 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0350:	2210      	movs	r2, #16
 80a0352:	4629      	mov	r1, r5
 80a0354:	f002 f803 	bl	80a235e <_ZN5Print7printlnEhi>
 80a0358:	e7fe      	b.n	80a0358 <setup+0x2a4>
 80a035a:	bf00      	nop
 80a035c:	20000004 	.word	0x20000004
 80a0360:	20000000 	.word	0x20000000
 80a0364:	20000088 	.word	0x20000088
 80a0368:	080a5b80 	.word	0x080a5b80
 80a036c:	080a5b89 	.word	0x080a5b89
 80a0370:	080a5b8f 	.word	0x080a5b8f
 80a0374:	080a5b9d 	.word	0x080a5b9d
 80a0378:	080a5bb2 	.word	0x080a5bb2
 80a037c:	080a5be0 	.word	0x080a5be0
 80a0380:	080a5bf3 	.word	0x080a5bf3
 80a0384:	080a5c21 	.word	0x080a5c21
 80a0388:	080a5c4f 	.word	0x080a5c4f
 80a038c:	080a5c79 	.word	0x080a5c79
 80a0390:	080a5ca3 	.word	0x080a5ca3
 80a0394:	080a5ccd 	.word	0x080a5ccd
 80a0398:	080a5cfa 	.word	0x080a5cfa
 80a039c:	080a5d02 	.word	0x080a5d02
 80a03a0:	080a5d2e 	.word	0x080a5d2e
 80a03a4:	080a5d53 	.word	0x080a5d53
 80a03a8:	080a5d78 	.word	0x080a5d78
 80a03ac:	080a5d9d 	.word	0x080a5d9d

080a03b0 <loop>:
    while(1) ; // Loop forever if communication doesn't happen
  }
}

void loop()
{
 80a03b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  // If intPin goes high, all data registers have new data
  // On interrupt, check if data ready interrupt
  if (myIMU.readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)
 80a03b4:	4cce      	ldr	r4, [pc, #824]	; (80a06f0 <loop+0x340>)
    while(1) ; // Loop forever if communication doesn't happen
  }
}

void loop()
{
 80a03b6:	b087      	sub	sp, #28
  // If intPin goes high, all data registers have new data
  // On interrupt, check if data ready interrupt
  if (myIMU.readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)
 80a03b8:	223a      	movs	r2, #58	; 0x3a
 80a03ba:	2168      	movs	r1, #104	; 0x68
 80a03bc:	4620      	mov	r0, r4
 80a03be:	f000 fbf0 	bl	80a0ba2 <_ZN7MPU92508readByteEhh>
 80a03c2:	07c3      	lsls	r3, r0, #31
 80a03c4:	d57e      	bpl.n	80a04c4 <loop+0x114>
  {
    myIMU.readAccelData(myIMU.accelCount);  // Read the x/y/z adc values
 80a03c6:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
 80a03ca:	4620      	mov	r0, r4
 80a03cc:	f000 fc95 	bl	80a0cfa <_ZN7MPU925013readAccelDataEPs>
    myIMU.getAres();
 80a03d0:	4620      	mov	r0, r4
 80a03d2:	f000 fb9d 	bl	80a0b10 <_ZN7MPU92507getAresEv>

    // Now we'll calculate the accleration value into actual g's
    // This depends on scale being set
    myIMU.ax = (float)myIMU.accelCount[0]*myIMU.aRes; // - accelBias[0];
 80a03d6:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80a03d8:	f9b4 00bc 	ldrsh.w	r0, [r4, #188]	; 0xbc
 80a03dc:	f005 f934 	bl	80a5648 <__aeabi_i2f>
 80a03e0:	4629      	mov	r1, r5
 80a03e2:	f005 f985 	bl	80a56f0 <__aeabi_fmul>
 80a03e6:	6520      	str	r0, [r4, #80]	; 0x50
    myIMU.ay = (float)myIMU.accelCount[1]*myIMU.aRes; // - accelBias[1];
 80a03e8:	f9b4 00be 	ldrsh.w	r0, [r4, #190]	; 0xbe
 80a03ec:	f005 f92c 	bl	80a5648 <__aeabi_i2f>
 80a03f0:	4629      	mov	r1, r5
 80a03f2:	f005 f97d 	bl	80a56f0 <__aeabi_fmul>
 80a03f6:	6560      	str	r0, [r4, #84]	; 0x54
    myIMU.az = (float)myIMU.accelCount[2]*myIMU.aRes; // - accelBias[2];
 80a03f8:	f9b4 00c0 	ldrsh.w	r0, [r4, #192]	; 0xc0
 80a03fc:	f005 f924 	bl	80a5648 <__aeabi_i2f>
 80a0400:	4629      	mov	r1, r5
 80a0402:	f005 f975 	bl	80a56f0 <__aeabi_fmul>

    myIMU.readGyroData(myIMU.gyroCount);  // Read the x/y/z adc values
 80a0406:	f104 0138 	add.w	r1, r4, #56	; 0x38

    // Now we'll calculate the accleration value into actual g's
    // This depends on scale being set
    myIMU.ax = (float)myIMU.accelCount[0]*myIMU.aRes; // - accelBias[0];
    myIMU.ay = (float)myIMU.accelCount[1]*myIMU.aRes; // - accelBias[1];
    myIMU.az = (float)myIMU.accelCount[2]*myIMU.aRes; // - accelBias[2];
 80a040a:	65a0      	str	r0, [r4, #88]	; 0x58

    myIMU.readGyroData(myIMU.gyroCount);  // Read the x/y/z adc values
 80a040c:	4620      	mov	r0, r4
 80a040e:	f000 fc94 	bl	80a0d3a <_ZN7MPU925012readGyroDataEPs>
    myIMU.getGres();
 80a0412:	4620      	mov	r0, r4
 80a0414:	f000 fb64 	bl	80a0ae0 <_ZN7MPU92507getGresEv>

    // Calculate the gyro value into actual degrees per second
    // This depends on scale being set
    myIMU.gx = (float)myIMU.gyroCount[0]*myIMU.gRes;
 80a0418:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80a041a:	f9b4 0038 	ldrsh.w	r0, [r4, #56]	; 0x38
 80a041e:	f005 f913 	bl	80a5648 <__aeabi_i2f>
 80a0422:	4629      	mov	r1, r5
 80a0424:	f005 f964 	bl	80a56f0 <__aeabi_fmul>
 80a0428:	65e0      	str	r0, [r4, #92]	; 0x5c
    myIMU.gy = (float)myIMU.gyroCount[1]*myIMU.gRes;
 80a042a:	f9b4 003a 	ldrsh.w	r0, [r4, #58]	; 0x3a
 80a042e:	f005 f90b 	bl	80a5648 <__aeabi_i2f>
 80a0432:	4629      	mov	r1, r5
 80a0434:	f005 f95c 	bl	80a56f0 <__aeabi_fmul>
 80a0438:	6620      	str	r0, [r4, #96]	; 0x60
    myIMU.gz = (float)myIMU.gyroCount[2]*myIMU.gRes;
 80a043a:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 80a043e:	f005 f903 	bl	80a5648 <__aeabi_i2f>
 80a0442:	4629      	mov	r1, r5
 80a0444:	f005 f954 	bl	80a56f0 <__aeabi_fmul>

    myIMU.readMagData(myIMU.magCount);  // Read the x/y/z adc values
 80a0448:	f104 013e 	add.w	r1, r4, #62	; 0x3e

    // Calculate the gyro value into actual degrees per second
    // This depends on scale being set
    myIMU.gx = (float)myIMU.gyroCount[0]*myIMU.gRes;
    myIMU.gy = (float)myIMU.gyroCount[1]*myIMU.gRes;
    myIMU.gz = (float)myIMU.gyroCount[2]*myIMU.gRes;
 80a044c:	6660      	str	r0, [r4, #100]	; 0x64

    myIMU.readMagData(myIMU.magCount);  // Read the x/y/z adc values
 80a044e:	4620      	mov	r0, r4
 80a0450:	f000 fc93 	bl	80a0d7a <_ZN7MPU925011readMagDataEPs>
    myIMU.getMres();
    // User environmental x-axis correction in milliGauss, should be
    // automatically calculated
    myIMU.magbias[0] = +470.;
 80a0454:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 80a0738 <loop+0x388>
    myIMU.gx = (float)myIMU.gyroCount[0]*myIMU.gRes;
    myIMU.gy = (float)myIMU.gyroCount[1]*myIMU.gRes;
    myIMU.gz = (float)myIMU.gyroCount[2]*myIMU.gRes;

    myIMU.readMagData(myIMU.magCount);  // Read the x/y/z adc values
    myIMU.getMres();
 80a0458:	4620      	mov	r0, r4
    // User environmental x-axis correction in milliGauss, should be
    // automatically calculated
    myIMU.magbias[0] = +470.;
    // User environmental x-axis correction in milliGauss TODO axis??
    myIMU.magbias[1] = +120.;
 80a045a:	4fa6      	ldr	r7, [pc, #664]	; (80a06f4 <loop+0x344>)
    // User environmental x-axis correction in milliGauss
    myIMU.magbias[2] = +125.;
 80a045c:	4ea6      	ldr	r6, [pc, #664]	; (80a06f8 <loop+0x348>)
    myIMU.gx = (float)myIMU.gyroCount[0]*myIMU.gRes;
    myIMU.gy = (float)myIMU.gyroCount[1]*myIMU.gRes;
    myIMU.gz = (float)myIMU.gyroCount[2]*myIMU.gRes;

    myIMU.readMagData(myIMU.magCount);  // Read the x/y/z adc values
    myIMU.getMres();
 80a045e:	f000 fb31 	bl	80a0ac4 <_ZN7MPU92507getMresEv>

    // Calculate the magnetometer values in milliGauss
    // Include factory calibration per data sheet and user environmental
    // corrections
    // Get actual magnetometer value, this depends on scale being set
    myIMU.mx = (float)myIMU.magCount[0]*myIMU.mRes*myIMU.magCalibration[0] -
 80a0462:	6ce5      	ldr	r5, [r4, #76]	; 0x4c

    myIMU.readMagData(myIMU.magCount);  // Read the x/y/z adc values
    myIMU.getMres();
    // User environmental x-axis correction in milliGauss, should be
    // automatically calculated
    myIMU.magbias[0] = +470.;
 80a0464:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
    // User environmental x-axis correction in milliGauss TODO axis??
    myIMU.magbias[1] = +120.;
 80a0468:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
    // User environmental x-axis correction in milliGauss
    myIMU.magbias[2] = +125.;
 80a046c:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    // Calculate the magnetometer values in milliGauss
    // Include factory calibration per data sheet and user environmental
    // corrections
    // Get actual magnetometer value, this depends on scale being set
    myIMU.mx = (float)myIMU.magCount[0]*myIMU.mRes*myIMU.magCalibration[0] -
               myIMU.magbias[0];
 80a0470:	f9b4 003e 	ldrsh.w	r0, [r4, #62]	; 0x3e
 80a0474:	f005 f8e8 	bl	80a5648 <__aeabi_i2f>
 80a0478:	4629      	mov	r1, r5
 80a047a:	f005 f939 	bl	80a56f0 <__aeabi_fmul>
 80a047e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80a0480:	f005 f936 	bl	80a56f0 <__aeabi_fmul>
 80a0484:	4641      	mov	r1, r8
 80a0486:	f005 f829 	bl	80a54dc <__aeabi_fsub>
 80a048a:	66a0      	str	r0, [r4, #104]	; 0x68
    myIMU.my = (float)myIMU.magCount[1]*myIMU.mRes*myIMU.magCalibration[1] -
               myIMU.magbias[1];
 80a048c:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 80a0490:	f005 f8da 	bl	80a5648 <__aeabi_i2f>
 80a0494:	4629      	mov	r1, r5
 80a0496:	f005 f92b 	bl	80a56f0 <__aeabi_fmul>
 80a049a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80a049c:	f005 f928 	bl	80a56f0 <__aeabi_fmul>
 80a04a0:	4639      	mov	r1, r7
 80a04a2:	f005 f81b 	bl	80a54dc <__aeabi_fsub>
 80a04a6:	66e0      	str	r0, [r4, #108]	; 0x6c
    myIMU.mz = (float)myIMU.magCount[2]*myIMU.mRes*myIMU.magCalibration[2] -
               myIMU.magbias[2];
 80a04a8:	f9b4 0042 	ldrsh.w	r0, [r4, #66]	; 0x42
 80a04ac:	f005 f8cc 	bl	80a5648 <__aeabi_i2f>
 80a04b0:	4629      	mov	r1, r5
 80a04b2:	f005 f91d 	bl	80a56f0 <__aeabi_fmul>
 80a04b6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80a04b8:	f005 f91a 	bl	80a56f0 <__aeabi_fmul>
 80a04bc:	4631      	mov	r1, r6
 80a04be:	f005 f80d 	bl	80a54dc <__aeabi_fsub>
 80a04c2:	6720      	str	r0, [r4, #112]	; 0x70
  } // if (readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)

  // Must be called before updating quaternions!
  myIMU.updateTime();
 80a04c4:	4d8a      	ldr	r5, [pc, #552]	; (80a06f0 <loop+0x340>)
 80a04c6:	4628      	mov	r0, r5
 80a04c8:	f000 fb36 	bl	80a0b38 <_ZN7MPU925010updateTimeEv>
  // modified to allow any convenient orientation convention. This is ok by
  // aircraft orientation standards! Pass gyro rate as rad/s
//  MadgwickQuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f,  my,  mx, mz);
  MahonyQuaternionUpdate(myIMU.ax, myIMU.ay, myIMU.az, myIMU.gx*DEG_TO_RAD,
                         myIMU.gy*DEG_TO_RAD, myIMU.gz*DEG_TO_RAD, myIMU.my,
                         myIMU.mx, myIMU.mz, myIMU.deltat);
 80a04cc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80a04ce:	f004 fc65 	bl	80a4d9c <__aeabi_f2d>
 80a04d2:	a385      	add	r3, pc, #532	; (adr r3, 80a06e8 <loop+0x338>)
 80a04d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a04d8:	f004 fcb4 	bl	80a4e44 <__aeabi_dmul>
 80a04dc:	f004 ffaa 	bl	80a5434 <__aeabi_d2f>
 80a04e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a04e2:	4606      	mov	r6, r0
 80a04e4:	9305      	str	r3, [sp, #20]
 80a04e6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80a04e8:	9304      	str	r3, [sp, #16]
 80a04ea:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80a04ec:	9303      	str	r3, [sp, #12]
 80a04ee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80a04f0:	9302      	str	r3, [sp, #8]
 80a04f2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80a04f4:	f004 fc52 	bl	80a4d9c <__aeabi_f2d>
 80a04f8:	a37b      	add	r3, pc, #492	; (adr r3, 80a06e8 <loop+0x338>)
 80a04fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a04fe:	f004 fca1 	bl	80a4e44 <__aeabi_dmul>
 80a0502:	f004 ff97 	bl	80a5434 <__aeabi_d2f>
 80a0506:	9001      	str	r0, [sp, #4]
 80a0508:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80a050a:	f004 fc47 	bl	80a4d9c <__aeabi_f2d>
 80a050e:	a376      	add	r3, pc, #472	; (adr r3, 80a06e8 <loop+0x338>)
 80a0510:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0514:	f004 fc96 	bl	80a4e44 <__aeabi_dmul>
 80a0518:	f004 ff8c 	bl	80a5434 <__aeabi_d2f>
 80a051c:	9000      	str	r0, [sp, #0]
 80a051e:	4633      	mov	r3, r6
 80a0520:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80a0522:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80a0524:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a0526:	f001 f8c5 	bl	80a16b4 <_Z22MahonyQuaternionUpdateffffffffff>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a052a:	f001 fbc7 	bl	80a1cbc <HAL_Timer_Get_Milli_Seconds>
    } // if (myIMU.delt_t > 500)
  } // if (!AHRS)
  else
  {
    // Serial print and/or display at 0.5 s rate independent of data rates
    myIMU.delt_t = millis() - myIMU.count;
 80a052e:	69e3      	ldr	r3, [r4, #28]
 80a0530:	1ac0      	subs	r0, r0, r3

    // update LCD once per half-second independent of read rate
    if (myIMU.delt_t > 500)
 80a0532:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    } // if (myIMU.delt_t > 500)
  } // if (!AHRS)
  else
  {
    // Serial print and/or display at 0.5 s rate independent of data rates
    myIMU.delt_t = millis() - myIMU.count;
 80a0536:	61a0      	str	r0, [r4, #24]

    // update LCD once per half-second independent of read rate
    if (myIMU.delt_t > 500)
 80a0538:	f240 8280 	bls.w	80a0a3c <loop+0x68c>
    {
      if(SerialDebug)
      {
        Serial.print("ax = "); Serial.print((int)1000*myIMU.ax);
 80a053c:	f002 f946 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0540:	496e      	ldr	r1, [pc, #440]	; (80a06fc <loop+0x34c>)
 80a0542:	f001 fec3 	bl	80a22cc <_ZN5Print5printEPKc>
 80a0546:	f002 f941 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a054a:	496d      	ldr	r1, [pc, #436]	; (80a0700 <loop+0x350>)
 80a054c:	4606      	mov	r6, r0
 80a054e:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80a0550:	f005 f8ce 	bl	80a56f0 <__aeabi_fmul>
 80a0554:	f004 fc22 	bl	80a4d9c <__aeabi_f2d>
 80a0558:	2402      	movs	r4, #2
 80a055a:	4602      	mov	r2, r0
 80a055c:	460b      	mov	r3, r1
 80a055e:	4630      	mov	r0, r6
 80a0560:	9400      	str	r4, [sp, #0]
 80a0562:	f001 ffe3 	bl	80a252c <_ZN5Print5printEdi>
        Serial.print(" ay = "); Serial.print((int)1000*myIMU.ay);
 80a0566:	f002 f931 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a056a:	4966      	ldr	r1, [pc, #408]	; (80a0704 <loop+0x354>)
 80a056c:	f001 feae 	bl	80a22cc <_ZN5Print5printEPKc>
 80a0570:	f002 f92c 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0574:	4962      	ldr	r1, [pc, #392]	; (80a0700 <loop+0x350>)
 80a0576:	4606      	mov	r6, r0
 80a0578:	6d68      	ldr	r0, [r5, #84]	; 0x54
 80a057a:	f005 f8b9 	bl	80a56f0 <__aeabi_fmul>
 80a057e:	f004 fc0d 	bl	80a4d9c <__aeabi_f2d>
 80a0582:	9400      	str	r4, [sp, #0]
 80a0584:	4602      	mov	r2, r0
 80a0586:	460b      	mov	r3, r1
 80a0588:	4630      	mov	r0, r6
 80a058a:	f001 ffcf 	bl	80a252c <_ZN5Print5printEdi>
        Serial.print(" az = "); Serial.print((int)1000*myIMU.az);
 80a058e:	f002 f91d 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0592:	495d      	ldr	r1, [pc, #372]	; (80a0708 <loop+0x358>)
 80a0594:	f001 fe9a 	bl	80a22cc <_ZN5Print5printEPKc>
 80a0598:	f002 f918 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a059c:	4958      	ldr	r1, [pc, #352]	; (80a0700 <loop+0x350>)
 80a059e:	4606      	mov	r6, r0
 80a05a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80a05a2:	f005 f8a5 	bl	80a56f0 <__aeabi_fmul>
 80a05a6:	f004 fbf9 	bl	80a4d9c <__aeabi_f2d>
 80a05aa:	9400      	str	r4, [sp, #0]
 80a05ac:	4602      	mov	r2, r0
 80a05ae:	460b      	mov	r3, r1
 80a05b0:	4630      	mov	r0, r6
 80a05b2:	f001 ffbb 	bl	80a252c <_ZN5Print5printEdi>
        Serial.println(" mg");
 80a05b6:	f002 f909 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a05ba:	4954      	ldr	r1, [pc, #336]	; (80a070c <loop+0x35c>)
 80a05bc:	f001 fe99 	bl	80a22f2 <_ZN5Print7printlnEPKc>

        Serial.print("gx = "); Serial.print( myIMU.gx, 2);
 80a05c0:	f002 f904 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a05c4:	4952      	ldr	r1, [pc, #328]	; (80a0710 <loop+0x360>)
 80a05c6:	f001 fe81 	bl	80a22cc <_ZN5Print5printEPKc>
 80a05ca:	f002 f8ff 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a05ce:	4606      	mov	r6, r0
 80a05d0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80a05d2:	f004 fbe3 	bl	80a4d9c <__aeabi_f2d>
 80a05d6:	9400      	str	r4, [sp, #0]
 80a05d8:	4602      	mov	r2, r0
 80a05da:	460b      	mov	r3, r1
 80a05dc:	4630      	mov	r0, r6
 80a05de:	f001 ffa5 	bl	80a252c <_ZN5Print5printEdi>
        Serial.print(" gy = "); Serial.print( myIMU.gy, 2);
 80a05e2:	f002 f8f3 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a05e6:	494b      	ldr	r1, [pc, #300]	; (80a0714 <loop+0x364>)
 80a05e8:	f001 fe70 	bl	80a22cc <_ZN5Print5printEPKc>
 80a05ec:	f002 f8ee 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a05f0:	4606      	mov	r6, r0
 80a05f2:	6e28      	ldr	r0, [r5, #96]	; 0x60
 80a05f4:	f004 fbd2 	bl	80a4d9c <__aeabi_f2d>
 80a05f8:	9400      	str	r4, [sp, #0]
 80a05fa:	4602      	mov	r2, r0
 80a05fc:	460b      	mov	r3, r1
 80a05fe:	4630      	mov	r0, r6
 80a0600:	f001 ff94 	bl	80a252c <_ZN5Print5printEdi>
        Serial.print(" gz = "); Serial.print( myIMU.gz, 2);
 80a0604:	f002 f8e2 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0608:	4943      	ldr	r1, [pc, #268]	; (80a0718 <loop+0x368>)
 80a060a:	f001 fe5f 	bl	80a22cc <_ZN5Print5printEPKc>
 80a060e:	f002 f8dd 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0612:	4606      	mov	r6, r0
 80a0614:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80a0616:	f004 fbc1 	bl	80a4d9c <__aeabi_f2d>
 80a061a:	9400      	str	r4, [sp, #0]
 80a061c:	460b      	mov	r3, r1
 80a061e:	4602      	mov	r2, r0
 80a0620:	4630      	mov	r0, r6
 80a0622:	f001 ff83 	bl	80a252c <_ZN5Print5printEdi>
        Serial.println(" deg/s");
 80a0626:	f002 f8d1 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a062a:	493c      	ldr	r1, [pc, #240]	; (80a071c <loop+0x36c>)
 80a062c:	f001 fe61 	bl	80a22f2 <_ZN5Print7printlnEPKc>

        Serial.print("mx = "); Serial.print( (int)myIMU.mx );
 80a0630:	f002 f8cc 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0634:	493a      	ldr	r1, [pc, #232]	; (80a0720 <loop+0x370>)
 80a0636:	f001 fe49 	bl	80a22cc <_ZN5Print5printEPKc>
 80a063a:	f002 f8c7 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a063e:	4606      	mov	r6, r0
 80a0640:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 80a0642:	f005 fa1b 	bl	80a5a7c <__aeabi_f2iz>
 80a0646:	220a      	movs	r2, #10
 80a0648:	4601      	mov	r1, r0
 80a064a:	4630      	mov	r0, r6
 80a064c:	f001 feb3 	bl	80a23b6 <_ZN5Print5printEii>
        Serial.print(" my = "); Serial.print( (int)myIMU.my );
 80a0650:	f002 f8bc 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0654:	4933      	ldr	r1, [pc, #204]	; (80a0724 <loop+0x374>)
 80a0656:	f001 fe39 	bl	80a22cc <_ZN5Print5printEPKc>
 80a065a:	f002 f8b7 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a065e:	4606      	mov	r6, r0
 80a0660:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80a0662:	f005 fa0b 	bl	80a5a7c <__aeabi_f2iz>
 80a0666:	220a      	movs	r2, #10
 80a0668:	4601      	mov	r1, r0
 80a066a:	4630      	mov	r0, r6
 80a066c:	f001 fea3 	bl	80a23b6 <_ZN5Print5printEii>
        Serial.print(" mz = "); Serial.print( (int)myIMU.mz );
 80a0670:	f002 f8ac 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0674:	492c      	ldr	r1, [pc, #176]	; (80a0728 <loop+0x378>)
 80a0676:	f001 fe29 	bl	80a22cc <_ZN5Print5printEPKc>
 80a067a:	f002 f8a7 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a067e:	4606      	mov	r6, r0
 80a0680:	6f28      	ldr	r0, [r5, #112]	; 0x70
 80a0682:	f005 f9fb 	bl	80a5a7c <__aeabi_f2iz>
 80a0686:	220a      	movs	r2, #10
 80a0688:	4601      	mov	r1, r0
 80a068a:	4630      	mov	r0, r6
 80a068c:	f001 fe93 	bl	80a23b6 <_ZN5Print5printEii>
        Serial.println(" mG");
 80a0690:	f002 f89c 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0694:	4925      	ldr	r1, [pc, #148]	; (80a072c <loop+0x37c>)
 80a0696:	f001 fe2c 	bl	80a22f2 <_ZN5Print7printlnEPKc>

        Serial.print("q0 = "); Serial.print(*getQ());
 80a069a:	f002 f897 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a069e:	4924      	ldr	r1, [pc, #144]	; (80a0730 <loop+0x380>)
 80a06a0:	f001 fe14 	bl	80a22cc <_ZN5Print5printEPKc>
 80a06a4:	f002 f892 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a06a8:	4606      	mov	r6, r0
 80a06aa:	f001 fadf 	bl	80a1c6c <_Z4getQv>
 80a06ae:	6800      	ldr	r0, [r0, #0]
 80a06b0:	f004 fb74 	bl	80a4d9c <__aeabi_f2d>
 80a06b4:	9400      	str	r4, [sp, #0]
 80a06b6:	4602      	mov	r2, r0
 80a06b8:	460b      	mov	r3, r1
 80a06ba:	4630      	mov	r0, r6
 80a06bc:	f001 ff36 	bl	80a252c <_ZN5Print5printEdi>
        Serial.print(" qx = "); Serial.print(*(getQ() + 1));
 80a06c0:	f002 f884 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a06c4:	491b      	ldr	r1, [pc, #108]	; (80a0734 <loop+0x384>)
 80a06c6:	f001 fe01 	bl	80a22cc <_ZN5Print5printEPKc>
 80a06ca:	f002 f87f 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a06ce:	4606      	mov	r6, r0
 80a06d0:	f001 facc 	bl	80a1c6c <_Z4getQv>
 80a06d4:	6840      	ldr	r0, [r0, #4]
 80a06d6:	f004 fb61 	bl	80a4d9c <__aeabi_f2d>
 80a06da:	9400      	str	r4, [sp, #0]
 80a06dc:	4602      	mov	r2, r0
 80a06de:	460b      	mov	r3, r1
 80a06e0:	4630      	mov	r0, r6
 80a06e2:	f001 ff23 	bl	80a252c <_ZN5Print5printEdi>
 80a06e6:	e029      	b.n	80a073c <loop+0x38c>
 80a06e8:	a2529d39 	.word	0xa2529d39
 80a06ec:	3f91df46 	.word	0x3f91df46
 80a06f0:	20000088 	.word	0x20000088
 80a06f4:	42f00000 	.word	0x42f00000
 80a06f8:	42fa0000 	.word	0x42fa0000
 80a06fc:	080a5dbe 	.word	0x080a5dbe
 80a0700:	447a0000 	.word	0x447a0000
 80a0704:	080a5dc4 	.word	0x080a5dc4
 80a0708:	080a5dcb 	.word	0x080a5dcb
 80a070c:	080a5dd2 	.word	0x080a5dd2
 80a0710:	080a5dd6 	.word	0x080a5dd6
 80a0714:	080a5ddc 	.word	0x080a5ddc
 80a0718:	080a5de3 	.word	0x080a5de3
 80a071c:	080a5dea 	.word	0x080a5dea
 80a0720:	080a5df1 	.word	0x080a5df1
 80a0724:	080a5df7 	.word	0x080a5df7
 80a0728:	080a5dfe 	.word	0x080a5dfe
 80a072c:	080a5e05 	.word	0x080a5e05
 80a0730:	080a5e09 	.word	0x080a5e09
 80a0734:	080a5e0f 	.word	0x080a5e0f
 80a0738:	43eb0000 	.word	0x43eb0000
        Serial.print(" qy = "); Serial.print(*(getQ() + 2));
 80a073c:	f002 f846 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0740:	49c3      	ldr	r1, [pc, #780]	; (80a0a50 <loop+0x6a0>)
 80a0742:	f001 fdc3 	bl	80a22cc <_ZN5Print5printEPKc>
 80a0746:	f002 f841 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a074a:	4606      	mov	r6, r0
 80a074c:	f001 fa8e 	bl	80a1c6c <_Z4getQv>
 80a0750:	6880      	ldr	r0, [r0, #8]
 80a0752:	f004 fb23 	bl	80a4d9c <__aeabi_f2d>
 80a0756:	9400      	str	r4, [sp, #0]
 80a0758:	4602      	mov	r2, r0
 80a075a:	460b      	mov	r3, r1
 80a075c:	4630      	mov	r0, r6
 80a075e:	f001 fee5 	bl	80a252c <_ZN5Print5printEdi>
        Serial.print(" qz = "); Serial.println(*(getQ() + 3));
 80a0762:	f002 f833 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0766:	49bb      	ldr	r1, [pc, #748]	; (80a0a54 <loop+0x6a4>)
 80a0768:	f001 fdb0 	bl	80a22cc <_ZN5Print5printEPKc>
 80a076c:	f002 f82e 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0770:	4606      	mov	r6, r0
 80a0772:	f001 fa7b 	bl	80a1c6c <_Z4getQv>
 80a0776:	68c0      	ldr	r0, [r0, #12]
 80a0778:	f004 fb10 	bl	80a4d9c <__aeabi_f2d>
 80a077c:	9400      	str	r4, [sp, #0]
 80a077e:	4602      	mov	r2, r0
 80a0780:	460b      	mov	r3, r1
 80a0782:	4630      	mov	r0, r6
 80a0784:	f001 fed7 	bl	80a2536 <_ZN5Print7printlnEdi>
// must be applied in the correct order which for this configuration is yaw,
// pitch, and then roll.
// For more see
// http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles
// which has additional links.
      myIMU.yaw   = atan2(2.0f * (*(getQ()+1) * *(getQ()+2) + *getQ() *
 80a0788:	f001 fa70 	bl	80a1c6c <_Z4getQv>
 80a078c:	6846      	ldr	r6, [r0, #4]
 80a078e:	f001 fa6d 	bl	80a1c6c <_Z4getQv>
 80a0792:	6881      	ldr	r1, [r0, #8]
 80a0794:	4630      	mov	r0, r6
 80a0796:	f004 ffab 	bl	80a56f0 <__aeabi_fmul>
 80a079a:	4606      	mov	r6, r0
 80a079c:	f001 fa66 	bl	80a1c6c <_Z4getQv>
 80a07a0:	6807      	ldr	r7, [r0, #0]
                    *(getQ()+3)), *getQ() * *getQ() + *(getQ()+1) * *(getQ()+1)
 80a07a2:	f001 fa63 	bl	80a1c6c <_Z4getQv>
// must be applied in the correct order which for this configuration is yaw,
// pitch, and then roll.
// For more see
// http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles
// which has additional links.
      myIMU.yaw   = atan2(2.0f * (*(getQ()+1) * *(getQ()+2) + *getQ() *
 80a07a6:	68c1      	ldr	r1, [r0, #12]
 80a07a8:	4638      	mov	r0, r7
 80a07aa:	f004 ffa1 	bl	80a56f0 <__aeabi_fmul>
 80a07ae:	4631      	mov	r1, r6
 80a07b0:	f004 fe96 	bl	80a54e0 <__addsf3>
 80a07b4:	4601      	mov	r1, r0
 80a07b6:	f004 fe93 	bl	80a54e0 <__addsf3>
 80a07ba:	f004 faef 	bl	80a4d9c <__aeabi_f2d>
 80a07be:	460f      	mov	r7, r1
 80a07c0:	4606      	mov	r6, r0
                    *(getQ()+3)), *getQ() * *getQ() + *(getQ()+1) * *(getQ()+1)
 80a07c2:	f001 fa53 	bl	80a1c6c <_Z4getQv>
 80a07c6:	f8d0 8000 	ldr.w	r8, [r0]
 80a07ca:	f001 fa4f 	bl	80a1c6c <_Z4getQv>
 80a07ce:	6801      	ldr	r1, [r0, #0]
 80a07d0:	4640      	mov	r0, r8
 80a07d2:	f004 ff8d 	bl	80a56f0 <__aeabi_fmul>
 80a07d6:	4680      	mov	r8, r0
 80a07d8:	f001 fa48 	bl	80a1c6c <_Z4getQv>
 80a07dc:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80a07e0:	f001 fa44 	bl	80a1c6c <_Z4getQv>
 80a07e4:	6841      	ldr	r1, [r0, #4]
 80a07e6:	4648      	mov	r0, r9
 80a07e8:	f004 ff82 	bl	80a56f0 <__aeabi_fmul>
 80a07ec:	4641      	mov	r1, r8
 80a07ee:	f004 fe77 	bl	80a54e0 <__addsf3>
 80a07f2:	4680      	mov	r8, r0
                    - *(getQ()+2) * *(getQ()+2) - *(getQ()+3) * *(getQ()+3));
 80a07f4:	f001 fa3a 	bl	80a1c6c <_Z4getQv>
 80a07f8:	f8d0 9008 	ldr.w	r9, [r0, #8]
 80a07fc:	f001 fa36 	bl	80a1c6c <_Z4getQv>
 80a0800:	6881      	ldr	r1, [r0, #8]
 80a0802:	4648      	mov	r0, r9
 80a0804:	f004 ff74 	bl	80a56f0 <__aeabi_fmul>
 80a0808:	4601      	mov	r1, r0
 80a080a:	4640      	mov	r0, r8
 80a080c:	f004 fe66 	bl	80a54dc <__aeabi_fsub>
 80a0810:	4680      	mov	r8, r0
 80a0812:	f001 fa2b 	bl	80a1c6c <_Z4getQv>
 80a0816:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80a081a:	f001 fa27 	bl	80a1c6c <_Z4getQv>
// must be applied in the correct order which for this configuration is yaw,
// pitch, and then roll.
// For more see
// http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles
// which has additional links.
      myIMU.yaw   = atan2(2.0f * (*(getQ()+1) * *(getQ()+2) + *getQ() *
 80a081e:	68c1      	ldr	r1, [r0, #12]
 80a0820:	4648      	mov	r0, r9
 80a0822:	f004 ff65 	bl	80a56f0 <__aeabi_fmul>
 80a0826:	4601      	mov	r1, r0
 80a0828:	4640      	mov	r0, r8
 80a082a:	f004 fe57 	bl	80a54dc <__aeabi_fsub>
 80a082e:	f004 fab5 	bl	80a4d9c <__aeabi_f2d>
 80a0832:	4602      	mov	r2, r0
 80a0834:	460b      	mov	r3, r1
 80a0836:	4630      	mov	r0, r6
 80a0838:	4639      	mov	r1, r7
 80a083a:	f002 fb75 	bl	80a2f28 <atan2>
                    *(getQ()+3)), *getQ() * *getQ() + *(getQ()+1) * *(getQ()+1)
                    - *(getQ()+2) * *(getQ()+2) - *(getQ()+3) * *(getQ()+3));
 80a083e:	f004 fdf9 	bl	80a5434 <__aeabi_d2f>
 80a0842:	60a8      	str	r0, [r5, #8]
      myIMU.pitch = -asin(2.0f * (*(getQ()+1) * *(getQ()+3) - *getQ() *
 80a0844:	f001 fa12 	bl	80a1c6c <_Z4getQv>
 80a0848:	6846      	ldr	r6, [r0, #4]
 80a084a:	f001 fa0f 	bl	80a1c6c <_Z4getQv>
 80a084e:	68c1      	ldr	r1, [r0, #12]
 80a0850:	4630      	mov	r0, r6
 80a0852:	f004 ff4d 	bl	80a56f0 <__aeabi_fmul>
 80a0856:	4606      	mov	r6, r0
 80a0858:	f001 fa08 	bl	80a1c6c <_Z4getQv>
 80a085c:	6807      	ldr	r7, [r0, #0]
                    *(getQ()+2)));
 80a085e:	f001 fa05 	bl	80a1c6c <_Z4getQv>
// http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles
// which has additional links.
      myIMU.yaw   = atan2(2.0f * (*(getQ()+1) * *(getQ()+2) + *getQ() *
                    *(getQ()+3)), *getQ() * *getQ() + *(getQ()+1) * *(getQ()+1)
                    - *(getQ()+2) * *(getQ()+2) - *(getQ()+3) * *(getQ()+3));
      myIMU.pitch = -asin(2.0f * (*(getQ()+1) * *(getQ()+3) - *getQ() *
 80a0862:	6881      	ldr	r1, [r0, #8]
 80a0864:	4638      	mov	r0, r7
 80a0866:	f004 ff43 	bl	80a56f0 <__aeabi_fmul>
 80a086a:	4601      	mov	r1, r0
 80a086c:	4630      	mov	r0, r6
 80a086e:	f004 fe35 	bl	80a54dc <__aeabi_fsub>
 80a0872:	4601      	mov	r1, r0
 80a0874:	f004 fe34 	bl	80a54e0 <__addsf3>
 80a0878:	f004 fa90 	bl	80a4d9c <__aeabi_f2d>
 80a087c:	f002 fafc 	bl	80a2e78 <asin>
                    *(getQ()+2)));
 80a0880:	f004 fdd8 	bl	80a5434 <__aeabi_d2f>
 80a0884:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a0888:	6068      	str	r0, [r5, #4]
      myIMU.roll  = atan2(2.0f * (*getQ() * *(getQ()+1) + *(getQ()+2) *
 80a088a:	f001 f9ef 	bl	80a1c6c <_Z4getQv>
 80a088e:	6806      	ldr	r6, [r0, #0]
 80a0890:	f001 f9ec 	bl	80a1c6c <_Z4getQv>
 80a0894:	6841      	ldr	r1, [r0, #4]
 80a0896:	4630      	mov	r0, r6
 80a0898:	f004 ff2a 	bl	80a56f0 <__aeabi_fmul>
 80a089c:	4606      	mov	r6, r0
 80a089e:	f001 f9e5 	bl	80a1c6c <_Z4getQv>
 80a08a2:	6887      	ldr	r7, [r0, #8]
                    *(getQ()+3)), *getQ() * *getQ() - *(getQ()+1) * *(getQ()+1)
 80a08a4:	f001 f9e2 	bl	80a1c6c <_Z4getQv>
      myIMU.yaw   = atan2(2.0f * (*(getQ()+1) * *(getQ()+2) + *getQ() *
                    *(getQ()+3)), *getQ() * *getQ() + *(getQ()+1) * *(getQ()+1)
                    - *(getQ()+2) * *(getQ()+2) - *(getQ()+3) * *(getQ()+3));
      myIMU.pitch = -asin(2.0f * (*(getQ()+1) * *(getQ()+3) - *getQ() *
                    *(getQ()+2)));
      myIMU.roll  = atan2(2.0f * (*getQ() * *(getQ()+1) + *(getQ()+2) *
 80a08a8:	68c1      	ldr	r1, [r0, #12]
 80a08aa:	4638      	mov	r0, r7
 80a08ac:	f004 ff20 	bl	80a56f0 <__aeabi_fmul>
 80a08b0:	4631      	mov	r1, r6
 80a08b2:	f004 fe15 	bl	80a54e0 <__addsf3>
 80a08b6:	4601      	mov	r1, r0
 80a08b8:	f004 fe12 	bl	80a54e0 <__addsf3>
 80a08bc:	f004 fa6e 	bl	80a4d9c <__aeabi_f2d>
 80a08c0:	460f      	mov	r7, r1
 80a08c2:	4606      	mov	r6, r0
                    *(getQ()+3)), *getQ() * *getQ() - *(getQ()+1) * *(getQ()+1)
 80a08c4:	f001 f9d2 	bl	80a1c6c <_Z4getQv>
 80a08c8:	f8d0 8000 	ldr.w	r8, [r0]
 80a08cc:	f001 f9ce 	bl	80a1c6c <_Z4getQv>
 80a08d0:	6801      	ldr	r1, [r0, #0]
 80a08d2:	4640      	mov	r0, r8
 80a08d4:	f004 ff0c 	bl	80a56f0 <__aeabi_fmul>
 80a08d8:	4680      	mov	r8, r0
 80a08da:	f001 f9c7 	bl	80a1c6c <_Z4getQv>
 80a08de:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80a08e2:	f001 f9c3 	bl	80a1c6c <_Z4getQv>
 80a08e6:	6841      	ldr	r1, [r0, #4]
 80a08e8:	4648      	mov	r0, r9
 80a08ea:	f004 ff01 	bl	80a56f0 <__aeabi_fmul>
 80a08ee:	4601      	mov	r1, r0
 80a08f0:	4640      	mov	r0, r8
 80a08f2:	f004 fdf3 	bl	80a54dc <__aeabi_fsub>
 80a08f6:	4680      	mov	r8, r0
                    - *(getQ()+2) * *(getQ()+2) + *(getQ()+3) * *(getQ()+3));
 80a08f8:	f001 f9b8 	bl	80a1c6c <_Z4getQv>
 80a08fc:	f8d0 9008 	ldr.w	r9, [r0, #8]
 80a0900:	f001 f9b4 	bl	80a1c6c <_Z4getQv>
 80a0904:	6881      	ldr	r1, [r0, #8]
 80a0906:	4648      	mov	r0, r9
 80a0908:	f004 fef2 	bl	80a56f0 <__aeabi_fmul>
 80a090c:	4601      	mov	r1, r0
 80a090e:	4640      	mov	r0, r8
 80a0910:	f004 fde4 	bl	80a54dc <__aeabi_fsub>
 80a0914:	4680      	mov	r8, r0
 80a0916:	f001 f9a9 	bl	80a1c6c <_Z4getQv>
 80a091a:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80a091e:	f001 f9a5 	bl	80a1c6c <_Z4getQv>
      myIMU.yaw   = atan2(2.0f * (*(getQ()+1) * *(getQ()+2) + *getQ() *
                    *(getQ()+3)), *getQ() * *getQ() + *(getQ()+1) * *(getQ()+1)
                    - *(getQ()+2) * *(getQ()+2) - *(getQ()+3) * *(getQ()+3));
      myIMU.pitch = -asin(2.0f * (*(getQ()+1) * *(getQ()+3) - *getQ() *
                    *(getQ()+2)));
      myIMU.roll  = atan2(2.0f * (*getQ() * *(getQ()+1) + *(getQ()+2) *
 80a0922:	68c1      	ldr	r1, [r0, #12]
 80a0924:	4648      	mov	r0, r9
 80a0926:	f004 fee3 	bl	80a56f0 <__aeabi_fmul>
 80a092a:	4641      	mov	r1, r8
 80a092c:	f004 fdd8 	bl	80a54e0 <__addsf3>
 80a0930:	f004 fa34 	bl	80a4d9c <__aeabi_f2d>
 80a0934:	4602      	mov	r2, r0
 80a0936:	460b      	mov	r3, r1
 80a0938:	4630      	mov	r0, r6
 80a093a:	4639      	mov	r1, r7
 80a093c:	f002 faf4 	bl	80a2f28 <atan2>
 80a0940:	4606      	mov	r6, r0
                    *(getQ()+3)), *getQ() * *getQ() - *(getQ()+1) * *(getQ()+1)
                    - *(getQ()+2) * *(getQ()+2) + *(getQ()+3) * *(getQ()+3));
      myIMU.pitch *= RAD_TO_DEG;
 80a0942:	6868      	ldr	r0, [r5, #4]
      myIMU.yaw   = atan2(2.0f * (*(getQ()+1) * *(getQ()+2) + *getQ() *
                    *(getQ()+3)), *getQ() * *getQ() + *(getQ()+1) * *(getQ()+1)
                    - *(getQ()+2) * *(getQ()+2) - *(getQ()+3) * *(getQ()+3));
      myIMU.pitch = -asin(2.0f * (*(getQ()+1) * *(getQ()+3) - *getQ() *
                    *(getQ()+2)));
      myIMU.roll  = atan2(2.0f * (*getQ() * *(getQ()+1) + *(getQ()+2) *
 80a0944:	460f      	mov	r7, r1
                    *(getQ()+3)), *getQ() * *getQ() - *(getQ()+1) * *(getQ()+1)
                    - *(getQ()+2) * *(getQ()+2) + *(getQ()+3) * *(getQ()+3));
      myIMU.pitch *= RAD_TO_DEG;
 80a0946:	f004 fa29 	bl	80a4d9c <__aeabi_f2d>
 80a094a:	a33f      	add	r3, pc, #252	; (adr r3, 80a0a48 <loop+0x698>)
 80a094c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0950:	f004 fa78 	bl	80a4e44 <__aeabi_dmul>
 80a0954:	f004 fd6e 	bl	80a5434 <__aeabi_d2f>
 80a0958:	6068      	str	r0, [r5, #4]
      myIMU.yaw   *= RAD_TO_DEG;
      // Declination of SparkFun Electronics (40°05'26.6"N 105°11'05.9"W) is
      // 	8° 30' E  ± 0° 21' (or 8.5°) on 2016-07-19
      // - http://www.ngdc.noaa.gov/geomag-web/#declination
      myIMU.yaw   -= 8.5;
 80a095a:	68a8      	ldr	r0, [r5, #8]
 80a095c:	f004 fa1e 	bl	80a4d9c <__aeabi_f2d>
 80a0960:	a339      	add	r3, pc, #228	; (adr r3, 80a0a48 <loop+0x698>)
 80a0962:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0966:	f004 fa6d 	bl	80a4e44 <__aeabi_dmul>
 80a096a:	f004 fd63 	bl	80a5434 <__aeabi_d2f>
 80a096e:	493a      	ldr	r1, [pc, #232]	; (80a0a58 <loop+0x6a8>)
 80a0970:	f004 fdb4 	bl	80a54dc <__aeabi_fsub>
      myIMU.roll  *= RAD_TO_DEG;
 80a0974:	4639      	mov	r1, r7
      myIMU.pitch *= RAD_TO_DEG;
      myIMU.yaw   *= RAD_TO_DEG;
      // Declination of SparkFun Electronics (40°05'26.6"N 105°11'05.9"W) is
      // 	8° 30' E  ± 0° 21' (or 8.5°) on 2016-07-19
      // - http://www.ngdc.noaa.gov/geomag-web/#declination
      myIMU.yaw   -= 8.5;
 80a0976:	60a8      	str	r0, [r5, #8]
      myIMU.roll  *= RAD_TO_DEG;
 80a0978:	4630      	mov	r0, r6
 80a097a:	f004 fd5b 	bl	80a5434 <__aeabi_d2f>
 80a097e:	f004 fa0d 	bl	80a4d9c <__aeabi_f2d>
 80a0982:	a331      	add	r3, pc, #196	; (adr r3, 80a0a48 <loop+0x698>)
 80a0984:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0988:	f004 fa5c 	bl	80a4e44 <__aeabi_dmul>
 80a098c:	f004 fd52 	bl	80a5434 <__aeabi_d2f>
 80a0990:	60e8      	str	r0, [r5, #12]

      if(SerialDebug)
      {
        Serial.print("Yaw, Pitch, Roll: ");
 80a0992:	f001 ff1b 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0996:	4931      	ldr	r1, [pc, #196]	; (80a0a5c <loop+0x6ac>)
 80a0998:	f001 fc98 	bl	80a22cc <_ZN5Print5printEPKc>
        Serial.print(myIMU.yaw, 2);
 80a099c:	f001 ff16 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a09a0:	4606      	mov	r6, r0
 80a09a2:	68a8      	ldr	r0, [r5, #8]
 80a09a4:	f004 f9fa 	bl	80a4d9c <__aeabi_f2d>
 80a09a8:	9400      	str	r4, [sp, #0]
 80a09aa:	4602      	mov	r2, r0
 80a09ac:	460b      	mov	r3, r1
 80a09ae:	4630      	mov	r0, r6
 80a09b0:	f001 fdbc 	bl	80a252c <_ZN5Print5printEdi>
        Serial.print(", ");
 80a09b4:	f001 ff0a 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a09b8:	4929      	ldr	r1, [pc, #164]	; (80a0a60 <loop+0x6b0>)
 80a09ba:	f001 fc87 	bl	80a22cc <_ZN5Print5printEPKc>
        Serial.print(myIMU.pitch, 2);
 80a09be:	f001 ff05 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a09c2:	4606      	mov	r6, r0
 80a09c4:	6868      	ldr	r0, [r5, #4]
 80a09c6:	f004 f9e9 	bl	80a4d9c <__aeabi_f2d>
 80a09ca:	9400      	str	r4, [sp, #0]
 80a09cc:	4602      	mov	r2, r0
 80a09ce:	460b      	mov	r3, r1
 80a09d0:	4630      	mov	r0, r6
 80a09d2:	f001 fdab 	bl	80a252c <_ZN5Print5printEdi>
        Serial.print(", ");
 80a09d6:	f001 fef9 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a09da:	4921      	ldr	r1, [pc, #132]	; (80a0a60 <loop+0x6b0>)
 80a09dc:	f001 fc76 	bl	80a22cc <_ZN5Print5printEPKc>
        Serial.println(myIMU.roll, 2);
 80a09e0:	f001 fef4 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a09e4:	4606      	mov	r6, r0
 80a09e6:	68e8      	ldr	r0, [r5, #12]
 80a09e8:	f004 f9d8 	bl	80a4d9c <__aeabi_f2d>
 80a09ec:	9400      	str	r4, [sp, #0]
 80a09ee:	4602      	mov	r2, r0
 80a09f0:	460b      	mov	r3, r1
 80a09f2:	4630      	mov	r0, r6
 80a09f4:	f001 fd9f 	bl	80a2536 <_ZN5Print7printlnEdi>

        Serial.print("rate = ");
 80a09f8:	f001 fee8 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a09fc:	4919      	ldr	r1, [pc, #100]	; (80a0a64 <loop+0x6b4>)
 80a09fe:	f001 fc65 	bl	80a22cc <_ZN5Print5printEPKc>
        Serial.print((float)myIMU.sumCount/myIMU.sum, 2);
 80a0a02:	f001 fee3 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0a06:	4606      	mov	r6, r0
 80a0a08:	6a28      	ldr	r0, [r5, #32]
 80a0a0a:	f004 fe19 	bl	80a5640 <__aeabi_ui2f>
 80a0a0e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80a0a10:	f004 ff22 	bl	80a5858 <__aeabi_fdiv>
 80a0a14:	f004 f9c2 	bl	80a4d9c <__aeabi_f2d>
 80a0a18:	9400      	str	r4, [sp, #0]
 80a0a1a:	460b      	mov	r3, r1
 80a0a1c:	4602      	mov	r2, r0
 80a0a1e:	4630      	mov	r0, r6
 80a0a20:	f001 fd84 	bl	80a252c <_ZN5Print5printEdi>
        Serial.println(" Hz");
 80a0a24:	f001 fed2 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a0a28:	490f      	ldr	r1, [pc, #60]	; (80a0a68 <loop+0x6b8>)
 80a0a2a:	f001 fc62 	bl	80a22f2 <_ZN5Print7printlnEPKc>
 80a0a2e:	f001 f945 	bl	80a1cbc <HAL_Timer_Get_Milli_Seconds>
      display.print(" Hz");
      display.display();
#endif // LCD

      myIMU.count = millis();
      myIMU.sumCount = 0;
 80a0a32:	2300      	movs	r3, #0
 80a0a34:	622b      	str	r3, [r5, #32]
      myIMU.sum = 0;
 80a0a36:	2300      	movs	r3, #0
      display.print((float) myIMU.sumCount / myIMU.sum, 2);
      display.print(" Hz");
      display.display();
#endif // LCD

      myIMU.count = millis();
 80a0a38:	61e8      	str	r0, [r5, #28]
      myIMU.sumCount = 0;
      myIMU.sum = 0;
 80a0a3a:	62ab      	str	r3, [r5, #40]	; 0x28
    } // if (myIMU.delt_t > 500)
  } // if (AHRS)
}
 80a0a3c:	b007      	add	sp, #28
 80a0a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0a42:	bf00      	nop
 80a0a44:	f3af 8000 	nop.w
 80a0a48:	1a63c1f8 	.word	0x1a63c1f8
 80a0a4c:	404ca5dc 	.word	0x404ca5dc
 80a0a50:	080a5e16 	.word	0x080a5e16
 80a0a54:	080a5e1d 	.word	0x080a5e1d
 80a0a58:	41080000 	.word	0x41080000
 80a0a5c:	080a5e24 	.word	0x080a5e24
 80a0a60:	080a5e37 	.word	0x080a5e37
 80a0a64:	080a5e3a 	.word	0x080a5e3a
 80a0a68:	080a5e42 	.word	0x080a5e42

080a0a6c <_GLOBAL__sub_I_intPin>:
 80a0a6c:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0a6e:	f001 f92d 	bl	80a1ccc <HAL_Pin_Map>
#else
#define MPU9250_ADDRESS 0x68  // Device address when ADO = 0
#define AK8963_ADDRESS  0x0C   // Address of magnetometer
#endif // AD0

class MPU9250
 80a0a72:	4b13      	ldr	r3, [pc, #76]	; (80a0ac0 <_GLOBAL__sub_I_intPin+0x54>)
 80a0a74:	2201      	movs	r2, #1
 80a0a76:	709a      	strb	r2, [r3, #2]
 80a0a78:	2202      	movs	r2, #2
 80a0a7a:	2100      	movs	r1, #0
 80a0a7c:	70da      	strb	r2, [r3, #3]
 80a0a7e:	2200      	movs	r2, #0
 80a0a80:	7019      	strb	r1, [r3, #0]
 80a0a82:	7059      	strb	r1, [r3, #1]
 80a0a84:	6199      	str	r1, [r3, #24]
 80a0a86:	61d9      	str	r1, [r3, #28]
 80a0a88:	6219      	str	r1, [r3, #32]
 80a0a8a:	625a      	str	r2, [r3, #36]	; 0x24
 80a0a8c:	629a      	str	r2, [r3, #40]	; 0x28
 80a0a8e:	62d9      	str	r1, [r3, #44]	; 0x2c
 80a0a90:	6319      	str	r1, [r3, #48]	; 0x30
 80a0a92:	6359      	str	r1, [r3, #52]	; 0x34
 80a0a94:	675a      	str	r2, [r3, #116]	; 0x74
 80a0a96:	679a      	str	r2, [r3, #120]	; 0x78
 80a0a98:	67da      	str	r2, [r3, #124]	; 0x7c
 80a0a9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80a0a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80a0aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80a0aa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80a0aaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80a0aae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80a0ab2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80a0ab6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80a0aba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80a0abe:	bd08      	pop	{r3, pc}
 80a0ac0:	20000088 	.word	0x20000088

080a0ac4 <_ZN7MPU92507getMresEv>:
//====== Set of useful function to access acceleration. gyroscope, magnetometer,
//====== and temperature data
//==============================================================================

void MPU9250::getMres() {
  switch (Mscale)
 80a0ac4:	7883      	ldrb	r3, [r0, #2]
 80a0ac6:	b113      	cbz	r3, 80a0ace <_ZN7MPU92507getMresEv+0xa>
 80a0ac8:	2b01      	cmp	r3, #1
 80a0aca:	d002      	beq.n	80a0ad2 <_ZN7MPU92507getMresEv+0xe>
 80a0acc:	4770      	bx	lr
  {
  // Possible magnetometer scales (and their register bit settings) are:
  // 14 bit resolution (0) and 16 bit resolution (1)
    case MFS_14BITS:
          mRes = 10.*4912./8190.; // Proper scale to return milliGauss
 80a0ace:	4b02      	ldr	r3, [pc, #8]	; (80a0ad8 <_ZN7MPU92507getMresEv+0x14>)
 80a0ad0:	e000      	b.n	80a0ad4 <_ZN7MPU92507getMresEv+0x10>
          break;
    case MFS_16BITS:
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
 80a0ad2:	4b02      	ldr	r3, [pc, #8]	; (80a0adc <_ZN7MPU92507getMresEv+0x18>)
 80a0ad4:	64c3      	str	r3, [r0, #76]	; 0x4c
 80a0ad6:	4770      	bx	lr
 80a0ad8:	40bfebff 	.word	0x40bfebff
 80a0adc:	3fbfebff 	.word	0x3fbfebff

080a0ae0 <_ZN7MPU92507getGresEv>:
          break;
  }
}

void MPU9250::getGres() {
  switch (Gscale)
 80a0ae0:	7803      	ldrb	r3, [r0, #0]
 80a0ae2:	2b03      	cmp	r3, #3
 80a0ae4:	d80b      	bhi.n	80a0afe <_ZN7MPU92507getGresEv+0x1e>
 80a0ae6:	e8df f003 	tbb	[pc, r3]
 80a0aea:	0402      	.short	0x0402
 80a0aec:	0806      	.short	0x0806
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11). 
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes = 250.0/32768.0;
 80a0aee:	4b04      	ldr	r3, [pc, #16]	; (80a0b00 <_ZN7MPU92507getGresEv+0x20>)
 80a0af0:	e004      	b.n	80a0afc <_ZN7MPU92507getGresEv+0x1c>
          break;
    case GFS_500DPS:
          gRes = 500.0/32768.0;
 80a0af2:	4b04      	ldr	r3, [pc, #16]	; (80a0b04 <_ZN7MPU92507getGresEv+0x24>)
 80a0af4:	e002      	b.n	80a0afc <_ZN7MPU92507getGresEv+0x1c>
          break;
    case GFS_1000DPS:
          gRes = 1000.0/32768.0;
 80a0af6:	4b04      	ldr	r3, [pc, #16]	; (80a0b08 <_ZN7MPU92507getGresEv+0x28>)
 80a0af8:	e000      	b.n	80a0afc <_ZN7MPU92507getGresEv+0x1c>
          break;
    case GFS_2000DPS:
          gRes = 2000.0/32768.0;
 80a0afa:	4b04      	ldr	r3, [pc, #16]	; (80a0b0c <_ZN7MPU92507getGresEv+0x2c>)
 80a0afc:	6483      	str	r3, [r0, #72]	; 0x48
 80a0afe:	4770      	bx	lr
 80a0b00:	3bfa0000 	.word	0x3bfa0000
 80a0b04:	3c7a0000 	.word	0x3c7a0000
 80a0b08:	3cfa0000 	.word	0x3cfa0000
 80a0b0c:	3d7a0000 	.word	0x3d7a0000

080a0b10 <_ZN7MPU92507getAresEv>:
          break;
  }
}

void MPU9250::getAres() {
  switch (Ascale)
 80a0b10:	7843      	ldrb	r3, [r0, #1]
 80a0b12:	2b03      	cmp	r3, #3
 80a0b14:	d80f      	bhi.n	80a0b36 <_ZN7MPU92507getAresEv+0x26>
 80a0b16:	e8df f003 	tbb	[pc, r3]
 80a0b1a:	0502      	.short	0x0502
 80a0b1c:	0b08      	.short	0x0b08
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11). 
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes = 2.0/32768.0;
 80a0b1e:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
 80a0b22:	e007      	b.n	80a0b34 <_ZN7MPU92507getAresEv+0x24>
          break;
    case AFS_4G:
          aRes = 4.0/32768.0;
 80a0b24:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
 80a0b28:	e004      	b.n	80a0b34 <_ZN7MPU92507getAresEv+0x24>
          break;
    case AFS_8G:
          aRes = 8.0/32768.0;
 80a0b2a:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 80a0b2e:	e001      	b.n	80a0b34 <_ZN7MPU92507getAresEv+0x24>
          break;
    case AFS_16G:
          aRes = 16.0/32768.0;
 80a0b30:	f04f 5368 	mov.w	r3, #973078528	; 0x3a000000
 80a0b34:	6443      	str	r3, [r0, #68]	; 0x44
 80a0b36:	4770      	bx	lr

080a0b38 <_ZN7MPU925010updateTimeEv>:
  return ((int16_t)rawData[0] << 8) | rawData[1];  // Turn the MSB and LSB into a 16-bit value
}

// Calculate the time the last update took for use in the quaternion filters
void MPU9250::updateTime()
{
 80a0b38:	b538      	push	{r3, r4, r5, lr}
 80a0b3a:	4604      	mov	r4, r0
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0b3c:	f001 f8b6 	bl	80a1cac <HAL_Timer_Get_Micro_Seconds>
 80a0b40:	4605      	mov	r5, r0
  Now = micros();
 80a0b42:	6360      	str	r0, [r4, #52]	; 0x34
  
  // Set integration time by time elapsed since last filter update
  deltat = ((Now - lastUpdate) / 1000000.0f);
 80a0b44:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a0b46:	1a28      	subs	r0, r5, r0
 80a0b48:	f004 fd7a 	bl	80a5640 <__aeabi_ui2f>
 80a0b4c:	4906      	ldr	r1, [pc, #24]	; (80a0b68 <_ZN7MPU925010updateTimeEv+0x30>)
 80a0b4e:	f004 fe83 	bl	80a5858 <__aeabi_fdiv>
  lastUpdate = Now;
 80a0b52:	62e5      	str	r5, [r4, #44]	; 0x2c
void MPU9250::updateTime()
{
  Now = micros();
  
  // Set integration time by time elapsed since last filter update
  deltat = ((Now - lastUpdate) / 1000000.0f);
 80a0b54:	4601      	mov	r1, r0
 80a0b56:	6260      	str	r0, [r4, #36]	; 0x24
  lastUpdate = Now;

  sum += deltat; // sum for averaging filter update rate
 80a0b58:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0b5a:	f004 fcc1 	bl	80a54e0 <__addsf3>
  sumCount++;
 80a0b5e:	6a23      	ldr	r3, [r4, #32]
  
  // Set integration time by time elapsed since last filter update
  deltat = ((Now - lastUpdate) / 1000000.0f);
  lastUpdate = Now;

  sum += deltat; // sum for averaging filter update rate
 80a0b60:	62a0      	str	r0, [r4, #40]	; 0x28
  sumCount++;
 80a0b62:	3301      	adds	r3, #1
 80a0b64:	6223      	str	r3, [r4, #32]
 80a0b66:	bd38      	pop	{r3, r4, r5, pc}
 80a0b68:	49742400 	.word	0x49742400

080a0b6c <_ZN7MPU92509writeByteEhhh>:
}

        
// Wire.h read and write protocols
void MPU9250::writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80a0b6c:	b570      	push	{r4, r5, r6, lr}
 80a0b6e:	460e      	mov	r6, r1
 80a0b70:	4615      	mov	r5, r2
 80a0b72:	461c      	mov	r4, r3
  Wire.beginTransmission(address);  // Initialize the Tx buffer
 80a0b74:	f001 ffd6 	bl	80a2b24 <_Z19__fetch_global_Wirev>
 80a0b78:	4631      	mov	r1, r6
 80a0b7a:	f001 faa1 	bl	80a20c0 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(subAddress);           // Put slave register address in Tx buffer
 80a0b7e:	f001 ffd1 	bl	80a2b24 <_Z19__fetch_global_Wirev>
 80a0b82:	6803      	ldr	r3, [r0, #0]
 80a0b84:	4629      	mov	r1, r5
 80a0b86:	689b      	ldr	r3, [r3, #8]
 80a0b88:	4798      	blx	r3
  Wire.write(data);                 // Put data in Tx buffer
 80a0b8a:	f001 ffcb 	bl	80a2b24 <_Z19__fetch_global_Wirev>
 80a0b8e:	6803      	ldr	r3, [r0, #0]
 80a0b90:	4621      	mov	r1, r4
 80a0b92:	689a      	ldr	r2, [r3, #8]
 80a0b94:	4790      	blx	r2
  Wire.endTransmission();           // Send the Tx buffer
 80a0b96:	f001 ffc5 	bl	80a2b24 <_Z19__fetch_global_Wirev>
}
 80a0b9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void MPU9250::writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
  Wire.beginTransmission(address);  // Initialize the Tx buffer
  Wire.write(subAddress);           // Put slave register address in Tx buffer
  Wire.write(data);                 // Put data in Tx buffer
  Wire.endTransmission();           // Send the Tx buffer
 80a0b9e:	f001 ba97 	b.w	80a20d0 <_ZN7TwoWire15endTransmissionEv>

080a0ba2 <_ZN7MPU92508readByteEhh>:
}

uint8_t MPU9250::readByte(uint8_t address, uint8_t subAddress)
{
 80a0ba2:	b538      	push	{r3, r4, r5, lr}
 80a0ba4:	460c      	mov	r4, r1
 80a0ba6:	4615      	mov	r5, r2
  uint8_t data; // `data` will store the register data   
  Wire.beginTransmission(address);         // Initialize the Tx buffer
 80a0ba8:	f001 ffbc 	bl	80a2b24 <_Z19__fetch_global_Wirev>
 80a0bac:	4621      	mov	r1, r4
 80a0bae:	f001 fa87 	bl	80a20c0 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(subAddress);                  // Put slave register address in Tx buffer
 80a0bb2:	f001 ffb7 	bl	80a2b24 <_Z19__fetch_global_Wirev>
 80a0bb6:	6803      	ldr	r3, [r0, #0]
 80a0bb8:	4629      	mov	r1, r5
 80a0bba:	689b      	ldr	r3, [r3, #8]
 80a0bbc:	4798      	blx	r3
  Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 80a0bbe:	f001 ffb1 	bl	80a2b24 <_Z19__fetch_global_Wirev>
 80a0bc2:	2100      	movs	r1, #0
 80a0bc4:	f001 fa80 	bl	80a20c8 <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(address, (uint8_t) 1);  // Read one byte from slave register address 
 80a0bc8:	f001 ffac 	bl	80a2b24 <_Z19__fetch_global_Wirev>
 80a0bcc:	2201      	movs	r2, #1
 80a0bce:	4621      	mov	r1, r4
 80a0bd0:	f001 fa73 	bl	80a20ba <_ZN7TwoWire11requestFromEhh>
  data = Wire.read();                      // Fill Rx buffer with result
 80a0bd4:	f001 ffa6 	bl	80a2b24 <_Z19__fetch_global_Wirev>
 80a0bd8:	6803      	ldr	r3, [r0, #0]
 80a0bda:	695b      	ldr	r3, [r3, #20]
 80a0bdc:	4798      	blx	r3
  return data;                             // Return data read from slave register
}
 80a0bde:	b2c0      	uxtb	r0, r0
 80a0be0:	bd38      	pop	{r3, r4, r5, pc}

080a0be2 <_ZN7MPU925011initMPU9250Ev>:
  writeByte(AK8963_ADDRESS, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
  delay(10);
}

void MPU9250::initMPU9250()
{  
 80a0be2:	b510      	push	{r4, lr}
 80a0be4:	4604      	mov	r4, r0
 // wake up device
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors 
 80a0be6:	2300      	movs	r3, #0
 80a0be8:	226b      	movs	r2, #107	; 0x6b
 80a0bea:	2168      	movs	r1, #104	; 0x68
 80a0bec:	f7ff ffbe 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  delay(100); // Wait for all registers to reset 
 80a0bf0:	2064      	movs	r0, #100	; 0x64
 80a0bf2:	f001 fa09 	bl	80a2008 <delay>

 // get stable time source
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 80a0bf6:	2301      	movs	r3, #1
 80a0bf8:	226b      	movs	r2, #107	; 0x6b
 80a0bfa:	2168      	movs	r1, #104	; 0x68
 80a0bfc:	4620      	mov	r0, r4
 80a0bfe:	f7ff ffb5 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  delay(200); 
 80a0c02:	20c8      	movs	r0, #200	; 0xc8
 80a0c04:	f001 fa00 	bl	80a2008 <delay>
 // Disable FSYNC and set thermometer and gyro bandwidth to 41 and 42 Hz, respectively; 
 // minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
 // be higher than 1 / 0.0059 = 170 Hz
 // DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
 // With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
  writeByte(MPU9250_ADDRESS, CONFIG, 0x03);  
 80a0c08:	4620      	mov	r0, r4
 80a0c0a:	2303      	movs	r3, #3
 80a0c0c:	221a      	movs	r2, #26
 80a0c0e:	2168      	movs	r1, #104	; 0x68
 80a0c10:	f7ff ffac 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; a rate consistent with the filter update rate 
 80a0c14:	2304      	movs	r3, #4
 80a0c16:	4620      	mov	r0, r4
 80a0c18:	2219      	movs	r2, #25
 80a0c1a:	2168      	movs	r1, #104	; 0x68
 80a0c1c:	f7ff ffa6 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
                                    // determined inset in CONFIG above
 
 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c = readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 80a0c20:	221b      	movs	r2, #27
 80a0c22:	2168      	movs	r1, #104	; 0x68
 80a0c24:	4620      	mov	r0, r4
 80a0c26:	f7ff ffbc 	bl	80a0ba2 <_ZN7MPU92508readByteEhh>
 // c = c & ~0xE0; // Clear self-test bits [7:5] 
  c = c & ~0x02; // Clear Fchoice bits [1:0] 
  c = c & ~0x18; // Clear AFS bits [4:3]
  c = c | Gscale << 3; // Set full scale range for the gyro
 80a0c2a:	7823      	ldrb	r3, [r4, #0]
 80a0c2c:	f020 001a 	bic.w	r0, r0, #26
 80a0c30:	ea40 03c3 	orr.w	r3, r0, r3, lsl #3
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 80a0c34:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80a0c38:	4620      	mov	r0, r4
 80a0c3a:	221b      	movs	r2, #27
 80a0c3c:	2168      	movs	r1, #104	; 0x68
 80a0c3e:	f7ff ff95 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  
 // Set accelerometer full-scale range configuration
  c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 80a0c42:	221c      	movs	r2, #28
 80a0c44:	2168      	movs	r1, #104	; 0x68
 80a0c46:	4620      	mov	r0, r4
 80a0c48:	f7ff ffab 	bl	80a0ba2 <_ZN7MPU92508readByteEhh>
 // c = c & ~0xE0; // Clear self-test bits [7:5] 
  c = c & ~0x18;  // Clear AFS bits [4:3]
  c = c | Ascale << 3; // Set full scale range for the accelerometer 
 80a0c4c:	7863      	ldrb	r3, [r4, #1]
 80a0c4e:	f020 0018 	bic.w	r0, r0, #24
 80a0c52:	ea40 03c3 	orr.w	r3, r0, r3, lsl #3
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 80a0c56:	b2db      	uxtb	r3, r3
 80a0c58:	4620      	mov	r0, r4
 80a0c5a:	221c      	movs	r2, #28
 80a0c5c:	2168      	movs	r1, #104	; 0x68
 80a0c5e:	f7ff ff85 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 80a0c62:	221d      	movs	r2, #29
 80a0c64:	2168      	movs	r1, #104	; 0x68
 80a0c66:	4620      	mov	r0, r4
 80a0c68:	f7ff ff9b 	bl	80a0ba2 <_ZN7MPU92508readByteEhh>
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])  
 80a0c6c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 80a0c70:	f043 0303 	orr.w	r3, r3, #3
 80a0c74:	4620      	mov	r0, r4
 80a0c76:	221d      	movs	r2, #29
 80a0c78:	2168      	movs	r1, #104	; 0x68
 80a0c7a:	f7ff ff77 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
  // clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips 
  // can join the I2C bus and all can be controlled by the Arduino as master
   writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);    
 80a0c7e:	4620      	mov	r0, r4
 80a0c80:	2322      	movs	r3, #34	; 0x22
 80a0c82:	2237      	movs	r2, #55	; 0x37
 80a0c84:	2168      	movs	r1, #104	; 0x68
 80a0c86:	f7ff ff71 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
   writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 80a0c8a:	4620      	mov	r0, r4
 80a0c8c:	2301      	movs	r3, #1
 80a0c8e:	2238      	movs	r2, #56	; 0x38
 80a0c90:	2168      	movs	r1, #104	; 0x68
 80a0c92:	f7ff ff6b 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
   delay(100);
}
 80a0c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
  // clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips 
  // can join the I2C bus and all can be controlled by the Arduino as master
   writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);    
   writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
   delay(100);
 80a0c9a:	2064      	movs	r0, #100	; 0x64
 80a0c9c:	f001 b9b4 	b.w	80a2008 <delay>

080a0ca0 <_ZN7MPU92509readBytesEhhhPh>:
  return data;                             // Return data read from slave register
}

void MPU9250::readBytes(uint8_t address, uint8_t subAddress, uint8_t count,
                        uint8_t * dest)
{  
 80a0ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0ca2:	460c      	mov	r4, r1
 80a0ca4:	4617      	mov	r7, r2
 80a0ca6:	461e      	mov	r6, r3
 80a0ca8:	9d06      	ldr	r5, [sp, #24]
  Wire.beginTransmission(address);   // Initialize the Tx buffer
 80a0caa:	f001 ff3b 	bl	80a2b24 <_Z19__fetch_global_Wirev>
 80a0cae:	4621      	mov	r1, r4
 80a0cb0:	f001 fa06 	bl	80a20c0 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(subAddress);            // Put slave register address in Tx buffer
 80a0cb4:	f001 ff36 	bl	80a2b24 <_Z19__fetch_global_Wirev>
 80a0cb8:	6803      	ldr	r3, [r0, #0]
 80a0cba:	4639      	mov	r1, r7
 80a0cbc:	689b      	ldr	r3, [r3, #8]
 80a0cbe:	4798      	blx	r3
  Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
 80a0cc0:	f001 ff30 	bl	80a2b24 <_Z19__fetch_global_Wirev>
 80a0cc4:	2100      	movs	r1, #0
 80a0cc6:	f001 f9ff 	bl	80a20c8 <_ZN7TwoWire15endTransmissionEh>
  uint8_t i = 0;
  Wire.requestFrom(address, count);  // Read bytes from slave register address 
 80a0cca:	f001 ff2b 	bl	80a2b24 <_Z19__fetch_global_Wirev>
 80a0cce:	4621      	mov	r1, r4
 80a0cd0:	4632      	mov	r2, r6
 80a0cd2:	f001 f9f2 	bl	80a20ba <_ZN7TwoWire11requestFromEhh>
 80a0cd6:	2400      	movs	r4, #0
  while (Wire.available()) {
 80a0cd8:	f001 ff24 	bl	80a2b24 <_Z19__fetch_global_Wirev>
 80a0cdc:	6803      	ldr	r3, [r0, #0]
 80a0cde:	1c66      	adds	r6, r4, #1
 80a0ce0:	691b      	ldr	r3, [r3, #16]
 80a0ce2:	4798      	blx	r3
 80a0ce4:	b140      	cbz	r0, 80a0cf8 <_ZN7MPU92509readBytesEhhhPh+0x58>
    dest[i++] = Wire.read(); }         // Put read results in the Rx buffer
 80a0ce6:	f001 ff1d 	bl	80a2b24 <_Z19__fetch_global_Wirev>
 80a0cea:	6803      	ldr	r3, [r0, #0]
 80a0cec:	b2e4      	uxtb	r4, r4
 80a0cee:	695b      	ldr	r3, [r3, #20]
 80a0cf0:	4798      	blx	r3
 80a0cf2:	5528      	strb	r0, [r5, r4]
  Wire.beginTransmission(address);   // Initialize the Tx buffer
  Wire.write(subAddress);            // Put slave register address in Tx buffer
  Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
  uint8_t i = 0;
  Wire.requestFrom(address, count);  // Read bytes from slave register address 
  while (Wire.available()) {
 80a0cf4:	4634      	mov	r4, r6
 80a0cf6:	e7ef      	b.n	80a0cd8 <_ZN7MPU92509readBytesEhhhPh+0x38>
 80a0cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0cfa <_ZN7MPU925013readAccelDataEPs>:
  }
}


void MPU9250::readAccelData(int16_t * destination)
{
 80a0cfa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a0cfc:	460c      	mov	r4, r1
  uint8_t rawData[6];  // x/y/z accel register data stored here
  readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
 80a0cfe:	ab02      	add	r3, sp, #8
 80a0d00:	9300      	str	r3, [sp, #0]
 80a0d02:	223b      	movs	r2, #59	; 0x3b
 80a0d04:	2306      	movs	r3, #6
 80a0d06:	2168      	movs	r1, #104	; 0x68
 80a0d08:	f7ff ffca 	bl	80a0ca0 <_ZN7MPU92509readBytesEhhhPh>
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
 80a0d0c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80a0d10:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80a0d14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0d18:	8023      	strh	r3, [r4, #0]
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;  
 80a0d1a:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80a0d1e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80a0d22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0d26:	8063      	strh	r3, [r4, #2]
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ; 
 80a0d28:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80a0d2c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80a0d30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0d34:	80a3      	strh	r3, [r4, #4]
}
 80a0d36:	b004      	add	sp, #16
 80a0d38:	bd10      	pop	{r4, pc}

080a0d3a <_ZN7MPU925012readGyroDataEPs>:


void MPU9250::readGyroData(int16_t * destination)
{
 80a0d3a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a0d3c:	460c      	mov	r4, r1
  uint8_t rawData[6];  // x/y/z gyro register data stored here
  readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 80a0d3e:	ab02      	add	r3, sp, #8
 80a0d40:	9300      	str	r3, [sp, #0]
 80a0d42:	2243      	movs	r2, #67	; 0x43
 80a0d44:	2306      	movs	r3, #6
 80a0d46:	2168      	movs	r1, #104	; 0x68
 80a0d48:	f7ff ffaa 	bl	80a0ca0 <_ZN7MPU92509readBytesEhhhPh>
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
 80a0d4c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80a0d50:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80a0d54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0d58:	8023      	strh	r3, [r4, #0]
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;  
 80a0d5a:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80a0d5e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80a0d62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0d66:	8063      	strh	r3, [r4, #2]
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ; 
 80a0d68:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80a0d6c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80a0d70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0d74:	80a3      	strh	r3, [r4, #4]
}
 80a0d76:	b004      	add	sp, #16
 80a0d78:	bd10      	pop	{r4, pc}

080a0d7a <_ZN7MPU925011readMagDataEPs>:

void MPU9250::readMagData(int16_t * destination)
{
 80a0d7a:	b530      	push	{r4, r5, lr}
  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of
  // data acquisition
  uint8_t rawData[7];
  // Wait for magnetometer data ready bit to be set
  if(readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01)
 80a0d7c:	2202      	movs	r2, #2
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;  
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ; 
}

void MPU9250::readMagData(int16_t * destination)
{
 80a0d7e:	b085      	sub	sp, #20
 80a0d80:	460c      	mov	r4, r1
  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of
  // data acquisition
  uint8_t rawData[7];
  // Wait for magnetometer data ready bit to be set
  if(readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01)
 80a0d82:	210c      	movs	r1, #12
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;  
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ; 
}

void MPU9250::readMagData(int16_t * destination)
{
 80a0d84:	4605      	mov	r5, r0
  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of
  // data acquisition
  uint8_t rawData[7];
  // Wait for magnetometer data ready bit to be set
  if(readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01)
 80a0d86:	f7ff ff0c 	bl	80a0ba2 <_ZN7MPU92508readByteEhh>
 80a0d8a:	07c2      	lsls	r2, r0, #31
 80a0d8c:	d520      	bpl.n	80a0dd0 <_ZN7MPU925011readMagDataEPs+0x56>
  {
    // Read the six raw data and ST2 registers sequentially into data array
    readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);
 80a0d8e:	ab02      	add	r3, sp, #8
 80a0d90:	9300      	str	r3, [sp, #0]
 80a0d92:	2203      	movs	r2, #3
 80a0d94:	2307      	movs	r3, #7
 80a0d96:	210c      	movs	r1, #12
 80a0d98:	4628      	mov	r0, r5
 80a0d9a:	f7ff ff81 	bl	80a0ca0 <_ZN7MPU92509readBytesEhhhPh>
    uint8_t c = rawData[6]; // End data read by reading ST2 register
    // Check if magnetic sensor overflow set, if not then report data
    if(!(c & 0x08))
 80a0d9e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80a0da2:	071b      	lsls	r3, r3, #28
 80a0da4:	d414      	bmi.n	80a0dd0 <_ZN7MPU925011readMagDataEPs+0x56>
    {
      // Turn the MSB and LSB into a signed 16-bit value
      destination[0] = ((int16_t)rawData[1] << 8) | rawData[0];
 80a0da6:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80a0daa:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80a0dae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0db2:	8023      	strh	r3, [r4, #0]
      // Data stored as little Endian 
      destination[1] = ((int16_t)rawData[3] << 8) | rawData[2];
 80a0db4:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80a0db8:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80a0dbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0dc0:	8063      	strh	r3, [r4, #2]
      destination[2] = ((int16_t)rawData[5] << 8) | rawData[4];
 80a0dc2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80a0dc6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80a0dca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0dce:	80a3      	strh	r3, [r4, #4]
    }
  }
}
 80a0dd0:	b005      	add	sp, #20
 80a0dd2:	bd30      	pop	{r4, r5, pc}

080a0dd4 <_ZN7MPU925010initAK8963EPf>:
  sum += deltat; // sum for averaging filter update rate
  sumCount++;
}

void MPU9250::initAK8963(float * destination)
{
 80a0dd4:	b530      	push	{r4, r5, lr}
 80a0dd6:	4604      	mov	r4, r0
 80a0dd8:	b085      	sub	sp, #20
 80a0dda:	460d      	mov	r5, r1
  // First extract the factory calibration for each magnetometer axis
  uint8_t rawData[3];  // x/y/z gyro calibration data stored here
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer  
 80a0ddc:	2300      	movs	r3, #0
 80a0dde:	220a      	movs	r2, #10
 80a0de0:	210c      	movs	r1, #12
 80a0de2:	f7ff fec3 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  delay(10);
 80a0de6:	200a      	movs	r0, #10
 80a0de8:	f001 f90e 	bl	80a2008 <delay>
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 80a0dec:	230f      	movs	r3, #15
 80a0dee:	220a      	movs	r2, #10
 80a0df0:	210c      	movs	r1, #12
 80a0df2:	4620      	mov	r0, r4
 80a0df4:	f7ff feba 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  delay(10);
 80a0df8:	200a      	movs	r0, #10
 80a0dfa:	f001 f905 	bl	80a2008 <delay>
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 80a0dfe:	ab03      	add	r3, sp, #12
 80a0e00:	2210      	movs	r2, #16
 80a0e02:	9300      	str	r3, [sp, #0]
 80a0e04:	210c      	movs	r1, #12
 80a0e06:	2303      	movs	r3, #3
 80a0e08:	4620      	mov	r0, r4
 80a0e0a:	f7ff ff49 	bl	80a0ca0 <_ZN7MPU92509readBytesEhhhPh>
  destination[0] =  (float)(rawData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 80a0e0e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80a0e12:	3880      	subs	r0, #128	; 0x80
 80a0e14:	f004 fc18 	bl	80a5648 <__aeabi_i2f>
 80a0e18:	f003 ffc0 	bl	80a4d9c <__aeabi_f2d>
 80a0e1c:	2200      	movs	r2, #0
 80a0e1e:	4b23      	ldr	r3, [pc, #140]	; (80a0eac <_ZN7MPU925010initAK8963EPf+0xd8>)
 80a0e20:	f004 f810 	bl	80a4e44 <__aeabi_dmul>
 80a0e24:	2200      	movs	r2, #0
 80a0e26:	4b22      	ldr	r3, [pc, #136]	; (80a0eb0 <_ZN7MPU925010initAK8963EPf+0xdc>)
 80a0e28:	f003 fe5a 	bl	80a4ae0 <__adddf3>
 80a0e2c:	f004 fb02 	bl	80a5434 <__aeabi_d2f>
 80a0e30:	6028      	str	r0, [r5, #0]
  destination[1] =  (float)(rawData[1] - 128)/256. + 1.;  
 80a0e32:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80a0e36:	3880      	subs	r0, #128	; 0x80
 80a0e38:	f004 fc06 	bl	80a5648 <__aeabi_i2f>
 80a0e3c:	f003 ffae 	bl	80a4d9c <__aeabi_f2d>
 80a0e40:	2200      	movs	r2, #0
 80a0e42:	4b1a      	ldr	r3, [pc, #104]	; (80a0eac <_ZN7MPU925010initAK8963EPf+0xd8>)
 80a0e44:	f003 fffe 	bl	80a4e44 <__aeabi_dmul>
 80a0e48:	2200      	movs	r2, #0
 80a0e4a:	4b19      	ldr	r3, [pc, #100]	; (80a0eb0 <_ZN7MPU925010initAK8963EPf+0xdc>)
 80a0e4c:	f003 fe48 	bl	80a4ae0 <__adddf3>
 80a0e50:	f004 faf0 	bl	80a5434 <__aeabi_d2f>
 80a0e54:	6068      	str	r0, [r5, #4]
  destination[2] =  (float)(rawData[2] - 128)/256. + 1.; 
 80a0e56:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80a0e5a:	3880      	subs	r0, #128	; 0x80
 80a0e5c:	f004 fbf4 	bl	80a5648 <__aeabi_i2f>
 80a0e60:	f003 ff9c 	bl	80a4d9c <__aeabi_f2d>
 80a0e64:	2200      	movs	r2, #0
 80a0e66:	4b11      	ldr	r3, [pc, #68]	; (80a0eac <_ZN7MPU925010initAK8963EPf+0xd8>)
 80a0e68:	f003 ffec 	bl	80a4e44 <__aeabi_dmul>
 80a0e6c:	2200      	movs	r2, #0
 80a0e6e:	4b10      	ldr	r3, [pc, #64]	; (80a0eb0 <_ZN7MPU925010initAK8963EPf+0xdc>)
 80a0e70:	f003 fe36 	bl	80a4ae0 <__adddf3>
 80a0e74:	f004 fade 	bl	80a5434 <__aeabi_d2f>
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer  
 80a0e78:	2300      	movs	r3, #0
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
  delay(10);
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
  destination[0] =  (float)(rawData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
  destination[1] =  (float)(rawData[1] - 128)/256. + 1.;  
  destination[2] =  (float)(rawData[2] - 128)/256. + 1.; 
 80a0e7a:	60a8      	str	r0, [r5, #8]
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer  
 80a0e7c:	220a      	movs	r2, #10
 80a0e7e:	210c      	movs	r1, #12
 80a0e80:	4620      	mov	r0, r4
 80a0e82:	f7ff fe73 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  delay(10);
 80a0e86:	200a      	movs	r0, #10
 80a0e88:	f001 f8be 	bl	80a2008 <delay>
  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeByte(AK8963_ADDRESS, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 80a0e8c:	78a2      	ldrb	r2, [r4, #2]
 80a0e8e:	78e3      	ldrb	r3, [r4, #3]
 80a0e90:	210c      	movs	r1, #12
 80a0e92:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80a0e96:	b2db      	uxtb	r3, r3
 80a0e98:	220a      	movs	r2, #10
 80a0e9a:	4620      	mov	r0, r4
 80a0e9c:	f7ff fe66 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  delay(10);
 80a0ea0:	200a      	movs	r0, #10
 80a0ea2:	f001 f8b1 	bl	80a2008 <delay>
}
 80a0ea6:	b005      	add	sp, #20
 80a0ea8:	bd30      	pop	{r4, r5, pc}
 80a0eaa:	bf00      	nop
 80a0eac:	3f700000 	.word	0x3f700000
 80a0eb0:	3ff00000 	.word	0x3ff00000

080a0eb4 <_ZN7MPU925016calibrateMPU9250EPfS0_>:

// Function which accumulates gyro and accelerometer data after device
// initialization. It calculates the average of the at-rest readings and then
// loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250::calibrateMPU9250(float * gyroBias, float * accelBias)
{  
 80a0eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0eb8:	4604      	mov	r4, r0
 80a0eba:	b08f      	sub	sp, #60	; 0x3c
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
  
  // reset device
  // Write a one to bit 7 reset bit; toggle reset device
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80);
 80a0ebc:	2380      	movs	r3, #128	; 0x80

// Function which accumulates gyro and accelerometer data after device
// initialization. It calculates the average of the at-rest readings and then
// loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250::calibrateMPU9250(float * gyroBias, float * accelBias)
{  
 80a0ebe:	9104      	str	r1, [sp, #16]
 80a0ec0:	9205      	str	r2, [sp, #20]
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
  
  // reset device
  // Write a one to bit 7 reset bit; toggle reset device
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80);
 80a0ec2:	2168      	movs	r1, #104	; 0x68
 80a0ec4:	226b      	movs	r2, #107	; 0x6b
 80a0ec6:	f7ff fe51 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  delay(100);
 80a0eca:	2064      	movs	r0, #100	; 0x64
 80a0ecc:	f001 f89c 	bl	80a2008 <delay>
   
 // get stable time source; Auto select clock source to be PLL gyroscope
 // reference if ready else use the internal oscillator, bits 2:0 = 001
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  
 80a0ed0:	2301      	movs	r3, #1
 80a0ed2:	226b      	movs	r2, #107	; 0x6b
 80a0ed4:	2168      	movs	r1, #104	; 0x68
 80a0ed6:	4620      	mov	r0, r4
 80a0ed8:	f7ff fe48 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 80a0edc:	2300      	movs	r3, #0
 80a0ede:	226c      	movs	r2, #108	; 0x6c
 80a0ee0:	2168      	movs	r1, #104	; 0x68
 80a0ee2:	4620      	mov	r0, r4
 80a0ee4:	f7ff fe42 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  delay(200);                                    
 80a0ee8:	20c8      	movs	r0, #200	; 0xc8
 80a0eea:	f001 f88d 	bl	80a2008 <delay>

  // Configure device for bias calculation
  writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 80a0eee:	2300      	movs	r3, #0
 80a0ef0:	2238      	movs	r2, #56	; 0x38
 80a0ef2:	2168      	movs	r1, #104	; 0x68
 80a0ef4:	4620      	mov	r0, r4
 80a0ef6:	f7ff fe39 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 80a0efa:	2300      	movs	r3, #0
 80a0efc:	2223      	movs	r2, #35	; 0x23
 80a0efe:	2168      	movs	r1, #104	; 0x68
 80a0f00:	4620      	mov	r0, r4
 80a0f02:	f7ff fe33 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 80a0f06:	2300      	movs	r3, #0
 80a0f08:	226b      	movs	r2, #107	; 0x6b
 80a0f0a:	2168      	movs	r1, #104	; 0x68
 80a0f0c:	4620      	mov	r0, r4
 80a0f0e:	f7ff fe2d 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 80a0f12:	2300      	movs	r3, #0
 80a0f14:	2224      	movs	r2, #36	; 0x24
 80a0f16:	2168      	movs	r1, #104	; 0x68
 80a0f18:	4620      	mov	r0, r4
 80a0f1a:	f7ff fe27 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 80a0f1e:	2300      	movs	r3, #0
 80a0f20:	226a      	movs	r2, #106	; 0x6a
 80a0f22:	2168      	movs	r1, #104	; 0x68
 80a0f24:	4620      	mov	r0, r4
 80a0f26:	f7ff fe21 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 80a0f2a:	230c      	movs	r3, #12
 80a0f2c:	226a      	movs	r2, #106	; 0x6a
 80a0f2e:	2168      	movs	r1, #104	; 0x68
 80a0f30:	4620      	mov	r0, r4
 80a0f32:	f7ff fe1b 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  delay(15);
 80a0f36:	200f      	movs	r0, #15
 80a0f38:	f001 f866 	bl	80a2008 <delay>
  
// Configure MPU6050 gyro and accelerometer for bias calculation
  writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 80a0f3c:	2301      	movs	r3, #1
 80a0f3e:	221a      	movs	r2, #26
 80a0f40:	2168      	movs	r1, #104	; 0x68
 80a0f42:	4620      	mov	r0, r4
 80a0f44:	f7ff fe12 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 80a0f48:	2300      	movs	r3, #0
 80a0f4a:	2219      	movs	r2, #25
 80a0f4c:	2168      	movs	r1, #104	; 0x68
 80a0f4e:	4620      	mov	r0, r4
 80a0f50:	f7ff fe0c 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 80a0f54:	2300      	movs	r3, #0
 80a0f56:	221b      	movs	r2, #27
 80a0f58:	2168      	movs	r1, #104	; 0x68
 80a0f5a:	4620      	mov	r0, r4
 80a0f5c:	f7ff fe06 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 80a0f60:	2300      	movs	r3, #0
 80a0f62:	221c      	movs	r2, #28
 80a0f64:	2168      	movs	r1, #104	; 0x68
 80a0f66:	4620      	mov	r0, r4
 80a0f68:	f7ff fe00 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
 
  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
  uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
  writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO  
 80a0f6c:	2340      	movs	r3, #64	; 0x40
 80a0f6e:	226a      	movs	r2, #106	; 0x6a
 80a0f70:	2168      	movs	r1, #104	; 0x68
 80a0f72:	4620      	mov	r0, r4
 80a0f74:	f7ff fdfa 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 80a0f78:	2378      	movs	r3, #120	; 0x78
 80a0f7a:	2223      	movs	r2, #35	; 0x23
 80a0f7c:	2168      	movs	r1, #104	; 0x68
 80a0f7e:	4620      	mov	r0, r4
 80a0f80:	f7ff fdf4 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 80a0f84:	2028      	movs	r0, #40	; 0x28
 80a0f86:	f001 f83f 	bl	80a2008 <delay>

// At end of sample accumulation, turn off FIFO sensor read
  writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
  readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 80a0f8a:	f10d 0b20 	add.w	fp, sp, #32
  writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO  
  writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
  delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes

// At end of sample accumulation, turn off FIFO sensor read
  writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 80a0f8e:	2300      	movs	r3, #0
 80a0f90:	2223      	movs	r2, #35	; 0x23
 80a0f92:	2168      	movs	r1, #104	; 0x68
 80a0f94:	4620      	mov	r0, r4
 80a0f96:	f7ff fde9 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 80a0f9a:	2302      	movs	r3, #2
 80a0f9c:	f8cd b000 	str.w	fp, [sp]
 80a0fa0:	2272      	movs	r2, #114	; 0x72
 80a0fa2:	2168      	movs	r1, #104	; 0x68
 80a0fa4:	4620      	mov	r0, r4
 80a0fa6:	f7ff fe7b 	bl	80a0ca0 <_ZN7MPU92509readBytesEhhhPh>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 80a0faa:	f89d 6020 	ldrb.w	r6, [sp, #32]
 80a0fae:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80a0fb2:	2700      	movs	r7, #0
 80a0fb4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80a0fb8:	260c      	movs	r6, #12
 80a0fba:	fbb3 f6f6 	udiv	r6, r3, r6
// loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250::calibrateMPU9250(float * gyroBias, float * accelBias)
{  
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 80a0fbe:	463d      	mov	r5, r7
 80a0fc0:	46b8      	mov	r8, r7
 80a0fc2:	46b9      	mov	r9, r7
 80a0fc4:	46ba      	mov	sl, r7
 80a0fc6:	9702      	str	r7, [sp, #8]
 80a0fc8:	9703      	str	r7, [sp, #12]
  writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
  readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
  
  for (ii = 0; ii < packet_count; ii++)
 80a0fca:	b2bb      	uxth	r3, r7
 80a0fcc:	429e      	cmp	r6, r3
 80a0fce:	d93d      	bls.n	80a104c <_ZN7MPU925016calibrateMPU9250EPfS0_+0x198>
  {
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
    readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 80a0fd0:	230c      	movs	r3, #12
 80a0fd2:	2274      	movs	r2, #116	; 0x74
 80a0fd4:	f8cd b000 	str.w	fp, [sp]
 80a0fd8:	2168      	movs	r1, #104	; 0x68
 80a0fda:	4620      	mov	r0, r4
 80a0fdc:	f7ff fe60 	bl	80a0ca0 <_ZN7MPU92509readBytesEhhhPh>
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  );
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  );
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  );
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]);
    
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 80a0fe0:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80a0fe4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80a0fe8:	3701      	adds	r7, #1
 80a0fea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0fee:	b21b      	sxth	r3, r3
    accel_bias[1] += (int32_t) accel_temp[1];
 80a0ff0:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  );
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  );
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  );
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]);
    
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 80a0ff4:	4499      	add	r9, r3
    accel_bias[1] += (int32_t) accel_temp[1];
 80a0ff6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80a0ffa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0ffe:	b21b      	sxth	r3, r3
    accel_bias[2] += (int32_t) accel_temp[2];
 80a1000:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  );
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  );
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]);
    
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
    accel_bias[1] += (int32_t) accel_temp[1];
 80a1004:	4498      	add	r8, r3
    accel_bias[2] += (int32_t) accel_temp[2];
 80a1006:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80a100a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a100e:	b21b      	sxth	r3, r3
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 80a1010:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  );
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]);
    
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
    accel_bias[1] += (int32_t) accel_temp[1];
    accel_bias[2] += (int32_t) accel_temp[2];
 80a1014:	441d      	add	r5, r3
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 80a1016:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80a101a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a101e:	b21b      	sxth	r3, r3
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 80a1020:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]);
    
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
    accel_bias[1] += (int32_t) accel_temp[1];
    accel_bias[2] += (int32_t) accel_temp[2];
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 80a1024:	449a      	add	sl, r3
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 80a1026:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 80a102a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a102e:	9a03      	ldr	r2, [sp, #12]
 80a1030:	b21b      	sxth	r3, r3
 80a1032:	441a      	add	r2, r3
 80a1034:	9203      	str	r2, [sp, #12]
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 80a1036:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80a103a:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 80a103e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1042:	9a02      	ldr	r2, [sp, #8]
 80a1044:	b21b      	sxth	r3, r3
 80a1046:	441a      	add	r2, r3
 80a1048:	9202      	str	r2, [sp, #8]
  writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
  readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
  
  for (ii = 0; ii < packet_count; ii++)
 80a104a:	e7be      	b.n	80a0fca <_ZN7MPU925016calibrateMPU9250EPfS0_+0x116>
    gyro_bias[2]  += (int32_t) gyro_temp[2];
  }
  accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
  accel_bias[1] /= (int32_t) packet_count;
  accel_bias[2] /= (int32_t) packet_count;
  gyro_bias[0]  /= (int32_t) packet_count;
 80a104c:	fb9a faf6 	sdiv	sl, sl, r6
  gyro_bias[1]  /= (int32_t) packet_count;
 80a1050:	9b03      	ldr	r3, [sp, #12]
    
  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
  else {accel_bias[2] += (int32_t) accelsensitivity;}
   
// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80a1052:	2204      	movs	r2, #4
  }
  accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
  accel_bias[1] /= (int32_t) packet_count;
  accel_bias[2] /= (int32_t) packet_count;
  gyro_bias[0]  /= (int32_t) packet_count;
  gyro_bias[1]  /= (int32_t) packet_count;
 80a1054:	fb93 f7f6 	sdiv	r7, r3, r6
  gyro_bias[2]  /= (int32_t) packet_count;
 80a1058:	9b02      	ldr	r3, [sp, #8]
    
  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
  else {accel_bias[2] += (int32_t) accelsensitivity;}
   
// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80a105a:	fb9a f1f2 	sdiv	r1, sl, r2
    gyro_bias[1]  += (int32_t) gyro_temp[1];
    gyro_bias[2]  += (int32_t) gyro_temp[2];
  }
  accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
  accel_bias[1] /= (int32_t) packet_count;
  accel_bias[2] /= (int32_t) packet_count;
 80a105e:	fb95 f5f6 	sdiv	r5, r5, r6
    accel_bias[2] += (int32_t) accel_temp[2];
    gyro_bias[0]  += (int32_t) gyro_temp[0];
    gyro_bias[1]  += (int32_t) gyro_temp[1];
    gyro_bias[2]  += (int32_t) gyro_temp[2];
  }
  accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 80a1062:	fb99 f9f6 	sdiv	r9, r9, r6
  accel_bias[1] /= (int32_t) packet_count;
 80a1066:	fb98 f8f6 	sdiv	r8, r8, r6
  accel_bias[2] /= (int32_t) packet_count;
  gyro_bias[0]  /= (int32_t) packet_count;
  gyro_bias[1]  /= (int32_t) packet_count;
  gyro_bias[2]  /= (int32_t) packet_count;
 80a106a:	fb93 f6f6 	sdiv	r6, r3, r6
    
  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
  else {accel_bias[2] += (int32_t) accelsensitivity;}
   
// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80a106e:	4249      	negs	r1, r1
 80a1070:	f3c1 2307 	ubfx	r3, r1, #8, #8
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80a1074:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 80a1078:	fb97 f1f2 	sdiv	r1, r7, r2
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 80a107c:	fb96 f2f2 	sdiv	r2, r6, r2
  else {accel_bias[2] += (int32_t) accelsensitivity;}
   
// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 80a1080:	4249      	negs	r1, r1
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 80a1082:	4252      	negs	r2, r2
  else {accel_bias[2] += (int32_t) accelsensitivity;}
   
// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 80a1084:	1208      	asrs	r0, r1, #8
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 80a1086:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 80a108a:	1211      	asrs	r1, r2, #8
  accel_bias[2] /= (int32_t) packet_count;
  gyro_bias[0]  /= (int32_t) packet_count;
  gyro_bias[1]  /= (int32_t) packet_count;
  gyro_bias[2]  /= (int32_t) packet_count;
    
  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80a108c:	2d00      	cmp	r5, #0
  else {accel_bias[2] += (int32_t) accelsensitivity;}
   
// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 80a108e:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 80a1092:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 80a1096:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
  
// Push gyro biases to hardware registers
  writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 80a109a:	f04f 0168 	mov.w	r1, #104	; 0x68
 80a109e:	f04f 0213 	mov.w	r2, #19
 80a10a2:	4620      	mov	r0, r4
  accel_bias[2] /= (int32_t) packet_count;
  gyro_bias[0]  /= (int32_t) packet_count;
  gyro_bias[1]  /= (int32_t) packet_count;
  gyro_bias[2]  /= (int32_t) packet_count;
    
  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80a10a4:	bfcc      	ite	gt
 80a10a6:	f5a5 4580 	subgt.w	r5, r5, #16384	; 0x4000
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 80a10aa:	f505 4580 	addle.w	r5, r5, #16384	; 0x4000
   
// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80a10ae:	f88d 3020 	strb.w	r3, [sp, #32]
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
  
// Push gyro biases to hardware registers
  writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 80a10b2:	f7ff fd5b 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 80a10b6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80a10ba:	2214      	movs	r2, #20
 80a10bc:	2168      	movs	r1, #104	; 0x68
 80a10be:	4620      	mov	r0, r4
 80a10c0:	f7ff fd54 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 80a10c4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80a10c8:	2215      	movs	r2, #21
 80a10ca:	2168      	movs	r1, #104	; 0x68
 80a10cc:	4620      	mov	r0, r4
 80a10ce:	f7ff fd4d 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 80a10d2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80a10d6:	2216      	movs	r2, #22
 80a10d8:	2168      	movs	r1, #104	; 0x68
 80a10da:	4620      	mov	r0, r4
 80a10dc:	f7ff fd46 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 80a10e0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80a10e4:	2217      	movs	r2, #23
 80a10e6:	2168      	movs	r1, #104	; 0x68
 80a10e8:	4620      	mov	r0, r4
 80a10ea:	f7ff fd3f 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 80a10ee:	2218      	movs	r2, #24
 80a10f0:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80a10f4:	2168      	movs	r1, #104	; 0x68
 80a10f6:	4620      	mov	r0, r4
 80a10f8:	f7ff fd38 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  
// Output scaled gyro biases for display in the main program
  gyroBias[0] = (float) gyro_bias[0]/(float) gyrosensitivity;  
 80a10fc:	4650      	mov	r0, sl
 80a10fe:	f004 faa3 	bl	80a5648 <__aeabi_i2f>
 80a1102:	495b      	ldr	r1, [pc, #364]	; (80a1270 <_ZN7MPU925016calibrateMPU9250EPfS0_+0x3bc>)
 80a1104:	f004 fba8 	bl	80a5858 <__aeabi_fdiv>
 80a1108:	9b04      	ldr	r3, [sp, #16]
 80a110a:	6018      	str	r0, [r3, #0]
  gyroBias[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 80a110c:	4638      	mov	r0, r7
 80a110e:	f004 fa9b 	bl	80a5648 <__aeabi_i2f>
 80a1112:	4957      	ldr	r1, [pc, #348]	; (80a1270 <_ZN7MPU925016calibrateMPU9250EPfS0_+0x3bc>)
 80a1114:	f004 fba0 	bl	80a5858 <__aeabi_fdiv>
 80a1118:	9b04      	ldr	r3, [sp, #16]
 80a111a:	6058      	str	r0, [r3, #4]
  gyroBias[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 80a111c:	4630      	mov	r0, r6
 80a111e:	f004 fa93 	bl	80a5648 <__aeabi_i2f>
 80a1122:	4953      	ldr	r1, [pc, #332]	; (80a1270 <_ZN7MPU925016calibrateMPU9250EPfS0_+0x3bc>)
 80a1124:	f004 fb98 	bl	80a5858 <__aeabi_fdiv>
 80a1128:	9b04      	ldr	r3, [sp, #16]
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
  readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 80a112a:	2277      	movs	r2, #119	; 0x77
  writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
  
// Output scaled gyro biases for display in the main program
  gyroBias[0] = (float) gyro_bias[0]/(float) gyrosensitivity;  
  gyroBias[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
  gyroBias[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 80a112c:	6098      	str	r0, [r3, #8]
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
  readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 80a112e:	2168      	movs	r1, #104	; 0x68
 80a1130:	2302      	movs	r3, #2
 80a1132:	4620      	mov	r0, r4
 80a1134:	f8cd b000 	str.w	fp, [sp]
 80a1138:	f7ff fdb2 	bl	80a0ca0 <_ZN7MPU92509readBytesEhhhPh>
 80a113c:	f8bd 7020 	ldrh.w	r7, [sp, #32]
  accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
  readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 80a1140:	2302      	movs	r3, #2
 80a1142:	ba7f      	rev16	r7, r7
 80a1144:	227a      	movs	r2, #122	; 0x7a
 80a1146:	2168      	movs	r1, #104	; 0x68
 80a1148:	4620      	mov	r0, r4
 80a114a:	b2bf      	uxth	r7, r7
 80a114c:	f8cd b000 	str.w	fp, [sp]
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
  readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
  accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 80a1150:	970b      	str	r7, [sp, #44]	; 0x2c
  readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 80a1152:	f7ff fda5 	bl	80a0ca0 <_ZN7MPU92509readBytesEhhhPh>
 80a1156:	f8bd 6020 	ldrh.w	r6, [sp, #32]
  accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
  readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 80a115a:	2302      	movs	r3, #2
 80a115c:	ba76      	rev16	r6, r6
 80a115e:	227d      	movs	r2, #125	; 0x7d
 80a1160:	2168      	movs	r1, #104	; 0x68
 80a1162:	b2b6      	uxth	r6, r6
 80a1164:	f8cd b000 	str.w	fp, [sp]
 80a1168:	4620      	mov	r0, r4

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
  readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
  accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
  readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
  accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 80a116a:	960c      	str	r6, [sp, #48]	; 0x30
  readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 80a116c:	f7ff fd98 	bl	80a0ca0 <_ZN7MPU92509readBytesEhhhPh>
 80a1170:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
  
  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 80a1174:	2300      	movs	r3, #0
 80a1176:	ba52      	rev16	r2, r2
 80a1178:	b292      	uxth	r2, r2
  readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
  accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
  readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
  accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
  readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
  accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 80a117a:	920d      	str	r2, [sp, #52]	; 0x34
  
  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 80a117c:	f88d 301c 	strb.w	r3, [sp, #28]
 80a1180:	f88d 301d 	strb.w	r3, [sp, #29]
 80a1184:	f88d 301e 	strb.w	r3, [sp, #30]
  
  for(ii = 0; ii < 3; ii++) {
    if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 80a1188:	2101      	movs	r1, #1
 80a118a:	a80b      	add	r0, sp, #44	; 0x2c
 80a118c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80a1190:	07c0      	lsls	r0, r0, #31
 80a1192:	bf44      	itt	mi
 80a1194:	a807      	addmi	r0, sp, #28
 80a1196:	5419      	strbmi	r1, [r3, r0]
 80a1198:	3301      	adds	r3, #1
  accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
  
  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
  
  for(ii = 0; ii < 3; ii++) {
 80a119a:	2b03      	cmp	r3, #3
 80a119c:	d1f5      	bne.n	80a118a <_ZN7MPU925016calibrateMPU9250EPfS0_+0x2d6>
    if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
  }
  
  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80a119e:	2308      	movs	r3, #8
 80a11a0:	fb99 f1f3 	sdiv	r1, r9, r3
 80a11a4:	1a7f      	subs	r7, r7, r1
  accel_bias_reg[1] -= (accel_bias[1]/8);
 80a11a6:	fb98 f1f3 	sdiv	r1, r8, r3
  accel_bias_reg[2] -= (accel_bias[2]/8);
 80a11aa:	fb95 f3f3 	sdiv	r3, r5, r3
    if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
  }
  
  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
  accel_bias_reg[1] -= (accel_bias[1]/8);
 80a11ae:	1a76      	subs	r6, r6, r1
  accel_bias_reg[2] -= (accel_bias[2]/8);
  
  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
  data[1] = (accel_bias_reg[0])      & 0xFF;
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80a11b0:	f89d 101c 	ldrb.w	r1, [sp, #28]
  }
  
  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
  accel_bias_reg[1] -= (accel_bias[1]/8);
  accel_bias_reg[2] -= (accel_bias[2]/8);
 80a11b4:	1ad2      	subs	r2, r2, r3
  
  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80a11b6:	f3c7 2307 	ubfx	r3, r7, #8, #8
  data[1] = (accel_bias_reg[0])      & 0xFF;
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80a11ba:	430f      	orrs	r7, r1
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80a11bc:	1231      	asrs	r1, r6, #8
 80a11be:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
  data[3] = (accel_bias_reg[1])      & 0xFF;
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80a11c2:	f89d 101d 	ldrb.w	r1, [sp, #29]
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 
// Apparently this is not working for the acceleration biases in the MPU-9250
// Are we handling the temperature correction bit properly?
// Push accelerometer biases to hardware registers
  writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
 80a11c6:	4620      	mov	r0, r4
  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
  data[1] = (accel_bias_reg[0])      & 0xFF;
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
  data[3] = (accel_bias_reg[1])      & 0xFF;
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80a11c8:	430e      	orrs	r6, r1
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80a11ca:	1211      	asrs	r1, r2, #8
 80a11cc:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
  data[5] = (accel_bias_reg[2])      & 0xFF;
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80a11d0:	f89d 101e 	ldrb.w	r1, [sp, #30]
  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
  accel_bias_reg[1] -= (accel_bias[1]/8);
  accel_bias_reg[2] -= (accel_bias[2]/8);
  
  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80a11d4:	f88d 3020 	strb.w	r3, [sp, #32]
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
  data[3] = (accel_bias_reg[1])      & 0xFF;
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
  data[5] = (accel_bias_reg[2])      & 0xFF;
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80a11d8:	430a      	orrs	r2, r1
 80a11da:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 
// Apparently this is not working for the acceleration biases in the MPU-9250
// Are we handling the temperature correction bit properly?
// Push accelerometer biases to hardware registers
  writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
 80a11de:	2168      	movs	r1, #104	; 0x68
 80a11e0:	2277      	movs	r2, #119	; 0x77
  accel_bias_reg[1] -= (accel_bias[1]/8);
  accel_bias_reg[2] -= (accel_bias[2]/8);
  
  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
  data[1] = (accel_bias_reg[0])      & 0xFF;
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80a11e2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
  data[3] = (accel_bias_reg[1])      & 0xFF;
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80a11e6:	f88d 6023 	strb.w	r6, [sp, #35]	; 0x23
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 
// Apparently this is not working for the acceleration biases in the MPU-9250
// Are we handling the temperature correction bit properly?
// Push accelerometer biases to hardware registers
  writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
 80a11ea:	f7ff fcbf 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
 80a11ee:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80a11f2:	4620      	mov	r0, r4
 80a11f4:	2278      	movs	r2, #120	; 0x78
 80a11f6:	2168      	movs	r1, #104	; 0x68
 80a11f8:	f7ff fcb8 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
 80a11fc:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80a1200:	4620      	mov	r0, r4
 80a1202:	227a      	movs	r2, #122	; 0x7a
 80a1204:	2168      	movs	r1, #104	; 0x68
 80a1206:	f7ff fcb1 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
 80a120a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80a120e:	4620      	mov	r0, r4
 80a1210:	227b      	movs	r2, #123	; 0x7b
 80a1212:	2168      	movs	r1, #104	; 0x68
 80a1214:	f7ff fcaa 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
 80a1218:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80a121c:	4620      	mov	r0, r4
 80a121e:	227d      	movs	r2, #125	; 0x7d
 80a1220:	2168      	movs	r1, #104	; 0x68
 80a1222:	f7ff fca3 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
 80a1226:	227e      	movs	r2, #126	; 0x7e
 80a1228:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80a122c:	2168      	movs	r1, #104	; 0x68
 80a122e:	4620      	mov	r0, r4
 80a1230:	f7ff fc9c 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>

// Output scaled accelerometer biases for display in the main program
   accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity; 
 80a1234:	4648      	mov	r0, r9
 80a1236:	f004 fa07 	bl	80a5648 <__aeabi_i2f>
 80a123a:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 80a123e:	f004 fa57 	bl	80a56f0 <__aeabi_fmul>
 80a1242:	9b05      	ldr	r3, [sp, #20]
 80a1244:	6018      	str	r0, [r3, #0]
   accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
 80a1246:	4640      	mov	r0, r8
 80a1248:	f004 f9fe 	bl	80a5648 <__aeabi_i2f>
 80a124c:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 80a1250:	f004 fa4e 	bl	80a56f0 <__aeabi_fmul>
 80a1254:	9b05      	ldr	r3, [sp, #20]
 80a1256:	6058      	str	r0, [r3, #4]
   accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
 80a1258:	4628      	mov	r0, r5
 80a125a:	f004 f9f5 	bl	80a5648 <__aeabi_i2f>
 80a125e:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 80a1262:	f004 fa45 	bl	80a56f0 <__aeabi_fmul>
 80a1266:	9b05      	ldr	r3, [sp, #20]
 80a1268:	6098      	str	r0, [r3, #8]
}
 80a126a:	b00f      	add	sp, #60	; 0x3c
 80a126c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1270:	43030000 	.word	0x43030000
 80a1274:	00000000 	.word	0x00000000

080a1278 <_ZN7MPU925015MPU9250SelfTestEPf>:

   
// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250::MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
 80a1278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a127c:	4604      	mov	r4, r0
 80a127e:	b095      	sub	sp, #84	; 0x54
  uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
 80a1280:	2300      	movs	r3, #0
}

   
// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250::MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
 80a1282:	9102      	str	r1, [sp, #8]
  uint8_t selfTest[6];
  int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
  float factoryTrim[6];
  uint8_t FS = 0;
   
  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);    // Set gyro sample rate to 1 kHz
 80a1284:	2219      	movs	r2, #25
 80a1286:	2168      	movs	r1, #104	; 0x68

   
// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250::MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
  uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
 80a1288:	ae04      	add	r6, sp, #16
 80a128a:	9304      	str	r3, [sp, #16]
 80a128c:	80b3      	strh	r3, [r6, #4]
  uint8_t selfTest[6];
  int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
  float factoryTrim[6];
  uint8_t FS = 0;
   
  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);    // Set gyro sample rate to 1 kHz
 80a128e:	f7ff fc6d 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, CONFIG, 0x02);        // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 80a1292:	2302      	movs	r3, #2
 80a1294:	221a      	movs	r2, #26
 80a1296:	2168      	movs	r1, #104	; 0x68
 80a1298:	4620      	mov	r0, r4
 80a129a:	f7ff fc67 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 1<<FS);  // Set full scale range for the gyro to 250 dps
 80a129e:	2301      	movs	r3, #1
 80a12a0:	221b      	movs	r2, #27
 80a12a2:	2168      	movs	r1, #104	; 0x68
 80a12a4:	4620      	mov	r0, r4
 80a12a6:	f7ff fc61 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80a12aa:	2302      	movs	r3, #2
 80a12ac:	221d      	movs	r2, #29
 80a12ae:	2168      	movs	r1, #104	; 0x68
 80a12b0:	4620      	mov	r0, r4
 80a12b2:	f7ff fc5b 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 1<<FS); // Set full scale range for the accelerometer to 2 g
 80a12b6:	2301      	movs	r3, #1
 80a12b8:	221c      	movs	r2, #28
 80a12ba:	2168      	movs	r1, #104	; 0x68
 80a12bc:	4620      	mov	r0, r4
 80a12be:	f7ff fc55 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
 80a12c2:	25c8      	movs	r5, #200	; 0xc8

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
  
    readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
 80a12c4:	2306      	movs	r3, #6
 80a12c6:	223b      	movs	r2, #59	; 0x3b
 80a12c8:	2168      	movs	r1, #104	; 0x68
 80a12ca:	4620      	mov	r0, r4
 80a12cc:	9600      	str	r6, [sp, #0]
 80a12ce:	f7ff fce7 	bl	80a0ca0 <_ZN7MPU92509readBytesEhhhPh>
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80a12d2:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80a12d6:	f89d 2010 	ldrb.w	r2, [sp, #16]
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
 80a12da:	9600      	str	r6, [sp, #0]
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 1<<FS); // Set full scale range for the accelerometer to 2 g

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
  
    readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80a12dc:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a12e0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
 80a12e4:	2168      	movs	r1, #104	; 0x68
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 1<<FS); // Set full scale range for the accelerometer to 2 g

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
  
    readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80a12e6:	4413      	add	r3, r2
 80a12e8:	f8ad 3020 	strh.w	r3, [sp, #32]
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
 80a12ec:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a12f0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
 80a12f4:	4620      	mov	r0, r4

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
  
    readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
 80a12f6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a12fa:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80a12fe:	4413      	add	r3, r2
 80a1300:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
 80a1304:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80a1308:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80a130c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a1310:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80a1314:	4413      	add	r3, r2
 80a1316:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  
    readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
 80a131a:	2243      	movs	r2, #67	; 0x43
 80a131c:	2306      	movs	r3, #6
 80a131e:	f7ff fcbf 	bl	80a0ca0 <_ZN7MPU92509readBytesEhhhPh>
    gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80a1322:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80a1326:	f89d 2010 	ldrb.w	r2, [sp, #16]
  writeByte(MPU9250_ADDRESS, CONFIG, 0x02);        // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 1<<FS);  // Set full scale range for the gyro to 250 dps
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 1<<FS); // Set full scale range for the accelerometer to 2 g

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
 80a132a:	3d01      	subs	r5, #1
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
    gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80a132c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a1330:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80a1334:	4413      	add	r3, r2
 80a1336:	f8ad 3018 	strh.w	r3, [sp, #24]
    gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
 80a133a:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a133e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80a1342:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a1346:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80a134a:	4413      	add	r3, r2
 80a134c:	f8ad 301a 	strh.w	r3, [sp, #26]
    gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
 80a1350:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80a1354:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80a1358:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a135c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a1360:	4413      	add	r3, r2
 80a1362:	f8ad 301c 	strh.w	r3, [sp, #28]
  writeByte(MPU9250_ADDRESS, CONFIG, 0x02);        // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 1<<FS);  // Set full scale range for the gyro to 250 dps
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 1<<FS); // Set full scale range for the accelerometer to 2 g

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
 80a1366:	d1ad      	bne.n	80a12c4 <_ZN7MPU925015MPU9250SelfTestEPf+0x4c>
 80a1368:	462b      	mov	r3, r5
    gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  }
  
  for (int ii =0; ii < 3; ii++) {  // Get average of 200 values and store as average current readings
    aAvg[ii] /= 200;
 80a136a:	f10d 0a20 	add.w	sl, sp, #32
 80a136e:	21c8      	movs	r1, #200	; 0xc8
 80a1370:	f93a 2013 	ldrsh.w	r2, [sl, r3, lsl #1]
    gAvg[ii] /= 200;
 80a1374:	a806      	add	r0, sp, #24
    gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  }
  
  for (int ii =0; ii < 3; ii++) {  // Get average of 200 values and store as average current readings
    aAvg[ii] /= 200;
 80a1376:	fb92 f2f1 	sdiv	r2, r2, r1
 80a137a:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
    gAvg[ii] /= 200;
 80a137e:	aa06      	add	r2, sp, #24
 80a1380:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80a1384:	fb92 f2f1 	sdiv	r2, r2, r1
 80a1388:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  }
  
  for (int ii =0; ii < 3; ii++) {  // Get average of 200 values and store as average current readings
 80a138c:	3301      	adds	r3, #1
 80a138e:	2b03      	cmp	r3, #3
 80a1390:	d1ee      	bne.n	80a1370 <_ZN7MPU925015MPU9250SelfTestEPf+0xf8>
    aAvg[ii] /= 200;
    gAvg[ii] /= 200;
  }
  
// Configure the accelerometer for self-test
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 80a1392:	23e0      	movs	r3, #224	; 0xe0
 80a1394:	221c      	movs	r2, #28
 80a1396:	2168      	movs	r1, #104	; 0x68
 80a1398:	4620      	mov	r0, r4
 80a139a:	f7ff fbe7 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80a139e:	23e0      	movs	r3, #224	; 0xe0
 80a13a0:	221b      	movs	r2, #27
 80a13a2:	2168      	movs	r1, #104	; 0x68
 80a13a4:	4620      	mov	r0, r4
 80a13a6:	f7ff fbe1 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  delay(25);  // Delay a while to let the device stabilize
 80a13aa:	2019      	movs	r0, #25
 80a13ac:	f000 fe2c 	bl	80a2008 <delay>
 80a13b0:	25c8      	movs	r5, #200	; 0xc8

  for( int ii = 0; ii < 200; ii++) {  // get average self-test values of gyro and acclerometer
  
    readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
 80a13b2:	2306      	movs	r3, #6
 80a13b4:	223b      	movs	r2, #59	; 0x3b
 80a13b6:	2168      	movs	r1, #104	; 0x68
 80a13b8:	4620      	mov	r0, r4
 80a13ba:	9600      	str	r6, [sp, #0]
 80a13bc:	f7ff fc70 	bl	80a0ca0 <_ZN7MPU92509readBytesEhhhPh>
    aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80a13c0:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80a13c4:	f89d 2010 	ldrb.w	r2, [sp, #16]
    aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 80a13c8:	9600      	str	r6, [sp, #0]
  delay(25);  // Delay a while to let the device stabilize

  for( int ii = 0; ii < 200; ii++) {  // get average self-test values of gyro and acclerometer
  
    readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
    aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80a13ca:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a13ce:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 80a13d2:	2168      	movs	r1, #104	; 0x68
  delay(25);  // Delay a while to let the device stabilize

  for( int ii = 0; ii < 200; ii++) {  // get average self-test values of gyro and acclerometer
  
    readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
    aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80a13d4:	4413      	add	r3, r2
 80a13d6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
 80a13da:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a13de:	f89d 3013 	ldrb.w	r3, [sp, #19]
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 80a13e2:	4620      	mov	r0, r4

  for( int ii = 0; ii < 200; ii++) {  // get average self-test values of gyro and acclerometer
  
    readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
    aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
 80a13e4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a13e8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80a13ec:	4413      	add	r3, r2
 80a13ee:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
 80a13f2:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80a13f6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80a13fa:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a13fe:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80a1402:	4413      	add	r3, r2
 80a1404:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  
    readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 80a1408:	2243      	movs	r2, #67	; 0x43
 80a140a:	2306      	movs	r3, #6
 80a140c:	f7ff fc48 	bl	80a0ca0 <_ZN7MPU92509readBytesEhhhPh>
    gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80a1410:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80a1414:	f89d 2010 	ldrb.w	r2, [sp, #16]
// Configure the accelerometer for self-test
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
  delay(25);  // Delay a while to let the device stabilize

  for( int ii = 0; ii < 200; ii++) {  // get average self-test values of gyro and acclerometer
 80a1418:	3d01      	subs	r5, #1
    aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
    gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80a141a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a141e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80a1422:	4413      	add	r3, r2
 80a1424:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
 80a1428:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a142c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80a1430:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a1434:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80a1438:	4413      	add	r3, r2
 80a143a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
 80a143e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80a1442:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80a1446:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80a144a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80a144e:	4413      	add	r3, r2
 80a1450:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
// Configure the accelerometer for self-test
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
  delay(25);  // Delay a while to let the device stabilize

  for( int ii = 0; ii < 200; ii++) {  // get average self-test values of gyro and acclerometer
 80a1454:	d1ad      	bne.n	80a13b2 <_ZN7MPU925015MPU9250SelfTestEPf+0x13a>
 80a1456:	462b      	mov	r3, r5
    gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  }
  
  for (int ii =0; ii < 3; ii++) {  // Get average of 200 values and store as average self-test readings
    aSTAvg[ii] /= 200;
 80a1458:	21c8      	movs	r1, #200	; 0xc8
 80a145a:	ad0a      	add	r5, sp, #40	; 0x28
    gSTAvg[ii] /= 200;
 80a145c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
    gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  }
  
  for (int ii =0; ii < 3; ii++) {  // Get average of 200 values and store as average self-test readings
    aSTAvg[ii] /= 200;
 80a1460:	f935 2013 	ldrsh.w	r2, [r5, r3, lsl #1]
 80a1464:	fb92 f2f1 	sdiv	r2, r2, r1
 80a1468:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
    gSTAvg[ii] /= 200;
 80a146c:	f93b 2013 	ldrsh.w	r2, [fp, r3, lsl #1]
 80a1470:	fb92 f2f1 	sdiv	r2, r2, r1
 80a1474:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
    gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  }
  
  for (int ii =0; ii < 3; ii++) {  // Get average of 200 values and store as average self-test readings
 80a1478:	3301      	adds	r3, #1
 80a147a:	2b03      	cmp	r3, #3
 80a147c:	d1f0      	bne.n	80a1460 <_ZN7MPU925015MPU9250SelfTestEPf+0x1e8>
    aSTAvg[ii] /= 200;
    gSTAvg[ii] /= 200;
  }   
  
  // Configure the gyro and accelerometer for normal operation
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);  
 80a147e:	4620      	mov	r0, r4
 80a1480:	2300      	movs	r3, #0
 80a1482:	221c      	movs	r2, #28
 80a1484:	2168      	movs	r1, #104	; 0x68
 80a1486:	f7ff fb71 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);  
 80a148a:	2300      	movs	r3, #0
 80a148c:	221b      	movs	r2, #27
 80a148e:	2168      	movs	r1, #104	; 0x68
 80a1490:	4620      	mov	r0, r4
 80a1492:	f7ff fb6b 	bl	80a0b6c <_ZN7MPU92509writeByteEhhh>
  delay(25);  // Delay a while to let the device stabilize
 80a1496:	2019      	movs	r0, #25
 80a1498:	f000 fdb6 	bl	80a2008 <delay>
   
  // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
  selfTest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
 80a149c:	220d      	movs	r2, #13
 80a149e:	2168      	movs	r1, #104	; 0x68
 80a14a0:	4620      	mov	r0, r4
 80a14a2:	f7ff fb7e 	bl	80a0ba2 <_ZN7MPU92508readByteEhh>
  selfTest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
 80a14a6:	220e      	movs	r2, #14
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);  
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);  
  delay(25);  // Delay a while to let the device stabilize
   
  // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
  selfTest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
 80a14a8:	9003      	str	r0, [sp, #12]
  selfTest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
 80a14aa:	2168      	movs	r1, #104	; 0x68
 80a14ac:	4620      	mov	r0, r4
 80a14ae:	f7ff fb78 	bl	80a0ba2 <_ZN7MPU92508readByteEhh>
  selfTest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
 80a14b2:	220f      	movs	r2, #15
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);  
  delay(25);  // Delay a while to let the device stabilize
   
  // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
  selfTest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
  selfTest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
 80a14b4:	4607      	mov	r7, r0
  selfTest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
 80a14b6:	2168      	movs	r1, #104	; 0x68
 80a14b8:	4620      	mov	r0, r4
 80a14ba:	f7ff fb72 	bl	80a0ba2 <_ZN7MPU92508readByteEhh>
  selfTest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
 80a14be:	2200      	movs	r2, #0
  delay(25);  // Delay a while to let the device stabilize
   
  // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
  selfTest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
  selfTest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
  selfTest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
 80a14c0:	4680      	mov	r8, r0
  selfTest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
 80a14c2:	2168      	movs	r1, #104	; 0x68
 80a14c4:	4620      	mov	r0, r4
 80a14c6:	f7ff fb6c 	bl	80a0ba2 <_ZN7MPU92508readByteEhh>
  selfTest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
 80a14ca:	2201      	movs	r2, #1
   
  // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
  selfTest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
  selfTest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
  selfTest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
  selfTest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
 80a14cc:	4681      	mov	r9, r0
  selfTest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
 80a14ce:	2168      	movs	r1, #104	; 0x68
 80a14d0:	4620      	mov	r0, r4
 80a14d2:	f7ff fb66 	bl	80a0ba2 <_ZN7MPU92508readByteEhh>
  selfTest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
 80a14d6:	2202      	movs	r2, #2
  // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
  selfTest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
  selfTest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
  selfTest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
  selfTest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
  selfTest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
 80a14d8:	4606      	mov	r6, r0
  selfTest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
 80a14da:	2168      	movs	r1, #104	; 0x68
 80a14dc:	4620      	mov	r0, r4
 80a14de:	f7ff fb60 	bl	80a0ba2 <_ZN7MPU92508readByteEhh>

  // Retrieve factory self-test value from self-test code reads
  factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 80a14e2:	9b03      	ldr	r3, [sp, #12]
  selfTest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
  selfTest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
  selfTest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
  selfTest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
  selfTest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
  selfTest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
 80a14e4:	4604      	mov	r4, r0

  // Retrieve factory self-test value from self-test code reads
  factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 80a14e6:	4618      	mov	r0, r3
 80a14e8:	f004 f8aa 	bl	80a5640 <__aeabi_ui2f>
 80a14ec:	f003 fc56 	bl	80a4d9c <__aeabi_f2d>
 80a14f0:	2200      	movs	r2, #0
 80a14f2:	4b6d      	ldr	r3, [pc, #436]	; (80a16a8 <_ZN7MPU925015MPU9250SelfTestEPf+0x430>)
 80a14f4:	f003 faf2 	bl	80a4adc <__aeabi_dsub>
 80a14f8:	4602      	mov	r2, r0
 80a14fa:	460b      	mov	r3, r1
 80a14fc:	a166      	add	r1, pc, #408	; (adr r1, 80a1698 <_ZN7MPU925015MPU9250SelfTestEPf+0x420>)
 80a14fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a1502:	f001 fd13 	bl	80a2f2c <pow>
 80a1506:	a366      	add	r3, pc, #408	; (adr r3, 80a16a0 <_ZN7MPU925015MPU9250SelfTestEPf+0x428>)
 80a1508:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a150c:	f003 fc9a 	bl	80a4e44 <__aeabi_dmul>
 80a1510:	f003 ff90 	bl	80a5434 <__aeabi_d2f>
 80a1514:	900e      	str	r0, [sp, #56]	; 0x38
  factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 80a1516:	4638      	mov	r0, r7
 80a1518:	f004 f892 	bl	80a5640 <__aeabi_ui2f>
 80a151c:	f003 fc3e 	bl	80a4d9c <__aeabi_f2d>
 80a1520:	2200      	movs	r2, #0
 80a1522:	4b61      	ldr	r3, [pc, #388]	; (80a16a8 <_ZN7MPU925015MPU9250SelfTestEPf+0x430>)
 80a1524:	f003 fada 	bl	80a4adc <__aeabi_dsub>
 80a1528:	4602      	mov	r2, r0
 80a152a:	460b      	mov	r3, r1
 80a152c:	a15a      	add	r1, pc, #360	; (adr r1, 80a1698 <_ZN7MPU925015MPU9250SelfTestEPf+0x420>)
 80a152e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a1532:	f001 fcfb 	bl	80a2f2c <pow>
 80a1536:	a35a      	add	r3, pc, #360	; (adr r3, 80a16a0 <_ZN7MPU925015MPU9250SelfTestEPf+0x428>)
 80a1538:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a153c:	f003 fc82 	bl	80a4e44 <__aeabi_dmul>
 80a1540:	f003 ff78 	bl	80a5434 <__aeabi_d2f>
 80a1544:	900f      	str	r0, [sp, #60]	; 0x3c
  factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 80a1546:	4640      	mov	r0, r8
 80a1548:	f004 f87a 	bl	80a5640 <__aeabi_ui2f>
 80a154c:	f003 fc26 	bl	80a4d9c <__aeabi_f2d>
 80a1550:	2200      	movs	r2, #0
 80a1552:	4b55      	ldr	r3, [pc, #340]	; (80a16a8 <_ZN7MPU925015MPU9250SelfTestEPf+0x430>)
 80a1554:	f003 fac2 	bl	80a4adc <__aeabi_dsub>
 80a1558:	4602      	mov	r2, r0
 80a155a:	460b      	mov	r3, r1
 80a155c:	a14e      	add	r1, pc, #312	; (adr r1, 80a1698 <_ZN7MPU925015MPU9250SelfTestEPf+0x420>)
 80a155e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a1562:	f001 fce3 	bl	80a2f2c <pow>
 80a1566:	a34e      	add	r3, pc, #312	; (adr r3, 80a16a0 <_ZN7MPU925015MPU9250SelfTestEPf+0x428>)
 80a1568:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a156c:	f003 fc6a 	bl	80a4e44 <__aeabi_dmul>
 80a1570:	f003 ff60 	bl	80a5434 <__aeabi_d2f>
 80a1574:	9010      	str	r0, [sp, #64]	; 0x40
  factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 80a1576:	4648      	mov	r0, r9
 80a1578:	f004 f862 	bl	80a5640 <__aeabi_ui2f>
 80a157c:	f003 fc0e 	bl	80a4d9c <__aeabi_f2d>
 80a1580:	2200      	movs	r2, #0
 80a1582:	4b49      	ldr	r3, [pc, #292]	; (80a16a8 <_ZN7MPU925015MPU9250SelfTestEPf+0x430>)
 80a1584:	f003 faaa 	bl	80a4adc <__aeabi_dsub>
 80a1588:	4602      	mov	r2, r0
 80a158a:	460b      	mov	r3, r1
 80a158c:	a142      	add	r1, pc, #264	; (adr r1, 80a1698 <_ZN7MPU925015MPU9250SelfTestEPf+0x420>)
 80a158e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a1592:	f001 fccb 	bl	80a2f2c <pow>
 80a1596:	a342      	add	r3, pc, #264	; (adr r3, 80a16a0 <_ZN7MPU925015MPU9250SelfTestEPf+0x428>)
 80a1598:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a159c:	f003 fc52 	bl	80a4e44 <__aeabi_dmul>
 80a15a0:	f003 ff48 	bl	80a5434 <__aeabi_d2f>
 80a15a4:	9011      	str	r0, [sp, #68]	; 0x44
  factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 80a15a6:	4630      	mov	r0, r6
 80a15a8:	f004 f84a 	bl	80a5640 <__aeabi_ui2f>
 80a15ac:	f003 fbf6 	bl	80a4d9c <__aeabi_f2d>
 80a15b0:	2200      	movs	r2, #0
 80a15b2:	4b3d      	ldr	r3, [pc, #244]	; (80a16a8 <_ZN7MPU925015MPU9250SelfTestEPf+0x430>)
 80a15b4:	f003 fa92 	bl	80a4adc <__aeabi_dsub>
 80a15b8:	4602      	mov	r2, r0
 80a15ba:	460b      	mov	r3, r1
 80a15bc:	a136      	add	r1, pc, #216	; (adr r1, 80a1698 <_ZN7MPU925015MPU9250SelfTestEPf+0x420>)
 80a15be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a15c2:	f001 fcb3 	bl	80a2f2c <pow>
 80a15c6:	a336      	add	r3, pc, #216	; (adr r3, 80a16a0 <_ZN7MPU925015MPU9250SelfTestEPf+0x428>)
 80a15c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a15cc:	f003 fc3a 	bl	80a4e44 <__aeabi_dmul>
 80a15d0:	f003 ff30 	bl	80a5434 <__aeabi_d2f>
 80a15d4:	9012      	str	r0, [sp, #72]	; 0x48
  factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 80a15d6:	4620      	mov	r0, r4
 80a15d8:	f004 f832 	bl	80a5640 <__aeabi_ui2f>
 80a15dc:	f003 fbde 	bl	80a4d9c <__aeabi_f2d>
 80a15e0:	2200      	movs	r2, #0
 80a15e2:	4b31      	ldr	r3, [pc, #196]	; (80a16a8 <_ZN7MPU925015MPU9250SelfTestEPf+0x430>)
 80a15e4:	f003 fa7a 	bl	80a4adc <__aeabi_dsub>
 80a15e8:	4602      	mov	r2, r0
 80a15ea:	460b      	mov	r3, r1
 80a15ec:	a12a      	add	r1, pc, #168	; (adr r1, 80a1698 <_ZN7MPU925015MPU9250SelfTestEPf+0x420>)
 80a15ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a15f2:	f001 fc9b 	bl	80a2f2c <pow>
 80a15f6:	a32a      	add	r3, pc, #168	; (adr r3, 80a16a0 <_ZN7MPU925015MPU9250SelfTestEPf+0x428>)
 80a15f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a15fc:	f003 fc22 	bl	80a4e44 <__aeabi_dmul>
 80a1600:	f003 ff18 	bl	80a5434 <__aeabi_d2f>
 80a1604:	9b02      	ldr	r3, [sp, #8]
 80a1606:	9013      	str	r0, [sp, #76]	; 0x4c
 80a1608:	af10      	add	r7, sp, #64	; 0x40
 80a160a:	f103 0608 	add.w	r6, r3, #8
 
 // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
 // To get percent, must multiply by 100
  for (int i = 0; i < 3; i++) {
 80a160e:	2400      	movs	r4, #0
    destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i];   // Report percent differences
 80a1610:	f93a 3014 	ldrsh.w	r3, [sl, r4, lsl #1]
 80a1614:	f935 0014 	ldrsh.w	r0, [r5, r4, lsl #1]
 80a1618:	1ac0      	subs	r0, r0, r3
 80a161a:	f004 f815 	bl	80a5648 <__aeabi_i2f>
 80a161e:	f003 fbbd 	bl	80a4d9c <__aeabi_f2d>
 80a1622:	2200      	movs	r2, #0
 80a1624:	4b21      	ldr	r3, [pc, #132]	; (80a16ac <_ZN7MPU925015MPU9250SelfTestEPf+0x434>)
 80a1626:	f003 fc0d 	bl	80a4e44 <__aeabi_dmul>
 80a162a:	ab0e      	add	r3, sp, #56	; 0x38
 80a162c:	4680      	mov	r8, r0
 80a162e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80a1632:	4689      	mov	r9, r1
 80a1634:	f003 fbb2 	bl	80a4d9c <__aeabi_f2d>
 80a1638:	4602      	mov	r2, r0
 80a163a:	460b      	mov	r3, r1
 80a163c:	4640      	mov	r0, r8
 80a163e:	4649      	mov	r1, r9
 80a1640:	f003 fd2a 	bl	80a5098 <__aeabi_ddiv>
 80a1644:	f003 fef6 	bl	80a5434 <__aeabi_d2f>
 80a1648:	9b02      	ldr	r3, [sp, #8]
 80a164a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]; // Report percent differences
 80a164e:	ab06      	add	r3, sp, #24
 80a1650:	f933 3014 	ldrsh.w	r3, [r3, r4, lsl #1]
 80a1654:	f93b 0014 	ldrsh.w	r0, [fp, r4, lsl #1]
  factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
  factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 
 // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
 // To get percent, must multiply by 100
  for (int i = 0; i < 3; i++) {
 80a1658:	3401      	adds	r4, #1
    destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i];   // Report percent differences
    destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]; // Report percent differences
 80a165a:	1ac0      	subs	r0, r0, r3
 80a165c:	f003 fff4 	bl	80a5648 <__aeabi_i2f>
 80a1660:	f003 fb9c 	bl	80a4d9c <__aeabi_f2d>
 80a1664:	2200      	movs	r2, #0
 80a1666:	4b11      	ldr	r3, [pc, #68]	; (80a16ac <_ZN7MPU925015MPU9250SelfTestEPf+0x434>)
 80a1668:	f003 fbec 	bl	80a4e44 <__aeabi_dmul>
 80a166c:	4680      	mov	r8, r0
 80a166e:	f857 0f04 	ldr.w	r0, [r7, #4]!
 80a1672:	4689      	mov	r9, r1
 80a1674:	f003 fb92 	bl	80a4d9c <__aeabi_f2d>
 80a1678:	4602      	mov	r2, r0
 80a167a:	460b      	mov	r3, r1
 80a167c:	4640      	mov	r0, r8
 80a167e:	4649      	mov	r1, r9
 80a1680:	f003 fd0a 	bl	80a5098 <__aeabi_ddiv>
 80a1684:	f003 fed6 	bl	80a5434 <__aeabi_d2f>
  factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
  factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 
 // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
 // To get percent, must multiply by 100
  for (int i = 0; i < 3; i++) {
 80a1688:	2c03      	cmp	r4, #3
    destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i];   // Report percent differences
    destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]; // Report percent differences
 80a168a:	f846 0f04 	str.w	r0, [r6, #4]!
  factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
  factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 
 // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
 // To get percent, must multiply by 100
  for (int i = 0; i < 3; i++) {
 80a168e:	d1bf      	bne.n	80a1610 <_ZN7MPU925015MPU9250SelfTestEPf+0x398>
    destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i];   // Report percent differences
    destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]; // Report percent differences
  }
}
 80a1690:	b015      	add	sp, #84	; 0x54
 80a1692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1696:	bf00      	nop
 80a1698:	c28f5c29 	.word	0xc28f5c29
 80a169c:	3ff028f5 	.word	0x3ff028f5
 80a16a0:	00000000 	.word	0x00000000
 80a16a4:	40a47800 	.word	0x40a47800
 80a16a8:	3ff00000 	.word	0x3ff00000
 80a16ac:	40590000 	.word	0x40590000

080a16b0 <_GLOBAL__sub_I__ZN7MPU92507getMresEv>:
 80a16b0:	f000 bb0c 	b.w	80a1ccc <HAL_Pin_Map>

080a16b4 <_Z22MahonyQuaternionUpdateffffffffff>:


// Similar to Madgwick scheme but uses proportional and integral filtering on
// the error between estimated reference vectors and measured ones.
void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float deltat)
{
 80a16b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a16b8:	b097      	sub	sp, #92	; 0x5c
 80a16ba:	9315      	str	r3, [sp, #84]	; 0x54
  // short name local variable for readability
  float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];
 80a16bc:	4b29      	ldr	r3, [pc, #164]	; (80a1764 <_Z22MahonyQuaternionUpdateffffffffff+0xb0>)


// Similar to Madgwick scheme but uses proportional and integral filtering on
// the error between estimated reference vectors and measured ones.
void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float deltat)
{
 80a16be:	460d      	mov	r5, r1
  // short name local variable for readability
  float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];
 80a16c0:	f8d3 a000 	ldr.w	sl, [r3]
 80a16c4:	685b      	ldr	r3, [r3, #4]
  float q3q3 = q3 * q3;
  float q3q4 = q3 * q4;
  float q4q4 = q4 * q4;

  // Normalise accelerometer measurement
  norm = sqrt(ax * ax + ay * ay + az * az);
 80a16c6:	4601      	mov	r1, r0
// Similar to Madgwick scheme but uses proportional and integral filtering on
// the error between estimated reference vectors and measured ones.
void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float deltat)
{
  // short name local variable for readability
  float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];
 80a16c8:	9300      	str	r3, [sp, #0]
 80a16ca:	4b26      	ldr	r3, [pc, #152]	; (80a1764 <_Z22MahonyQuaternionUpdateffffffffff+0xb0>)


// Similar to Madgwick scheme but uses proportional and integral filtering on
// the error between estimated reference vectors and measured ones.
void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float deltat)
{
 80a16cc:	4614      	mov	r4, r2
  // short name local variable for readability
  float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];
 80a16ce:	689b      	ldr	r3, [r3, #8]


// Similar to Madgwick scheme but uses proportional and integral filtering on
// the error between estimated reference vectors and measured ones.
void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float deltat)
{
 80a16d0:	4606      	mov	r6, r0
  // short name local variable for readability
  float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];
 80a16d2:	9301      	str	r3, [sp, #4]
 80a16d4:	4b23      	ldr	r3, [pc, #140]	; (80a1764 <_Z22MahonyQuaternionUpdateffffffffff+0xb0>)
 80a16d6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  float q3q3 = q3 * q3;
  float q3q4 = q3 * q4;
  float q4q4 = q4 * q4;

  // Normalise accelerometer measurement
  norm = sqrt(ax * ax + ay * ay + az * az);
 80a16da:	f004 f809 	bl	80a56f0 <__aeabi_fmul>
 80a16de:	4629      	mov	r1, r5
 80a16e0:	4607      	mov	r7, r0
 80a16e2:	4628      	mov	r0, r5
 80a16e4:	f004 f804 	bl	80a56f0 <__aeabi_fmul>
 80a16e8:	4601      	mov	r1, r0
 80a16ea:	4638      	mov	r0, r7
 80a16ec:	f003 fef8 	bl	80a54e0 <__addsf3>
 80a16f0:	4621      	mov	r1, r4
 80a16f2:	4607      	mov	r7, r0
 80a16f4:	4620      	mov	r0, r4
 80a16f6:	f003 fffb 	bl	80a56f0 <__aeabi_fmul>
 80a16fa:	4601      	mov	r1, r0
 80a16fc:	4638      	mov	r0, r7
 80a16fe:	f003 feef 	bl	80a54e0 <__addsf3>
 80a1702:	f003 fb4b 	bl	80a4d9c <__aeabi_f2d>
 80a1706:	f001 fda9 	bl	80a325c <sqrt>
 80a170a:	f003 fe93 	bl	80a5434 <__aeabi_d2f>
  if (norm == 0.0f) return; // Handle NaN
 80a170e:	2100      	movs	r1, #0
  float q3q3 = q3 * q3;
  float q3q4 = q3 * q4;
  float q4q4 = q4 * q4;

  // Normalise accelerometer measurement
  norm = sqrt(ax * ax + ay * ay + az * az);
 80a1710:	4680      	mov	r8, r0
  if (norm == 0.0f) return; // Handle NaN
 80a1712:	f004 f981 	bl	80a5a18 <__aeabi_fcmpeq>
 80a1716:	2800      	cmp	r0, #0
 80a1718:	f040 82a0 	bne.w	80a1c5c <_Z22MahonyQuaternionUpdateffffffffff+0x5a8>
  ax *= norm;
  ay *= norm;
  az *= norm;

  // Normalise magnetometer measurement
  norm = sqrt(mx * mx + my * my + mz * mz);
 80a171c:	9922      	ldr	r1, [sp, #136]	; 0x88
 80a171e:	4608      	mov	r0, r1
 80a1720:	f003 ffe6 	bl	80a56f0 <__aeabi_fmul>
 80a1724:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80a1726:	4607      	mov	r7, r0
 80a1728:	4608      	mov	r0, r1
 80a172a:	f003 ffe1 	bl	80a56f0 <__aeabi_fmul>
 80a172e:	4601      	mov	r1, r0
 80a1730:	4638      	mov	r0, r7
 80a1732:	f003 fed5 	bl	80a54e0 <__addsf3>
 80a1736:	9924      	ldr	r1, [sp, #144]	; 0x90
 80a1738:	4607      	mov	r7, r0
 80a173a:	4608      	mov	r0, r1
 80a173c:	f003 ffd8 	bl	80a56f0 <__aeabi_fmul>
 80a1740:	4601      	mov	r1, r0
 80a1742:	4638      	mov	r0, r7
 80a1744:	f003 fecc 	bl	80a54e0 <__addsf3>
 80a1748:	f003 fb28 	bl	80a4d9c <__aeabi_f2d>
 80a174c:	f001 fd86 	bl	80a325c <sqrt>
 80a1750:	f003 fe70 	bl	80a5434 <__aeabi_d2f>
  if (norm == 0.0f) return; // Handle NaN
 80a1754:	2100      	movs	r1, #0
  ax *= norm;
  ay *= norm;
  az *= norm;

  // Normalise magnetometer measurement
  norm = sqrt(mx * mx + my * my + mz * mz);
 80a1756:	4607      	mov	r7, r0
  if (norm == 0.0f) return; // Handle NaN
 80a1758:	f004 f95e 	bl	80a5a18 <__aeabi_fcmpeq>
 80a175c:	2800      	cmp	r0, #0
 80a175e:	f040 827d 	bne.w	80a1c5c <_Z22MahonyQuaternionUpdateffffffffff+0x5a8>
 80a1762:	e001      	b.n	80a1768 <_Z22MahonyQuaternionUpdateffffffffff+0xb4>
 80a1764:	20000008 	.word	0x20000008
  float ex, ey, ez;
  float pa, pb, pc;

  // Auxiliary variables to avoid repeated arithmetic
  float q1q1 = q1 * q1;
  float q1q2 = q1 * q2;
 80a1768:	9900      	ldr	r1, [sp, #0]
 80a176a:	4650      	mov	r0, sl
 80a176c:	f003 ffc0 	bl	80a56f0 <__aeabi_fmul>
  float q1q3 = q1 * q3;
 80a1770:	9901      	ldr	r1, [sp, #4]
  float ex, ey, ez;
  float pa, pb, pc;

  // Auxiliary variables to avoid repeated arithmetic
  float q1q1 = q1 * q1;
  float q1q2 = q1 * q2;
 80a1772:	9007      	str	r0, [sp, #28]
  float q1q3 = q1 * q3;
 80a1774:	4650      	mov	r0, sl
 80a1776:	f003 ffbb 	bl	80a56f0 <__aeabi_fmul>
  float q1q4 = q1 * q4;
 80a177a:	4659      	mov	r1, fp
  float pa, pb, pc;

  // Auxiliary variables to avoid repeated arithmetic
  float q1q1 = q1 * q1;
  float q1q2 = q1 * q2;
  float q1q3 = q1 * q3;
 80a177c:	9008      	str	r0, [sp, #32]
  float q1q4 = q1 * q4;
 80a177e:	4650      	mov	r0, sl
 80a1780:	f003 ffb6 	bl	80a56f0 <__aeabi_fmul>
  float q2q2 = q2 * q2;
 80a1784:	9900      	ldr	r1, [sp, #0]

  // Auxiliary variables to avoid repeated arithmetic
  float q1q1 = q1 * q1;
  float q1q2 = q1 * q2;
  float q1q3 = q1 * q3;
  float q1q4 = q1 * q4;
 80a1786:	9009      	str	r0, [sp, #36]	; 0x24
  float q2q2 = q2 * q2;
 80a1788:	4608      	mov	r0, r1
 80a178a:	f003 ffb1 	bl	80a56f0 <__aeabi_fmul>
  float q2q3 = q2 * q3;
 80a178e:	9901      	ldr	r1, [sp, #4]
  // Auxiliary variables to avoid repeated arithmetic
  float q1q1 = q1 * q1;
  float q1q2 = q1 * q2;
  float q1q3 = q1 * q3;
  float q1q4 = q1 * q4;
  float q2q2 = q2 * q2;
 80a1790:	900c      	str	r0, [sp, #48]	; 0x30
  float q2q3 = q2 * q3;
 80a1792:	9800      	ldr	r0, [sp, #0]
 80a1794:	f003 ffac 	bl	80a56f0 <__aeabi_fmul>
  float q2q4 = q2 * q4;
 80a1798:	4659      	mov	r1, fp
  float q1q1 = q1 * q1;
  float q1q2 = q1 * q2;
  float q1q3 = q1 * q3;
  float q1q4 = q1 * q4;
  float q2q2 = q2 * q2;
  float q2q3 = q2 * q3;
 80a179a:	900a      	str	r0, [sp, #40]	; 0x28
  float q2q4 = q2 * q4;
 80a179c:	9800      	ldr	r0, [sp, #0]
 80a179e:	f003 ffa7 	bl	80a56f0 <__aeabi_fmul>
  float q3q3 = q3 * q3;
 80a17a2:	9901      	ldr	r1, [sp, #4]
  float q1q2 = q1 * q2;
  float q1q3 = q1 * q3;
  float q1q4 = q1 * q4;
  float q2q2 = q2 * q2;
  float q2q3 = q2 * q3;
  float q2q4 = q2 * q4;
 80a17a4:	900d      	str	r0, [sp, #52]	; 0x34
  float q3q3 = q3 * q3;
 80a17a6:	4608      	mov	r0, r1
 80a17a8:	f003 ffa2 	bl	80a56f0 <__aeabi_fmul>
  float q3q4 = q3 * q4;
 80a17ac:	4659      	mov	r1, fp
  float q1q3 = q1 * q3;
  float q1q4 = q1 * q4;
  float q2q2 = q2 * q2;
  float q2q3 = q2 * q3;
  float q2q4 = q2 * q4;
  float q3q3 = q3 * q3;
 80a17ae:	9005      	str	r0, [sp, #20]
  float q3q4 = q3 * q4;
 80a17b0:	9801      	ldr	r0, [sp, #4]
 80a17b2:	f003 ff9d 	bl	80a56f0 <__aeabi_fmul>
  float q4q4 = q4 * q4;
 80a17b6:	4659      	mov	r1, fp
  float q1q4 = q1 * q4;
  float q2q2 = q2 * q2;
  float q2q3 = q2 * q3;
  float q2q4 = q2 * q4;
  float q3q3 = q3 * q3;
  float q3q4 = q3 * q4;
 80a17b8:	900e      	str	r0, [sp, #56]	; 0x38
  float q4q4 = q4 * q4;
 80a17ba:	4658      	mov	r0, fp
 80a17bc:	f003 ff98 	bl	80a56f0 <__aeabi_fmul>

  // Normalise accelerometer measurement
  norm = sqrt(ax * ax + ay * ay + az * az);
  if (norm == 0.0f) return; // Handle NaN
  norm = 1.0f / norm;       // Use reciprocal for division
 80a17c0:	4641      	mov	r1, r8
  float q2q2 = q2 * q2;
  float q2q3 = q2 * q3;
  float q2q4 = q2 * q4;
  float q3q3 = q3 * q3;
  float q3q4 = q3 * q4;
  float q4q4 = q4 * q4;
 80a17c2:	9006      	str	r0, [sp, #24]

  // Normalise accelerometer measurement
  norm = sqrt(ax * ax + ay * ay + az * az);
  if (norm == 0.0f) return; // Handle NaN
  norm = 1.0f / norm;       // Use reciprocal for division
 80a17c4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a17c8:	f004 f846 	bl	80a5858 <__aeabi_fdiv>
 80a17cc:	4680      	mov	r8, r0
  ax *= norm;
 80a17ce:	4601      	mov	r1, r0
 80a17d0:	4630      	mov	r0, r6
 80a17d2:	f003 ff8d 	bl	80a56f0 <__aeabi_fmul>
  ay *= norm;
 80a17d6:	4641      	mov	r1, r8

  // Normalise accelerometer measurement
  norm = sqrt(ax * ax + ay * ay + az * az);
  if (norm == 0.0f) return; // Handle NaN
  norm = 1.0f / norm;       // Use reciprocal for division
  ax *= norm;
 80a17d8:	900f      	str	r0, [sp, #60]	; 0x3c
  ay *= norm;
 80a17da:	4628      	mov	r0, r5
 80a17dc:	f003 ff88 	bl	80a56f0 <__aeabi_fmul>
  az *= norm;
 80a17e0:	4641      	mov	r1, r8
  // Normalise accelerometer measurement
  norm = sqrt(ax * ax + ay * ay + az * az);
  if (norm == 0.0f) return; // Handle NaN
  norm = 1.0f / norm;       // Use reciprocal for division
  ax *= norm;
  ay *= norm;
 80a17e2:	9010      	str	r0, [sp, #64]	; 0x40
  az *= norm;
 80a17e4:	4620      	mov	r0, r4
 80a17e6:	f003 ff83 	bl	80a56f0 <__aeabi_fmul>

  // Normalise magnetometer measurement
  norm = sqrt(mx * mx + my * my + mz * mz);
  if (norm == 0.0f) return; // Handle NaN
  norm = 1.0f / norm;       // Use reciprocal for division
 80a17ea:	4639      	mov	r1, r7
  norm = sqrt(ax * ax + ay * ay + az * az);
  if (norm == 0.0f) return; // Handle NaN
  norm = 1.0f / norm;       // Use reciprocal for division
  ax *= norm;
  ay *= norm;
  az *= norm;
 80a17ec:	9011      	str	r0, [sp, #68]	; 0x44

  // Normalise magnetometer measurement
  norm = sqrt(mx * mx + my * my + mz * mz);
  if (norm == 0.0f) return; // Handle NaN
  norm = 1.0f / norm;       // Use reciprocal for division
 80a17ee:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a17f2:	f004 f831 	bl	80a5858 <__aeabi_fdiv>
 80a17f6:	4604      	mov	r4, r0
  mx *= norm;
 80a17f8:	4601      	mov	r1, r0
 80a17fa:	9822      	ldr	r0, [sp, #136]	; 0x88
 80a17fc:	f003 ff78 	bl	80a56f0 <__aeabi_fmul>
  my *= norm;
 80a1800:	4621      	mov	r1, r4

  // Normalise magnetometer measurement
  norm = sqrt(mx * mx + my * my + mz * mz);
  if (norm == 0.0f) return; // Handle NaN
  norm = 1.0f / norm;       // Use reciprocal for division
  mx *= norm;
 80a1802:	9002      	str	r0, [sp, #8]
  my *= norm;
 80a1804:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80a1806:	f003 ff73 	bl	80a56f0 <__aeabi_fmul>
  mz *= norm;
 80a180a:	4621      	mov	r1, r4
  // Normalise magnetometer measurement
  norm = sqrt(mx * mx + my * my + mz * mz);
  if (norm == 0.0f) return; // Handle NaN
  norm = 1.0f / norm;       // Use reciprocal for division
  mx *= norm;
  my *= norm;
 80a180c:	9003      	str	r0, [sp, #12]
  mz *= norm;
 80a180e:	9824      	ldr	r0, [sp, #144]	; 0x90
 80a1810:	f003 ff6e 	bl	80a56f0 <__aeabi_fmul>

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
 80a1814:	9902      	ldr	r1, [sp, #8]
  norm = sqrt(mx * mx + my * my + mz * mz);
  if (norm == 0.0f) return; // Handle NaN
  norm = 1.0f / norm;       // Use reciprocal for division
  mx *= norm;
  my *= norm;
  mz *= norm;
 80a1816:	9004      	str	r0, [sp, #16]

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
 80a1818:	4608      	mov	r0, r1
 80a181a:	f003 fe61 	bl	80a54e0 <__addsf3>
 80a181e:	9905      	ldr	r1, [sp, #20]
 80a1820:	4681      	mov	r9, r0
 80a1822:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80a1826:	f003 fe59 	bl	80a54dc <__aeabi_fsub>
 80a182a:	9906      	ldr	r1, [sp, #24]
 80a182c:	f003 fe56 	bl	80a54dc <__aeabi_fsub>
 80a1830:	9903      	ldr	r1, [sp, #12]
 80a1832:	9012      	str	r0, [sp, #72]	; 0x48
 80a1834:	4608      	mov	r0, r1
 80a1836:	f003 fe53 	bl	80a54e0 <__addsf3>
 80a183a:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a183c:	4680      	mov	r8, r0
 80a183e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a1840:	f003 fe4c 	bl	80a54dc <__aeabi_fsub>
 80a1844:	9904      	ldr	r1, [sp, #16]
 80a1846:	9013      	str	r0, [sp, #76]	; 0x4c
 80a1848:	4608      	mov	r0, r1
 80a184a:	f003 fe49 	bl	80a54e0 <__addsf3>
 80a184e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a1850:	4607      	mov	r7, r0
 80a1852:	9808      	ldr	r0, [sp, #32]
 80a1854:	f003 fe44 	bl	80a54e0 <__addsf3>
 80a1858:	9912      	ldr	r1, [sp, #72]	; 0x48
 80a185a:	9014      	str	r0, [sp, #80]	; 0x50
 80a185c:	4648      	mov	r0, r9
 80a185e:	f003 ff47 	bl	80a56f0 <__aeabi_fmul>
 80a1862:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a1864:	4604      	mov	r4, r0
 80a1866:	4640      	mov	r0, r8
 80a1868:	f003 ff42 	bl	80a56f0 <__aeabi_fmul>
 80a186c:	4601      	mov	r1, r0
 80a186e:	4620      	mov	r0, r4
 80a1870:	f003 fe36 	bl	80a54e0 <__addsf3>
 80a1874:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a1876:	4604      	mov	r4, r0
 80a1878:	4638      	mov	r0, r7
 80a187a:	f003 ff39 	bl	80a56f0 <__aeabi_fmul>
 80a187e:	4601      	mov	r1, r0
 80a1880:	4620      	mov	r0, r4
 80a1882:	f003 fe2d 	bl	80a54e0 <__addsf3>
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
 80a1886:	990c      	ldr	r1, [sp, #48]	; 0x30
  mx *= norm;
  my *= norm;
  mz *= norm;

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
 80a1888:	4604      	mov	r4, r0
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
 80a188a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80a188e:	f003 fe25 	bl	80a54dc <__aeabi_fsub>
 80a1892:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a1894:	4606      	mov	r6, r0
 80a1896:	9809      	ldr	r0, [sp, #36]	; 0x24
 80a1898:	f003 fe22 	bl	80a54e0 <__addsf3>
 80a189c:	4649      	mov	r1, r9
 80a189e:	f003 ff27 	bl	80a56f0 <__aeabi_fmul>
 80a18a2:	9906      	ldr	r1, [sp, #24]
 80a18a4:	4605      	mov	r5, r0
 80a18a6:	4630      	mov	r0, r6
 80a18a8:	f003 fe18 	bl	80a54dc <__aeabi_fsub>
 80a18ac:	4641      	mov	r1, r8
 80a18ae:	f003 ff1f 	bl	80a56f0 <__aeabi_fmul>
 80a18b2:	4601      	mov	r1, r0
 80a18b4:	4628      	mov	r0, r5
 80a18b6:	f003 fe13 	bl	80a54e0 <__addsf3>
 80a18ba:	9907      	ldr	r1, [sp, #28]
 80a18bc:	4605      	mov	r5, r0
 80a18be:	980e      	ldr	r0, [sp, #56]	; 0x38
 80a18c0:	f003 fe0c 	bl	80a54dc <__aeabi_fsub>
 80a18c4:	4639      	mov	r1, r7
 80a18c6:	f003 ff13 	bl	80a56f0 <__aeabi_fmul>
 80a18ca:	4601      	mov	r1, r0
 80a18cc:	4628      	mov	r0, r5
 80a18ce:	f003 fe07 	bl	80a54e0 <__addsf3>
  bx = sqrt((hx * hx) + (hy * hy));
 80a18d2:	4621      	mov	r1, r4
  my *= norm;
  mz *= norm;

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
 80a18d4:	4605      	mov	r5, r0
  bx = sqrt((hx * hx) + (hy * hy));
 80a18d6:	4620      	mov	r0, r4
 80a18d8:	f003 ff0a 	bl	80a56f0 <__aeabi_fmul>
 80a18dc:	4629      	mov	r1, r5
 80a18de:	4604      	mov	r4, r0
 80a18e0:	4628      	mov	r0, r5
 80a18e2:	f003 ff05 	bl	80a56f0 <__aeabi_fmul>
 80a18e6:	4601      	mov	r1, r0
 80a18e8:	4620      	mov	r0, r4
 80a18ea:	f003 fdf9 	bl	80a54e0 <__addsf3>
 80a18ee:	f003 fa55 	bl	80a4d9c <__aeabi_f2d>
 80a18f2:	f001 fcb3 	bl	80a325c <sqrt>
 80a18f6:	4602      	mov	r2, r0
 80a18f8:	460b      	mov	r3, r1
  bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2) + 2.0f * mz * (0.5f - q2q2 - q3q3);
 80a18fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a18fc:	9908      	ldr	r1, [sp, #32]
  mz *= norm;

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
  bx = sqrt((hx * hx) + (hy * hy));
 80a18fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2) + 2.0f * mz * (0.5f - q2q2 - q3q3);
 80a1902:	f003 fdeb 	bl	80a54dc <__aeabi_fsub>
 80a1906:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a1908:	4605      	mov	r5, r0
 80a190a:	9807      	ldr	r0, [sp, #28]
 80a190c:	f003 fde8 	bl	80a54e0 <__addsf3>
 80a1910:	9905      	ldr	r1, [sp, #20]
 80a1912:	4604      	mov	r4, r0
 80a1914:	4630      	mov	r0, r6
 80a1916:	f003 fde1 	bl	80a54dc <__aeabi_fsub>

  // Estimated direction of gravity and magnetic field
  vx = 2.0f * (q2q4 - q1q3);
 80a191a:	4629      	mov	r1, r5

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
  bx = sqrt((hx * hx) + (hy * hy));
  bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2) + 2.0f * mz * (0.5f - q2q2 - q3q3);
 80a191c:	9007      	str	r0, [sp, #28]

  // Estimated direction of gravity and magnetic field
  vx = 2.0f * (q2q4 - q1q3);
 80a191e:	4628      	mov	r0, r5
 80a1920:	f003 fdde 	bl	80a54e0 <__addsf3>
  vy = 2.0f * (q1q2 + q3q4);
 80a1924:	4621      	mov	r1, r4
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
  bx = sqrt((hx * hx) + (hy * hy));
  bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2) + 2.0f * mz * (0.5f - q2q2 - q3q3);

  // Estimated direction of gravity and magnetic field
  vx = 2.0f * (q2q4 - q1q3);
 80a1926:	9008      	str	r0, [sp, #32]
  vy = 2.0f * (q1q2 + q3q4);
 80a1928:	4620      	mov	r0, r4
 80a192a:	f003 fdd9 	bl	80a54e0 <__addsf3>
  vz = q1q1 - q2q2 - q3q3 + q4q4;
 80a192e:	4651      	mov	r1, sl
  bx = sqrt((hx * hx) + (hy * hy));
  bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2) + 2.0f * mz * (0.5f - q2q2 - q3q3);

  // Estimated direction of gravity and magnetic field
  vx = 2.0f * (q2q4 - q1q3);
  vy = 2.0f * (q1q2 + q3q4);
 80a1930:	9009      	str	r0, [sp, #36]	; 0x24
  vz = q1q1 - q2q2 - q3q3 + q4q4;
 80a1932:	4650      	mov	r0, sl
 80a1934:	f003 fedc 	bl	80a56f0 <__aeabi_fmul>
 80a1938:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a193a:	f003 fdcf 	bl	80a54dc <__aeabi_fsub>
 80a193e:	9905      	ldr	r1, [sp, #20]
 80a1940:	f003 fdcc 	bl	80a54dc <__aeabi_fsub>
 80a1944:	9906      	ldr	r1, [sp, #24]
 80a1946:	f003 fdcb 	bl	80a54e0 <__addsf3>
  wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 80a194a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2) + 2.0f * mz * (0.5f - q2q2 - q3q3);

  // Estimated direction of gravity and magnetic field
  vx = 2.0f * (q2q4 - q1q3);
  vy = 2.0f * (q1q2 + q3q4);
  vz = q1q1 - q2q2 - q3q3 + q4q4;
 80a194e:	9005      	str	r0, [sp, #20]
  wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 80a1950:	4619      	mov	r1, r3
 80a1952:	4610      	mov	r0, r2
 80a1954:	f003 fd6e 	bl	80a5434 <__aeabi_d2f>
 80a1958:	4601      	mov	r1, r0
 80a195a:	f003 fdc1 	bl	80a54e0 <__addsf3>
 80a195e:	4629      	mov	r1, r5
 80a1960:	4606      	mov	r6, r0
 80a1962:	4648      	mov	r0, r9
 80a1964:	f003 fec4 	bl	80a56f0 <__aeabi_fmul>
 80a1968:	4621      	mov	r1, r4
 80a196a:	4681      	mov	r9, r0
 80a196c:	4640      	mov	r0, r8
 80a196e:	f003 febf 	bl	80a56f0 <__aeabi_fmul>
 80a1972:	4601      	mov	r1, r0
 80a1974:	4648      	mov	r0, r9
 80a1976:	f003 fdb3 	bl	80a54e0 <__addsf3>
 80a197a:	9907      	ldr	r1, [sp, #28]
 80a197c:	4680      	mov	r8, r0
 80a197e:	4638      	mov	r0, r7
 80a1980:	f003 feb6 	bl	80a56f0 <__aeabi_fmul>
 80a1984:	4601      	mov	r1, r0
 80a1986:	4640      	mov	r0, r8
 80a1988:	f003 fdaa 	bl	80a54e0 <__addsf3>
 80a198c:	4601      	mov	r1, r0
 80a198e:	f003 fda7 	bl	80a54e0 <__addsf3>
 80a1992:	4631      	mov	r1, r6
 80a1994:	4607      	mov	r7, r0
 80a1996:	9812      	ldr	r0, [sp, #72]	; 0x48
 80a1998:	f003 feaa 	bl	80a56f0 <__aeabi_fmul>
 80a199c:	4639      	mov	r1, r7
 80a199e:	4680      	mov	r8, r0
 80a19a0:	4628      	mov	r0, r5
 80a19a2:	f003 fea5 	bl	80a56f0 <__aeabi_fmul>
 80a19a6:	4601      	mov	r1, r0
 80a19a8:	4640      	mov	r0, r8
 80a19aa:	f003 fd99 	bl	80a54e0 <__addsf3>
  wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 80a19ae:	4631      	mov	r1, r6

  // Estimated direction of gravity and magnetic field
  vx = 2.0f * (q2q4 - q1q3);
  vy = 2.0f * (q1q2 + q3q4);
  vz = q1q1 - q2q2 - q3q3 + q4q4;
  wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 80a19b0:	4605      	mov	r5, r0
  wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 80a19b2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80a19b4:	f003 fe9c 	bl	80a56f0 <__aeabi_fmul>
 80a19b8:	4639      	mov	r1, r7
 80a19ba:	4680      	mov	r8, r0
 80a19bc:	4620      	mov	r0, r4
 80a19be:	f003 fe97 	bl	80a56f0 <__aeabi_fmul>
 80a19c2:	4601      	mov	r1, r0
 80a19c4:	4640      	mov	r0, r8
 80a19c6:	f003 fd8b 	bl	80a54e0 <__addsf3>
  wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 80a19ca:	4631      	mov	r1, r6
  // Estimated direction of gravity and magnetic field
  vx = 2.0f * (q2q4 - q1q3);
  vy = 2.0f * (q1q2 + q3q4);
  vz = q1q1 - q2q2 - q3q3 + q4q4;
  wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
  wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 80a19cc:	4604      	mov	r4, r0
  wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 80a19ce:	9814      	ldr	r0, [sp, #80]	; 0x50
 80a19d0:	f003 fe8e 	bl	80a56f0 <__aeabi_fmul>
 80a19d4:	4639      	mov	r1, r7
 80a19d6:	4606      	mov	r6, r0
 80a19d8:	9807      	ldr	r0, [sp, #28]
 80a19da:	f003 fe89 	bl	80a56f0 <__aeabi_fmul>
 80a19de:	4601      	mov	r1, r0
 80a19e0:	4630      	mov	r0, r6
 80a19e2:	f003 fd7d 	bl	80a54e0 <__addsf3>
    eInt[1] = 0.0f;
    eInt[2] = 0.0f;
  }

  // Apply feedback terms
  gx = gx + Kp * ex + Ki * eInt[0];
 80a19e6:	9905      	ldr	r1, [sp, #20]
  vx = 2.0f * (q2q4 - q1q3);
  vy = 2.0f * (q1q2 + q3q4);
  vz = q1q1 - q2q2 - q3q3 + q4q4;
  wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
  wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
  wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 80a19e8:	4607      	mov	r7, r0
    eInt[1] = 0.0f;
    eInt[2] = 0.0f;
  }

  // Apply feedback terms
  gx = gx + Kp * ex + Ki * eInt[0];
 80a19ea:	9810      	ldr	r0, [sp, #64]	; 0x40
 80a19ec:	f003 fe80 	bl	80a56f0 <__aeabi_fmul>
 80a19f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a19f2:	4606      	mov	r6, r0
 80a19f4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80a19f6:	f003 fe7b 	bl	80a56f0 <__aeabi_fmul>
 80a19fa:	4601      	mov	r1, r0
 80a19fc:	4630      	mov	r0, r6
 80a19fe:	f003 fd6d 	bl	80a54dc <__aeabi_fsub>
 80a1a02:	4639      	mov	r1, r7
 80a1a04:	4606      	mov	r6, r0
 80a1a06:	9803      	ldr	r0, [sp, #12]
 80a1a08:	f003 fe72 	bl	80a56f0 <__aeabi_fmul>
 80a1a0c:	4621      	mov	r1, r4
 80a1a0e:	4680      	mov	r8, r0
 80a1a10:	9804      	ldr	r0, [sp, #16]
 80a1a12:	f003 fe6d 	bl	80a56f0 <__aeabi_fmul>
 80a1a16:	4601      	mov	r1, r0
 80a1a18:	4640      	mov	r0, r8
 80a1a1a:	f003 fd5f 	bl	80a54dc <__aeabi_fsub>
 80a1a1e:	4601      	mov	r1, r0
 80a1a20:	4630      	mov	r0, r6
 80a1a22:	f003 fd5d 	bl	80a54e0 <__addsf3>
 80a1a26:	498f      	ldr	r1, [pc, #572]	; (80a1c64 <_Z22MahonyQuaternionUpdateffffffffff+0x5b0>)
 80a1a28:	f003 fe62 	bl	80a56f0 <__aeabi_fmul>
 80a1a2c:	9915      	ldr	r1, [sp, #84]	; 0x54
 80a1a2e:	f003 fd57 	bl	80a54e0 <__addsf3>
 80a1a32:	2100      	movs	r1, #0
 80a1a34:	f003 fd54 	bl	80a54e0 <__addsf3>
  gy = gy + Kp * ey + Ki * eInt[1];
 80a1a38:	9908      	ldr	r1, [sp, #32]
    eInt[1] = 0.0f;
    eInt[2] = 0.0f;
  }

  // Apply feedback terms
  gx = gx + Kp * ex + Ki * eInt[0];
 80a1a3a:	4606      	mov	r6, r0
  gy = gy + Kp * ey + Ki * eInt[1];
 80a1a3c:	9811      	ldr	r0, [sp, #68]	; 0x44
 80a1a3e:	f003 fe57 	bl	80a56f0 <__aeabi_fmul>
 80a1a42:	9905      	ldr	r1, [sp, #20]
 80a1a44:	4680      	mov	r8, r0
 80a1a46:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80a1a48:	f003 fe52 	bl	80a56f0 <__aeabi_fmul>
 80a1a4c:	4601      	mov	r1, r0
 80a1a4e:	4640      	mov	r0, r8
 80a1a50:	f003 fd44 	bl	80a54dc <__aeabi_fsub>
 80a1a54:	4629      	mov	r1, r5
 80a1a56:	4680      	mov	r8, r0
 80a1a58:	9804      	ldr	r0, [sp, #16]
 80a1a5a:	f003 fe49 	bl	80a56f0 <__aeabi_fmul>
 80a1a5e:	4639      	mov	r1, r7
 80a1a60:	4681      	mov	r9, r0
 80a1a62:	9802      	ldr	r0, [sp, #8]
 80a1a64:	f003 fe44 	bl	80a56f0 <__aeabi_fmul>
 80a1a68:	4601      	mov	r1, r0
 80a1a6a:	4648      	mov	r0, r9
 80a1a6c:	f003 fd36 	bl	80a54dc <__aeabi_fsub>
 80a1a70:	4601      	mov	r1, r0
 80a1a72:	4640      	mov	r0, r8
 80a1a74:	f003 fd34 	bl	80a54e0 <__addsf3>
 80a1a78:	497a      	ldr	r1, [pc, #488]	; (80a1c64 <_Z22MahonyQuaternionUpdateffffffffff+0x5b0>)
 80a1a7a:	f003 fe39 	bl	80a56f0 <__aeabi_fmul>
 80a1a7e:	9920      	ldr	r1, [sp, #128]	; 0x80
 80a1a80:	f003 fd2e 	bl	80a54e0 <__addsf3>
 80a1a84:	2100      	movs	r1, #0
 80a1a86:	f003 fd2b 	bl	80a54e0 <__addsf3>
  gz = gz + Kp * ez + Ki * eInt[2];
 80a1a8a:	9909      	ldr	r1, [sp, #36]	; 0x24
    eInt[2] = 0.0f;
  }

  // Apply feedback terms
  gx = gx + Kp * ex + Ki * eInt[0];
  gy = gy + Kp * ey + Ki * eInt[1];
 80a1a8c:	4607      	mov	r7, r0
  gz = gz + Kp * ez + Ki * eInt[2];
 80a1a8e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80a1a90:	f003 fe2e 	bl	80a56f0 <__aeabi_fmul>
 80a1a94:	9908      	ldr	r1, [sp, #32]
 80a1a96:	4680      	mov	r8, r0
 80a1a98:	9810      	ldr	r0, [sp, #64]	; 0x40
 80a1a9a:	f003 fe29 	bl	80a56f0 <__aeabi_fmul>
 80a1a9e:	4601      	mov	r1, r0
 80a1aa0:	4640      	mov	r0, r8
 80a1aa2:	f003 fd1b 	bl	80a54dc <__aeabi_fsub>
 80a1aa6:	4621      	mov	r1, r4
 80a1aa8:	4680      	mov	r8, r0
 80a1aaa:	9802      	ldr	r0, [sp, #8]
 80a1aac:	f003 fe20 	bl	80a56f0 <__aeabi_fmul>
 80a1ab0:	4629      	mov	r1, r5
 80a1ab2:	4604      	mov	r4, r0
 80a1ab4:	9803      	ldr	r0, [sp, #12]
 80a1ab6:	f003 fe1b 	bl	80a56f0 <__aeabi_fmul>
 80a1aba:	4601      	mov	r1, r0
 80a1abc:	4620      	mov	r0, r4
 80a1abe:	f003 fd0d 	bl	80a54dc <__aeabi_fsub>
 80a1ac2:	4601      	mov	r1, r0
 80a1ac4:	4640      	mov	r0, r8
 80a1ac6:	f003 fd0b 	bl	80a54e0 <__addsf3>
 80a1aca:	4966      	ldr	r1, [pc, #408]	; (80a1c64 <_Z22MahonyQuaternionUpdateffffffffff+0x5b0>)
 80a1acc:	f003 fe10 	bl	80a56f0 <__aeabi_fmul>
 80a1ad0:	9921      	ldr	r1, [sp, #132]	; 0x84
 80a1ad2:	f003 fd05 	bl	80a54e0 <__addsf3>
 80a1ad6:	2100      	movs	r1, #0
 80a1ad8:	f003 fd02 	bl	80a54e0 <__addsf3>
 
  // Integrate rate of change of quaternion
  pa = q2;
  pb = q3;
  pc = q4;
  q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 80a1adc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  }

  // Apply feedback terms
  gx = gx + Kp * ex + Ki * eInt[0];
  gy = gy + Kp * ey + Ki * eInt[1];
  gz = gz + Kp * ez + Ki * eInt[2];
 80a1ae0:	4680      	mov	r8, r0
 
  // Integrate rate of change of quaternion
  pa = q2;
  pb = q3;
  pc = q4;
  q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 80a1ae2:	9825      	ldr	r0, [sp, #148]	; 0x94
 80a1ae4:	f003 fe04 	bl	80a56f0 <__aeabi_fmul>
 80a1ae8:	9b00      	ldr	r3, [sp, #0]
 80a1aea:	4605      	mov	r5, r0
 80a1aec:	4631      	mov	r1, r6
 80a1aee:	f103 4000 	add.w	r0, r3, #2147483648	; 0x80000000
 80a1af2:	f003 fdfd 	bl	80a56f0 <__aeabi_fmul>
 80a1af6:	4639      	mov	r1, r7
 80a1af8:	4604      	mov	r4, r0
 80a1afa:	9801      	ldr	r0, [sp, #4]
 80a1afc:	f003 fdf8 	bl	80a56f0 <__aeabi_fmul>
 80a1b00:	4601      	mov	r1, r0
 80a1b02:	4620      	mov	r0, r4
 80a1b04:	f003 fcea 	bl	80a54dc <__aeabi_fsub>
 80a1b08:	4641      	mov	r1, r8
 80a1b0a:	4604      	mov	r4, r0
 80a1b0c:	4658      	mov	r0, fp
 80a1b0e:	f003 fdef 	bl	80a56f0 <__aeabi_fmul>
 80a1b12:	4601      	mov	r1, r0
 80a1b14:	4620      	mov	r0, r4
 80a1b16:	f003 fce1 	bl	80a54dc <__aeabi_fsub>
 80a1b1a:	4629      	mov	r1, r5
 80a1b1c:	f003 fde8 	bl	80a56f0 <__aeabi_fmul>
 80a1b20:	4651      	mov	r1, sl
 80a1b22:	f003 fcdd 	bl	80a54e0 <__addsf3>
 80a1b26:	4604      	mov	r4, r0
  q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 80a1b28:	4601      	mov	r1, r0
 80a1b2a:	4630      	mov	r0, r6
 80a1b2c:	f003 fde0 	bl	80a56f0 <__aeabi_fmul>
 80a1b30:	4641      	mov	r1, r8
 80a1b32:	4681      	mov	r9, r0
 80a1b34:	9801      	ldr	r0, [sp, #4]
 80a1b36:	f003 fddb 	bl	80a56f0 <__aeabi_fmul>
 80a1b3a:	4601      	mov	r1, r0
 80a1b3c:	4648      	mov	r0, r9
 80a1b3e:	f003 fccf 	bl	80a54e0 <__addsf3>
 80a1b42:	4639      	mov	r1, r7
 80a1b44:	4681      	mov	r9, r0
 80a1b46:	4658      	mov	r0, fp
 80a1b48:	f003 fdd2 	bl	80a56f0 <__aeabi_fmul>
 80a1b4c:	4601      	mov	r1, r0
 80a1b4e:	4648      	mov	r0, r9
 80a1b50:	f003 fcc4 	bl	80a54dc <__aeabi_fsub>
 80a1b54:	4629      	mov	r1, r5
 80a1b56:	f003 fdcb 	bl	80a56f0 <__aeabi_fmul>
 80a1b5a:	9900      	ldr	r1, [sp, #0]
 80a1b5c:	f003 fcc0 	bl	80a54e0 <__addsf3>
  q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 80a1b60:	4621      	mov	r1, r4
  // Integrate rate of change of quaternion
  pa = q2;
  pb = q3;
  pc = q4;
  q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
  q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 80a1b62:	4682      	mov	sl, r0
  q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 80a1b64:	4638      	mov	r0, r7
 80a1b66:	f003 fdc3 	bl	80a56f0 <__aeabi_fmul>
 80a1b6a:	4641      	mov	r1, r8
 80a1b6c:	4681      	mov	r9, r0
 80a1b6e:	9800      	ldr	r0, [sp, #0]
 80a1b70:	f003 fdbe 	bl	80a56f0 <__aeabi_fmul>
 80a1b74:	4601      	mov	r1, r0
 80a1b76:	4648      	mov	r0, r9
 80a1b78:	f003 fcb0 	bl	80a54dc <__aeabi_fsub>
 80a1b7c:	4631      	mov	r1, r6
 80a1b7e:	4681      	mov	r9, r0
 80a1b80:	4658      	mov	r0, fp
 80a1b82:	f003 fdb5 	bl	80a56f0 <__aeabi_fmul>
 80a1b86:	4601      	mov	r1, r0
 80a1b88:	4648      	mov	r0, r9
 80a1b8a:	f003 fca9 	bl	80a54e0 <__addsf3>
 80a1b8e:	4629      	mov	r1, r5
 80a1b90:	f003 fdae 	bl	80a56f0 <__aeabi_fmul>
 80a1b94:	9901      	ldr	r1, [sp, #4]
 80a1b96:	f003 fca3 	bl	80a54e0 <__addsf3>
  q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 80a1b9a:	4621      	mov	r1, r4
  pa = q2;
  pb = q3;
  pc = q4;
  q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
  q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
  q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 80a1b9c:	4681      	mov	r9, r0
  q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 80a1b9e:	4640      	mov	r0, r8
 80a1ba0:	f003 fda6 	bl	80a56f0 <__aeabi_fmul>
 80a1ba4:	4639      	mov	r1, r7
 80a1ba6:	4680      	mov	r8, r0
 80a1ba8:	9800      	ldr	r0, [sp, #0]
 80a1baa:	f003 fda1 	bl	80a56f0 <__aeabi_fmul>
 80a1bae:	4601      	mov	r1, r0
 80a1bb0:	4640      	mov	r0, r8
 80a1bb2:	f003 fc95 	bl	80a54e0 <__addsf3>
 80a1bb6:	4631      	mov	r1, r6
 80a1bb8:	4607      	mov	r7, r0
 80a1bba:	9801      	ldr	r0, [sp, #4]
 80a1bbc:	f003 fd98 	bl	80a56f0 <__aeabi_fmul>
 80a1bc0:	4601      	mov	r1, r0
 80a1bc2:	4638      	mov	r0, r7
 80a1bc4:	f003 fc8a 	bl	80a54dc <__aeabi_fsub>
 80a1bc8:	4629      	mov	r1, r5
 80a1bca:	f003 fd91 	bl	80a56f0 <__aeabi_fmul>
 80a1bce:	4659      	mov	r1, fp
 80a1bd0:	f003 fc86 	bl	80a54e0 <__addsf3>

  // Normalise quaternion
  norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 80a1bd4:	4621      	mov	r1, r4
  pb = q3;
  pc = q4;
  q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
  q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
  q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
  q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 80a1bd6:	4606      	mov	r6, r0

  // Normalise quaternion
  norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 80a1bd8:	4620      	mov	r0, r4
 80a1bda:	f003 fd89 	bl	80a56f0 <__aeabi_fmul>
 80a1bde:	4651      	mov	r1, sl
 80a1be0:	4605      	mov	r5, r0
 80a1be2:	4650      	mov	r0, sl
 80a1be4:	f003 fd84 	bl	80a56f0 <__aeabi_fmul>
 80a1be8:	4601      	mov	r1, r0
 80a1bea:	4628      	mov	r0, r5
 80a1bec:	f003 fc78 	bl	80a54e0 <__addsf3>
 80a1bf0:	4649      	mov	r1, r9
 80a1bf2:	4605      	mov	r5, r0
 80a1bf4:	4648      	mov	r0, r9
 80a1bf6:	f003 fd7b 	bl	80a56f0 <__aeabi_fmul>
 80a1bfa:	4601      	mov	r1, r0
 80a1bfc:	4628      	mov	r0, r5
 80a1bfe:	f003 fc6f 	bl	80a54e0 <__addsf3>
 80a1c02:	4631      	mov	r1, r6
 80a1c04:	4605      	mov	r5, r0
 80a1c06:	4630      	mov	r0, r6
 80a1c08:	f003 fd72 	bl	80a56f0 <__aeabi_fmul>
 80a1c0c:	4601      	mov	r1, r0
 80a1c0e:	4628      	mov	r0, r5
 80a1c10:	f003 fc66 	bl	80a54e0 <__addsf3>
 80a1c14:	f003 f8c2 	bl	80a4d9c <__aeabi_f2d>
 80a1c18:	f001 fb20 	bl	80a325c <sqrt>
 80a1c1c:	f003 fc0a 	bl	80a5434 <__aeabi_d2f>
  norm = 1.0f / norm;
 80a1c20:	4601      	mov	r1, r0
 80a1c22:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a1c26:	f003 fe17 	bl	80a5858 <__aeabi_fdiv>
 80a1c2a:	4605      	mov	r5, r0
  q[0] = q1 * norm;
 80a1c2c:	4601      	mov	r1, r0
 80a1c2e:	4620      	mov	r0, r4
 80a1c30:	f003 fd5e 	bl	80a56f0 <__aeabi_fmul>
 80a1c34:	4b0c      	ldr	r3, [pc, #48]	; (80a1c68 <_Z22MahonyQuaternionUpdateffffffffff+0x5b4>)
  q[1] = q2 * norm;
 80a1c36:	4629      	mov	r1, r5
  q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);

  // Normalise quaternion
  norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
  norm = 1.0f / norm;
  q[0] = q1 * norm;
 80a1c38:	6018      	str	r0, [r3, #0]
  q[1] = q2 * norm;
 80a1c3a:	4650      	mov	r0, sl
 80a1c3c:	f003 fd58 	bl	80a56f0 <__aeabi_fmul>
 80a1c40:	4b09      	ldr	r3, [pc, #36]	; (80a1c68 <_Z22MahonyQuaternionUpdateffffffffff+0x5b4>)
  q[2] = q3 * norm;
 80a1c42:	4629      	mov	r1, r5

  // Normalise quaternion
  norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
  norm = 1.0f / norm;
  q[0] = q1 * norm;
  q[1] = q2 * norm;
 80a1c44:	6058      	str	r0, [r3, #4]
  q[2] = q3 * norm;
 80a1c46:	4648      	mov	r0, r9
 80a1c48:	f003 fd52 	bl	80a56f0 <__aeabi_fmul>
 80a1c4c:	4b06      	ldr	r3, [pc, #24]	; (80a1c68 <_Z22MahonyQuaternionUpdateffffffffff+0x5b4>)
  q[3] = q4 * norm;
 80a1c4e:	4629      	mov	r1, r5
  // Normalise quaternion
  norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
  norm = 1.0f / norm;
  q[0] = q1 * norm;
  q[1] = q2 * norm;
  q[2] = q3 * norm;
 80a1c50:	6098      	str	r0, [r3, #8]
  q[3] = q4 * norm;
 80a1c52:	4630      	mov	r0, r6
 80a1c54:	f003 fd4c 	bl	80a56f0 <__aeabi_fmul>
 80a1c58:	4b03      	ldr	r3, [pc, #12]	; (80a1c68 <_Z22MahonyQuaternionUpdateffffffffff+0x5b4>)
 80a1c5a:	60d8      	str	r0, [r3, #12]
}
 80a1c5c:	b017      	add	sp, #92	; 0x5c
 80a1c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1c62:	bf00      	nop
 80a1c64:	41200000 	.word	0x41200000
 80a1c68:	20000008 	.word	0x20000008

080a1c6c <_Z4getQv>:

const float * getQ () { return q; }
 80a1c6c:	4800      	ldr	r0, [pc, #0]	; (80a1c70 <_Z4getQv+0x4>)
 80a1c6e:	4770      	bx	lr
 80a1c70:	20000008 	.word	0x20000008

080a1c74 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff>:
 80a1c74:	b508      	push	{r3, lr}
 80a1c76:	f000 f829 	bl	80a1ccc <HAL_Pin_Map>
// noticed any reduction in solution accuracy. This is essentially the I
// coefficient in a PID control sense; the bigger the feedback coefficient,
// the faster the solution converges, usually at the expense of accuracy.
// In any case, this is the free parameter in the Madgwick filtering and
// fusion scheme.
static float beta = sqrt(3.0f / 4.0f) * GyroMeasError;   // Compute beta
 80a1c7a:	4a02      	ldr	r2, [pc, #8]	; (80a1c84 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x10>)
 80a1c7c:	4b02      	ldr	r3, [pc, #8]	; (80a1c88 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x14>)
 80a1c7e:	601a      	str	r2, [r3, #0]
 80a1c80:	bd08      	pop	{r3, pc}
 80a1c82:	bf00      	nop
 80a1c84:	3f1ac70d 	.word	0x3f1ac70d
 80a1c88:	2000014c 	.word	0x2000014c

080a1c8c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1c8c:	b508      	push	{r3, lr}
 80a1c8e:	4b02      	ldr	r3, [pc, #8]	; (80a1c98 <os_mutex_create+0xc>)
 80a1c90:	681b      	ldr	r3, [r3, #0]
 80a1c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1c94:	9301      	str	r3, [sp, #4]
 80a1c96:	bd08      	pop	{r3, pc}
 80a1c98:	080601d0 	.word	0x080601d0

080a1c9c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1c9c:	b508      	push	{r3, lr}
 80a1c9e:	4b02      	ldr	r3, [pc, #8]	; (80a1ca8 <HAL_RNG_GetRandomNumber+0xc>)
 80a1ca0:	681b      	ldr	r3, [r3, #0]
 80a1ca2:	685b      	ldr	r3, [r3, #4]
 80a1ca4:	9301      	str	r3, [sp, #4]
 80a1ca6:	bd08      	pop	{r3, pc}
 80a1ca8:	0806019c 	.word	0x0806019c

080a1cac <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1cac:	b508      	push	{r3, lr}
 80a1cae:	4b02      	ldr	r3, [pc, #8]	; (80a1cb8 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1cb0:	681b      	ldr	r3, [r3, #0]
 80a1cb2:	691b      	ldr	r3, [r3, #16]
 80a1cb4:	9301      	str	r3, [sp, #4]
 80a1cb6:	bd08      	pop	{r3, pc}
 80a1cb8:	0806019c 	.word	0x0806019c

080a1cbc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1cbc:	b508      	push	{r3, lr}
 80a1cbe:	4b02      	ldr	r3, [pc, #8]	; (80a1cc8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1cc0:	681b      	ldr	r3, [r3, #0]
 80a1cc2:	695b      	ldr	r3, [r3, #20]
 80a1cc4:	9301      	str	r3, [sp, #4]
 80a1cc6:	bd08      	pop	{r3, pc}
 80a1cc8:	0806019c 	.word	0x0806019c

080a1ccc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1ccc:	b508      	push	{r3, lr}
 80a1cce:	4b02      	ldr	r3, [pc, #8]	; (80a1cd8 <HAL_Pin_Map+0xc>)
 80a1cd0:	681b      	ldr	r3, [r3, #0]
 80a1cd2:	681b      	ldr	r3, [r3, #0]
 80a1cd4:	9301      	str	r3, [sp, #4]
 80a1cd6:	bd08      	pop	{r3, pc}
 80a1cd8:	080601b0 	.word	0x080601b0

080a1cdc <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1cdc:	b508      	push	{r3, lr}
 80a1cde:	4b02      	ldr	r3, [pc, #8]	; (80a1ce8 <HAL_Pin_Mode+0xc>)
 80a1ce0:	681b      	ldr	r3, [r3, #0]
 80a1ce2:	689b      	ldr	r3, [r3, #8]
 80a1ce4:	9301      	str	r3, [sp, #4]
 80a1ce6:	bd08      	pop	{r3, pc}
 80a1ce8:	080601b0 	.word	0x080601b0

080a1cec <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1cec:	b508      	push	{r3, lr}
 80a1cee:	4b02      	ldr	r3, [pc, #8]	; (80a1cf8 <HAL_Get_Pin_Mode+0xc>)
 80a1cf0:	681b      	ldr	r3, [r3, #0]
 80a1cf2:	68db      	ldr	r3, [r3, #12]
 80a1cf4:	9301      	str	r3, [sp, #4]
 80a1cf6:	bd08      	pop	{r3, pc}
 80a1cf8:	080601b0 	.word	0x080601b0

080a1cfc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1cfc:	b508      	push	{r3, lr}
 80a1cfe:	4b02      	ldr	r3, [pc, #8]	; (80a1d08 <HAL_GPIO_Write+0xc>)
 80a1d00:	681b      	ldr	r3, [r3, #0]
 80a1d02:	691b      	ldr	r3, [r3, #16]
 80a1d04:	9301      	str	r3, [sp, #4]
 80a1d06:	bd08      	pop	{r3, pc}
 80a1d08:	080601b0 	.word	0x080601b0

080a1d0c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a1d0c:	b508      	push	{r3, lr}
 80a1d0e:	4b02      	ldr	r3, [pc, #8]	; (80a1d18 <HAL_I2C_Begin+0xc>)
 80a1d10:	681b      	ldr	r3, [r3, #0]
 80a1d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1d14:	9301      	str	r3, [sp, #4]
 80a1d16:	bd08      	pop	{r3, pc}
 80a1d18:	080601ac 	.word	0x080601ac

080a1d1c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a1d1c:	b508      	push	{r3, lr}
 80a1d1e:	4b02      	ldr	r3, [pc, #8]	; (80a1d28 <HAL_I2C_Request_Data+0xc>)
 80a1d20:	681b      	ldr	r3, [r3, #0]
 80a1d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1d24:	9301      	str	r3, [sp, #4]
 80a1d26:	bd08      	pop	{r3, pc}
 80a1d28:	080601ac 	.word	0x080601ac

080a1d2c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a1d2c:	b508      	push	{r3, lr}
 80a1d2e:	4b02      	ldr	r3, [pc, #8]	; (80a1d38 <HAL_I2C_Begin_Transmission+0xc>)
 80a1d30:	681b      	ldr	r3, [r3, #0]
 80a1d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1d34:	9301      	str	r3, [sp, #4]
 80a1d36:	bd08      	pop	{r3, pc}
 80a1d38:	080601ac 	.word	0x080601ac

080a1d3c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a1d3c:	b508      	push	{r3, lr}
 80a1d3e:	4b02      	ldr	r3, [pc, #8]	; (80a1d48 <HAL_I2C_End_Transmission+0xc>)
 80a1d40:	681b      	ldr	r3, [r3, #0]
 80a1d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1d44:	9301      	str	r3, [sp, #4]
 80a1d46:	bd08      	pop	{r3, pc}
 80a1d48:	080601ac 	.word	0x080601ac

080a1d4c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1d4c:	b508      	push	{r3, lr}
 80a1d4e:	4b02      	ldr	r3, [pc, #8]	; (80a1d58 <HAL_I2C_Write_Data+0xc>)
 80a1d50:	681b      	ldr	r3, [r3, #0]
 80a1d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1d54:	9301      	str	r3, [sp, #4]
 80a1d56:	bd08      	pop	{r3, pc}
 80a1d58:	080601ac 	.word	0x080601ac

080a1d5c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1d5c:	b508      	push	{r3, lr}
 80a1d5e:	4b02      	ldr	r3, [pc, #8]	; (80a1d68 <HAL_I2C_Available_Data+0xc>)
 80a1d60:	681b      	ldr	r3, [r3, #0]
 80a1d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1d64:	9301      	str	r3, [sp, #4]
 80a1d66:	bd08      	pop	{r3, pc}
 80a1d68:	080601ac 	.word	0x080601ac

080a1d6c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1d6c:	b508      	push	{r3, lr}
 80a1d6e:	4b02      	ldr	r3, [pc, #8]	; (80a1d78 <HAL_I2C_Read_Data+0xc>)
 80a1d70:	681b      	ldr	r3, [r3, #0]
 80a1d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1d74:	9301      	str	r3, [sp, #4]
 80a1d76:	bd08      	pop	{r3, pc}
 80a1d78:	080601ac 	.word	0x080601ac

080a1d7c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1d7c:	b508      	push	{r3, lr}
 80a1d7e:	4b02      	ldr	r3, [pc, #8]	; (80a1d88 <HAL_I2C_Peek_Data+0xc>)
 80a1d80:	681b      	ldr	r3, [r3, #0]
 80a1d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1d84:	9301      	str	r3, [sp, #4]
 80a1d86:	bd08      	pop	{r3, pc}
 80a1d88:	080601ac 	.word	0x080601ac

080a1d8c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1d8c:	b508      	push	{r3, lr}
 80a1d8e:	4b02      	ldr	r3, [pc, #8]	; (80a1d98 <HAL_I2C_Flush_Data+0xc>)
 80a1d90:	681b      	ldr	r3, [r3, #0]
 80a1d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1d94:	9301      	str	r3, [sp, #4]
 80a1d96:	bd08      	pop	{r3, pc}
 80a1d98:	080601ac 	.word	0x080601ac

080a1d9c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1d9c:	b508      	push	{r3, lr}
 80a1d9e:	4b02      	ldr	r3, [pc, #8]	; (80a1da8 <HAL_I2C_Is_Enabled+0xc>)
 80a1da0:	681b      	ldr	r3, [r3, #0]
 80a1da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1da4:	9301      	str	r3, [sp, #4]
 80a1da6:	bd08      	pop	{r3, pc}
 80a1da8:	080601ac 	.word	0x080601ac

080a1dac <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1dac:	b508      	push	{r3, lr}
 80a1dae:	4b03      	ldr	r3, [pc, #12]	; (80a1dbc <HAL_I2C_Init+0x10>)
 80a1db0:	681b      	ldr	r3, [r3, #0]
 80a1db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1db6:	9301      	str	r3, [sp, #4]
 80a1db8:	bd08      	pop	{r3, pc}
 80a1dba:	0000      	.short	0x0000
 80a1dbc:	080601ac 	.word	0x080601ac

080a1dc0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1dc0:	b508      	push	{r3, lr}
 80a1dc2:	4b02      	ldr	r3, [pc, #8]	; (80a1dcc <HAL_SPI_Init+0xc>)
 80a1dc4:	681b      	ldr	r3, [r3, #0]
 80a1dc6:	69db      	ldr	r3, [r3, #28]
 80a1dc8:	9301      	str	r3, [sp, #4]
 80a1dca:	bd08      	pop	{r3, pc}
 80a1dcc:	080601b4 	.word	0x080601b4

080a1dd0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1dd0:	b508      	push	{r3, lr}
 80a1dd2:	4b02      	ldr	r3, [pc, #8]	; (80a1ddc <HAL_SPI_Is_Enabled+0xc>)
 80a1dd4:	681b      	ldr	r3, [r3, #0]
 80a1dd6:	6a1b      	ldr	r3, [r3, #32]
 80a1dd8:	9301      	str	r3, [sp, #4]
 80a1dda:	bd08      	pop	{r3, pc}
 80a1ddc:	080601b4 	.word	0x080601b4

080a1de0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1de0:	b508      	push	{r3, lr}
 80a1de2:	4b02      	ldr	r3, [pc, #8]	; (80a1dec <HAL_USART_Init+0xc>)
 80a1de4:	681b      	ldr	r3, [r3, #0]
 80a1de6:	699b      	ldr	r3, [r3, #24]
 80a1de8:	9301      	str	r3, [sp, #4]
 80a1dea:	bd08      	pop	{r3, pc}
 80a1dec:	080601c4 	.word	0x080601c4

080a1df0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1df0:	b508      	push	{r3, lr}
 80a1df2:	4b02      	ldr	r3, [pc, #8]	; (80a1dfc <HAL_USART_Write_Data+0xc>)
 80a1df4:	681b      	ldr	r3, [r3, #0]
 80a1df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1df8:	9301      	str	r3, [sp, #4]
 80a1dfa:	bd08      	pop	{r3, pc}
 80a1dfc:	080601c4 	.word	0x080601c4

080a1e00 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1e00:	b508      	push	{r3, lr}
 80a1e02:	4b02      	ldr	r3, [pc, #8]	; (80a1e0c <HAL_USART_Available_Data+0xc>)
 80a1e04:	681b      	ldr	r3, [r3, #0]
 80a1e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1e08:	9301      	str	r3, [sp, #4]
 80a1e0a:	bd08      	pop	{r3, pc}
 80a1e0c:	080601c4 	.word	0x080601c4

080a1e10 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1e10:	b508      	push	{r3, lr}
 80a1e12:	4b02      	ldr	r3, [pc, #8]	; (80a1e1c <HAL_USART_Read_Data+0xc>)
 80a1e14:	681b      	ldr	r3, [r3, #0]
 80a1e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1e18:	9301      	str	r3, [sp, #4]
 80a1e1a:	bd08      	pop	{r3, pc}
 80a1e1c:	080601c4 	.word	0x080601c4

080a1e20 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1e20:	b508      	push	{r3, lr}
 80a1e22:	4b02      	ldr	r3, [pc, #8]	; (80a1e2c <HAL_USART_Peek_Data+0xc>)
 80a1e24:	681b      	ldr	r3, [r3, #0]
 80a1e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1e28:	9301      	str	r3, [sp, #4]
 80a1e2a:	bd08      	pop	{r3, pc}
 80a1e2c:	080601c4 	.word	0x080601c4

080a1e30 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1e30:	b508      	push	{r3, lr}
 80a1e32:	4b02      	ldr	r3, [pc, #8]	; (80a1e3c <HAL_USART_Flush_Data+0xc>)
 80a1e34:	681b      	ldr	r3, [r3, #0]
 80a1e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1e38:	9301      	str	r3, [sp, #4]
 80a1e3a:	bd08      	pop	{r3, pc}
 80a1e3c:	080601c4 	.word	0x080601c4

080a1e40 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1e40:	b508      	push	{r3, lr}
 80a1e42:	4b02      	ldr	r3, [pc, #8]	; (80a1e4c <HAL_USART_Is_Enabled+0xc>)
 80a1e44:	681b      	ldr	r3, [r3, #0]
 80a1e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1e48:	9301      	str	r3, [sp, #4]
 80a1e4a:	bd08      	pop	{r3, pc}
 80a1e4c:	080601c4 	.word	0x080601c4

080a1e50 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1e50:	b508      	push	{r3, lr}
 80a1e52:	4b02      	ldr	r3, [pc, #8]	; (80a1e5c <HAL_USART_Available_Data_For_Write+0xc>)
 80a1e54:	681b      	ldr	r3, [r3, #0]
 80a1e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1e58:	9301      	str	r3, [sp, #4]
 80a1e5a:	bd08      	pop	{r3, pc}
 80a1e5c:	080601c4 	.word	0x080601c4

080a1e60 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1e60:	b508      	push	{r3, lr}
 80a1e62:	4b02      	ldr	r3, [pc, #8]	; (80a1e6c <HAL_USB_USART_Init+0xc>)
 80a1e64:	681b      	ldr	r3, [r3, #0]
 80a1e66:	681b      	ldr	r3, [r3, #0]
 80a1e68:	9301      	str	r3, [sp, #4]
 80a1e6a:	bd08      	pop	{r3, pc}
 80a1e6c:	080601d8 	.word	0x080601d8

080a1e70 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1e70:	b508      	push	{r3, lr}
 80a1e72:	4b02      	ldr	r3, [pc, #8]	; (80a1e7c <HAL_USB_USART_Begin+0xc>)
 80a1e74:	681b      	ldr	r3, [r3, #0]
 80a1e76:	685b      	ldr	r3, [r3, #4]
 80a1e78:	9301      	str	r3, [sp, #4]
 80a1e7a:	bd08      	pop	{r3, pc}
 80a1e7c:	080601d8 	.word	0x080601d8

080a1e80 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1e80:	b508      	push	{r3, lr}
 80a1e82:	4b02      	ldr	r3, [pc, #8]	; (80a1e8c <HAL_USB_USART_Available_Data+0xc>)
 80a1e84:	681b      	ldr	r3, [r3, #0]
 80a1e86:	691b      	ldr	r3, [r3, #16]
 80a1e88:	9301      	str	r3, [sp, #4]
 80a1e8a:	bd08      	pop	{r3, pc}
 80a1e8c:	080601d8 	.word	0x080601d8

080a1e90 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1e90:	b508      	push	{r3, lr}
 80a1e92:	4b02      	ldr	r3, [pc, #8]	; (80a1e9c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1e94:	681b      	ldr	r3, [r3, #0]
 80a1e96:	695b      	ldr	r3, [r3, #20]
 80a1e98:	9301      	str	r3, [sp, #4]
 80a1e9a:	bd08      	pop	{r3, pc}
 80a1e9c:	080601d8 	.word	0x080601d8

080a1ea0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1ea0:	b508      	push	{r3, lr}
 80a1ea2:	4b02      	ldr	r3, [pc, #8]	; (80a1eac <HAL_USB_USART_Receive_Data+0xc>)
 80a1ea4:	681b      	ldr	r3, [r3, #0]
 80a1ea6:	699b      	ldr	r3, [r3, #24]
 80a1ea8:	9301      	str	r3, [sp, #4]
 80a1eaa:	bd08      	pop	{r3, pc}
 80a1eac:	080601d8 	.word	0x080601d8

080a1eb0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1eb0:	b508      	push	{r3, lr}
 80a1eb2:	4b02      	ldr	r3, [pc, #8]	; (80a1ebc <HAL_USB_USART_Send_Data+0xc>)
 80a1eb4:	681b      	ldr	r3, [r3, #0]
 80a1eb6:	69db      	ldr	r3, [r3, #28]
 80a1eb8:	9301      	str	r3, [sp, #4]
 80a1eba:	bd08      	pop	{r3, pc}
 80a1ebc:	080601d8 	.word	0x080601d8

080a1ec0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1ec0:	b508      	push	{r3, lr}
 80a1ec2:	4b02      	ldr	r3, [pc, #8]	; (80a1ecc <HAL_USB_USART_Flush_Data+0xc>)
 80a1ec4:	681b      	ldr	r3, [r3, #0]
 80a1ec6:	6a1b      	ldr	r3, [r3, #32]
 80a1ec8:	9301      	str	r3, [sp, #4]
 80a1eca:	bd08      	pop	{r3, pc}
 80a1ecc:	080601d8 	.word	0x080601d8

080a1ed0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1ed0:	b508      	push	{r3, lr}
 80a1ed2:	4b02      	ldr	r3, [pc, #8]	; (80a1edc <inet_gethostbyname+0xc>)
 80a1ed4:	681b      	ldr	r3, [r3, #0]
 80a1ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1ed8:	9301      	str	r3, [sp, #4]
 80a1eda:	bd08      	pop	{r3, pc}
 80a1edc:	080601c0 	.word	0x080601c0

080a1ee0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1ee0:	b508      	push	{r3, lr}
 80a1ee2:	4b02      	ldr	r3, [pc, #8]	; (80a1eec <set_system_mode+0xc>)
 80a1ee4:	681b      	ldr	r3, [r3, #0]
 80a1ee6:	685b      	ldr	r3, [r3, #4]
 80a1ee8:	9301      	str	r3, [sp, #4]
 80a1eea:	bd08      	pop	{r3, pc}
 80a1eec:	080601a4 	.word	0x080601a4

080a1ef0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1ef0:	b508      	push	{r3, lr}
 80a1ef2:	4b02      	ldr	r3, [pc, #8]	; (80a1efc <system_delay_ms+0xc>)
 80a1ef4:	681b      	ldr	r3, [r3, #0]
 80a1ef6:	695b      	ldr	r3, [r3, #20]
 80a1ef8:	9301      	str	r3, [sp, #4]
 80a1efa:	bd08      	pop	{r3, pc}
 80a1efc:	080601a4 	.word	0x080601a4

080a1f00 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1f00:	b508      	push	{r3, lr}
 80a1f02:	4b03      	ldr	r3, [pc, #12]	; (80a1f10 <system_ctrl_set_app_request_handler+0x10>)
 80a1f04:	681b      	ldr	r3, [r3, #0]
 80a1f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1f0a:	9301      	str	r3, [sp, #4]
 80a1f0c:	bd08      	pop	{r3, pc}
 80a1f0e:	0000      	.short	0x0000
 80a1f10:	080601a4 	.word	0x080601a4

080a1f14 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1f14:	b508      	push	{r3, lr}
 80a1f16:	4b03      	ldr	r3, [pc, #12]	; (80a1f24 <system_ctrl_set_result+0x10>)
 80a1f18:	681b      	ldr	r3, [r3, #0]
 80a1f1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1f1e:	9301      	str	r3, [sp, #4]
 80a1f20:	bd08      	pop	{r3, pc}
 80a1f22:	0000      	.short	0x0000
 80a1f24:	080601a4 	.word	0x080601a4

080a1f28 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1f28:	b508      	push	{r3, lr}
 80a1f2a:	4b02      	ldr	r3, [pc, #8]	; (80a1f34 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1f2c:	681b      	ldr	r3, [r3, #0]
 80a1f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1f30:	9301      	str	r3, [sp, #4]
 80a1f32:	bd08      	pop	{r3, pc}
 80a1f34:	080601cc 	.word	0x080601cc

080a1f38 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1f38:	b508      	push	{r3, lr}
 80a1f3a:	4b02      	ldr	r3, [pc, #8]	; (80a1f44 <network_connect+0xc>)
 80a1f3c:	681b      	ldr	r3, [r3, #0]
 80a1f3e:	685b      	ldr	r3, [r3, #4]
 80a1f40:	9301      	str	r3, [sp, #4]
 80a1f42:	bd08      	pop	{r3, pc}
 80a1f44:	080601c8 	.word	0x080601c8

080a1f48 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1f48:	b508      	push	{r3, lr}
 80a1f4a:	4b02      	ldr	r3, [pc, #8]	; (80a1f54 <network_connecting+0xc>)
 80a1f4c:	681b      	ldr	r3, [r3, #0]
 80a1f4e:	689b      	ldr	r3, [r3, #8]
 80a1f50:	9301      	str	r3, [sp, #4]
 80a1f52:	bd08      	pop	{r3, pc}
 80a1f54:	080601c8 	.word	0x080601c8

080a1f58 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1f58:	b508      	push	{r3, lr}
 80a1f5a:	4b02      	ldr	r3, [pc, #8]	; (80a1f64 <network_disconnect+0xc>)
 80a1f5c:	681b      	ldr	r3, [r3, #0]
 80a1f5e:	68db      	ldr	r3, [r3, #12]
 80a1f60:	9301      	str	r3, [sp, #4]
 80a1f62:	bd08      	pop	{r3, pc}
 80a1f64:	080601c8 	.word	0x080601c8

080a1f68 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1f68:	b508      	push	{r3, lr}
 80a1f6a:	4b02      	ldr	r3, [pc, #8]	; (80a1f74 <network_ready+0xc>)
 80a1f6c:	681b      	ldr	r3, [r3, #0]
 80a1f6e:	691b      	ldr	r3, [r3, #16]
 80a1f70:	9301      	str	r3, [sp, #4]
 80a1f72:	bd08      	pop	{r3, pc}
 80a1f74:	080601c8 	.word	0x080601c8

080a1f78 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1f78:	b508      	push	{r3, lr}
 80a1f7a:	4b02      	ldr	r3, [pc, #8]	; (80a1f84 <network_on+0xc>)
 80a1f7c:	681b      	ldr	r3, [r3, #0]
 80a1f7e:	695b      	ldr	r3, [r3, #20]
 80a1f80:	9301      	str	r3, [sp, #4]
 80a1f82:	bd08      	pop	{r3, pc}
 80a1f84:	080601c8 	.word	0x080601c8

080a1f88 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1f88:	b508      	push	{r3, lr}
 80a1f8a:	4b02      	ldr	r3, [pc, #8]	; (80a1f94 <network_off+0xc>)
 80a1f8c:	681b      	ldr	r3, [r3, #0]
 80a1f8e:	699b      	ldr	r3, [r3, #24]
 80a1f90:	9301      	str	r3, [sp, #4]
 80a1f92:	bd08      	pop	{r3, pc}
 80a1f94:	080601c8 	.word	0x080601c8

080a1f98 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1f98:	b508      	push	{r3, lr}
 80a1f9a:	4b02      	ldr	r3, [pc, #8]	; (80a1fa4 <network_listen+0xc>)
 80a1f9c:	681b      	ldr	r3, [r3, #0]
 80a1f9e:	69db      	ldr	r3, [r3, #28]
 80a1fa0:	9301      	str	r3, [sp, #4]
 80a1fa2:	bd08      	pop	{r3, pc}
 80a1fa4:	080601c8 	.word	0x080601c8

080a1fa8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1fa8:	b508      	push	{r3, lr}
 80a1faa:	4b02      	ldr	r3, [pc, #8]	; (80a1fb4 <network_listening+0xc>)
 80a1fac:	681b      	ldr	r3, [r3, #0]
 80a1fae:	6a1b      	ldr	r3, [r3, #32]
 80a1fb0:	9301      	str	r3, [sp, #4]
 80a1fb2:	bd08      	pop	{r3, pc}
 80a1fb4:	080601c8 	.word	0x080601c8

080a1fb8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1fb8:	b508      	push	{r3, lr}
 80a1fba:	4b02      	ldr	r3, [pc, #8]	; (80a1fc4 <network_set_listen_timeout+0xc>)
 80a1fbc:	681b      	ldr	r3, [r3, #0]
 80a1fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1fc0:	9301      	str	r3, [sp, #4]
 80a1fc2:	bd08      	pop	{r3, pc}
 80a1fc4:	080601c8 	.word	0x080601c8

080a1fc8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1fc8:	b508      	push	{r3, lr}
 80a1fca:	4b02      	ldr	r3, [pc, #8]	; (80a1fd4 <network_get_listen_timeout+0xc>)
 80a1fcc:	681b      	ldr	r3, [r3, #0]
 80a1fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1fd0:	9301      	str	r3, [sp, #4]
 80a1fd2:	bd08      	pop	{r3, pc}
 80a1fd4:	080601c8 	.word	0x080601c8

080a1fd8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1fd8:	b508      	push	{r3, lr}
 80a1fda:	4b02      	ldr	r3, [pc, #8]	; (80a1fe4 <malloc+0xc>)
 80a1fdc:	681b      	ldr	r3, [r3, #0]
 80a1fde:	681b      	ldr	r3, [r3, #0]
 80a1fe0:	9301      	str	r3, [sp, #4]
 80a1fe2:	bd08      	pop	{r3, pc}
 80a1fe4:	080601a0 	.word	0x080601a0

080a1fe8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1fe8:	b508      	push	{r3, lr}
 80a1fea:	4b02      	ldr	r3, [pc, #8]	; (80a1ff4 <free+0xc>)
 80a1fec:	681b      	ldr	r3, [r3, #0]
 80a1fee:	685b      	ldr	r3, [r3, #4]
 80a1ff0:	9301      	str	r3, [sp, #4]
 80a1ff2:	bd08      	pop	{r3, pc}
 80a1ff4:	080601a0 	.word	0x080601a0

080a1ff8 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a1ff8:	b508      	push	{r3, lr}
 80a1ffa:	4b02      	ldr	r3, [pc, #8]	; (80a2004 <__errno+0xc>)
 80a1ffc:	681b      	ldr	r3, [r3, #0]
 80a1ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2000:	9301      	str	r3, [sp, #4]
 80a2002:	bd08      	pop	{r3, pc}
 80a2004:	080601a0 	.word	0x080601a0

080a2008 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2008:	2100      	movs	r1, #0
 80a200a:	f7ff bf71 	b.w	80a1ef0 <system_delay_ms>

080a200e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a200e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2010:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2012:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a2014:	b113      	cbz	r3, 80a201c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2016:	2203      	movs	r2, #3
 80a2018:	4601      	mov	r1, r0
 80a201a:	4798      	blx	r3
    }
 80a201c:	4620      	mov	r0, r4
 80a201e:	bd10      	pop	{r4, pc}

080a2020 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2020:	4770      	bx	lr

080a2022 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2024:	4606      	mov	r6, r0
 80a2026:	4615      	mov	r5, r2
 80a2028:	460c      	mov	r4, r1
 80a202a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a202c:	42bc      	cmp	r4, r7
 80a202e:	d006      	beq.n	80a203e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2030:	6833      	ldr	r3, [r6, #0]
 80a2032:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2036:	689b      	ldr	r3, [r3, #8]
 80a2038:	4630      	mov	r0, r6
 80a203a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a203c:	e7f6      	b.n	80a202c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a203e:	4628      	mov	r0, r5
 80a2040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2042 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2042:	2200      	movs	r2, #0
 80a2044:	7c00      	ldrb	r0, [r0, #16]
 80a2046:	f7ff be81 	b.w	80a1d4c <HAL_I2C_Write_Data>

080a204a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a204a:	2100      	movs	r1, #0
 80a204c:	7c00      	ldrb	r0, [r0, #16]
 80a204e:	f7ff be85 	b.w	80a1d5c <HAL_I2C_Available_Data>

080a2052 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a2052:	2100      	movs	r1, #0
 80a2054:	7c00      	ldrb	r0, [r0, #16]
 80a2056:	f7ff be89 	b.w	80a1d6c <HAL_I2C_Read_Data>

080a205a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a205a:	2100      	movs	r1, #0
 80a205c:	7c00      	ldrb	r0, [r0, #16]
 80a205e:	f7ff be8d 	b.w	80a1d7c <HAL_I2C_Peek_Data>

080a2062 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2062:	2100      	movs	r1, #0
 80a2064:	7c00      	ldrb	r0, [r0, #16]
 80a2066:	f7ff be91 	b.w	80a1d8c <HAL_I2C_Flush_Data>

080a206a <_ZN7TwoWireD0Ev>:
 80a206a:	b510      	push	{r4, lr}
 80a206c:	4604      	mov	r4, r0
 80a206e:	2114      	movs	r1, #20
 80a2070:	f000 fdb7 	bl	80a2be2 <_ZdlPvj>
 80a2074:	4620      	mov	r0, r4
 80a2076:	bd10      	pop	{r4, pc}

080a2078 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2078:	b510      	push	{r4, lr}
 80a207a:	4604      	mov	r4, r0
 80a207c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a207e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2082:	60a3      	str	r3, [r4, #8]
 80a2084:	4b04      	ldr	r3, [pc, #16]	; (80a2098 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2086:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a2088:	7420      	strb	r0, [r4, #16]
 80a208a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a208c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a208e:	f7ff fe8d 	bl	80a1dac <HAL_I2C_Init>

}
 80a2092:	4620      	mov	r0, r4
 80a2094:	bd10      	pop	{r4, pc}
 80a2096:	bf00      	nop
 80a2098:	080a5e50 	.word	0x080a5e50

080a209c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a209c:	2300      	movs	r3, #0
 80a209e:	461a      	mov	r2, r3
 80a20a0:	4619      	mov	r1, r3
 80a20a2:	7c00      	ldrb	r0, [r0, #16]
 80a20a4:	f7ff be32 	b.w	80a1d0c <HAL_I2C_Begin>

080a20a8 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a20a8:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a20aa:	2400      	movs	r4, #0
 80a20ac:	7c00      	ldrb	r0, [r0, #16]
 80a20ae:	9400      	str	r4, [sp, #0]
 80a20b0:	f7ff fe34 	bl	80a1d1c <HAL_I2C_Request_Data>
  return result;
}
 80a20b4:	b2c0      	uxtb	r0, r0
 80a20b6:	b002      	add	sp, #8
 80a20b8:	bd10      	pop	{r4, pc}

080a20ba <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a20ba:	2301      	movs	r3, #1
 80a20bc:	f7ff bff4 	b.w	80a20a8 <_ZN7TwoWire11requestFromEhhh>

080a20c0 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a20c0:	2200      	movs	r2, #0
 80a20c2:	7c00      	ldrb	r0, [r0, #16]
 80a20c4:	f7ff be32 	b.w	80a1d2c <HAL_I2C_Begin_Transmission>

080a20c8 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a20c8:	2200      	movs	r2, #0
 80a20ca:	7c00      	ldrb	r0, [r0, #16]
 80a20cc:	f7ff be36 	b.w	80a1d3c <HAL_I2C_End_Transmission>

080a20d0 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a20d0:	2101      	movs	r1, #1
 80a20d2:	f7ff bff9 	b.w	80a20c8 <_ZN7TwoWire15endTransmissionEh>

080a20d6 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a20d6:	2100      	movs	r1, #0
 80a20d8:	7c00      	ldrb	r0, [r0, #16]
 80a20da:	f7ff be5f 	b.w	80a1d9c <HAL_I2C_Is_Enabled>

080a20de <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a20de:	4770      	bx	lr

080a20e0 <_ZN9IPAddressD0Ev>:
 80a20e0:	b510      	push	{r4, lr}
 80a20e2:	4604      	mov	r4, r0
 80a20e4:	2118      	movs	r1, #24
 80a20e6:	f000 fd7c 	bl	80a2be2 <_ZdlPvj>
 80a20ea:	4620      	mov	r0, r4
 80a20ec:	bd10      	pop	{r4, pc}

080a20ee <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a20ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a20f0:	460f      	mov	r7, r1
 80a20f2:	f100 0608 	add.w	r6, r0, #8
 80a20f6:	1d05      	adds	r5, r0, #4
 80a20f8:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a20fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a20fe:	220a      	movs	r2, #10
 80a2100:	4638      	mov	r0, r7
 80a2102:	f000 f92a 	bl	80a235a <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2106:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2108:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a210a:	d007      	beq.n	80a211c <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a210c:	2c00      	cmp	r4, #0
 80a210e:	d0f4      	beq.n	80a20fa <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2110:	212e      	movs	r1, #46	; 0x2e
 80a2112:	4638      	mov	r0, r7
 80a2114:	f000 f8de 	bl	80a22d4 <_ZN5Print5printEc>
 80a2118:	4404      	add	r4, r0
 80a211a:	e7ee      	b.n	80a20fa <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a211c:	4620      	mov	r0, r4
 80a211e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2120 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2120:	b510      	push	{r4, lr}
 80a2122:	4604      	mov	r4, r0
 80a2124:	4b04      	ldr	r3, [pc, #16]	; (80a2138 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2126:	2211      	movs	r2, #17
 80a2128:	f840 3b04 	str.w	r3, [r0], #4
 80a212c:	2100      	movs	r1, #0
 80a212e:	f003 fce4 	bl	80a5afa <memset>
{
    clear();
}
 80a2132:	4620      	mov	r0, r4
 80a2134:	bd10      	pop	{r4, pc}
 80a2136:	bf00      	nop
 80a2138:	080a5e78 	.word	0x080a5e78

080a213c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a213c:	4603      	mov	r3, r0
 80a213e:	4a07      	ldr	r2, [pc, #28]	; (80a215c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2140:	b510      	push	{r4, lr}
 80a2142:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a2146:	f101 0210 	add.w	r2, r1, #16
 80a214a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a214e:	4291      	cmp	r1, r2
 80a2150:	f843 4b04 	str.w	r4, [r3], #4
 80a2154:	d1f9      	bne.n	80a214a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2156:	780a      	ldrb	r2, [r1, #0]
 80a2158:	701a      	strb	r2, [r3, #0]
}
 80a215a:	bd10      	pop	{r4, pc}
 80a215c:	080a5e78 	.word	0x080a5e78

080a2160 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2160:	4a02      	ldr	r2, [pc, #8]	; (80a216c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a2162:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2164:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a2166:	2204      	movs	r2, #4
 80a2168:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a216a:	4770      	bx	lr
 80a216c:	080a5e78 	.word	0x080a5e78

080a2170 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2170:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2172:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2176:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a217a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a217e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a2182:	2304      	movs	r3, #4
 80a2184:	6041      	str	r1, [r0, #4]
 80a2186:	7503      	strb	r3, [r0, #20]
 80a2188:	bd10      	pop	{r4, pc}
	...

080a218c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a218c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a218e:	4d04      	ldr	r5, [pc, #16]	; (80a21a0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2190:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2192:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2196:	9500      	str	r5, [sp, #0]
 80a2198:	f7ff ffea 	bl	80a2170 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a219c:	b003      	add	sp, #12
 80a219e:	bd30      	pop	{r4, r5, pc}
 80a21a0:	080a5e78 	.word	0x080a5e78

080a21a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a21a4:	4a01      	ldr	r2, [pc, #4]	; (80a21ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a21a6:	4b02      	ldr	r3, [pc, #8]	; (80a21b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a21a8:	601a      	str	r2, [r3, #0]
 80a21aa:	4770      	bx	lr
 80a21ac:	080a5efa 	.word	0x080a5efa
 80a21b0:	20000150 	.word	0x20000150

080a21b4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a21b4:	2300      	movs	r3, #0
 80a21b6:	461a      	mov	r2, r3
 80a21b8:	6840      	ldr	r0, [r0, #4]
 80a21ba:	f7ff bebd 	b.w	80a1f38 <network_connect>

080a21be <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a21be:	2200      	movs	r2, #0
 80a21c0:	2102      	movs	r1, #2
 80a21c2:	6840      	ldr	r0, [r0, #4]
 80a21c4:	f7ff bec8 	b.w	80a1f58 <network_disconnect>

080a21c8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a21c8:	2200      	movs	r2, #0
 80a21ca:	4611      	mov	r1, r2
 80a21cc:	6840      	ldr	r0, [r0, #4]
 80a21ce:	f7ff bebb 	b.w	80a1f48 <network_connecting>

080a21d2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a21d2:	2200      	movs	r2, #0
 80a21d4:	4611      	mov	r1, r2
 80a21d6:	6840      	ldr	r0, [r0, #4]
 80a21d8:	f7ff bec6 	b.w	80a1f68 <network_ready>

080a21dc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a21dc:	2300      	movs	r3, #0
 80a21de:	461a      	mov	r2, r3
 80a21e0:	4619      	mov	r1, r3
 80a21e2:	6840      	ldr	r0, [r0, #4]
 80a21e4:	f7ff bec8 	b.w	80a1f78 <network_on>

080a21e8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a21e8:	2300      	movs	r3, #0
 80a21ea:	461a      	mov	r2, r3
 80a21ec:	4619      	mov	r1, r3
 80a21ee:	6840      	ldr	r0, [r0, #4]
 80a21f0:	f7ff beca 	b.w	80a1f88 <network_off>

080a21f4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a21f4:	2200      	movs	r2, #0
 80a21f6:	f081 0101 	eor.w	r1, r1, #1
 80a21fa:	6840      	ldr	r0, [r0, #4]
 80a21fc:	f7ff becc 	b.w	80a1f98 <network_listen>

080a2200 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2200:	2200      	movs	r2, #0
 80a2202:	6840      	ldr	r0, [r0, #4]
 80a2204:	f7ff bed8 	b.w	80a1fb8 <network_set_listen_timeout>

080a2208 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2208:	2200      	movs	r2, #0
 80a220a:	4611      	mov	r1, r2
 80a220c:	6840      	ldr	r0, [r0, #4]
 80a220e:	f7ff bedb 	b.w	80a1fc8 <network_get_listen_timeout>

080a2212 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2212:	2200      	movs	r2, #0
 80a2214:	4611      	mov	r1, r2
 80a2216:	6840      	ldr	r0, [r0, #4]
 80a2218:	f7ff bec6 	b.w	80a1fa8 <network_listening>

080a221c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a221c:	b570      	push	{r4, r5, r6, lr}
 80a221e:	4616      	mov	r6, r2
 80a2220:	b08e      	sub	sp, #56	; 0x38
 80a2222:	4604      	mov	r4, r0
    IPAddress addr;
 80a2224:	a808      	add	r0, sp, #32
 80a2226:	f7ff ff7b 	bl	80a2120 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a222a:	2211      	movs	r2, #17
 80a222c:	2100      	movs	r1, #0
 80a222e:	a803      	add	r0, sp, #12
 80a2230:	f003 fc63 	bl	80a5afa <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2234:	4630      	mov	r0, r6
 80a2236:	f003 fc91 	bl	80a5b5c <strlen>
 80a223a:	2500      	movs	r5, #0
 80a223c:	4b0a      	ldr	r3, [pc, #40]	; (80a2268 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a223e:	9500      	str	r5, [sp, #0]
 80a2240:	b281      	uxth	r1, r0
 80a2242:	685b      	ldr	r3, [r3, #4]
 80a2244:	aa03      	add	r2, sp, #12
 80a2246:	4630      	mov	r0, r6
 80a2248:	f7ff fe42 	bl	80a1ed0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a224c:	b120      	cbz	r0, 80a2258 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a224e:	4629      	mov	r1, r5
 80a2250:	4620      	mov	r0, r4
 80a2252:	f7ff ff85 	bl	80a2160 <_ZN9IPAddressC1Em>
 80a2256:	e003      	b.n	80a2260 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2258:	a903      	add	r1, sp, #12
 80a225a:	4620      	mov	r0, r4
 80a225c:	f7ff ff6e 	bl	80a213c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2260:	4620      	mov	r0, r4
 80a2262:	b00e      	add	sp, #56	; 0x38
 80a2264:	bd70      	pop	{r4, r5, r6, pc}
 80a2266:	bf00      	nop
 80a2268:	200005d4 	.word	0x200005d4

080a226c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a226c:	4b02      	ldr	r3, [pc, #8]	; (80a2278 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a226e:	4a03      	ldr	r2, [pc, #12]	; (80a227c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2270:	601a      	str	r2, [r3, #0]
 80a2272:	2200      	movs	r2, #0
 80a2274:	605a      	str	r2, [r3, #4]
 80a2276:	4770      	bx	lr
 80a2278:	20000154 	.word	0x20000154
 80a227c:	080a5f6c 	.word	0x080a5f6c

080a2280 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2282:	4606      	mov	r6, r0
 80a2284:	460d      	mov	r5, r1
 80a2286:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a2288:	2400      	movs	r4, #0
  while (size--) {
 80a228a:	42bd      	cmp	r5, r7
 80a228c:	d00c      	beq.n	80a22a8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a228e:	6833      	ldr	r3, [r6, #0]
 80a2290:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2294:	689b      	ldr	r3, [r3, #8]
 80a2296:	4630      	mov	r0, r6
 80a2298:	4798      	blx	r3
     if (chunk>=0)
 80a229a:	2800      	cmp	r0, #0
 80a229c:	db01      	blt.n	80a22a2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a229e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a22a0:	e7f3      	b.n	80a228a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a22a2:	2c00      	cmp	r4, #0
 80a22a4:	bf08      	it	eq
 80a22a6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a22a8:	4620      	mov	r0, r4
 80a22aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a22ac <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a22ac:	b570      	push	{r4, r5, r6, lr}
 80a22ae:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a22b0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a22b2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a22b4:	b149      	cbz	r1, 80a22ca <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a22b6:	f003 fc51 	bl	80a5b5c <strlen>
 80a22ba:	682b      	ldr	r3, [r5, #0]
 80a22bc:	4602      	mov	r2, r0
 80a22be:	4621      	mov	r1, r4
 80a22c0:	4628      	mov	r0, r5
    }
 80a22c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a22c6:	68db      	ldr	r3, [r3, #12]
 80a22c8:	4718      	bx	r3
    }
 80a22ca:	bd70      	pop	{r4, r5, r6, pc}

080a22cc <_ZN5Print5printEPKc>:
 80a22cc:	b508      	push	{r3, lr}
 80a22ce:	f7ff ffed 	bl	80a22ac <_ZN5Print5writeEPKc>
 80a22d2:	bd08      	pop	{r3, pc}

080a22d4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a22d4:	6803      	ldr	r3, [r0, #0]
 80a22d6:	689b      	ldr	r3, [r3, #8]
 80a22d8:	4718      	bx	r3

080a22da <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a22da:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a22dc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a22de:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a22e0:	f7ff fff8 	bl	80a22d4 <_ZN5Print5printEc>
  n += print('\n');
 80a22e4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a22e6:	4604      	mov	r4, r0
  n += print('\n');
 80a22e8:	4628      	mov	r0, r5
 80a22ea:	f7ff fff3 	bl	80a22d4 <_ZN5Print5printEc>
  return n;
}
 80a22ee:	4420      	add	r0, r4
 80a22f0:	bd38      	pop	{r3, r4, r5, pc}

080a22f2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a22f2:	b538      	push	{r3, r4, r5, lr}
 80a22f4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a22f6:	f7ff ffd9 	bl	80a22ac <_ZN5Print5writeEPKc>
 80a22fa:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a22fc:	4628      	mov	r0, r5
 80a22fe:	f7ff ffec 	bl	80a22da <_ZN5Print7printlnEv>
  return n;
}
 80a2302:	4420      	add	r0, r4
 80a2304:	bd38      	pop	{r3, r4, r5, pc}

080a2306 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2306:	2a01      	cmp	r2, #1
 80a2308:	bf98      	it	ls
 80a230a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a230c:	b530      	push	{r4, r5, lr}
 80a230e:	460b      	mov	r3, r1
 80a2310:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2312:	2100      	movs	r1, #0
 80a2314:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a2318:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a231c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a2320:	fb05 3312 	mls	r3, r5, r2, r3
 80a2324:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2326:	2b09      	cmp	r3, #9
 80a2328:	bf94      	ite	ls
 80a232a:	3330      	addls	r3, #48	; 0x30
 80a232c:	3337      	addhi	r3, #55	; 0x37
 80a232e:	b2db      	uxtb	r3, r3
 80a2330:	4621      	mov	r1, r4
 80a2332:	f804 3901 	strb.w	r3, [r4], #-1
 80a2336:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2338:	2d00      	cmp	r5, #0
 80a233a:	d1ef      	bne.n	80a231c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a233c:	f7ff ffb6 	bl	80a22ac <_ZN5Print5writeEPKc>
}
 80a2340:	b00b      	add	sp, #44	; 0x2c
 80a2342:	bd30      	pop	{r4, r5, pc}

080a2344 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a2344:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a2346:	b922      	cbnz	r2, 80a2352 <_ZN5Print5printEmi+0xe>
 80a2348:	6803      	ldr	r3, [r0, #0]
 80a234a:	b2c9      	uxtb	r1, r1
 80a234c:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a234e:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a2350:	4718      	bx	r3
  else return printNumber(n, base);
 80a2352:	b2d2      	uxtb	r2, r2
}
 80a2354:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2356:	f7ff bfd6 	b.w	80a2306 <_ZN5Print11printNumberEmh>

080a235a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a235a:	f7ff bff3 	b.w	80a2344 <_ZN5Print5printEmi>

080a235e <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 80a235e:	b538      	push	{r3, r4, r5, lr}
 80a2360:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a2362:	f7ff ffef 	bl	80a2344 <_ZN5Print5printEmi>
 80a2366:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 80a2368:	4628      	mov	r0, r5
 80a236a:	f7ff ffb6 	bl	80a22da <_ZN5Print7printlnEv>
  return n;
}
 80a236e:	4420      	add	r0, r4
 80a2370:	bd38      	pop	{r3, r4, r5, pc}

080a2372 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a2372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2376:	4607      	mov	r7, r0
 80a2378:	460e      	mov	r6, r1
  if (base == 0) {
 80a237a:	4615      	mov	r5, r2
 80a237c:	b92a      	cbnz	r2, 80a238a <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a237e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a2382:	6803      	ldr	r3, [r0, #0]
 80a2384:	b2c9      	uxtb	r1, r1
 80a2386:	689b      	ldr	r3, [r3, #8]
 80a2388:	4718      	bx	r3
  } else if (base == 10) {
 80a238a:	2a0a      	cmp	r2, #10
 80a238c:	d102      	bne.n	80a2394 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a238e:	2900      	cmp	r1, #0
 80a2390:	da01      	bge.n	80a2396 <_ZN5Print5printEli+0x24>
 80a2392:	e004      	b.n	80a239e <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a2394:	b2d2      	uxtb	r2, r2
  }
}
 80a2396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a239a:	f7ff bfb4 	b.w	80a2306 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a239e:	212d      	movs	r1, #45	; 0x2d
 80a23a0:	f7ff ff98 	bl	80a22d4 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a23a4:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a23a6:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a23a8:	4271      	negs	r1, r6
 80a23aa:	4638      	mov	r0, r7
 80a23ac:	f7ff ffab 	bl	80a2306 <_ZN5Print11printNumberEmh>
 80a23b0:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a23b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a23b6 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a23b6:	f7ff bfdc 	b.w	80a2372 <_ZN5Print5printEli>

080a23ba <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a23ba:	b538      	push	{r3, r4, r5, lr}
 80a23bc:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a23be:	f7ff ffd8 	bl	80a2372 <_ZN5Print5printEli>
 80a23c2:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a23c4:	4628      	mov	r0, r5
 80a23c6:	f7ff ff88 	bl	80a22da <_ZN5Print7printlnEv>
  return n;
}
 80a23ca:	4420      	add	r0, r4
 80a23cc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a23d0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a23d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a23d4:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a23d6:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a23d8:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a23da:	4617      	mov	r7, r2
 80a23dc:	461e      	mov	r6, r3
 80a23de:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a23e2:	f002 ffc9 	bl	80a5378 <__aeabi_dcmpun>
 80a23e6:	b108      	cbz	r0, 80a23ec <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a23e8:	4947      	ldr	r1, [pc, #284]	; (80a2508 <_ZN5Print10printFloatEdh+0x138>)
 80a23ea:	e012      	b.n	80a2412 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a23ec:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a23f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a23f4:	4b45      	ldr	r3, [pc, #276]	; (80a250c <_ZN5Print10printFloatEdh+0x13c>)
 80a23f6:	4638      	mov	r0, r7
 80a23f8:	4621      	mov	r1, r4
 80a23fa:	f002 ffbd 	bl	80a5378 <__aeabi_dcmpun>
 80a23fe:	b968      	cbnz	r0, 80a241c <_ZN5Print10printFloatEdh+0x4c>
 80a2400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a2404:	4b41      	ldr	r3, [pc, #260]	; (80a250c <_ZN5Print10printFloatEdh+0x13c>)
 80a2406:	4638      	mov	r0, r7
 80a2408:	4621      	mov	r1, r4
 80a240a:	f002 ff97 	bl	80a533c <__aeabi_dcmple>
 80a240e:	b928      	cbnz	r0, 80a241c <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2410:	493f      	ldr	r1, [pc, #252]	; (80a2510 <_ZN5Print10printFloatEdh+0x140>)
 80a2412:	4640      	mov	r0, r8
 80a2414:	f7ff ff4a 	bl	80a22ac <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a2418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a241c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2420:	4b3c      	ldr	r3, [pc, #240]	; (80a2514 <_ZN5Print10printFloatEdh+0x144>)
 80a2422:	4638      	mov	r0, r7
 80a2424:	4631      	mov	r1, r6
 80a2426:	f002 ff9d 	bl	80a5364 <__aeabi_dcmpgt>
 80a242a:	b108      	cbz	r0, 80a2430 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a242c:	493a      	ldr	r1, [pc, #232]	; (80a2518 <_ZN5Print10printFloatEdh+0x148>)
 80a242e:	e7f0      	b.n	80a2412 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a2430:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2434:	4b39      	ldr	r3, [pc, #228]	; (80a251c <_ZN5Print10printFloatEdh+0x14c>)
 80a2436:	4638      	mov	r0, r7
 80a2438:	4631      	mov	r1, r6
 80a243a:	f002 ff75 	bl	80a5328 <__aeabi_dcmplt>
 80a243e:	2800      	cmp	r0, #0
 80a2440:	d1f4      	bne.n	80a242c <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a2442:	2200      	movs	r2, #0
 80a2444:	2300      	movs	r3, #0
 80a2446:	4638      	mov	r0, r7
 80a2448:	4631      	mov	r1, r6
 80a244a:	f002 ff6d 	bl	80a5328 <__aeabi_dcmplt>
 80a244e:	b138      	cbz	r0, 80a2460 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a2450:	212d      	movs	r1, #45	; 0x2d
 80a2452:	4640      	mov	r0, r8
 80a2454:	f7ff ff3e 	bl	80a22d4 <_ZN5Print5printEc>
     number = -number;
 80a2458:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a245c:	4604      	mov	r4, r0
 80a245e:	e000      	b.n	80a2462 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a2460:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a2462:	492f      	ldr	r1, [pc, #188]	; (80a2520 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a2464:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a2468:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a246a:	fa5f f389 	uxtb.w	r3, r9
 80a246e:	429d      	cmp	r5, r3
 80a2470:	d906      	bls.n	80a2480 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a2472:	2200      	movs	r2, #0
 80a2474:	4b2b      	ldr	r3, [pc, #172]	; (80a2524 <_ZN5Print10printFloatEdh+0x154>)
 80a2476:	f002 fe0f 	bl	80a5098 <__aeabi_ddiv>
 80a247a:	f109 0901 	add.w	r9, r9, #1
 80a247e:	e7f4      	b.n	80a246a <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a2480:	463a      	mov	r2, r7
 80a2482:	4633      	mov	r3, r6
 80a2484:	f002 fb2c 	bl	80a4ae0 <__adddf3>
 80a2488:	460f      	mov	r7, r1
 80a248a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a248c:	f002 ffb2 	bl	80a53f4 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2490:	220a      	movs	r2, #10
 80a2492:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a2494:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2496:	4640      	mov	r0, r8
 80a2498:	f7ff ff35 	bl	80a2306 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a249c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a249e:	b37d      	cbz	r5, 80a2500 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a24a0:	4648      	mov	r0, r9
 80a24a2:	f002 fc59 	bl	80a4d58 <__aeabi_ui2d>
 80a24a6:	4602      	mov	r2, r0
 80a24a8:	460b      	mov	r3, r1
 80a24aa:	4630      	mov	r0, r6
 80a24ac:	4639      	mov	r1, r7
 80a24ae:	f002 fb15 	bl	80a4adc <__aeabi_dsub>
 80a24b2:	4606      	mov	r6, r0
 80a24b4:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a24b6:	4640      	mov	r0, r8
 80a24b8:	491b      	ldr	r1, [pc, #108]	; (80a2528 <_ZN5Print10printFloatEdh+0x158>)
 80a24ba:	f7ff fef7 	bl	80a22ac <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a24be:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a24c0:	4b18      	ldr	r3, [pc, #96]	; (80a2524 <_ZN5Print10printFloatEdh+0x154>)
 80a24c2:	2200      	movs	r2, #0
 80a24c4:	4630      	mov	r0, r6
 80a24c6:	4639      	mov	r1, r7
 80a24c8:	f002 fcbc 	bl	80a4e44 <__aeabi_dmul>
 80a24cc:	460f      	mov	r7, r1
 80a24ce:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a24d0:	f002 ff68 	bl	80a53a4 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a24d4:	220a      	movs	r2, #10
 80a24d6:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a24d8:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a24da:	4640      	mov	r0, r8
 80a24dc:	f7ff ff49 	bl	80a2372 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a24e0:	4404      	add	r4, r0
    remainder -= toPrint;
 80a24e2:	4648      	mov	r0, r9
 80a24e4:	f002 fc48 	bl	80a4d78 <__aeabi_i2d>
 80a24e8:	4602      	mov	r2, r0
 80a24ea:	460b      	mov	r3, r1
 80a24ec:	4630      	mov	r0, r6
 80a24ee:	4639      	mov	r1, r7
 80a24f0:	f002 faf4 	bl	80a4adc <__aeabi_dsub>
 80a24f4:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a24f6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a24fa:	4606      	mov	r6, r0
 80a24fc:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a24fe:	d1df      	bne.n	80a24c0 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a2500:	4620      	mov	r0, r4
 80a2502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2506:	bf00      	nop
 80a2508:	080a5f98 	.word	0x080a5f98
 80a250c:	7fefffff 	.word	0x7fefffff
 80a2510:	080a5fa0 	.word	0x080a5fa0
 80a2514:	41efffff 	.word	0x41efffff
 80a2518:	080a5f9c 	.word	0x080a5f9c
 80a251c:	c1efffff 	.word	0xc1efffff
 80a2520:	3fe00000 	.word	0x3fe00000
 80a2524:	40240000 	.word	0x40240000
 80a2528:	080a5cf8 	.word	0x080a5cf8

080a252c <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a252c:	f89d 1000 	ldrb.w	r1, [sp]
 80a2530:	9100      	str	r1, [sp, #0]
 80a2532:	f7ff bf4d 	b.w	80a23d0 <_ZN5Print10printFloatEdh>

080a2536 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a2536:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a2538:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a253c:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a253e:	9100      	str	r1, [sp, #0]
 80a2540:	f7ff ff46 	bl	80a23d0 <_ZN5Print10printFloatEdh>
 80a2544:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a2546:	4628      	mov	r0, r5
 80a2548:	f7ff fec7 	bl	80a22da <_ZN5Print7printlnEv>
  return n;
}
 80a254c:	4420      	add	r0, r4
 80a254e:	b003      	add	sp, #12
 80a2550:	bd30      	pop	{r4, r5, pc}

080a2552 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2552:	b510      	push	{r4, lr}
 80a2554:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2556:	f7ff fd5a 	bl	80a200e <_ZNSt14_Function_baseD1Ev>
 80a255a:	4620      	mov	r0, r4
 80a255c:	bd10      	pop	{r4, pc}
	...

080a2560 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2560:	4803      	ldr	r0, [pc, #12]	; (80a2570 <_GLOBAL__sub_I_RGB+0x10>)
 80a2562:	2300      	movs	r3, #0
 80a2564:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2566:	4a03      	ldr	r2, [pc, #12]	; (80a2574 <_GLOBAL__sub_I_RGB+0x14>)
 80a2568:	4903      	ldr	r1, [pc, #12]	; (80a2578 <_GLOBAL__sub_I_RGB+0x18>)
 80a256a:	f000 bb35 	b.w	80a2bd8 <__aeabi_atexit>
 80a256e:	bf00      	nop
 80a2570:	2000015c 	.word	0x2000015c
 80a2574:	20000084 	.word	0x20000084
 80a2578:	080a2553 	.word	0x080a2553

080a257c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a257c:	4770      	bx	lr

080a257e <_ZN8SPIClassD0Ev>:
 80a257e:	b510      	push	{r4, lr}
 80a2580:	4604      	mov	r4, r0
 80a2582:	2110      	movs	r1, #16
 80a2584:	f000 fb2d 	bl	80a2be2 <_ZdlPvj>
 80a2588:	4620      	mov	r0, r4
 80a258a:	bd10      	pop	{r4, pc}

080a258c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a258c:	b570      	push	{r4, r5, r6, lr}
 80a258e:	4604      	mov	r4, r0
 80a2590:	460e      	mov	r6, r1
 80a2592:	4b07      	ldr	r3, [pc, #28]	; (80a25b0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a2594:	2500      	movs	r5, #0
 80a2596:	6003      	str	r3, [r0, #0]
 80a2598:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a259c:	f7ff fb76 	bl	80a1c8c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a25a0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a25a2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a25a4:	f7ff fc0c 	bl	80a1dc0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a25a8:	60a5      	str	r5, [r4, #8]
}
 80a25aa:	4620      	mov	r0, r4
 80a25ac:	bd70      	pop	{r4, r5, r6, pc}
 80a25ae:	bf00      	nop
 80a25b0:	080a5fac 	.word	0x080a5fac

080a25b4 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a25b4:	7900      	ldrb	r0, [r0, #4]
 80a25b6:	f7ff bc0b 	b.w	80a1dd0 <HAL_SPI_Is_Enabled>
	...

080a25bc <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a25bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a25c0:	4b03      	ldr	r3, [pc, #12]	; (80a25d0 <_GLOBAL__sub_I_System+0x14>)
 80a25c2:	2000      	movs	r0, #0
 80a25c4:	7018      	strb	r0, [r3, #0]
 80a25c6:	8058      	strh	r0, [r3, #2]
 80a25c8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a25ca:	f7ff bc89 	b.w	80a1ee0 <set_system_mode>
 80a25ce:	bf00      	nop
 80a25d0:	2000016c 	.word	0x2000016c

080a25d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a25d4:	4b02      	ldr	r3, [pc, #8]	; (80a25e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a25d6:	681a      	ldr	r2, [r3, #0]
 80a25d8:	4b02      	ldr	r3, [pc, #8]	; (80a25e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a25da:	601a      	str	r2, [r3, #0]
 80a25dc:	4770      	bx	lr
 80a25de:	bf00      	nop
 80a25e0:	20000018 	.word	0x20000018
 80a25e4:	20000174 	.word	0x20000174

080a25e8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a25e8:	4770      	bx	lr

080a25ea <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a25ea:	7441      	strb	r1, [r0, #17]
 80a25ec:	4770      	bx	lr

080a25ee <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a25ee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a25f0:	7c00      	ldrb	r0, [r0, #16]
 80a25f2:	f7ff fc2d 	bl	80a1e50 <HAL_USART_Available_Data_For_Write>
}
 80a25f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a25fa:	bd08      	pop	{r3, pc}

080a25fc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a25fc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a25fe:	7c00      	ldrb	r0, [r0, #16]
 80a2600:	f7ff fbfe 	bl	80a1e00 <HAL_USART_Available_Data>
}
 80a2604:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2608:	bd08      	pop	{r3, pc}

080a260a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a260a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a260c:	7c00      	ldrb	r0, [r0, #16]
 80a260e:	f7ff fc07 	bl	80a1e20 <HAL_USART_Peek_Data>
}
 80a2612:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2616:	bf28      	it	cs
 80a2618:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a261c:	bd08      	pop	{r3, pc}

080a261e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a261e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2620:	7c00      	ldrb	r0, [r0, #16]
 80a2622:	f7ff fbf5 	bl	80a1e10 <HAL_USART_Read_Data>
}
 80a2626:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a262a:	bf28      	it	cs
 80a262c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2630:	bd08      	pop	{r3, pc}

080a2632 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2632:	7c00      	ldrb	r0, [r0, #16]
 80a2634:	f7ff bbfc 	b.w	80a1e30 <HAL_USART_Flush_Data>

080a2638 <_ZN11USARTSerialD0Ev>:
 80a2638:	b510      	push	{r4, lr}
 80a263a:	4604      	mov	r4, r0
 80a263c:	2114      	movs	r1, #20
 80a263e:	f000 fad0 	bl	80a2be2 <_ZdlPvj>
 80a2642:	4620      	mov	r0, r4
 80a2644:	bd10      	pop	{r4, pc}

080a2646 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2646:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2648:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a264a:	4604      	mov	r4, r0
 80a264c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a264e:	b925      	cbnz	r5, 80a265a <_ZN11USARTSerial5writeEh+0x14>
 80a2650:	7c00      	ldrb	r0, [r0, #16]
 80a2652:	f7ff fbfd 	bl	80a1e50 <HAL_USART_Available_Data_For_Write>
 80a2656:	2800      	cmp	r0, #0
 80a2658:	dd05      	ble.n	80a2666 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a265a:	4631      	mov	r1, r6
 80a265c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a265e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2662:	f7ff bbc5 	b.w	80a1df0 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2666:	4628      	mov	r0, r5
 80a2668:	bd70      	pop	{r4, r5, r6, pc}
	...

080a266c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a266c:	b510      	push	{r4, lr}
 80a266e:	4604      	mov	r4, r0
 80a2670:	4608      	mov	r0, r1
 80a2672:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2674:	2200      	movs	r2, #0
 80a2676:	6062      	str	r2, [r4, #4]
 80a2678:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a267c:	60a2      	str	r2, [r4, #8]
 80a267e:	4a05      	ldr	r2, [pc, #20]	; (80a2694 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2680:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2682:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2684:	2201      	movs	r2, #1
 80a2686:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2688:	461a      	mov	r2, r3
 80a268a:	f7ff fba9 	bl	80a1de0 <HAL_USART_Init>
}
 80a268e:	4620      	mov	r0, r4
 80a2690:	bd10      	pop	{r4, pc}
 80a2692:	bf00      	nop
 80a2694:	080a5fe8 	.word	0x080a5fe8

080a2698 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2698:	7c00      	ldrb	r0, [r0, #16]
 80a269a:	f7ff bbd1 	b.w	80a1e40 <HAL_USART_Is_Enabled>
	...

080a26a0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a26a0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a26a2:	4d0c      	ldr	r5, [pc, #48]	; (80a26d4 <_Z22__fetch_global_Serial1v+0x34>)
 80a26a4:	6829      	ldr	r1, [r5, #0]
 80a26a6:	f011 0401 	ands.w	r4, r1, #1
 80a26aa:	d111      	bne.n	80a26d0 <_Z22__fetch_global_Serial1v+0x30>
 80a26ac:	4628      	mov	r0, r5
 80a26ae:	f7fd fcf8 	bl	80a00a2 <__cxa_guard_acquire>
 80a26b2:	b168      	cbz	r0, 80a26d0 <_Z22__fetch_global_Serial1v+0x30>
 80a26b4:	4a08      	ldr	r2, [pc, #32]	; (80a26d8 <_Z22__fetch_global_Serial1v+0x38>)
 80a26b6:	4621      	mov	r1, r4
 80a26b8:	4b08      	ldr	r3, [pc, #32]	; (80a26dc <_Z22__fetch_global_Serial1v+0x3c>)
 80a26ba:	4809      	ldr	r0, [pc, #36]	; (80a26e0 <_Z22__fetch_global_Serial1v+0x40>)
 80a26bc:	f7ff ffd6 	bl	80a266c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a26c0:	4628      	mov	r0, r5
 80a26c2:	f7fd fcf3 	bl	80a00ac <__cxa_guard_release>
 80a26c6:	4a07      	ldr	r2, [pc, #28]	; (80a26e4 <_Z22__fetch_global_Serial1v+0x44>)
 80a26c8:	4907      	ldr	r1, [pc, #28]	; (80a26e8 <_Z22__fetch_global_Serial1v+0x48>)
 80a26ca:	4805      	ldr	r0, [pc, #20]	; (80a26e0 <_Z22__fetch_global_Serial1v+0x40>)
 80a26cc:	f000 fa84 	bl	80a2bd8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a26d0:	4803      	ldr	r0, [pc, #12]	; (80a26e0 <_Z22__fetch_global_Serial1v+0x40>)
 80a26d2:	bd38      	pop	{r3, r4, r5, pc}
 80a26d4:	20000210 	.word	0x20000210
 80a26d8:	20000214 	.word	0x20000214
 80a26dc:	2000018c 	.word	0x2000018c
 80a26e0:	20000178 	.word	0x20000178
 80a26e4:	20000084 	.word	0x20000084
 80a26e8:	080a25e9 	.word	0x080a25e9

080a26ec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a26ec:	7441      	strb	r1, [r0, #17]
 80a26ee:	4770      	bx	lr

080a26f0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a26f0:	4770      	bx	lr

080a26f2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a26f2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a26f4:	2100      	movs	r1, #0
 80a26f6:	7c00      	ldrb	r0, [r0, #16]
 80a26f8:	f7ff fbd2 	bl	80a1ea0 <HAL_USB_USART_Receive_Data>
}
 80a26fc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2700:	bf28      	it	cs
 80a2702:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2706:	bd08      	pop	{r3, pc}

080a2708 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2708:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a270a:	2101      	movs	r1, #1
 80a270c:	7c00      	ldrb	r0, [r0, #16]
 80a270e:	f7ff fbc7 	bl	80a1ea0 <HAL_USB_USART_Receive_Data>
}
 80a2712:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2716:	bf28      	it	cs
 80a2718:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a271c:	bd08      	pop	{r3, pc}

080a271e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a271e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2720:	7c00      	ldrb	r0, [r0, #16]
 80a2722:	f7ff fbb5 	bl	80a1e90 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2726:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a272a:	bd08      	pop	{r3, pc}

080a272c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a272c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a272e:	7c00      	ldrb	r0, [r0, #16]
 80a2730:	f7ff fba6 	bl	80a1e80 <HAL_USB_USART_Available_Data>
}
 80a2734:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2738:	bd08      	pop	{r3, pc}

080a273a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a273a:	7c00      	ldrb	r0, [r0, #16]
 80a273c:	f7ff bbc0 	b.w	80a1ec0 <HAL_USB_USART_Flush_Data>

080a2740 <_ZN9USBSerialD0Ev>:
 80a2740:	b510      	push	{r4, lr}
 80a2742:	4604      	mov	r4, r0
 80a2744:	2114      	movs	r1, #20
 80a2746:	f000 fa4c 	bl	80a2be2 <_ZdlPvj>
 80a274a:	4620      	mov	r0, r4
 80a274c:	bd10      	pop	{r4, pc}

080a274e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a274e:	b538      	push	{r3, r4, r5, lr}
 80a2750:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2752:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2754:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2756:	f7ff fb9b 	bl	80a1e90 <HAL_USB_USART_Available_Data_For_Write>
 80a275a:	2800      	cmp	r0, #0
 80a275c:	dc01      	bgt.n	80a2762 <_ZN9USBSerial5writeEh+0x14>
 80a275e:	7c60      	ldrb	r0, [r4, #17]
 80a2760:	b128      	cbz	r0, 80a276e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2762:	4629      	mov	r1, r5
 80a2764:	7c20      	ldrb	r0, [r4, #16]
 80a2766:	f7ff fba3 	bl	80a1eb0 <HAL_USB_USART_Send_Data>
 80a276a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a276e:	bd38      	pop	{r3, r4, r5, pc}

080a2770 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2770:	b510      	push	{r4, lr}
 80a2772:	4604      	mov	r4, r0
 80a2774:	2300      	movs	r3, #0
 80a2776:	6063      	str	r3, [r4, #4]
 80a2778:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a277c:	60a3      	str	r3, [r4, #8]
 80a277e:	4b05      	ldr	r3, [pc, #20]	; (80a2794 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2780:	4608      	mov	r0, r1
 80a2782:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2784:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2786:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2788:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a278a:	4611      	mov	r1, r2
 80a278c:	f7ff fb68 	bl	80a1e60 <HAL_USB_USART_Init>
}
 80a2790:	4620      	mov	r0, r4
 80a2792:	bd10      	pop	{r4, pc}
 80a2794:	080a6018 	.word	0x080a6018

080a2798 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2798:	2200      	movs	r2, #0
 80a279a:	7c00      	ldrb	r0, [r0, #16]
 80a279c:	f7ff bb68 	b.w	80a1e70 <HAL_USB_USART_Begin>

080a27a0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a27a0:	b510      	push	{r4, lr}
 80a27a2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a27a4:	2214      	movs	r2, #20
 80a27a6:	2100      	movs	r1, #0
 80a27a8:	f003 f9a7 	bl	80a5afa <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a27ac:	4b05      	ldr	r3, [pc, #20]	; (80a27c4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a27ae:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a27b0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a27b2:	4b05      	ldr	r3, [pc, #20]	; (80a27c8 <_Z19acquireSerialBufferv+0x28>)
 80a27b4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a27b6:	f240 1301 	movw	r3, #257	; 0x101
 80a27ba:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a27bc:	2381      	movs	r3, #129	; 0x81
 80a27be:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a27c0:	bd10      	pop	{r4, pc}
 80a27c2:	bf00      	nop
 80a27c4:	2000031d 	.word	0x2000031d
 80a27c8:	2000029c 	.word	0x2000029c

080a27cc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a27cc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a27ce:	4d0e      	ldr	r5, [pc, #56]	; (80a2808 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a27d0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a27d2:	a801      	add	r0, sp, #4
 80a27d4:	f7ff ffe4 	bl	80a27a0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a27d8:	6829      	ldr	r1, [r5, #0]
 80a27da:	f011 0401 	ands.w	r4, r1, #1
 80a27de:	d110      	bne.n	80a2802 <_Z16_fetch_usbserialv+0x36>
 80a27e0:	4628      	mov	r0, r5
 80a27e2:	f7fd fc5e 	bl	80a00a2 <__cxa_guard_acquire>
 80a27e6:	b160      	cbz	r0, 80a2802 <_Z16_fetch_usbserialv+0x36>
 80a27e8:	aa01      	add	r2, sp, #4
 80a27ea:	4621      	mov	r1, r4
 80a27ec:	4807      	ldr	r0, [pc, #28]	; (80a280c <_Z16_fetch_usbserialv+0x40>)
 80a27ee:	f7ff ffbf 	bl	80a2770 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a27f2:	4628      	mov	r0, r5
 80a27f4:	f7fd fc5a 	bl	80a00ac <__cxa_guard_release>
 80a27f8:	4a05      	ldr	r2, [pc, #20]	; (80a2810 <_Z16_fetch_usbserialv+0x44>)
 80a27fa:	4906      	ldr	r1, [pc, #24]	; (80a2814 <_Z16_fetch_usbserialv+0x48>)
 80a27fc:	4803      	ldr	r0, [pc, #12]	; (80a280c <_Z16_fetch_usbserialv+0x40>)
 80a27fe:	f000 f9eb 	bl	80a2bd8 <__aeabi_atexit>
	return _usbserial;
}
 80a2802:	4802      	ldr	r0, [pc, #8]	; (80a280c <_Z16_fetch_usbserialv+0x40>)
 80a2804:	b007      	add	sp, #28
 80a2806:	bd30      	pop	{r4, r5, pc}
 80a2808:	20000298 	.word	0x20000298
 80a280c:	20000420 	.word	0x20000420
 80a2810:	20000084 	.word	0x20000084
 80a2814:	080a26f1 	.word	0x080a26f1

080a2818 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2818:	b510      	push	{r4, lr}
 80a281a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a281c:	2214      	movs	r2, #20
 80a281e:	2100      	movs	r1, #0
 80a2820:	f003 f96b 	bl	80a5afa <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2824:	4b05      	ldr	r3, [pc, #20]	; (80a283c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2826:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2828:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a282a:	4b05      	ldr	r3, [pc, #20]	; (80a2840 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a282c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a282e:	f240 1301 	movw	r3, #257	; 0x101
 80a2832:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2834:	2381      	movs	r3, #129	; 0x81
 80a2836:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2838:	bd10      	pop	{r4, pc}
 80a283a:	bf00      	nop
 80a283c:	200004d0 	.word	0x200004d0
 80a2840:	20000438 	.word	0x20000438

080a2844 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2844:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2846:	4c0e      	ldr	r4, [pc, #56]	; (80a2880 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2848:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a284a:	a801      	add	r0, sp, #4
 80a284c:	f7ff ffe4 	bl	80a2818 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2850:	6823      	ldr	r3, [r4, #0]
 80a2852:	07db      	lsls	r3, r3, #31
 80a2854:	d410      	bmi.n	80a2878 <_Z17_fetch_usbserial1v+0x34>
 80a2856:	4620      	mov	r0, r4
 80a2858:	f7fd fc23 	bl	80a00a2 <__cxa_guard_acquire>
 80a285c:	b160      	cbz	r0, 80a2878 <_Z17_fetch_usbserial1v+0x34>
 80a285e:	aa01      	add	r2, sp, #4
 80a2860:	2101      	movs	r1, #1
 80a2862:	4808      	ldr	r0, [pc, #32]	; (80a2884 <_Z17_fetch_usbserial1v+0x40>)
 80a2864:	f7ff ff84 	bl	80a2770 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2868:	4620      	mov	r0, r4
 80a286a:	f7fd fc1f 	bl	80a00ac <__cxa_guard_release>
 80a286e:	4a06      	ldr	r2, [pc, #24]	; (80a2888 <_Z17_fetch_usbserial1v+0x44>)
 80a2870:	4906      	ldr	r1, [pc, #24]	; (80a288c <_Z17_fetch_usbserial1v+0x48>)
 80a2872:	4804      	ldr	r0, [pc, #16]	; (80a2884 <_Z17_fetch_usbserial1v+0x40>)
 80a2874:	f000 f9b0 	bl	80a2bd8 <__aeabi_atexit>
  return _usbserial1;
}
 80a2878:	4802      	ldr	r0, [pc, #8]	; (80a2884 <_Z17_fetch_usbserial1v+0x40>)
 80a287a:	b006      	add	sp, #24
 80a287c:	bd10      	pop	{r4, pc}
 80a287e:	bf00      	nop
 80a2880:	20000434 	.word	0x20000434
 80a2884:	200004bc 	.word	0x200004bc
 80a2888:	20000084 	.word	0x20000084
 80a288c:	080a26f1 	.word	0x080a26f1

080a2890 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2890:	2200      	movs	r2, #0
 80a2892:	4611      	mov	r1, r2
 80a2894:	6840      	ldr	r0, [r0, #4]
 80a2896:	f7ff bb67 	b.w	80a1f68 <network_ready>

080a289a <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a289a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a289c:	4616      	mov	r6, r2
 80a289e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a28a0:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a28a2:	460f      	mov	r7, r1
 80a28a4:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a28a6:	2100      	movs	r1, #0
 80a28a8:	a803      	add	r0, sp, #12
 80a28aa:	f003 f926 	bl	80a5afa <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a28ae:	4630      	mov	r0, r6
 80a28b0:	f003 f954 	bl	80a5b5c <strlen>
 80a28b4:	2500      	movs	r5, #0
 80a28b6:	9500      	str	r5, [sp, #0]
 80a28b8:	b281      	uxth	r1, r0
 80a28ba:	687b      	ldr	r3, [r7, #4]
 80a28bc:	aa03      	add	r2, sp, #12
 80a28be:	4630      	mov	r0, r6
 80a28c0:	f7ff fb06 	bl	80a1ed0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a28c4:	b120      	cbz	r0, 80a28d0 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a28c6:	4629      	mov	r1, r5
 80a28c8:	4620      	mov	r0, r4
 80a28ca:	f7ff fc49 	bl	80a2160 <_ZN9IPAddressC1Em>
 80a28ce:	e003      	b.n	80a28d8 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a28d0:	a903      	add	r1, sp, #12
 80a28d2:	4620      	mov	r0, r4
 80a28d4:	f7ff fc32 	bl	80a213c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a28d8:	4620      	mov	r0, r4
 80a28da:	b009      	add	sp, #36	; 0x24
 80a28dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a28de <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a28de:	2200      	movs	r2, #0
 80a28e0:	4611      	mov	r1, r2
 80a28e2:	6840      	ldr	r0, [r0, #4]
 80a28e4:	f7ff bb60 	b.w	80a1fa8 <network_listening>

080a28e8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a28e8:	2200      	movs	r2, #0
 80a28ea:	4611      	mov	r1, r2
 80a28ec:	6840      	ldr	r0, [r0, #4]
 80a28ee:	f7ff bb6b 	b.w	80a1fc8 <network_get_listen_timeout>

080a28f2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a28f2:	2200      	movs	r2, #0
 80a28f4:	6840      	ldr	r0, [r0, #4]
 80a28f6:	f7ff bb5f 	b.w	80a1fb8 <network_set_listen_timeout>

080a28fa <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a28fa:	2200      	movs	r2, #0
 80a28fc:	f081 0101 	eor.w	r1, r1, #1
 80a2900:	6840      	ldr	r0, [r0, #4]
 80a2902:	f7ff bb49 	b.w	80a1f98 <network_listen>

080a2906 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a2906:	2300      	movs	r3, #0
 80a2908:	461a      	mov	r2, r3
 80a290a:	4619      	mov	r1, r3
 80a290c:	6840      	ldr	r0, [r0, #4]
 80a290e:	f7ff bb3b 	b.w	80a1f88 <network_off>

080a2912 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2912:	2300      	movs	r3, #0
 80a2914:	461a      	mov	r2, r3
 80a2916:	4619      	mov	r1, r3
 80a2918:	6840      	ldr	r0, [r0, #4]
 80a291a:	f7ff bb2d 	b.w	80a1f78 <network_on>

080a291e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a291e:	2200      	movs	r2, #0
 80a2920:	4611      	mov	r1, r2
 80a2922:	6840      	ldr	r0, [r0, #4]
 80a2924:	f7ff bb10 	b.w	80a1f48 <network_connecting>

080a2928 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2928:	2200      	movs	r2, #0
 80a292a:	2102      	movs	r1, #2
 80a292c:	6840      	ldr	r0, [r0, #4]
 80a292e:	f7ff bb13 	b.w	80a1f58 <network_disconnect>

080a2932 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2932:	2300      	movs	r3, #0
 80a2934:	461a      	mov	r2, r3
 80a2936:	6840      	ldr	r0, [r0, #4]
 80a2938:	f7ff bafe 	b.w	80a1f38 <network_connect>

080a293c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a293c:	4b02      	ldr	r3, [pc, #8]	; (80a2948 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a293e:	2204      	movs	r2, #4
 80a2940:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2942:	4a02      	ldr	r2, [pc, #8]	; (80a294c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2944:	601a      	str	r2, [r3, #0]
 80a2946:	4770      	bx	lr
 80a2948:	200005d4 	.word	0x200005d4
 80a294c:	080a6048 	.word	0x080a6048

080a2950 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2950:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2952:	4b14      	ldr	r3, [pc, #80]	; (80a29a4 <serialEventRun+0x54>)
 80a2954:	b133      	cbz	r3, 80a2964 <serialEventRun+0x14>
 80a2956:	f7ff ff39 	bl	80a27cc <_Z16_fetch_usbserialv>
 80a295a:	6803      	ldr	r3, [r0, #0]
 80a295c:	691b      	ldr	r3, [r3, #16]
 80a295e:	4798      	blx	r3
 80a2960:	2800      	cmp	r0, #0
 80a2962:	dc16      	bgt.n	80a2992 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2964:	4b10      	ldr	r3, [pc, #64]	; (80a29a8 <serialEventRun+0x58>)
 80a2966:	b133      	cbz	r3, 80a2976 <serialEventRun+0x26>
 80a2968:	f7ff fe9a 	bl	80a26a0 <_Z22__fetch_global_Serial1v>
 80a296c:	6803      	ldr	r3, [r0, #0]
 80a296e:	691b      	ldr	r3, [r3, #16]
 80a2970:	4798      	blx	r3
 80a2972:	2800      	cmp	r0, #0
 80a2974:	dc10      	bgt.n	80a2998 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2976:	4b0d      	ldr	r3, [pc, #52]	; (80a29ac <serialEventRun+0x5c>)
 80a2978:	b10b      	cbz	r3, 80a297e <serialEventRun+0x2e>
 80a297a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a297e:	4b0c      	ldr	r3, [pc, #48]	; (80a29b0 <serialEventRun+0x60>)
 80a2980:	b17b      	cbz	r3, 80a29a2 <serialEventRun+0x52>
 80a2982:	f7ff ff5f 	bl	80a2844 <_Z17_fetch_usbserial1v>
 80a2986:	6803      	ldr	r3, [r0, #0]
 80a2988:	691b      	ldr	r3, [r3, #16]
 80a298a:	4798      	blx	r3
 80a298c:	2800      	cmp	r0, #0
 80a298e:	dc06      	bgt.n	80a299e <serialEventRun+0x4e>
 80a2990:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2992:	f3af 8000 	nop.w
 80a2996:	e7e5      	b.n	80a2964 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2998:	f3af 8000 	nop.w
 80a299c:	e7eb      	b.n	80a2976 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a299e:	f3af 8000 	nop.w
 80a29a2:	bd08      	pop	{r3, pc}
	...

080a29b4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a29b4:	b508      	push	{r3, lr}
	serialEventRun();
 80a29b6:	f7ff ffcb 	bl	80a2950 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a29ba:	f7ff f97f 	bl	80a1cbc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a29be:	4b01      	ldr	r3, [pc, #4]	; (80a29c4 <_post_loop+0x10>)
 80a29c0:	6018      	str	r0, [r3, #0]
 80a29c2:	bd08      	pop	{r3, pc}
 80a29c4:	200005e4 	.word	0x200005e4

080a29c8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a29c8:	4802      	ldr	r0, [pc, #8]	; (80a29d4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a29ca:	4a03      	ldr	r2, [pc, #12]	; (80a29d8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a29cc:	4903      	ldr	r1, [pc, #12]	; (80a29dc <_Z33system_initialize_user_backup_ramv+0x14>)
 80a29ce:	1a12      	subs	r2, r2, r0
 80a29d0:	f003 b888 	b.w	80a5ae4 <memcpy>
 80a29d4:	40024000 	.word	0x40024000
 80a29d8:	40024004 	.word	0x40024004
 80a29dc:	080a6180 	.word	0x080a6180

080a29e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a29e0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a29e2:	2300      	movs	r3, #0
 80a29e4:	9300      	str	r3, [sp, #0]
 80a29e6:	461a      	mov	r2, r3
 80a29e8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a29ec:	f7ff fa92 	bl	80a1f14 <system_ctrl_set_result>
}
 80a29f0:	b003      	add	sp, #12
 80a29f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a29f8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a29f8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a29fa:	8843      	ldrh	r3, [r0, #2]
 80a29fc:	2b0a      	cmp	r3, #10
 80a29fe:	d008      	beq.n	80a2a12 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2a00:	2b50      	cmp	r3, #80	; 0x50
 80a2a02:	d109      	bne.n	80a2a18 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2a04:	4b09      	ldr	r3, [pc, #36]	; (80a2a2c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2a06:	681b      	ldr	r3, [r3, #0]
 80a2a08:	b13b      	cbz	r3, 80a2a1a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2a0a:	b003      	add	sp, #12
 80a2a0c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2a10:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2a12:	f7ff ffe5 	bl	80a29e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2a16:	e006      	b.n	80a2a26 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2a18:	2300      	movs	r3, #0
 80a2a1a:	9300      	str	r3, [sp, #0]
 80a2a1c:	461a      	mov	r2, r3
 80a2a1e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2a22:	f7ff fa77 	bl	80a1f14 <system_ctrl_set_result>
        break;
    }
}
 80a2a26:	b003      	add	sp, #12
 80a2a28:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2a2c:	200005dc 	.word	0x200005dc

080a2a30 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2a30:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2a32:	4c10      	ldr	r4, [pc, #64]	; (80a2a74 <module_user_init_hook+0x44>)
 80a2a34:	4d10      	ldr	r5, [pc, #64]	; (80a2a78 <module_user_init_hook+0x48>)
 80a2a36:	6823      	ldr	r3, [r4, #0]
 80a2a38:	42ab      	cmp	r3, r5
 80a2a3a:	4b10      	ldr	r3, [pc, #64]	; (80a2a7c <module_user_init_hook+0x4c>)
 80a2a3c:	bf0c      	ite	eq
 80a2a3e:	2201      	moveq	r2, #1
 80a2a40:	2200      	movne	r2, #0
 80a2a42:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2a44:	d002      	beq.n	80a2a4c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2a46:	f7ff ffbf 	bl	80a29c8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2a4a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2a4c:	f7ff f926 	bl	80a1c9c <HAL_RNG_GetRandomNumber>
 80a2a50:	4604      	mov	r4, r0
    srand(seed);
 80a2a52:	f003 f85b 	bl	80a5b0c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2a56:	4b0a      	ldr	r3, [pc, #40]	; (80a2a80 <module_user_init_hook+0x50>)
 80a2a58:	b113      	cbz	r3, 80a2a60 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2a5a:	4620      	mov	r0, r4
 80a2a5c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2a60:	2100      	movs	r1, #0
 80a2a62:	4807      	ldr	r0, [pc, #28]	; (80a2a80 <module_user_init_hook+0x50>)
 80a2a64:	f7ff fa60 	bl	80a1f28 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2a6c:	2100      	movs	r1, #0
 80a2a6e:	4805      	ldr	r0, [pc, #20]	; (80a2a84 <module_user_init_hook+0x54>)
 80a2a70:	f7ff ba46 	b.w	80a1f00 <system_ctrl_set_app_request_handler>
 80a2a74:	40024000 	.word	0x40024000
 80a2a78:	9a271c1e 	.word	0x9a271c1e
 80a2a7c:	200005e0 	.word	0x200005e0
 80a2a80:	00000000 	.word	0x00000000
 80a2a84:	080a29f9 	.word	0x080a29f9

080a2a88 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2a88:	b510      	push	{r4, lr}
 80a2a8a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2a8c:	480f      	ldr	r0, [pc, #60]	; (80a2acc <pinAvailable+0x44>)
 80a2a8e:	f7ff fd91 	bl	80a25b4 <_ZN8SPIClass9isEnabledEv>
 80a2a92:	b128      	cbz	r0, 80a2aa0 <pinAvailable+0x18>
 80a2a94:	f1a4 030d 	sub.w	r3, r4, #13
 80a2a98:	2b02      	cmp	r3, #2
 80a2a9a:	d801      	bhi.n	80a2aa0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2a9c:	2000      	movs	r0, #0
 80a2a9e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2aa0:	f000 f840 	bl	80a2b24 <_Z19__fetch_global_Wirev>
 80a2aa4:	f7ff fb17 	bl	80a20d6 <_ZN7TwoWire9isEnabledEv>
 80a2aa8:	b108      	cbz	r0, 80a2aae <pinAvailable+0x26>
 80a2aaa:	2c01      	cmp	r4, #1
 80a2aac:	d9f6      	bls.n	80a2a9c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2aae:	f7ff fdf7 	bl	80a26a0 <_Z22__fetch_global_Serial1v>
 80a2ab2:	f7ff fdf1 	bl	80a2698 <_ZN11USARTSerial9isEnabledEv>
 80a2ab6:	b118      	cbz	r0, 80a2ac0 <pinAvailable+0x38>
 80a2ab8:	f1a4 0312 	sub.w	r3, r4, #18
 80a2abc:	2b01      	cmp	r3, #1
 80a2abe:	d9ed      	bls.n	80a2a9c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2ac0:	2c17      	cmp	r4, #23
 80a2ac2:	bf8c      	ite	hi
 80a2ac4:	2000      	movhi	r0, #0
 80a2ac6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2ac8:	bd10      	pop	{r4, pc}
 80a2aca:	bf00      	nop
 80a2acc:	20000618 	.word	0x20000618

080a2ad0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2ad0:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2ad2:	b538      	push	{r3, r4, r5, lr}
 80a2ad4:	4604      	mov	r4, r0
 80a2ad6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2ad8:	d80a      	bhi.n	80a2af0 <pinMode+0x20>
 80a2ada:	29ff      	cmp	r1, #255	; 0xff
 80a2adc:	d008      	beq.n	80a2af0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2ade:	f7ff ffd3 	bl	80a2a88 <pinAvailable>
 80a2ae2:	b128      	cbz	r0, 80a2af0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2ae4:	4629      	mov	r1, r5
 80a2ae6:	4620      	mov	r0, r4
}
 80a2ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2aec:	f7ff b8f6 	b.w	80a1cdc <HAL_Pin_Mode>
 80a2af0:	bd38      	pop	{r3, r4, r5, pc}

080a2af2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2af2:	b538      	push	{r3, r4, r5, lr}
 80a2af4:	4604      	mov	r4, r0
 80a2af6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2af8:	f7ff f8f8 	bl	80a1cec <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2afc:	28ff      	cmp	r0, #255	; 0xff
 80a2afe:	d010      	beq.n	80a2b22 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2b00:	2806      	cmp	r0, #6
 80a2b02:	d804      	bhi.n	80a2b0e <digitalWrite+0x1c>
 80a2b04:	234d      	movs	r3, #77	; 0x4d
 80a2b06:	fa23 f000 	lsr.w	r0, r3, r0
 80a2b0a:	07c3      	lsls	r3, r0, #31
 80a2b0c:	d409      	bmi.n	80a2b22 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2b0e:	4620      	mov	r0, r4
 80a2b10:	f7ff ffba 	bl	80a2a88 <pinAvailable>
 80a2b14:	b128      	cbz	r0, 80a2b22 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2b16:	4629      	mov	r1, r5
 80a2b18:	4620      	mov	r0, r4
}
 80a2b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2b1e:	f7ff b8ed 	b.w	80a1cfc <HAL_GPIO_Write>
 80a2b22:	bd38      	pop	{r3, r4, r5, pc}

080a2b24 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2b24:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2b26:	4d0b      	ldr	r5, [pc, #44]	; (80a2b54 <_Z19__fetch_global_Wirev+0x30>)
 80a2b28:	6829      	ldr	r1, [r5, #0]
 80a2b2a:	f011 0401 	ands.w	r4, r1, #1
 80a2b2e:	d10f      	bne.n	80a2b50 <_Z19__fetch_global_Wirev+0x2c>
 80a2b30:	4628      	mov	r0, r5
 80a2b32:	f7fd fab6 	bl	80a00a2 <__cxa_guard_acquire>
 80a2b36:	b158      	cbz	r0, 80a2b50 <_Z19__fetch_global_Wirev+0x2c>
 80a2b38:	4621      	mov	r1, r4
 80a2b3a:	4807      	ldr	r0, [pc, #28]	; (80a2b58 <_Z19__fetch_global_Wirev+0x34>)
 80a2b3c:	f7ff fa9c 	bl	80a2078 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2b40:	4628      	mov	r0, r5
 80a2b42:	f7fd fab3 	bl	80a00ac <__cxa_guard_release>
 80a2b46:	4a05      	ldr	r2, [pc, #20]	; (80a2b5c <_Z19__fetch_global_Wirev+0x38>)
 80a2b48:	4905      	ldr	r1, [pc, #20]	; (80a2b60 <_Z19__fetch_global_Wirev+0x3c>)
 80a2b4a:	4803      	ldr	r0, [pc, #12]	; (80a2b58 <_Z19__fetch_global_Wirev+0x34>)
 80a2b4c:	f000 f844 	bl	80a2bd8 <__aeabi_atexit>
	return wire;
}
 80a2b50:	4801      	ldr	r0, [pc, #4]	; (80a2b58 <_Z19__fetch_global_Wirev+0x34>)
 80a2b52:	bd38      	pop	{r3, r4, r5, pc}
 80a2b54:	200005e8 	.word	0x200005e8
 80a2b58:	200005ec 	.word	0x200005ec
 80a2b5c:	20000084 	.word	0x20000084
 80a2b60:	080a2021 	.word	0x080a2021

080a2b64 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2b64:	b513      	push	{r0, r1, r4, lr}
 80a2b66:	4c08      	ldr	r4, [pc, #32]	; (80a2b88 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2b68:	2300      	movs	r3, #0
 80a2b6a:	461a      	mov	r2, r3
 80a2b6c:	4619      	mov	r1, r3
 80a2b6e:	9300      	str	r3, [sp, #0]
 80a2b70:	4620      	mov	r0, r4
 80a2b72:	f7ff fb0b 	bl	80a218c <_ZN9IPAddressC1Ehhhh>
 80a2b76:	4620      	mov	r0, r4
 80a2b78:	4a04      	ldr	r2, [pc, #16]	; (80a2b8c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2b7a:	4905      	ldr	r1, [pc, #20]	; (80a2b90 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2b7c:	b002      	add	sp, #8
 80a2b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2b82:	f000 b829 	b.w	80a2bd8 <__aeabi_atexit>
 80a2b86:	bf00      	nop
 80a2b88:	20000600 	.word	0x20000600
 80a2b8c:	20000084 	.word	0x20000084
 80a2b90:	080a20df 	.word	0x080a20df

080a2b94 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2b94:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2b96:	4c0c      	ldr	r4, [pc, #48]	; (80a2bc8 <_GLOBAL__sub_I_SPI+0x34>)
 80a2b98:	4e0c      	ldr	r6, [pc, #48]	; (80a2bcc <_GLOBAL__sub_I_SPI+0x38>)
 80a2b9a:	4d0d      	ldr	r5, [pc, #52]	; (80a2bd0 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2b9c:	2100      	movs	r1, #0
 80a2b9e:	4620      	mov	r0, r4
 80a2ba0:	f7ff fcf4 	bl	80a258c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2ba4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2ba6:	4c0b      	ldr	r4, [pc, #44]	; (80a2bd4 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2ba8:	4632      	mov	r2, r6
 80a2baa:	4629      	mov	r1, r5
 80a2bac:	f000 f814 	bl	80a2bd8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2bb0:	2101      	movs	r1, #1
 80a2bb2:	4620      	mov	r0, r4
 80a2bb4:	f7ff fcea 	bl	80a258c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2bb8:	4632      	mov	r2, r6
 80a2bba:	4629      	mov	r1, r5
 80a2bbc:	4620      	mov	r0, r4
 80a2bbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2bc2:	f000 b809 	b.w	80a2bd8 <__aeabi_atexit>
 80a2bc6:	bf00      	nop
 80a2bc8:	20000618 	.word	0x20000618
 80a2bcc:	20000084 	.word	0x20000084
 80a2bd0:	080a257d 	.word	0x080a257d
 80a2bd4:	20000628 	.word	0x20000628

080a2bd8 <__aeabi_atexit>:
 80a2bd8:	460b      	mov	r3, r1
 80a2bda:	4601      	mov	r1, r0
 80a2bdc:	4618      	mov	r0, r3
 80a2bde:	f002 bf73 	b.w	80a5ac8 <__cxa_atexit>

080a2be2 <_ZdlPvj>:
 80a2be2:	f7fd ba5c 	b.w	80a009e <_ZdlPv>
	...

080a2be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2be8:	4b24      	ldr	r3, [pc, #144]	; (80a2c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2bea:	681a      	ldr	r2, [r3, #0]
 80a2bec:	07d0      	lsls	r0, r2, #31
 80a2bee:	bf5c      	itt	pl
 80a2bf0:	2201      	movpl	r2, #1
 80a2bf2:	601a      	strpl	r2, [r3, #0]
 80a2bf4:	4b22      	ldr	r3, [pc, #136]	; (80a2c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2bf6:	681a      	ldr	r2, [r3, #0]
 80a2bf8:	07d1      	lsls	r1, r2, #31
 80a2bfa:	bf5c      	itt	pl
 80a2bfc:	2201      	movpl	r2, #1
 80a2bfe:	601a      	strpl	r2, [r3, #0]
 80a2c00:	4b20      	ldr	r3, [pc, #128]	; (80a2c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2c02:	681a      	ldr	r2, [r3, #0]
 80a2c04:	07d2      	lsls	r2, r2, #31
 80a2c06:	bf5c      	itt	pl
 80a2c08:	2201      	movpl	r2, #1
 80a2c0a:	601a      	strpl	r2, [r3, #0]
 80a2c0c:	4b1e      	ldr	r3, [pc, #120]	; (80a2c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2c0e:	681a      	ldr	r2, [r3, #0]
 80a2c10:	07d0      	lsls	r0, r2, #31
 80a2c12:	bf5c      	itt	pl
 80a2c14:	2201      	movpl	r2, #1
 80a2c16:	601a      	strpl	r2, [r3, #0]
 80a2c18:	4b1c      	ldr	r3, [pc, #112]	; (80a2c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2c1a:	681a      	ldr	r2, [r3, #0]
 80a2c1c:	07d1      	lsls	r1, r2, #31
 80a2c1e:	bf5c      	itt	pl
 80a2c20:	2201      	movpl	r2, #1
 80a2c22:	601a      	strpl	r2, [r3, #0]
 80a2c24:	4b1a      	ldr	r3, [pc, #104]	; (80a2c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2c26:	681a      	ldr	r2, [r3, #0]
 80a2c28:	07d2      	lsls	r2, r2, #31
 80a2c2a:	bf5c      	itt	pl
 80a2c2c:	2201      	movpl	r2, #1
 80a2c2e:	601a      	strpl	r2, [r3, #0]
 80a2c30:	4b18      	ldr	r3, [pc, #96]	; (80a2c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2c32:	681a      	ldr	r2, [r3, #0]
 80a2c34:	07d0      	lsls	r0, r2, #31
 80a2c36:	bf5c      	itt	pl
 80a2c38:	2201      	movpl	r2, #1
 80a2c3a:	601a      	strpl	r2, [r3, #0]
 80a2c3c:	4b16      	ldr	r3, [pc, #88]	; (80a2c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2c3e:	681a      	ldr	r2, [r3, #0]
 80a2c40:	07d1      	lsls	r1, r2, #31
 80a2c42:	bf5c      	itt	pl
 80a2c44:	2201      	movpl	r2, #1
 80a2c46:	601a      	strpl	r2, [r3, #0]
 80a2c48:	4b14      	ldr	r3, [pc, #80]	; (80a2c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2c4a:	681a      	ldr	r2, [r3, #0]
 80a2c4c:	07d2      	lsls	r2, r2, #31
 80a2c4e:	bf5c      	itt	pl
 80a2c50:	2201      	movpl	r2, #1
 80a2c52:	601a      	strpl	r2, [r3, #0]
 80a2c54:	4b12      	ldr	r3, [pc, #72]	; (80a2ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2c56:	681a      	ldr	r2, [r3, #0]
 80a2c58:	07d0      	lsls	r0, r2, #31
 80a2c5a:	bf5c      	itt	pl
 80a2c5c:	2201      	movpl	r2, #1
 80a2c5e:	601a      	strpl	r2, [r3, #0]
 80a2c60:	4b10      	ldr	r3, [pc, #64]	; (80a2ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2c62:	681a      	ldr	r2, [r3, #0]
 80a2c64:	07d1      	lsls	r1, r2, #31
 80a2c66:	bf5c      	itt	pl
 80a2c68:	2201      	movpl	r2, #1
 80a2c6a:	601a      	strpl	r2, [r3, #0]
 80a2c6c:	4b0e      	ldr	r3, [pc, #56]	; (80a2ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2c6e:	681a      	ldr	r2, [r3, #0]
 80a2c70:	07d2      	lsls	r2, r2, #31
 80a2c72:	bf5c      	itt	pl
 80a2c74:	2201      	movpl	r2, #1
 80a2c76:	601a      	strpl	r2, [r3, #0]
 80a2c78:	4770      	bx	lr
 80a2c7a:	bf00      	nop
 80a2c7c:	20000664 	.word	0x20000664
 80a2c80:	20000660 	.word	0x20000660
 80a2c84:	2000065c 	.word	0x2000065c
 80a2c88:	20000658 	.word	0x20000658
 80a2c8c:	20000654 	.word	0x20000654
 80a2c90:	20000650 	.word	0x20000650
 80a2c94:	2000064c 	.word	0x2000064c
 80a2c98:	20000648 	.word	0x20000648
 80a2c9c:	20000644 	.word	0x20000644
 80a2ca0:	20000640 	.word	0x20000640
 80a2ca4:	2000063c 	.word	0x2000063c
 80a2ca8:	20000638 	.word	0x20000638

080a2cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2cac:	4b18      	ldr	r3, [pc, #96]	; (80a2d10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2cae:	681a      	ldr	r2, [r3, #0]
 80a2cb0:	07d1      	lsls	r1, r2, #31
 80a2cb2:	bf5c      	itt	pl
 80a2cb4:	2201      	movpl	r2, #1
 80a2cb6:	601a      	strpl	r2, [r3, #0]
 80a2cb8:	4b16      	ldr	r3, [pc, #88]	; (80a2d14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2cba:	681a      	ldr	r2, [r3, #0]
 80a2cbc:	07d2      	lsls	r2, r2, #31
 80a2cbe:	bf5c      	itt	pl
 80a2cc0:	2201      	movpl	r2, #1
 80a2cc2:	601a      	strpl	r2, [r3, #0]
 80a2cc4:	4b14      	ldr	r3, [pc, #80]	; (80a2d18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2cc6:	681a      	ldr	r2, [r3, #0]
 80a2cc8:	07d0      	lsls	r0, r2, #31
 80a2cca:	bf5c      	itt	pl
 80a2ccc:	2201      	movpl	r2, #1
 80a2cce:	601a      	strpl	r2, [r3, #0]
 80a2cd0:	4b12      	ldr	r3, [pc, #72]	; (80a2d1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2cd2:	681a      	ldr	r2, [r3, #0]
 80a2cd4:	07d1      	lsls	r1, r2, #31
 80a2cd6:	bf5c      	itt	pl
 80a2cd8:	2201      	movpl	r2, #1
 80a2cda:	601a      	strpl	r2, [r3, #0]
 80a2cdc:	4b10      	ldr	r3, [pc, #64]	; (80a2d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2cde:	681a      	ldr	r2, [r3, #0]
 80a2ce0:	07d2      	lsls	r2, r2, #31
 80a2ce2:	bf5c      	itt	pl
 80a2ce4:	2201      	movpl	r2, #1
 80a2ce6:	601a      	strpl	r2, [r3, #0]
 80a2ce8:	4b0e      	ldr	r3, [pc, #56]	; (80a2d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2cea:	681a      	ldr	r2, [r3, #0]
 80a2cec:	07d0      	lsls	r0, r2, #31
 80a2cee:	bf5c      	itt	pl
 80a2cf0:	2201      	movpl	r2, #1
 80a2cf2:	601a      	strpl	r2, [r3, #0]
 80a2cf4:	4b0c      	ldr	r3, [pc, #48]	; (80a2d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2cf6:	681a      	ldr	r2, [r3, #0]
 80a2cf8:	07d1      	lsls	r1, r2, #31
 80a2cfa:	bf5c      	itt	pl
 80a2cfc:	2201      	movpl	r2, #1
 80a2cfe:	601a      	strpl	r2, [r3, #0]
 80a2d00:	4b0a      	ldr	r3, [pc, #40]	; (80a2d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2d02:	681a      	ldr	r2, [r3, #0]
 80a2d04:	07d2      	lsls	r2, r2, #31
 80a2d06:	bf5c      	itt	pl
 80a2d08:	2201      	movpl	r2, #1
 80a2d0a:	601a      	strpl	r2, [r3, #0]
 80a2d0c:	4770      	bx	lr
 80a2d0e:	bf00      	nop
 80a2d10:	20000684 	.word	0x20000684
 80a2d14:	20000680 	.word	0x20000680
 80a2d18:	2000067c 	.word	0x2000067c
 80a2d1c:	20000678 	.word	0x20000678
 80a2d20:	20000674 	.word	0x20000674
 80a2d24:	20000670 	.word	0x20000670
 80a2d28:	2000066c 	.word	0x2000066c
 80a2d2c:	20000668 	.word	0x20000668

080a2d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2d30:	4b18      	ldr	r3, [pc, #96]	; (80a2d94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2d32:	681a      	ldr	r2, [r3, #0]
 80a2d34:	07d1      	lsls	r1, r2, #31
 80a2d36:	bf5c      	itt	pl
 80a2d38:	2201      	movpl	r2, #1
 80a2d3a:	601a      	strpl	r2, [r3, #0]
 80a2d3c:	4b16      	ldr	r3, [pc, #88]	; (80a2d98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2d3e:	681a      	ldr	r2, [r3, #0]
 80a2d40:	07d2      	lsls	r2, r2, #31
 80a2d42:	bf5c      	itt	pl
 80a2d44:	2201      	movpl	r2, #1
 80a2d46:	601a      	strpl	r2, [r3, #0]
 80a2d48:	4b14      	ldr	r3, [pc, #80]	; (80a2d9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2d4a:	681a      	ldr	r2, [r3, #0]
 80a2d4c:	07d0      	lsls	r0, r2, #31
 80a2d4e:	bf5c      	itt	pl
 80a2d50:	2201      	movpl	r2, #1
 80a2d52:	601a      	strpl	r2, [r3, #0]
 80a2d54:	4b12      	ldr	r3, [pc, #72]	; (80a2da0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2d56:	681a      	ldr	r2, [r3, #0]
 80a2d58:	07d1      	lsls	r1, r2, #31
 80a2d5a:	bf5c      	itt	pl
 80a2d5c:	2201      	movpl	r2, #1
 80a2d5e:	601a      	strpl	r2, [r3, #0]
 80a2d60:	4b10      	ldr	r3, [pc, #64]	; (80a2da4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2d62:	681a      	ldr	r2, [r3, #0]
 80a2d64:	07d2      	lsls	r2, r2, #31
 80a2d66:	bf5c      	itt	pl
 80a2d68:	2201      	movpl	r2, #1
 80a2d6a:	601a      	strpl	r2, [r3, #0]
 80a2d6c:	4b0e      	ldr	r3, [pc, #56]	; (80a2da8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2d6e:	681a      	ldr	r2, [r3, #0]
 80a2d70:	07d0      	lsls	r0, r2, #31
 80a2d72:	bf5c      	itt	pl
 80a2d74:	2201      	movpl	r2, #1
 80a2d76:	601a      	strpl	r2, [r3, #0]
 80a2d78:	4b0c      	ldr	r3, [pc, #48]	; (80a2dac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2d7a:	681a      	ldr	r2, [r3, #0]
 80a2d7c:	07d1      	lsls	r1, r2, #31
 80a2d7e:	bf5c      	itt	pl
 80a2d80:	2201      	movpl	r2, #1
 80a2d82:	601a      	strpl	r2, [r3, #0]
 80a2d84:	4b0a      	ldr	r3, [pc, #40]	; (80a2db0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2d86:	681a      	ldr	r2, [r3, #0]
 80a2d88:	07d2      	lsls	r2, r2, #31
 80a2d8a:	bf5c      	itt	pl
 80a2d8c:	2201      	movpl	r2, #1
 80a2d8e:	601a      	strpl	r2, [r3, #0]
 80a2d90:	4770      	bx	lr
 80a2d92:	bf00      	nop
 80a2d94:	200006a4 	.word	0x200006a4
 80a2d98:	200006a0 	.word	0x200006a0
 80a2d9c:	2000069c 	.word	0x2000069c
 80a2da0:	20000698 	.word	0x20000698
 80a2da4:	20000694 	.word	0x20000694
 80a2da8:	20000690 	.word	0x20000690
 80a2dac:	2000068c 	.word	0x2000068c
 80a2db0:	20000688 	.word	0x20000688

080a2db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2db4:	4b24      	ldr	r3, [pc, #144]	; (80a2e48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2db6:	681a      	ldr	r2, [r3, #0]
 80a2db8:	07d0      	lsls	r0, r2, #31
 80a2dba:	bf5c      	itt	pl
 80a2dbc:	2201      	movpl	r2, #1
 80a2dbe:	601a      	strpl	r2, [r3, #0]
 80a2dc0:	4b22      	ldr	r3, [pc, #136]	; (80a2e4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2dc2:	681a      	ldr	r2, [r3, #0]
 80a2dc4:	07d1      	lsls	r1, r2, #31
 80a2dc6:	bf5c      	itt	pl
 80a2dc8:	2201      	movpl	r2, #1
 80a2dca:	601a      	strpl	r2, [r3, #0]
 80a2dcc:	4b20      	ldr	r3, [pc, #128]	; (80a2e50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2dce:	681a      	ldr	r2, [r3, #0]
 80a2dd0:	07d2      	lsls	r2, r2, #31
 80a2dd2:	bf5c      	itt	pl
 80a2dd4:	2201      	movpl	r2, #1
 80a2dd6:	601a      	strpl	r2, [r3, #0]
 80a2dd8:	4b1e      	ldr	r3, [pc, #120]	; (80a2e54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2dda:	681a      	ldr	r2, [r3, #0]
 80a2ddc:	07d0      	lsls	r0, r2, #31
 80a2dde:	bf5c      	itt	pl
 80a2de0:	2201      	movpl	r2, #1
 80a2de2:	601a      	strpl	r2, [r3, #0]
 80a2de4:	4b1c      	ldr	r3, [pc, #112]	; (80a2e58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2de6:	681a      	ldr	r2, [r3, #0]
 80a2de8:	07d1      	lsls	r1, r2, #31
 80a2dea:	bf5c      	itt	pl
 80a2dec:	2201      	movpl	r2, #1
 80a2dee:	601a      	strpl	r2, [r3, #0]
 80a2df0:	4b1a      	ldr	r3, [pc, #104]	; (80a2e5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2df2:	681a      	ldr	r2, [r3, #0]
 80a2df4:	07d2      	lsls	r2, r2, #31
 80a2df6:	bf5c      	itt	pl
 80a2df8:	2201      	movpl	r2, #1
 80a2dfa:	601a      	strpl	r2, [r3, #0]
 80a2dfc:	4b18      	ldr	r3, [pc, #96]	; (80a2e60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2dfe:	681a      	ldr	r2, [r3, #0]
 80a2e00:	07d0      	lsls	r0, r2, #31
 80a2e02:	bf5c      	itt	pl
 80a2e04:	2201      	movpl	r2, #1
 80a2e06:	601a      	strpl	r2, [r3, #0]
 80a2e08:	4b16      	ldr	r3, [pc, #88]	; (80a2e64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2e0a:	681a      	ldr	r2, [r3, #0]
 80a2e0c:	07d1      	lsls	r1, r2, #31
 80a2e0e:	bf5c      	itt	pl
 80a2e10:	2201      	movpl	r2, #1
 80a2e12:	601a      	strpl	r2, [r3, #0]
 80a2e14:	4b14      	ldr	r3, [pc, #80]	; (80a2e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2e16:	681a      	ldr	r2, [r3, #0]
 80a2e18:	07d2      	lsls	r2, r2, #31
 80a2e1a:	bf5c      	itt	pl
 80a2e1c:	2201      	movpl	r2, #1
 80a2e1e:	601a      	strpl	r2, [r3, #0]
 80a2e20:	4b12      	ldr	r3, [pc, #72]	; (80a2e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2e22:	681a      	ldr	r2, [r3, #0]
 80a2e24:	07d0      	lsls	r0, r2, #31
 80a2e26:	bf5c      	itt	pl
 80a2e28:	2201      	movpl	r2, #1
 80a2e2a:	601a      	strpl	r2, [r3, #0]
 80a2e2c:	4b10      	ldr	r3, [pc, #64]	; (80a2e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2e2e:	681a      	ldr	r2, [r3, #0]
 80a2e30:	07d1      	lsls	r1, r2, #31
 80a2e32:	bf5c      	itt	pl
 80a2e34:	2201      	movpl	r2, #1
 80a2e36:	601a      	strpl	r2, [r3, #0]
 80a2e38:	4b0e      	ldr	r3, [pc, #56]	; (80a2e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2e3a:	681a      	ldr	r2, [r3, #0]
 80a2e3c:	07d2      	lsls	r2, r2, #31
 80a2e3e:	bf5c      	itt	pl
 80a2e40:	2201      	movpl	r2, #1
 80a2e42:	601a      	strpl	r2, [r3, #0]
 80a2e44:	4770      	bx	lr
 80a2e46:	bf00      	nop
 80a2e48:	200006d4 	.word	0x200006d4
 80a2e4c:	200006d0 	.word	0x200006d0
 80a2e50:	200006cc 	.word	0x200006cc
 80a2e54:	200006c8 	.word	0x200006c8
 80a2e58:	200006c4 	.word	0x200006c4
 80a2e5c:	200006c0 	.word	0x200006c0
 80a2e60:	200006bc 	.word	0x200006bc
 80a2e64:	200006b8 	.word	0x200006b8
 80a2e68:	200006b4 	.word	0x200006b4
 80a2e6c:	200006b0 	.word	0x200006b0
 80a2e70:	200006ac 	.word	0x200006ac
 80a2e74:	200006a8 	.word	0x200006a8

080a2e78 <asin>:
 80a2e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2e7c:	b08b      	sub	sp, #44	; 0x2c
 80a2e7e:	4604      	mov	r4, r0
 80a2e80:	460d      	mov	r5, r1
 80a2e82:	f000 fa49 	bl	80a3318 <__ieee754_asin>
 80a2e86:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80a2f24 <asin+0xac>
 80a2e8a:	4606      	mov	r6, r0
 80a2e8c:	f998 3000 	ldrsb.w	r3, [r8]
 80a2e90:	460f      	mov	r7, r1
 80a2e92:	3301      	adds	r3, #1
 80a2e94:	d02e      	beq.n	80a2ef4 <asin+0x7c>
 80a2e96:	4622      	mov	r2, r4
 80a2e98:	462b      	mov	r3, r5
 80a2e9a:	4620      	mov	r0, r4
 80a2e9c:	4629      	mov	r1, r5
 80a2e9e:	f002 fa6b 	bl	80a5378 <__aeabi_dcmpun>
 80a2ea2:	4681      	mov	r9, r0
 80a2ea4:	bb30      	cbnz	r0, 80a2ef4 <asin+0x7c>
 80a2ea6:	4620      	mov	r0, r4
 80a2ea8:	4629      	mov	r1, r5
 80a2eaa:	f001 fcf7 	bl	80a489c <fabs>
 80a2eae:	2200      	movs	r2, #0
 80a2eb0:	4b19      	ldr	r3, [pc, #100]	; (80a2f18 <asin+0xa0>)
 80a2eb2:	f002 fa57 	bl	80a5364 <__aeabi_dcmpgt>
 80a2eb6:	b1e8      	cbz	r0, 80a2ef4 <asin+0x7c>
 80a2eb8:	4a18      	ldr	r2, [pc, #96]	; (80a2f1c <asin+0xa4>)
 80a2eba:	2301      	movs	r3, #1
 80a2ebc:	4818      	ldr	r0, [pc, #96]	; (80a2f20 <asin+0xa8>)
 80a2ebe:	9300      	str	r3, [sp, #0]
 80a2ec0:	f8cd 9020 	str.w	r9, [sp, #32]
 80a2ec4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a2ec8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a2ecc:	9201      	str	r2, [sp, #4]
 80a2ece:	f001 fcf1 	bl	80a48b4 <nan>
 80a2ed2:	f998 3000 	ldrsb.w	r3, [r8]
 80a2ed6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a2eda:	2b02      	cmp	r3, #2
 80a2edc:	d00f      	beq.n	80a2efe <asin+0x86>
 80a2ede:	4668      	mov	r0, sp
 80a2ee0:	f001 fce6 	bl	80a48b0 <matherr>
 80a2ee4:	b158      	cbz	r0, 80a2efe <asin+0x86>
 80a2ee6:	9b08      	ldr	r3, [sp, #32]
 80a2ee8:	b983      	cbnz	r3, 80a2f0c <asin+0x94>
 80a2eea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a2eee:	b00b      	add	sp, #44	; 0x2c
 80a2ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2ef4:	4630      	mov	r0, r6
 80a2ef6:	4639      	mov	r1, r7
 80a2ef8:	b00b      	add	sp, #44	; 0x2c
 80a2efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2efe:	f7ff f87b 	bl	80a1ff8 <__errno>
 80a2f02:	2321      	movs	r3, #33	; 0x21
 80a2f04:	6003      	str	r3, [r0, #0]
 80a2f06:	9b08      	ldr	r3, [sp, #32]
 80a2f08:	2b00      	cmp	r3, #0
 80a2f0a:	d0ee      	beq.n	80a2eea <asin+0x72>
 80a2f0c:	f7ff f874 	bl	80a1ff8 <__errno>
 80a2f10:	9b08      	ldr	r3, [sp, #32]
 80a2f12:	6003      	str	r3, [r0, #0]
 80a2f14:	e7e9      	b.n	80a2eea <asin+0x72>
 80a2f16:	bf00      	nop
 80a2f18:	3ff00000 	.word	0x3ff00000
 80a2f1c:	080a6074 	.word	0x080a6074
 80a2f20:	080a6078 	.word	0x080a6078
 80a2f24:	2000001c 	.word	0x2000001c

080a2f28 <atan2>:
 80a2f28:	f000 bc26 	b.w	80a3778 <__ieee754_atan2>

080a2f2c <pow>:
 80a2f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2f30:	b08d      	sub	sp, #52	; 0x34
 80a2f32:	4606      	mov	r6, r0
 80a2f34:	460f      	mov	r7, r1
 80a2f36:	4614      	mov	r4, r2
 80a2f38:	461d      	mov	r5, r3
 80a2f3a:	f000 fce9 	bl	80a3910 <__ieee754_pow>
 80a2f3e:	f8df 9310 	ldr.w	r9, [pc, #784]	; 80a3250 <pow+0x324>
 80a2f42:	e9cd 0100 	strd	r0, r1, [sp]
 80a2f46:	f999 8000 	ldrsb.w	r8, [r9]
 80a2f4a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80a2f4e:	d046      	beq.n	80a2fde <pow+0xb2>
 80a2f50:	4622      	mov	r2, r4
 80a2f52:	462b      	mov	r3, r5
 80a2f54:	4620      	mov	r0, r4
 80a2f56:	4629      	mov	r1, r5
 80a2f58:	f002 fa0e 	bl	80a5378 <__aeabi_dcmpun>
 80a2f5c:	4683      	mov	fp, r0
 80a2f5e:	2800      	cmp	r0, #0
 80a2f60:	d13d      	bne.n	80a2fde <pow+0xb2>
 80a2f62:	4632      	mov	r2, r6
 80a2f64:	463b      	mov	r3, r7
 80a2f66:	4630      	mov	r0, r6
 80a2f68:	4639      	mov	r1, r7
 80a2f6a:	f002 fa05 	bl	80a5378 <__aeabi_dcmpun>
 80a2f6e:	4682      	mov	sl, r0
 80a2f70:	2800      	cmp	r0, #0
 80a2f72:	d174      	bne.n	80a305e <pow+0x132>
 80a2f74:	4630      	mov	r0, r6
 80a2f76:	4639      	mov	r1, r7
 80a2f78:	2200      	movs	r2, #0
 80a2f7a:	2300      	movs	r3, #0
 80a2f7c:	f002 f9ca 	bl	80a5314 <__aeabi_dcmpeq>
 80a2f80:	2800      	cmp	r0, #0
 80a2f82:	d033      	beq.n	80a2fec <pow+0xc0>
 80a2f84:	2200      	movs	r2, #0
 80a2f86:	2300      	movs	r3, #0
 80a2f88:	4620      	mov	r0, r4
 80a2f8a:	4629      	mov	r1, r5
 80a2f8c:	f002 f9c2 	bl	80a5314 <__aeabi_dcmpeq>
 80a2f90:	4683      	mov	fp, r0
 80a2f92:	b1b8      	cbz	r0, 80a2fc4 <pow+0x98>
 80a2f94:	4aa9      	ldr	r2, [pc, #676]	; (80a323c <pow+0x310>)
 80a2f96:	2301      	movs	r3, #1
 80a2f98:	2000      	movs	r0, #0
 80a2f9a:	2100      	movs	r1, #0
 80a2f9c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80a2fa0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a2fa4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a2fa8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a2fac:	9203      	str	r2, [sp, #12]
 80a2fae:	9302      	str	r3, [sp, #8]
 80a2fb0:	f1b8 0f00 	cmp.w	r8, #0
 80a2fb4:	d06c      	beq.n	80a3090 <pow+0x164>
 80a2fb6:	4ba2      	ldr	r3, [pc, #648]	; (80a3240 <pow+0x314>)
 80a2fb8:	2200      	movs	r2, #0
 80a2fba:	4610      	mov	r0, r2
 80a2fbc:	4619      	mov	r1, r3
 80a2fbe:	b00d      	add	sp, #52	; 0x34
 80a2fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2fc4:	4620      	mov	r0, r4
 80a2fc6:	4629      	mov	r1, r5
 80a2fc8:	f001 fc6c 	bl	80a48a4 <finite>
 80a2fcc:	b138      	cbz	r0, 80a2fde <pow+0xb2>
 80a2fce:	2200      	movs	r2, #0
 80a2fd0:	2300      	movs	r3, #0
 80a2fd2:	4620      	mov	r0, r4
 80a2fd4:	4629      	mov	r1, r5
 80a2fd6:	f002 f9a7 	bl	80a5328 <__aeabi_dcmplt>
 80a2fda:	2800      	cmp	r0, #0
 80a2fdc:	d16a      	bne.n	80a30b4 <pow+0x188>
 80a2fde:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a2fe2:	4610      	mov	r0, r2
 80a2fe4:	4619      	mov	r1, r3
 80a2fe6:	b00d      	add	sp, #52	; 0x34
 80a2fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2fec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a2ff0:	f001 fc58 	bl	80a48a4 <finite>
 80a2ff4:	4680      	mov	r8, r0
 80a2ff6:	2800      	cmp	r0, #0
 80a2ff8:	d07d      	beq.n	80a30f6 <pow+0x1ca>
 80a2ffa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a2ffe:	f04f 0a00 	mov.w	sl, #0
 80a3002:	f04f 0b00 	mov.w	fp, #0
 80a3006:	4652      	mov	r2, sl
 80a3008:	465b      	mov	r3, fp
 80a300a:	f002 f983 	bl	80a5314 <__aeabi_dcmpeq>
 80a300e:	2800      	cmp	r0, #0
 80a3010:	d0e5      	beq.n	80a2fde <pow+0xb2>
 80a3012:	4630      	mov	r0, r6
 80a3014:	4639      	mov	r1, r7
 80a3016:	f001 fc45 	bl	80a48a4 <finite>
 80a301a:	2800      	cmp	r0, #0
 80a301c:	d0df      	beq.n	80a2fde <pow+0xb2>
 80a301e:	4620      	mov	r0, r4
 80a3020:	4629      	mov	r1, r5
 80a3022:	f001 fc3f 	bl	80a48a4 <finite>
 80a3026:	2800      	cmp	r0, #0
 80a3028:	d0d9      	beq.n	80a2fde <pow+0xb2>
 80a302a:	f999 3000 	ldrsb.w	r3, [r9]
 80a302e:	4883      	ldr	r0, [pc, #524]	; (80a323c <pow+0x310>)
 80a3030:	2104      	movs	r1, #4
 80a3032:	2200      	movs	r2, #0
 80a3034:	2b02      	cmp	r3, #2
 80a3036:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a303a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a303e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a3042:	9003      	str	r0, [sp, #12]
 80a3044:	9102      	str	r1, [sp, #8]
 80a3046:	920a      	str	r2, [sp, #40]	; 0x28
 80a3048:	d004      	beq.n	80a3054 <pow+0x128>
 80a304a:	a802      	add	r0, sp, #8
 80a304c:	f001 fc30 	bl	80a48b0 <matherr>
 80a3050:	2800      	cmp	r0, #0
 80a3052:	d147      	bne.n	80a30e4 <pow+0x1b8>
 80a3054:	f7fe ffd0 	bl	80a1ff8 <__errno>
 80a3058:	2322      	movs	r3, #34	; 0x22
 80a305a:	6003      	str	r3, [r0, #0]
 80a305c:	e042      	b.n	80a30e4 <pow+0x1b8>
 80a305e:	2200      	movs	r2, #0
 80a3060:	2300      	movs	r3, #0
 80a3062:	4620      	mov	r0, r4
 80a3064:	4629      	mov	r1, r5
 80a3066:	f002 f955 	bl	80a5314 <__aeabi_dcmpeq>
 80a306a:	2800      	cmp	r0, #0
 80a306c:	d0b7      	beq.n	80a2fde <pow+0xb2>
 80a306e:	4b74      	ldr	r3, [pc, #464]	; (80a3240 <pow+0x314>)
 80a3070:	4872      	ldr	r0, [pc, #456]	; (80a323c <pow+0x310>)
 80a3072:	2200      	movs	r2, #0
 80a3074:	2101      	movs	r1, #1
 80a3076:	f1b8 0f02 	cmp.w	r8, #2
 80a307a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80a307e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3082:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3086:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a308a:	9003      	str	r0, [sp, #12]
 80a308c:	9102      	str	r1, [sp, #8]
 80a308e:	d0a8      	beq.n	80a2fe2 <pow+0xb6>
 80a3090:	a802      	add	r0, sp, #8
 80a3092:	f001 fc0d 	bl	80a48b0 <matherr>
 80a3096:	2800      	cmp	r0, #0
 80a3098:	d07e      	beq.n	80a3198 <pow+0x26c>
 80a309a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a309c:	b343      	cbz	r3, 80a30f0 <pow+0x1c4>
 80a309e:	f7fe ffab 	bl	80a1ff8 <__errno>
 80a30a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a30a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a30a8:	6001      	str	r1, [r0, #0]
 80a30aa:	4610      	mov	r0, r2
 80a30ac:	4619      	mov	r1, r3
 80a30ae:	b00d      	add	sp, #52	; 0x34
 80a30b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a30b4:	4961      	ldr	r1, [pc, #388]	; (80a323c <pow+0x310>)
 80a30b6:	f999 3000 	ldrsb.w	r3, [r9]
 80a30ba:	2201      	movs	r2, #1
 80a30bc:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80a30c0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a30c4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a30c8:	9103      	str	r1, [sp, #12]
 80a30ca:	9202      	str	r2, [sp, #8]
 80a30cc:	2b00      	cmp	r3, #0
 80a30ce:	d068      	beq.n	80a31a2 <pow+0x276>
 80a30d0:	495c      	ldr	r1, [pc, #368]	; (80a3244 <pow+0x318>)
 80a30d2:	2000      	movs	r0, #0
 80a30d4:	2b02      	cmp	r3, #2
 80a30d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a30da:	d166      	bne.n	80a31aa <pow+0x27e>
 80a30dc:	f7fe ff8c 	bl	80a1ff8 <__errno>
 80a30e0:	2321      	movs	r3, #33	; 0x21
 80a30e2:	6003      	str	r3, [r0, #0]
 80a30e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a30e6:	b11b      	cbz	r3, 80a30f0 <pow+0x1c4>
 80a30e8:	f7fe ff86 	bl	80a1ff8 <__errno>
 80a30ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a30ee:	6003      	str	r3, [r0, #0]
 80a30f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a30f4:	e775      	b.n	80a2fe2 <pow+0xb6>
 80a30f6:	4630      	mov	r0, r6
 80a30f8:	4639      	mov	r1, r7
 80a30fa:	f001 fbd3 	bl	80a48a4 <finite>
 80a30fe:	2800      	cmp	r0, #0
 80a3100:	f43f af7b 	beq.w	80a2ffa <pow+0xce>
 80a3104:	4620      	mov	r0, r4
 80a3106:	4629      	mov	r1, r5
 80a3108:	f001 fbcc 	bl	80a48a4 <finite>
 80a310c:	2800      	cmp	r0, #0
 80a310e:	f43f af74 	beq.w	80a2ffa <pow+0xce>
 80a3112:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a3116:	4610      	mov	r0, r2
 80a3118:	4619      	mov	r1, r3
 80a311a:	f002 f92d 	bl	80a5378 <__aeabi_dcmpun>
 80a311e:	2800      	cmp	r0, #0
 80a3120:	d16f      	bne.n	80a3202 <pow+0x2d6>
 80a3122:	4b46      	ldr	r3, [pc, #280]	; (80a323c <pow+0x310>)
 80a3124:	f999 8000 	ldrsb.w	r8, [r9]
 80a3128:	9303      	str	r3, [sp, #12]
 80a312a:	2303      	movs	r3, #3
 80a312c:	900a      	str	r0, [sp, #40]	; 0x28
 80a312e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3132:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3136:	9302      	str	r3, [sp, #8]
 80a3138:	f1b8 0f00 	cmp.w	r8, #0
 80a313c:	d13b      	bne.n	80a31b6 <pow+0x28a>
 80a313e:	f8df b114 	ldr.w	fp, [pc, #276]	; 80a3254 <pow+0x328>
 80a3142:	f04f 4a60 	mov.w	sl, #3758096384	; 0xe0000000
 80a3146:	2200      	movs	r2, #0
 80a3148:	2300      	movs	r3, #0
 80a314a:	4630      	mov	r0, r6
 80a314c:	4639      	mov	r1, r7
 80a314e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a3152:	f002 f8e9 	bl	80a5328 <__aeabi_dcmplt>
 80a3156:	2800      	cmp	r0, #0
 80a3158:	f43f af77 	beq.w	80a304a <pow+0x11e>
 80a315c:	2200      	movs	r2, #0
 80a315e:	4b3a      	ldr	r3, [pc, #232]	; (80a3248 <pow+0x31c>)
 80a3160:	4620      	mov	r0, r4
 80a3162:	4629      	mov	r1, r5
 80a3164:	f001 fe6e 	bl	80a4e44 <__aeabi_dmul>
 80a3168:	4604      	mov	r4, r0
 80a316a:	460d      	mov	r5, r1
 80a316c:	f001 fba8 	bl	80a48c0 <rint>
 80a3170:	4602      	mov	r2, r0
 80a3172:	460b      	mov	r3, r1
 80a3174:	4620      	mov	r0, r4
 80a3176:	4629      	mov	r1, r5
 80a3178:	f002 f8cc 	bl	80a5314 <__aeabi_dcmpeq>
 80a317c:	2800      	cmp	r0, #0
 80a317e:	d13d      	bne.n	80a31fc <pow+0x2d0>
 80a3180:	4b32      	ldr	r3, [pc, #200]	; (80a324c <pow+0x320>)
 80a3182:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a3186:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a318a:	f999 8000 	ldrsb.w	r8, [r9]
 80a318e:	f1b8 0f02 	cmp.w	r8, #2
 80a3192:	f47f af5a 	bne.w	80a304a <pow+0x11e>
 80a3196:	e75d      	b.n	80a3054 <pow+0x128>
 80a3198:	f7fe ff2e 	bl	80a1ff8 <__errno>
 80a319c:	2321      	movs	r3, #33	; 0x21
 80a319e:	6003      	str	r3, [r0, #0]
 80a31a0:	e77b      	b.n	80a309a <pow+0x16e>
 80a31a2:	2300      	movs	r3, #0
 80a31a4:	2400      	movs	r4, #0
 80a31a6:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80a31aa:	a802      	add	r0, sp, #8
 80a31ac:	f001 fb80 	bl	80a48b0 <matherr>
 80a31b0:	2800      	cmp	r0, #0
 80a31b2:	d197      	bne.n	80a30e4 <pow+0x1b8>
 80a31b4:	e792      	b.n	80a30dc <pow+0x1b0>
 80a31b6:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 80a3258 <pow+0x32c>
 80a31ba:	f04f 0a00 	mov.w	sl, #0
 80a31be:	2200      	movs	r2, #0
 80a31c0:	2300      	movs	r3, #0
 80a31c2:	4630      	mov	r0, r6
 80a31c4:	4639      	mov	r1, r7
 80a31c6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a31ca:	f002 f8ad 	bl	80a5328 <__aeabi_dcmplt>
 80a31ce:	2800      	cmp	r0, #0
 80a31d0:	d0dd      	beq.n	80a318e <pow+0x262>
 80a31d2:	2200      	movs	r2, #0
 80a31d4:	4b1c      	ldr	r3, [pc, #112]	; (80a3248 <pow+0x31c>)
 80a31d6:	4620      	mov	r0, r4
 80a31d8:	4629      	mov	r1, r5
 80a31da:	f001 fe33 	bl	80a4e44 <__aeabi_dmul>
 80a31de:	4604      	mov	r4, r0
 80a31e0:	460d      	mov	r5, r1
 80a31e2:	f001 fb6d 	bl	80a48c0 <rint>
 80a31e6:	4602      	mov	r2, r0
 80a31e8:	460b      	mov	r3, r1
 80a31ea:	4620      	mov	r0, r4
 80a31ec:	4629      	mov	r1, r5
 80a31ee:	f002 f891 	bl	80a5314 <__aeabi_dcmpeq>
 80a31f2:	b918      	cbnz	r0, 80a31fc <pow+0x2d0>
 80a31f4:	4b13      	ldr	r3, [pc, #76]	; (80a3244 <pow+0x318>)
 80a31f6:	2200      	movs	r2, #0
 80a31f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a31fc:	f999 8000 	ldrsb.w	r8, [r9]
 80a3200:	e7c5      	b.n	80a318e <pow+0x262>
 80a3202:	4a0e      	ldr	r2, [pc, #56]	; (80a323c <pow+0x310>)
 80a3204:	f999 9000 	ldrsb.w	r9, [r9]
 80a3208:	2301      	movs	r3, #1
 80a320a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80a320e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3212:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3216:	9203      	str	r2, [sp, #12]
 80a3218:	9302      	str	r3, [sp, #8]
 80a321a:	f1b9 0f00 	cmp.w	r9, #0
 80a321e:	d0c0      	beq.n	80a31a2 <pow+0x276>
 80a3220:	2200      	movs	r2, #0
 80a3222:	2300      	movs	r3, #0
 80a3224:	4610      	mov	r0, r2
 80a3226:	4619      	mov	r1, r3
 80a3228:	f001 ff36 	bl	80a5098 <__aeabi_ddiv>
 80a322c:	f1b9 0f02 	cmp.w	r9, #2
 80a3230:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a3234:	f43f af52 	beq.w	80a30dc <pow+0x1b0>
 80a3238:	e7b7      	b.n	80a31aa <pow+0x27e>
 80a323a:	bf00      	nop
 80a323c:	080a607c 	.word	0x080a607c
 80a3240:	3ff00000 	.word	0x3ff00000
 80a3244:	fff00000 	.word	0xfff00000
 80a3248:	3fe00000 	.word	0x3fe00000
 80a324c:	c7efffff 	.word	0xc7efffff
 80a3250:	2000001c 	.word	0x2000001c
 80a3254:	47efffff 	.word	0x47efffff
 80a3258:	7ff00000 	.word	0x7ff00000

080a325c <sqrt>:
 80a325c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3260:	b08b      	sub	sp, #44	; 0x2c
 80a3262:	4604      	mov	r4, r0
 80a3264:	460d      	mov	r5, r1
 80a3266:	f001 f8b5 	bl	80a43d4 <__ieee754_sqrt>
 80a326a:	4b28      	ldr	r3, [pc, #160]	; (80a330c <sqrt+0xb0>)
 80a326c:	4606      	mov	r6, r0
 80a326e:	f993 a000 	ldrsb.w	sl, [r3]
 80a3272:	460f      	mov	r7, r1
 80a3274:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80a3278:	d012      	beq.n	80a32a0 <sqrt+0x44>
 80a327a:	4622      	mov	r2, r4
 80a327c:	462b      	mov	r3, r5
 80a327e:	4620      	mov	r0, r4
 80a3280:	4629      	mov	r1, r5
 80a3282:	f002 f879 	bl	80a5378 <__aeabi_dcmpun>
 80a3286:	4683      	mov	fp, r0
 80a3288:	b950      	cbnz	r0, 80a32a0 <sqrt+0x44>
 80a328a:	f04f 0800 	mov.w	r8, #0
 80a328e:	f04f 0900 	mov.w	r9, #0
 80a3292:	4620      	mov	r0, r4
 80a3294:	4629      	mov	r1, r5
 80a3296:	4642      	mov	r2, r8
 80a3298:	464b      	mov	r3, r9
 80a329a:	f002 f845 	bl	80a5328 <__aeabi_dcmplt>
 80a329e:	b920      	cbnz	r0, 80a32aa <sqrt+0x4e>
 80a32a0:	4630      	mov	r0, r6
 80a32a2:	4639      	mov	r1, r7
 80a32a4:	b00b      	add	sp, #44	; 0x2c
 80a32a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a32aa:	4a19      	ldr	r2, [pc, #100]	; (80a3310 <sqrt+0xb4>)
 80a32ac:	2301      	movs	r3, #1
 80a32ae:	f8cd b020 	str.w	fp, [sp, #32]
 80a32b2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a32b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a32ba:	9201      	str	r2, [sp, #4]
 80a32bc:	9300      	str	r3, [sp, #0]
 80a32be:	f1ba 0f00 	cmp.w	sl, #0
 80a32c2:	d015      	beq.n	80a32f0 <sqrt+0x94>
 80a32c4:	4642      	mov	r2, r8
 80a32c6:	464b      	mov	r3, r9
 80a32c8:	4640      	mov	r0, r8
 80a32ca:	4649      	mov	r1, r9
 80a32cc:	f001 fee4 	bl	80a5098 <__aeabi_ddiv>
 80a32d0:	f1ba 0f02 	cmp.w	sl, #2
 80a32d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a32d8:	d10c      	bne.n	80a32f4 <sqrt+0x98>
 80a32da:	f7fe fe8d 	bl	80a1ff8 <__errno>
 80a32de:	2321      	movs	r3, #33	; 0x21
 80a32e0:	6003      	str	r3, [r0, #0]
 80a32e2:	9b08      	ldr	r3, [sp, #32]
 80a32e4:	b963      	cbnz	r3, 80a3300 <sqrt+0xa4>
 80a32e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a32ea:	b00b      	add	sp, #44	; 0x2c
 80a32ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a32f0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80a32f4:	4668      	mov	r0, sp
 80a32f6:	f001 fadb 	bl	80a48b0 <matherr>
 80a32fa:	2800      	cmp	r0, #0
 80a32fc:	d1f1      	bne.n	80a32e2 <sqrt+0x86>
 80a32fe:	e7ec      	b.n	80a32da <sqrt+0x7e>
 80a3300:	f7fe fe7a 	bl	80a1ff8 <__errno>
 80a3304:	9b08      	ldr	r3, [sp, #32]
 80a3306:	6003      	str	r3, [r0, #0]
 80a3308:	e7ed      	b.n	80a32e6 <sqrt+0x8a>
 80a330a:	bf00      	nop
 80a330c:	2000001c 	.word	0x2000001c
 80a3310:	080a6080 	.word	0x080a6080
 80a3314:	00000000 	.word	0x00000000

080a3318 <__ieee754_asin>:
 80a3318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a331c:	4bc0      	ldr	r3, [pc, #768]	; (80a3620 <__ieee754_asin+0x308>)
 80a331e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80a3322:	4598      	cmp	r8, r3
 80a3324:	b084      	sub	sp, #16
 80a3326:	460d      	mov	r5, r1
 80a3328:	4604      	mov	r4, r0
 80a332a:	dd14      	ble.n	80a3356 <__ieee754_asin+0x3e>
 80a332c:	4603      	mov	r3, r0
 80a332e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80a3332:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80a3336:	ea58 0303 	orrs.w	r3, r8, r3
 80a333a:	d023      	beq.n	80a3384 <__ieee754_asin+0x6c>
 80a333c:	4602      	mov	r2, r0
 80a333e:	460b      	mov	r3, r1
 80a3340:	f001 fbcc 	bl	80a4adc <__aeabi_dsub>
 80a3344:	4602      	mov	r2, r0
 80a3346:	460b      	mov	r3, r1
 80a3348:	f001 fea6 	bl	80a5098 <__aeabi_ddiv>
 80a334c:	4604      	mov	r4, r0
 80a334e:	4620      	mov	r0, r4
 80a3350:	b004      	add	sp, #16
 80a3352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3356:	4bb3      	ldr	r3, [pc, #716]	; (80a3624 <__ieee754_asin+0x30c>)
 80a3358:	468a      	mov	sl, r1
 80a335a:	4598      	cmp	r8, r3
 80a335c:	dc2b      	bgt.n	80a33b6 <__ieee754_asin+0x9e>
 80a335e:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80a3362:	f280 8167 	bge.w	80a3634 <__ieee754_asin+0x31c>
 80a3366:	a392      	add	r3, pc, #584	; (adr r3, 80a35b0 <__ieee754_asin+0x298>)
 80a3368:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a336c:	f001 fbb8 	bl	80a4ae0 <__adddf3>
 80a3370:	2200      	movs	r2, #0
 80a3372:	4bad      	ldr	r3, [pc, #692]	; (80a3628 <__ieee754_asin+0x310>)
 80a3374:	f001 fff6 	bl	80a5364 <__aeabi_dcmpgt>
 80a3378:	b1e8      	cbz	r0, 80a33b6 <__ieee754_asin+0x9e>
 80a337a:	4629      	mov	r1, r5
 80a337c:	4620      	mov	r0, r4
 80a337e:	b004      	add	sp, #16
 80a3380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3384:	a38c      	add	r3, pc, #560	; (adr r3, 80a35b8 <__ieee754_asin+0x2a0>)
 80a3386:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a338a:	f001 fd5b 	bl	80a4e44 <__aeabi_dmul>
 80a338e:	a38c      	add	r3, pc, #560	; (adr r3, 80a35c0 <__ieee754_asin+0x2a8>)
 80a3390:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3394:	4606      	mov	r6, r0
 80a3396:	460f      	mov	r7, r1
 80a3398:	4620      	mov	r0, r4
 80a339a:	4629      	mov	r1, r5
 80a339c:	f001 fd52 	bl	80a4e44 <__aeabi_dmul>
 80a33a0:	4602      	mov	r2, r0
 80a33a2:	460b      	mov	r3, r1
 80a33a4:	4630      	mov	r0, r6
 80a33a6:	4639      	mov	r1, r7
 80a33a8:	f001 fb9a 	bl	80a4ae0 <__adddf3>
 80a33ac:	4604      	mov	r4, r0
 80a33ae:	4620      	mov	r0, r4
 80a33b0:	b004      	add	sp, #16
 80a33b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a33b6:	4620      	mov	r0, r4
 80a33b8:	4629      	mov	r1, r5
 80a33ba:	f001 fa6f 	bl	80a489c <fabs>
 80a33be:	4602      	mov	r2, r0
 80a33c0:	460b      	mov	r3, r1
 80a33c2:	2000      	movs	r0, #0
 80a33c4:	4998      	ldr	r1, [pc, #608]	; (80a3628 <__ieee754_asin+0x310>)
 80a33c6:	f001 fb89 	bl	80a4adc <__aeabi_dsub>
 80a33ca:	2200      	movs	r2, #0
 80a33cc:	4b97      	ldr	r3, [pc, #604]	; (80a362c <__ieee754_asin+0x314>)
 80a33ce:	f001 fd39 	bl	80a4e44 <__aeabi_dmul>
 80a33d2:	a37d      	add	r3, pc, #500	; (adr r3, 80a35c8 <__ieee754_asin+0x2b0>)
 80a33d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a33d8:	4604      	mov	r4, r0
 80a33da:	460d      	mov	r5, r1
 80a33dc:	f001 fd32 	bl	80a4e44 <__aeabi_dmul>
 80a33e0:	a37b      	add	r3, pc, #492	; (adr r3, 80a35d0 <__ieee754_asin+0x2b8>)
 80a33e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a33e6:	f001 fb7b 	bl	80a4ae0 <__adddf3>
 80a33ea:	4622      	mov	r2, r4
 80a33ec:	462b      	mov	r3, r5
 80a33ee:	f001 fd29 	bl	80a4e44 <__aeabi_dmul>
 80a33f2:	a379      	add	r3, pc, #484	; (adr r3, 80a35d8 <__ieee754_asin+0x2c0>)
 80a33f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a33f8:	f001 fb70 	bl	80a4adc <__aeabi_dsub>
 80a33fc:	4622      	mov	r2, r4
 80a33fe:	462b      	mov	r3, r5
 80a3400:	f001 fd20 	bl	80a4e44 <__aeabi_dmul>
 80a3404:	a376      	add	r3, pc, #472	; (adr r3, 80a35e0 <__ieee754_asin+0x2c8>)
 80a3406:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a340a:	f001 fb69 	bl	80a4ae0 <__adddf3>
 80a340e:	4622      	mov	r2, r4
 80a3410:	462b      	mov	r3, r5
 80a3412:	f001 fd17 	bl	80a4e44 <__aeabi_dmul>
 80a3416:	a374      	add	r3, pc, #464	; (adr r3, 80a35e8 <__ieee754_asin+0x2d0>)
 80a3418:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a341c:	f001 fb5e 	bl	80a4adc <__aeabi_dsub>
 80a3420:	4622      	mov	r2, r4
 80a3422:	462b      	mov	r3, r5
 80a3424:	f001 fd0e 	bl	80a4e44 <__aeabi_dmul>
 80a3428:	a371      	add	r3, pc, #452	; (adr r3, 80a35f0 <__ieee754_asin+0x2d8>)
 80a342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a342e:	f001 fb57 	bl	80a4ae0 <__adddf3>
 80a3432:	4622      	mov	r2, r4
 80a3434:	462b      	mov	r3, r5
 80a3436:	f001 fd05 	bl	80a4e44 <__aeabi_dmul>
 80a343a:	a36f      	add	r3, pc, #444	; (adr r3, 80a35f8 <__ieee754_asin+0x2e0>)
 80a343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3440:	e9cd 0100 	strd	r0, r1, [sp]
 80a3444:	4620      	mov	r0, r4
 80a3446:	4629      	mov	r1, r5
 80a3448:	f001 fcfc 	bl	80a4e44 <__aeabi_dmul>
 80a344c:	a36c      	add	r3, pc, #432	; (adr r3, 80a3600 <__ieee754_asin+0x2e8>)
 80a344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3452:	f001 fb43 	bl	80a4adc <__aeabi_dsub>
 80a3456:	4622      	mov	r2, r4
 80a3458:	462b      	mov	r3, r5
 80a345a:	f001 fcf3 	bl	80a4e44 <__aeabi_dmul>
 80a345e:	a36a      	add	r3, pc, #424	; (adr r3, 80a3608 <__ieee754_asin+0x2f0>)
 80a3460:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3464:	f001 fb3c 	bl	80a4ae0 <__adddf3>
 80a3468:	4622      	mov	r2, r4
 80a346a:	462b      	mov	r3, r5
 80a346c:	f001 fcea 	bl	80a4e44 <__aeabi_dmul>
 80a3470:	a367      	add	r3, pc, #412	; (adr r3, 80a3610 <__ieee754_asin+0x2f8>)
 80a3472:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3476:	f001 fb31 	bl	80a4adc <__aeabi_dsub>
 80a347a:	4622      	mov	r2, r4
 80a347c:	462b      	mov	r3, r5
 80a347e:	f001 fce1 	bl	80a4e44 <__aeabi_dmul>
 80a3482:	4b69      	ldr	r3, [pc, #420]	; (80a3628 <__ieee754_asin+0x310>)
 80a3484:	2200      	movs	r2, #0
 80a3486:	f001 fb2b 	bl	80a4ae0 <__adddf3>
 80a348a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a348e:	4620      	mov	r0, r4
 80a3490:	4629      	mov	r1, r5
 80a3492:	f000 ff9f 	bl	80a43d4 <__ieee754_sqrt>
 80a3496:	4b66      	ldr	r3, [pc, #408]	; (80a3630 <__ieee754_asin+0x318>)
 80a3498:	4606      	mov	r6, r0
 80a349a:	4598      	cmp	r8, r3
 80a349c:	460f      	mov	r7, r1
 80a349e:	dc66      	bgt.n	80a356e <__ieee754_asin+0x256>
 80a34a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a34a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a34a8:	f001 fdf6 	bl	80a5098 <__aeabi_ddiv>
 80a34ac:	4632      	mov	r2, r6
 80a34ae:	e9cd 0100 	strd	r0, r1, [sp]
 80a34b2:	463b      	mov	r3, r7
 80a34b4:	4630      	mov	r0, r6
 80a34b6:	4639      	mov	r1, r7
 80a34b8:	f001 fb12 	bl	80a4ae0 <__adddf3>
 80a34bc:	4602      	mov	r2, r0
 80a34be:	460b      	mov	r3, r1
 80a34c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a34c4:	f001 fcbe 	bl	80a4e44 <__aeabi_dmul>
 80a34c8:	f04f 0800 	mov.w	r8, #0
 80a34cc:	e9cd 0100 	strd	r0, r1, [sp]
 80a34d0:	4642      	mov	r2, r8
 80a34d2:	463b      	mov	r3, r7
 80a34d4:	4640      	mov	r0, r8
 80a34d6:	4639      	mov	r1, r7
 80a34d8:	f001 fcb4 	bl	80a4e44 <__aeabi_dmul>
 80a34dc:	4602      	mov	r2, r0
 80a34de:	460b      	mov	r3, r1
 80a34e0:	4620      	mov	r0, r4
 80a34e2:	4629      	mov	r1, r5
 80a34e4:	f001 fafa 	bl	80a4adc <__aeabi_dsub>
 80a34e8:	4642      	mov	r2, r8
 80a34ea:	4604      	mov	r4, r0
 80a34ec:	460d      	mov	r5, r1
 80a34ee:	463b      	mov	r3, r7
 80a34f0:	4630      	mov	r0, r6
 80a34f2:	4639      	mov	r1, r7
 80a34f4:	f001 faf4 	bl	80a4ae0 <__adddf3>
 80a34f8:	4602      	mov	r2, r0
 80a34fa:	460b      	mov	r3, r1
 80a34fc:	4620      	mov	r0, r4
 80a34fe:	4629      	mov	r1, r5
 80a3500:	f001 fdca 	bl	80a5098 <__aeabi_ddiv>
 80a3504:	4602      	mov	r2, r0
 80a3506:	460b      	mov	r3, r1
 80a3508:	f001 faea 	bl	80a4ae0 <__adddf3>
 80a350c:	4602      	mov	r2, r0
 80a350e:	460b      	mov	r3, r1
 80a3510:	a12b      	add	r1, pc, #172	; (adr r1, 80a35c0 <__ieee754_asin+0x2a8>)
 80a3512:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a3516:	f001 fae1 	bl	80a4adc <__aeabi_dsub>
 80a351a:	4602      	mov	r2, r0
 80a351c:	460b      	mov	r3, r1
 80a351e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3522:	f001 fadb 	bl	80a4adc <__aeabi_dsub>
 80a3526:	4642      	mov	r2, r8
 80a3528:	4604      	mov	r4, r0
 80a352a:	460d      	mov	r5, r1
 80a352c:	463b      	mov	r3, r7
 80a352e:	4640      	mov	r0, r8
 80a3530:	4639      	mov	r1, r7
 80a3532:	f001 fad5 	bl	80a4ae0 <__adddf3>
 80a3536:	4602      	mov	r2, r0
 80a3538:	460b      	mov	r3, r1
 80a353a:	a137      	add	r1, pc, #220	; (adr r1, 80a3618 <__ieee754_asin+0x300>)
 80a353c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a3540:	f001 facc 	bl	80a4adc <__aeabi_dsub>
 80a3544:	4602      	mov	r2, r0
 80a3546:	460b      	mov	r3, r1
 80a3548:	4620      	mov	r0, r4
 80a354a:	4629      	mov	r1, r5
 80a354c:	f001 fac6 	bl	80a4adc <__aeabi_dsub>
 80a3550:	4602      	mov	r2, r0
 80a3552:	460b      	mov	r3, r1
 80a3554:	a130      	add	r1, pc, #192	; (adr r1, 80a3618 <__ieee754_asin+0x300>)
 80a3556:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a355a:	f001 fabf 	bl	80a4adc <__aeabi_dsub>
 80a355e:	4604      	mov	r4, r0
 80a3560:	f1ba 0f00 	cmp.w	sl, #0
 80a3564:	f73f aef3 	bgt.w	80a334e <__ieee754_asin+0x36>
 80a3568:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a356c:	e6ef      	b.n	80a334e <__ieee754_asin+0x36>
 80a356e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3572:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3576:	f001 fd8f 	bl	80a5098 <__aeabi_ddiv>
 80a357a:	4632      	mov	r2, r6
 80a357c:	463b      	mov	r3, r7
 80a357e:	f001 fc61 	bl	80a4e44 <__aeabi_dmul>
 80a3582:	4632      	mov	r2, r6
 80a3584:	463b      	mov	r3, r7
 80a3586:	f001 faab 	bl	80a4ae0 <__adddf3>
 80a358a:	4602      	mov	r2, r0
 80a358c:	460b      	mov	r3, r1
 80a358e:	f001 faa7 	bl	80a4ae0 <__adddf3>
 80a3592:	a30b      	add	r3, pc, #44	; (adr r3, 80a35c0 <__ieee754_asin+0x2a8>)
 80a3594:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3598:	f001 faa0 	bl	80a4adc <__aeabi_dsub>
 80a359c:	4602      	mov	r2, r0
 80a359e:	460b      	mov	r3, r1
 80a35a0:	a105      	add	r1, pc, #20	; (adr r1, 80a35b8 <__ieee754_asin+0x2a0>)
 80a35a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a35a6:	f001 fa99 	bl	80a4adc <__aeabi_dsub>
 80a35aa:	4604      	mov	r4, r0
 80a35ac:	e7d8      	b.n	80a3560 <__ieee754_asin+0x248>
 80a35ae:	bf00      	nop
 80a35b0:	8800759c 	.word	0x8800759c
 80a35b4:	7e37e43c 	.word	0x7e37e43c
 80a35b8:	54442d18 	.word	0x54442d18
 80a35bc:	3ff921fb 	.word	0x3ff921fb
 80a35c0:	33145c07 	.word	0x33145c07
 80a35c4:	3c91a626 	.word	0x3c91a626
 80a35c8:	0dfdf709 	.word	0x0dfdf709
 80a35cc:	3f023de1 	.word	0x3f023de1
 80a35d0:	7501b288 	.word	0x7501b288
 80a35d4:	3f49efe0 	.word	0x3f49efe0
 80a35d8:	b5688f3b 	.word	0xb5688f3b
 80a35dc:	3fa48228 	.word	0x3fa48228
 80a35e0:	0e884455 	.word	0x0e884455
 80a35e4:	3fc9c155 	.word	0x3fc9c155
 80a35e8:	03eb6f7d 	.word	0x03eb6f7d
 80a35ec:	3fd4d612 	.word	0x3fd4d612
 80a35f0:	55555555 	.word	0x55555555
 80a35f4:	3fc55555 	.word	0x3fc55555
 80a35f8:	b12e9282 	.word	0xb12e9282
 80a35fc:	3fb3b8c5 	.word	0x3fb3b8c5
 80a3600:	1b8d0159 	.word	0x1b8d0159
 80a3604:	3fe6066c 	.word	0x3fe6066c
 80a3608:	9c598ac8 	.word	0x9c598ac8
 80a360c:	40002ae5 	.word	0x40002ae5
 80a3610:	1c8a2d4b 	.word	0x1c8a2d4b
 80a3614:	40033a27 	.word	0x40033a27
 80a3618:	54442d18 	.word	0x54442d18
 80a361c:	3fe921fb 	.word	0x3fe921fb
 80a3620:	3fefffff 	.word	0x3fefffff
 80a3624:	3fdfffff 	.word	0x3fdfffff
 80a3628:	3ff00000 	.word	0x3ff00000
 80a362c:	3fe00000 	.word	0x3fe00000
 80a3630:	3fef3332 	.word	0x3fef3332
 80a3634:	4602      	mov	r2, r0
 80a3636:	460b      	mov	r3, r1
 80a3638:	f001 fc04 	bl	80a4e44 <__aeabi_dmul>
 80a363c:	a338      	add	r3, pc, #224	; (adr r3, 80a3720 <__ieee754_asin+0x408>)
 80a363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3642:	4606      	mov	r6, r0
 80a3644:	460f      	mov	r7, r1
 80a3646:	f001 fbfd 	bl	80a4e44 <__aeabi_dmul>
 80a364a:	a337      	add	r3, pc, #220	; (adr r3, 80a3728 <__ieee754_asin+0x410>)
 80a364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3650:	f001 fa46 	bl	80a4ae0 <__adddf3>
 80a3654:	4632      	mov	r2, r6
 80a3656:	463b      	mov	r3, r7
 80a3658:	f001 fbf4 	bl	80a4e44 <__aeabi_dmul>
 80a365c:	a334      	add	r3, pc, #208	; (adr r3, 80a3730 <__ieee754_asin+0x418>)
 80a365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3662:	f001 fa3b 	bl	80a4adc <__aeabi_dsub>
 80a3666:	4632      	mov	r2, r6
 80a3668:	463b      	mov	r3, r7
 80a366a:	f001 fbeb 	bl	80a4e44 <__aeabi_dmul>
 80a366e:	a332      	add	r3, pc, #200	; (adr r3, 80a3738 <__ieee754_asin+0x420>)
 80a3670:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3674:	f001 fa34 	bl	80a4ae0 <__adddf3>
 80a3678:	4632      	mov	r2, r6
 80a367a:	463b      	mov	r3, r7
 80a367c:	f001 fbe2 	bl	80a4e44 <__aeabi_dmul>
 80a3680:	a32f      	add	r3, pc, #188	; (adr r3, 80a3740 <__ieee754_asin+0x428>)
 80a3682:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3686:	f001 fa29 	bl	80a4adc <__aeabi_dsub>
 80a368a:	4632      	mov	r2, r6
 80a368c:	463b      	mov	r3, r7
 80a368e:	f001 fbd9 	bl	80a4e44 <__aeabi_dmul>
 80a3692:	a32d      	add	r3, pc, #180	; (adr r3, 80a3748 <__ieee754_asin+0x430>)
 80a3694:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3698:	f001 fa22 	bl	80a4ae0 <__adddf3>
 80a369c:	4632      	mov	r2, r6
 80a369e:	463b      	mov	r3, r7
 80a36a0:	f001 fbd0 	bl	80a4e44 <__aeabi_dmul>
 80a36a4:	a32a      	add	r3, pc, #168	; (adr r3, 80a3750 <__ieee754_asin+0x438>)
 80a36a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a36aa:	4680      	mov	r8, r0
 80a36ac:	4689      	mov	r9, r1
 80a36ae:	4630      	mov	r0, r6
 80a36b0:	4639      	mov	r1, r7
 80a36b2:	f001 fbc7 	bl	80a4e44 <__aeabi_dmul>
 80a36b6:	a328      	add	r3, pc, #160	; (adr r3, 80a3758 <__ieee754_asin+0x440>)
 80a36b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a36bc:	f001 fa0e 	bl	80a4adc <__aeabi_dsub>
 80a36c0:	4632      	mov	r2, r6
 80a36c2:	463b      	mov	r3, r7
 80a36c4:	f001 fbbe 	bl	80a4e44 <__aeabi_dmul>
 80a36c8:	a325      	add	r3, pc, #148	; (adr r3, 80a3760 <__ieee754_asin+0x448>)
 80a36ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a36ce:	f001 fa07 	bl	80a4ae0 <__adddf3>
 80a36d2:	4632      	mov	r2, r6
 80a36d4:	463b      	mov	r3, r7
 80a36d6:	f001 fbb5 	bl	80a4e44 <__aeabi_dmul>
 80a36da:	a323      	add	r3, pc, #140	; (adr r3, 80a3768 <__ieee754_asin+0x450>)
 80a36dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a36e0:	f001 f9fc 	bl	80a4adc <__aeabi_dsub>
 80a36e4:	4632      	mov	r2, r6
 80a36e6:	463b      	mov	r3, r7
 80a36e8:	f001 fbac 	bl	80a4e44 <__aeabi_dmul>
 80a36ec:	2200      	movs	r2, #0
 80a36ee:	4b20      	ldr	r3, [pc, #128]	; (80a3770 <__ieee754_asin+0x458>)
 80a36f0:	f001 f9f6 	bl	80a4ae0 <__adddf3>
 80a36f4:	4602      	mov	r2, r0
 80a36f6:	460b      	mov	r3, r1
 80a36f8:	4640      	mov	r0, r8
 80a36fa:	4649      	mov	r1, r9
 80a36fc:	f001 fccc 	bl	80a5098 <__aeabi_ddiv>
 80a3700:	4622      	mov	r2, r4
 80a3702:	462b      	mov	r3, r5
 80a3704:	f001 fb9e 	bl	80a4e44 <__aeabi_dmul>
 80a3708:	4622      	mov	r2, r4
 80a370a:	462b      	mov	r3, r5
 80a370c:	f001 f9e8 	bl	80a4ae0 <__adddf3>
 80a3710:	4604      	mov	r4, r0
 80a3712:	4620      	mov	r0, r4
 80a3714:	b004      	add	sp, #16
 80a3716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a371a:	bf00      	nop
 80a371c:	f3af 8000 	nop.w
 80a3720:	0dfdf709 	.word	0x0dfdf709
 80a3724:	3f023de1 	.word	0x3f023de1
 80a3728:	7501b288 	.word	0x7501b288
 80a372c:	3f49efe0 	.word	0x3f49efe0
 80a3730:	b5688f3b 	.word	0xb5688f3b
 80a3734:	3fa48228 	.word	0x3fa48228
 80a3738:	0e884455 	.word	0x0e884455
 80a373c:	3fc9c155 	.word	0x3fc9c155
 80a3740:	03eb6f7d 	.word	0x03eb6f7d
 80a3744:	3fd4d612 	.word	0x3fd4d612
 80a3748:	55555555 	.word	0x55555555
 80a374c:	3fc55555 	.word	0x3fc55555
 80a3750:	b12e9282 	.word	0xb12e9282
 80a3754:	3fb3b8c5 	.word	0x3fb3b8c5
 80a3758:	1b8d0159 	.word	0x1b8d0159
 80a375c:	3fe6066c 	.word	0x3fe6066c
 80a3760:	9c598ac8 	.word	0x9c598ac8
 80a3764:	40002ae5 	.word	0x40002ae5
 80a3768:	1c8a2d4b 	.word	0x1c8a2d4b
 80a376c:	40033a27 	.word	0x40033a27
 80a3770:	3ff00000 	.word	0x3ff00000
 80a3774:	00000000 	.word	0x00000000

080a3778 <__ieee754_atan2>:
 80a3778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a377c:	4254      	negs	r4, r2
 80a377e:	4314      	orrs	r4, r2
 80a3780:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80a3784:	f8df e180 	ldr.w	lr, [pc, #384]	; 80a3908 <__ieee754_atan2+0x190>
 80a3788:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
 80a378c:	4574      	cmp	r4, lr
 80a378e:	4606      	mov	r6, r0
 80a3790:	460d      	mov	r5, r1
 80a3792:	d83e      	bhi.n	80a3812 <__ieee754_atan2+0x9a>
 80a3794:	4244      	negs	r4, r0
 80a3796:	4304      	orrs	r4, r0
 80a3798:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
 80a379c:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
 80a37a0:	4574      	cmp	r4, lr
 80a37a2:	468a      	mov	sl, r1
 80a37a4:	d835      	bhi.n	80a3812 <__ieee754_atan2+0x9a>
 80a37a6:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
 80a37aa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a37ae:	4314      	orrs	r4, r2
 80a37b0:	d044      	beq.n	80a383c <__ieee754_atan2+0xc4>
 80a37b2:	179c      	asrs	r4, r3, #30
 80a37b4:	f004 0402 	and.w	r4, r4, #2
 80a37b8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80a37bc:	ea50 010b 	orrs.w	r1, r0, fp
 80a37c0:	d02f      	beq.n	80a3822 <__ieee754_atan2+0xaa>
 80a37c2:	ea52 0109 	orrs.w	r1, r2, r9
 80a37c6:	d033      	beq.n	80a3830 <__ieee754_atan2+0xb8>
 80a37c8:	45f1      	cmp	r9, lr
 80a37ca:	d046      	beq.n	80a385a <__ieee754_atan2+0xe2>
 80a37cc:	45f3      	cmp	fp, lr
 80a37ce:	d02f      	beq.n	80a3830 <__ieee754_atan2+0xb8>
 80a37d0:	ebc9 090b 	rsb	r9, r9, fp
 80a37d4:	ea4f 5929 	mov.w	r9, r9, asr #20
 80a37d8:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
 80a37dc:	dc34      	bgt.n	80a3848 <__ieee754_atan2+0xd0>
 80a37de:	2b00      	cmp	r3, #0
 80a37e0:	db57      	blt.n	80a3892 <__ieee754_atan2+0x11a>
 80a37e2:	4630      	mov	r0, r6
 80a37e4:	4629      	mov	r1, r5
 80a37e6:	f001 fc57 	bl	80a5098 <__aeabi_ddiv>
 80a37ea:	f001 f857 	bl	80a489c <fabs>
 80a37ee:	f000 feb7 	bl	80a4560 <atan>
 80a37f2:	2c01      	cmp	r4, #1
 80a37f4:	d04a      	beq.n	80a388c <__ieee754_atan2+0x114>
 80a37f6:	2c02      	cmp	r4, #2
 80a37f8:	d03b      	beq.n	80a3872 <__ieee754_atan2+0xfa>
 80a37fa:	b184      	cbz	r4, 80a381e <__ieee754_atan2+0xa6>
 80a37fc:	a332      	add	r3, pc, #200	; (adr r3, 80a38c8 <__ieee754_atan2+0x150>)
 80a37fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3802:	f001 f96b 	bl	80a4adc <__aeabi_dsub>
 80a3806:	a332      	add	r3, pc, #200	; (adr r3, 80a38d0 <__ieee754_atan2+0x158>)
 80a3808:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a380c:	f001 f966 	bl	80a4adc <__aeabi_dsub>
 80a3810:	e005      	b.n	80a381e <__ieee754_atan2+0xa6>
 80a3812:	4610      	mov	r0, r2
 80a3814:	4619      	mov	r1, r3
 80a3816:	4632      	mov	r2, r6
 80a3818:	462b      	mov	r3, r5
 80a381a:	f001 f961 	bl	80a4ae0 <__adddf3>
 80a381e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3822:	2c02      	cmp	r4, #2
 80a3824:	d014      	beq.n	80a3850 <__ieee754_atan2+0xd8>
 80a3826:	2c03      	cmp	r4, #3
 80a3828:	d10c      	bne.n	80a3844 <__ieee754_atan2+0xcc>
 80a382a:	482d      	ldr	r0, [pc, #180]	; (80a38e0 <__ieee754_atan2+0x168>)
 80a382c:	492d      	ldr	r1, [pc, #180]	; (80a38e4 <__ieee754_atan2+0x16c>)
 80a382e:	e7f6      	b.n	80a381e <__ieee754_atan2+0xa6>
 80a3830:	f1ba 0f00 	cmp.w	sl, #0
 80a3834:	482a      	ldr	r0, [pc, #168]	; (80a38e0 <__ieee754_atan2+0x168>)
 80a3836:	db0e      	blt.n	80a3856 <__ieee754_atan2+0xde>
 80a3838:	492b      	ldr	r1, [pc, #172]	; (80a38e8 <__ieee754_atan2+0x170>)
 80a383a:	e7f0      	b.n	80a381e <__ieee754_atan2+0xa6>
 80a383c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3840:	f000 be8e 	b.w	80a4560 <atan>
 80a3844:	4629      	mov	r1, r5
 80a3846:	e7ea      	b.n	80a381e <__ieee754_atan2+0xa6>
 80a3848:	a123      	add	r1, pc, #140	; (adr r1, 80a38d8 <__ieee754_atan2+0x160>)
 80a384a:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a384e:	e7d0      	b.n	80a37f2 <__ieee754_atan2+0x7a>
 80a3850:	4823      	ldr	r0, [pc, #140]	; (80a38e0 <__ieee754_atan2+0x168>)
 80a3852:	4926      	ldr	r1, [pc, #152]	; (80a38ec <__ieee754_atan2+0x174>)
 80a3854:	e7e3      	b.n	80a381e <__ieee754_atan2+0xa6>
 80a3856:	4926      	ldr	r1, [pc, #152]	; (80a38f0 <__ieee754_atan2+0x178>)
 80a3858:	e7e1      	b.n	80a381e <__ieee754_atan2+0xa6>
 80a385a:	45cb      	cmp	fp, r9
 80a385c:	d01f      	beq.n	80a389e <__ieee754_atan2+0x126>
 80a385e:	2c02      	cmp	r4, #2
 80a3860:	d0f6      	beq.n	80a3850 <__ieee754_atan2+0xd8>
 80a3862:	2c03      	cmp	r4, #3
 80a3864:	d0e1      	beq.n	80a382a <__ieee754_atan2+0xb2>
 80a3866:	2c01      	cmp	r4, #1
 80a3868:	f04f 0000 	mov.w	r0, #0
 80a386c:	d020      	beq.n	80a38b0 <__ieee754_atan2+0x138>
 80a386e:	4601      	mov	r1, r0
 80a3870:	e7d5      	b.n	80a381e <__ieee754_atan2+0xa6>
 80a3872:	a315      	add	r3, pc, #84	; (adr r3, 80a38c8 <__ieee754_atan2+0x150>)
 80a3874:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3878:	f001 f930 	bl	80a4adc <__aeabi_dsub>
 80a387c:	4602      	mov	r2, r0
 80a387e:	460b      	mov	r3, r1
 80a3880:	a113      	add	r1, pc, #76	; (adr r1, 80a38d0 <__ieee754_atan2+0x158>)
 80a3882:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a3886:	f001 f929 	bl	80a4adc <__aeabi_dsub>
 80a388a:	e7c8      	b.n	80a381e <__ieee754_atan2+0xa6>
 80a388c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a3890:	e7c5      	b.n	80a381e <__ieee754_atan2+0xa6>
 80a3892:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
 80a3896:	daa4      	bge.n	80a37e2 <__ieee754_atan2+0x6a>
 80a3898:	2000      	movs	r0, #0
 80a389a:	2100      	movs	r1, #0
 80a389c:	e7a9      	b.n	80a37f2 <__ieee754_atan2+0x7a>
 80a389e:	2c02      	cmp	r4, #2
 80a38a0:	d00e      	beq.n	80a38c0 <__ieee754_atan2+0x148>
 80a38a2:	2c03      	cmp	r4, #3
 80a38a4:	d009      	beq.n	80a38ba <__ieee754_atan2+0x142>
 80a38a6:	2c01      	cmp	r4, #1
 80a38a8:	480d      	ldr	r0, [pc, #52]	; (80a38e0 <__ieee754_atan2+0x168>)
 80a38aa:	d004      	beq.n	80a38b6 <__ieee754_atan2+0x13e>
 80a38ac:	4911      	ldr	r1, [pc, #68]	; (80a38f4 <__ieee754_atan2+0x17c>)
 80a38ae:	e7b6      	b.n	80a381e <__ieee754_atan2+0xa6>
 80a38b0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80a38b4:	e7b3      	b.n	80a381e <__ieee754_atan2+0xa6>
 80a38b6:	4910      	ldr	r1, [pc, #64]	; (80a38f8 <__ieee754_atan2+0x180>)
 80a38b8:	e7b1      	b.n	80a381e <__ieee754_atan2+0xa6>
 80a38ba:	4810      	ldr	r0, [pc, #64]	; (80a38fc <__ieee754_atan2+0x184>)
 80a38bc:	4910      	ldr	r1, [pc, #64]	; (80a3900 <__ieee754_atan2+0x188>)
 80a38be:	e7ae      	b.n	80a381e <__ieee754_atan2+0xa6>
 80a38c0:	480e      	ldr	r0, [pc, #56]	; (80a38fc <__ieee754_atan2+0x184>)
 80a38c2:	4910      	ldr	r1, [pc, #64]	; (80a3904 <__ieee754_atan2+0x18c>)
 80a38c4:	e7ab      	b.n	80a381e <__ieee754_atan2+0xa6>
 80a38c6:	bf00      	nop
 80a38c8:	33145c07 	.word	0x33145c07
 80a38cc:	3ca1a626 	.word	0x3ca1a626
 80a38d0:	54442d18 	.word	0x54442d18
 80a38d4:	400921fb 	.word	0x400921fb
 80a38d8:	54442d18 	.word	0x54442d18
 80a38dc:	3ff921fb 	.word	0x3ff921fb
 80a38e0:	54442d18 	.word	0x54442d18
 80a38e4:	c00921fb 	.word	0xc00921fb
 80a38e8:	3ff921fb 	.word	0x3ff921fb
 80a38ec:	400921fb 	.word	0x400921fb
 80a38f0:	bff921fb 	.word	0xbff921fb
 80a38f4:	3fe921fb 	.word	0x3fe921fb
 80a38f8:	bfe921fb 	.word	0xbfe921fb
 80a38fc:	7f3321d2 	.word	0x7f3321d2
 80a3900:	c002d97c 	.word	0xc002d97c
 80a3904:	4002d97c 	.word	0x4002d97c
 80a3908:	7ff00000 	.word	0x7ff00000
 80a390c:	00000000 	.word	0x00000000

080a3910 <__ieee754_pow>:
 80a3910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3914:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 80a3918:	ea58 0902 	orrs.w	r9, r8, r2
 80a391c:	b093      	sub	sp, #76	; 0x4c
 80a391e:	d03c      	beq.n	80a399a <__ieee754_pow+0x8a>
 80a3920:	4c71      	ldr	r4, [pc, #452]	; (80a3ae8 <__ieee754_pow+0x1d8>)
 80a3922:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a3926:	42a6      	cmp	r6, r4
 80a3928:	4683      	mov	fp, r0
 80a392a:	460d      	mov	r5, r1
 80a392c:	dd0c      	ble.n	80a3948 <__ieee754_pow+0x38>
 80a392e:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80a3932:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80a3936:	ea56 000b 	orrs.w	r0, r6, fp
 80a393a:	d138      	bne.n	80a39ae <__ieee754_pow+0x9e>
 80a393c:	4683      	mov	fp, r0
 80a393e:	496b      	ldr	r1, [pc, #428]	; (80a3aec <__ieee754_pow+0x1dc>)
 80a3940:	4658      	mov	r0, fp
 80a3942:	b013      	add	sp, #76	; 0x4c
 80a3944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3948:	469a      	mov	sl, r3
 80a394a:	4696      	mov	lr, r2
 80a394c:	d02b      	beq.n	80a39a6 <__ieee754_pow+0x96>
 80a394e:	45a0      	cmp	r8, r4
 80a3950:	dced      	bgt.n	80a392e <__ieee754_pow+0x1e>
 80a3952:	4c65      	ldr	r4, [pc, #404]	; (80a3ae8 <__ieee754_pow+0x1d8>)
 80a3954:	45a0      	cmp	r8, r4
 80a3956:	d078      	beq.n	80a3a4a <__ieee754_pow+0x13a>
 80a3958:	2d00      	cmp	r5, #0
 80a395a:	460f      	mov	r7, r1
 80a395c:	4681      	mov	r9, r0
 80a395e:	e9cd 2300 	strd	r2, r3, [sp]
 80a3962:	db76      	blt.n	80a3a52 <__ieee754_pow+0x142>
 80a3964:	2400      	movs	r4, #0
 80a3966:	f1be 0f00 	cmp.w	lr, #0
 80a396a:	d127      	bne.n	80a39bc <__ieee754_pow+0xac>
 80a396c:	4b5e      	ldr	r3, [pc, #376]	; (80a3ae8 <__ieee754_pow+0x1d8>)
 80a396e:	4598      	cmp	r8, r3
 80a3970:	f000 808b 	beq.w	80a3a8a <__ieee754_pow+0x17a>
 80a3974:	4b5d      	ldr	r3, [pc, #372]	; (80a3aec <__ieee754_pow+0x1dc>)
 80a3976:	4598      	cmp	r8, r3
 80a3978:	d052      	beq.n	80a3a20 <__ieee754_pow+0x110>
 80a397a:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 80a397e:	f000 83c9 	beq.w	80a4114 <__ieee754_pow+0x804>
 80a3982:	4b5b      	ldr	r3, [pc, #364]	; (80a3af0 <__ieee754_pow+0x1e0>)
 80a3984:	459a      	cmp	sl, r3
 80a3986:	d119      	bne.n	80a39bc <__ieee754_pow+0xac>
 80a3988:	2d00      	cmp	r5, #0
 80a398a:	db17      	blt.n	80a39bc <__ieee754_pow+0xac>
 80a398c:	4648      	mov	r0, r9
 80a398e:	4639      	mov	r1, r7
 80a3990:	b013      	add	sp, #76	; 0x4c
 80a3992:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3996:	f000 bd1d 	b.w	80a43d4 <__ieee754_sqrt>
 80a399a:	46cb      	mov	fp, r9
 80a399c:	4658      	mov	r0, fp
 80a399e:	4953      	ldr	r1, [pc, #332]	; (80a3aec <__ieee754_pow+0x1dc>)
 80a39a0:	b013      	add	sp, #76	; 0x4c
 80a39a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a39a6:	2800      	cmp	r0, #0
 80a39a8:	d1c1      	bne.n	80a392e <__ieee754_pow+0x1e>
 80a39aa:	45b0      	cmp	r8, r6
 80a39ac:	ddd1      	ble.n	80a3952 <__ieee754_pow+0x42>
 80a39ae:	4851      	ldr	r0, [pc, #324]	; (80a3af4 <__ieee754_pow+0x1e4>)
 80a39b0:	b013      	add	sp, #76	; 0x4c
 80a39b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a39b6:	f000 bf7d 	b.w	80a48b4 <nan>
 80a39ba:	2400      	movs	r4, #0
 80a39bc:	4648      	mov	r0, r9
 80a39be:	4639      	mov	r1, r7
 80a39c0:	f000 ff6c 	bl	80a489c <fabs>
 80a39c4:	f1bb 0f00 	cmp.w	fp, #0
 80a39c8:	d01c      	beq.n	80a3a04 <__ieee754_pow+0xf4>
 80a39ca:	0fed      	lsrs	r5, r5, #31
 80a39cc:	3d01      	subs	r5, #1
 80a39ce:	ea54 0305 	orrs.w	r3, r4, r5
 80a39d2:	d070      	beq.n	80a3ab6 <__ieee754_pow+0x1a6>
 80a39d4:	4b48      	ldr	r3, [pc, #288]	; (80a3af8 <__ieee754_pow+0x1e8>)
 80a39d6:	4598      	cmp	r8, r3
 80a39d8:	f340 8094 	ble.w	80a3b04 <__ieee754_pow+0x1f4>
 80a39dc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80a39e0:	4598      	cmp	r8, r3
 80a39e2:	f340 840d 	ble.w	80a4200 <__ieee754_pow+0x8f0>
 80a39e6:	4b45      	ldr	r3, [pc, #276]	; (80a3afc <__ieee754_pow+0x1ec>)
 80a39e8:	429e      	cmp	r6, r3
 80a39ea:	dd70      	ble.n	80a3ace <__ieee754_pow+0x1be>
 80a39ec:	f1ba 0f00 	cmp.w	sl, #0
 80a39f0:	dd70      	ble.n	80a3ad4 <__ieee754_pow+0x1c4>
 80a39f2:	a33b      	add	r3, pc, #236	; (adr r3, 80a3ae0 <__ieee754_pow+0x1d0>)
 80a39f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a39f8:	4610      	mov	r0, r2
 80a39fa:	4619      	mov	r1, r3
 80a39fc:	f001 fa22 	bl	80a4e44 <__aeabi_dmul>
 80a3a00:	4683      	mov	fp, r0
 80a3a02:	e79d      	b.n	80a3940 <__ieee754_pow+0x30>
 80a3a04:	b126      	cbz	r6, 80a3a10 <__ieee754_pow+0x100>
 80a3a06:	4b39      	ldr	r3, [pc, #228]	; (80a3aec <__ieee754_pow+0x1dc>)
 80a3a08:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80a3a0c:	429a      	cmp	r2, r3
 80a3a0e:	d1dc      	bne.n	80a39ca <__ieee754_pow+0xba>
 80a3a10:	f1ba 0f00 	cmp.w	sl, #0
 80a3a14:	f2c0 83b7 	blt.w	80a4186 <__ieee754_pow+0x876>
 80a3a18:	2d00      	cmp	r5, #0
 80a3a1a:	db08      	blt.n	80a3a2e <__ieee754_pow+0x11e>
 80a3a1c:	4683      	mov	fp, r0
 80a3a1e:	e78f      	b.n	80a3940 <__ieee754_pow+0x30>
 80a3a20:	f1ba 0f00 	cmp.w	sl, #0
 80a3a24:	f2c0 845e 	blt.w	80a42e4 <__ieee754_pow+0x9d4>
 80a3a28:	46cb      	mov	fp, r9
 80a3a2a:	4639      	mov	r1, r7
 80a3a2c:	e788      	b.n	80a3940 <__ieee754_pow+0x30>
 80a3a2e:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80a3a32:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80a3a36:	ea56 0304 	orrs.w	r3, r6, r4
 80a3a3a:	f000 8483 	beq.w	80a4344 <__ieee754_pow+0xa34>
 80a3a3e:	2c01      	cmp	r4, #1
 80a3a40:	d1ec      	bne.n	80a3a1c <__ieee754_pow+0x10c>
 80a3a42:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a3a46:	4683      	mov	fp, r0
 80a3a48:	e77a      	b.n	80a3940 <__ieee754_pow+0x30>
 80a3a4a:	f1be 0f00 	cmp.w	lr, #0
 80a3a4e:	d083      	beq.n	80a3958 <__ieee754_pow+0x48>
 80a3a50:	e76d      	b.n	80a392e <__ieee754_pow+0x1e>
 80a3a52:	4b2b      	ldr	r3, [pc, #172]	; (80a3b00 <__ieee754_pow+0x1f0>)
 80a3a54:	4598      	cmp	r8, r3
 80a3a56:	dc2c      	bgt.n	80a3ab2 <__ieee754_pow+0x1a2>
 80a3a58:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80a3a5c:	4598      	cmp	r8, r3
 80a3a5e:	dd81      	ble.n	80a3964 <__ieee754_pow+0x54>
 80a3a60:	ea4f 5328 	mov.w	r3, r8, asr #20
 80a3a64:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a3a68:	2b14      	cmp	r3, #20
 80a3a6a:	f340 8453 	ble.w	80a4314 <__ieee754_pow+0xa04>
 80a3a6e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80a3a72:	fa2e f203 	lsr.w	r2, lr, r3
 80a3a76:	fa02 f303 	lsl.w	r3, r2, r3
 80a3a7a:	459e      	cmp	lr, r3
 80a3a7c:	f47f af72 	bne.w	80a3964 <__ieee754_pow+0x54>
 80a3a80:	f002 0201 	and.w	r2, r2, #1
 80a3a84:	f1c2 0402 	rsb	r4, r2, #2
 80a3a88:	e76d      	b.n	80a3966 <__ieee754_pow+0x56>
 80a3a8a:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
 80a3a8e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80a3a92:	ea53 030b 	orrs.w	r3, r3, fp
 80a3a96:	f000 833a 	beq.w	80a410e <__ieee754_pow+0x7fe>
 80a3a9a:	4b18      	ldr	r3, [pc, #96]	; (80a3afc <__ieee754_pow+0x1ec>)
 80a3a9c:	429e      	cmp	r6, r3
 80a3a9e:	f340 8367 	ble.w	80a4170 <__ieee754_pow+0x860>
 80a3aa2:	f1ba 0f00 	cmp.w	sl, #0
 80a3aa6:	db15      	blt.n	80a3ad4 <__ieee754_pow+0x1c4>
 80a3aa8:	e9dd 3400 	ldrd	r3, r4, [sp]
 80a3aac:	469b      	mov	fp, r3
 80a3aae:	4621      	mov	r1, r4
 80a3ab0:	e746      	b.n	80a3940 <__ieee754_pow+0x30>
 80a3ab2:	2402      	movs	r4, #2
 80a3ab4:	e757      	b.n	80a3966 <__ieee754_pow+0x56>
 80a3ab6:	464a      	mov	r2, r9
 80a3ab8:	4648      	mov	r0, r9
 80a3aba:	463b      	mov	r3, r7
 80a3abc:	4639      	mov	r1, r7
 80a3abe:	f001 f80d 	bl	80a4adc <__aeabi_dsub>
 80a3ac2:	4602      	mov	r2, r0
 80a3ac4:	460b      	mov	r3, r1
 80a3ac6:	f001 fae7 	bl	80a5098 <__aeabi_ddiv>
 80a3aca:	4683      	mov	fp, r0
 80a3acc:	e738      	b.n	80a3940 <__ieee754_pow+0x30>
 80a3ace:	f1ba 0f00 	cmp.w	sl, #0
 80a3ad2:	db8e      	blt.n	80a39f2 <__ieee754_pow+0xe2>
 80a3ad4:	f04f 0b00 	mov.w	fp, #0
 80a3ad8:	4659      	mov	r1, fp
 80a3ada:	e731      	b.n	80a3940 <__ieee754_pow+0x30>
 80a3adc:	f3af 8000 	nop.w
 80a3ae0:	8800759c 	.word	0x8800759c
 80a3ae4:	7e37e43c 	.word	0x7e37e43c
 80a3ae8:	7ff00000 	.word	0x7ff00000
 80a3aec:	3ff00000 	.word	0x3ff00000
 80a3af0:	3fe00000 	.word	0x3fe00000
 80a3af4:	080a6078 	.word	0x080a6078
 80a3af8:	41e00000 	.word	0x41e00000
 80a3afc:	3fefffff 	.word	0x3fefffff
 80a3b00:	433fffff 	.word	0x433fffff
 80a3b04:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 80a3b08:	f04f 0200 	mov.w	r2, #0
 80a3b0c:	da05      	bge.n	80a3b1a <__ieee754_pow+0x20a>
 80a3b0e:	4bd0      	ldr	r3, [pc, #832]	; (80a3e50 <__ieee754_pow+0x540>)
 80a3b10:	f001 f998 	bl	80a4e44 <__aeabi_dmul>
 80a3b14:	460e      	mov	r6, r1
 80a3b16:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80a3b1a:	f8df e344 	ldr.w	lr, [pc, #836]	; 80a3e60 <__ieee754_pow+0x550>
 80a3b1e:	1533      	asrs	r3, r6, #20
 80a3b20:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80a3b24:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a3b28:	f046 577f 	orr.w	r7, r6, #1069547520	; 0x3fc00000
 80a3b2c:	4576      	cmp	r6, lr
 80a3b2e:	eb03 0a02 	add.w	sl, r3, r2
 80a3b32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80a3b36:	f340 83c9 	ble.w	80a42cc <__ieee754_pow+0x9bc>
 80a3b3a:	4bc6      	ldr	r3, [pc, #792]	; (80a3e54 <__ieee754_pow+0x544>)
 80a3b3c:	2200      	movs	r2, #0
 80a3b3e:	429e      	cmp	r6, r3
 80a3b40:	f340 8404 	ble.w	80a434c <__ieee754_pow+0xa3c>
 80a3b44:	2300      	movs	r3, #0
 80a3b46:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3b4a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a3b4e:	4bc2      	ldr	r3, [pc, #776]	; (80a3e58 <__ieee754_pow+0x548>)
 80a3b50:	2200      	movs	r2, #0
 80a3b52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a3b56:	f10a 0a01 	add.w	sl, sl, #1
 80a3b5a:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80a3b5e:	2600      	movs	r6, #0
 80a3b60:	4639      	mov	r1, r7
 80a3b62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a3b66:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a3b6a:	f000 ffb7 	bl	80a4adc <__aeabi_dsub>
 80a3b6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a3b72:	4680      	mov	r8, r0
 80a3b74:	4689      	mov	r9, r1
 80a3b76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a3b7a:	f000 ffb1 	bl	80a4ae0 <__adddf3>
 80a3b7e:	4602      	mov	r2, r0
 80a3b80:	460b      	mov	r3, r1
 80a3b82:	2000      	movs	r0, #0
 80a3b84:	49b4      	ldr	r1, [pc, #720]	; (80a3e58 <__ieee754_pow+0x548>)
 80a3b86:	f001 fa87 	bl	80a5098 <__aeabi_ddiv>
 80a3b8a:	460a      	mov	r2, r1
 80a3b8c:	4601      	mov	r1, r0
 80a3b8e:	4613      	mov	r3, r2
 80a3b90:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 80a3b94:	4602      	mov	r2, r0
 80a3b96:	4649      	mov	r1, r9
 80a3b98:	4640      	mov	r0, r8
 80a3b9a:	f001 f953 	bl	80a4e44 <__aeabi_dmul>
 80a3b9e:	468c      	mov	ip, r1
 80a3ba0:	4683      	mov	fp, r0
 80a3ba2:	107b      	asrs	r3, r7, #1
 80a3ba4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80a3ba8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80a3bac:	1999      	adds	r1, r3, r6
 80a3bae:	2000      	movs	r0, #0
 80a3bb0:	e9cd bc04 	strd	fp, ip, [sp, #16]
 80a3bb4:	4606      	mov	r6, r0
 80a3bb6:	460f      	mov	r7, r1
 80a3bb8:	f04f 0b00 	mov.w	fp, #0
 80a3bbc:	4661      	mov	r1, ip
 80a3bbe:	4658      	mov	r0, fp
 80a3bc0:	4632      	mov	r2, r6
 80a3bc2:	463b      	mov	r3, r7
 80a3bc4:	e9cd bc10 	strd	fp, ip, [sp, #64]	; 0x40
 80a3bc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a3bcc:	f001 f93a 	bl	80a4e44 <__aeabi_dmul>
 80a3bd0:	4602      	mov	r2, r0
 80a3bd2:	460b      	mov	r3, r1
 80a3bd4:	4640      	mov	r0, r8
 80a3bd6:	4649      	mov	r1, r9
 80a3bd8:	f000 ff80 	bl	80a4adc <__aeabi_dsub>
 80a3bdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a3be0:	4680      	mov	r8, r0
 80a3be2:	4689      	mov	r9, r1
 80a3be4:	4630      	mov	r0, r6
 80a3be6:	4639      	mov	r1, r7
 80a3be8:	f000 ff78 	bl	80a4adc <__aeabi_dsub>
 80a3bec:	4602      	mov	r2, r0
 80a3bee:	460b      	mov	r3, r1
 80a3bf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a3bf4:	f000 ff72 	bl	80a4adc <__aeabi_dsub>
 80a3bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3bfc:	f001 f922 	bl	80a4e44 <__aeabi_dmul>
 80a3c00:	4602      	mov	r2, r0
 80a3c02:	460b      	mov	r3, r1
 80a3c04:	4640      	mov	r0, r8
 80a3c06:	4649      	mov	r1, r9
 80a3c08:	f000 ff68 	bl	80a4adc <__aeabi_dsub>
 80a3c0c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a3c10:	f001 f918 	bl	80a4e44 <__aeabi_dmul>
 80a3c14:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
 80a3c18:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a3c1c:	463a      	mov	r2, r7
 80a3c1e:	4643      	mov	r3, r8
 80a3c20:	4638      	mov	r0, r7
 80a3c22:	4641      	mov	r1, r8
 80a3c24:	f001 f90e 	bl	80a4e44 <__aeabi_dmul>
 80a3c28:	a377      	add	r3, pc, #476	; (adr r3, 80a3e08 <__ieee754_pow+0x4f8>)
 80a3c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c2e:	4606      	mov	r6, r0
 80a3c30:	460f      	mov	r7, r1
 80a3c32:	f001 f907 	bl	80a4e44 <__aeabi_dmul>
 80a3c36:	a376      	add	r3, pc, #472	; (adr r3, 80a3e10 <__ieee754_pow+0x500>)
 80a3c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c3c:	f000 ff50 	bl	80a4ae0 <__adddf3>
 80a3c40:	4632      	mov	r2, r6
 80a3c42:	463b      	mov	r3, r7
 80a3c44:	f001 f8fe 	bl	80a4e44 <__aeabi_dmul>
 80a3c48:	a373      	add	r3, pc, #460	; (adr r3, 80a3e18 <__ieee754_pow+0x508>)
 80a3c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c4e:	f000 ff47 	bl	80a4ae0 <__adddf3>
 80a3c52:	4632      	mov	r2, r6
 80a3c54:	463b      	mov	r3, r7
 80a3c56:	f001 f8f5 	bl	80a4e44 <__aeabi_dmul>
 80a3c5a:	a371      	add	r3, pc, #452	; (adr r3, 80a3e20 <__ieee754_pow+0x510>)
 80a3c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c60:	f000 ff3e 	bl	80a4ae0 <__adddf3>
 80a3c64:	4632      	mov	r2, r6
 80a3c66:	463b      	mov	r3, r7
 80a3c68:	f001 f8ec 	bl	80a4e44 <__aeabi_dmul>
 80a3c6c:	a36e      	add	r3, pc, #440	; (adr r3, 80a3e28 <__ieee754_pow+0x518>)
 80a3c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c72:	f000 ff35 	bl	80a4ae0 <__adddf3>
 80a3c76:	4632      	mov	r2, r6
 80a3c78:	463b      	mov	r3, r7
 80a3c7a:	f001 f8e3 	bl	80a4e44 <__aeabi_dmul>
 80a3c7e:	a36c      	add	r3, pc, #432	; (adr r3, 80a3e30 <__ieee754_pow+0x520>)
 80a3c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c84:	f000 ff2c 	bl	80a4ae0 <__adddf3>
 80a3c88:	4632      	mov	r2, r6
 80a3c8a:	4680      	mov	r8, r0
 80a3c8c:	4689      	mov	r9, r1
 80a3c8e:	463b      	mov	r3, r7
 80a3c90:	4630      	mov	r0, r6
 80a3c92:	4639      	mov	r1, r7
 80a3c94:	f001 f8d6 	bl	80a4e44 <__aeabi_dmul>
 80a3c98:	4602      	mov	r2, r0
 80a3c9a:	460b      	mov	r3, r1
 80a3c9c:	4640      	mov	r0, r8
 80a3c9e:	4649      	mov	r1, r9
 80a3ca0:	f001 f8d0 	bl	80a4e44 <__aeabi_dmul>
 80a3ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3ca8:	4606      	mov	r6, r0
 80a3caa:	460f      	mov	r7, r1
 80a3cac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3cb0:	f000 ff16 	bl	80a4ae0 <__adddf3>
 80a3cb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a3cb8:	f001 f8c4 	bl	80a4e44 <__aeabi_dmul>
 80a3cbc:	4632      	mov	r2, r6
 80a3cbe:	463b      	mov	r3, r7
 80a3cc0:	f000 ff0e 	bl	80a4ae0 <__adddf3>
 80a3cc4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80a3cc8:	4680      	mov	r8, r0
 80a3cca:	4689      	mov	r9, r1
 80a3ccc:	4632      	mov	r2, r6
 80a3cce:	463b      	mov	r3, r7
 80a3cd0:	4630      	mov	r0, r6
 80a3cd2:	4639      	mov	r1, r7
 80a3cd4:	f001 f8b6 	bl	80a4e44 <__aeabi_dmul>
 80a3cd8:	2200      	movs	r2, #0
 80a3cda:	4b60      	ldr	r3, [pc, #384]	; (80a3e5c <__ieee754_pow+0x54c>)
 80a3cdc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a3ce0:	f000 fefe 	bl	80a4ae0 <__adddf3>
 80a3ce4:	4642      	mov	r2, r8
 80a3ce6:	464b      	mov	r3, r9
 80a3ce8:	f000 fefa 	bl	80a4ae0 <__adddf3>
 80a3cec:	e9dd bc10 	ldrd	fp, ip, [sp, #64]	; 0x40
 80a3cf0:	460f      	mov	r7, r1
 80a3cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3cf6:	465a      	mov	r2, fp
 80a3cf8:	463b      	mov	r3, r7
 80a3cfa:	e9cd bc0e 	strd	fp, ip, [sp, #56]	; 0x38
 80a3cfe:	465e      	mov	r6, fp
 80a3d00:	f001 f8a0 	bl	80a4e44 <__aeabi_dmul>
 80a3d04:	2200      	movs	r2, #0
 80a3d06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a3d0a:	4b54      	ldr	r3, [pc, #336]	; (80a3e5c <__ieee754_pow+0x54c>)
 80a3d0c:	4630      	mov	r0, r6
 80a3d0e:	4639      	mov	r1, r7
 80a3d10:	f000 fee4 	bl	80a4adc <__aeabi_dsub>
 80a3d14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a3d18:	f000 fee0 	bl	80a4adc <__aeabi_dsub>
 80a3d1c:	4602      	mov	r2, r0
 80a3d1e:	460b      	mov	r3, r1
 80a3d20:	4640      	mov	r0, r8
 80a3d22:	4649      	mov	r1, r9
 80a3d24:	f000 feda 	bl	80a4adc <__aeabi_dsub>
 80a3d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a3d2c:	f001 f88a 	bl	80a4e44 <__aeabi_dmul>
 80a3d30:	4632      	mov	r2, r6
 80a3d32:	4680      	mov	r8, r0
 80a3d34:	4689      	mov	r9, r1
 80a3d36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a3d3a:	463b      	mov	r3, r7
 80a3d3c:	f001 f882 	bl	80a4e44 <__aeabi_dmul>
 80a3d40:	4602      	mov	r2, r0
 80a3d42:	460b      	mov	r3, r1
 80a3d44:	4640      	mov	r0, r8
 80a3d46:	4649      	mov	r1, r9
 80a3d48:	f000 feca 	bl	80a4ae0 <__adddf3>
 80a3d4c:	4680      	mov	r8, r0
 80a3d4e:	4689      	mov	r9, r1
 80a3d50:	4602      	mov	r2, r0
 80a3d52:	460b      	mov	r3, r1
 80a3d54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3d58:	f000 fec2 	bl	80a4ae0 <__adddf3>
 80a3d5c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	; 0x38
 80a3d60:	a335      	add	r3, pc, #212	; (adr r3, 80a3e38 <__ieee754_pow+0x528>)
 80a3d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d66:	4658      	mov	r0, fp
 80a3d68:	e9cd bc06 	strd	fp, ip, [sp, #24]
 80a3d6c:	465e      	mov	r6, fp
 80a3d6e:	460f      	mov	r7, r1
 80a3d70:	f001 f868 	bl	80a4e44 <__aeabi_dmul>
 80a3d74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3d78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a3d7c:	4630      	mov	r0, r6
 80a3d7e:	4639      	mov	r1, r7
 80a3d80:	f000 feac 	bl	80a4adc <__aeabi_dsub>
 80a3d84:	4602      	mov	r2, r0
 80a3d86:	460b      	mov	r3, r1
 80a3d88:	4640      	mov	r0, r8
 80a3d8a:	4649      	mov	r1, r9
 80a3d8c:	f000 fea6 	bl	80a4adc <__aeabi_dsub>
 80a3d90:	a32b      	add	r3, pc, #172	; (adr r3, 80a3e40 <__ieee754_pow+0x530>)
 80a3d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d96:	f001 f855 	bl	80a4e44 <__aeabi_dmul>
 80a3d9a:	a32b      	add	r3, pc, #172	; (adr r3, 80a3e48 <__ieee754_pow+0x538>)
 80a3d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3da0:	4680      	mov	r8, r0
 80a3da2:	4689      	mov	r9, r1
 80a3da4:	4630      	mov	r0, r6
 80a3da6:	4639      	mov	r1, r7
 80a3da8:	f001 f84c 	bl	80a4e44 <__aeabi_dmul>
 80a3dac:	4602      	mov	r2, r0
 80a3dae:	460b      	mov	r3, r1
 80a3db0:	4640      	mov	r0, r8
 80a3db2:	4649      	mov	r1, r9
 80a3db4:	f000 fe94 	bl	80a4ae0 <__adddf3>
 80a3db8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80a3dbc:	f000 fe90 	bl	80a4ae0 <__adddf3>
 80a3dc0:	4680      	mov	r8, r0
 80a3dc2:	4650      	mov	r0, sl
 80a3dc4:	4689      	mov	r9, r1
 80a3dc6:	f000 ffd7 	bl	80a4d78 <__aeabi_i2d>
 80a3dca:	4606      	mov	r6, r0
 80a3dcc:	460f      	mov	r7, r1
 80a3dce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3dd2:	4642      	mov	r2, r8
 80a3dd4:	464b      	mov	r3, r9
 80a3dd6:	f000 fe83 	bl	80a4ae0 <__adddf3>
 80a3dda:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3dde:	f000 fe7f 	bl	80a4ae0 <__adddf3>
 80a3de2:	4632      	mov	r2, r6
 80a3de4:	463b      	mov	r3, r7
 80a3de6:	f000 fe7b 	bl	80a4ae0 <__adddf3>
 80a3dea:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 80a3dee:	4632      	mov	r2, r6
 80a3df0:	4658      	mov	r0, fp
 80a3df2:	463b      	mov	r3, r7
 80a3df4:	46da      	mov	sl, fp
 80a3df6:	468b      	mov	fp, r1
 80a3df8:	f000 fe70 	bl	80a4adc <__aeabi_dsub>
 80a3dfc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3e00:	e030      	b.n	80a3e64 <__ieee754_pow+0x554>
 80a3e02:	bf00      	nop
 80a3e04:	f3af 8000 	nop.w
 80a3e08:	4a454eef 	.word	0x4a454eef
 80a3e0c:	3fca7e28 	.word	0x3fca7e28
 80a3e10:	93c9db65 	.word	0x93c9db65
 80a3e14:	3fcd864a 	.word	0x3fcd864a
 80a3e18:	a91d4101 	.word	0xa91d4101
 80a3e1c:	3fd17460 	.word	0x3fd17460
 80a3e20:	518f264d 	.word	0x518f264d
 80a3e24:	3fd55555 	.word	0x3fd55555
 80a3e28:	db6fabff 	.word	0xdb6fabff
 80a3e2c:	3fdb6db6 	.word	0x3fdb6db6
 80a3e30:	33333303 	.word	0x33333303
 80a3e34:	3fe33333 	.word	0x3fe33333
 80a3e38:	e0000000 	.word	0xe0000000
 80a3e3c:	3feec709 	.word	0x3feec709
 80a3e40:	dc3a03fd 	.word	0xdc3a03fd
 80a3e44:	3feec709 	.word	0x3feec709
 80a3e48:	145b01f5 	.word	0x145b01f5
 80a3e4c:	be3e2fe0 	.word	0xbe3e2fe0
 80a3e50:	43400000 	.word	0x43400000
 80a3e54:	000bb679 	.word	0x000bb679
 80a3e58:	3ff00000 	.word	0x3ff00000
 80a3e5c:	40080000 	.word	0x40080000
 80a3e60:	0003988e 	.word	0x0003988e
 80a3e64:	f000 fe3a 	bl	80a4adc <__aeabi_dsub>
 80a3e68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a3e6c:	f000 fe36 	bl	80a4adc <__aeabi_dsub>
 80a3e70:	4602      	mov	r2, r0
 80a3e72:	460b      	mov	r3, r1
 80a3e74:	4640      	mov	r0, r8
 80a3e76:	4649      	mov	r1, r9
 80a3e78:	f000 fe30 	bl	80a4adc <__aeabi_dsub>
 80a3e7c:	4680      	mov	r8, r0
 80a3e7e:	4689      	mov	r9, r1
 80a3e80:	e9dd 1200 	ldrd	r1, r2, [sp]
 80a3e84:	3c01      	subs	r4, #1
 80a3e86:	ea54 0305 	orrs.w	r3, r4, r5
 80a3e8a:	bf14      	ite	ne
 80a3e8c:	4cd6      	ldrne	r4, [pc, #856]	; (80a41e8 <__ieee754_pow+0x8d8>)
 80a3e8e:	4cd7      	ldreq	r4, [pc, #860]	; (80a41ec <__ieee754_pow+0x8dc>)
 80a3e90:	2300      	movs	r3, #0
 80a3e92:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80a3e96:	460b      	mov	r3, r1
 80a3e98:	4614      	mov	r4, r2
 80a3e9a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a3e9e:	2300      	movs	r3, #0
 80a3ea0:	9302      	str	r3, [sp, #8]
 80a3ea2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80a3ea6:	4608      	mov	r0, r1
 80a3ea8:	462b      	mov	r3, r5
 80a3eaa:	4611      	mov	r1, r2
 80a3eac:	4622      	mov	r2, r4
 80a3eae:	f000 fe15 	bl	80a4adc <__aeabi_dsub>
 80a3eb2:	4652      	mov	r2, sl
 80a3eb4:	465b      	mov	r3, fp
 80a3eb6:	f000 ffc5 	bl	80a4e44 <__aeabi_dmul>
 80a3eba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a3ebe:	4606      	mov	r6, r0
 80a3ec0:	460f      	mov	r7, r1
 80a3ec2:	4640      	mov	r0, r8
 80a3ec4:	4649      	mov	r1, r9
 80a3ec6:	f000 ffbd 	bl	80a4e44 <__aeabi_dmul>
 80a3eca:	4602      	mov	r2, r0
 80a3ecc:	460b      	mov	r3, r1
 80a3ece:	4630      	mov	r0, r6
 80a3ed0:	4639      	mov	r1, r7
 80a3ed2:	f000 fe05 	bl	80a4ae0 <__adddf3>
 80a3ed6:	4606      	mov	r6, r0
 80a3ed8:	460f      	mov	r7, r1
 80a3eda:	4622      	mov	r2, r4
 80a3edc:	462b      	mov	r3, r5
 80a3ede:	4650      	mov	r0, sl
 80a3ee0:	4659      	mov	r1, fp
 80a3ee2:	e9cd 6700 	strd	r6, r7, [sp]
 80a3ee6:	f000 ffad 	bl	80a4e44 <__aeabi_dmul>
 80a3eea:	460b      	mov	r3, r1
 80a3eec:	4602      	mov	r2, r0
 80a3eee:	4680      	mov	r8, r0
 80a3ef0:	4689      	mov	r9, r1
 80a3ef2:	4630      	mov	r0, r6
 80a3ef4:	4639      	mov	r1, r7
 80a3ef6:	f000 fdf3 	bl	80a4ae0 <__adddf3>
 80a3efa:	4bbd      	ldr	r3, [pc, #756]	; (80a41f0 <__ieee754_pow+0x8e0>)
 80a3efc:	4606      	mov	r6, r0
 80a3efe:	4299      	cmp	r1, r3
 80a3f00:	460d      	mov	r5, r1
 80a3f02:	460c      	mov	r4, r1
 80a3f04:	f340 810e 	ble.w	80a4124 <__ieee754_pow+0x814>
 80a3f08:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80a3f0c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80a3f10:	4303      	orrs	r3, r0
 80a3f12:	f040 81f0 	bne.w	80a42f6 <__ieee754_pow+0x9e6>
 80a3f16:	a3a0      	add	r3, pc, #640	; (adr r3, 80a4198 <__ieee754_pow+0x888>)
 80a3f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3f1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3f20:	f000 fdde 	bl	80a4ae0 <__adddf3>
 80a3f24:	4642      	mov	r2, r8
 80a3f26:	4682      	mov	sl, r0
 80a3f28:	468b      	mov	fp, r1
 80a3f2a:	464b      	mov	r3, r9
 80a3f2c:	4630      	mov	r0, r6
 80a3f2e:	4629      	mov	r1, r5
 80a3f30:	f000 fdd4 	bl	80a4adc <__aeabi_dsub>
 80a3f34:	4602      	mov	r2, r0
 80a3f36:	460b      	mov	r3, r1
 80a3f38:	4650      	mov	r0, sl
 80a3f3a:	4659      	mov	r1, fp
 80a3f3c:	f001 fa12 	bl	80a5364 <__aeabi_dcmpgt>
 80a3f40:	2800      	cmp	r0, #0
 80a3f42:	f040 81d8 	bne.w	80a42f6 <__ieee754_pow+0x9e6>
 80a3f46:	462f      	mov	r7, r5
 80a3f48:	153b      	asrs	r3, r7, #20
 80a3f4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80a3f4e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80a3f52:	fa42 f303 	asr.w	r3, r2, r3
 80a3f56:	4423      	add	r3, r4
 80a3f58:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80a3f5c:	4ea5      	ldr	r6, [pc, #660]	; (80a41f4 <__ieee754_pow+0x8e4>)
 80a3f5e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a3f62:	4116      	asrs	r6, r2
 80a3f64:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 80a3f68:	2000      	movs	r0, #0
 80a3f6a:	f1c2 0514 	rsb	r5, r2, #20
 80a3f6e:	ea23 0106 	bic.w	r1, r3, r6
 80a3f72:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
 80a3f76:	4602      	mov	r2, r0
 80a3f78:	460b      	mov	r3, r1
 80a3f7a:	2c00      	cmp	r4, #0
 80a3f7c:	fa4b fb05 	asr.w	fp, fp, r5
 80a3f80:	4640      	mov	r0, r8
 80a3f82:	4649      	mov	r1, r9
 80a3f84:	bfb8      	it	lt
 80a3f86:	f1cb 0b00 	rsblt	fp, fp, #0
 80a3f8a:	f000 fda7 	bl	80a4adc <__aeabi_dsub>
 80a3f8e:	4602      	mov	r2, r0
 80a3f90:	460b      	mov	r3, r1
 80a3f92:	4680      	mov	r8, r0
 80a3f94:	4689      	mov	r9, r1
 80a3f96:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3f9a:	f000 fda1 	bl	80a4ae0 <__adddf3>
 80a3f9e:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
 80a3fa2:	2400      	movs	r4, #0
 80a3fa4:	a37e      	add	r3, pc, #504	; (adr r3, 80a41a0 <__ieee754_pow+0x890>)
 80a3fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3faa:	4620      	mov	r0, r4
 80a3fac:	460d      	mov	r5, r1
 80a3fae:	f000 ff49 	bl	80a4e44 <__aeabi_dmul>
 80a3fb2:	4642      	mov	r2, r8
 80a3fb4:	4606      	mov	r6, r0
 80a3fb6:	460f      	mov	r7, r1
 80a3fb8:	464b      	mov	r3, r9
 80a3fba:	4620      	mov	r0, r4
 80a3fbc:	4629      	mov	r1, r5
 80a3fbe:	f000 fd8d 	bl	80a4adc <__aeabi_dsub>
 80a3fc2:	4602      	mov	r2, r0
 80a3fc4:	460b      	mov	r3, r1
 80a3fc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3fca:	f000 fd87 	bl	80a4adc <__aeabi_dsub>
 80a3fce:	a376      	add	r3, pc, #472	; (adr r3, 80a41a8 <__ieee754_pow+0x898>)
 80a3fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3fd4:	f000 ff36 	bl	80a4e44 <__aeabi_dmul>
 80a3fd8:	a375      	add	r3, pc, #468	; (adr r3, 80a41b0 <__ieee754_pow+0x8a0>)
 80a3fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3fde:	4680      	mov	r8, r0
 80a3fe0:	4689      	mov	r9, r1
 80a3fe2:	4620      	mov	r0, r4
 80a3fe4:	4629      	mov	r1, r5
 80a3fe6:	f000 ff2d 	bl	80a4e44 <__aeabi_dmul>
 80a3fea:	4602      	mov	r2, r0
 80a3fec:	460b      	mov	r3, r1
 80a3fee:	4640      	mov	r0, r8
 80a3ff0:	4649      	mov	r1, r9
 80a3ff2:	f000 fd75 	bl	80a4ae0 <__adddf3>
 80a3ff6:	4680      	mov	r8, r0
 80a3ff8:	4689      	mov	r9, r1
 80a3ffa:	4602      	mov	r2, r0
 80a3ffc:	460b      	mov	r3, r1
 80a3ffe:	4630      	mov	r0, r6
 80a4000:	4639      	mov	r1, r7
 80a4002:	f000 fd6d 	bl	80a4ae0 <__adddf3>
 80a4006:	4632      	mov	r2, r6
 80a4008:	463b      	mov	r3, r7
 80a400a:	4604      	mov	r4, r0
 80a400c:	460d      	mov	r5, r1
 80a400e:	f000 fd65 	bl	80a4adc <__aeabi_dsub>
 80a4012:	4602      	mov	r2, r0
 80a4014:	460b      	mov	r3, r1
 80a4016:	4640      	mov	r0, r8
 80a4018:	4649      	mov	r1, r9
 80a401a:	f000 fd5f 	bl	80a4adc <__aeabi_dsub>
 80a401e:	4622      	mov	r2, r4
 80a4020:	4680      	mov	r8, r0
 80a4022:	4689      	mov	r9, r1
 80a4024:	462b      	mov	r3, r5
 80a4026:	4620      	mov	r0, r4
 80a4028:	4629      	mov	r1, r5
 80a402a:	f000 ff0b 	bl	80a4e44 <__aeabi_dmul>
 80a402e:	a362      	add	r3, pc, #392	; (adr r3, 80a41b8 <__ieee754_pow+0x8a8>)
 80a4030:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4034:	4606      	mov	r6, r0
 80a4036:	460f      	mov	r7, r1
 80a4038:	f000 ff04 	bl	80a4e44 <__aeabi_dmul>
 80a403c:	a360      	add	r3, pc, #384	; (adr r3, 80a41c0 <__ieee754_pow+0x8b0>)
 80a403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4042:	f000 fd4b 	bl	80a4adc <__aeabi_dsub>
 80a4046:	4632      	mov	r2, r6
 80a4048:	463b      	mov	r3, r7
 80a404a:	f000 fefb 	bl	80a4e44 <__aeabi_dmul>
 80a404e:	a35e      	add	r3, pc, #376	; (adr r3, 80a41c8 <__ieee754_pow+0x8b8>)
 80a4050:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4054:	f000 fd44 	bl	80a4ae0 <__adddf3>
 80a4058:	4632      	mov	r2, r6
 80a405a:	463b      	mov	r3, r7
 80a405c:	f000 fef2 	bl	80a4e44 <__aeabi_dmul>
 80a4060:	a35b      	add	r3, pc, #364	; (adr r3, 80a41d0 <__ieee754_pow+0x8c0>)
 80a4062:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4066:	f000 fd39 	bl	80a4adc <__aeabi_dsub>
 80a406a:	4632      	mov	r2, r6
 80a406c:	463b      	mov	r3, r7
 80a406e:	f000 fee9 	bl	80a4e44 <__aeabi_dmul>
 80a4072:	a359      	add	r3, pc, #356	; (adr r3, 80a41d8 <__ieee754_pow+0x8c8>)
 80a4074:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4078:	f000 fd32 	bl	80a4ae0 <__adddf3>
 80a407c:	4632      	mov	r2, r6
 80a407e:	463b      	mov	r3, r7
 80a4080:	f000 fee0 	bl	80a4e44 <__aeabi_dmul>
 80a4084:	4602      	mov	r2, r0
 80a4086:	460b      	mov	r3, r1
 80a4088:	4620      	mov	r0, r4
 80a408a:	4629      	mov	r1, r5
 80a408c:	f000 fd26 	bl	80a4adc <__aeabi_dsub>
 80a4090:	4606      	mov	r6, r0
 80a4092:	460f      	mov	r7, r1
 80a4094:	4602      	mov	r2, r0
 80a4096:	460b      	mov	r3, r1
 80a4098:	4620      	mov	r0, r4
 80a409a:	4629      	mov	r1, r5
 80a409c:	f000 fed2 	bl	80a4e44 <__aeabi_dmul>
 80a40a0:	2200      	movs	r2, #0
 80a40a2:	e9cd 0100 	strd	r0, r1, [sp]
 80a40a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a40aa:	4630      	mov	r0, r6
 80a40ac:	4639      	mov	r1, r7
 80a40ae:	f000 fd15 	bl	80a4adc <__aeabi_dsub>
 80a40b2:	4602      	mov	r2, r0
 80a40b4:	460b      	mov	r3, r1
 80a40b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a40ba:	f000 ffed 	bl	80a5098 <__aeabi_ddiv>
 80a40be:	4642      	mov	r2, r8
 80a40c0:	4606      	mov	r6, r0
 80a40c2:	460f      	mov	r7, r1
 80a40c4:	464b      	mov	r3, r9
 80a40c6:	4620      	mov	r0, r4
 80a40c8:	4629      	mov	r1, r5
 80a40ca:	f000 febb 	bl	80a4e44 <__aeabi_dmul>
 80a40ce:	4642      	mov	r2, r8
 80a40d0:	464b      	mov	r3, r9
 80a40d2:	f000 fd05 	bl	80a4ae0 <__adddf3>
 80a40d6:	4602      	mov	r2, r0
 80a40d8:	460b      	mov	r3, r1
 80a40da:	4630      	mov	r0, r6
 80a40dc:	4639      	mov	r1, r7
 80a40de:	f000 fcfd 	bl	80a4adc <__aeabi_dsub>
 80a40e2:	4622      	mov	r2, r4
 80a40e4:	462b      	mov	r3, r5
 80a40e6:	f000 fcf9 	bl	80a4adc <__aeabi_dsub>
 80a40ea:	4602      	mov	r2, r0
 80a40ec:	460b      	mov	r3, r1
 80a40ee:	2000      	movs	r0, #0
 80a40f0:	493d      	ldr	r1, [pc, #244]	; (80a41e8 <__ieee754_pow+0x8d8>)
 80a40f2:	f000 fcf3 	bl	80a4adc <__aeabi_dsub>
 80a40f6:	448a      	add	sl, r1
 80a40f8:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
 80a40fc:	f2c0 8137 	blt.w	80a436e <__ieee754_pow+0xa5e>
 80a4100:	4651      	mov	r1, sl
 80a4102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a4106:	f000 fe9d 	bl	80a4e44 <__aeabi_dmul>
 80a410a:	4683      	mov	fp, r0
 80a410c:	e418      	b.n	80a3940 <__ieee754_pow+0x30>
 80a410e:	46f3      	mov	fp, lr
 80a4110:	4935      	ldr	r1, [pc, #212]	; (80a41e8 <__ieee754_pow+0x8d8>)
 80a4112:	e415      	b.n	80a3940 <__ieee754_pow+0x30>
 80a4114:	464a      	mov	r2, r9
 80a4116:	4648      	mov	r0, r9
 80a4118:	463b      	mov	r3, r7
 80a411a:	4639      	mov	r1, r7
 80a411c:	f000 fe92 	bl	80a4e44 <__aeabi_dmul>
 80a4120:	4683      	mov	fp, r0
 80a4122:	e40d      	b.n	80a3940 <__ieee754_pow+0x30>
 80a4124:	4b34      	ldr	r3, [pc, #208]	; (80a41f8 <__ieee754_pow+0x8e8>)
 80a4126:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80a412a:	429f      	cmp	r7, r3
 80a412c:	f340 8101 	ble.w	80a4332 <__ieee754_pow+0xa22>
 80a4130:	4b32      	ldr	r3, [pc, #200]	; (80a41fc <__ieee754_pow+0x8ec>)
 80a4132:	440b      	add	r3, r1
 80a4134:	4303      	orrs	r3, r0
 80a4136:	d10c      	bne.n	80a4152 <__ieee754_pow+0x842>
 80a4138:	4642      	mov	r2, r8
 80a413a:	464b      	mov	r3, r9
 80a413c:	f000 fcce 	bl	80a4adc <__aeabi_dsub>
 80a4140:	4602      	mov	r2, r0
 80a4142:	460b      	mov	r3, r1
 80a4144:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4148:	f001 f8f8 	bl	80a533c <__aeabi_dcmple>
 80a414c:	2800      	cmp	r0, #0
 80a414e:	f43f aefb 	beq.w	80a3f48 <__ieee754_pow+0x638>
 80a4152:	a323      	add	r3, pc, #140	; (adr r3, 80a41e0 <__ieee754_pow+0x8d0>)
 80a4154:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4158:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a415c:	f000 fe72 	bl	80a4e44 <__aeabi_dmul>
 80a4160:	a31f      	add	r3, pc, #124	; (adr r3, 80a41e0 <__ieee754_pow+0x8d0>)
 80a4162:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4166:	f000 fe6d 	bl	80a4e44 <__aeabi_dmul>
 80a416a:	4683      	mov	fp, r0
 80a416c:	f7ff bbe8 	b.w	80a3940 <__ieee754_pow+0x30>
 80a4170:	f1ba 0f00 	cmp.w	sl, #0
 80a4174:	f6bf acae 	bge.w	80a3ad4 <__ieee754_pow+0x1c4>
 80a4178:	e9dd 3400 	ldrd	r3, r4, [sp]
 80a417c:	469b      	mov	fp, r3
 80a417e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a4182:	f7ff bbdd 	b.w	80a3940 <__ieee754_pow+0x30>
 80a4186:	4602      	mov	r2, r0
 80a4188:	460b      	mov	r3, r1
 80a418a:	2000      	movs	r0, #0
 80a418c:	4916      	ldr	r1, [pc, #88]	; (80a41e8 <__ieee754_pow+0x8d8>)
 80a418e:	f000 ff83 	bl	80a5098 <__aeabi_ddiv>
 80a4192:	e441      	b.n	80a3a18 <__ieee754_pow+0x108>
 80a4194:	f3af 8000 	nop.w
 80a4198:	652b82fe 	.word	0x652b82fe
 80a419c:	3c971547 	.word	0x3c971547
 80a41a0:	00000000 	.word	0x00000000
 80a41a4:	3fe62e43 	.word	0x3fe62e43
 80a41a8:	fefa39ef 	.word	0xfefa39ef
 80a41ac:	3fe62e42 	.word	0x3fe62e42
 80a41b0:	0ca86c39 	.word	0x0ca86c39
 80a41b4:	be205c61 	.word	0xbe205c61
 80a41b8:	72bea4d0 	.word	0x72bea4d0
 80a41bc:	3e663769 	.word	0x3e663769
 80a41c0:	c5d26bf1 	.word	0xc5d26bf1
 80a41c4:	3ebbbd41 	.word	0x3ebbbd41
 80a41c8:	af25de2c 	.word	0xaf25de2c
 80a41cc:	3f11566a 	.word	0x3f11566a
 80a41d0:	16bebd93 	.word	0x16bebd93
 80a41d4:	3f66c16c 	.word	0x3f66c16c
 80a41d8:	5555553e 	.word	0x5555553e
 80a41dc:	3fc55555 	.word	0x3fc55555
 80a41e0:	c2f8f359 	.word	0xc2f8f359
 80a41e4:	01a56e1f 	.word	0x01a56e1f
 80a41e8:	3ff00000 	.word	0x3ff00000
 80a41ec:	bff00000 	.word	0xbff00000
 80a41f0:	408fffff 	.word	0x408fffff
 80a41f4:	000fffff 	.word	0x000fffff
 80a41f8:	4090cbff 	.word	0x4090cbff
 80a41fc:	3f6f3400 	.word	0x3f6f3400
 80a4200:	4b6f      	ldr	r3, [pc, #444]	; (80a43c0 <__ieee754_pow+0xab0>)
 80a4202:	429e      	cmp	r6, r3
 80a4204:	f77f ac63 	ble.w	80a3ace <__ieee754_pow+0x1be>
 80a4208:	4b6e      	ldr	r3, [pc, #440]	; (80a43c4 <__ieee754_pow+0xab4>)
 80a420a:	429e      	cmp	r6, r3
 80a420c:	f73f abee 	bgt.w	80a39ec <__ieee754_pow+0xdc>
 80a4210:	2200      	movs	r2, #0
 80a4212:	4b6c      	ldr	r3, [pc, #432]	; (80a43c4 <__ieee754_pow+0xab4>)
 80a4214:	f000 fc62 	bl	80a4adc <__aeabi_dsub>
 80a4218:	a35b      	add	r3, pc, #364	; (adr r3, 80a4388 <__ieee754_pow+0xa78>)
 80a421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a421e:	4606      	mov	r6, r0
 80a4220:	460f      	mov	r7, r1
 80a4222:	f000 fe0f 	bl	80a4e44 <__aeabi_dmul>
 80a4226:	a35a      	add	r3, pc, #360	; (adr r3, 80a4390 <__ieee754_pow+0xa80>)
 80a4228:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a422c:	4680      	mov	r8, r0
 80a422e:	4689      	mov	r9, r1
 80a4230:	4630      	mov	r0, r6
 80a4232:	4639      	mov	r1, r7
 80a4234:	f000 fe06 	bl	80a4e44 <__aeabi_dmul>
 80a4238:	2200      	movs	r2, #0
 80a423a:	4682      	mov	sl, r0
 80a423c:	468b      	mov	fp, r1
 80a423e:	4b62      	ldr	r3, [pc, #392]	; (80a43c8 <__ieee754_pow+0xab8>)
 80a4240:	4630      	mov	r0, r6
 80a4242:	4639      	mov	r1, r7
 80a4244:	f000 fdfe 	bl	80a4e44 <__aeabi_dmul>
 80a4248:	4602      	mov	r2, r0
 80a424a:	460b      	mov	r3, r1
 80a424c:	a152      	add	r1, pc, #328	; (adr r1, 80a4398 <__ieee754_pow+0xa88>)
 80a424e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4252:	f000 fc43 	bl	80a4adc <__aeabi_dsub>
 80a4256:	4632      	mov	r2, r6
 80a4258:	463b      	mov	r3, r7
 80a425a:	f000 fdf3 	bl	80a4e44 <__aeabi_dmul>
 80a425e:	4602      	mov	r2, r0
 80a4260:	460b      	mov	r3, r1
 80a4262:	2000      	movs	r0, #0
 80a4264:	4959      	ldr	r1, [pc, #356]	; (80a43cc <__ieee754_pow+0xabc>)
 80a4266:	f000 fc39 	bl	80a4adc <__aeabi_dsub>
 80a426a:	4632      	mov	r2, r6
 80a426c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a4270:	463b      	mov	r3, r7
 80a4272:	4630      	mov	r0, r6
 80a4274:	4639      	mov	r1, r7
 80a4276:	f000 fde5 	bl	80a4e44 <__aeabi_dmul>
 80a427a:	4602      	mov	r2, r0
 80a427c:	460b      	mov	r3, r1
 80a427e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a4282:	f000 fddf 	bl	80a4e44 <__aeabi_dmul>
 80a4286:	a346      	add	r3, pc, #280	; (adr r3, 80a43a0 <__ieee754_pow+0xa90>)
 80a4288:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a428c:	f000 fdda 	bl	80a4e44 <__aeabi_dmul>
 80a4290:	4602      	mov	r2, r0
 80a4292:	460b      	mov	r3, r1
 80a4294:	4650      	mov	r0, sl
 80a4296:	4659      	mov	r1, fp
 80a4298:	f000 fc20 	bl	80a4adc <__aeabi_dsub>
 80a429c:	4602      	mov	r2, r0
 80a429e:	460b      	mov	r3, r1
 80a42a0:	4606      	mov	r6, r0
 80a42a2:	460f      	mov	r7, r1
 80a42a4:	4640      	mov	r0, r8
 80a42a6:	4649      	mov	r1, r9
 80a42a8:	f000 fc1a 	bl	80a4ae0 <__adddf3>
 80a42ac:	4642      	mov	r2, r8
 80a42ae:	464b      	mov	r3, r9
 80a42b0:	2000      	movs	r0, #0
 80a42b2:	4682      	mov	sl, r0
 80a42b4:	468b      	mov	fp, r1
 80a42b6:	f000 fc11 	bl	80a4adc <__aeabi_dsub>
 80a42ba:	4602      	mov	r2, r0
 80a42bc:	460b      	mov	r3, r1
 80a42be:	4630      	mov	r0, r6
 80a42c0:	4639      	mov	r1, r7
 80a42c2:	f000 fc0b 	bl	80a4adc <__aeabi_dsub>
 80a42c6:	4680      	mov	r8, r0
 80a42c8:	4689      	mov	r9, r1
 80a42ca:	e5d9      	b.n	80a3e80 <__ieee754_pow+0x570>
 80a42cc:	2200      	movs	r2, #0
 80a42ce:	2300      	movs	r3, #0
 80a42d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a42d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a42d8:	4b3a      	ldr	r3, [pc, #232]	; (80a43c4 <__ieee754_pow+0xab4>)
 80a42da:	2200      	movs	r2, #0
 80a42dc:	2600      	movs	r6, #0
 80a42de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a42e2:	e43d      	b.n	80a3b60 <__ieee754_pow+0x250>
 80a42e4:	464a      	mov	r2, r9
 80a42e6:	463b      	mov	r3, r7
 80a42e8:	2000      	movs	r0, #0
 80a42ea:	4936      	ldr	r1, [pc, #216]	; (80a43c4 <__ieee754_pow+0xab4>)
 80a42ec:	f000 fed4 	bl	80a5098 <__aeabi_ddiv>
 80a42f0:	4683      	mov	fp, r0
 80a42f2:	f7ff bb25 	b.w	80a3940 <__ieee754_pow+0x30>
 80a42f6:	a32c      	add	r3, pc, #176	; (adr r3, 80a43a8 <__ieee754_pow+0xa98>)
 80a42f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a42fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a4300:	f000 fda0 	bl	80a4e44 <__aeabi_dmul>
 80a4304:	a328      	add	r3, pc, #160	; (adr r3, 80a43a8 <__ieee754_pow+0xa98>)
 80a4306:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a430a:	f000 fd9b 	bl	80a4e44 <__aeabi_dmul>
 80a430e:	4683      	mov	fp, r0
 80a4310:	f7ff bb16 	b.w	80a3940 <__ieee754_pow+0x30>
 80a4314:	f1be 0f00 	cmp.w	lr, #0
 80a4318:	f47f ab4f 	bne.w	80a39ba <__ieee754_pow+0xaa>
 80a431c:	f1c3 0314 	rsb	r3, r3, #20
 80a4320:	fa48 f203 	asr.w	r2, r8, r3
 80a4324:	fa02 f303 	lsl.w	r3, r2, r3
 80a4328:	4598      	cmp	r8, r3
 80a432a:	d024      	beq.n	80a4376 <__ieee754_pow+0xa66>
 80a432c:	4674      	mov	r4, lr
 80a432e:	f7ff bb21 	b.w	80a3974 <__ieee754_pow+0x64>
 80a4332:	4b26      	ldr	r3, [pc, #152]	; (80a43cc <__ieee754_pow+0xabc>)
 80a4334:	429f      	cmp	r7, r3
 80a4336:	f73f ae07 	bgt.w	80a3f48 <__ieee754_pow+0x638>
 80a433a:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80a433e:	469a      	mov	sl, r3
 80a4340:	469b      	mov	fp, r3
 80a4342:	e62e      	b.n	80a3fa2 <__ieee754_pow+0x692>
 80a4344:	4602      	mov	r2, r0
 80a4346:	460b      	mov	r3, r1
 80a4348:	f7ff bbb9 	b.w	80a3abe <__ieee754_pow+0x1ae>
 80a434c:	4b20      	ldr	r3, [pc, #128]	; (80a43d0 <__ieee754_pow+0xac0>)
 80a434e:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80a4352:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a4356:	a316      	add	r3, pc, #88	; (adr r3, 80a43b0 <__ieee754_pow+0xaa0>)
 80a4358:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a435c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a4360:	a315      	add	r3, pc, #84	; (adr r3, 80a43b8 <__ieee754_pow+0xaa8>)
 80a4362:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4366:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a436a:	f7ff bbf9 	b.w	80a3b60 <__ieee754_pow+0x250>
 80a436e:	465a      	mov	r2, fp
 80a4370:	f000 fb36 	bl	80a49e0 <scalbn>
 80a4374:	e6c5      	b.n	80a4102 <__ieee754_pow+0x7f2>
 80a4376:	f002 0201 	and.w	r2, r2, #1
 80a437a:	f1c2 0402 	rsb	r4, r2, #2
 80a437e:	f7ff baf9 	b.w	80a3974 <__ieee754_pow+0x64>
 80a4382:	bf00      	nop
 80a4384:	f3af 8000 	nop.w
 80a4388:	60000000 	.word	0x60000000
 80a438c:	3ff71547 	.word	0x3ff71547
 80a4390:	f85ddf44 	.word	0xf85ddf44
 80a4394:	3e54ae0b 	.word	0x3e54ae0b
 80a4398:	55555555 	.word	0x55555555
 80a439c:	3fd55555 	.word	0x3fd55555
 80a43a0:	652b82fe 	.word	0x652b82fe
 80a43a4:	3ff71547 	.word	0x3ff71547
 80a43a8:	8800759c 	.word	0x8800759c
 80a43ac:	7e37e43c 	.word	0x7e37e43c
 80a43b0:	40000000 	.word	0x40000000
 80a43b4:	3fe2b803 	.word	0x3fe2b803
 80a43b8:	43cfd006 	.word	0x43cfd006
 80a43bc:	3e4cfdeb 	.word	0x3e4cfdeb
 80a43c0:	3feffffe 	.word	0x3feffffe
 80a43c4:	3ff00000 	.word	0x3ff00000
 80a43c8:	3fd00000 	.word	0x3fd00000
 80a43cc:	3fe00000 	.word	0x3fe00000
 80a43d0:	3ff80000 	.word	0x3ff80000

080a43d4 <__ieee754_sqrt>:
 80a43d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a43d8:	4e5f      	ldr	r6, [pc, #380]	; (80a4558 <__ieee754_sqrt+0x184>)
 80a43da:	460c      	mov	r4, r1
 80a43dc:	46b6      	mov	lr, r6
 80a43de:	400e      	ands	r6, r1
 80a43e0:	4576      	cmp	r6, lr
 80a43e2:	4605      	mov	r5, r0
 80a43e4:	f000 8098 	beq.w	80a4518 <__ieee754_sqrt+0x144>
 80a43e8:	2900      	cmp	r1, #0
 80a43ea:	460b      	mov	r3, r1
 80a43ec:	4602      	mov	r2, r0
 80a43ee:	dd74      	ble.n	80a44da <__ieee754_sqrt+0x106>
 80a43f0:	ea5f 5e21 	movs.w	lr, r1, asr #20
 80a43f4:	d07f      	beq.n	80a44f6 <__ieee754_sqrt+0x122>
 80a43f6:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 80a43fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a43fe:	f01e 0f01 	tst.w	lr, #1
 80a4402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a4406:	d163      	bne.n	80a44d0 <__ieee754_sqrt+0xfc>
 80a4408:	2700      	movs	r7, #0
 80a440a:	463e      	mov	r6, r7
 80a440c:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80a4410:	440b      	add	r3, r1
 80a4412:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a4416:	0052      	lsls	r2, r2, #1
 80a4418:	2016      	movs	r0, #22
 80a441a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80a441e:	1874      	adds	r4, r6, r1
 80a4420:	429c      	cmp	r4, r3
 80a4422:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80a4426:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a442a:	dc02      	bgt.n	80a4432 <__ieee754_sqrt+0x5e>
 80a442c:	1b1b      	subs	r3, r3, r4
 80a442e:	1866      	adds	r6, r4, r1
 80a4430:	440f      	add	r7, r1
 80a4432:	3801      	subs	r0, #1
 80a4434:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80a4438:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a443c:	d1ef      	bne.n	80a441e <__ieee754_sqrt+0x4a>
 80a443e:	4684      	mov	ip, r0
 80a4440:	2420      	movs	r4, #32
 80a4442:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80a4446:	e009      	b.n	80a445c <__ieee754_sqrt+0x88>
 80a4448:	d020      	beq.n	80a448c <__ieee754_sqrt+0xb8>
 80a444a:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 80a444e:	3c01      	subs	r4, #1
 80a4450:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a4454:	442b      	add	r3, r5
 80a4456:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a445a:	d020      	beq.n	80a449e <__ieee754_sqrt+0xca>
 80a445c:	429e      	cmp	r6, r3
 80a445e:	eb01 050c 	add.w	r5, r1, ip
 80a4462:	daf1      	bge.n	80a4448 <__ieee754_sqrt+0x74>
 80a4464:	2d00      	cmp	r5, #0
 80a4466:	eb05 0c01 	add.w	ip, r5, r1
 80a446a:	db09      	blt.n	80a4480 <__ieee754_sqrt+0xac>
 80a446c:	46b0      	mov	r8, r6
 80a446e:	4295      	cmp	r5, r2
 80a4470:	eba3 0306 	sub.w	r3, r3, r6
 80a4474:	d900      	bls.n	80a4478 <__ieee754_sqrt+0xa4>
 80a4476:	3b01      	subs	r3, #1
 80a4478:	4646      	mov	r6, r8
 80a447a:	1b52      	subs	r2, r2, r5
 80a447c:	4408      	add	r0, r1
 80a447e:	e7e4      	b.n	80a444a <__ieee754_sqrt+0x76>
 80a4480:	f1bc 0f00 	cmp.w	ip, #0
 80a4484:	dbf2      	blt.n	80a446c <__ieee754_sqrt+0x98>
 80a4486:	f106 0801 	add.w	r8, r6, #1
 80a448a:	e7f0      	b.n	80a446e <__ieee754_sqrt+0x9a>
 80a448c:	4295      	cmp	r5, r2
 80a448e:	d817      	bhi.n	80a44c0 <__ieee754_sqrt+0xec>
 80a4490:	2d00      	cmp	r5, #0
 80a4492:	eb05 0c01 	add.w	ip, r5, r1
 80a4496:	db49      	blt.n	80a452c <__ieee754_sqrt+0x158>
 80a4498:	4698      	mov	r8, r3
 80a449a:	2300      	movs	r3, #0
 80a449c:	e7ec      	b.n	80a4478 <__ieee754_sqrt+0xa4>
 80a449e:	4313      	orrs	r3, r2
 80a44a0:	d110      	bne.n	80a44c4 <__ieee754_sqrt+0xf0>
 80a44a2:	0840      	lsrs	r0, r0, #1
 80a44a4:	107b      	asrs	r3, r7, #1
 80a44a6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a44aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a44ae:	07fa      	lsls	r2, r7, #31
 80a44b0:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 80a44b4:	4639      	mov	r1, r7
 80a44b6:	bf48      	it	mi
 80a44b8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80a44bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a44c0:	4633      	mov	r3, r6
 80a44c2:	e7c2      	b.n	80a444a <__ieee754_sqrt+0x76>
 80a44c4:	1c41      	adds	r1, r0, #1
 80a44c6:	d035      	beq.n	80a4534 <__ieee754_sqrt+0x160>
 80a44c8:	f000 0301 	and.w	r3, r0, #1
 80a44cc:	4418      	add	r0, r3
 80a44ce:	e7e8      	b.n	80a44a2 <__ieee754_sqrt+0xce>
 80a44d0:	005b      	lsls	r3, r3, #1
 80a44d2:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80a44d6:	0052      	lsls	r2, r2, #1
 80a44d8:	e796      	b.n	80a4408 <__ieee754_sqrt+0x34>
 80a44da:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a44de:	4306      	orrs	r6, r0
 80a44e0:	d0ec      	beq.n	80a44bc <__ieee754_sqrt+0xe8>
 80a44e2:	bb79      	cbnz	r1, 80a4544 <__ieee754_sqrt+0x170>
 80a44e4:	468e      	mov	lr, r1
 80a44e6:	0ad3      	lsrs	r3, r2, #11
 80a44e8:	f1ae 0e15 	sub.w	lr, lr, #21
 80a44ec:	0552      	lsls	r2, r2, #21
 80a44ee:	2b00      	cmp	r3, #0
 80a44f0:	d0f9      	beq.n	80a44e6 <__ieee754_sqrt+0x112>
 80a44f2:	02dd      	lsls	r5, r3, #11
 80a44f4:	d421      	bmi.n	80a453a <__ieee754_sqrt+0x166>
 80a44f6:	2100      	movs	r1, #0
 80a44f8:	e000      	b.n	80a44fc <__ieee754_sqrt+0x128>
 80a44fa:	4601      	mov	r1, r0
 80a44fc:	005b      	lsls	r3, r3, #1
 80a44fe:	02dc      	lsls	r4, r3, #11
 80a4500:	f101 0001 	add.w	r0, r1, #1
 80a4504:	d5f9      	bpl.n	80a44fa <__ieee754_sqrt+0x126>
 80a4506:	f1c0 0420 	rsb	r4, r0, #32
 80a450a:	fa22 f404 	lsr.w	r4, r2, r4
 80a450e:	4323      	orrs	r3, r4
 80a4510:	ebc1 0e0e 	rsb	lr, r1, lr
 80a4514:	4082      	lsls	r2, r0
 80a4516:	e76e      	b.n	80a43f6 <__ieee754_sqrt+0x22>
 80a4518:	4602      	mov	r2, r0
 80a451a:	460b      	mov	r3, r1
 80a451c:	f000 fc92 	bl	80a4e44 <__aeabi_dmul>
 80a4520:	462a      	mov	r2, r5
 80a4522:	4623      	mov	r3, r4
 80a4524:	f000 fadc 	bl	80a4ae0 <__adddf3>
 80a4528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a452c:	f1bc 0f00 	cmp.w	ip, #0
 80a4530:	daa9      	bge.n	80a4486 <__ieee754_sqrt+0xb2>
 80a4532:	e7b1      	b.n	80a4498 <__ieee754_sqrt+0xc4>
 80a4534:	3701      	adds	r7, #1
 80a4536:	4620      	mov	r0, r4
 80a4538:	e7b4      	b.n	80a44a4 <__ieee754_sqrt+0xd0>
 80a453a:	2420      	movs	r4, #32
 80a453c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80a4540:	2000      	movs	r0, #0
 80a4542:	e7e2      	b.n	80a450a <__ieee754_sqrt+0x136>
 80a4544:	4602      	mov	r2, r0
 80a4546:	460b      	mov	r3, r1
 80a4548:	f000 fac8 	bl	80a4adc <__aeabi_dsub>
 80a454c:	4602      	mov	r2, r0
 80a454e:	460b      	mov	r3, r1
 80a4550:	f000 fda2 	bl	80a5098 <__aeabi_ddiv>
 80a4554:	e7b2      	b.n	80a44bc <__ieee754_sqrt+0xe8>
 80a4556:	bf00      	nop
 80a4558:	7ff00000 	.word	0x7ff00000
 80a455c:	00000000 	.word	0x00000000

080a4560 <atan>:
 80a4560:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4564:	4bc0      	ldr	r3, [pc, #768]	; (80a4868 <atan+0x308>)
 80a4566:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a456a:	429e      	cmp	r6, r3
 80a456c:	460d      	mov	r5, r1
 80a456e:	468a      	mov	sl, r1
 80a4570:	4604      	mov	r4, r0
 80a4572:	dd0f      	ble.n	80a4594 <atan+0x34>
 80a4574:	4bbd      	ldr	r3, [pc, #756]	; (80a486c <atan+0x30c>)
 80a4576:	429e      	cmp	r6, r3
 80a4578:	f300 80b2 	bgt.w	80a46e0 <atan+0x180>
 80a457c:	f000 80ad 	beq.w	80a46da <atan+0x17a>
 80a4580:	4bbb      	ldr	r3, [pc, #748]	; (80a4870 <atan+0x310>)
 80a4582:	49bc      	ldr	r1, [pc, #752]	; (80a4874 <atan+0x314>)
 80a4584:	4cbc      	ldr	r4, [pc, #752]	; (80a4878 <atan+0x318>)
 80a4586:	f1ba 0f00 	cmp.w	sl, #0
 80a458a:	bfc8      	it	gt
 80a458c:	4619      	movgt	r1, r3
 80a458e:	4620      	mov	r0, r4
 80a4590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4594:	4bb9      	ldr	r3, [pc, #740]	; (80a487c <atan+0x31c>)
 80a4596:	429e      	cmp	r6, r3
 80a4598:	f300 80bc 	bgt.w	80a4714 <atan+0x1b4>
 80a459c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80a45a0:	429e      	cmp	r6, r3
 80a45a2:	f340 80a7 	ble.w	80a46f4 <atan+0x194>
 80a45a6:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80a45aa:	4622      	mov	r2, r4
 80a45ac:	462b      	mov	r3, r5
 80a45ae:	4620      	mov	r0, r4
 80a45b0:	4629      	mov	r1, r5
 80a45b2:	f000 fc47 	bl	80a4e44 <__aeabi_dmul>
 80a45b6:	4602      	mov	r2, r0
 80a45b8:	460b      	mov	r3, r1
 80a45ba:	4680      	mov	r8, r0
 80a45bc:	4689      	mov	r9, r1
 80a45be:	f000 fc41 	bl	80a4e44 <__aeabi_dmul>
 80a45c2:	a391      	add	r3, pc, #580	; (adr r3, 80a4808 <atan+0x2a8>)
 80a45c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a45c8:	4606      	mov	r6, r0
 80a45ca:	460f      	mov	r7, r1
 80a45cc:	f000 fc3a 	bl	80a4e44 <__aeabi_dmul>
 80a45d0:	a38f      	add	r3, pc, #572	; (adr r3, 80a4810 <atan+0x2b0>)
 80a45d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a45d6:	f000 fa83 	bl	80a4ae0 <__adddf3>
 80a45da:	4632      	mov	r2, r6
 80a45dc:	463b      	mov	r3, r7
 80a45de:	f000 fc31 	bl	80a4e44 <__aeabi_dmul>
 80a45e2:	a38d      	add	r3, pc, #564	; (adr r3, 80a4818 <atan+0x2b8>)
 80a45e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a45e8:	f000 fa7a 	bl	80a4ae0 <__adddf3>
 80a45ec:	4632      	mov	r2, r6
 80a45ee:	463b      	mov	r3, r7
 80a45f0:	f000 fc28 	bl	80a4e44 <__aeabi_dmul>
 80a45f4:	a38a      	add	r3, pc, #552	; (adr r3, 80a4820 <atan+0x2c0>)
 80a45f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a45fa:	f000 fa71 	bl	80a4ae0 <__adddf3>
 80a45fe:	4632      	mov	r2, r6
 80a4600:	463b      	mov	r3, r7
 80a4602:	f000 fc1f 	bl	80a4e44 <__aeabi_dmul>
 80a4606:	a388      	add	r3, pc, #544	; (adr r3, 80a4828 <atan+0x2c8>)
 80a4608:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a460c:	f000 fa68 	bl	80a4ae0 <__adddf3>
 80a4610:	4632      	mov	r2, r6
 80a4612:	463b      	mov	r3, r7
 80a4614:	f000 fc16 	bl	80a4e44 <__aeabi_dmul>
 80a4618:	a385      	add	r3, pc, #532	; (adr r3, 80a4830 <atan+0x2d0>)
 80a461a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a461e:	f000 fa5f 	bl	80a4ae0 <__adddf3>
 80a4622:	4642      	mov	r2, r8
 80a4624:	464b      	mov	r3, r9
 80a4626:	f000 fc0d 	bl	80a4e44 <__aeabi_dmul>
 80a462a:	a383      	add	r3, pc, #524	; (adr r3, 80a4838 <atan+0x2d8>)
 80a462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4630:	4680      	mov	r8, r0
 80a4632:	4689      	mov	r9, r1
 80a4634:	4630      	mov	r0, r6
 80a4636:	4639      	mov	r1, r7
 80a4638:	f000 fc04 	bl	80a4e44 <__aeabi_dmul>
 80a463c:	a380      	add	r3, pc, #512	; (adr r3, 80a4840 <atan+0x2e0>)
 80a463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4642:	f000 fa4b 	bl	80a4adc <__aeabi_dsub>
 80a4646:	4632      	mov	r2, r6
 80a4648:	463b      	mov	r3, r7
 80a464a:	f000 fbfb 	bl	80a4e44 <__aeabi_dmul>
 80a464e:	a37e      	add	r3, pc, #504	; (adr r3, 80a4848 <atan+0x2e8>)
 80a4650:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4654:	f000 fa42 	bl	80a4adc <__aeabi_dsub>
 80a4658:	4632      	mov	r2, r6
 80a465a:	463b      	mov	r3, r7
 80a465c:	f000 fbf2 	bl	80a4e44 <__aeabi_dmul>
 80a4660:	a37b      	add	r3, pc, #492	; (adr r3, 80a4850 <atan+0x2f0>)
 80a4662:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4666:	f000 fa39 	bl	80a4adc <__aeabi_dsub>
 80a466a:	4632      	mov	r2, r6
 80a466c:	463b      	mov	r3, r7
 80a466e:	f000 fbe9 	bl	80a4e44 <__aeabi_dmul>
 80a4672:	a379      	add	r3, pc, #484	; (adr r3, 80a4858 <atan+0x2f8>)
 80a4674:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4678:	f000 fa30 	bl	80a4adc <__aeabi_dsub>
 80a467c:	4632      	mov	r2, r6
 80a467e:	463b      	mov	r3, r7
 80a4680:	f000 fbe0 	bl	80a4e44 <__aeabi_dmul>
 80a4684:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 80a4688:	4602      	mov	r2, r0
 80a468a:	460b      	mov	r3, r1
 80a468c:	d069      	beq.n	80a4762 <atan+0x202>
 80a468e:	4640      	mov	r0, r8
 80a4690:	4649      	mov	r1, r9
 80a4692:	f000 fa25 	bl	80a4ae0 <__adddf3>
 80a4696:	4622      	mov	r2, r4
 80a4698:	462b      	mov	r3, r5
 80a469a:	f000 fbd3 	bl	80a4e44 <__aeabi_dmul>
 80a469e:	4e78      	ldr	r6, [pc, #480]	; (80a4880 <atan+0x320>)
 80a46a0:	4b78      	ldr	r3, [pc, #480]	; (80a4884 <atan+0x324>)
 80a46a2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80a46a6:	445e      	add	r6, fp
 80a46a8:	449b      	add	fp, r3
 80a46aa:	e9db 2300 	ldrd	r2, r3, [fp]
 80a46ae:	f000 fa15 	bl	80a4adc <__aeabi_dsub>
 80a46b2:	4622      	mov	r2, r4
 80a46b4:	462b      	mov	r3, r5
 80a46b6:	f000 fa11 	bl	80a4adc <__aeabi_dsub>
 80a46ba:	4602      	mov	r2, r0
 80a46bc:	460b      	mov	r3, r1
 80a46be:	e9d6 0100 	ldrd	r0, r1, [r6]
 80a46c2:	f000 fa0b 	bl	80a4adc <__aeabi_dsub>
 80a46c6:	f1ba 0f00 	cmp.w	sl, #0
 80a46ca:	4604      	mov	r4, r0
 80a46cc:	f6bf af5f 	bge.w	80a458e <atan+0x2e>
 80a46d0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a46d4:	4620      	mov	r0, r4
 80a46d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a46da:	2800      	cmp	r0, #0
 80a46dc:	f43f af50 	beq.w	80a4580 <atan+0x20>
 80a46e0:	4622      	mov	r2, r4
 80a46e2:	4620      	mov	r0, r4
 80a46e4:	462b      	mov	r3, r5
 80a46e6:	4629      	mov	r1, r5
 80a46e8:	f000 f9fa 	bl	80a4ae0 <__adddf3>
 80a46ec:	4604      	mov	r4, r0
 80a46ee:	4620      	mov	r0, r4
 80a46f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a46f4:	a35a      	add	r3, pc, #360	; (adr r3, 80a4860 <atan+0x300>)
 80a46f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a46fa:	f000 f9f1 	bl	80a4ae0 <__adddf3>
 80a46fe:	2200      	movs	r2, #0
 80a4700:	4b61      	ldr	r3, [pc, #388]	; (80a4888 <atan+0x328>)
 80a4702:	f000 fe2f 	bl	80a5364 <__aeabi_dcmpgt>
 80a4706:	2800      	cmp	r0, #0
 80a4708:	f43f af4d 	beq.w	80a45a6 <atan+0x46>
 80a470c:	4629      	mov	r1, r5
 80a470e:	4620      	mov	r0, r4
 80a4710:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4714:	f000 f8c2 	bl	80a489c <fabs>
 80a4718:	4b5c      	ldr	r3, [pc, #368]	; (80a488c <atan+0x32c>)
 80a471a:	4604      	mov	r4, r0
 80a471c:	429e      	cmp	r6, r3
 80a471e:	460d      	mov	r5, r1
 80a4720:	dc2f      	bgt.n	80a4782 <atan+0x222>
 80a4722:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80a4726:	429e      	cmp	r6, r3
 80a4728:	dc54      	bgt.n	80a47d4 <atan+0x274>
 80a472a:	4602      	mov	r2, r0
 80a472c:	460b      	mov	r3, r1
 80a472e:	f000 f9d7 	bl	80a4ae0 <__adddf3>
 80a4732:	2200      	movs	r2, #0
 80a4734:	4b54      	ldr	r3, [pc, #336]	; (80a4888 <atan+0x328>)
 80a4736:	f000 f9d1 	bl	80a4adc <__aeabi_dsub>
 80a473a:	2200      	movs	r2, #0
 80a473c:	4606      	mov	r6, r0
 80a473e:	460f      	mov	r7, r1
 80a4740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a4744:	4620      	mov	r0, r4
 80a4746:	4629      	mov	r1, r5
 80a4748:	f000 f9ca 	bl	80a4ae0 <__adddf3>
 80a474c:	4602      	mov	r2, r0
 80a474e:	460b      	mov	r3, r1
 80a4750:	4630      	mov	r0, r6
 80a4752:	4639      	mov	r1, r7
 80a4754:	f000 fca0 	bl	80a5098 <__aeabi_ddiv>
 80a4758:	f04f 0b00 	mov.w	fp, #0
 80a475c:	4604      	mov	r4, r0
 80a475e:	460d      	mov	r5, r1
 80a4760:	e723      	b.n	80a45aa <atan+0x4a>
 80a4762:	4640      	mov	r0, r8
 80a4764:	4649      	mov	r1, r9
 80a4766:	f000 f9bb 	bl	80a4ae0 <__adddf3>
 80a476a:	4622      	mov	r2, r4
 80a476c:	462b      	mov	r3, r5
 80a476e:	f000 fb69 	bl	80a4e44 <__aeabi_dmul>
 80a4772:	4602      	mov	r2, r0
 80a4774:	460b      	mov	r3, r1
 80a4776:	4620      	mov	r0, r4
 80a4778:	4629      	mov	r1, r5
 80a477a:	f000 f9af 	bl	80a4adc <__aeabi_dsub>
 80a477e:	4604      	mov	r4, r0
 80a4780:	e705      	b.n	80a458e <atan+0x2e>
 80a4782:	4b43      	ldr	r3, [pc, #268]	; (80a4890 <atan+0x330>)
 80a4784:	429e      	cmp	r6, r3
 80a4786:	dc1a      	bgt.n	80a47be <atan+0x25e>
 80a4788:	2200      	movs	r2, #0
 80a478a:	4b42      	ldr	r3, [pc, #264]	; (80a4894 <atan+0x334>)
 80a478c:	f000 f9a6 	bl	80a4adc <__aeabi_dsub>
 80a4790:	2200      	movs	r2, #0
 80a4792:	4606      	mov	r6, r0
 80a4794:	460f      	mov	r7, r1
 80a4796:	4b3f      	ldr	r3, [pc, #252]	; (80a4894 <atan+0x334>)
 80a4798:	4620      	mov	r0, r4
 80a479a:	4629      	mov	r1, r5
 80a479c:	f000 fb52 	bl	80a4e44 <__aeabi_dmul>
 80a47a0:	2200      	movs	r2, #0
 80a47a2:	4b39      	ldr	r3, [pc, #228]	; (80a4888 <atan+0x328>)
 80a47a4:	f000 f99c 	bl	80a4ae0 <__adddf3>
 80a47a8:	4602      	mov	r2, r0
 80a47aa:	460b      	mov	r3, r1
 80a47ac:	4630      	mov	r0, r6
 80a47ae:	4639      	mov	r1, r7
 80a47b0:	f000 fc72 	bl	80a5098 <__aeabi_ddiv>
 80a47b4:	f04f 0b02 	mov.w	fp, #2
 80a47b8:	4604      	mov	r4, r0
 80a47ba:	460d      	mov	r5, r1
 80a47bc:	e6f5      	b.n	80a45aa <atan+0x4a>
 80a47be:	4602      	mov	r2, r0
 80a47c0:	460b      	mov	r3, r1
 80a47c2:	2000      	movs	r0, #0
 80a47c4:	4934      	ldr	r1, [pc, #208]	; (80a4898 <atan+0x338>)
 80a47c6:	f000 fc67 	bl	80a5098 <__aeabi_ddiv>
 80a47ca:	f04f 0b03 	mov.w	fp, #3
 80a47ce:	4604      	mov	r4, r0
 80a47d0:	460d      	mov	r5, r1
 80a47d2:	e6ea      	b.n	80a45aa <atan+0x4a>
 80a47d4:	2200      	movs	r2, #0
 80a47d6:	4b2c      	ldr	r3, [pc, #176]	; (80a4888 <atan+0x328>)
 80a47d8:	f000 f980 	bl	80a4adc <__aeabi_dsub>
 80a47dc:	2200      	movs	r2, #0
 80a47de:	4606      	mov	r6, r0
 80a47e0:	460f      	mov	r7, r1
 80a47e2:	4b29      	ldr	r3, [pc, #164]	; (80a4888 <atan+0x328>)
 80a47e4:	4620      	mov	r0, r4
 80a47e6:	4629      	mov	r1, r5
 80a47e8:	f000 f97a 	bl	80a4ae0 <__adddf3>
 80a47ec:	4602      	mov	r2, r0
 80a47ee:	460b      	mov	r3, r1
 80a47f0:	4630      	mov	r0, r6
 80a47f2:	4639      	mov	r1, r7
 80a47f4:	f000 fc50 	bl	80a5098 <__aeabi_ddiv>
 80a47f8:	f04f 0b01 	mov.w	fp, #1
 80a47fc:	4604      	mov	r4, r0
 80a47fe:	460d      	mov	r5, r1
 80a4800:	e6d3      	b.n	80a45aa <atan+0x4a>
 80a4802:	bf00      	nop
 80a4804:	f3af 8000 	nop.w
 80a4808:	e322da11 	.word	0xe322da11
 80a480c:	3f90ad3a 	.word	0x3f90ad3a
 80a4810:	24760deb 	.word	0x24760deb
 80a4814:	3fa97b4b 	.word	0x3fa97b4b
 80a4818:	a0d03d51 	.word	0xa0d03d51
 80a481c:	3fb10d66 	.word	0x3fb10d66
 80a4820:	c54c206e 	.word	0xc54c206e
 80a4824:	3fb745cd 	.word	0x3fb745cd
 80a4828:	920083ff 	.word	0x920083ff
 80a482c:	3fc24924 	.word	0x3fc24924
 80a4830:	5555550d 	.word	0x5555550d
 80a4834:	3fd55555 	.word	0x3fd55555
 80a4838:	2c6a6c2f 	.word	0x2c6a6c2f
 80a483c:	bfa2b444 	.word	0xbfa2b444
 80a4840:	52defd9a 	.word	0x52defd9a
 80a4844:	3fadde2d 	.word	0x3fadde2d
 80a4848:	af749a6d 	.word	0xaf749a6d
 80a484c:	3fb3b0f2 	.word	0x3fb3b0f2
 80a4850:	fe231671 	.word	0xfe231671
 80a4854:	3fbc71c6 	.word	0x3fbc71c6
 80a4858:	9998ebc4 	.word	0x9998ebc4
 80a485c:	3fc99999 	.word	0x3fc99999
 80a4860:	8800759c 	.word	0x8800759c
 80a4864:	7e37e43c 	.word	0x7e37e43c
 80a4868:	440fffff 	.word	0x440fffff
 80a486c:	7ff00000 	.word	0x7ff00000
 80a4870:	3ff921fb 	.word	0x3ff921fb
 80a4874:	bff921fb 	.word	0xbff921fb
 80a4878:	54442d18 	.word	0x54442d18
 80a487c:	3fdbffff 	.word	0x3fdbffff
 80a4880:	080a60a8 	.word	0x080a60a8
 80a4884:	080a6088 	.word	0x080a6088
 80a4888:	3ff00000 	.word	0x3ff00000
 80a488c:	3ff2ffff 	.word	0x3ff2ffff
 80a4890:	40037fff 	.word	0x40037fff
 80a4894:	3ff80000 	.word	0x3ff80000
 80a4898:	bff00000 	.word	0xbff00000

080a489c <fabs>:
 80a489c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a48a0:	4770      	bx	lr
 80a48a2:	bf00      	nop

080a48a4 <finite>:
 80a48a4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80a48a8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80a48ac:	0fc0      	lsrs	r0, r0, #31
 80a48ae:	4770      	bx	lr

080a48b0 <matherr>:
 80a48b0:	2000      	movs	r0, #0
 80a48b2:	4770      	bx	lr

080a48b4 <nan>:
 80a48b4:	2000      	movs	r0, #0
 80a48b6:	4901      	ldr	r1, [pc, #4]	; (80a48bc <nan+0x8>)
 80a48b8:	4770      	bx	lr
 80a48ba:	bf00      	nop
 80a48bc:	7ff80000 	.word	0x7ff80000

080a48c0 <rint>:
 80a48c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a48c2:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 80a48c6:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
 80a48ca:	2e13      	cmp	r6, #19
 80a48cc:	b083      	sub	sp, #12
 80a48ce:	4602      	mov	r2, r0
 80a48d0:	460b      	mov	r3, r1
 80a48d2:	460c      	mov	r4, r1
 80a48d4:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80a48d8:	4607      	mov	r7, r0
 80a48da:	dc2e      	bgt.n	80a493a <rint+0x7a>
 80a48dc:	2e00      	cmp	r6, #0
 80a48de:	db49      	blt.n	80a4974 <rint+0xb4>
 80a48e0:	493d      	ldr	r1, [pc, #244]	; (80a49d8 <rint+0x118>)
 80a48e2:	4131      	asrs	r1, r6
 80a48e4:	ea03 0001 	and.w	r0, r3, r1
 80a48e8:	4310      	orrs	r0, r2
 80a48ea:	d02b      	beq.n	80a4944 <rint+0x84>
 80a48ec:	0849      	lsrs	r1, r1, #1
 80a48ee:	400b      	ands	r3, r1
 80a48f0:	ea53 0702 	orrs.w	r7, r3, r2
 80a48f4:	d00c      	beq.n	80a4910 <rint+0x50>
 80a48f6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80a48fa:	2e13      	cmp	r6, #19
 80a48fc:	ea24 0101 	bic.w	r1, r4, r1
 80a4900:	fa43 f406 	asr.w	r4, r3, r6
 80a4904:	ea44 0401 	orr.w	r4, r4, r1
 80a4908:	bf0c      	ite	eq
 80a490a:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80a490e:	2700      	movne	r7, #0
 80a4910:	4b32      	ldr	r3, [pc, #200]	; (80a49dc <rint+0x11c>)
 80a4912:	4621      	mov	r1, r4
 80a4914:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80a4918:	e9d5 4500 	ldrd	r4, r5, [r5]
 80a491c:	4638      	mov	r0, r7
 80a491e:	4622      	mov	r2, r4
 80a4920:	462b      	mov	r3, r5
 80a4922:	f000 f8dd 	bl	80a4ae0 <__adddf3>
 80a4926:	e9cd 0100 	strd	r0, r1, [sp]
 80a492a:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a492e:	4622      	mov	r2, r4
 80a4930:	462b      	mov	r3, r5
 80a4932:	f000 f8d3 	bl	80a4adc <__aeabi_dsub>
 80a4936:	b003      	add	sp, #12
 80a4938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a493a:	2e33      	cmp	r6, #51	; 0x33
 80a493c:	dd06      	ble.n	80a494c <rint+0x8c>
 80a493e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a4942:	d045      	beq.n	80a49d0 <rint+0x110>
 80a4944:	4610      	mov	r0, r2
 80a4946:	4619      	mov	r1, r3
 80a4948:	b003      	add	sp, #12
 80a494a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a494c:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 80a4950:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80a4954:	fa21 f10e 	lsr.w	r1, r1, lr
 80a4958:	4208      	tst	r0, r1
 80a495a:	d0f3      	beq.n	80a4944 <rint+0x84>
 80a495c:	0849      	lsrs	r1, r1, #1
 80a495e:	4208      	tst	r0, r1
 80a4960:	d0d6      	beq.n	80a4910 <rint+0x50>
 80a4962:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a4966:	ea20 0101 	bic.w	r1, r0, r1
 80a496a:	fa43 fe0e 	asr.w	lr, r3, lr
 80a496e:	ea4e 0701 	orr.w	r7, lr, r1
 80a4972:	e7cd      	b.n	80a4910 <rint+0x50>
 80a4974:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4978:	4301      	orrs	r1, r0
 80a497a:	4619      	mov	r1, r3
 80a497c:	d0e4      	beq.n	80a4948 <rint+0x88>
 80a497e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a4982:	ea43 0c00 	orr.w	ip, r3, r0
 80a4986:	f1cc 0300 	rsb	r3, ip, #0
 80a498a:	ea43 0c0c 	orr.w	ip, r3, ip
 80a498e:	4b13      	ldr	r3, [pc, #76]	; (80a49dc <rint+0x11c>)
 80a4990:	0c64      	lsrs	r4, r4, #17
 80a4992:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
 80a4996:	f40c 2c00 	and.w	ip, ip, #524288	; 0x80000
 80a499a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80a499e:	0464      	lsls	r4, r4, #17
 80a49a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80a49a4:	ea4c 0104 	orr.w	r1, ip, r4
 80a49a8:	4632      	mov	r2, r6
 80a49aa:	463b      	mov	r3, r7
 80a49ac:	f000 f898 	bl	80a4ae0 <__adddf3>
 80a49b0:	e9cd 0100 	strd	r0, r1, [sp]
 80a49b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a49b8:	4632      	mov	r2, r6
 80a49ba:	463b      	mov	r3, r7
 80a49bc:	f000 f88e 	bl	80a4adc <__aeabi_dsub>
 80a49c0:	4602      	mov	r2, r0
 80a49c2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a49c6:	ea41 73c5 	orr.w	r3, r1, r5, lsl #31
 80a49ca:	4610      	mov	r0, r2
 80a49cc:	4619      	mov	r1, r3
 80a49ce:	e7bb      	b.n	80a4948 <rint+0x88>
 80a49d0:	f000 f886 	bl	80a4ae0 <__adddf3>
 80a49d4:	e7b8      	b.n	80a4948 <rint+0x88>
 80a49d6:	bf00      	nop
 80a49d8:	000fffff 	.word	0x000fffff
 80a49dc:	080a60c8 	.word	0x080a60c8

080a49e0 <scalbn>:
 80a49e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a49e2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a49e6:	4604      	mov	r4, r0
 80a49e8:	460d      	mov	r5, r1
 80a49ea:	460b      	mov	r3, r1
 80a49ec:	4617      	mov	r7, r2
 80a49ee:	bb06      	cbnz	r6, 80a4a32 <scalbn+0x52>
 80a49f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a49f4:	4303      	orrs	r3, r0
 80a49f6:	d025      	beq.n	80a4a44 <scalbn+0x64>
 80a49f8:	2200      	movs	r2, #0
 80a49fa:	4b2f      	ldr	r3, [pc, #188]	; (80a4ab8 <scalbn+0xd8>)
 80a49fc:	f000 fa22 	bl	80a4e44 <__aeabi_dmul>
 80a4a00:	4a2e      	ldr	r2, [pc, #184]	; (80a4abc <scalbn+0xdc>)
 80a4a02:	4604      	mov	r4, r0
 80a4a04:	4297      	cmp	r7, r2
 80a4a06:	460d      	mov	r5, r1
 80a4a08:	460b      	mov	r3, r1
 80a4a0a:	db2a      	blt.n	80a4a62 <scalbn+0x82>
 80a4a0c:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a4a10:	3e36      	subs	r6, #54	; 0x36
 80a4a12:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a4a16:	443e      	add	r6, r7
 80a4a18:	4296      	cmp	r6, r2
 80a4a1a:	dc28      	bgt.n	80a4a6e <scalbn+0x8e>
 80a4a1c:	2e00      	cmp	r6, #0
 80a4a1e:	dd12      	ble.n	80a4a46 <scalbn+0x66>
 80a4a20:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a4a24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a4a28:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a4a2c:	4620      	mov	r0, r4
 80a4a2e:	4629      	mov	r1, r5
 80a4a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4a32:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80a4a36:	4296      	cmp	r6, r2
 80a4a38:	d1eb      	bne.n	80a4a12 <scalbn+0x32>
 80a4a3a:	4602      	mov	r2, r0
 80a4a3c:	460b      	mov	r3, r1
 80a4a3e:	f000 f84f 	bl	80a4ae0 <__adddf3>
 80a4a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4a46:	f116 0f35 	cmn.w	r6, #53	; 0x35
 80a4a4a:	da1d      	bge.n	80a4a88 <scalbn+0xa8>
 80a4a4c:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a4a50:	429f      	cmp	r7, r3
 80a4a52:	dc0c      	bgt.n	80a4a6e <scalbn+0x8e>
 80a4a54:	a114      	add	r1, pc, #80	; (adr r1, 80a4aa8 <scalbn+0xc8>)
 80a4a56:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4a5a:	4622      	mov	r2, r4
 80a4a5c:	462b      	mov	r3, r5
 80a4a5e:	f000 f831 	bl	80a4ac4 <copysign>
 80a4a62:	a311      	add	r3, pc, #68	; (adr r3, 80a4aa8 <scalbn+0xc8>)
 80a4a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4a68:	f000 f9ec 	bl	80a4e44 <__aeabi_dmul>
 80a4a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4a6e:	4622      	mov	r2, r4
 80a4a70:	a10f      	add	r1, pc, #60	; (adr r1, 80a4ab0 <scalbn+0xd0>)
 80a4a72:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4a76:	462b      	mov	r3, r5
 80a4a78:	f000 f824 	bl	80a4ac4 <copysign>
 80a4a7c:	a30c      	add	r3, pc, #48	; (adr r3, 80a4ab0 <scalbn+0xd0>)
 80a4a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4a82:	f000 f9df 	bl	80a4e44 <__aeabi_dmul>
 80a4a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4a88:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a4a8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a4a90:	3636      	adds	r6, #54	; 0x36
 80a4a92:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a4a96:	4620      	mov	r0, r4
 80a4a98:	4629      	mov	r1, r5
 80a4a9a:	2200      	movs	r2, #0
 80a4a9c:	4b08      	ldr	r3, [pc, #32]	; (80a4ac0 <scalbn+0xe0>)
 80a4a9e:	f000 f9d1 	bl	80a4e44 <__aeabi_dmul>
 80a4aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4aa4:	f3af 8000 	nop.w
 80a4aa8:	c2f8f359 	.word	0xc2f8f359
 80a4aac:	01a56e1f 	.word	0x01a56e1f
 80a4ab0:	8800759c 	.word	0x8800759c
 80a4ab4:	7e37e43c 	.word	0x7e37e43c
 80a4ab8:	43500000 	.word	0x43500000
 80a4abc:	ffff3cb0 	.word	0xffff3cb0
 80a4ac0:	3c900000 	.word	0x3c900000

080a4ac4 <copysign>:
 80a4ac4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80a4ac8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a4acc:	ea42 0103 	orr.w	r1, r2, r3
 80a4ad0:	4770      	bx	lr
 80a4ad2:	bf00      	nop

080a4ad4 <__aeabi_drsub>:
 80a4ad4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a4ad8:	e002      	b.n	80a4ae0 <__adddf3>
 80a4ada:	bf00      	nop

080a4adc <__aeabi_dsub>:
 80a4adc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a4ae0 <__adddf3>:
 80a4ae0:	b530      	push	{r4, r5, lr}
 80a4ae2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a4ae6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a4aea:	ea94 0f05 	teq	r4, r5
 80a4aee:	bf08      	it	eq
 80a4af0:	ea90 0f02 	teqeq	r0, r2
 80a4af4:	bf1f      	itttt	ne
 80a4af6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a4afa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a4afe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a4b02:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4b06:	f000 80e2 	beq.w	80a4cce <__adddf3+0x1ee>
 80a4b0a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a4b0e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a4b12:	bfb8      	it	lt
 80a4b14:	426d      	neglt	r5, r5
 80a4b16:	dd0c      	ble.n	80a4b32 <__adddf3+0x52>
 80a4b18:	442c      	add	r4, r5
 80a4b1a:	ea80 0202 	eor.w	r2, r0, r2
 80a4b1e:	ea81 0303 	eor.w	r3, r1, r3
 80a4b22:	ea82 0000 	eor.w	r0, r2, r0
 80a4b26:	ea83 0101 	eor.w	r1, r3, r1
 80a4b2a:	ea80 0202 	eor.w	r2, r0, r2
 80a4b2e:	ea81 0303 	eor.w	r3, r1, r3
 80a4b32:	2d36      	cmp	r5, #54	; 0x36
 80a4b34:	bf88      	it	hi
 80a4b36:	bd30      	pophi	{r4, r5, pc}
 80a4b38:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4b3c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4b40:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a4b44:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a4b48:	d002      	beq.n	80a4b50 <__adddf3+0x70>
 80a4b4a:	4240      	negs	r0, r0
 80a4b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4b50:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a4b54:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4b58:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a4b5c:	d002      	beq.n	80a4b64 <__adddf3+0x84>
 80a4b5e:	4252      	negs	r2, r2
 80a4b60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4b64:	ea94 0f05 	teq	r4, r5
 80a4b68:	f000 80a7 	beq.w	80a4cba <__adddf3+0x1da>
 80a4b6c:	f1a4 0401 	sub.w	r4, r4, #1
 80a4b70:	f1d5 0e20 	rsbs	lr, r5, #32
 80a4b74:	db0d      	blt.n	80a4b92 <__adddf3+0xb2>
 80a4b76:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a4b7a:	fa22 f205 	lsr.w	r2, r2, r5
 80a4b7e:	1880      	adds	r0, r0, r2
 80a4b80:	f141 0100 	adc.w	r1, r1, #0
 80a4b84:	fa03 f20e 	lsl.w	r2, r3, lr
 80a4b88:	1880      	adds	r0, r0, r2
 80a4b8a:	fa43 f305 	asr.w	r3, r3, r5
 80a4b8e:	4159      	adcs	r1, r3
 80a4b90:	e00e      	b.n	80a4bb0 <__adddf3+0xd0>
 80a4b92:	f1a5 0520 	sub.w	r5, r5, #32
 80a4b96:	f10e 0e20 	add.w	lr, lr, #32
 80a4b9a:	2a01      	cmp	r2, #1
 80a4b9c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a4ba0:	bf28      	it	cs
 80a4ba2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a4ba6:	fa43 f305 	asr.w	r3, r3, r5
 80a4baa:	18c0      	adds	r0, r0, r3
 80a4bac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a4bb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4bb4:	d507      	bpl.n	80a4bc6 <__adddf3+0xe6>
 80a4bb6:	f04f 0e00 	mov.w	lr, #0
 80a4bba:	f1dc 0c00 	rsbs	ip, ip, #0
 80a4bbe:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a4bc2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a4bc6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a4bca:	d31b      	bcc.n	80a4c04 <__adddf3+0x124>
 80a4bcc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a4bd0:	d30c      	bcc.n	80a4bec <__adddf3+0x10c>
 80a4bd2:	0849      	lsrs	r1, r1, #1
 80a4bd4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a4bd8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a4bdc:	f104 0401 	add.w	r4, r4, #1
 80a4be0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a4be4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a4be8:	f080 809a 	bcs.w	80a4d20 <__adddf3+0x240>
 80a4bec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4bf0:	bf08      	it	eq
 80a4bf2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4bf6:	f150 0000 	adcs.w	r0, r0, #0
 80a4bfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4bfe:	ea41 0105 	orr.w	r1, r1, r5
 80a4c02:	bd30      	pop	{r4, r5, pc}
 80a4c04:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a4c08:	4140      	adcs	r0, r0
 80a4c0a:	eb41 0101 	adc.w	r1, r1, r1
 80a4c0e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4c12:	f1a4 0401 	sub.w	r4, r4, #1
 80a4c16:	d1e9      	bne.n	80a4bec <__adddf3+0x10c>
 80a4c18:	f091 0f00 	teq	r1, #0
 80a4c1c:	bf04      	itt	eq
 80a4c1e:	4601      	moveq	r1, r0
 80a4c20:	2000      	moveq	r0, #0
 80a4c22:	fab1 f381 	clz	r3, r1
 80a4c26:	bf08      	it	eq
 80a4c28:	3320      	addeq	r3, #32
 80a4c2a:	f1a3 030b 	sub.w	r3, r3, #11
 80a4c2e:	f1b3 0220 	subs.w	r2, r3, #32
 80a4c32:	da0c      	bge.n	80a4c4e <__adddf3+0x16e>
 80a4c34:	320c      	adds	r2, #12
 80a4c36:	dd08      	ble.n	80a4c4a <__adddf3+0x16a>
 80a4c38:	f102 0c14 	add.w	ip, r2, #20
 80a4c3c:	f1c2 020c 	rsb	r2, r2, #12
 80a4c40:	fa01 f00c 	lsl.w	r0, r1, ip
 80a4c44:	fa21 f102 	lsr.w	r1, r1, r2
 80a4c48:	e00c      	b.n	80a4c64 <__adddf3+0x184>
 80a4c4a:	f102 0214 	add.w	r2, r2, #20
 80a4c4e:	bfd8      	it	le
 80a4c50:	f1c2 0c20 	rsble	ip, r2, #32
 80a4c54:	fa01 f102 	lsl.w	r1, r1, r2
 80a4c58:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a4c5c:	bfdc      	itt	le
 80a4c5e:	ea41 010c 	orrle.w	r1, r1, ip
 80a4c62:	4090      	lslle	r0, r2
 80a4c64:	1ae4      	subs	r4, r4, r3
 80a4c66:	bfa2      	ittt	ge
 80a4c68:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a4c6c:	4329      	orrge	r1, r5
 80a4c6e:	bd30      	popge	{r4, r5, pc}
 80a4c70:	ea6f 0404 	mvn.w	r4, r4
 80a4c74:	3c1f      	subs	r4, #31
 80a4c76:	da1c      	bge.n	80a4cb2 <__adddf3+0x1d2>
 80a4c78:	340c      	adds	r4, #12
 80a4c7a:	dc0e      	bgt.n	80a4c9a <__adddf3+0x1ba>
 80a4c7c:	f104 0414 	add.w	r4, r4, #20
 80a4c80:	f1c4 0220 	rsb	r2, r4, #32
 80a4c84:	fa20 f004 	lsr.w	r0, r0, r4
 80a4c88:	fa01 f302 	lsl.w	r3, r1, r2
 80a4c8c:	ea40 0003 	orr.w	r0, r0, r3
 80a4c90:	fa21 f304 	lsr.w	r3, r1, r4
 80a4c94:	ea45 0103 	orr.w	r1, r5, r3
 80a4c98:	bd30      	pop	{r4, r5, pc}
 80a4c9a:	f1c4 040c 	rsb	r4, r4, #12
 80a4c9e:	f1c4 0220 	rsb	r2, r4, #32
 80a4ca2:	fa20 f002 	lsr.w	r0, r0, r2
 80a4ca6:	fa01 f304 	lsl.w	r3, r1, r4
 80a4caa:	ea40 0003 	orr.w	r0, r0, r3
 80a4cae:	4629      	mov	r1, r5
 80a4cb0:	bd30      	pop	{r4, r5, pc}
 80a4cb2:	fa21 f004 	lsr.w	r0, r1, r4
 80a4cb6:	4629      	mov	r1, r5
 80a4cb8:	bd30      	pop	{r4, r5, pc}
 80a4cba:	f094 0f00 	teq	r4, #0
 80a4cbe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a4cc2:	bf06      	itte	eq
 80a4cc4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a4cc8:	3401      	addeq	r4, #1
 80a4cca:	3d01      	subne	r5, #1
 80a4ccc:	e74e      	b.n	80a4b6c <__adddf3+0x8c>
 80a4cce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4cd2:	bf18      	it	ne
 80a4cd4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4cd8:	d029      	beq.n	80a4d2e <__adddf3+0x24e>
 80a4cda:	ea94 0f05 	teq	r4, r5
 80a4cde:	bf08      	it	eq
 80a4ce0:	ea90 0f02 	teqeq	r0, r2
 80a4ce4:	d005      	beq.n	80a4cf2 <__adddf3+0x212>
 80a4ce6:	ea54 0c00 	orrs.w	ip, r4, r0
 80a4cea:	bf04      	itt	eq
 80a4cec:	4619      	moveq	r1, r3
 80a4cee:	4610      	moveq	r0, r2
 80a4cf0:	bd30      	pop	{r4, r5, pc}
 80a4cf2:	ea91 0f03 	teq	r1, r3
 80a4cf6:	bf1e      	ittt	ne
 80a4cf8:	2100      	movne	r1, #0
 80a4cfa:	2000      	movne	r0, #0
 80a4cfc:	bd30      	popne	{r4, r5, pc}
 80a4cfe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a4d02:	d105      	bne.n	80a4d10 <__adddf3+0x230>
 80a4d04:	0040      	lsls	r0, r0, #1
 80a4d06:	4149      	adcs	r1, r1
 80a4d08:	bf28      	it	cs
 80a4d0a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a4d0e:	bd30      	pop	{r4, r5, pc}
 80a4d10:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a4d14:	bf3c      	itt	cc
 80a4d16:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a4d1a:	bd30      	popcc	{r4, r5, pc}
 80a4d1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4d20:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a4d24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4d28:	f04f 0000 	mov.w	r0, #0
 80a4d2c:	bd30      	pop	{r4, r5, pc}
 80a4d2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4d32:	bf1a      	itte	ne
 80a4d34:	4619      	movne	r1, r3
 80a4d36:	4610      	movne	r0, r2
 80a4d38:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a4d3c:	bf1c      	itt	ne
 80a4d3e:	460b      	movne	r3, r1
 80a4d40:	4602      	movne	r2, r0
 80a4d42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4d46:	bf06      	itte	eq
 80a4d48:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a4d4c:	ea91 0f03 	teqeq	r1, r3
 80a4d50:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a4d54:	bd30      	pop	{r4, r5, pc}
 80a4d56:	bf00      	nop

080a4d58 <__aeabi_ui2d>:
 80a4d58:	f090 0f00 	teq	r0, #0
 80a4d5c:	bf04      	itt	eq
 80a4d5e:	2100      	moveq	r1, #0
 80a4d60:	4770      	bxeq	lr
 80a4d62:	b530      	push	{r4, r5, lr}
 80a4d64:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4d68:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4d6c:	f04f 0500 	mov.w	r5, #0
 80a4d70:	f04f 0100 	mov.w	r1, #0
 80a4d74:	e750      	b.n	80a4c18 <__adddf3+0x138>
 80a4d76:	bf00      	nop

080a4d78 <__aeabi_i2d>:
 80a4d78:	f090 0f00 	teq	r0, #0
 80a4d7c:	bf04      	itt	eq
 80a4d7e:	2100      	moveq	r1, #0
 80a4d80:	4770      	bxeq	lr
 80a4d82:	b530      	push	{r4, r5, lr}
 80a4d84:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4d88:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4d8c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a4d90:	bf48      	it	mi
 80a4d92:	4240      	negmi	r0, r0
 80a4d94:	f04f 0100 	mov.w	r1, #0
 80a4d98:	e73e      	b.n	80a4c18 <__adddf3+0x138>
 80a4d9a:	bf00      	nop

080a4d9c <__aeabi_f2d>:
 80a4d9c:	0042      	lsls	r2, r0, #1
 80a4d9e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a4da2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4da6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a4daa:	bf1f      	itttt	ne
 80a4dac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a4db0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4db4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a4db8:	4770      	bxne	lr
 80a4dba:	f092 0f00 	teq	r2, #0
 80a4dbe:	bf14      	ite	ne
 80a4dc0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4dc4:	4770      	bxeq	lr
 80a4dc6:	b530      	push	{r4, r5, lr}
 80a4dc8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a4dcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4dd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4dd4:	e720      	b.n	80a4c18 <__adddf3+0x138>
 80a4dd6:	bf00      	nop

080a4dd8 <__aeabi_ul2d>:
 80a4dd8:	ea50 0201 	orrs.w	r2, r0, r1
 80a4ddc:	bf08      	it	eq
 80a4dde:	4770      	bxeq	lr
 80a4de0:	b530      	push	{r4, r5, lr}
 80a4de2:	f04f 0500 	mov.w	r5, #0
 80a4de6:	e00a      	b.n	80a4dfe <__aeabi_l2d+0x16>

080a4de8 <__aeabi_l2d>:
 80a4de8:	ea50 0201 	orrs.w	r2, r0, r1
 80a4dec:	bf08      	it	eq
 80a4dee:	4770      	bxeq	lr
 80a4df0:	b530      	push	{r4, r5, lr}
 80a4df2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a4df6:	d502      	bpl.n	80a4dfe <__aeabi_l2d+0x16>
 80a4df8:	4240      	negs	r0, r0
 80a4dfa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4dfe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4e02:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4e06:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a4e0a:	f43f aedc 	beq.w	80a4bc6 <__adddf3+0xe6>
 80a4e0e:	f04f 0203 	mov.w	r2, #3
 80a4e12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4e16:	bf18      	it	ne
 80a4e18:	3203      	addne	r2, #3
 80a4e1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4e1e:	bf18      	it	ne
 80a4e20:	3203      	addne	r2, #3
 80a4e22:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a4e26:	f1c2 0320 	rsb	r3, r2, #32
 80a4e2a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a4e2e:	fa20 f002 	lsr.w	r0, r0, r2
 80a4e32:	fa01 fe03 	lsl.w	lr, r1, r3
 80a4e36:	ea40 000e 	orr.w	r0, r0, lr
 80a4e3a:	fa21 f102 	lsr.w	r1, r1, r2
 80a4e3e:	4414      	add	r4, r2
 80a4e40:	e6c1      	b.n	80a4bc6 <__adddf3+0xe6>
 80a4e42:	bf00      	nop

080a4e44 <__aeabi_dmul>:
 80a4e44:	b570      	push	{r4, r5, r6, lr}
 80a4e46:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4e4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4e4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4e52:	bf1d      	ittte	ne
 80a4e54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4e58:	ea94 0f0c 	teqne	r4, ip
 80a4e5c:	ea95 0f0c 	teqne	r5, ip
 80a4e60:	f000 f8de 	bleq	80a5020 <__aeabi_dmul+0x1dc>
 80a4e64:	442c      	add	r4, r5
 80a4e66:	ea81 0603 	eor.w	r6, r1, r3
 80a4e6a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a4e6e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a4e72:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a4e76:	bf18      	it	ne
 80a4e78:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a4e7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4e80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a4e84:	d038      	beq.n	80a4ef8 <__aeabi_dmul+0xb4>
 80a4e86:	fba0 ce02 	umull	ip, lr, r0, r2
 80a4e8a:	f04f 0500 	mov.w	r5, #0
 80a4e8e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a4e92:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a4e96:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a4e9a:	f04f 0600 	mov.w	r6, #0
 80a4e9e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a4ea2:	f09c 0f00 	teq	ip, #0
 80a4ea6:	bf18      	it	ne
 80a4ea8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a4eac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4eb0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a4eb4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a4eb8:	d204      	bcs.n	80a4ec4 <__aeabi_dmul+0x80>
 80a4eba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a4ebe:	416d      	adcs	r5, r5
 80a4ec0:	eb46 0606 	adc.w	r6, r6, r6
 80a4ec4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a4ec8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a4ecc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a4ed0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a4ed4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a4ed8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4edc:	bf88      	it	hi
 80a4ede:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4ee2:	d81e      	bhi.n	80a4f22 <__aeabi_dmul+0xde>
 80a4ee4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a4ee8:	bf08      	it	eq
 80a4eea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a4eee:	f150 0000 	adcs.w	r0, r0, #0
 80a4ef2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4ef6:	bd70      	pop	{r4, r5, r6, pc}
 80a4ef8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a4efc:	ea46 0101 	orr.w	r1, r6, r1
 80a4f00:	ea40 0002 	orr.w	r0, r0, r2
 80a4f04:	ea81 0103 	eor.w	r1, r1, r3
 80a4f08:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a4f0c:	bfc2      	ittt	gt
 80a4f0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4f12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4f16:	bd70      	popgt	{r4, r5, r6, pc}
 80a4f18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4f1c:	f04f 0e00 	mov.w	lr, #0
 80a4f20:	3c01      	subs	r4, #1
 80a4f22:	f300 80ab 	bgt.w	80a507c <__aeabi_dmul+0x238>
 80a4f26:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a4f2a:	bfde      	ittt	le
 80a4f2c:	2000      	movle	r0, #0
 80a4f2e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a4f32:	bd70      	pople	{r4, r5, r6, pc}
 80a4f34:	f1c4 0400 	rsb	r4, r4, #0
 80a4f38:	3c20      	subs	r4, #32
 80a4f3a:	da35      	bge.n	80a4fa8 <__aeabi_dmul+0x164>
 80a4f3c:	340c      	adds	r4, #12
 80a4f3e:	dc1b      	bgt.n	80a4f78 <__aeabi_dmul+0x134>
 80a4f40:	f104 0414 	add.w	r4, r4, #20
 80a4f44:	f1c4 0520 	rsb	r5, r4, #32
 80a4f48:	fa00 f305 	lsl.w	r3, r0, r5
 80a4f4c:	fa20 f004 	lsr.w	r0, r0, r4
 80a4f50:	fa01 f205 	lsl.w	r2, r1, r5
 80a4f54:	ea40 0002 	orr.w	r0, r0, r2
 80a4f58:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a4f5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4f60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4f64:	fa21 f604 	lsr.w	r6, r1, r4
 80a4f68:	eb42 0106 	adc.w	r1, r2, r6
 80a4f6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4f70:	bf08      	it	eq
 80a4f72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4f76:	bd70      	pop	{r4, r5, r6, pc}
 80a4f78:	f1c4 040c 	rsb	r4, r4, #12
 80a4f7c:	f1c4 0520 	rsb	r5, r4, #32
 80a4f80:	fa00 f304 	lsl.w	r3, r0, r4
 80a4f84:	fa20 f005 	lsr.w	r0, r0, r5
 80a4f88:	fa01 f204 	lsl.w	r2, r1, r4
 80a4f8c:	ea40 0002 	orr.w	r0, r0, r2
 80a4f90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4f94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4f98:	f141 0100 	adc.w	r1, r1, #0
 80a4f9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4fa0:	bf08      	it	eq
 80a4fa2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4fa6:	bd70      	pop	{r4, r5, r6, pc}
 80a4fa8:	f1c4 0520 	rsb	r5, r4, #32
 80a4fac:	fa00 f205 	lsl.w	r2, r0, r5
 80a4fb0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a4fb4:	fa20 f304 	lsr.w	r3, r0, r4
 80a4fb8:	fa01 f205 	lsl.w	r2, r1, r5
 80a4fbc:	ea43 0302 	orr.w	r3, r3, r2
 80a4fc0:	fa21 f004 	lsr.w	r0, r1, r4
 80a4fc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4fc8:	fa21 f204 	lsr.w	r2, r1, r4
 80a4fcc:	ea20 0002 	bic.w	r0, r0, r2
 80a4fd0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4fd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4fd8:	bf08      	it	eq
 80a4fda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4fde:	bd70      	pop	{r4, r5, r6, pc}
 80a4fe0:	f094 0f00 	teq	r4, #0
 80a4fe4:	d10f      	bne.n	80a5006 <__aeabi_dmul+0x1c2>
 80a4fe6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a4fea:	0040      	lsls	r0, r0, #1
 80a4fec:	eb41 0101 	adc.w	r1, r1, r1
 80a4ff0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4ff4:	bf08      	it	eq
 80a4ff6:	3c01      	subeq	r4, #1
 80a4ff8:	d0f7      	beq.n	80a4fea <__aeabi_dmul+0x1a6>
 80a4ffa:	ea41 0106 	orr.w	r1, r1, r6
 80a4ffe:	f095 0f00 	teq	r5, #0
 80a5002:	bf18      	it	ne
 80a5004:	4770      	bxne	lr
 80a5006:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a500a:	0052      	lsls	r2, r2, #1
 80a500c:	eb43 0303 	adc.w	r3, r3, r3
 80a5010:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a5014:	bf08      	it	eq
 80a5016:	3d01      	subeq	r5, #1
 80a5018:	d0f7      	beq.n	80a500a <__aeabi_dmul+0x1c6>
 80a501a:	ea43 0306 	orr.w	r3, r3, r6
 80a501e:	4770      	bx	lr
 80a5020:	ea94 0f0c 	teq	r4, ip
 80a5024:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5028:	bf18      	it	ne
 80a502a:	ea95 0f0c 	teqne	r5, ip
 80a502e:	d00c      	beq.n	80a504a <__aeabi_dmul+0x206>
 80a5030:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5034:	bf18      	it	ne
 80a5036:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a503a:	d1d1      	bne.n	80a4fe0 <__aeabi_dmul+0x19c>
 80a503c:	ea81 0103 	eor.w	r1, r1, r3
 80a5040:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5044:	f04f 0000 	mov.w	r0, #0
 80a5048:	bd70      	pop	{r4, r5, r6, pc}
 80a504a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a504e:	bf06      	itte	eq
 80a5050:	4610      	moveq	r0, r2
 80a5052:	4619      	moveq	r1, r3
 80a5054:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5058:	d019      	beq.n	80a508e <__aeabi_dmul+0x24a>
 80a505a:	ea94 0f0c 	teq	r4, ip
 80a505e:	d102      	bne.n	80a5066 <__aeabi_dmul+0x222>
 80a5060:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a5064:	d113      	bne.n	80a508e <__aeabi_dmul+0x24a>
 80a5066:	ea95 0f0c 	teq	r5, ip
 80a506a:	d105      	bne.n	80a5078 <__aeabi_dmul+0x234>
 80a506c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a5070:	bf1c      	itt	ne
 80a5072:	4610      	movne	r0, r2
 80a5074:	4619      	movne	r1, r3
 80a5076:	d10a      	bne.n	80a508e <__aeabi_dmul+0x24a>
 80a5078:	ea81 0103 	eor.w	r1, r1, r3
 80a507c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5080:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5084:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5088:	f04f 0000 	mov.w	r0, #0
 80a508c:	bd70      	pop	{r4, r5, r6, pc}
 80a508e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5092:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a5096:	bd70      	pop	{r4, r5, r6, pc}

080a5098 <__aeabi_ddiv>:
 80a5098:	b570      	push	{r4, r5, r6, lr}
 80a509a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a509e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a50a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a50a6:	bf1d      	ittte	ne
 80a50a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a50ac:	ea94 0f0c 	teqne	r4, ip
 80a50b0:	ea95 0f0c 	teqne	r5, ip
 80a50b4:	f000 f8a7 	bleq	80a5206 <__aeabi_ddiv+0x16e>
 80a50b8:	eba4 0405 	sub.w	r4, r4, r5
 80a50bc:	ea81 0e03 	eor.w	lr, r1, r3
 80a50c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a50c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a50c8:	f000 8088 	beq.w	80a51dc <__aeabi_ddiv+0x144>
 80a50cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a50d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a50d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a50d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a50dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a50e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a50e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a50e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a50ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a50f0:	429d      	cmp	r5, r3
 80a50f2:	bf08      	it	eq
 80a50f4:	4296      	cmpeq	r6, r2
 80a50f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a50fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a50fe:	d202      	bcs.n	80a5106 <__aeabi_ddiv+0x6e>
 80a5100:	085b      	lsrs	r3, r3, #1
 80a5102:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5106:	1ab6      	subs	r6, r6, r2
 80a5108:	eb65 0503 	sbc.w	r5, r5, r3
 80a510c:	085b      	lsrs	r3, r3, #1
 80a510e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5112:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a5116:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a511a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a511e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5122:	bf22      	ittt	cs
 80a5124:	1ab6      	subcs	r6, r6, r2
 80a5126:	4675      	movcs	r5, lr
 80a5128:	ea40 000c 	orrcs.w	r0, r0, ip
 80a512c:	085b      	lsrs	r3, r3, #1
 80a512e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5132:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5136:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a513a:	bf22      	ittt	cs
 80a513c:	1ab6      	subcs	r6, r6, r2
 80a513e:	4675      	movcs	r5, lr
 80a5140:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5144:	085b      	lsrs	r3, r3, #1
 80a5146:	ea4f 0232 	mov.w	r2, r2, rrx
 80a514a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a514e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5152:	bf22      	ittt	cs
 80a5154:	1ab6      	subcs	r6, r6, r2
 80a5156:	4675      	movcs	r5, lr
 80a5158:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a515c:	085b      	lsrs	r3, r3, #1
 80a515e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5162:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5166:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a516a:	bf22      	ittt	cs
 80a516c:	1ab6      	subcs	r6, r6, r2
 80a516e:	4675      	movcs	r5, lr
 80a5170:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5174:	ea55 0e06 	orrs.w	lr, r5, r6
 80a5178:	d018      	beq.n	80a51ac <__aeabi_ddiv+0x114>
 80a517a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a517e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a5182:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a5186:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a518a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a518e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a5192:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a5196:	d1c0      	bne.n	80a511a <__aeabi_ddiv+0x82>
 80a5198:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a519c:	d10b      	bne.n	80a51b6 <__aeabi_ddiv+0x11e>
 80a519e:	ea41 0100 	orr.w	r1, r1, r0
 80a51a2:	f04f 0000 	mov.w	r0, #0
 80a51a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a51aa:	e7b6      	b.n	80a511a <__aeabi_ddiv+0x82>
 80a51ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a51b0:	bf04      	itt	eq
 80a51b2:	4301      	orreq	r1, r0
 80a51b4:	2000      	moveq	r0, #0
 80a51b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a51ba:	bf88      	it	hi
 80a51bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a51c0:	f63f aeaf 	bhi.w	80a4f22 <__aeabi_dmul+0xde>
 80a51c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80a51c8:	bf04      	itt	eq
 80a51ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a51ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a51d2:	f150 0000 	adcs.w	r0, r0, #0
 80a51d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a51da:	bd70      	pop	{r4, r5, r6, pc}
 80a51dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a51e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a51e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a51e8:	bfc2      	ittt	gt
 80a51ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a51ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a51f2:	bd70      	popgt	{r4, r5, r6, pc}
 80a51f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a51f8:	f04f 0e00 	mov.w	lr, #0
 80a51fc:	3c01      	subs	r4, #1
 80a51fe:	e690      	b.n	80a4f22 <__aeabi_dmul+0xde>
 80a5200:	ea45 0e06 	orr.w	lr, r5, r6
 80a5204:	e68d      	b.n	80a4f22 <__aeabi_dmul+0xde>
 80a5206:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a520a:	ea94 0f0c 	teq	r4, ip
 80a520e:	bf08      	it	eq
 80a5210:	ea95 0f0c 	teqeq	r5, ip
 80a5214:	f43f af3b 	beq.w	80a508e <__aeabi_dmul+0x24a>
 80a5218:	ea94 0f0c 	teq	r4, ip
 80a521c:	d10a      	bne.n	80a5234 <__aeabi_ddiv+0x19c>
 80a521e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a5222:	f47f af34 	bne.w	80a508e <__aeabi_dmul+0x24a>
 80a5226:	ea95 0f0c 	teq	r5, ip
 80a522a:	f47f af25 	bne.w	80a5078 <__aeabi_dmul+0x234>
 80a522e:	4610      	mov	r0, r2
 80a5230:	4619      	mov	r1, r3
 80a5232:	e72c      	b.n	80a508e <__aeabi_dmul+0x24a>
 80a5234:	ea95 0f0c 	teq	r5, ip
 80a5238:	d106      	bne.n	80a5248 <__aeabi_ddiv+0x1b0>
 80a523a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a523e:	f43f aefd 	beq.w	80a503c <__aeabi_dmul+0x1f8>
 80a5242:	4610      	mov	r0, r2
 80a5244:	4619      	mov	r1, r3
 80a5246:	e722      	b.n	80a508e <__aeabi_dmul+0x24a>
 80a5248:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a524c:	bf18      	it	ne
 80a524e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5252:	f47f aec5 	bne.w	80a4fe0 <__aeabi_dmul+0x19c>
 80a5256:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a525a:	f47f af0d 	bne.w	80a5078 <__aeabi_dmul+0x234>
 80a525e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a5262:	f47f aeeb 	bne.w	80a503c <__aeabi_dmul+0x1f8>
 80a5266:	e712      	b.n	80a508e <__aeabi_dmul+0x24a>

080a5268 <__gedf2>:
 80a5268:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a526c:	e006      	b.n	80a527c <__cmpdf2+0x4>
 80a526e:	bf00      	nop

080a5270 <__ledf2>:
 80a5270:	f04f 0c01 	mov.w	ip, #1
 80a5274:	e002      	b.n	80a527c <__cmpdf2+0x4>
 80a5276:	bf00      	nop

080a5278 <__cmpdf2>:
 80a5278:	f04f 0c01 	mov.w	ip, #1
 80a527c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5280:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5284:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5288:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a528c:	bf18      	it	ne
 80a528e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a5292:	d01b      	beq.n	80a52cc <__cmpdf2+0x54>
 80a5294:	b001      	add	sp, #4
 80a5296:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a529a:	bf0c      	ite	eq
 80a529c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a52a0:	ea91 0f03 	teqne	r1, r3
 80a52a4:	bf02      	ittt	eq
 80a52a6:	ea90 0f02 	teqeq	r0, r2
 80a52aa:	2000      	moveq	r0, #0
 80a52ac:	4770      	bxeq	lr
 80a52ae:	f110 0f00 	cmn.w	r0, #0
 80a52b2:	ea91 0f03 	teq	r1, r3
 80a52b6:	bf58      	it	pl
 80a52b8:	4299      	cmppl	r1, r3
 80a52ba:	bf08      	it	eq
 80a52bc:	4290      	cmpeq	r0, r2
 80a52be:	bf2c      	ite	cs
 80a52c0:	17d8      	asrcs	r0, r3, #31
 80a52c2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a52c6:	f040 0001 	orr.w	r0, r0, #1
 80a52ca:	4770      	bx	lr
 80a52cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a52d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a52d4:	d102      	bne.n	80a52dc <__cmpdf2+0x64>
 80a52d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a52da:	d107      	bne.n	80a52ec <__cmpdf2+0x74>
 80a52dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a52e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a52e4:	d1d6      	bne.n	80a5294 <__cmpdf2+0x1c>
 80a52e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a52ea:	d0d3      	beq.n	80a5294 <__cmpdf2+0x1c>
 80a52ec:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a52f0:	4770      	bx	lr
 80a52f2:	bf00      	nop

080a52f4 <__aeabi_cdrcmple>:
 80a52f4:	4684      	mov	ip, r0
 80a52f6:	4610      	mov	r0, r2
 80a52f8:	4662      	mov	r2, ip
 80a52fa:	468c      	mov	ip, r1
 80a52fc:	4619      	mov	r1, r3
 80a52fe:	4663      	mov	r3, ip
 80a5300:	e000      	b.n	80a5304 <__aeabi_cdcmpeq>
 80a5302:	bf00      	nop

080a5304 <__aeabi_cdcmpeq>:
 80a5304:	b501      	push	{r0, lr}
 80a5306:	f7ff ffb7 	bl	80a5278 <__cmpdf2>
 80a530a:	2800      	cmp	r0, #0
 80a530c:	bf48      	it	mi
 80a530e:	f110 0f00 	cmnmi.w	r0, #0
 80a5312:	bd01      	pop	{r0, pc}

080a5314 <__aeabi_dcmpeq>:
 80a5314:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5318:	f7ff fff4 	bl	80a5304 <__aeabi_cdcmpeq>
 80a531c:	bf0c      	ite	eq
 80a531e:	2001      	moveq	r0, #1
 80a5320:	2000      	movne	r0, #0
 80a5322:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5326:	bf00      	nop

080a5328 <__aeabi_dcmplt>:
 80a5328:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a532c:	f7ff ffea 	bl	80a5304 <__aeabi_cdcmpeq>
 80a5330:	bf34      	ite	cc
 80a5332:	2001      	movcc	r0, #1
 80a5334:	2000      	movcs	r0, #0
 80a5336:	f85d fb08 	ldr.w	pc, [sp], #8
 80a533a:	bf00      	nop

080a533c <__aeabi_dcmple>:
 80a533c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5340:	f7ff ffe0 	bl	80a5304 <__aeabi_cdcmpeq>
 80a5344:	bf94      	ite	ls
 80a5346:	2001      	movls	r0, #1
 80a5348:	2000      	movhi	r0, #0
 80a534a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a534e:	bf00      	nop

080a5350 <__aeabi_dcmpge>:
 80a5350:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5354:	f7ff ffce 	bl	80a52f4 <__aeabi_cdrcmple>
 80a5358:	bf94      	ite	ls
 80a535a:	2001      	movls	r0, #1
 80a535c:	2000      	movhi	r0, #0
 80a535e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5362:	bf00      	nop

080a5364 <__aeabi_dcmpgt>:
 80a5364:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5368:	f7ff ffc4 	bl	80a52f4 <__aeabi_cdrcmple>
 80a536c:	bf34      	ite	cc
 80a536e:	2001      	movcc	r0, #1
 80a5370:	2000      	movcs	r0, #0
 80a5372:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5376:	bf00      	nop

080a5378 <__aeabi_dcmpun>:
 80a5378:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a537c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5380:	d102      	bne.n	80a5388 <__aeabi_dcmpun+0x10>
 80a5382:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a5386:	d10a      	bne.n	80a539e <__aeabi_dcmpun+0x26>
 80a5388:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a538c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5390:	d102      	bne.n	80a5398 <__aeabi_dcmpun+0x20>
 80a5392:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a5396:	d102      	bne.n	80a539e <__aeabi_dcmpun+0x26>
 80a5398:	f04f 0000 	mov.w	r0, #0
 80a539c:	4770      	bx	lr
 80a539e:	f04f 0001 	mov.w	r0, #1
 80a53a2:	4770      	bx	lr

080a53a4 <__aeabi_d2iz>:
 80a53a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a53a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a53ac:	d215      	bcs.n	80a53da <__aeabi_d2iz+0x36>
 80a53ae:	d511      	bpl.n	80a53d4 <__aeabi_d2iz+0x30>
 80a53b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a53b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a53b8:	d912      	bls.n	80a53e0 <__aeabi_d2iz+0x3c>
 80a53ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a53be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a53c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a53c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a53ca:	fa23 f002 	lsr.w	r0, r3, r2
 80a53ce:	bf18      	it	ne
 80a53d0:	4240      	negne	r0, r0
 80a53d2:	4770      	bx	lr
 80a53d4:	f04f 0000 	mov.w	r0, #0
 80a53d8:	4770      	bx	lr
 80a53da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a53de:	d105      	bne.n	80a53ec <__aeabi_d2iz+0x48>
 80a53e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a53e4:	bf08      	it	eq
 80a53e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a53ea:	4770      	bx	lr
 80a53ec:	f04f 0000 	mov.w	r0, #0
 80a53f0:	4770      	bx	lr
 80a53f2:	bf00      	nop

080a53f4 <__aeabi_d2uiz>:
 80a53f4:	004a      	lsls	r2, r1, #1
 80a53f6:	d211      	bcs.n	80a541c <__aeabi_d2uiz+0x28>
 80a53f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a53fc:	d211      	bcs.n	80a5422 <__aeabi_d2uiz+0x2e>
 80a53fe:	d50d      	bpl.n	80a541c <__aeabi_d2uiz+0x28>
 80a5400:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5404:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5408:	d40e      	bmi.n	80a5428 <__aeabi_d2uiz+0x34>
 80a540a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a540e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5412:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5416:	fa23 f002 	lsr.w	r0, r3, r2
 80a541a:	4770      	bx	lr
 80a541c:	f04f 0000 	mov.w	r0, #0
 80a5420:	4770      	bx	lr
 80a5422:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5426:	d102      	bne.n	80a542e <__aeabi_d2uiz+0x3a>
 80a5428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a542c:	4770      	bx	lr
 80a542e:	f04f 0000 	mov.w	r0, #0
 80a5432:	4770      	bx	lr

080a5434 <__aeabi_d2f>:
 80a5434:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5438:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a543c:	bf24      	itt	cs
 80a543e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a5442:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a5446:	d90d      	bls.n	80a5464 <__aeabi_d2f+0x30>
 80a5448:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a544c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a5450:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a5454:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a5458:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a545c:	bf08      	it	eq
 80a545e:	f020 0001 	biceq.w	r0, r0, #1
 80a5462:	4770      	bx	lr
 80a5464:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a5468:	d121      	bne.n	80a54ae <__aeabi_d2f+0x7a>
 80a546a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a546e:	bfbc      	itt	lt
 80a5470:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a5474:	4770      	bxlt	lr
 80a5476:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a547a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a547e:	f1c2 0218 	rsb	r2, r2, #24
 80a5482:	f1c2 0c20 	rsb	ip, r2, #32
 80a5486:	fa10 f30c 	lsls.w	r3, r0, ip
 80a548a:	fa20 f002 	lsr.w	r0, r0, r2
 80a548e:	bf18      	it	ne
 80a5490:	f040 0001 	orrne.w	r0, r0, #1
 80a5494:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5498:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a549c:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a54a0:	ea40 000c 	orr.w	r0, r0, ip
 80a54a4:	fa23 f302 	lsr.w	r3, r3, r2
 80a54a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a54ac:	e7cc      	b.n	80a5448 <__aeabi_d2f+0x14>
 80a54ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a54b2:	d107      	bne.n	80a54c4 <__aeabi_d2f+0x90>
 80a54b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a54b8:	bf1e      	ittt	ne
 80a54ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a54be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a54c2:	4770      	bxne	lr
 80a54c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a54c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a54cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a54d0:	4770      	bx	lr
 80a54d2:	bf00      	nop

080a54d4 <__aeabi_frsub>:
 80a54d4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a54d8:	e002      	b.n	80a54e0 <__addsf3>
 80a54da:	bf00      	nop

080a54dc <__aeabi_fsub>:
 80a54dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a54e0 <__addsf3>:
 80a54e0:	0042      	lsls	r2, r0, #1
 80a54e2:	bf1f      	itttt	ne
 80a54e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a54e8:	ea92 0f03 	teqne	r2, r3
 80a54ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a54f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a54f4:	d06a      	beq.n	80a55cc <__addsf3+0xec>
 80a54f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a54fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a54fe:	bfc1      	itttt	gt
 80a5500:	18d2      	addgt	r2, r2, r3
 80a5502:	4041      	eorgt	r1, r0
 80a5504:	4048      	eorgt	r0, r1
 80a5506:	4041      	eorgt	r1, r0
 80a5508:	bfb8      	it	lt
 80a550a:	425b      	neglt	r3, r3
 80a550c:	2b19      	cmp	r3, #25
 80a550e:	bf88      	it	hi
 80a5510:	4770      	bxhi	lr
 80a5512:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a5516:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a551a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a551e:	bf18      	it	ne
 80a5520:	4240      	negne	r0, r0
 80a5522:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5526:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a552a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a552e:	bf18      	it	ne
 80a5530:	4249      	negne	r1, r1
 80a5532:	ea92 0f03 	teq	r2, r3
 80a5536:	d03f      	beq.n	80a55b8 <__addsf3+0xd8>
 80a5538:	f1a2 0201 	sub.w	r2, r2, #1
 80a553c:	fa41 fc03 	asr.w	ip, r1, r3
 80a5540:	eb10 000c 	adds.w	r0, r0, ip
 80a5544:	f1c3 0320 	rsb	r3, r3, #32
 80a5548:	fa01 f103 	lsl.w	r1, r1, r3
 80a554c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5550:	d502      	bpl.n	80a5558 <__addsf3+0x78>
 80a5552:	4249      	negs	r1, r1
 80a5554:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a5558:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a555c:	d313      	bcc.n	80a5586 <__addsf3+0xa6>
 80a555e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a5562:	d306      	bcc.n	80a5572 <__addsf3+0x92>
 80a5564:	0840      	lsrs	r0, r0, #1
 80a5566:	ea4f 0131 	mov.w	r1, r1, rrx
 80a556a:	f102 0201 	add.w	r2, r2, #1
 80a556e:	2afe      	cmp	r2, #254	; 0xfe
 80a5570:	d251      	bcs.n	80a5616 <__addsf3+0x136>
 80a5572:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a5576:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a557a:	bf08      	it	eq
 80a557c:	f020 0001 	biceq.w	r0, r0, #1
 80a5580:	ea40 0003 	orr.w	r0, r0, r3
 80a5584:	4770      	bx	lr
 80a5586:	0049      	lsls	r1, r1, #1
 80a5588:	eb40 0000 	adc.w	r0, r0, r0
 80a558c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a5590:	f1a2 0201 	sub.w	r2, r2, #1
 80a5594:	d1ed      	bne.n	80a5572 <__addsf3+0x92>
 80a5596:	fab0 fc80 	clz	ip, r0
 80a559a:	f1ac 0c08 	sub.w	ip, ip, #8
 80a559e:	ebb2 020c 	subs.w	r2, r2, ip
 80a55a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80a55a6:	bfaa      	itet	ge
 80a55a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a55ac:	4252      	neglt	r2, r2
 80a55ae:	4318      	orrge	r0, r3
 80a55b0:	bfbc      	itt	lt
 80a55b2:	40d0      	lsrlt	r0, r2
 80a55b4:	4318      	orrlt	r0, r3
 80a55b6:	4770      	bx	lr
 80a55b8:	f092 0f00 	teq	r2, #0
 80a55bc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a55c0:	bf06      	itte	eq
 80a55c2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a55c6:	3201      	addeq	r2, #1
 80a55c8:	3b01      	subne	r3, #1
 80a55ca:	e7b5      	b.n	80a5538 <__addsf3+0x58>
 80a55cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a55d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a55d4:	bf18      	it	ne
 80a55d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a55da:	d021      	beq.n	80a5620 <__addsf3+0x140>
 80a55dc:	ea92 0f03 	teq	r2, r3
 80a55e0:	d004      	beq.n	80a55ec <__addsf3+0x10c>
 80a55e2:	f092 0f00 	teq	r2, #0
 80a55e6:	bf08      	it	eq
 80a55e8:	4608      	moveq	r0, r1
 80a55ea:	4770      	bx	lr
 80a55ec:	ea90 0f01 	teq	r0, r1
 80a55f0:	bf1c      	itt	ne
 80a55f2:	2000      	movne	r0, #0
 80a55f4:	4770      	bxne	lr
 80a55f6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a55fa:	d104      	bne.n	80a5606 <__addsf3+0x126>
 80a55fc:	0040      	lsls	r0, r0, #1
 80a55fe:	bf28      	it	cs
 80a5600:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a5604:	4770      	bx	lr
 80a5606:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a560a:	bf3c      	itt	cc
 80a560c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a5610:	4770      	bxcc	lr
 80a5612:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5616:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a561a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a561e:	4770      	bx	lr
 80a5620:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a5624:	bf16      	itet	ne
 80a5626:	4608      	movne	r0, r1
 80a5628:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a562c:	4601      	movne	r1, r0
 80a562e:	0242      	lsls	r2, r0, #9
 80a5630:	bf06      	itte	eq
 80a5632:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a5636:	ea90 0f01 	teqeq	r0, r1
 80a563a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a563e:	4770      	bx	lr

080a5640 <__aeabi_ui2f>:
 80a5640:	f04f 0300 	mov.w	r3, #0
 80a5644:	e004      	b.n	80a5650 <__aeabi_i2f+0x8>
 80a5646:	bf00      	nop

080a5648 <__aeabi_i2f>:
 80a5648:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a564c:	bf48      	it	mi
 80a564e:	4240      	negmi	r0, r0
 80a5650:	ea5f 0c00 	movs.w	ip, r0
 80a5654:	bf08      	it	eq
 80a5656:	4770      	bxeq	lr
 80a5658:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a565c:	4601      	mov	r1, r0
 80a565e:	f04f 0000 	mov.w	r0, #0
 80a5662:	e01c      	b.n	80a569e <__aeabi_l2f+0x2a>

080a5664 <__aeabi_ul2f>:
 80a5664:	ea50 0201 	orrs.w	r2, r0, r1
 80a5668:	bf08      	it	eq
 80a566a:	4770      	bxeq	lr
 80a566c:	f04f 0300 	mov.w	r3, #0
 80a5670:	e00a      	b.n	80a5688 <__aeabi_l2f+0x14>
 80a5672:	bf00      	nop

080a5674 <__aeabi_l2f>:
 80a5674:	ea50 0201 	orrs.w	r2, r0, r1
 80a5678:	bf08      	it	eq
 80a567a:	4770      	bxeq	lr
 80a567c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a5680:	d502      	bpl.n	80a5688 <__aeabi_l2f+0x14>
 80a5682:	4240      	negs	r0, r0
 80a5684:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5688:	ea5f 0c01 	movs.w	ip, r1
 80a568c:	bf02      	ittt	eq
 80a568e:	4684      	moveq	ip, r0
 80a5690:	4601      	moveq	r1, r0
 80a5692:	2000      	moveq	r0, #0
 80a5694:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a5698:	bf08      	it	eq
 80a569a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a569e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a56a2:	fabc f28c 	clz	r2, ip
 80a56a6:	3a08      	subs	r2, #8
 80a56a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a56ac:	db10      	blt.n	80a56d0 <__aeabi_l2f+0x5c>
 80a56ae:	fa01 fc02 	lsl.w	ip, r1, r2
 80a56b2:	4463      	add	r3, ip
 80a56b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80a56b8:	f1c2 0220 	rsb	r2, r2, #32
 80a56bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a56c0:	fa20 f202 	lsr.w	r2, r0, r2
 80a56c4:	eb43 0002 	adc.w	r0, r3, r2
 80a56c8:	bf08      	it	eq
 80a56ca:	f020 0001 	biceq.w	r0, r0, #1
 80a56ce:	4770      	bx	lr
 80a56d0:	f102 0220 	add.w	r2, r2, #32
 80a56d4:	fa01 fc02 	lsl.w	ip, r1, r2
 80a56d8:	f1c2 0220 	rsb	r2, r2, #32
 80a56dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a56e0:	fa21 f202 	lsr.w	r2, r1, r2
 80a56e4:	eb43 0002 	adc.w	r0, r3, r2
 80a56e8:	bf08      	it	eq
 80a56ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a56ee:	4770      	bx	lr

080a56f0 <__aeabi_fmul>:
 80a56f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a56f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a56f8:	bf1e      	ittt	ne
 80a56fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a56fe:	ea92 0f0c 	teqne	r2, ip
 80a5702:	ea93 0f0c 	teqne	r3, ip
 80a5706:	d06f      	beq.n	80a57e8 <__aeabi_fmul+0xf8>
 80a5708:	441a      	add	r2, r3
 80a570a:	ea80 0c01 	eor.w	ip, r0, r1
 80a570e:	0240      	lsls	r0, r0, #9
 80a5710:	bf18      	it	ne
 80a5712:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a5716:	d01e      	beq.n	80a5756 <__aeabi_fmul+0x66>
 80a5718:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a571c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a5720:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a5724:	fba0 3101 	umull	r3, r1, r0, r1
 80a5728:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a572c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a5730:	bf3e      	ittt	cc
 80a5732:	0049      	lslcc	r1, r1, #1
 80a5734:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a5738:	005b      	lslcc	r3, r3, #1
 80a573a:	ea40 0001 	orr.w	r0, r0, r1
 80a573e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a5742:	2afd      	cmp	r2, #253	; 0xfd
 80a5744:	d81d      	bhi.n	80a5782 <__aeabi_fmul+0x92>
 80a5746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a574a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a574e:	bf08      	it	eq
 80a5750:	f020 0001 	biceq.w	r0, r0, #1
 80a5754:	4770      	bx	lr
 80a5756:	f090 0f00 	teq	r0, #0
 80a575a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a575e:	bf08      	it	eq
 80a5760:	0249      	lsleq	r1, r1, #9
 80a5762:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5766:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a576a:	3a7f      	subs	r2, #127	; 0x7f
 80a576c:	bfc2      	ittt	gt
 80a576e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5772:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5776:	4770      	bxgt	lr
 80a5778:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a577c:	f04f 0300 	mov.w	r3, #0
 80a5780:	3a01      	subs	r2, #1
 80a5782:	dc5d      	bgt.n	80a5840 <__aeabi_fmul+0x150>
 80a5784:	f112 0f19 	cmn.w	r2, #25
 80a5788:	bfdc      	itt	le
 80a578a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a578e:	4770      	bxle	lr
 80a5790:	f1c2 0200 	rsb	r2, r2, #0
 80a5794:	0041      	lsls	r1, r0, #1
 80a5796:	fa21 f102 	lsr.w	r1, r1, r2
 80a579a:	f1c2 0220 	rsb	r2, r2, #32
 80a579e:	fa00 fc02 	lsl.w	ip, r0, r2
 80a57a2:	ea5f 0031 	movs.w	r0, r1, rrx
 80a57a6:	f140 0000 	adc.w	r0, r0, #0
 80a57aa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a57ae:	bf08      	it	eq
 80a57b0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a57b4:	4770      	bx	lr
 80a57b6:	f092 0f00 	teq	r2, #0
 80a57ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a57be:	bf02      	ittt	eq
 80a57c0:	0040      	lsleq	r0, r0, #1
 80a57c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a57c6:	3a01      	subeq	r2, #1
 80a57c8:	d0f9      	beq.n	80a57be <__aeabi_fmul+0xce>
 80a57ca:	ea40 000c 	orr.w	r0, r0, ip
 80a57ce:	f093 0f00 	teq	r3, #0
 80a57d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a57d6:	bf02      	ittt	eq
 80a57d8:	0049      	lsleq	r1, r1, #1
 80a57da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a57de:	3b01      	subeq	r3, #1
 80a57e0:	d0f9      	beq.n	80a57d6 <__aeabi_fmul+0xe6>
 80a57e2:	ea41 010c 	orr.w	r1, r1, ip
 80a57e6:	e78f      	b.n	80a5708 <__aeabi_fmul+0x18>
 80a57e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a57ec:	ea92 0f0c 	teq	r2, ip
 80a57f0:	bf18      	it	ne
 80a57f2:	ea93 0f0c 	teqne	r3, ip
 80a57f6:	d00a      	beq.n	80a580e <__aeabi_fmul+0x11e>
 80a57f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a57fc:	bf18      	it	ne
 80a57fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5802:	d1d8      	bne.n	80a57b6 <__aeabi_fmul+0xc6>
 80a5804:	ea80 0001 	eor.w	r0, r0, r1
 80a5808:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a580c:	4770      	bx	lr
 80a580e:	f090 0f00 	teq	r0, #0
 80a5812:	bf17      	itett	ne
 80a5814:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a5818:	4608      	moveq	r0, r1
 80a581a:	f091 0f00 	teqne	r1, #0
 80a581e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a5822:	d014      	beq.n	80a584e <__aeabi_fmul+0x15e>
 80a5824:	ea92 0f0c 	teq	r2, ip
 80a5828:	d101      	bne.n	80a582e <__aeabi_fmul+0x13e>
 80a582a:	0242      	lsls	r2, r0, #9
 80a582c:	d10f      	bne.n	80a584e <__aeabi_fmul+0x15e>
 80a582e:	ea93 0f0c 	teq	r3, ip
 80a5832:	d103      	bne.n	80a583c <__aeabi_fmul+0x14c>
 80a5834:	024b      	lsls	r3, r1, #9
 80a5836:	bf18      	it	ne
 80a5838:	4608      	movne	r0, r1
 80a583a:	d108      	bne.n	80a584e <__aeabi_fmul+0x15e>
 80a583c:	ea80 0001 	eor.w	r0, r0, r1
 80a5840:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5844:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5848:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a584c:	4770      	bx	lr
 80a584e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5852:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a5856:	4770      	bx	lr

080a5858 <__aeabi_fdiv>:
 80a5858:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a585c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5860:	bf1e      	ittt	ne
 80a5862:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a5866:	ea92 0f0c 	teqne	r2, ip
 80a586a:	ea93 0f0c 	teqne	r3, ip
 80a586e:	d069      	beq.n	80a5944 <__aeabi_fdiv+0xec>
 80a5870:	eba2 0203 	sub.w	r2, r2, r3
 80a5874:	ea80 0c01 	eor.w	ip, r0, r1
 80a5878:	0249      	lsls	r1, r1, #9
 80a587a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a587e:	d037      	beq.n	80a58f0 <__aeabi_fdiv+0x98>
 80a5880:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a5884:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a5888:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a588c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5890:	428b      	cmp	r3, r1
 80a5892:	bf38      	it	cc
 80a5894:	005b      	lslcc	r3, r3, #1
 80a5896:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a589a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a589e:	428b      	cmp	r3, r1
 80a58a0:	bf24      	itt	cs
 80a58a2:	1a5b      	subcs	r3, r3, r1
 80a58a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a58a8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a58ac:	bf24      	itt	cs
 80a58ae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a58b2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a58b6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a58ba:	bf24      	itt	cs
 80a58bc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a58c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a58c4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a58c8:	bf24      	itt	cs
 80a58ca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a58ce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a58d2:	011b      	lsls	r3, r3, #4
 80a58d4:	bf18      	it	ne
 80a58d6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a58da:	d1e0      	bne.n	80a589e <__aeabi_fdiv+0x46>
 80a58dc:	2afd      	cmp	r2, #253	; 0xfd
 80a58de:	f63f af50 	bhi.w	80a5782 <__aeabi_fmul+0x92>
 80a58e2:	428b      	cmp	r3, r1
 80a58e4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a58e8:	bf08      	it	eq
 80a58ea:	f020 0001 	biceq.w	r0, r0, #1
 80a58ee:	4770      	bx	lr
 80a58f0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a58f4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a58f8:	327f      	adds	r2, #127	; 0x7f
 80a58fa:	bfc2      	ittt	gt
 80a58fc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5900:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5904:	4770      	bxgt	lr
 80a5906:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a590a:	f04f 0300 	mov.w	r3, #0
 80a590e:	3a01      	subs	r2, #1
 80a5910:	e737      	b.n	80a5782 <__aeabi_fmul+0x92>
 80a5912:	f092 0f00 	teq	r2, #0
 80a5916:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a591a:	bf02      	ittt	eq
 80a591c:	0040      	lsleq	r0, r0, #1
 80a591e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5922:	3a01      	subeq	r2, #1
 80a5924:	d0f9      	beq.n	80a591a <__aeabi_fdiv+0xc2>
 80a5926:	ea40 000c 	orr.w	r0, r0, ip
 80a592a:	f093 0f00 	teq	r3, #0
 80a592e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5932:	bf02      	ittt	eq
 80a5934:	0049      	lsleq	r1, r1, #1
 80a5936:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a593a:	3b01      	subeq	r3, #1
 80a593c:	d0f9      	beq.n	80a5932 <__aeabi_fdiv+0xda>
 80a593e:	ea41 010c 	orr.w	r1, r1, ip
 80a5942:	e795      	b.n	80a5870 <__aeabi_fdiv+0x18>
 80a5944:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5948:	ea92 0f0c 	teq	r2, ip
 80a594c:	d108      	bne.n	80a5960 <__aeabi_fdiv+0x108>
 80a594e:	0242      	lsls	r2, r0, #9
 80a5950:	f47f af7d 	bne.w	80a584e <__aeabi_fmul+0x15e>
 80a5954:	ea93 0f0c 	teq	r3, ip
 80a5958:	f47f af70 	bne.w	80a583c <__aeabi_fmul+0x14c>
 80a595c:	4608      	mov	r0, r1
 80a595e:	e776      	b.n	80a584e <__aeabi_fmul+0x15e>
 80a5960:	ea93 0f0c 	teq	r3, ip
 80a5964:	d104      	bne.n	80a5970 <__aeabi_fdiv+0x118>
 80a5966:	024b      	lsls	r3, r1, #9
 80a5968:	f43f af4c 	beq.w	80a5804 <__aeabi_fmul+0x114>
 80a596c:	4608      	mov	r0, r1
 80a596e:	e76e      	b.n	80a584e <__aeabi_fmul+0x15e>
 80a5970:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5974:	bf18      	it	ne
 80a5976:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a597a:	d1ca      	bne.n	80a5912 <__aeabi_fdiv+0xba>
 80a597c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a5980:	f47f af5c 	bne.w	80a583c <__aeabi_fmul+0x14c>
 80a5984:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a5988:	f47f af3c 	bne.w	80a5804 <__aeabi_fmul+0x114>
 80a598c:	e75f      	b.n	80a584e <__aeabi_fmul+0x15e>
 80a598e:	bf00      	nop

080a5990 <__gesf2>:
 80a5990:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a5994:	e006      	b.n	80a59a4 <__cmpsf2+0x4>
 80a5996:	bf00      	nop

080a5998 <__lesf2>:
 80a5998:	f04f 0c01 	mov.w	ip, #1
 80a599c:	e002      	b.n	80a59a4 <__cmpsf2+0x4>
 80a599e:	bf00      	nop

080a59a0 <__cmpsf2>:
 80a59a0:	f04f 0c01 	mov.w	ip, #1
 80a59a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a59a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a59ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a59b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a59b4:	bf18      	it	ne
 80a59b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a59ba:	d011      	beq.n	80a59e0 <__cmpsf2+0x40>
 80a59bc:	b001      	add	sp, #4
 80a59be:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a59c2:	bf18      	it	ne
 80a59c4:	ea90 0f01 	teqne	r0, r1
 80a59c8:	bf58      	it	pl
 80a59ca:	ebb2 0003 	subspl.w	r0, r2, r3
 80a59ce:	bf88      	it	hi
 80a59d0:	17c8      	asrhi	r0, r1, #31
 80a59d2:	bf38      	it	cc
 80a59d4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a59d8:	bf18      	it	ne
 80a59da:	f040 0001 	orrne.w	r0, r0, #1
 80a59de:	4770      	bx	lr
 80a59e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a59e4:	d102      	bne.n	80a59ec <__cmpsf2+0x4c>
 80a59e6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a59ea:	d105      	bne.n	80a59f8 <__cmpsf2+0x58>
 80a59ec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a59f0:	d1e4      	bne.n	80a59bc <__cmpsf2+0x1c>
 80a59f2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a59f6:	d0e1      	beq.n	80a59bc <__cmpsf2+0x1c>
 80a59f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a59fc:	4770      	bx	lr
 80a59fe:	bf00      	nop

080a5a00 <__aeabi_cfrcmple>:
 80a5a00:	4684      	mov	ip, r0
 80a5a02:	4608      	mov	r0, r1
 80a5a04:	4661      	mov	r1, ip
 80a5a06:	e7ff      	b.n	80a5a08 <__aeabi_cfcmpeq>

080a5a08 <__aeabi_cfcmpeq>:
 80a5a08:	b50f      	push	{r0, r1, r2, r3, lr}
 80a5a0a:	f7ff ffc9 	bl	80a59a0 <__cmpsf2>
 80a5a0e:	2800      	cmp	r0, #0
 80a5a10:	bf48      	it	mi
 80a5a12:	f110 0f00 	cmnmi.w	r0, #0
 80a5a16:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a5a18 <__aeabi_fcmpeq>:
 80a5a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5a1c:	f7ff fff4 	bl	80a5a08 <__aeabi_cfcmpeq>
 80a5a20:	bf0c      	ite	eq
 80a5a22:	2001      	moveq	r0, #1
 80a5a24:	2000      	movne	r0, #0
 80a5a26:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5a2a:	bf00      	nop

080a5a2c <__aeabi_fcmplt>:
 80a5a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5a30:	f7ff ffea 	bl	80a5a08 <__aeabi_cfcmpeq>
 80a5a34:	bf34      	ite	cc
 80a5a36:	2001      	movcc	r0, #1
 80a5a38:	2000      	movcs	r0, #0
 80a5a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5a3e:	bf00      	nop

080a5a40 <__aeabi_fcmple>:
 80a5a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5a44:	f7ff ffe0 	bl	80a5a08 <__aeabi_cfcmpeq>
 80a5a48:	bf94      	ite	ls
 80a5a4a:	2001      	movls	r0, #1
 80a5a4c:	2000      	movhi	r0, #0
 80a5a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5a52:	bf00      	nop

080a5a54 <__aeabi_fcmpge>:
 80a5a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5a58:	f7ff ffd2 	bl	80a5a00 <__aeabi_cfrcmple>
 80a5a5c:	bf94      	ite	ls
 80a5a5e:	2001      	movls	r0, #1
 80a5a60:	2000      	movhi	r0, #0
 80a5a62:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5a66:	bf00      	nop

080a5a68 <__aeabi_fcmpgt>:
 80a5a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5a6c:	f7ff ffc8 	bl	80a5a00 <__aeabi_cfrcmple>
 80a5a70:	bf34      	ite	cc
 80a5a72:	2001      	movcc	r0, #1
 80a5a74:	2000      	movcs	r0, #0
 80a5a76:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5a7a:	bf00      	nop

080a5a7c <__aeabi_f2iz>:
 80a5a7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a5a80:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a5a84:	d30f      	bcc.n	80a5aa6 <__aeabi_f2iz+0x2a>
 80a5a86:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a5a8a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a5a8e:	d90d      	bls.n	80a5aac <__aeabi_f2iz+0x30>
 80a5a90:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a5a94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5a98:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a5a9c:	fa23 f002 	lsr.w	r0, r3, r2
 80a5aa0:	bf18      	it	ne
 80a5aa2:	4240      	negne	r0, r0
 80a5aa4:	4770      	bx	lr
 80a5aa6:	f04f 0000 	mov.w	r0, #0
 80a5aaa:	4770      	bx	lr
 80a5aac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a5ab0:	d101      	bne.n	80a5ab6 <__aeabi_f2iz+0x3a>
 80a5ab2:	0242      	lsls	r2, r0, #9
 80a5ab4:	d105      	bne.n	80a5ac2 <__aeabi_f2iz+0x46>
 80a5ab6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a5aba:	bf08      	it	eq
 80a5abc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a5ac0:	4770      	bx	lr
 80a5ac2:	f04f 0000 	mov.w	r0, #0
 80a5ac6:	4770      	bx	lr

080a5ac8 <__cxa_atexit>:
 80a5ac8:	b510      	push	{r4, lr}
 80a5aca:	4c05      	ldr	r4, [pc, #20]	; (80a5ae0 <__cxa_atexit+0x18>)
 80a5acc:	4613      	mov	r3, r2
 80a5ace:	b12c      	cbz	r4, 80a5adc <__cxa_atexit+0x14>
 80a5ad0:	460a      	mov	r2, r1
 80a5ad2:	4601      	mov	r1, r0
 80a5ad4:	2002      	movs	r0, #2
 80a5ad6:	f3af 8000 	nop.w
 80a5ada:	bd10      	pop	{r4, pc}
 80a5adc:	4620      	mov	r0, r4
 80a5ade:	bd10      	pop	{r4, pc}
 80a5ae0:	00000000 	.word	0x00000000

080a5ae4 <memcpy>:
 80a5ae4:	b510      	push	{r4, lr}
 80a5ae6:	1e43      	subs	r3, r0, #1
 80a5ae8:	440a      	add	r2, r1
 80a5aea:	4291      	cmp	r1, r2
 80a5aec:	d004      	beq.n	80a5af8 <memcpy+0x14>
 80a5aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a5af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a5af6:	e7f8      	b.n	80a5aea <memcpy+0x6>
 80a5af8:	bd10      	pop	{r4, pc}

080a5afa <memset>:
 80a5afa:	4603      	mov	r3, r0
 80a5afc:	4402      	add	r2, r0
 80a5afe:	4293      	cmp	r3, r2
 80a5b00:	d002      	beq.n	80a5b08 <memset+0xe>
 80a5b02:	f803 1b01 	strb.w	r1, [r3], #1
 80a5b06:	e7fa      	b.n	80a5afe <memset+0x4>
 80a5b08:	4770      	bx	lr
	...

080a5b0c <srand>:
 80a5b0c:	b538      	push	{r3, r4, r5, lr}
 80a5b0e:	4b12      	ldr	r3, [pc, #72]	; (80a5b58 <srand+0x4c>)
 80a5b10:	4605      	mov	r5, r0
 80a5b12:	681c      	ldr	r4, [r3, #0]
 80a5b14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5b16:	b9d3      	cbnz	r3, 80a5b4e <srand+0x42>
 80a5b18:	2018      	movs	r0, #24
 80a5b1a:	f7fc fa5d 	bl	80a1fd8 <malloc>
 80a5b1e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a5b22:	63a0      	str	r0, [r4, #56]	; 0x38
 80a5b24:	8003      	strh	r3, [r0, #0]
 80a5b26:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a5b2a:	8043      	strh	r3, [r0, #2]
 80a5b2c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a5b30:	8083      	strh	r3, [r0, #4]
 80a5b32:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a5b36:	80c3      	strh	r3, [r0, #6]
 80a5b38:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a5b3c:	8103      	strh	r3, [r0, #8]
 80a5b3e:	2305      	movs	r3, #5
 80a5b40:	8143      	strh	r3, [r0, #10]
 80a5b42:	230b      	movs	r3, #11
 80a5b44:	8183      	strh	r3, [r0, #12]
 80a5b46:	2201      	movs	r2, #1
 80a5b48:	2300      	movs	r3, #0
 80a5b4a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a5b4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5b50:	2200      	movs	r2, #0
 80a5b52:	611d      	str	r5, [r3, #16]
 80a5b54:	615a      	str	r2, [r3, #20]
 80a5b56:	bd38      	pop	{r3, r4, r5, pc}
 80a5b58:	20000080 	.word	0x20000080

080a5b5c <strlen>:
 80a5b5c:	4603      	mov	r3, r0
 80a5b5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a5b62:	2a00      	cmp	r2, #0
 80a5b64:	d1fb      	bne.n	80a5b5e <strlen+0x2>
 80a5b66:	1a18      	subs	r0, r3, r0
 80a5b68:	3801      	subs	r0, #1
 80a5b6a:	4770      	bx	lr

080a5b6c <dynalib_user>:
 80a5b6c:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a5b7c:	0000 0000 504d 3955 3532 2030 4900 4120     ....MPU9250 .I A
 80a5b8c:	204d 2000 2049 6873 756f 646c 6220 2065     M . I should be 
 80a5b9c:	4d00 5550 3239 3035 6920 2073 6e6f 696c     .MPU9250 is onli
 80a5bac:	656e 2e2e 002e 2d78 7861 7369 7320 6c65     ne....x-axis sel
 80a5bbc:	2066 6574 7473 203a 6361 6563 656c 6172     f test: accelera
 80a5bcc:	6974 6e6f 7420 6972 206d 6977 6874 6e69     tion trim within
 80a5bdc:	3a20 0020 2025 666f 6620 6361 6f74 7972      : .% of factory
 80a5bec:	7620 6c61 6575 7900 612d 6978 2073 6573      value.y-axis se
 80a5bfc:	666c 7420 7365 3a74 6120 6363 6c65 7265     lf test: acceler
 80a5c0c:	7461 6f69 206e 7274 6d69 7720 7469 6968     ation trim withi
 80a5c1c:	206e 203a 7a00 612d 6978 2073 6573 666c     n : .z-axis self
 80a5c2c:	7420 7365 3a74 6120 6363 6c65 7265 7461      test: accelerat
 80a5c3c:	6f69 206e 7274 6d69 7720 7469 6968 206e     ion trim within 
 80a5c4c:	203a 7800 612d 6978 2073 6573 666c 7420     : .x-axis self t
 80a5c5c:	7365 3a74 6720 7279 7461 6f69 206e 7274     est: gyration tr
 80a5c6c:	6d69 7720 7469 6968 206e 203a 7900 612d     im within : .y-a
 80a5c7c:	6978 2073 6573 666c 7420 7365 3a74 6720     xis self test: g
 80a5c8c:	7279 7461 6f69 206e 7274 6d69 7720 7469     yration trim wit
 80a5c9c:	6968 206e 203a 7a00 612d 6978 2073 6573     hin : .z-axis se
 80a5cac:	666c 7420 7365 3a74 6720 7279 7461 6f69     lf test: gyratio
 80a5cbc:	206e 7274 6d69 7720 7469 6968 206e 203a     n trim within : 
 80a5ccc:	4d00 5550 3239 3035 6920 696e 6974 6c61     .MPU9250 initial
 80a5cdc:	7a69 6465 6620 726f 6120 7463 7669 2065     ized for active 
 80a5cec:	6164 6174 6d20 646f 2e65 2e2e 002e 4b41     data mode.....AK
 80a5cfc:	3938 3336 0020 4b41 3938 3336 6920 696e     8963 .AK8963 ini
 80a5d0c:	6974 6c61 7a69 6465 6620 726f 6120 7463     tialized for act
 80a5d1c:	7669 2065 6164 6174 6d20 646f 2e65 2e2e     ive data mode...
 80a5d2c:	002e 2d58 7841 7369 7320 6e65 6973 6974     ..X-Axis sensiti
 80a5d3c:	6976 7974 6120 6a64 7375 6d74 6e65 2074     vity adjustment 
 80a5d4c:	6176 756c 2065 5900 412d 6978 2073 6573     value .Y-Axis se
 80a5d5c:	736e 7469 7669 7469 2079 6461 756a 7473     nsitivity adjust
 80a5d6c:	656d 746e 7620 6c61 6575 0020 2d5a 7841     ment value .Z-Ax
 80a5d7c:	7369 7320 6e65 6973 6974 6976 7974 6120     is sensitivity a
 80a5d8c:	6a64 7375 6d74 6e65 2074 6176 756c 2065     djustment value 
 80a5d9c:	4300 756f 646c 6e20 746f 6320 6e6f 656e     .Could not conne
 80a5dac:	7463 7420 206f 504d 3955 3532 3a30 3020     ct to MPU9250: 0
 80a5dbc:	0078 7861 3d20 0020 6120 2079 203d 2000     x.ax = . ay = . 
 80a5dcc:	7a61 3d20 0020 6d20 0067 7867 3d20 0020     az = . mg.gx = .
 80a5ddc:	6720 2079 203d 2000 7a67 3d20 0020 6420      gy = . gz = . d
 80a5dec:	6765 732f 6d00 2078 203d 2000 796d 3d20     eg/s.mx = . my =
 80a5dfc:	0020 6d20 207a 203d 2000 476d 7100 2030      . mz = . mG.q0 
 80a5e0c:	203d 2000 7871 3d20 0020 7120 2079 203d     = . qx = . qy = 
 80a5e1c:	2000 7a71 3d20 0020 6159 2c77 5020 7469     . qz = .Yaw, Pit
 80a5e2c:	6863 202c 6f52 6c6c 203a 2c00 0020 6172     ch, Roll: ., .ra
 80a5e3c:	6574 3d20 0020 4820 007a 0000               te = . Hz...

080a5e48 <_ZTV7TwoWire>:
	...
 80a5e50:	2021 080a 206b 080a 2043 080a 2023 080a     ! ..k ..C ..# ..
 80a5e60:	204b 080a 2053 080a 205b 080a 2063 080a     K ..S ..[ ..c ..

080a5e70 <_ZTV9IPAddress>:
	...
 80a5e78:	20ef 080a 20df 080a 20e1 080a 6162 6475     . ... ... ..baud
 80a5e88:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a5e98:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a5ea8:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a5eb8:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a5ec8:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a5ed8:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a5ee8:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a5ef8:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a5f08:	6425 2800 3a29 0020 5b20 6300 646f 2065     %d.(): . [.code 
 80a5f18:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a5f28:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
 80a5f38:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
 80a5f48:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
 80a5f58:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

080a5f64 <_ZTVN5spark12NetworkClassE>:
	...
 80a5f6c:	21b5 080a 21bf 080a 21c9 080a 21d3 080a     .!...!...!...!..
 80a5f7c:	21dd 080a 21e9 080a 21f5 080a 2201 080a     .!...!...!..."..
 80a5f8c:	2209 080a 2213 080a 221d 080a 616e 006e     ."..."..."..nan.
 80a5f9c:	766f 0066 6e69 0066                         ovf.inf.

080a5fa4 <_ZTV8SPIClass>:
	...
 80a5fac:	257d 080a 257f 080a 005a 2b25 3330 3a64     }%...%..Z.%+03d:
 80a5fbc:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a5fcc:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a5fdc:	0000 0000                                   ....

080a5fe0 <_ZTV11USARTSerial>:
	...
 80a5fe8:	25e9 080a 2639 080a 2647 080a 2281 080a     .%..9&..G&..."..
 80a5ff8:	25fd 080a 261f 080a 260b 080a 2633 080a     .%...&...&..3&..
 80a6008:	25eb 080a 25ef 080a                         .%...%..

080a6010 <_ZTV9USBSerial>:
	...
 80a6018:	26f1 080a 2741 080a 274f 080a 2281 080a     .&..A'..O'..."..
 80a6028:	272d 080a 26f3 080a 2709 080a 273b 080a     -'...&...'..;'..
 80a6038:	271f 080a 26ed 080a                         .'...&..

080a6040 <_ZTVN5spark9WiFiClassE>:
	...
 80a6048:	2933 080a 2929 080a 291f 080a 2891 080a     3)..))...)...(..
 80a6058:	2913 080a 2907 080a 28fb 080a 28f3 080a     .)...)...(...(..
 80a6068:	28e9 080a 28df 080a 289b 080a 7361 6e69     .(...(...(..asin
 80a6078:	0000 0000 6f70 0077 7173 7472 0000 0000     ....pow.sqrt....

080a6088 <atanlo>:
 80a6088:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
 80a6098:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

080a60a8 <atanhi>:
 80a60a8:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
 80a60b8:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

080a60c8 <TWO52>:
 80a60c8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

080a60d8 <__sf_fake_stdin>:
	...

080a60f8 <__sf_fake_stdout>:
	...

080a6118 <__sf_fake_stderr>:
	...
 80a6138:	0043                                        C.

080a613a <link_const_variable_data_end>:
	...

080a613c <link_constructors_location>:
 80a613c:	080a0a6d 	.word	0x080a0a6d
 80a6140:	080a16b1 	.word	0x080a16b1
 80a6144:	080a1c75 	.word	0x080a1c75
 80a6148:	080a21a5 	.word	0x080a21a5
 80a614c:	080a226d 	.word	0x080a226d
 80a6150:	080a2561 	.word	0x080a2561
 80a6154:	080a25bd 	.word	0x080a25bd
 80a6158:	080a25d5 	.word	0x080a25d5
 80a615c:	080a293d 	.word	0x080a293d
 80a6160:	080a2b65 	.word	0x080a2b65
 80a6164:	080a2b95 	.word	0x080a2b95
 80a6168:	080a2be9 	.word	0x080a2be9
 80a616c:	080a2cad 	.word	0x080a2cad
 80a6170:	080a2d31 	.word	0x080a2d31
 80a6174:	080a2db5 	.word	0x080a2db5

080a6178 <link_constructors_end>:
	...
