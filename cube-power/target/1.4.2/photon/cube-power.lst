
c:/Users/me/Dropbox/2019-games/particle/seattle-indies-photon-cube-jam-2019/cube-power/target/1.4.2/photon/cube-power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002e94  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2eb0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a2eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005cc  2000006c  2000006c  0003006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2f20  080a2f20  00022f20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2f48  080a2f48  00022f48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ae12c  00000000  00000000  00022f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ff5a  00000000  00000000  000d1078  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001017e  00000000  00000000  000e0fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001cb8  00000000  00000000  000f1150  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002af0  00000000  00000000  000f2e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002684c  00000000  00000000  000f58f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00025163  00000000  00000000  0011c144  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a0584  00000000  00000000  001412a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ae9c  00000000  00000000  001e182c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fd5d 	bl	80a2aec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fd62 	bl	80a2b02 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2eb4 	.word	0x080a2eb4
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	20000638 	.word	0x20000638
 80a0058:	20000638 	.word	0x20000638

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f80d 	bl	80a207c <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2e74 	.word	0x080a2e74
 80a0084:	080a2eb0 	.word	0x080a2eb0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b878 	b.w	80a017c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8a7 	bl	80a01e0 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bfb3 	b.w	80a2000 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f001 be8f 	b.w	80a1dbc <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <_ZL6chaseAm>:
//   }
//   stripB.show();
//   delay(100);
// }
 
static void chaseA(uint32_t c) {
 80a00b0:	b570      	push	{r4, r5, r6, lr}
 80a00b2:	4606      	mov	r6, r0
 80a00b4:	2400      	movs	r4, #0
  for(uint16_t i = 0; i < stripA.numPixels() + 4; i++) {
 80a00b6:	480e      	ldr	r0, [pc, #56]	; (80a00f0 <_ZL6chaseAm+0x40>)
 80a00b8:	f001 fb7e 	bl	80a17b8 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a00bc:	b2a5      	uxth	r5, r4
 80a00be:	3003      	adds	r0, #3
 80a00c0:	42a8      	cmp	r0, r5
 80a00c2:	f104 0401 	add.w	r4, r4, #1
 80a00c6:	db11      	blt.n	80a00ec <_ZL6chaseAm+0x3c>
      stripA.setPixelColor(i  , c); // Draw new pixel
 80a00c8:	4632      	mov	r2, r6
 80a00ca:	4629      	mov	r1, r5
 80a00cc:	4808      	ldr	r0, [pc, #32]	; (80a00f0 <_ZL6chaseAm+0x40>)
 80a00ce:	f001 fb23 	bl	80a1718 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      stripA.setPixelColor(i-4, 0); // Erase pixel a few steps back
 80a00d2:	1f61      	subs	r1, r4, #5
 80a00d4:	2200      	movs	r2, #0
 80a00d6:	b289      	uxth	r1, r1
 80a00d8:	4805      	ldr	r0, [pc, #20]	; (80a00f0 <_ZL6chaseAm+0x40>)
 80a00da:	f001 fb1d 	bl	80a1718 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      stripA.show();
 80a00de:	4804      	ldr	r0, [pc, #16]	; (80a00f0 <_ZL6chaseAm+0x40>)
 80a00e0:	f000 fa60 	bl	80a05a4 <_ZN17Adafruit_NeoPixel4showEv>
      delay(25);
 80a00e4:	2019      	movs	r0, #25
 80a00e6:	f001 ff39 	bl	80a1f5c <delay>
//   stripB.show();
//   delay(100);
// }
 
static void chaseA(uint32_t c) {
  for(uint16_t i = 0; i < stripA.numPixels() + 4; i++) {
 80a00ea:	e7e4      	b.n	80a00b6 <_ZL6chaseAm+0x6>
 80a00ec:	bd70      	pop	{r4, r5, r6, pc}
 80a00ee:	bf00      	nop
 80a00f0:	20000070 	.word	0x20000070

080a00f4 <_ZL6chaseBm>:
      stripA.show();
      delay(25);
  }
}
 
static void chaseB(uint32_t c) {
 80a00f4:	b570      	push	{r4, r5, r6, lr}
 80a00f6:	4606      	mov	r6, r0
 80a00f8:	2400      	movs	r4, #0
  for(uint16_t i = 0; i < stripB.numPixels() + 4; i++) {
 80a00fa:	480e      	ldr	r0, [pc, #56]	; (80a0134 <_ZL6chaseBm+0x40>)
 80a00fc:	f001 fb5c 	bl	80a17b8 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0100:	b2a5      	uxth	r5, r4
 80a0102:	3003      	adds	r0, #3
 80a0104:	42a8      	cmp	r0, r5
 80a0106:	f104 0401 	add.w	r4, r4, #1
 80a010a:	db11      	blt.n	80a0130 <_ZL6chaseBm+0x3c>
      stripB.setPixelColor(i  , c); // Draw new pixel
 80a010c:	4632      	mov	r2, r6
 80a010e:	4629      	mov	r1, r5
 80a0110:	4808      	ldr	r0, [pc, #32]	; (80a0134 <_ZL6chaseBm+0x40>)
 80a0112:	f001 fb01 	bl	80a1718 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      stripB.setPixelColor(i-4, 0); // Erase pixel a few steps back
 80a0116:	1f61      	subs	r1, r4, #5
 80a0118:	2200      	movs	r2, #0
 80a011a:	b289      	uxth	r1, r1
 80a011c:	4805      	ldr	r0, [pc, #20]	; (80a0134 <_ZL6chaseBm+0x40>)
 80a011e:	f001 fafb 	bl	80a1718 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      stripB.show();
 80a0122:	4804      	ldr	r0, [pc, #16]	; (80a0134 <_ZL6chaseBm+0x40>)
 80a0124:	f000 fa3e 	bl	80a05a4 <_ZN17Adafruit_NeoPixel4showEv>
      delay(25);
 80a0128:	2019      	movs	r0, #25
 80a012a:	f001 ff17 	bl	80a1f5c <delay>
      delay(25);
  }
}
 
static void chaseB(uint32_t c) {
  for(uint16_t i = 0; i < stripB.numPixels() + 4; i++) {
 80a012e:	e7e4      	b.n	80a00fa <_ZL6chaseBm+0x6>
 80a0130:	bd70      	pop	{r4, r5, r6, pc}
 80a0132:	bf00      	nop
 80a0134:	20000084 	.word	0x20000084

080a0138 <_Z10touchSetupv>:
// Keeps track of the last pins touched
// so we know when buttons are 'released'
uint16_t lasttouched = 0;
uint16_t currtouched = 0;

void touchSetup() {
 80a0138:	b510      	push	{r4, lr}
  // Default address is 0x5A, if tied to 3.3V its 0x5B
  // If tied to SDA its 0x5C and if SCL then 0x5D
  if (!cap.begin(0x5A)) {
 80a013a:	215a      	movs	r1, #90	; 0x5a
 80a013c:	480b      	ldr	r0, [pc, #44]	; (80a016c <_Z10touchSetupv+0x34>)
 80a013e:	f001 fbf6 	bl	80a192e <_ZN15Adafruit_MPR1215beginEh>
 80a0142:	b958      	cbnz	r0, 80a015c <_Z10touchSetupv+0x24>
    Serial.println("MPR121 not found, check wiring?");
 80a0144:	f002 f89a 	bl	80a227c <_Z16_fetch_usbserialv>
 80a0148:	4909      	ldr	r1, [pc, #36]	; (80a0170 <_Z10touchSetupv+0x38>)
 80a014a:	f001 feb8 	bl	80a1ebe <_ZN5Print7printlnEPKc>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a014e:	4c09      	ldr	r4, [pc, #36]	; (80a0174 <_Z10touchSetupv+0x3c>)
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0150:	f001 fcae 	bl	80a1ab0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0154:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a0156:	f001 fe19 	bl	80a1d8c <spark_process>
 80a015a:	e7f9      	b.n	80a0150 <_Z10touchSetupv+0x18>
      #endif
    }

  }

  Serial.println("MPR121 found!");
 80a015c:	f002 f88e 	bl	80a227c <_Z16_fetch_usbserialv>
}
 80a0160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      #endif
    }

  }

  Serial.println("MPR121 found!");
 80a0164:	4904      	ldr	r1, [pc, #16]	; (80a0178 <_Z10touchSetupv+0x40>)
 80a0166:	f001 beaa 	b.w	80a1ebe <_ZN5Print7printlnEPKc>
 80a016a:	bf00      	nop
 80a016c:	200000a6 	.word	0x200000a6
 80a0170:	080a2b88 	.word	0x080a2b88
 80a0174:	20000564 	.word	0x20000564
 80a0178:	080a2ba8 	.word	0x080a2ba8

080a017c <setup>:
}

// setup() runs once, when the device is first turned on.
void setup() {
 80a017c:	b510      	push	{r4, lr}
  Serial.begin(9600);
  stripA.setBrightness(BRIGHTNESS_A);
 80a017e:	4c16      	ldr	r4, [pc, #88]	; (80a01d8 <setup+0x5c>)
  Serial.println("MPR121 found!");
}

// setup() runs once, when the device is first turned on.
void setup() {
  Serial.begin(9600);
 80a0180:	f002 f87c 	bl	80a227c <_Z16_fetch_usbserialv>
 80a0184:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0188:	f002 f85e 	bl	80a2248 <_ZN9USBSerial5beginEl>
  stripA.setBrightness(BRIGHTNESS_A);
 80a018c:	21ff      	movs	r1, #255	; 0xff
 80a018e:	4620      	mov	r0, r4
 80a0190:	f001 fb14 	bl	80a17bc <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  stripA.begin();
 80a0194:	4620      	mov	r0, r4
 80a0196:	f000 f9cf 	bl	80a0538 <_ZN17Adafruit_NeoPixel5beginEv>
  stripA.show();
 80a019a:	4620      	mov	r0, r4

  stripB.setBrightness(BRIGHTNESS_B);
 80a019c:	4c0f      	ldr	r4, [pc, #60]	; (80a01dc <setup+0x60>)
// setup() runs once, when the device is first turned on.
void setup() {
  Serial.begin(9600);
  stripA.setBrightness(BRIGHTNESS_A);
  stripA.begin();
  stripA.show();
 80a019e:	f000 fa01 	bl	80a05a4 <_ZN17Adafruit_NeoPixel4showEv>

  stripB.setBrightness(BRIGHTNESS_B);
 80a01a2:	21ff      	movs	r1, #255	; 0xff
 80a01a4:	4620      	mov	r0, r4
 80a01a6:	f001 fb09 	bl	80a17bc <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  stripB.begin();
 80a01aa:	4620      	mov	r0, r4
 80a01ac:	f000 f9c4 	bl	80a0538 <_ZN17Adafruit_NeoPixel5beginEv>
  stripB.show();
 80a01b0:	4620      	mov	r0, r4
 80a01b2:	f000 f9f7 	bl	80a05a4 <_ZN17Adafruit_NeoPixel4showEv>

  touchSetup();
 80a01b6:	f7ff ffbf 	bl	80a0138 <_Z10touchSetupv>

  pinMode(CHARGING_PIN, INPUT_PULLDOWN);
 80a01ba:	2103      	movs	r1, #3
 80a01bc:	2007      	movs	r0, #7
 80a01be:	f002 fa9f 	bl	80a2700 <pinMode>
  pinMode(CHARGED_PIN, INPUT_PULLDOWN);
 80a01c2:	2103      	movs	r1, #3
 80a01c4:	2006      	movs	r0, #6
 80a01c6:	f002 fa9b 	bl	80a2700 <pinMode>
  pinMode(BEEPER_PIN, OUTPUT);
}
 80a01ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  touchSetup();

  pinMode(CHARGING_PIN, INPUT_PULLDOWN);
  pinMode(CHARGED_PIN, INPUT_PULLDOWN);
  pinMode(BEEPER_PIN, OUTPUT);
 80a01ce:	2101      	movs	r1, #1
 80a01d0:	2013      	movs	r0, #19
 80a01d2:	f002 ba95 	b.w	80a2700 <pinMode>
 80a01d6:	bf00      	nop
 80a01d8:	20000070 	.word	0x20000070
 80a01dc:	20000084 	.word	0x20000084

080a01e0 <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a01e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}


bool wasCharging = true;
// bool wasCharged = false;
static void checkPower() {
  bool isCharging = digitalRead(CHARGING_PIN);
 80a01e4:	2007      	movs	r0, #7
  pinMode(CHARGED_PIN, INPUT_PULLDOWN);
  pinMode(BEEPER_PIN, OUTPUT);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a01e6:	b089      	sub	sp, #36	; 0x24


bool wasCharging = true;
// bool wasCharged = false;
static void checkPower() {
  bool isCharging = digitalRead(CHARGING_PIN);
 80a01e8:	f002 fab4 	bl	80a2754 <digitalRead>
 80a01ec:	1c06      	adds	r6, r0, #0
 80a01ee:	4605      	mov	r5, r0
  bool isCharged = digitalRead(CHARGED_PIN);
 80a01f0:	f04f 0006 	mov.w	r0, #6


bool wasCharging = true;
// bool wasCharged = false;
static void checkPower() {
  bool isCharging = digitalRead(CHARGING_PIN);
 80a01f4:	bf18      	it	ne
 80a01f6:	2601      	movne	r6, #1
  bool isCharged = digitalRead(CHARGED_PIN);
 80a01f8:	f002 faac 	bl	80a2754 <digitalRead>
 80a01fc:	4c8f      	ldr	r4, [pc, #572]	; (80a043c <loop+0x25c>)
 80a01fe:	4607      	mov	r7, r0

  // if (!wasCharging && isCharging) {
  //   wasCharged = false;
  // }

  if (isCharging) {
 80a0200:	2d00      	cmp	r5, #0
 80a0202:	d061      	beq.n	80a02c8 <loop+0xe8>
    if (!wasCharging) {
 80a0204:	7823      	ldrb	r3, [r4, #0]
 80a0206:	b933      	cbnz	r3, 80a0216 <loop+0x36>
      tone(BEEPER_PIN, 261, 1000);
 80a0208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a020c:	f240 1105 	movw	r1, #261	; 0x105
 80a0210:	2013      	movs	r0, #19
 80a0212:	f002 f895 	bl	80a2340 <tone>
    }

    if (isCharged) {
 80a0216:	b15f      	cbz	r7, 80a0230 <loop+0x50>
      Serial.println("charged");
 80a0218:	f002 f830 	bl	80a227c <_Z16_fetch_usbserialv>
 80a021c:	4988      	ldr	r1, [pc, #544]	; (80a0440 <loop+0x260>)
 80a021e:	f001 fe4e 	bl	80a1ebe <_ZN5Print7printlnEPKc>
      tone(BEEPER_PIN, 220, 1000);
 80a0222:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0226:	21dc      	movs	r1, #220	; 0xdc
 80a0228:	2013      	movs	r0, #19
 80a022a:	f002 f889 	bl	80a2340 <tone>
 80a022e:	e004      	b.n	80a023a <loop+0x5a>
    } else {
      Serial.println("charging");
 80a0230:	f002 f824 	bl	80a227c <_Z16_fetch_usbserialv>
 80a0234:	4983      	ldr	r1, [pc, #524]	; (80a0444 <loop+0x264>)
 80a0236:	f001 fe42 	bl	80a1ebe <_ZN5Print7printlnEPKc>
    }

    stripA.setBrightness(10);
 80a023a:	210a      	movs	r1, #10
 80a023c:	4882      	ldr	r0, [pc, #520]	; (80a0448 <loop+0x268>)
 80a023e:	f001 fabd 	bl	80a17bc <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    stripB.setBrightness(10);
 80a0242:	210a      	movs	r1, #10
 80a0244:	4881      	ldr	r0, [pc, #516]	; (80a044c <loop+0x26c>)
 80a0246:	f001 fab9 	bl	80a17bc <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  // chaseBoth();
  lasttouched = currtouched;
}

static void chaseBoth() {
  chaseA(stripA.Color(255, 0, 0)); // Red
 80a024a:	2200      	movs	r2, #0
 80a024c:	4611      	mov	r1, r2
 80a024e:	20ff      	movs	r0, #255	; 0xff
 80a0250:	f001 faad 	bl	80a17ae <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0254:	f7ff ff2c 	bl	80a00b0 <_ZL6chaseAm>
  chaseA(stripA.Color(0, 255, 0)); // Green
 80a0258:	2200      	movs	r2, #0
 80a025a:	21ff      	movs	r1, #255	; 0xff
 80a025c:	4610      	mov	r0, r2
 80a025e:	f001 faa6 	bl	80a17ae <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0262:	f7ff ff25 	bl	80a00b0 <_ZL6chaseAm>
  chaseA(stripA.Color(0, 0, 255)); // Blue
 80a0266:	2100      	movs	r1, #0
 80a0268:	22ff      	movs	r2, #255	; 0xff
 80a026a:	4608      	mov	r0, r1
 80a026c:	f001 fa9f 	bl	80a17ae <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0270:	f7ff ff1e 	bl	80a00b0 <_ZL6chaseAm>
  chaseA(stripA.Color(0, 0, 0)); // Off
 80a0274:	2200      	movs	r2, #0
 80a0276:	4611      	mov	r1, r2
 80a0278:	4610      	mov	r0, r2
 80a027a:	f001 fa98 	bl	80a17ae <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a027e:	f7ff ff17 	bl	80a00b0 <_ZL6chaseAm>

  chaseB(stripB.Color(255, 0, 0)); // Red
 80a0282:	2200      	movs	r2, #0
 80a0284:	4611      	mov	r1, r2
 80a0286:	20ff      	movs	r0, #255	; 0xff
 80a0288:	f001 fa91 	bl	80a17ae <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a028c:	f7ff ff32 	bl	80a00f4 <_ZL6chaseBm>
  chaseB(stripB.Color(0, 255, 0)); // Green
 80a0290:	2200      	movs	r2, #0
 80a0292:	21ff      	movs	r1, #255	; 0xff
 80a0294:	4610      	mov	r0, r2
 80a0296:	f001 fa8a 	bl	80a17ae <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a029a:	f7ff ff2b 	bl	80a00f4 <_ZL6chaseBm>
  chaseB(stripB.Color(0, 0, 255)); // Blue
 80a029e:	2100      	movs	r1, #0
 80a02a0:	22ff      	movs	r2, #255	; 0xff
 80a02a2:	4608      	mov	r0, r1
 80a02a4:	f001 fa83 	bl	80a17ae <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a02a8:	f7ff ff24 	bl	80a00f4 <_ZL6chaseBm>
  chaseB(stripB.Color(0, 0, 0)); // Off
 80a02ac:	2200      	movs	r2, #0
 80a02ae:	4611      	mov	r1, r2
 80a02b0:	4610      	mov	r0, r2
 80a02b2:	f001 fa7c 	bl	80a17ae <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a02b6:	f7ff ff1d 	bl	80a00f4 <_ZL6chaseBm>
    }

    stripA.setBrightness(10);
    stripB.setBrightness(10);
    chaseBoth();
    System.sleep(SLEEP_MODE_DEEP, 3);
 80a02ba:	4b65      	ldr	r3, [pc, #404]	; (80a0450 <loop+0x270>)
 80a02bc:	2203      	movs	r2, #3
 80a02be:	681b      	ldr	r3, [r3, #0]
 80a02c0:	2101      	movs	r1, #1
 80a02c2:	a806      	add	r0, sp, #24
 80a02c4:	f001 fda2 	bl	80a1e0c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
  }

  if (wasCharging && !isCharging) {
 80a02c8:	7823      	ldrb	r3, [r4, #0]
 80a02ca:	b19b      	cbz	r3, 80a02f4 <loop+0x114>
 80a02cc:	b995      	cbnz	r5, 80a02f4 <loop+0x114>
    Serial.println("unplugged");
 80a02ce:	f001 ffd5 	bl	80a227c <_Z16_fetch_usbserialv>
 80a02d2:	4960      	ldr	r1, [pc, #384]	; (80a0454 <loop+0x274>)
 80a02d4:	f001 fdf3 	bl	80a1ebe <_ZN5Print7printlnEPKc>
    stripA.setBrightness(255);
 80a02d8:	21ff      	movs	r1, #255	; 0xff
 80a02da:	485b      	ldr	r0, [pc, #364]	; (80a0448 <loop+0x268>)
 80a02dc:	f001 fa6e 	bl	80a17bc <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    stripB.setBrightness(255);
 80a02e0:	21ff      	movs	r1, #255	; 0xff
 80a02e2:	485a      	ldr	r0, [pc, #360]	; (80a044c <loop+0x26c>)
 80a02e4:	f001 fa6a 	bl	80a17bc <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    tone(BEEPER_PIN, 220, 1000);
 80a02e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a02ec:	21dc      	movs	r1, #220	; 0xdc
 80a02ee:	2013      	movs	r0, #19
 80a02f0:	f002 f826 	bl	80a2340 <tone>
  // Particle.process();
  // #endif
  checkPower();

  // the actual game
  currtouched = cap.touched();
 80a02f4:	4858      	ldr	r0, [pc, #352]	; (80a0458 <loop+0x278>)
    stripA.setBrightness(255);
    stripB.setBrightness(255);
    tone(BEEPER_PIN, 220, 1000);
  }

  wasCharging = isCharging;
 80a02f6:	7026      	strb	r6, [r4, #0]
  // Particle.process();
  // #endif
  checkPower();

  // the actual game
  currtouched = cap.touched();
 80a02f8:	f001 fae1 	bl	80a18be <_ZN15Adafruit_MPR1217touchedEv>
  int redA = 0;
  int greenA = 0;
  int blueA = 0;
  if (currtouched & _BV(0)) {
    redA = 255;
 80a02fc:	f010 0f01 	tst.w	r0, #1
 80a0300:	bf0c      	ite	eq
 80a0302:	f04f 0800 	moveq.w	r8, #0
 80a0306:	f04f 08ff 	movne.w	r8, #255	; 0xff
  }
  
  if (currtouched & _BV(1)) {
    greenA = 255;
 80a030a:	f010 0f02 	tst.w	r0, #2
 80a030e:	bf0c      	ite	eq
 80a0310:	f04f 0900 	moveq.w	r9, #0
 80a0314:	f04f 09ff 	movne.w	r9, #255	; 0xff
  }

  if (currtouched & _BV(2)) {
    blueA = 255;
 80a0318:	f010 0f04 	tst.w	r0, #4
 80a031c:	bf0c      	ite	eq
 80a031e:	2500      	moveq	r5, #0
 80a0320:	25ff      	movne	r5, #255	; 0xff
  }

  if (currtouched & _BV(3)) {
 80a0322:	0701      	lsls	r1, r0, #28
    redA = greenA = blueA = 255;
 80a0324:	bf42      	ittt	mi
 80a0326:	25ff      	movmi	r5, #255	; 0xff
 80a0328:	46a9      	movmi	r9, r5
 80a032a:	46a8      	movmi	r8, r5

  int redB = 0;
  int greenB = 0;
  int blueB = 0;
  if (currtouched & _BV(6)) {
    redB = 255;
 80a032c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80a0330:	bf0c      	ite	eq
 80a0332:	f04f 0a00 	moveq.w	sl, #0
 80a0336:	f04f 0aff 	movne.w	sl, #255	; 0xff
  }
  
  if (currtouched & _BV(7)) {
    greenB = 255;
 80a033a:	f010 0f80 	tst.w	r0, #128	; 0x80
 80a033e:	bf0c      	ite	eq
 80a0340:	f04f 0b00 	moveq.w	fp, #0
 80a0344:	f04f 0bff 	movne.w	fp, #255	; 0xff
  }

  if (currtouched & _BV(8)) {
    blueB = 255;
 80a0348:	f410 7f80 	tst.w	r0, #256	; 0x100
 80a034c:	bf0c      	ite	eq
 80a034e:	2600      	moveq	r6, #0
 80a0350:	26ff      	movne	r6, #255	; 0xff
  }

  if (currtouched & _BV(9)) {
 80a0352:	0582      	lsls	r2, r0, #22
    redB = greenB = blueB = 255;
  }

  bool setA =
    (currtouched & 0b111111)
    == (lasttouched & 0b111111)
 80a0354:	4a41      	ldr	r2, [pc, #260]	; (80a045c <loop+0x27c>)
  if (currtouched & _BV(8)) {
    blueB = 255;
  }

  if (currtouched & _BV(9)) {
    redB = greenB = blueB = 255;
 80a0356:	bf48      	it	mi
 80a0358:	26ff      	movmi	r6, #255	; 0xff
  }

  bool setA =
    (currtouched & 0b111111)
    == (lasttouched & 0b111111)
    || !(currtouched & 0b111111);
 80a035a:	8813      	ldrh	r3, [r2, #0]
  // Particle.process();
  // #endif
  checkPower();

  // the actual game
  currtouched = cap.touched();
 80a035c:	4f40      	ldr	r7, [pc, #256]	; (80a0460 <loop+0x280>)
  }

  bool setA =
    (currtouched & 0b111111)
    == (lasttouched & 0b111111)
    || !(currtouched & 0b111111);
 80a035e:	ea83 0300 	eor.w	r3, r3, r0
  if (currtouched & _BV(8)) {
    blueB = 255;
  }

  if (currtouched & _BV(9)) {
    redB = greenB = blueB = 255;
 80a0362:	bf44      	itt	mi
 80a0364:	46b3      	movmi	fp, r6
 80a0366:	46b2      	movmi	sl, r6
  }

  bool setA =
    (currtouched & 0b111111)
    == (lasttouched & 0b111111)
    || !(currtouched & 0b111111);
 80a0368:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  // Particle.process();
  // #endif
  checkPower();

  // the actual game
  currtouched = cap.touched();
 80a036c:	8038      	strh	r0, [r7, #0]
 80a036e:	9201      	str	r2, [sp, #4]
  }

  bool setA =
    (currtouched & 0b111111)
    == (lasttouched & 0b111111)
    || !(currtouched & 0b111111);
 80a0370:	d012      	beq.n	80a0398 <loop+0x1b8>
 80a0372:	0683      	lsls	r3, r0, #26
 80a0374:	d010      	beq.n	80a0398 <loop+0x1b8>
 80a0376:	2400      	movs	r4, #0
 80a0378:	e003      	b.n	80a0382 <loop+0x1a2>
 
static void onA(uint32_t c) {
  for(uint16_t i = 0; i < stripA.numPixels(); i++) {
      stripA.setPixelColor(i  , c); // Draw new pixel
  }
  stripA.show();
 80a037a:	4833      	ldr	r0, [pc, #204]	; (80a0448 <loop+0x268>)
 80a037c:	f000 f912 	bl	80a05a4 <_ZN17Adafruit_NeoPixel4showEv>
 80a0380:	2401      	movs	r4, #1
  }

  bool setB =
    (currtouched & 0b111111000000)
    == (lasttouched & 0b111111000000)
    || !(currtouched & 0b111111000000);
 80a0382:	9b01      	ldr	r3, [sp, #4]
    onA(stripA.Color(redA, greenA, blueA));
  }

  bool setB =
    (currtouched & 0b111111000000)
    == (lasttouched & 0b111111000000)
 80a0384:	883a      	ldrh	r2, [r7, #0]
    || !(currtouched & 0b111111000000);
 80a0386:	881b      	ldrh	r3, [r3, #0]
 80a0388:	4053      	eors	r3, r2
 80a038a:	f413 6f7c 	tst.w	r3, #4032	; 0xfc0
 80a038e:	d018      	beq.n	80a03c2 <loop+0x1e2>
 80a0390:	f412 6f7c 	tst.w	r2, #4032	; 0xfc0
 80a0394:	d015      	beq.n	80a03c2 <loop+0x1e2>
 80a0396:	e04d      	b.n	80a0434 <loop+0x254>
    (currtouched & 0b111111)
    == (lasttouched & 0b111111)
    || !(currtouched & 0b111111);

  if (setA) {
    onA(stripA.Color(redA, greenA, blueA));
 80a0398:	462a      	mov	r2, r5
 80a039a:	4649      	mov	r1, r9
 80a039c:	4640      	mov	r0, r8
 80a039e:	f001 fa06 	bl	80a17ae <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a03a2:	2400      	movs	r4, #0
 80a03a4:	9002      	str	r0, [sp, #8]
 80a03a6:	b2a1      	uxth	r1, r4
      delay(25);
  }
}
 
static void onA(uint32_t c) {
  for(uint16_t i = 0; i < stripA.numPixels(); i++) {
 80a03a8:	4827      	ldr	r0, [pc, #156]	; (80a0448 <loop+0x268>)
 80a03aa:	9103      	str	r1, [sp, #12]
 80a03ac:	f001 fa04 	bl	80a17b8 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a03b0:	9903      	ldr	r1, [sp, #12]
 80a03b2:	3401      	adds	r4, #1
 80a03b4:	4288      	cmp	r0, r1
 80a03b6:	d9e0      	bls.n	80a037a <loop+0x19a>
      stripA.setPixelColor(i  , c); // Draw new pixel
 80a03b8:	9a02      	ldr	r2, [sp, #8]
 80a03ba:	4823      	ldr	r0, [pc, #140]	; (80a0448 <loop+0x268>)
 80a03bc:	f001 f9ac 	bl	80a1718 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a03c0:	e7f1      	b.n	80a03a6 <loop+0x1c6>
    (currtouched & 0b111111000000)
    == (lasttouched & 0b111111000000)
    || !(currtouched & 0b111111000000);

  if (setB) {
    onB(stripB.Color(redB, greenB, blueB));
 80a03c2:	4632      	mov	r2, r6
 80a03c4:	4659      	mov	r1, fp
 80a03c6:	4650      	mov	r0, sl
 80a03c8:	f001 f9f1 	bl	80a17ae <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a03cc:	2300      	movs	r3, #0
 80a03ce:	9002      	str	r0, [sp, #8]
 80a03d0:	b299      	uxth	r1, r3
  }
  stripA.show();
}
 
static void onB(uint32_t c) {
  for(uint16_t i = 0; i < stripB.numPixels(); i++) {
 80a03d2:	481e      	ldr	r0, [pc, #120]	; (80a044c <loop+0x26c>)
 80a03d4:	9303      	str	r3, [sp, #12]
 80a03d6:	9104      	str	r1, [sp, #16]
 80a03d8:	f001 f9ee 	bl	80a17b8 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a03dc:	9b03      	ldr	r3, [sp, #12]
 80a03de:	9904      	ldr	r1, [sp, #16]
 80a03e0:	3301      	adds	r3, #1
 80a03e2:	4288      	cmp	r0, r1
 80a03e4:	9303      	str	r3, [sp, #12]
 80a03e6:	9305      	str	r3, [sp, #20]
 80a03e8:	d905      	bls.n	80a03f6 <loop+0x216>
      stripB.setPixelColor(i  , c); // Draw new pixel
 80a03ea:	9a02      	ldr	r2, [sp, #8]
 80a03ec:	4817      	ldr	r0, [pc, #92]	; (80a044c <loop+0x26c>)
 80a03ee:	f001 f993 	bl	80a1718 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a03f2:	9b03      	ldr	r3, [sp, #12]
 80a03f4:	e7ec      	b.n	80a03d0 <loop+0x1f0>
  }
  stripB.show();
 80a03f6:	4815      	ldr	r0, [pc, #84]	; (80a044c <loop+0x26c>)
 80a03f8:	f000 f8d4 	bl	80a05a4 <_ZN17Adafruit_NeoPixel4showEv>

  if (setB) {
    onB(stripB.Color(redB, greenB, blueB));
  }

  if (!setA) {
 80a03fc:	b97c      	cbnz	r4, 80a041e <loop+0x23e>
 80a03fe:	2401      	movs	r4, #1
    chaseA(stripA.Color(redA, greenA, blueA));
 80a0400:	462a      	mov	r2, r5
 80a0402:	4649      	mov	r1, r9
 80a0404:	4640      	mov	r0, r8
 80a0406:	f001 f9d2 	bl	80a17ae <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a040a:	f7ff fe51 	bl	80a00b0 <_ZL6chaseAm>
  }

  if (!setB) {
 80a040e:	b934      	cbnz	r4, 80a041e <loop+0x23e>
    chaseB(stripB.Color(redB, greenB, blueB));
 80a0410:	4632      	mov	r2, r6
 80a0412:	4659      	mov	r1, fp
 80a0414:	4650      	mov	r0, sl
 80a0416:	f001 f9ca 	bl	80a17ae <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a041a:	f7ff fe6b 	bl	80a00f4 <_ZL6chaseBm>
  }


  Serial.println("loop");
 80a041e:	f001 ff2d 	bl	80a227c <_Z16_fetch_usbserialv>
 80a0422:	4910      	ldr	r1, [pc, #64]	; (80a0464 <loop+0x284>)
 80a0424:	f001 fd4b 	bl	80a1ebe <_ZN5Print7printlnEPKc>
  // chaseBoth();
  lasttouched = currtouched;
 80a0428:	883b      	ldrh	r3, [r7, #0]
 80a042a:	9a01      	ldr	r2, [sp, #4]
 80a042c:	8013      	strh	r3, [r2, #0]
}
 80a042e:	b009      	add	sp, #36	; 0x24
 80a0430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (setB) {
    onB(stripB.Color(redB, greenB, blueB));
  }

  if (!setA) {
 80a0434:	2c00      	cmp	r4, #0
 80a0436:	d1eb      	bne.n	80a0410 <loop+0x230>
 80a0438:	e7e2      	b.n	80a0400 <loop+0x220>
 80a043a:	bf00      	nop
 80a043c:	20000000 	.word	0x20000000
 80a0440:	080a2bb6 	.word	0x080a2bb6
 80a0444:	080a2bbe 	.word	0x080a2bbe
 80a0448:	20000070 	.word	0x20000070
 80a044c:	20000084 	.word	0x20000084
 80a0450:	2000009c 	.word	0x2000009c
 80a0454:	080a2bc7 	.word	0x080a2bc7
 80a0458:	200000a6 	.word	0x200000a6
 80a045c:	20000098 	.word	0x20000098
 80a0460:	200000a8 	.word	0x200000a8
 80a0464:	080a2bd1 	.word	0x080a2bd1

080a0468 <_GLOBAL__sub_I_SystemMode>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0468:	4b16      	ldr	r3, [pc, #88]	; (80a04c4 <_GLOBAL__sub_I_SystemMode+0x5c>)
static void onB(uint32_t c) {
  for(uint16_t i = 0; i < stripB.numPixels(); i++) {
      stripB.setPixelColor(i  , c); // Draw new pixel
  }
  stripB.show();
 80a046a:	b570      	push	{r4, r5, r6, lr}
 80a046c:	2400      	movs	r4, #0
 80a046e:	601c      	str	r4, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0470:	f001 face 	bl	80a1a10 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0478:	4b13      	ldr	r3, [pc, #76]	; (80a04c8 <_GLOBAL__sub_I_SystemMode+0x60>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a047a:	2003      	movs	r0, #3
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a047c:	701c      	strb	r4, [r3, #0]
 80a047e:	805c      	strh	r4, [r3, #2]
 80a0480:	809a      	strh	r2, [r3, #4]

#define PIXEL_PIN_A D2
#define PIXEL_COUNT_A 24
#define PIXEL_TYPE_A WS2812B
#define BRIGHTNESS_A 255 // 0 - 255
Adafruit_NeoPixel stripA(PIXEL_COUNT_A, PIXEL_PIN_A, PIXEL_TYPE_A);
 80a0482:	4c12      	ldr	r4, [pc, #72]	; (80a04cc <_GLOBAL__sub_I_SystemMode+0x64>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0484:	f001 fc06 	bl	80a1c94 <set_system_mode>
 80a0488:	2302      	movs	r3, #2
 80a048a:	461a      	mov	r2, r3
 80a048c:	4e10      	ldr	r6, [pc, #64]	; (80a04d0 <_GLOBAL__sub_I_SystemMode+0x68>)
 80a048e:	4d11      	ldr	r5, [pc, #68]	; (80a04d4 <_GLOBAL__sub_I_SystemMode+0x6c>)
 80a0490:	2118      	movs	r1, #24
 80a0492:	4620      	mov	r0, r4
 80a0494:	f000 f875 	bl	80a0582 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0498:	4620      	mov	r0, r4

#define PIXEL_PIN_B D3
#define PIXEL_COUNT_B 24
#define PIXEL_TYPE_B WS2812B
#define BRIGHTNESS_B 255 // 0 - 255
Adafruit_NeoPixel stripB(PIXEL_COUNT_B, PIXEL_PIN_B, PIXEL_TYPE_B);
 80a049a:	4c0f      	ldr	r4, [pc, #60]	; (80a04d8 <_GLOBAL__sub_I_SystemMode+0x70>)

#define PIXEL_PIN_A D2
#define PIXEL_COUNT_A 24
#define PIXEL_TYPE_A WS2812B
#define BRIGHTNESS_A 255 // 0 - 255
Adafruit_NeoPixel stripA(PIXEL_COUNT_A, PIXEL_PIN_A, PIXEL_TYPE_A);
 80a049c:	4632      	mov	r2, r6
 80a049e:	4629      	mov	r1, r5
 80a04a0:	f002 f9c6 	bl	80a2830 <__aeabi_atexit>

#define PIXEL_PIN_B D3
#define PIXEL_COUNT_B 24
#define PIXEL_TYPE_B WS2812B
#define BRIGHTNESS_B 255 // 0 - 255
Adafruit_NeoPixel stripB(PIXEL_COUNT_B, PIXEL_PIN_B, PIXEL_TYPE_B);
 80a04a4:	2302      	movs	r3, #2
 80a04a6:	2203      	movs	r2, #3
 80a04a8:	2118      	movs	r1, #24
 80a04aa:	4620      	mov	r0, r4
 80a04ac:	f000 f869 	bl	80a0582 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a04b0:	4632      	mov	r2, r6
 80a04b2:	4629      	mov	r1, r5
 80a04b4:	4620      	mov	r0, r4
 80a04b6:	f002 f9bb 	bl	80a2830 <__aeabi_atexit>
static void onB(uint32_t c) {
  for(uint16_t i = 0; i < stripB.numPixels(); i++) {
      stripB.setPixelColor(i  , c); // Draw new pixel
  }
  stripB.show();
 80a04ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#define PIXEL_COUNT_B 24
#define PIXEL_TYPE_B WS2812B
#define BRIGHTNESS_B 255 // 0 - 255
Adafruit_NeoPixel stripB(PIXEL_COUNT_B, PIXEL_PIN_B, PIXEL_TYPE_B);

Adafruit_MPR121 cap = Adafruit_MPR121();
 80a04be:	4807      	ldr	r0, [pc, #28]	; (80a04dc <_GLOBAL__sub_I_SystemMode+0x74>)
 80a04c0:	f001 b9ac 	b.w	80a181c <_ZN15Adafruit_MPR121C1Ev>
 80a04c4:	2000009c 	.word	0x2000009c
 80a04c8:	200000a0 	.word	0x200000a0
 80a04cc:	20000070 	.word	0x20000070
 80a04d0:	2000006c 	.word	0x2000006c
 80a04d4:	080a04e5 	.word	0x080a04e5
 80a04d8:	20000084 	.word	0x20000084
 80a04dc:	200000a6 	.word	0x200000a6

080a04e0 <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a04e0:	f001 bade 	b.w	80a1aa0 <HAL_Timer_Get_Micro_Seconds>

080a04e4 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a04e4:	b510      	push	{r4, lr}
 80a04e6:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a04e8:	68c0      	ldr	r0, [r0, #12]
 80a04ea:	b108      	cbz	r0, 80a04f0 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a04ec:	f001 fc66 	bl	80a1dbc <free>
  if (begun) pinMode(pin, INPUT);
 80a04f0:	7823      	ldrb	r3, [r4, #0]
 80a04f2:	b11b      	cbz	r3, 80a04fc <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a04f4:	2100      	movs	r1, #0
 80a04f6:	79e0      	ldrb	r0, [r4, #7]
 80a04f8:	f002 f902 	bl	80a2700 <pinMode>
}
 80a04fc:	4620      	mov	r0, r4
 80a04fe:	bd10      	pop	{r4, pc}

080a0500 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0500:	b538      	push	{r3, r4, r5, lr}
 80a0502:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0504:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0506:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0508:	b108      	cbz	r0, 80a050e <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a050a:	f001 fc57 	bl	80a1dbc <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a050e:	79a3      	ldrb	r3, [r4, #6]
 80a0510:	2b06      	cmp	r3, #6
 80a0512:	bf0c      	ite	eq
 80a0514:	2004      	moveq	r0, #4
 80a0516:	2003      	movne	r0, #3
 80a0518:	4368      	muls	r0, r5
 80a051a:	b280      	uxth	r0, r0
 80a051c:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a051e:	f001 fc45 	bl	80a1dac <malloc>
 80a0522:	60e0      	str	r0, [r4, #12]
 80a0524:	b128      	cbz	r0, 80a0532 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a0526:	88a2      	ldrh	r2, [r4, #4]
 80a0528:	2100      	movs	r1, #0
 80a052a:	f002 faea 	bl	80a2b02 <memset>
    numLEDs = n;
 80a052e:	8065      	strh	r5, [r4, #2]
 80a0530:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a0532:	80a0      	strh	r0, [r4, #4]
 80a0534:	8060      	strh	r0, [r4, #2]
 80a0536:	bd38      	pop	{r3, r4, r5, pc}

080a0538 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a0538:	b510      	push	{r4, lr}
 80a053a:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a053c:	2101      	movs	r1, #1
 80a053e:	79c0      	ldrb	r0, [r0, #7]
 80a0540:	f002 f8de 	bl	80a2700 <pinMode>
  digitalWrite(pin, LOW);
 80a0544:	2100      	movs	r1, #0
 80a0546:	79e0      	ldrb	r0, [r4, #7]
 80a0548:	f002 f8eb 	bl	80a2722 <digitalWrite>
  begun = true;
 80a054c:	2301      	movs	r3, #1
 80a054e:	7023      	strb	r3, [r4, #0]
 80a0550:	bd10      	pop	{r4, pc}

080a0552 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0552:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0554:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0556:	4605      	mov	r5, r0
 80a0558:	460c      	mov	r4, r1
    if (begun) {
 80a055a:	b11b      	cbz	r3, 80a0564 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a055c:	2100      	movs	r1, #0
 80a055e:	79c0      	ldrb	r0, [r0, #7]
 80a0560:	f002 f8ce 	bl	80a2700 <pinMode>
    }
    pin = p;
    if (begun) {
 80a0564:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a0566:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0568:	b153      	cbz	r3, 80a0580 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a056a:	b2a4      	uxth	r4, r4
 80a056c:	4620      	mov	r0, r4
 80a056e:	2101      	movs	r1, #1
 80a0570:	f002 f8c6 	bl	80a2700 <pinMode>
        digitalWrite(p, LOW);
 80a0574:	4620      	mov	r0, r4
    }
}
 80a0576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a057a:	2100      	movs	r1, #0
 80a057c:	f002 b8d1 	b.w	80a2722 <digitalWrite>
 80a0580:	bd38      	pop	{r3, r4, r5, pc}

080a0582 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0582:	b570      	push	{r4, r5, r6, lr}
 80a0584:	4604      	mov	r4, r0
 80a0586:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0588:	2500      	movs	r5, #0
 80a058a:	7183      	strb	r3, [r0, #6]
 80a058c:	7005      	strb	r5, [r0, #0]
 80a058e:	7205      	strb	r5, [r0, #8]
 80a0590:	60c5      	str	r5, [r0, #12]
 80a0592:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a0594:	f7ff ffb4 	bl	80a0500 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0598:	4620      	mov	r0, r4
 80a059a:	4631      	mov	r1, r6
 80a059c:	f7ff ffd9 	bl	80a0552 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a05a0:	4620      	mov	r0, r4
 80a05a2:	bd70      	pop	{r4, r5, r6, pc}

080a05a4 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a05a4:	68c3      	ldr	r3, [r0, #12]
 80a05a6:	2b00      	cmp	r3, #0
 80a05a8:	f000 858e 	beq.w	80a10c8 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a05ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a05b0:	4604      	mov	r4, r0
 80a05b2:	7983      	ldrb	r3, [r0, #6]
 80a05b4:	b086      	sub	sp, #24
 80a05b6:	3b02      	subs	r3, #2
 80a05b8:	b2db      	uxtb	r3, r3
 80a05ba:	2b04      	cmp	r3, #4
 80a05bc:	bf96      	itet	ls
 80a05be:	4a29      	ldrls	r2, [pc, #164]	; (80a0664 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a05c0:	2532      	movhi	r5, #50	; 0x32
 80a05c2:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a05c6:	f7ff ff8b 	bl	80a04e0 <micros>
 80a05ca:	6923      	ldr	r3, [r4, #16]
 80a05cc:	1ac0      	subs	r0, r0, r3
 80a05ce:	42a8      	cmp	r0, r5
 80a05d0:	d3f9      	bcc.n	80a05c6 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a05d2:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a05d4:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a05d6:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a05d8:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a05da:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a05de:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a05e2:	f000 8272 	beq.w	80a0aca <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a05e6:	2907      	cmp	r1, #7
 80a05e8:	f000 826f 	beq.w	80a0aca <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a05ec:	2906      	cmp	r1, #6
 80a05ee:	f000 8432 	beq.w	80a0e56 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a05f2:	2905      	cmp	r1, #5
 80a05f4:	f000 83ab 	beq.w	80a0d4e <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a05f8:	2908      	cmp	r1, #8
 80a05fa:	f000 83a8 	beq.w	80a0d4e <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a05fe:	2900      	cmp	r1, #0
 80a0600:	f040 8563 	bne.w	80a10ca <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a0604:	4a18      	ldr	r2, [pc, #96]	; (80a0668 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0606:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a060a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a060e:	b29b      	uxth	r3, r3
 80a0610:	2b00      	cmp	r3, #0
 80a0612:	f000 8395 	beq.w	80a0d40 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0616:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0618:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a061c:	f10e 0503 	add.w	r5, lr, #3
 80a0620:	3b03      	subs	r3, #3
 80a0622:	b29b      	uxth	r3, r3
 80a0624:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0628:	f89e 3000 	ldrb.w	r3, [lr]
 80a062c:	b2db      	uxtb	r3, r3
 80a062e:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0632:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0636:	b2db      	uxtb	r3, r3
 80a0638:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a063c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0640:	b2db      	uxtb	r3, r3
 80a0642:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0646:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a064a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a064e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0652:	021b      	lsls	r3, r3, #8
 80a0654:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0658:	4303      	orrs	r3, r0
 80a065a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a065c:	f88d 1005 	strb.w	r1, [sp, #5]
 80a0660:	e11b      	b.n	80a089a <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a0662:	bf00      	nop
 80a0664:	080a2bd8 	.word	0x080a2bd8
 80a0668:	200000ac 	.word	0x200000ac
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a066c:	4600      	mov	r0, r0
 80a066e:	bf00      	nop
 80a0670:	bf00      	nop
 80a0672:	bf00      	nop
 80a0674:	bf00      	nop
 80a0676:	bf00      	nop
 80a0678:	bf00      	nop
 80a067a:	bf00      	nop
 80a067c:	bf00      	nop
 80a067e:	bf00      	nop
 80a0680:	bf00      	nop
 80a0682:	bf00      	nop
 80a0684:	bf00      	nop
 80a0686:	bf00      	nop
 80a0688:	bf00      	nop
 80a068a:	bf00      	nop
 80a068c:	bf00      	nop
 80a068e:	bf00      	nop
 80a0690:	bf00      	nop
 80a0692:	bf00      	nop
 80a0694:	bf00      	nop
 80a0696:	bf00      	nop
 80a0698:	bf00      	nop
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
 80a06c2:	bf00      	nop
 80a06c4:	bf00      	nop
 80a06c6:	bf00      	nop
 80a06c8:	bf00      	nop
 80a06ca:	bf00      	nop
 80a06cc:	bf00      	nop
 80a06ce:	bf00      	nop
 80a06d0:	bf00      	nop
 80a06d2:	bf00      	nop
 80a06d4:	bf00      	nop
 80a06d6:	bf00      	nop
 80a06d8:	bf00      	nop
 80a06da:	bf00      	nop
 80a06dc:	bf00      	nop
 80a06de:	bf00      	nop
 80a06e0:	bf00      	nop
 80a06e2:	bf00      	nop
 80a06e4:	bf00      	nop
 80a06e6:	bf00      	nop
 80a06e8:	bf00      	nop
 80a06ea:	bf00      	nop
 80a06ec:	bf00      	nop
 80a06ee:	bf00      	nop
 80a06f0:	bf00      	nop
 80a06f2:	bf00      	nop
 80a06f4:	bf00      	nop
 80a06f6:	bf00      	nop
 80a06f8:	bf00      	nop
 80a06fa:	bf00      	nop
 80a06fc:	bf00      	nop
 80a06fe:	bf00      	nop
 80a0700:	bf00      	nop
 80a0702:	bf00      	nop
 80a0704:	bf00      	nop
 80a0706:	bf00      	nop
 80a0708:	bf00      	nop
 80a070a:	bf00      	nop
 80a070c:	bf00      	nop
 80a070e:	bf00      	nop
 80a0710:	bf00      	nop
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
 80a071e:	bf00      	nop
 80a0720:	bf00      	nop
 80a0722:	bf00      	nop
 80a0724:	bf00      	nop
 80a0726:	bf00      	nop
 80a0728:	bf00      	nop
 80a072a:	bf00      	nop
 80a072c:	bf00      	nop
 80a072e:	bf00      	nop
 80a0730:	bf00      	nop
 80a0732:	bf00      	nop
 80a0734:	bf00      	nop
 80a0736:	bf00      	nop
 80a0738:	bf00      	nop
 80a073a:	bf00      	nop
 80a073c:	bf00      	nop
 80a073e:	bf00      	nop
 80a0740:	bf00      	nop
 80a0742:	bf00      	nop
 80a0744:	bf00      	nop
 80a0746:	bf00      	nop
 80a0748:	bf00      	nop
 80a074a:	bf00      	nop
 80a074c:	bf00      	nop
 80a074e:	bf00      	nop
 80a0750:	bf00      	nop
 80a0752:	bf00      	nop
 80a0754:	bf00      	nop
 80a0756:	bf00      	nop
 80a0758:	bf00      	nop
 80a075a:	bf00      	nop
 80a075c:	bf00      	nop
 80a075e:	bf00      	nop
 80a0760:	bf00      	nop
 80a0762:	bf00      	nop
 80a0764:	bf00      	nop
 80a0766:	bf00      	nop
 80a0768:	bf00      	nop
 80a076a:	bf00      	nop
 80a076c:	bf00      	nop
 80a076e:	bf00      	nop
 80a0770:	bf00      	nop
 80a0772:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0774:	79e3      	ldrb	r3, [r4, #7]
 80a0776:	6810      	ldr	r0, [r2, #0]
 80a0778:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a077c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0780:	88bf      	ldrh	r7, [r7, #4]
 80a0782:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0786:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0788:	4600      	mov	r0, r0
 80a078a:	bf00      	nop
 80a078c:	bf00      	nop
 80a078e:	bf00      	nop
 80a0790:	bf00      	nop
 80a0792:	bf00      	nop
 80a0794:	bf00      	nop
 80a0796:	bf00      	nop
 80a0798:	bf00      	nop
 80a079a:	bf00      	nop
 80a079c:	bf00      	nop
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
 80a07a6:	bf00      	nop
 80a07a8:	bf00      	nop
 80a07aa:	bf00      	nop
 80a07ac:	bf00      	nop
 80a07ae:	bf00      	nop
 80a07b0:	bf00      	nop
 80a07b2:	bf00      	nop
 80a07b4:	bf00      	nop
 80a07b6:	bf00      	nop
 80a07b8:	bf00      	nop
 80a07ba:	bf00      	nop
 80a07bc:	bf00      	nop
 80a07be:	bf00      	nop
 80a07c0:	bf00      	nop
 80a07c2:	bf00      	nop
 80a07c4:	bf00      	nop
 80a07c6:	bf00      	nop
 80a07c8:	bf00      	nop
 80a07ca:	bf00      	nop
 80a07cc:	bf00      	nop
 80a07ce:	bf00      	nop
 80a07d0:	bf00      	nop
 80a07d2:	bf00      	nop
 80a07d4:	bf00      	nop
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	bf00      	nop
 80a0816:	bf00      	nop
 80a0818:	bf00      	nop
 80a081a:	bf00      	nop
 80a081c:	bf00      	nop
 80a081e:	bf00      	nop
 80a0820:	bf00      	nop
 80a0822:	bf00      	nop
 80a0824:	bf00      	nop
 80a0826:	bf00      	nop
 80a0828:	bf00      	nop
 80a082a:	bf00      	nop
 80a082c:	bf00      	nop
 80a082e:	bf00      	nop
 80a0830:	bf00      	nop
 80a0832:	bf00      	nop
 80a0834:	bf00      	nop
 80a0836:	bf00      	nop
 80a0838:	bf00      	nop
 80a083a:	bf00      	nop
 80a083c:	bf00      	nop
 80a083e:	bf00      	nop
 80a0840:	bf00      	nop
 80a0842:	bf00      	nop
 80a0844:	bf00      	nop
 80a0846:	bf00      	nop
 80a0848:	bf00      	nop
 80a084a:	bf00      	nop
 80a084c:	bf00      	nop
 80a084e:	bf00      	nop
 80a0850:	bf00      	nop
 80a0852:	bf00      	nop
 80a0854:	bf00      	nop
 80a0856:	bf00      	nop
 80a0858:	bf00      	nop
 80a085a:	bf00      	nop
 80a085c:	bf00      	nop
 80a085e:	bf00      	nop
 80a0860:	bf00      	nop
 80a0862:	bf00      	nop
 80a0864:	bf00      	nop
 80a0866:	bf00      	nop
 80a0868:	bf00      	nop
 80a086a:	bf00      	nop
 80a086c:	bf00      	nop
 80a086e:	bf00      	nop
 80a0870:	bf00      	nop
 80a0872:	bf00      	nop
 80a0874:	bf00      	nop
 80a0876:	bf00      	nop
 80a0878:	bf00      	nop
 80a087a:	bf00      	nop
 80a087c:	bf00      	nop
 80a087e:	bf00      	nop
 80a0880:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0882:	9b04      	ldr	r3, [sp, #16]
 80a0884:	085b      	lsrs	r3, r3, #1
 80a0886:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0888:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a088c:	3301      	adds	r3, #1
 80a088e:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0890:	2b17      	cmp	r3, #23
 80a0892:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0896:	f200 82db 	bhi.w	80a0e50 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a089a:	79e3      	ldrb	r3, [r4, #7]
 80a089c:	6810      	ldr	r0, [r2, #0]
 80a089e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a08a2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a08a6:	88bf      	ldrh	r7, [r7, #4]
 80a08a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a08ac:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a08ae:	9803      	ldr	r0, [sp, #12]
 80a08b0:	9b04      	ldr	r3, [sp, #16]
 80a08b2:	4218      	tst	r0, r3
 80a08b4:	f47f aeda 	bne.w	80a066c <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a08b8:	4600      	mov	r0, r0
 80a08ba:	bf00      	nop
 80a08bc:	bf00      	nop
 80a08be:	bf00      	nop
 80a08c0:	bf00      	nop
 80a08c2:	bf00      	nop
 80a08c4:	bf00      	nop
 80a08c6:	bf00      	nop
 80a08c8:	bf00      	nop
 80a08ca:	bf00      	nop
 80a08cc:	bf00      	nop
 80a08ce:	bf00      	nop
 80a08d0:	bf00      	nop
 80a08d2:	bf00      	nop
 80a08d4:	bf00      	nop
 80a08d6:	bf00      	nop
 80a08d8:	bf00      	nop
 80a08da:	bf00      	nop
 80a08dc:	bf00      	nop
 80a08de:	bf00      	nop
 80a08e0:	bf00      	nop
 80a08e2:	bf00      	nop
 80a08e4:	bf00      	nop
 80a08e6:	bf00      	nop
 80a08e8:	bf00      	nop
 80a08ea:	bf00      	nop
 80a08ec:	bf00      	nop
 80a08ee:	bf00      	nop
 80a08f0:	bf00      	nop
 80a08f2:	bf00      	nop
 80a08f4:	bf00      	nop
 80a08f6:	bf00      	nop
 80a08f8:	bf00      	nop
 80a08fa:	bf00      	nop
 80a08fc:	bf00      	nop
 80a08fe:	bf00      	nop
 80a0900:	bf00      	nop
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a090a:	79e3      	ldrb	r3, [r4, #7]
 80a090c:	6810      	ldr	r0, [r2, #0]
 80a090e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0912:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0916:	88bf      	ldrh	r7, [r7, #4]
 80a0918:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a091c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a091e:	4600      	mov	r0, r0
 80a0920:	bf00      	nop
 80a0922:	bf00      	nop
 80a0924:	bf00      	nop
 80a0926:	bf00      	nop
 80a0928:	bf00      	nop
 80a092a:	bf00      	nop
 80a092c:	bf00      	nop
 80a092e:	bf00      	nop
 80a0930:	bf00      	nop
 80a0932:	bf00      	nop
 80a0934:	bf00      	nop
 80a0936:	bf00      	nop
 80a0938:	bf00      	nop
 80a093a:	bf00      	nop
 80a093c:	bf00      	nop
 80a093e:	bf00      	nop
 80a0940:	bf00      	nop
 80a0942:	bf00      	nop
 80a0944:	bf00      	nop
 80a0946:	bf00      	nop
 80a0948:	bf00      	nop
 80a094a:	bf00      	nop
 80a094c:	bf00      	nop
 80a094e:	bf00      	nop
 80a0950:	bf00      	nop
 80a0952:	bf00      	nop
 80a0954:	bf00      	nop
 80a0956:	bf00      	nop
 80a0958:	bf00      	nop
 80a095a:	bf00      	nop
 80a095c:	bf00      	nop
 80a095e:	bf00      	nop
 80a0960:	bf00      	nop
 80a0962:	bf00      	nop
 80a0964:	bf00      	nop
 80a0966:	bf00      	nop
 80a0968:	bf00      	nop
 80a096a:	bf00      	nop
 80a096c:	bf00      	nop
 80a096e:	bf00      	nop
 80a0970:	bf00      	nop
 80a0972:	bf00      	nop
 80a0974:	bf00      	nop
 80a0976:	bf00      	nop
 80a0978:	bf00      	nop
 80a097a:	bf00      	nop
 80a097c:	bf00      	nop
 80a097e:	bf00      	nop
 80a0980:	bf00      	nop
 80a0982:	bf00      	nop
 80a0984:	bf00      	nop
 80a0986:	bf00      	nop
 80a0988:	bf00      	nop
 80a098a:	bf00      	nop
 80a098c:	bf00      	nop
 80a098e:	bf00      	nop
 80a0990:	bf00      	nop
 80a0992:	bf00      	nop
 80a0994:	bf00      	nop
 80a0996:	bf00      	nop
 80a0998:	bf00      	nop
 80a099a:	bf00      	nop
 80a099c:	bf00      	nop
 80a099e:	bf00      	nop
 80a09a0:	bf00      	nop
 80a09a2:	bf00      	nop
 80a09a4:	bf00      	nop
 80a09a6:	bf00      	nop
 80a09a8:	bf00      	nop
 80a09aa:	bf00      	nop
 80a09ac:	bf00      	nop
 80a09ae:	bf00      	nop
 80a09b0:	bf00      	nop
 80a09b2:	bf00      	nop
 80a09b4:	bf00      	nop
 80a09b6:	bf00      	nop
 80a09b8:	bf00      	nop
 80a09ba:	bf00      	nop
 80a09bc:	bf00      	nop
 80a09be:	bf00      	nop
 80a09c0:	bf00      	nop
 80a09c2:	bf00      	nop
 80a09c4:	bf00      	nop
 80a09c6:	bf00      	nop
 80a09c8:	bf00      	nop
 80a09ca:	bf00      	nop
 80a09cc:	bf00      	nop
 80a09ce:	bf00      	nop
 80a09d0:	bf00      	nop
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
 80a09e4:	bf00      	nop
 80a09e6:	bf00      	nop
 80a09e8:	bf00      	nop
 80a09ea:	bf00      	nop
 80a09ec:	bf00      	nop
 80a09ee:	bf00      	nop
 80a09f0:	bf00      	nop
 80a09f2:	bf00      	nop
 80a09f4:	bf00      	nop
 80a09f6:	bf00      	nop
 80a09f8:	bf00      	nop
 80a09fa:	bf00      	nop
 80a09fc:	bf00      	nop
 80a09fe:	bf00      	nop
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
 80a0a04:	bf00      	nop
 80a0a06:	bf00      	nop
 80a0a08:	bf00      	nop
 80a0a0a:	bf00      	nop
 80a0a0c:	bf00      	nop
 80a0a0e:	bf00      	nop
 80a0a10:	bf00      	nop
 80a0a12:	bf00      	nop
 80a0a14:	bf00      	nop
 80a0a16:	bf00      	nop
 80a0a18:	bf00      	nop
 80a0a1a:	bf00      	nop
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
 80a0a26:	bf00      	nop
 80a0a28:	bf00      	nop
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
 80a0a66:	bf00      	nop
 80a0a68:	bf00      	nop
 80a0a6a:	bf00      	nop
 80a0a6c:	bf00      	nop
 80a0a6e:	bf00      	nop
 80a0a70:	bf00      	nop
 80a0a72:	bf00      	nop
 80a0a74:	bf00      	nop
 80a0a76:	bf00      	nop
 80a0a78:	bf00      	nop
 80a0a7a:	bf00      	nop
 80a0a7c:	bf00      	nop
 80a0a7e:	bf00      	nop
 80a0a80:	bf00      	nop
 80a0a82:	bf00      	nop
 80a0a84:	bf00      	nop
 80a0a86:	bf00      	nop
 80a0a88:	bf00      	nop
 80a0a8a:	bf00      	nop
 80a0a8c:	bf00      	nop
 80a0a8e:	bf00      	nop
 80a0a90:	bf00      	nop
 80a0a92:	bf00      	nop
 80a0a94:	bf00      	nop
 80a0a96:	bf00      	nop
 80a0a98:	bf00      	nop
 80a0a9a:	bf00      	nop
 80a0a9c:	bf00      	nop
 80a0a9e:	bf00      	nop
 80a0aa0:	bf00      	nop
 80a0aa2:	bf00      	nop
 80a0aa4:	bf00      	nop
 80a0aa6:	bf00      	nop
 80a0aa8:	bf00      	nop
 80a0aaa:	bf00      	nop
 80a0aac:	bf00      	nop
 80a0aae:	bf00      	nop
 80a0ab0:	bf00      	nop
 80a0ab2:	bf00      	nop
 80a0ab4:	bf00      	nop
 80a0ab6:	bf00      	nop
 80a0ab8:	bf00      	nop
 80a0aba:	bf00      	nop
 80a0abc:	bf00      	nop
 80a0abe:	bf00      	nop
 80a0ac0:	bf00      	nop
 80a0ac2:	bf00      	nop
 80a0ac4:	bf00      	nop
 80a0ac6:	bf00      	nop
 80a0ac8:	e6db      	b.n	80a0882 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0aca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0ace:	4a17      	ldr	r2, [pc, #92]	; (80a0b2c <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a0ad0:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a0ad2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0ad6:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0ad8:	2b00      	cmp	r3, #0
 80a0ada:	f000 8131 	beq.w	80a0d40 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0ade:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0ae0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0ae4:	f10e 0103 	add.w	r1, lr, #3
 80a0ae8:	3b03      	subs	r3, #3
 80a0aea:	b29b      	uxth	r3, r3
 80a0aec:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0af0:	f89e 3000 	ldrb.w	r3, [lr]
 80a0af4:	b2db      	uxtb	r3, r3
 80a0af6:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0afa:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0afe:	b2db      	uxtb	r3, r3
 80a0b00:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0b04:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0b08:	b2db      	uxtb	r3, r3
 80a0b0a:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0b0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0b12:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a0b16:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a0b1a:	0200      	lsls	r0, r0, #8
 80a0b1c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a0b20:	433b      	orrs	r3, r7
 80a0b22:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0b24:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0b28:	e080      	b.n	80a0c2c <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a0b2a:	bf00      	nop
 80a0b2c:	200000ac 	.word	0x200000ac
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0b30:	4600      	mov	r0, r0
 80a0b32:	bf00      	nop
 80a0b34:	bf00      	nop
 80a0b36:	bf00      	nop
 80a0b38:	bf00      	nop
 80a0b3a:	bf00      	nop
 80a0b3c:	bf00      	nop
 80a0b3e:	bf00      	nop
 80a0b40:	bf00      	nop
 80a0b42:	bf00      	nop
 80a0b44:	bf00      	nop
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
 80a0b7a:	bf00      	nop
 80a0b7c:	bf00      	nop
 80a0b7e:	bf00      	nop
 80a0b80:	bf00      	nop
 80a0b82:	bf00      	nop
 80a0b84:	bf00      	nop
 80a0b86:	bf00      	nop
 80a0b88:	bf00      	nop
 80a0b8a:	bf00      	nop
 80a0b8c:	bf00      	nop
 80a0b8e:	bf00      	nop
 80a0b90:	bf00      	nop
 80a0b92:	bf00      	nop
 80a0b94:	bf00      	nop
 80a0b96:	bf00      	nop
 80a0b98:	bf00      	nop
 80a0b9a:	bf00      	nop
 80a0b9c:	bf00      	nop
 80a0b9e:	bf00      	nop
 80a0ba0:	bf00      	nop
 80a0ba2:	bf00      	nop
 80a0ba4:	bf00      	nop
 80a0ba6:	bf00      	nop
 80a0ba8:	bf00      	nop
 80a0baa:	bf00      	nop
 80a0bac:	bf00      	nop
 80a0bae:	bf00      	nop
 80a0bb0:	bf00      	nop
 80a0bb2:	bf00      	nop
 80a0bb4:	bf00      	nop
 80a0bb6:	bf00      	nop
 80a0bb8:	bf00      	nop
 80a0bba:	bf00      	nop
 80a0bbc:	bf00      	nop
 80a0bbe:	bf00      	nop
 80a0bc0:	bf00      	nop
 80a0bc2:	bf00      	nop
 80a0bc4:	bf00      	nop
 80a0bc6:	bf00      	nop
 80a0bc8:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a0bca:	79e3      	ldrb	r3, [r4, #7]
 80a0bcc:	6810      	ldr	r0, [r2, #0]
 80a0bce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0bd2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0bd6:	88bf      	ldrh	r7, [r7, #4]
 80a0bd8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0bdc:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0bde:	4600      	mov	r0, r0
 80a0be0:	bf00      	nop
 80a0be2:	bf00      	nop
 80a0be4:	bf00      	nop
 80a0be6:	bf00      	nop
 80a0be8:	bf00      	nop
 80a0bea:	bf00      	nop
 80a0bec:	bf00      	nop
 80a0bee:	bf00      	nop
 80a0bf0:	bf00      	nop
 80a0bf2:	bf00      	nop
 80a0bf4:	bf00      	nop
 80a0bf6:	bf00      	nop
 80a0bf8:	bf00      	nop
 80a0bfa:	bf00      	nop
 80a0bfc:	bf00      	nop
 80a0bfe:	bf00      	nop
 80a0c00:	bf00      	nop
 80a0c02:	bf00      	nop
 80a0c04:	bf00      	nop
 80a0c06:	bf00      	nop
 80a0c08:	bf00      	nop
 80a0c0a:	bf00      	nop
 80a0c0c:	bf00      	nop
 80a0c0e:	bf00      	nop
 80a0c10:	bf00      	nop
 80a0c12:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0c14:	9b04      	ldr	r3, [sp, #16]
 80a0c16:	085b      	lsrs	r3, r3, #1
 80a0c18:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0c1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0c1e:	3301      	adds	r3, #1
 80a0c20:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0c22:	2b17      	cmp	r3, #23
 80a0c24:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0c28:	f200 8083 	bhi.w	80a0d32 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a0c2c:	79e3      	ldrb	r3, [r4, #7]
 80a0c2e:	6810      	ldr	r0, [r2, #0]
 80a0c30:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c34:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c38:	88bf      	ldrh	r7, [r7, #4]
 80a0c3a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c3e:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0c40:	9803      	ldr	r0, [sp, #12]
 80a0c42:	9b04      	ldr	r3, [sp, #16]
 80a0c44:	4218      	tst	r0, r3
 80a0c46:	f47f af73 	bne.w	80a0b30 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0c4a:	4600      	mov	r0, r0
 80a0c4c:	bf00      	nop
 80a0c4e:	bf00      	nop
 80a0c50:	bf00      	nop
 80a0c52:	bf00      	nop
 80a0c54:	bf00      	nop
 80a0c56:	bf00      	nop
 80a0c58:	bf00      	nop
 80a0c5a:	bf00      	nop
 80a0c5c:	bf00      	nop
 80a0c5e:	bf00      	nop
 80a0c60:	bf00      	nop
 80a0c62:	bf00      	nop
 80a0c64:	bf00      	nop
 80a0c66:	bf00      	nop
 80a0c68:	bf00      	nop
 80a0c6a:	bf00      	nop
 80a0c6c:	bf00      	nop
 80a0c6e:	bf00      	nop
 80a0c70:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a0c72:	79e3      	ldrb	r3, [r4, #7]
 80a0c74:	6810      	ldr	r0, [r2, #0]
 80a0c76:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c7a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c7e:	88bf      	ldrh	r7, [r7, #4]
 80a0c80:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c84:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0c86:	4600      	mov	r0, r0
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
 80a0c8c:	bf00      	nop
 80a0c8e:	bf00      	nop
 80a0c90:	bf00      	nop
 80a0c92:	bf00      	nop
 80a0c94:	bf00      	nop
 80a0c96:	bf00      	nop
 80a0c98:	bf00      	nop
 80a0c9a:	bf00      	nop
 80a0c9c:	bf00      	nop
 80a0c9e:	bf00      	nop
 80a0ca0:	bf00      	nop
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	bf00      	nop
 80a0d00:	bf00      	nop
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
 80a0d0e:	bf00      	nop
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	e770      	b.n	80a0c14 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0d32:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0d36:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0d38:	b29b      	uxth	r3, r3
 80a0d3a:	2b00      	cmp	r3, #0
 80a0d3c:	f47f aecf 	bne.w	80a0ade <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a0d40:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0d42:	f7ff fbcd 	bl	80a04e0 <micros>
 80a0d46:	6120      	str	r0, [r4, #16]
}
 80a0d48:	b006      	add	sp, #24
 80a0d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0d4e:	4b5e      	ldr	r3, [pc, #376]	; (80a0ec8 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a0d50:	4a5e      	ldr	r2, [pc, #376]	; (80a0ecc <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0d52:	4618      	mov	r0, r3
 80a0d54:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0d56:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0d5a:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0d5c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0d60:	b292      	uxth	r2, r2
 80a0d62:	2a00      	cmp	r2, #0
 80a0d64:	d0ec      	beq.n	80a0d40 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0d66:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0d6a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0d6e:	f10e 0503 	add.w	r5, lr, #3
 80a0d72:	3a03      	subs	r2, #3
 80a0d74:	b292      	uxth	r2, r2
 80a0d76:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0d7a:	f89e 2000 	ldrb.w	r2, [lr]
 80a0d7e:	b2d2      	uxtb	r2, r2
 80a0d80:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0d84:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a0d88:	b2d2      	uxtb	r2, r2
 80a0d8a:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0d8e:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a0d92:	b2d2      	uxtb	r2, r2
 80a0d94:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0d98:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0d9c:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a0da0:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a0da4:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a0da8:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a0dac:	ea42 020c 	orr.w	r2, r2, ip
 80a0db0:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0db2:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a0db6:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0db8:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0dba:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0dbe:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0dc2:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0dc6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0dca:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0dcc:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0dd0:	9e03      	ldr	r6, [sp, #12]
 80a0dd2:	9a04      	ldr	r2, [sp, #16]
 80a0dd4:	4216      	tst	r6, r2
 80a0dd6:	d023      	beq.n	80a0e20 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0dd8:	685a      	ldr	r2, [r3, #4]
 80a0dda:	9e05      	ldr	r6, [sp, #20]
 80a0ddc:	1b92      	subs	r2, r2, r6
 80a0dde:	2a4f      	cmp	r2, #79	; 0x4f
 80a0de0:	d9fa      	bls.n	80a0dd8 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a0de2:	79e2      	ldrb	r2, [r4, #7]
 80a0de4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0de8:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0dec:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0df0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0df4:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0df8:	6842      	ldr	r2, [r0, #4]
 80a0dfa:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0dfc:	685a      	ldr	r2, [r3, #4]
 80a0dfe:	9e05      	ldr	r6, [sp, #20]
 80a0e00:	1b92      	subs	r2, r2, r6
 80a0e02:	2a07      	cmp	r2, #7
 80a0e04:	d9fa      	bls.n	80a0dfc <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a0e06:	9a04      	ldr	r2, [sp, #16]
 80a0e08:	0852      	lsrs	r2, r2, #1
 80a0e0a:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0e0c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0e10:	3201      	adds	r2, #1
 80a0e12:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0e14:	2a17      	cmp	r2, #23
 80a0e16:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0e1a:	d9cc      	bls.n	80a0db6 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0e1c:	46ae      	mov	lr, r5
 80a0e1e:	e79d      	b.n	80a0d5c <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0e20:	685a      	ldr	r2, [r3, #4]
 80a0e22:	9e05      	ldr	r6, [sp, #20]
 80a0e24:	1b92      	subs	r2, r2, r6
 80a0e26:	2a18      	cmp	r2, #24
 80a0e28:	d9fa      	bls.n	80a0e20 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a0e2a:	79e2      	ldrb	r2, [r4, #7]
 80a0e2c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0e30:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0e34:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0e38:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0e3c:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0e40:	6842      	ldr	r2, [r0, #4]
 80a0e42:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0e44:	685a      	ldr	r2, [r3, #4]
 80a0e46:	9e05      	ldr	r6, [sp, #20]
 80a0e48:	1b92      	subs	r2, r2, r6
 80a0e4a:	2a45      	cmp	r2, #69	; 0x45
 80a0e4c:	d9fa      	bls.n	80a0e44 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a0e4e:	e7da      	b.n	80a0e06 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0e50:	46ae      	mov	lr, r5
 80a0e52:	f7ff bbda 	b.w	80a060a <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a0e56:	4a1d      	ldr	r2, [pc, #116]	; (80a0ecc <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a0e58:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a0e5c:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0e5e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0e62:	b29b      	uxth	r3, r3
 80a0e64:	2b00      	cmp	r3, #0
 80a0e66:	f43f af6b 	beq.w	80a0d40 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a0e6a:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0e6c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0e70:	f10e 0104 	add.w	r1, lr, #4
 80a0e74:	3b04      	subs	r3, #4
 80a0e76:	b29b      	uxth	r3, r3
 80a0e78:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0e7c:	f89e 3000 	ldrb.w	r3, [lr]
 80a0e80:	b2db      	uxtb	r3, r3
 80a0e82:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0e86:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0e8a:	b2db      	uxtb	r3, r3
 80a0e8c:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0e90:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0e94:	b2db      	uxtb	r3, r3
 80a0e96:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0e9a:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a0e9e:	b2db      	uxtb	r3, r3
 80a0ea0:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0ea4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0ea8:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a0eac:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a0eb0:	043f      	lsls	r7, r7, #16
 80a0eb2:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a0eb6:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a0eba:	4303      	orrs	r3, r0
 80a0ebc:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a0ec0:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0ec2:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0ec6:	e07e      	b.n	80a0fc6 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a0ec8:	e0001000 	.word	0xe0001000
 80a0ecc:	200000ac 	.word	0x200000ac
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ed0:	4600      	mov	r0, r0
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a0f3e:	79e3      	ldrb	r3, [r4, #7]
 80a0f40:	6810      	ldr	r0, [r2, #0]
 80a0f42:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0f46:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0f4a:	88bf      	ldrh	r7, [r7, #4]
 80a0f4c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f50:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f52:	4600      	mov	r0, r0
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
 80a0f60:	bf00      	nop
 80a0f62:	bf00      	nop
 80a0f64:	bf00      	nop
 80a0f66:	bf00      	nop
 80a0f68:	bf00      	nop
 80a0f6a:	bf00      	nop
 80a0f6c:	bf00      	nop
 80a0f6e:	bf00      	nop
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
 80a0f76:	bf00      	nop
 80a0f78:	bf00      	nop
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
 80a0f86:	bf00      	nop
 80a0f88:	bf00      	nop
 80a0f8a:	bf00      	nop
 80a0f8c:	bf00      	nop
 80a0f8e:	bf00      	nop
 80a0f90:	bf00      	nop
 80a0f92:	bf00      	nop
 80a0f94:	bf00      	nop
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
 80a0fae:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0fb0:	9b04      	ldr	r3, [sp, #16]
 80a0fb2:	085b      	lsrs	r3, r3, #1
 80a0fb4:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0fb6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0fba:	3301      	adds	r3, #1
 80a0fbc:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a0fbe:	2b1f      	cmp	r3, #31
 80a0fc0:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0fc4:	d87e      	bhi.n	80a10c4 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a0fc6:	79e3      	ldrb	r3, [r4, #7]
 80a0fc8:	6810      	ldr	r0, [r2, #0]
 80a0fca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0fce:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0fd2:	88bf      	ldrh	r7, [r7, #4]
 80a0fd4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0fd8:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0fda:	9803      	ldr	r0, [sp, #12]
 80a0fdc:	9b04      	ldr	r3, [sp, #16]
 80a0fde:	4218      	tst	r0, r3
 80a0fe0:	f47f af76 	bne.w	80a0ed0 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0fe4:	4600      	mov	r0, r0
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a100c:	79e3      	ldrb	r3, [r4, #7]
 80a100e:	6810      	ldr	r0, [r2, #0]
 80a1010:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1014:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1018:	88bf      	ldrh	r7, [r7, #4]
 80a101a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a101e:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1020:	4600      	mov	r0, r0
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	e775      	b.n	80a0fb0 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a10c4:	468e      	mov	lr, r1
 80a10c6:	e6ca      	b.n	80a0e5e <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a10c8:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a10ca:	2903      	cmp	r1, #3
 80a10cc:	f000 812e 	beq.w	80a132c <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a10d0:	4a1e      	ldr	r2, [pc, #120]	; (80a114c <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a10d2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a10d6:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a10d8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a10dc:	b29b      	uxth	r3, r3
 80a10de:	2b00      	cmp	r3, #0
 80a10e0:	f43f ae2e 	beq.w	80a0d40 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a10e4:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a10e6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a10ea:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a10ec:	3b03      	subs	r3, #3
 80a10ee:	b29b      	uxth	r3, r3
 80a10f0:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a10f4:	f89e 3000 	ldrb.w	r3, [lr]
 80a10f8:	f10e 0103 	add.w	r1, lr, #3
 80a10fc:	b2db      	uxtb	r3, r3
 80a10fe:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1102:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1106:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a110a:	b2db      	uxtb	r3, r3
 80a110c:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a1110:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1114:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a1118:	b2db      	uxtb	r3, r3
 80a111a:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a111e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1122:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1126:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a112a:	021b      	lsls	r3, r3, #8
 80a112c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1130:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1134:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a1138:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a113c:	433b      	orrs	r3, r7
 80a113e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1140:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a1144:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a1148:	e07d      	b.n	80a1246 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a114a:	bf00      	nop
 80a114c:	200000ac 	.word	0x200000ac
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a1150:	9b04      	ldr	r3, [sp, #16]
 80a1152:	085b      	lsrs	r3, r3, #1
 80a1154:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1156:	4600      	mov	r0, r0
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	bf00      	nop
 80a11da:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a11dc:	79e0      	ldrb	r0, [r4, #7]
 80a11de:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a11e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a11e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a11e8:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a11ec:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a11f0:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a11f4:	3301      	adds	r3, #1
 80a11f6:	b2db      	uxtb	r3, r3
 80a11f8:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a11fc:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1200:	4600      	mov	r0, r0
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
          if(j==24) break;
 80a122a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a122e:	2b18      	cmp	r3, #24
 80a1230:	d07a      	beq.n	80a1328 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a1232:	79e3      	ldrb	r3, [r4, #7]
 80a1234:	6810      	ldr	r0, [r2, #0]
 80a1236:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a123a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a123e:	88bf      	ldrh	r7, [r7, #4]
 80a1240:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1244:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a1246:	9803      	ldr	r0, [sp, #12]
 80a1248:	9b04      	ldr	r3, [sp, #16]
 80a124a:	4218      	tst	r0, r3
 80a124c:	d180      	bne.n	80a1150 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a124e:	4600      	mov	r0, r0
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a1270:	79e3      	ldrb	r3, [r4, #7]
 80a1272:	6810      	ldr	r0, [r2, #0]
 80a1274:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1278:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a127c:	88bf      	ldrh	r7, [r7, #4]
 80a127e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1282:	831f      	strh	r7, [r3, #24]
          j++;
 80a1284:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1288:	3301      	adds	r3, #1
 80a128a:	b2db      	uxtb	r3, r3
 80a128c:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a1290:	9b04      	ldr	r3, [sp, #16]
 80a1292:	085b      	lsrs	r3, r3, #1
 80a1294:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1296:	4600      	mov	r0, r0
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
          if(j==24) break;
 80a1320:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1324:	2b18      	cmp	r3, #24
 80a1326:	d184      	bne.n	80a1232 <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1328:	468e      	mov	lr, r1
 80a132a:	e6d5      	b.n	80a10d8 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a132c:	4a17      	ldr	r2, [pc, #92]	; (80a138c <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a132e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1332:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1334:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1338:	b29b      	uxth	r3, r3
 80a133a:	2b00      	cmp	r3, #0
 80a133c:	f43f ad00 	beq.w	80a0d40 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1340:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1342:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1346:	f10e 0103 	add.w	r1, lr, #3
 80a134a:	3b03      	subs	r3, #3
 80a134c:	b29b      	uxth	r3, r3
 80a134e:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1352:	f89e 3000 	ldrb.w	r3, [lr]
 80a1356:	b2db      	uxtb	r3, r3
 80a1358:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a135c:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1360:	b2db      	uxtb	r3, r3
 80a1362:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a1366:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a136a:	b2db      	uxtb	r3, r3
 80a136c:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1370:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1374:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1378:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a137c:	021b      	lsls	r3, r3, #8
 80a137e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1382:	4303      	orrs	r3, r0
 80a1384:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1386:	f88d 6005 	strb.w	r6, [sp, #5]
 80a138a:	e0e0      	b.n	80a154e <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a138c:	200000ac 	.word	0x200000ac
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1390:	4600      	mov	r0, r0
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a14b2:	79e3      	ldrb	r3, [r4, #7]
 80a14b4:	6810      	ldr	r0, [r2, #0]
 80a14b6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a14ba:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a14be:	88bf      	ldrh	r7, [r7, #4]
 80a14c0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a14c4:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a14c6:	4600      	mov	r0, r0
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	bf00      	nop
 80a1508:	bf00      	nop
 80a150a:	bf00      	nop
 80a150c:	bf00      	nop
 80a150e:	bf00      	nop
 80a1510:	bf00      	nop
 80a1512:	bf00      	nop
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1536:	9b04      	ldr	r3, [sp, #16]
 80a1538:	085b      	lsrs	r3, r3, #1
 80a153a:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a153c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1540:	3301      	adds	r3, #1
 80a1542:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1544:	2b17      	cmp	r3, #23
 80a1546:	f88d 3005 	strb.w	r3, [sp, #5]
 80a154a:	f200 80e3 	bhi.w	80a1714 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a154e:	79e3      	ldrb	r3, [r4, #7]
 80a1550:	6810      	ldr	r0, [r2, #0]
 80a1552:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1556:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a155a:	88bf      	ldrh	r7, [r7, #4]
 80a155c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1560:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1562:	9803      	ldr	r0, [sp, #12]
 80a1564:	9b04      	ldr	r3, [sp, #16]
 80a1566:	4218      	tst	r0, r3
 80a1568:	f47f af12 	bne.w	80a1390 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a156c:	4600      	mov	r0, r0
 80a156e:	bf00      	nop
 80a1570:	bf00      	nop
 80a1572:	bf00      	nop
 80a1574:	bf00      	nop
 80a1576:	bf00      	nop
 80a1578:	bf00      	nop
 80a157a:	bf00      	nop
 80a157c:	bf00      	nop
 80a157e:	bf00      	nop
 80a1580:	bf00      	nop
 80a1582:	bf00      	nop
 80a1584:	bf00      	nop
 80a1586:	bf00      	nop
 80a1588:	bf00      	nop
 80a158a:	bf00      	nop
 80a158c:	bf00      	nop
 80a158e:	bf00      	nop
 80a1590:	bf00      	nop
 80a1592:	bf00      	nop
 80a1594:	bf00      	nop
 80a1596:	bf00      	nop
 80a1598:	bf00      	nop
 80a159a:	bf00      	nop
 80a159c:	bf00      	nop
 80a159e:	bf00      	nop
 80a15a0:	bf00      	nop
 80a15a2:	bf00      	nop
 80a15a4:	bf00      	nop
 80a15a6:	bf00      	nop
 80a15a8:	bf00      	nop
 80a15aa:	bf00      	nop
 80a15ac:	bf00      	nop
 80a15ae:	bf00      	nop
 80a15b0:	bf00      	nop
 80a15b2:	bf00      	nop
 80a15b4:	bf00      	nop
 80a15b6:	bf00      	nop
 80a15b8:	bf00      	nop
 80a15ba:	bf00      	nop
 80a15bc:	bf00      	nop
 80a15be:	bf00      	nop
 80a15c0:	bf00      	nop
 80a15c2:	bf00      	nop
 80a15c4:	bf00      	nop
 80a15c6:	bf00      	nop
 80a15c8:	bf00      	nop
 80a15ca:	bf00      	nop
 80a15cc:	bf00      	nop
 80a15ce:	bf00      	nop
 80a15d0:	bf00      	nop
 80a15d2:	bf00      	nop
 80a15d4:	bf00      	nop
 80a15d6:	bf00      	nop
 80a15d8:	bf00      	nop
 80a15da:	bf00      	nop
 80a15dc:	bf00      	nop
 80a15de:	bf00      	nop
 80a15e0:	bf00      	nop
 80a15e2:	bf00      	nop
 80a15e4:	bf00      	nop
 80a15e6:	bf00      	nop
 80a15e8:	bf00      	nop
 80a15ea:	bf00      	nop
 80a15ec:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a15ee:	79e3      	ldrb	r3, [r4, #7]
 80a15f0:	6810      	ldr	r0, [r2, #0]
 80a15f2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a15f6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a15fa:	88bf      	ldrh	r7, [r7, #4]
 80a15fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1600:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1602:	4600      	mov	r0, r0
 80a1604:	bf00      	nop
 80a1606:	bf00      	nop
 80a1608:	bf00      	nop
 80a160a:	bf00      	nop
 80a160c:	bf00      	nop
 80a160e:	bf00      	nop
 80a1610:	bf00      	nop
 80a1612:	bf00      	nop
 80a1614:	bf00      	nop
 80a1616:	bf00      	nop
 80a1618:	bf00      	nop
 80a161a:	bf00      	nop
 80a161c:	bf00      	nop
 80a161e:	bf00      	nop
 80a1620:	bf00      	nop
 80a1622:	bf00      	nop
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
 80a162c:	bf00      	nop
 80a162e:	bf00      	nop
 80a1630:	bf00      	nop
 80a1632:	bf00      	nop
 80a1634:	bf00      	nop
 80a1636:	bf00      	nop
 80a1638:	bf00      	nop
 80a163a:	bf00      	nop
 80a163c:	bf00      	nop
 80a163e:	bf00      	nop
 80a1640:	bf00      	nop
 80a1642:	bf00      	nop
 80a1644:	bf00      	nop
 80a1646:	bf00      	nop
 80a1648:	bf00      	nop
 80a164a:	bf00      	nop
 80a164c:	bf00      	nop
 80a164e:	bf00      	nop
 80a1650:	bf00      	nop
 80a1652:	bf00      	nop
 80a1654:	bf00      	nop
 80a1656:	bf00      	nop
 80a1658:	bf00      	nop
 80a165a:	bf00      	nop
 80a165c:	bf00      	nop
 80a165e:	bf00      	nop
 80a1660:	bf00      	nop
 80a1662:	bf00      	nop
 80a1664:	bf00      	nop
 80a1666:	bf00      	nop
 80a1668:	bf00      	nop
 80a166a:	bf00      	nop
 80a166c:	bf00      	nop
 80a166e:	bf00      	nop
 80a1670:	bf00      	nop
 80a1672:	bf00      	nop
 80a1674:	bf00      	nop
 80a1676:	bf00      	nop
 80a1678:	bf00      	nop
 80a167a:	bf00      	nop
 80a167c:	bf00      	nop
 80a167e:	bf00      	nop
 80a1680:	bf00      	nop
 80a1682:	bf00      	nop
 80a1684:	bf00      	nop
 80a1686:	bf00      	nop
 80a1688:	bf00      	nop
 80a168a:	bf00      	nop
 80a168c:	bf00      	nop
 80a168e:	bf00      	nop
 80a1690:	bf00      	nop
 80a1692:	bf00      	nop
 80a1694:	bf00      	nop
 80a1696:	bf00      	nop
 80a1698:	bf00      	nop
 80a169a:	bf00      	nop
 80a169c:	bf00      	nop
 80a169e:	bf00      	nop
 80a16a0:	bf00      	nop
 80a16a2:	bf00      	nop
 80a16a4:	bf00      	nop
 80a16a6:	bf00      	nop
 80a16a8:	bf00      	nop
 80a16aa:	bf00      	nop
 80a16ac:	bf00      	nop
 80a16ae:	bf00      	nop
 80a16b0:	bf00      	nop
 80a16b2:	bf00      	nop
 80a16b4:	bf00      	nop
 80a16b6:	bf00      	nop
 80a16b8:	bf00      	nop
 80a16ba:	bf00      	nop
 80a16bc:	bf00      	nop
 80a16be:	bf00      	nop
 80a16c0:	bf00      	nop
 80a16c2:	bf00      	nop
 80a16c4:	bf00      	nop
 80a16c6:	bf00      	nop
 80a16c8:	bf00      	nop
 80a16ca:	bf00      	nop
 80a16cc:	bf00      	nop
 80a16ce:	bf00      	nop
 80a16d0:	bf00      	nop
 80a16d2:	bf00      	nop
 80a16d4:	bf00      	nop
 80a16d6:	bf00      	nop
 80a16d8:	bf00      	nop
 80a16da:	bf00      	nop
 80a16dc:	bf00      	nop
 80a16de:	bf00      	nop
 80a16e0:	bf00      	nop
 80a16e2:	bf00      	nop
 80a16e4:	bf00      	nop
 80a16e6:	bf00      	nop
 80a16e8:	bf00      	nop
 80a16ea:	bf00      	nop
 80a16ec:	bf00      	nop
 80a16ee:	bf00      	nop
 80a16f0:	bf00      	nop
 80a16f2:	bf00      	nop
 80a16f4:	bf00      	nop
 80a16f6:	bf00      	nop
 80a16f8:	bf00      	nop
 80a16fa:	bf00      	nop
 80a16fc:	bf00      	nop
 80a16fe:	bf00      	nop
 80a1700:	bf00      	nop
 80a1702:	bf00      	nop
 80a1704:	bf00      	nop
 80a1706:	bf00      	nop
 80a1708:	bf00      	nop
 80a170a:	bf00      	nop
 80a170c:	bf00      	nop
 80a170e:	bf00      	nop
 80a1710:	bf00      	nop
 80a1712:	e710      	b.n	80a1536 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1714:	468e      	mov	lr, r1
 80a1716:	e60d      	b.n	80a1334 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a1718 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a1718:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a171a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a171c:	428b      	cmp	r3, r1
 80a171e:	d945      	bls.n	80a17ac <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a1720:	7a05      	ldrb	r5, [r0, #8]
 80a1722:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a1726:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a172a:	b2d6      	uxtb	r6, r2
 80a172c:	b145      	cbz	r5, 80a1740 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a172e:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a1730:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a1732:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a1734:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1738:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a173c:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1740:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a1744:	68c7      	ldr	r7, [r0, #12]
 80a1746:	f1bc 0f06 	cmp.w	ip, #6
 80a174a:	bf0c      	ite	eq
 80a174c:	2504      	moveq	r5, #4
 80a174e:	2503      	movne	r5, #3
 80a1750:	4369      	muls	r1, r5
 80a1752:	f1bc 0f08 	cmp.w	ip, #8
 80a1756:	eb07 0501 	add.w	r5, r7, r1
 80a175a:	d824      	bhi.n	80a17a6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a175c:	f04f 0e01 	mov.w	lr, #1
 80a1760:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a1764:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a1768:	d10c      	bne.n	80a1784 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a176a:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a176e:	d10d      	bne.n	80a178c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a1770:	f01e 0f10 	tst.w	lr, #16
 80a1774:	d017      	beq.n	80a17a6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a1776:	2bff      	cmp	r3, #255	; 0xff
 80a1778:	bf08      	it	eq
 80a177a:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a177c:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a177e:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a1780:	70ac      	strb	r4, [r5, #2]
        } break;
 80a1782:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1784:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a1786:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a1788:	70ae      	strb	r6, [r5, #2]
        } break;
 80a178a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a178c:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a178e:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a1790:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1792:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1794:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1796:	b90b      	cbnz	r3, 80a179c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1798:	b2d2      	uxtb	r2, r2
 80a179a:	e002      	b.n	80a17a2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a179c:	435a      	muls	r2, r3
 80a179e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a17a2:	70ea      	strb	r2, [r5, #3]
        } break;
 80a17a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a17a6:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a17a8:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a17aa:	70ae      	strb	r6, [r5, #2]
 80a17ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a17ae <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a17ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a17b2:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a17b6:	4770      	bx	lr

080a17b8 <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
 80a17b8:	8840      	ldrh	r0, [r0, #2]
 80a17ba:	4770      	bx	lr

080a17bc <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a17bc:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a17be:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a17c0:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a17c2:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a17c4:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a17c6:	d01e      	beq.n	80a1806 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a17c8:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a17ca:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a17ce:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a17d0:	d00c      	beq.n	80a17ec <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a17d2:	29ff      	cmp	r1, #255	; 0xff
 80a17d4:	bf0f      	iteee	eq
 80a17d6:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a17da:	0211      	lslne	r1, r2, #8
 80a17dc:	f101 31ff 	addne.w	r1, r1, #4294967295
 80a17e0:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a17e4:	bf0c      	ite	eq
 80a17e6:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a17ea:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a17ec:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a17ee:	1b29      	subs	r1, r5, r4
 80a17f0:	8886      	ldrh	r6, [r0, #4]
 80a17f2:	b289      	uxth	r1, r1
 80a17f4:	428e      	cmp	r6, r1
 80a17f6:	d905      	bls.n	80a1804 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a17f8:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a17fa:	4359      	muls	r1, r3
 80a17fc:	1209      	asrs	r1, r1, #8
 80a17fe:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a1802:	e7f4      	b.n	80a17ee <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a1804:	7202      	strb	r2, [r0, #8]
 80a1806:	bd70      	pop	{r4, r5, r6, pc}

080a1808 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a1808:	b508      	push	{r3, lr}
 80a180a:	f000 f901 	bl	80a1a10 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a180e:	f000 f8ff 	bl	80a1a10 <HAL_Pin_Map>
 80a1812:	4b01      	ldr	r3, [pc, #4]	; (80a1818 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a1814:	6018      	str	r0, [r3, #0]
 80a1816:	bd08      	pop	{r3, pc}
 80a1818:	200000ac 	.word	0x200000ac

080a181c <_ZN15Adafruit_MPR121C1Ev>:
 ****************************************************/

#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}
 80a181c:	4770      	bx	lr

080a181e <_ZN15Adafruit_MPR12113readRegister8Eh>:
}

/*********************************************************************/


uint8_t Adafruit_MPR121::readRegister8(uint8_t reg) {
 80a181e:	b538      	push	{r3, r4, r5, lr}
 80a1820:	4604      	mov	r4, r0
 80a1822:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a1824:	f000 ffe4 	bl	80a27f0 <_Z19__fetch_global_Wirev>
 80a1828:	f994 1000 	ldrsb.w	r1, [r4]
 80a182c:	f000 fe76 	bl	80a251c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a1830:	f000 ffde 	bl	80a27f0 <_Z19__fetch_global_Wirev>
 80a1834:	6803      	ldr	r3, [r0, #0]
 80a1836:	4629      	mov	r1, r5
 80a1838:	689b      	ldr	r3, [r3, #8]
 80a183a:	4798      	blx	r3
    Wire.endTransmission(false);
 80a183c:	f000 ffd8 	bl	80a27f0 <_Z19__fetch_global_Wirev>
 80a1840:	2100      	movs	r1, #0
 80a1842:	f000 fe6e 	bl	80a2522 <_ZN7TwoWire15endTransmissionEh>
    while (Wire.requestFrom(_i2caddr, 1) != 1);
 80a1846:	f000 ffd3 	bl	80a27f0 <_Z19__fetch_global_Wirev>
 80a184a:	2201      	movs	r2, #1
 80a184c:	f994 1000 	ldrsb.w	r1, [r4]
 80a1850:	f000 fe5b 	bl	80a250a <_ZN7TwoWire11requestFromEii>
 80a1854:	2801      	cmp	r0, #1
 80a1856:	d1f6      	bne.n	80a1846 <_ZN15Adafruit_MPR12113readRegister8Eh+0x28>
    return ( Wire.read());
 80a1858:	f000 ffca 	bl	80a27f0 <_Z19__fetch_global_Wirev>
 80a185c:	6803      	ldr	r3, [r0, #0]
 80a185e:	695b      	ldr	r3, [r3, #20]
 80a1860:	4798      	blx	r3
}
 80a1862:	b2c0      	uxtb	r0, r0
 80a1864:	bd38      	pop	{r3, r4, r5, pc}

080a1866 <_ZN15Adafruit_MPR12114readRegister16Eh>:

uint16_t Adafruit_MPR121::readRegister16(uint8_t reg) {
 80a1866:	b538      	push	{r3, r4, r5, lr}
 80a1868:	4604      	mov	r4, r0
 80a186a:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a186c:	f000 ffc0 	bl	80a27f0 <_Z19__fetch_global_Wirev>
 80a1870:	f994 1000 	ldrsb.w	r1, [r4]
 80a1874:	f000 fe52 	bl	80a251c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a1878:	f000 ffba 	bl	80a27f0 <_Z19__fetch_global_Wirev>
 80a187c:	6803      	ldr	r3, [r0, #0]
 80a187e:	4629      	mov	r1, r5
 80a1880:	689b      	ldr	r3, [r3, #8]
 80a1882:	4798      	blx	r3
    Wire.endTransmission(false);
 80a1884:	f000 ffb4 	bl	80a27f0 <_Z19__fetch_global_Wirev>
 80a1888:	2100      	movs	r1, #0
 80a188a:	f000 fe4a 	bl	80a2522 <_ZN7TwoWire15endTransmissionEh>
    while (Wire.requestFrom(_i2caddr, 2) != 2);
 80a188e:	f000 ffaf 	bl	80a27f0 <_Z19__fetch_global_Wirev>
 80a1892:	2202      	movs	r2, #2
 80a1894:	f994 1000 	ldrsb.w	r1, [r4]
 80a1898:	f000 fe37 	bl	80a250a <_ZN7TwoWire11requestFromEii>
 80a189c:	2802      	cmp	r0, #2
 80a189e:	d1f6      	bne.n	80a188e <_ZN15Adafruit_MPR12114readRegister16Eh+0x28>
    uint16_t v = Wire.read();
 80a18a0:	f000 ffa6 	bl	80a27f0 <_Z19__fetch_global_Wirev>
 80a18a4:	6803      	ldr	r3, [r0, #0]
 80a18a6:	695b      	ldr	r3, [r3, #20]
 80a18a8:	4798      	blx	r3
 80a18aa:	4604      	mov	r4, r0
    v |=  ((uint16_t) Wire.read()) << 8;
 80a18ac:	f000 ffa0 	bl	80a27f0 <_Z19__fetch_global_Wirev>
 80a18b0:	6803      	ldr	r3, [r0, #0]
 80a18b2:	695b      	ldr	r3, [r3, #20]
 80a18b4:	4798      	blx	r3
    return v;
 80a18b6:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
 80a18ba:	b280      	uxth	r0, r0
 80a18bc:	bd38      	pop	{r3, r4, r5, pc}

080a18be <_ZN15Adafruit_MPR1217touchedEv>:
  if (t > 12) return 0;
  uint16_t bl = readRegister8(MPR121_BASELINE_0 + t);
  return (bl << 2);
}

uint16_t  Adafruit_MPR121::touched(void) {
 80a18be:	b508      	push	{r3, lr}
  uint16_t t = readRegister16(MPR121_TOUCHSTATUS_L);
 80a18c0:	2100      	movs	r1, #0
 80a18c2:	f7ff ffd0 	bl	80a1866 <_ZN15Adafruit_MPR12114readRegister16Eh>
  return t & 0x0FFF;
}
 80a18c6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80a18ca:	bd08      	pop	{r3, pc}

080a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>:
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
 80a18cc:	b570      	push	{r4, r5, r6, lr}
 80a18ce:	4606      	mov	r6, r0
 80a18d0:	4614      	mov	r4, r2
 80a18d2:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a18d4:	f000 ff8c 	bl	80a27f0 <_Z19__fetch_global_Wirev>
 80a18d8:	f996 1000 	ldrsb.w	r1, [r6]
 80a18dc:	f000 fe1e 	bl	80a251c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 80a18e0:	f000 ff86 	bl	80a27f0 <_Z19__fetch_global_Wirev>
 80a18e4:	6803      	ldr	r3, [r0, #0]
 80a18e6:	4629      	mov	r1, r5
 80a18e8:	689b      	ldr	r3, [r3, #8]
 80a18ea:	4798      	blx	r3
    Wire.write((uint8_t)(value));
 80a18ec:	f000 ff80 	bl	80a27f0 <_Z19__fetch_global_Wirev>
 80a18f0:	6803      	ldr	r3, [r0, #0]
 80a18f2:	4621      	mov	r1, r4
 80a18f4:	689b      	ldr	r3, [r3, #8]
 80a18f6:	4798      	blx	r3
    Wire.endTransmission();
 80a18f8:	f000 ff7a 	bl	80a27f0 <_Z19__fetch_global_Wirev>
}
 80a18fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
    Wire.beginTransmission(_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)(value));
    Wire.endTransmission();
 80a1900:	f000 be13 	b.w	80a252a <_ZN7TwoWire15endTransmissionEv>

080a1904 <_ZN15Adafruit_MPR12113setThresholdsEhh>:
void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
 80a1904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1906:	4605      	mov	r5, r0
 80a1908:	460f      	mov	r7, r1
 80a190a:	4616      	mov	r6, r2
 80a190c:	2441      	movs	r4, #65	; 0x41
  for (uint8_t i=0; i<12; i++) {
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
 80a190e:	4621      	mov	r1, r4
 80a1910:	463a      	mov	r2, r7
 80a1912:	4628      	mov	r0, r5
 80a1914:	f7ff ffda 	bl	80a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
 80a1918:	1c61      	adds	r1, r4, #1
 80a191a:	3402      	adds	r4, #2
 80a191c:	4632      	mov	r2, r6
 80a191e:	b2c9      	uxtb	r1, r1
 80a1920:	4628      	mov	r0, r5
 80a1922:	b2e4      	uxtb	r4, r4
 80a1924:	f7ff ffd2 	bl	80a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
  for (uint8_t i=0; i<12; i++) {
 80a1928:	2c59      	cmp	r4, #89	; 0x59
 80a192a:	d1f0      	bne.n	80a190e <_ZN15Adafruit_MPR12113setThresholdsEhh+0xa>
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
  }
}
 80a192c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a192e <_ZN15Adafruit_MPR1215beginEh>:
#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
 80a192e:	b538      	push	{r3, r4, r5, lr}
 80a1930:	4604      	mov	r4, r0
 80a1932:	460d      	mov	r5, r1
  Wire.begin();
 80a1934:	f000 ff5c 	bl	80a27f0 <_Z19__fetch_global_Wirev>
 80a1938:	f000 fdd8 	bl	80a24ec <_ZN7TwoWire5beginEv>
    
  _i2caddr = i2caddr;

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a193c:	2263      	movs	r2, #99	; 0x63
 80a193e:	2180      	movs	r1, #128	; 0x80
 80a1940:	4620      	mov	r0, r4
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
  Wire.begin();
    
  _i2caddr = i2caddr;
 80a1942:	7025      	strb	r5, [r4, #0]

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a1944:	f7ff ffc2 	bl	80a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>
  delay(1);
 80a1948:	2001      	movs	r0, #1
 80a194a:	f000 fb07 	bl	80a1f5c <delay>
  //  Serial.print("$"); Serial.print(i, HEX); 
  //  Serial.print(": 0x"); Serial.println(readRegister8(i));
  }
  

  writeRegister(MPR121_ECR, 0x0);
 80a194e:	2200      	movs	r2, #0
 80a1950:	215e      	movs	r1, #94	; 0x5e
 80a1952:	4620      	mov	r0, r4
 80a1954:	f7ff ffba 	bl	80a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>

  uint8_t c = readRegister8(MPR121_CONFIG2);
 80a1958:	215d      	movs	r1, #93	; 0x5d
 80a195a:	4620      	mov	r0, r4
 80a195c:	f7ff ff5f 	bl	80a181e <_ZN15Adafruit_MPR12113readRegister8Eh>
  
  if (c != 0x24) return false;
 80a1960:	2824      	cmp	r0, #36	; 0x24
 80a1962:	d151      	bne.n	80a1a08 <_ZN15Adafruit_MPR1215beginEh+0xda>
  return true;
}

void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
 80a1964:	4620      	mov	r0, r4
 80a1966:	2206      	movs	r2, #6
 80a1968:	210c      	movs	r1, #12
 80a196a:	f7ff ffcb 	bl	80a1904 <_ZN15Adafruit_MPR12113setThresholdsEhh>
  
  if (c != 0x24) return false;


  setThreshholds(12, 6);
  writeRegister(MPR121_MHDR, 0x01);
 80a196e:	4620      	mov	r0, r4
 80a1970:	2201      	movs	r2, #1
 80a1972:	212b      	movs	r1, #43	; 0x2b
 80a1974:	f7ff ffaa 	bl	80a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDR, 0x01);
 80a1978:	4620      	mov	r0, r4
 80a197a:	2201      	movs	r2, #1
 80a197c:	212c      	movs	r1, #44	; 0x2c
 80a197e:	f7ff ffa5 	bl	80a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLR, 0x0E);
 80a1982:	4620      	mov	r0, r4
 80a1984:	220e      	movs	r2, #14
 80a1986:	212d      	movs	r1, #45	; 0x2d
 80a1988:	f7ff ffa0 	bl	80a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLR, 0x00);
 80a198c:	4620      	mov	r0, r4
 80a198e:	2200      	movs	r2, #0
 80a1990:	212e      	movs	r1, #46	; 0x2e
 80a1992:	f7ff ff9b 	bl	80a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_MHDF, 0x01);
 80a1996:	4620      	mov	r0, r4
 80a1998:	2201      	movs	r2, #1
 80a199a:	212f      	movs	r1, #47	; 0x2f
 80a199c:	f7ff ff96 	bl	80a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDF, 0x05);
 80a19a0:	4620      	mov	r0, r4
 80a19a2:	2205      	movs	r2, #5
 80a19a4:	2130      	movs	r1, #48	; 0x30
 80a19a6:	f7ff ff91 	bl	80a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLF, 0x01);
 80a19aa:	4620      	mov	r0, r4
 80a19ac:	2201      	movs	r2, #1
 80a19ae:	2131      	movs	r1, #49	; 0x31
 80a19b0:	f7ff ff8c 	bl	80a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLF, 0x00);
 80a19b4:	4620      	mov	r0, r4
 80a19b6:	2200      	movs	r2, #0
 80a19b8:	2132      	movs	r1, #50	; 0x32
 80a19ba:	f7ff ff87 	bl	80a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_NHDT, 0x00);
 80a19be:	4620      	mov	r0, r4
 80a19c0:	2200      	movs	r2, #0
 80a19c2:	2133      	movs	r1, #51	; 0x33
 80a19c4:	f7ff ff82 	bl	80a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLT, 0x00);
 80a19c8:	4620      	mov	r0, r4
 80a19ca:	2200      	movs	r2, #0
 80a19cc:	2134      	movs	r1, #52	; 0x34
 80a19ce:	f7ff ff7d 	bl	80a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLT, 0x00);
 80a19d2:	4620      	mov	r0, r4
 80a19d4:	2200      	movs	r2, #0
 80a19d6:	2135      	movs	r1, #53	; 0x35
 80a19d8:	f7ff ff78 	bl	80a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_DEBOUNCE, 0);
 80a19dc:	4620      	mov	r0, r4
 80a19de:	2200      	movs	r2, #0
 80a19e0:	215b      	movs	r1, #91	; 0x5b
 80a19e2:	f7ff ff73 	bl	80a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 80a19e6:	4620      	mov	r0, r4
 80a19e8:	2210      	movs	r2, #16
 80a19ea:	215c      	movs	r1, #92	; 0x5c
 80a19ec:	f7ff ff6e 	bl	80a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 80a19f0:	4620      	mov	r0, r4
 80a19f2:	2220      	movs	r2, #32
 80a19f4:	215d      	movs	r1, #93	; 0x5d
 80a19f6:	f7ff ff69 	bl	80a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>

//  writeRegister(MPR121_UPLIMIT, 150);
//  writeRegister(MPR121_TARGETLIMIT, 100); // should be ~400 (100 shifted)
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking
 80a19fa:	4620      	mov	r0, r4
 80a19fc:	228f      	movs	r2, #143	; 0x8f
 80a19fe:	215e      	movs	r1, #94	; 0x5e
 80a1a00:	f7ff ff64 	bl	80a18cc <_ZN15Adafruit_MPR12113writeRegisterEhh>

  return true;
 80a1a04:	2001      	movs	r0, #1
 80a1a06:	bd38      	pop	{r3, r4, r5, pc}

  writeRegister(MPR121_ECR, 0x0);

  uint8_t c = readRegister8(MPR121_CONFIG2);
  
  if (c != 0x24) return false;
 80a1a08:	2000      	movs	r0, #0
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking

  return true;
}
 80a1a0a:	bd38      	pop	{r3, r4, r5, pc}

080a1a0c <_GLOBAL__sub_I__ZN15Adafruit_MPR121C2Ev>:
 80a1a0c:	f000 b800 	b.w	80a1a10 <HAL_Pin_Map>

080a1a10 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1a10:	b508      	push	{r3, lr}
 80a1a12:	4b02      	ldr	r3, [pc, #8]	; (80a1a1c <HAL_Pin_Map+0xc>)
 80a1a14:	681b      	ldr	r3, [r3, #0]
 80a1a16:	681b      	ldr	r3, [r3, #0]
 80a1a18:	9301      	str	r3, [sp, #4]
 80a1a1a:	bd08      	pop	{r3, pc}
 80a1a1c:	080601b0 	.word	0x080601b0

080a1a20 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1a20:	b508      	push	{r3, lr}
 80a1a22:	4b02      	ldr	r3, [pc, #8]	; (80a1a2c <HAL_Validate_Pin_Function+0xc>)
 80a1a24:	681b      	ldr	r3, [r3, #0]
 80a1a26:	685b      	ldr	r3, [r3, #4]
 80a1a28:	9301      	str	r3, [sp, #4]
 80a1a2a:	bd08      	pop	{r3, pc}
 80a1a2c:	080601b0 	.word	0x080601b0

080a1a30 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1a30:	b508      	push	{r3, lr}
 80a1a32:	4b02      	ldr	r3, [pc, #8]	; (80a1a3c <HAL_Pin_Mode+0xc>)
 80a1a34:	681b      	ldr	r3, [r3, #0]
 80a1a36:	689b      	ldr	r3, [r3, #8]
 80a1a38:	9301      	str	r3, [sp, #4]
 80a1a3a:	bd08      	pop	{r3, pc}
 80a1a3c:	080601b0 	.word	0x080601b0

080a1a40 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1a40:	b508      	push	{r3, lr}
 80a1a42:	4b02      	ldr	r3, [pc, #8]	; (80a1a4c <HAL_Get_Pin_Mode+0xc>)
 80a1a44:	681b      	ldr	r3, [r3, #0]
 80a1a46:	68db      	ldr	r3, [r3, #12]
 80a1a48:	9301      	str	r3, [sp, #4]
 80a1a4a:	bd08      	pop	{r3, pc}
 80a1a4c:	080601b0 	.word	0x080601b0

080a1a50 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1a50:	b508      	push	{r3, lr}
 80a1a52:	4b02      	ldr	r3, [pc, #8]	; (80a1a5c <HAL_GPIO_Write+0xc>)
 80a1a54:	681b      	ldr	r3, [r3, #0]
 80a1a56:	691b      	ldr	r3, [r3, #16]
 80a1a58:	9301      	str	r3, [sp, #4]
 80a1a5a:	bd08      	pop	{r3, pc}
 80a1a5c:	080601b0 	.word	0x080601b0

080a1a60 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1a60:	b508      	push	{r3, lr}
 80a1a62:	4b02      	ldr	r3, [pc, #8]	; (80a1a6c <HAL_GPIO_Read+0xc>)
 80a1a64:	681b      	ldr	r3, [r3, #0]
 80a1a66:	695b      	ldr	r3, [r3, #20]
 80a1a68:	9301      	str	r3, [sp, #4]
 80a1a6a:	bd08      	pop	{r3, pc}
 80a1a6c:	080601b0 	.word	0x080601b0

080a1a70 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1a70:	b508      	push	{r3, lr}
 80a1a72:	4b02      	ldr	r3, [pc, #8]	; (80a1a7c <HAL_SPI_Init+0xc>)
 80a1a74:	681b      	ldr	r3, [r3, #0]
 80a1a76:	69db      	ldr	r3, [r3, #28]
 80a1a78:	9301      	str	r3, [sp, #4]
 80a1a7a:	bd08      	pop	{r3, pc}
 80a1a7c:	080601b4 	.word	0x080601b4

080a1a80 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1a80:	b508      	push	{r3, lr}
 80a1a82:	4b02      	ldr	r3, [pc, #8]	; (80a1a8c <HAL_SPI_Is_Enabled+0xc>)
 80a1a84:	681b      	ldr	r3, [r3, #0]
 80a1a86:	6a1b      	ldr	r3, [r3, #32]
 80a1a88:	9301      	str	r3, [sp, #4]
 80a1a8a:	bd08      	pop	{r3, pc}
 80a1a8c:	080601b4 	.word	0x080601b4

080a1a90 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1a90:	b508      	push	{r3, lr}
 80a1a92:	4b02      	ldr	r3, [pc, #8]	; (80a1a9c <HAL_RNG_GetRandomNumber+0xc>)
 80a1a94:	681b      	ldr	r3, [r3, #0]
 80a1a96:	685b      	ldr	r3, [r3, #4]
 80a1a98:	9301      	str	r3, [sp, #4]
 80a1a9a:	bd08      	pop	{r3, pc}
 80a1a9c:	0806019c 	.word	0x0806019c

080a1aa0 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1aa0:	b508      	push	{r3, lr}
 80a1aa2:	4b02      	ldr	r3, [pc, #8]	; (80a1aac <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1aa4:	681b      	ldr	r3, [r3, #0]
 80a1aa6:	691b      	ldr	r3, [r3, #16]
 80a1aa8:	9301      	str	r3, [sp, #4]
 80a1aaa:	bd08      	pop	{r3, pc}
 80a1aac:	0806019c 	.word	0x0806019c

080a1ab0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1ab0:	b508      	push	{r3, lr}
 80a1ab2:	4b02      	ldr	r3, [pc, #8]	; (80a1abc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1ab4:	681b      	ldr	r3, [r3, #0]
 80a1ab6:	695b      	ldr	r3, [r3, #20]
 80a1ab8:	9301      	str	r3, [sp, #4]
 80a1aba:	bd08      	pop	{r3, pc}
 80a1abc:	0806019c 	.word	0x0806019c

080a1ac0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1ac0:	b508      	push	{r3, lr}
 80a1ac2:	4b02      	ldr	r3, [pc, #8]	; (80a1acc <os_mutex_create+0xc>)
 80a1ac4:	681b      	ldr	r3, [r3, #0]
 80a1ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1ac8:	9301      	str	r3, [sp, #4]
 80a1aca:	bd08      	pop	{r3, pc}
 80a1acc:	080601d0 	.word	0x080601d0

080a1ad0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1ad0:	b508      	push	{r3, lr}
 80a1ad2:	4b02      	ldr	r3, [pc, #8]	; (80a1adc <HAL_USART_Init+0xc>)
 80a1ad4:	681b      	ldr	r3, [r3, #0]
 80a1ad6:	699b      	ldr	r3, [r3, #24]
 80a1ad8:	9301      	str	r3, [sp, #4]
 80a1ada:	bd08      	pop	{r3, pc}
 80a1adc:	080601c4 	.word	0x080601c4

080a1ae0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1ae0:	b508      	push	{r3, lr}
 80a1ae2:	4b02      	ldr	r3, [pc, #8]	; (80a1aec <HAL_USART_Write_Data+0xc>)
 80a1ae4:	681b      	ldr	r3, [r3, #0]
 80a1ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1ae8:	9301      	str	r3, [sp, #4]
 80a1aea:	bd08      	pop	{r3, pc}
 80a1aec:	080601c4 	.word	0x080601c4

080a1af0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1af0:	b508      	push	{r3, lr}
 80a1af2:	4b02      	ldr	r3, [pc, #8]	; (80a1afc <HAL_USART_Available_Data+0xc>)
 80a1af4:	681b      	ldr	r3, [r3, #0]
 80a1af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1af8:	9301      	str	r3, [sp, #4]
 80a1afa:	bd08      	pop	{r3, pc}
 80a1afc:	080601c4 	.word	0x080601c4

080a1b00 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1b00:	b508      	push	{r3, lr}
 80a1b02:	4b02      	ldr	r3, [pc, #8]	; (80a1b0c <HAL_USART_Read_Data+0xc>)
 80a1b04:	681b      	ldr	r3, [r3, #0]
 80a1b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1b08:	9301      	str	r3, [sp, #4]
 80a1b0a:	bd08      	pop	{r3, pc}
 80a1b0c:	080601c4 	.word	0x080601c4

080a1b10 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1b10:	b508      	push	{r3, lr}
 80a1b12:	4b02      	ldr	r3, [pc, #8]	; (80a1b1c <HAL_USART_Peek_Data+0xc>)
 80a1b14:	681b      	ldr	r3, [r3, #0]
 80a1b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1b18:	9301      	str	r3, [sp, #4]
 80a1b1a:	bd08      	pop	{r3, pc}
 80a1b1c:	080601c4 	.word	0x080601c4

080a1b20 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1b20:	b508      	push	{r3, lr}
 80a1b22:	4b02      	ldr	r3, [pc, #8]	; (80a1b2c <HAL_USART_Flush_Data+0xc>)
 80a1b24:	681b      	ldr	r3, [r3, #0]
 80a1b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1b28:	9301      	str	r3, [sp, #4]
 80a1b2a:	bd08      	pop	{r3, pc}
 80a1b2c:	080601c4 	.word	0x080601c4

080a1b30 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1b30:	b508      	push	{r3, lr}
 80a1b32:	4b02      	ldr	r3, [pc, #8]	; (80a1b3c <HAL_USART_Is_Enabled+0xc>)
 80a1b34:	681b      	ldr	r3, [r3, #0]
 80a1b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1b38:	9301      	str	r3, [sp, #4]
 80a1b3a:	bd08      	pop	{r3, pc}
 80a1b3c:	080601c4 	.word	0x080601c4

080a1b40 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1b40:	b508      	push	{r3, lr}
 80a1b42:	4b02      	ldr	r3, [pc, #8]	; (80a1b4c <HAL_USART_Available_Data_For_Write+0xc>)
 80a1b44:	681b      	ldr	r3, [r3, #0]
 80a1b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1b48:	9301      	str	r3, [sp, #4]
 80a1b4a:	bd08      	pop	{r3, pc}
 80a1b4c:	080601c4 	.word	0x080601c4

080a1b50 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a1b50:	b508      	push	{r3, lr}
 80a1b52:	4b02      	ldr	r3, [pc, #8]	; (80a1b5c <HAL_I2C_Begin+0xc>)
 80a1b54:	681b      	ldr	r3, [r3, #0]
 80a1b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1b58:	9301      	str	r3, [sp, #4]
 80a1b5a:	bd08      	pop	{r3, pc}
 80a1b5c:	080601ac 	.word	0x080601ac

080a1b60 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a1b60:	b508      	push	{r3, lr}
 80a1b62:	4b02      	ldr	r3, [pc, #8]	; (80a1b6c <HAL_I2C_Request_Data+0xc>)
 80a1b64:	681b      	ldr	r3, [r3, #0]
 80a1b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1b68:	9301      	str	r3, [sp, #4]
 80a1b6a:	bd08      	pop	{r3, pc}
 80a1b6c:	080601ac 	.word	0x080601ac

080a1b70 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a1b70:	b508      	push	{r3, lr}
 80a1b72:	4b02      	ldr	r3, [pc, #8]	; (80a1b7c <HAL_I2C_Begin_Transmission+0xc>)
 80a1b74:	681b      	ldr	r3, [r3, #0]
 80a1b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1b78:	9301      	str	r3, [sp, #4]
 80a1b7a:	bd08      	pop	{r3, pc}
 80a1b7c:	080601ac 	.word	0x080601ac

080a1b80 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a1b80:	b508      	push	{r3, lr}
 80a1b82:	4b02      	ldr	r3, [pc, #8]	; (80a1b8c <HAL_I2C_End_Transmission+0xc>)
 80a1b84:	681b      	ldr	r3, [r3, #0]
 80a1b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1b88:	9301      	str	r3, [sp, #4]
 80a1b8a:	bd08      	pop	{r3, pc}
 80a1b8c:	080601ac 	.word	0x080601ac

080a1b90 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1b90:	b508      	push	{r3, lr}
 80a1b92:	4b02      	ldr	r3, [pc, #8]	; (80a1b9c <HAL_I2C_Write_Data+0xc>)
 80a1b94:	681b      	ldr	r3, [r3, #0]
 80a1b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1b98:	9301      	str	r3, [sp, #4]
 80a1b9a:	bd08      	pop	{r3, pc}
 80a1b9c:	080601ac 	.word	0x080601ac

080a1ba0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1ba0:	b508      	push	{r3, lr}
 80a1ba2:	4b02      	ldr	r3, [pc, #8]	; (80a1bac <HAL_I2C_Available_Data+0xc>)
 80a1ba4:	681b      	ldr	r3, [r3, #0]
 80a1ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1ba8:	9301      	str	r3, [sp, #4]
 80a1baa:	bd08      	pop	{r3, pc}
 80a1bac:	080601ac 	.word	0x080601ac

080a1bb0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1bb0:	b508      	push	{r3, lr}
 80a1bb2:	4b02      	ldr	r3, [pc, #8]	; (80a1bbc <HAL_I2C_Read_Data+0xc>)
 80a1bb4:	681b      	ldr	r3, [r3, #0]
 80a1bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1bb8:	9301      	str	r3, [sp, #4]
 80a1bba:	bd08      	pop	{r3, pc}
 80a1bbc:	080601ac 	.word	0x080601ac

080a1bc0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1bc0:	b508      	push	{r3, lr}
 80a1bc2:	4b02      	ldr	r3, [pc, #8]	; (80a1bcc <HAL_I2C_Peek_Data+0xc>)
 80a1bc4:	681b      	ldr	r3, [r3, #0]
 80a1bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1bc8:	9301      	str	r3, [sp, #4]
 80a1bca:	bd08      	pop	{r3, pc}
 80a1bcc:	080601ac 	.word	0x080601ac

080a1bd0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1bd0:	b508      	push	{r3, lr}
 80a1bd2:	4b02      	ldr	r3, [pc, #8]	; (80a1bdc <HAL_I2C_Flush_Data+0xc>)
 80a1bd4:	681b      	ldr	r3, [r3, #0]
 80a1bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1bd8:	9301      	str	r3, [sp, #4]
 80a1bda:	bd08      	pop	{r3, pc}
 80a1bdc:	080601ac 	.word	0x080601ac

080a1be0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1be0:	b508      	push	{r3, lr}
 80a1be2:	4b02      	ldr	r3, [pc, #8]	; (80a1bec <HAL_I2C_Is_Enabled+0xc>)
 80a1be4:	681b      	ldr	r3, [r3, #0]
 80a1be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1be8:	9301      	str	r3, [sp, #4]
 80a1bea:	bd08      	pop	{r3, pc}
 80a1bec:	080601ac 	.word	0x080601ac

080a1bf0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1bf0:	b508      	push	{r3, lr}
 80a1bf2:	4b03      	ldr	r3, [pc, #12]	; (80a1c00 <HAL_I2C_Init+0x10>)
 80a1bf4:	681b      	ldr	r3, [r3, #0]
 80a1bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1bfa:	9301      	str	r3, [sp, #4]
 80a1bfc:	bd08      	pop	{r3, pc}
 80a1bfe:	0000      	.short	0x0000
 80a1c00:	080601ac 	.word	0x080601ac

080a1c04 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
 80a1c04:	b508      	push	{r3, lr}
 80a1c06:	4b02      	ldr	r3, [pc, #8]	; (80a1c10 <HAL_Tone_Start+0xc>)
 80a1c08:	681b      	ldr	r3, [r3, #0]
 80a1c0a:	681b      	ldr	r3, [r3, #0]
 80a1c0c:	9301      	str	r3, [sp, #4]
 80a1c0e:	bd08      	pop	{r3, pc}
 80a1c10:	080601a8 	.word	0x080601a8

080a1c14 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1c14:	b508      	push	{r3, lr}
 80a1c16:	4b02      	ldr	r3, [pc, #8]	; (80a1c20 <HAL_USB_USART_Init+0xc>)
 80a1c18:	681b      	ldr	r3, [r3, #0]
 80a1c1a:	681b      	ldr	r3, [r3, #0]
 80a1c1c:	9301      	str	r3, [sp, #4]
 80a1c1e:	bd08      	pop	{r3, pc}
 80a1c20:	080601d8 	.word	0x080601d8

080a1c24 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1c24:	b508      	push	{r3, lr}
 80a1c26:	4b02      	ldr	r3, [pc, #8]	; (80a1c30 <HAL_USB_USART_Begin+0xc>)
 80a1c28:	681b      	ldr	r3, [r3, #0]
 80a1c2a:	685b      	ldr	r3, [r3, #4]
 80a1c2c:	9301      	str	r3, [sp, #4]
 80a1c2e:	bd08      	pop	{r3, pc}
 80a1c30:	080601d8 	.word	0x080601d8

080a1c34 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1c34:	b508      	push	{r3, lr}
 80a1c36:	4b02      	ldr	r3, [pc, #8]	; (80a1c40 <HAL_USB_USART_Available_Data+0xc>)
 80a1c38:	681b      	ldr	r3, [r3, #0]
 80a1c3a:	691b      	ldr	r3, [r3, #16]
 80a1c3c:	9301      	str	r3, [sp, #4]
 80a1c3e:	bd08      	pop	{r3, pc}
 80a1c40:	080601d8 	.word	0x080601d8

080a1c44 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1c44:	b508      	push	{r3, lr}
 80a1c46:	4b02      	ldr	r3, [pc, #8]	; (80a1c50 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1c48:	681b      	ldr	r3, [r3, #0]
 80a1c4a:	695b      	ldr	r3, [r3, #20]
 80a1c4c:	9301      	str	r3, [sp, #4]
 80a1c4e:	bd08      	pop	{r3, pc}
 80a1c50:	080601d8 	.word	0x080601d8

080a1c54 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1c54:	b508      	push	{r3, lr}
 80a1c56:	4b02      	ldr	r3, [pc, #8]	; (80a1c60 <HAL_USB_USART_Receive_Data+0xc>)
 80a1c58:	681b      	ldr	r3, [r3, #0]
 80a1c5a:	699b      	ldr	r3, [r3, #24]
 80a1c5c:	9301      	str	r3, [sp, #4]
 80a1c5e:	bd08      	pop	{r3, pc}
 80a1c60:	080601d8 	.word	0x080601d8

080a1c64 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1c64:	b508      	push	{r3, lr}
 80a1c66:	4b02      	ldr	r3, [pc, #8]	; (80a1c70 <HAL_USB_USART_Send_Data+0xc>)
 80a1c68:	681b      	ldr	r3, [r3, #0]
 80a1c6a:	69db      	ldr	r3, [r3, #28]
 80a1c6c:	9301      	str	r3, [sp, #4]
 80a1c6e:	bd08      	pop	{r3, pc}
 80a1c70:	080601d8 	.word	0x080601d8

080a1c74 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1c74:	b508      	push	{r3, lr}
 80a1c76:	4b02      	ldr	r3, [pc, #8]	; (80a1c80 <HAL_USB_USART_Flush_Data+0xc>)
 80a1c78:	681b      	ldr	r3, [r3, #0]
 80a1c7a:	6a1b      	ldr	r3, [r3, #32]
 80a1c7c:	9301      	str	r3, [sp, #4]
 80a1c7e:	bd08      	pop	{r3, pc}
 80a1c80:	080601d8 	.word	0x080601d8

080a1c84 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1c84:	b508      	push	{r3, lr}
 80a1c86:	4b02      	ldr	r3, [pc, #8]	; (80a1c90 <inet_gethostbyname+0xc>)
 80a1c88:	681b      	ldr	r3, [r3, #0]
 80a1c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1c8c:	9301      	str	r3, [sp, #4]
 80a1c8e:	bd08      	pop	{r3, pc}
 80a1c90:	080601c0 	.word	0x080601c0

080a1c94 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1c94:	b508      	push	{r3, lr}
 80a1c96:	4b02      	ldr	r3, [pc, #8]	; (80a1ca0 <set_system_mode+0xc>)
 80a1c98:	681b      	ldr	r3, [r3, #0]
 80a1c9a:	685b      	ldr	r3, [r3, #4]
 80a1c9c:	9301      	str	r3, [sp, #4]
 80a1c9e:	bd08      	pop	{r3, pc}
 80a1ca0:	080601a4 	.word	0x080601a4

080a1ca4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1ca4:	b508      	push	{r3, lr}
 80a1ca6:	4b02      	ldr	r3, [pc, #8]	; (80a1cb0 <system_delay_ms+0xc>)
 80a1ca8:	681b      	ldr	r3, [r3, #0]
 80a1caa:	695b      	ldr	r3, [r3, #20]
 80a1cac:	9301      	str	r3, [sp, #4]
 80a1cae:	bd08      	pop	{r3, pc}
 80a1cb0:	080601a4 	.word	0x080601a4

080a1cb4 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 80a1cb4:	b508      	push	{r3, lr}
 80a1cb6:	4b02      	ldr	r3, [pc, #8]	; (80a1cc0 <system_sleep+0xc>)
 80a1cb8:	681b      	ldr	r3, [r3, #0]
 80a1cba:	699b      	ldr	r3, [r3, #24]
 80a1cbc:	9301      	str	r3, [sp, #4]
 80a1cbe:	bd08      	pop	{r3, pc}
 80a1cc0:	080601a4 	.word	0x080601a4

080a1cc4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1cc4:	b508      	push	{r3, lr}
 80a1cc6:	4b03      	ldr	r3, [pc, #12]	; (80a1cd4 <system_ctrl_set_app_request_handler+0x10>)
 80a1cc8:	681b      	ldr	r3, [r3, #0]
 80a1cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1cce:	9301      	str	r3, [sp, #4]
 80a1cd0:	bd08      	pop	{r3, pc}
 80a1cd2:	0000      	.short	0x0000
 80a1cd4:	080601a4 	.word	0x080601a4

080a1cd8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1cd8:	b508      	push	{r3, lr}
 80a1cda:	4b03      	ldr	r3, [pc, #12]	; (80a1ce8 <system_ctrl_set_result+0x10>)
 80a1cdc:	681b      	ldr	r3, [r3, #0]
 80a1cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1ce2:	9301      	str	r3, [sp, #4]
 80a1ce4:	bd08      	pop	{r3, pc}
 80a1ce6:	0000      	.short	0x0000
 80a1ce8:	080601a4 	.word	0x080601a4

080a1cec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1cec:	b508      	push	{r3, lr}
 80a1cee:	4b02      	ldr	r3, [pc, #8]	; (80a1cf8 <network_connect+0xc>)
 80a1cf0:	681b      	ldr	r3, [r3, #0]
 80a1cf2:	685b      	ldr	r3, [r3, #4]
 80a1cf4:	9301      	str	r3, [sp, #4]
 80a1cf6:	bd08      	pop	{r3, pc}
 80a1cf8:	080601c8 	.word	0x080601c8

080a1cfc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1cfc:	b508      	push	{r3, lr}
 80a1cfe:	4b02      	ldr	r3, [pc, #8]	; (80a1d08 <network_connecting+0xc>)
 80a1d00:	681b      	ldr	r3, [r3, #0]
 80a1d02:	689b      	ldr	r3, [r3, #8]
 80a1d04:	9301      	str	r3, [sp, #4]
 80a1d06:	bd08      	pop	{r3, pc}
 80a1d08:	080601c8 	.word	0x080601c8

080a1d0c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1d0c:	b508      	push	{r3, lr}
 80a1d0e:	4b02      	ldr	r3, [pc, #8]	; (80a1d18 <network_disconnect+0xc>)
 80a1d10:	681b      	ldr	r3, [r3, #0]
 80a1d12:	68db      	ldr	r3, [r3, #12]
 80a1d14:	9301      	str	r3, [sp, #4]
 80a1d16:	bd08      	pop	{r3, pc}
 80a1d18:	080601c8 	.word	0x080601c8

080a1d1c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1d1c:	b508      	push	{r3, lr}
 80a1d1e:	4b02      	ldr	r3, [pc, #8]	; (80a1d28 <network_ready+0xc>)
 80a1d20:	681b      	ldr	r3, [r3, #0]
 80a1d22:	691b      	ldr	r3, [r3, #16]
 80a1d24:	9301      	str	r3, [sp, #4]
 80a1d26:	bd08      	pop	{r3, pc}
 80a1d28:	080601c8 	.word	0x080601c8

080a1d2c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1d2c:	b508      	push	{r3, lr}
 80a1d2e:	4b02      	ldr	r3, [pc, #8]	; (80a1d38 <network_on+0xc>)
 80a1d30:	681b      	ldr	r3, [r3, #0]
 80a1d32:	695b      	ldr	r3, [r3, #20]
 80a1d34:	9301      	str	r3, [sp, #4]
 80a1d36:	bd08      	pop	{r3, pc}
 80a1d38:	080601c8 	.word	0x080601c8

080a1d3c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1d3c:	b508      	push	{r3, lr}
 80a1d3e:	4b02      	ldr	r3, [pc, #8]	; (80a1d48 <network_off+0xc>)
 80a1d40:	681b      	ldr	r3, [r3, #0]
 80a1d42:	699b      	ldr	r3, [r3, #24]
 80a1d44:	9301      	str	r3, [sp, #4]
 80a1d46:	bd08      	pop	{r3, pc}
 80a1d48:	080601c8 	.word	0x080601c8

080a1d4c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1d4c:	b508      	push	{r3, lr}
 80a1d4e:	4b02      	ldr	r3, [pc, #8]	; (80a1d58 <network_listen+0xc>)
 80a1d50:	681b      	ldr	r3, [r3, #0]
 80a1d52:	69db      	ldr	r3, [r3, #28]
 80a1d54:	9301      	str	r3, [sp, #4]
 80a1d56:	bd08      	pop	{r3, pc}
 80a1d58:	080601c8 	.word	0x080601c8

080a1d5c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1d5c:	b508      	push	{r3, lr}
 80a1d5e:	4b02      	ldr	r3, [pc, #8]	; (80a1d68 <network_listening+0xc>)
 80a1d60:	681b      	ldr	r3, [r3, #0]
 80a1d62:	6a1b      	ldr	r3, [r3, #32]
 80a1d64:	9301      	str	r3, [sp, #4]
 80a1d66:	bd08      	pop	{r3, pc}
 80a1d68:	080601c8 	.word	0x080601c8

080a1d6c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1d6c:	b508      	push	{r3, lr}
 80a1d6e:	4b02      	ldr	r3, [pc, #8]	; (80a1d78 <network_set_listen_timeout+0xc>)
 80a1d70:	681b      	ldr	r3, [r3, #0]
 80a1d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1d74:	9301      	str	r3, [sp, #4]
 80a1d76:	bd08      	pop	{r3, pc}
 80a1d78:	080601c8 	.word	0x080601c8

080a1d7c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1d7c:	b508      	push	{r3, lr}
 80a1d7e:	4b02      	ldr	r3, [pc, #8]	; (80a1d88 <network_get_listen_timeout+0xc>)
 80a1d80:	681b      	ldr	r3, [r3, #0]
 80a1d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1d84:	9301      	str	r3, [sp, #4]
 80a1d86:	bd08      	pop	{r3, pc}
 80a1d88:	080601c8 	.word	0x080601c8

080a1d8c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1d8c:	b508      	push	{r3, lr}
 80a1d8e:	4b02      	ldr	r3, [pc, #8]	; (80a1d98 <spark_process+0xc>)
 80a1d90:	681b      	ldr	r3, [r3, #0]
 80a1d92:	689b      	ldr	r3, [r3, #8]
 80a1d94:	9301      	str	r3, [sp, #4]
 80a1d96:	bd08      	pop	{r3, pc}
 80a1d98:	080601cc 	.word	0x080601cc

080a1d9c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1d9c:	b508      	push	{r3, lr}
 80a1d9e:	4b02      	ldr	r3, [pc, #8]	; (80a1da8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1da0:	681b      	ldr	r3, [r3, #0]
 80a1da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1da4:	9301      	str	r3, [sp, #4]
 80a1da6:	bd08      	pop	{r3, pc}
 80a1da8:	080601cc 	.word	0x080601cc

080a1dac <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1dac:	b508      	push	{r3, lr}
 80a1dae:	4b02      	ldr	r3, [pc, #8]	; (80a1db8 <malloc+0xc>)
 80a1db0:	681b      	ldr	r3, [r3, #0]
 80a1db2:	681b      	ldr	r3, [r3, #0]
 80a1db4:	9301      	str	r3, [sp, #4]
 80a1db6:	bd08      	pop	{r3, pc}
 80a1db8:	080601a0 	.word	0x080601a0

080a1dbc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1dbc:	b508      	push	{r3, lr}
 80a1dbe:	4b02      	ldr	r3, [pc, #8]	; (80a1dc8 <free+0xc>)
 80a1dc0:	681b      	ldr	r3, [r3, #0]
 80a1dc2:	685b      	ldr	r3, [r3, #4]
 80a1dc4:	9301      	str	r3, [sp, #4]
 80a1dc6:	bd08      	pop	{r3, pc}
 80a1dc8:	080601a0 	.word	0x080601a0

080a1dcc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1dcc:	4770      	bx	lr

080a1dce <_ZN8SPIClassD0Ev>:
 80a1dce:	b510      	push	{r4, lr}
 80a1dd0:	4604      	mov	r4, r0
 80a1dd2:	2110      	movs	r1, #16
 80a1dd4:	f000 fd31 	bl	80a283a <_ZdlPvj>
 80a1dd8:	4620      	mov	r0, r4
 80a1dda:	bd10      	pop	{r4, pc}

080a1ddc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1ddc:	b570      	push	{r4, r5, r6, lr}
 80a1dde:	4604      	mov	r4, r0
 80a1de0:	460e      	mov	r6, r1
 80a1de2:	4b07      	ldr	r3, [pc, #28]	; (80a1e00 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1de4:	2500      	movs	r5, #0
 80a1de6:	6003      	str	r3, [r0, #0]
 80a1de8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1dec:	f7ff fe68 	bl	80a1ac0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1df0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1df2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1df4:	f7ff fe3c 	bl	80a1a70 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1df8:	60a5      	str	r5, [r4, #8]
}
 80a1dfa:	4620      	mov	r0, r4
 80a1dfc:	bd70      	pop	{r4, r5, r6, pc}
 80a1dfe:	bf00      	nop
 80a1e00:	080a2bf4 	.word	0x080a2bf4

080a1e04 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1e04:	7900      	ldrb	r0, [r0, #4]
 80a1e06:	f7ff be3b 	b.w	80a1a80 <HAL_SPI_Is_Enabled>
	...

080a1e0c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 80a1e0c:	b510      	push	{r4, lr}
 80a1e0e:	4604      	mov	r4, r0
 80a1e10:	4608      	mov	r0, r1
 80a1e12:	4611      	mov	r1, r2
 80a1e14:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 80a1e16:	2300      	movs	r3, #0
 80a1e18:	f7ff ff4c 	bl	80a1cb4 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
 80a1e1c:	4b06      	ldr	r3, [pc, #24]	; (80a1e38 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
 80a1e1e:	2200      	movs	r2, #0
 80a1e20:	701a      	strb	r2, [r3, #0]
 80a1e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1e26:	8058      	strh	r0, [r3, #2]
 80a1e28:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 80a1e2a:	681a      	ldr	r2, [r3, #0]
 80a1e2c:	889b      	ldrh	r3, [r3, #4]
 80a1e2e:	6022      	str	r2, [r4, #0]
 80a1e30:	80a3      	strh	r3, [r4, #4]
}
 80a1e32:	4620      	mov	r0, r4
 80a1e34:	bd10      	pop	{r4, pc}
 80a1e36:	bf00      	nop
 80a1e38:	200000b0 	.word	0x200000b0

080a1e3c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1e40:	4b03      	ldr	r3, [pc, #12]	; (80a1e50 <_GLOBAL__sub_I_System+0x14>)
 80a1e42:	2000      	movs	r0, #0
 80a1e44:	7018      	strb	r0, [r3, #0]
 80a1e46:	8058      	strh	r0, [r3, #2]
 80a1e48:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1e4a:	f7ff bf23 	b.w	80a1c94 <set_system_mode>
 80a1e4e:	bf00      	nop
 80a1e50:	200000b0 	.word	0x200000b0

080a1e54 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1e56:	4606      	mov	r6, r0
 80a1e58:	460d      	mov	r5, r1
 80a1e5a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1e5c:	2400      	movs	r4, #0
  while (size--) {
 80a1e5e:	42bd      	cmp	r5, r7
 80a1e60:	d00c      	beq.n	80a1e7c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1e62:	6833      	ldr	r3, [r6, #0]
 80a1e64:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1e68:	689b      	ldr	r3, [r3, #8]
 80a1e6a:	4630      	mov	r0, r6
 80a1e6c:	4798      	blx	r3
     if (chunk>=0)
 80a1e6e:	2800      	cmp	r0, #0
 80a1e70:	db01      	blt.n	80a1e76 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1e72:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1e74:	e7f3      	b.n	80a1e5e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1e76:	2c00      	cmp	r4, #0
 80a1e78:	bf08      	it	eq
 80a1e7a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1e7c:	4620      	mov	r0, r4
 80a1e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1e80 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1e80:	b570      	push	{r4, r5, r6, lr}
 80a1e82:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1e84:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1e86:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1e88:	b149      	cbz	r1, 80a1e9e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1e8a:	f000 fe6b 	bl	80a2b64 <strlen>
 80a1e8e:	682b      	ldr	r3, [r5, #0]
 80a1e90:	4602      	mov	r2, r0
 80a1e92:	4621      	mov	r1, r4
 80a1e94:	4628      	mov	r0, r5
    }
 80a1e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1e9a:	68db      	ldr	r3, [r3, #12]
 80a1e9c:	4718      	bx	r3
    }
 80a1e9e:	bd70      	pop	{r4, r5, r6, pc}

080a1ea0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1ea0:	6803      	ldr	r3, [r0, #0]
 80a1ea2:	689b      	ldr	r3, [r3, #8]
 80a1ea4:	4718      	bx	r3

080a1ea6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1ea6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1ea8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1eaa:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1eac:	f7ff fff8 	bl	80a1ea0 <_ZN5Print5printEc>
  n += print('\n');
 80a1eb0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1eb2:	4604      	mov	r4, r0
  n += print('\n');
 80a1eb4:	4628      	mov	r0, r5
 80a1eb6:	f7ff fff3 	bl	80a1ea0 <_ZN5Print5printEc>
  return n;
}
 80a1eba:	4420      	add	r0, r4
 80a1ebc:	bd38      	pop	{r3, r4, r5, pc}

080a1ebe <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1ebe:	b538      	push	{r3, r4, r5, lr}
 80a1ec0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1ec2:	f7ff ffdd 	bl	80a1e80 <_ZN5Print5writeEPKc>
 80a1ec6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1ec8:	4628      	mov	r0, r5
 80a1eca:	f7ff ffec 	bl	80a1ea6 <_ZN5Print7printlnEv>
  return n;
}
 80a1ece:	4420      	add	r0, r4
 80a1ed0:	bd38      	pop	{r3, r4, r5, pc}

080a1ed2 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1ed2:	2a01      	cmp	r2, #1
 80a1ed4:	bf98      	it	ls
 80a1ed6:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1ed8:	b530      	push	{r4, r5, lr}
 80a1eda:	460b      	mov	r3, r1
 80a1edc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1ede:	2100      	movs	r1, #0
 80a1ee0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1ee4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1ee8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1eec:	fb05 3312 	mls	r3, r5, r2, r3
 80a1ef0:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1ef2:	2b09      	cmp	r3, #9
 80a1ef4:	bf94      	ite	ls
 80a1ef6:	3330      	addls	r3, #48	; 0x30
 80a1ef8:	3337      	addhi	r3, #55	; 0x37
 80a1efa:	b2db      	uxtb	r3, r3
 80a1efc:	4621      	mov	r1, r4
 80a1efe:	f804 3901 	strb.w	r3, [r4], #-1
 80a1f02:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1f04:	2d00      	cmp	r5, #0
 80a1f06:	d1ef      	bne.n	80a1ee8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1f08:	f7ff ffba 	bl	80a1e80 <_ZN5Print5writeEPKc>
}
 80a1f0c:	b00b      	add	sp, #44	; 0x2c
 80a1f0e:	bd30      	pop	{r4, r5, pc}

080a1f10 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1f10:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1f12:	b922      	cbnz	r2, 80a1f1e <_ZN5Print5printEmi+0xe>
 80a1f14:	6803      	ldr	r3, [r0, #0]
 80a1f16:	b2c9      	uxtb	r1, r1
 80a1f18:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1f1a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1f1c:	4718      	bx	r3
  else return printNumber(n, base);
 80a1f1e:	b2d2      	uxtb	r2, r2
}
 80a1f20:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1f22:	f7ff bfd6 	b.w	80a1ed2 <_ZN5Print11printNumberEmh>

080a1f26 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1f26:	f7ff bff3 	b.w	80a1f10 <_ZN5Print5printEmi>

080a1f2a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1f2a:	2300      	movs	r3, #0
 80a1f2c:	461a      	mov	r2, r3
 80a1f2e:	4619      	mov	r1, r3
 80a1f30:	6840      	ldr	r0, [r0, #4]
 80a1f32:	f7ff befb 	b.w	80a1d2c <network_on>
	...

080a1f38 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1f38:	4a01      	ldr	r2, [pc, #4]	; (80a1f40 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1f3a:	4b02      	ldr	r3, [pc, #8]	; (80a1f44 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1f3c:	601a      	str	r2, [r3, #0]
 80a1f3e:	4770      	bx	lr
 80a1f40:	080a2c72 	.word	0x080a2c72
 80a1f44:	200000b8 	.word	0x200000b8

080a1f48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1f48:	4b02      	ldr	r3, [pc, #8]	; (80a1f54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1f4a:	681a      	ldr	r2, [r3, #0]
 80a1f4c:	4b02      	ldr	r3, [pc, #8]	; (80a1f58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1f4e:	601a      	str	r2, [r3, #0]
 80a1f50:	4770      	bx	lr
 80a1f52:	bf00      	nop
 80a1f54:	20000004 	.word	0x20000004
 80a1f58:	200000bc 	.word	0x200000bc

080a1f5c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1f5c:	2100      	movs	r1, #0
 80a1f5e:	f7ff bea1 	b.w	80a1ca4 <system_delay_ms>

080a1f62 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1f62:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1f64:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1f66:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1f68:	b113      	cbz	r3, 80a1f70 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1f6a:	2203      	movs	r2, #3
 80a1f6c:	4601      	mov	r1, r0
 80a1f6e:	4798      	blx	r3
    }
 80a1f70:	4620      	mov	r0, r4
 80a1f72:	bd10      	pop	{r4, pc}

080a1f74 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1f74:	b510      	push	{r4, lr}
 80a1f76:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1f78:	f7ff fff3 	bl	80a1f62 <_ZNSt14_Function_baseD1Ev>
 80a1f7c:	4620      	mov	r0, r4
 80a1f7e:	bd10      	pop	{r4, pc}

080a1f80 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1f80:	4803      	ldr	r0, [pc, #12]	; (80a1f90 <_GLOBAL__sub_I_RGB+0x10>)
 80a1f82:	2300      	movs	r3, #0
 80a1f84:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1f86:	4a03      	ldr	r2, [pc, #12]	; (80a1f94 <_GLOBAL__sub_I_RGB+0x14>)
 80a1f88:	4903      	ldr	r1, [pc, #12]	; (80a1f98 <_GLOBAL__sub_I_RGB+0x18>)
 80a1f8a:	f000 bc51 	b.w	80a2830 <__aeabi_atexit>
 80a1f8e:	bf00      	nop
 80a1f90:	200000c0 	.word	0x200000c0
 80a1f94:	2000006c 	.word	0x2000006c
 80a1f98:	080a1f75 	.word	0x080a1f75

080a1f9c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1f9c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1f9e:	4b14      	ldr	r3, [pc, #80]	; (80a1ff0 <serialEventRun+0x54>)
 80a1fa0:	b133      	cbz	r3, 80a1fb0 <serialEventRun+0x14>
 80a1fa2:	f000 f96b 	bl	80a227c <_Z16_fetch_usbserialv>
 80a1fa6:	6803      	ldr	r3, [r0, #0]
 80a1fa8:	691b      	ldr	r3, [r3, #16]
 80a1faa:	4798      	blx	r3
 80a1fac:	2800      	cmp	r0, #0
 80a1fae:	dc16      	bgt.n	80a1fde <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1fb0:	4b10      	ldr	r3, [pc, #64]	; (80a1ff4 <serialEventRun+0x58>)
 80a1fb2:	b133      	cbz	r3, 80a1fc2 <serialEventRun+0x26>
 80a1fb4:	f000 fa36 	bl	80a2424 <_Z22__fetch_global_Serial1v>
 80a1fb8:	6803      	ldr	r3, [r0, #0]
 80a1fba:	691b      	ldr	r3, [r3, #16]
 80a1fbc:	4798      	blx	r3
 80a1fbe:	2800      	cmp	r0, #0
 80a1fc0:	dc10      	bgt.n	80a1fe4 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1fc2:	4b0d      	ldr	r3, [pc, #52]	; (80a1ff8 <serialEventRun+0x5c>)
 80a1fc4:	b10b      	cbz	r3, 80a1fca <serialEventRun+0x2e>
 80a1fc6:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1fca:	4b0c      	ldr	r3, [pc, #48]	; (80a1ffc <serialEventRun+0x60>)
 80a1fcc:	b17b      	cbz	r3, 80a1fee <serialEventRun+0x52>
 80a1fce:	f000 f991 	bl	80a22f4 <_Z17_fetch_usbserial1v>
 80a1fd2:	6803      	ldr	r3, [r0, #0]
 80a1fd4:	691b      	ldr	r3, [r3, #16]
 80a1fd6:	4798      	blx	r3
 80a1fd8:	2800      	cmp	r0, #0
 80a1fda:	dc06      	bgt.n	80a1fea <serialEventRun+0x4e>
 80a1fdc:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1fde:	f3af 8000 	nop.w
 80a1fe2:	e7e5      	b.n	80a1fb0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1fe4:	f3af 8000 	nop.w
 80a1fe8:	e7eb      	b.n	80a1fc2 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1fea:	f3af 8000 	nop.w
 80a1fee:	bd08      	pop	{r3, pc}
	...

080a2000 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2000:	b508      	push	{r3, lr}
	serialEventRun();
 80a2002:	f7ff ffcb 	bl	80a1f9c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2006:	f7ff fd53 	bl	80a1ab0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a200a:	4b01      	ldr	r3, [pc, #4]	; (80a2010 <_post_loop+0x10>)
 80a200c:	6018      	str	r0, [r3, #0]
 80a200e:	bd08      	pop	{r3, pc}
 80a2010:	20000564 	.word	0x20000564

080a2014 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2014:	4802      	ldr	r0, [pc, #8]	; (80a2020 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2016:	4a03      	ldr	r2, [pc, #12]	; (80a2024 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2018:	4903      	ldr	r1, [pc, #12]	; (80a2028 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a201a:	1a12      	subs	r2, r2, r0
 80a201c:	f000 bd66 	b.w	80a2aec <memcpy>
 80a2020:	40024000 	.word	0x40024000
 80a2024:	40024004 	.word	0x40024004
 80a2028:	080a2eb0 	.word	0x080a2eb0

080a202c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a202c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a202e:	2300      	movs	r3, #0
 80a2030:	9300      	str	r3, [sp, #0]
 80a2032:	461a      	mov	r2, r3
 80a2034:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2038:	f7ff fe4e 	bl	80a1cd8 <system_ctrl_set_result>
}
 80a203c:	b003      	add	sp, #12
 80a203e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2044 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2044:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2046:	8843      	ldrh	r3, [r0, #2]
 80a2048:	2b0a      	cmp	r3, #10
 80a204a:	d008      	beq.n	80a205e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a204c:	2b50      	cmp	r3, #80	; 0x50
 80a204e:	d109      	bne.n	80a2064 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2050:	4b09      	ldr	r3, [pc, #36]	; (80a2078 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2052:	681b      	ldr	r3, [r3, #0]
 80a2054:	b13b      	cbz	r3, 80a2066 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2056:	b003      	add	sp, #12
 80a2058:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a205c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a205e:	f7ff ffe5 	bl	80a202c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2062:	e006      	b.n	80a2072 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2064:	2300      	movs	r3, #0
 80a2066:	9300      	str	r3, [sp, #0]
 80a2068:	461a      	mov	r2, r3
 80a206a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a206e:	f7ff fe33 	bl	80a1cd8 <system_ctrl_set_result>
        break;
    }
}
 80a2072:	b003      	add	sp, #12
 80a2074:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2078:	200000d0 	.word	0x200000d0

080a207c <module_user_init_hook>:

void module_user_init_hook()
{
 80a207c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a207e:	4c10      	ldr	r4, [pc, #64]	; (80a20c0 <module_user_init_hook+0x44>)
 80a2080:	4d10      	ldr	r5, [pc, #64]	; (80a20c4 <module_user_init_hook+0x48>)
 80a2082:	6823      	ldr	r3, [r4, #0]
 80a2084:	42ab      	cmp	r3, r5
 80a2086:	4b10      	ldr	r3, [pc, #64]	; (80a20c8 <module_user_init_hook+0x4c>)
 80a2088:	bf0c      	ite	eq
 80a208a:	2201      	moveq	r2, #1
 80a208c:	2200      	movne	r2, #0
 80a208e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2090:	d002      	beq.n	80a2098 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2092:	f7ff ffbf 	bl	80a2014 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2096:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2098:	f7ff fcfa 	bl	80a1a90 <HAL_RNG_GetRandomNumber>
 80a209c:	4604      	mov	r4, r0
    srand(seed);
 80a209e:	f000 fd39 	bl	80a2b14 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a20a2:	4b0a      	ldr	r3, [pc, #40]	; (80a20cc <module_user_init_hook+0x50>)
 80a20a4:	b113      	cbz	r3, 80a20ac <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a20a6:	4620      	mov	r0, r4
 80a20a8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a20ac:	2100      	movs	r1, #0
 80a20ae:	4807      	ldr	r0, [pc, #28]	; (80a20cc <module_user_init_hook+0x50>)
 80a20b0:	f7ff fe74 	bl	80a1d9c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a20b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a20b8:	2100      	movs	r1, #0
 80a20ba:	4805      	ldr	r0, [pc, #20]	; (80a20d0 <module_user_init_hook+0x54>)
 80a20bc:	f7ff be02 	b.w	80a1cc4 <system_ctrl_set_app_request_handler>
 80a20c0:	40024000 	.word	0x40024000
 80a20c4:	9a271c1e 	.word	0x9a271c1e
 80a20c8:	200000d4 	.word	0x200000d4
 80a20cc:	00000000 	.word	0x00000000
 80a20d0:	080a2045 	.word	0x080a2045

080a20d4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a20d4:	4770      	bx	lr

080a20d6 <_ZN9IPAddressD0Ev>:
 80a20d6:	b510      	push	{r4, lr}
 80a20d8:	4604      	mov	r4, r0
 80a20da:	2118      	movs	r1, #24
 80a20dc:	f000 fbad 	bl	80a283a <_ZdlPvj>
 80a20e0:	4620      	mov	r0, r4
 80a20e2:	bd10      	pop	{r4, pc}

080a20e4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a20e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a20e6:	460f      	mov	r7, r1
 80a20e8:	f100 0608 	add.w	r6, r0, #8
 80a20ec:	1d05      	adds	r5, r0, #4
 80a20ee:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a20f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a20f4:	220a      	movs	r2, #10
 80a20f6:	4638      	mov	r0, r7
 80a20f8:	f7ff ff15 	bl	80a1f26 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a20fc:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a20fe:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2100:	d007      	beq.n	80a2112 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2102:	2c00      	cmp	r4, #0
 80a2104:	d0f4      	beq.n	80a20f0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2106:	212e      	movs	r1, #46	; 0x2e
 80a2108:	4638      	mov	r0, r7
 80a210a:	f7ff fec9 	bl	80a1ea0 <_ZN5Print5printEc>
 80a210e:	4404      	add	r4, r0
 80a2110:	e7ee      	b.n	80a20f0 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2112:	4620      	mov	r0, r4
 80a2114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2118 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2118:	b510      	push	{r4, lr}
 80a211a:	4604      	mov	r4, r0
 80a211c:	4b04      	ldr	r3, [pc, #16]	; (80a2130 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a211e:	2211      	movs	r2, #17
 80a2120:	f840 3b04 	str.w	r3, [r0], #4
 80a2124:	2100      	movs	r1, #0
 80a2126:	f000 fcec 	bl	80a2b02 <memset>
{
    clear();
}
 80a212a:	4620      	mov	r0, r4
 80a212c:	bd10      	pop	{r4, pc}
 80a212e:	bf00      	nop
 80a2130:	080a2d14 	.word	0x080a2d14

080a2134 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2134:	4603      	mov	r3, r0
 80a2136:	4a07      	ldr	r2, [pc, #28]	; (80a2154 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2138:	b510      	push	{r4, lr}
 80a213a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a213e:	f101 0210 	add.w	r2, r1, #16
 80a2142:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2146:	4291      	cmp	r1, r2
 80a2148:	f843 4b04 	str.w	r4, [r3], #4
 80a214c:	d1f9      	bne.n	80a2142 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a214e:	780a      	ldrb	r2, [r1, #0]
 80a2150:	701a      	strb	r2, [r3, #0]
}
 80a2152:	bd10      	pop	{r4, pc}
 80a2154:	080a2d14 	.word	0x080a2d14

080a2158 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2158:	4a02      	ldr	r2, [pc, #8]	; (80a2164 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a215a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a215c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a215e:	2204      	movs	r2, #4
 80a2160:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a2162:	4770      	bx	lr
 80a2164:	080a2d14 	.word	0x080a2d14

080a2168 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2168:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a216a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a216e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a2172:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a2176:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a217a:	2304      	movs	r3, #4
 80a217c:	6041      	str	r1, [r0, #4]
 80a217e:	7503      	strb	r3, [r0, #20]
 80a2180:	bd10      	pop	{r4, pc}
	...

080a2184 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2186:	4d04      	ldr	r5, [pc, #16]	; (80a2198 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2188:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a218a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a218e:	9500      	str	r5, [sp, #0]
 80a2190:	f7ff ffea 	bl	80a2168 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2194:	b003      	add	sp, #12
 80a2196:	bd30      	pop	{r4, r5, pc}
 80a2198:	080a2d14 	.word	0x080a2d14

080a219c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a219c:	7441      	strb	r1, [r0, #17]
 80a219e:	4770      	bx	lr

080a21a0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a21a0:	4770      	bx	lr

080a21a2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a21a2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a21a4:	2100      	movs	r1, #0
 80a21a6:	7c00      	ldrb	r0, [r0, #16]
 80a21a8:	f7ff fd54 	bl	80a1c54 <HAL_USB_USART_Receive_Data>
}
 80a21ac:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a21b0:	bf28      	it	cs
 80a21b2:	f04f 30ff 	movcs.w	r0, #4294967295
 80a21b6:	bd08      	pop	{r3, pc}

080a21b8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a21b8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a21ba:	2101      	movs	r1, #1
 80a21bc:	7c00      	ldrb	r0, [r0, #16]
 80a21be:	f7ff fd49 	bl	80a1c54 <HAL_USB_USART_Receive_Data>
}
 80a21c2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a21c6:	bf28      	it	cs
 80a21c8:	f04f 30ff 	movcs.w	r0, #4294967295
 80a21cc:	bd08      	pop	{r3, pc}

080a21ce <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a21ce:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a21d0:	7c00      	ldrb	r0, [r0, #16]
 80a21d2:	f7ff fd37 	bl	80a1c44 <HAL_USB_USART_Available_Data_For_Write>
}
 80a21d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a21da:	bd08      	pop	{r3, pc}

080a21dc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a21dc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a21de:	7c00      	ldrb	r0, [r0, #16]
 80a21e0:	f7ff fd28 	bl	80a1c34 <HAL_USB_USART_Available_Data>
}
 80a21e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a21e8:	bd08      	pop	{r3, pc}

080a21ea <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a21ea:	7c00      	ldrb	r0, [r0, #16]
 80a21ec:	f7ff bd42 	b.w	80a1c74 <HAL_USB_USART_Flush_Data>

080a21f0 <_ZN9USBSerialD0Ev>:
 80a21f0:	b510      	push	{r4, lr}
 80a21f2:	4604      	mov	r4, r0
 80a21f4:	2114      	movs	r1, #20
 80a21f6:	f000 fb20 	bl	80a283a <_ZdlPvj>
 80a21fa:	4620      	mov	r0, r4
 80a21fc:	bd10      	pop	{r4, pc}

080a21fe <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a21fe:	b538      	push	{r3, r4, r5, lr}
 80a2200:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2202:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2204:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2206:	f7ff fd1d 	bl	80a1c44 <HAL_USB_USART_Available_Data_For_Write>
 80a220a:	2800      	cmp	r0, #0
 80a220c:	dc01      	bgt.n	80a2212 <_ZN9USBSerial5writeEh+0x14>
 80a220e:	7c60      	ldrb	r0, [r4, #17]
 80a2210:	b128      	cbz	r0, 80a221e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2212:	4629      	mov	r1, r5
 80a2214:	7c20      	ldrb	r0, [r4, #16]
 80a2216:	f7ff fd25 	bl	80a1c64 <HAL_USB_USART_Send_Data>
 80a221a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a221e:	bd38      	pop	{r3, r4, r5, pc}

080a2220 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2220:	b510      	push	{r4, lr}
 80a2222:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2224:	2300      	movs	r3, #0
 80a2226:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a222c:	60a3      	str	r3, [r4, #8]
 80a222e:	4b05      	ldr	r3, [pc, #20]	; (80a2244 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2230:	4608      	mov	r0, r1
 80a2232:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2234:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2236:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2238:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a223a:	4611      	mov	r1, r2
 80a223c:	f7ff fcea 	bl	80a1c14 <HAL_USB_USART_Init>
}
 80a2240:	4620      	mov	r0, r4
 80a2242:	bd10      	pop	{r4, pc}
 80a2244:	080a2d28 	.word	0x080a2d28

080a2248 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2248:	2200      	movs	r2, #0
 80a224a:	7c00      	ldrb	r0, [r0, #16]
 80a224c:	f7ff bcea 	b.w	80a1c24 <HAL_USB_USART_Begin>

080a2250 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2250:	b510      	push	{r4, lr}
 80a2252:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2254:	2214      	movs	r2, #20
 80a2256:	2100      	movs	r1, #0
 80a2258:	f000 fc53 	bl	80a2b02 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a225c:	4b05      	ldr	r3, [pc, #20]	; (80a2274 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a225e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2260:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2262:	4b05      	ldr	r3, [pc, #20]	; (80a2278 <_Z19acquireSerialBufferv+0x28>)
 80a2264:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2266:	f240 1301 	movw	r3, #257	; 0x101
 80a226a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a226c:	2381      	movs	r3, #129	; 0x81
 80a226e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2270:	bd10      	pop	{r4, pc}
 80a2272:	bf00      	nop
 80a2274:	2000015d 	.word	0x2000015d
 80a2278:	200000dc 	.word	0x200000dc

080a227c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a227c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a227e:	4d0e      	ldr	r5, [pc, #56]	; (80a22b8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2280:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2282:	a801      	add	r0, sp, #4
 80a2284:	f7ff ffe4 	bl	80a2250 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2288:	6829      	ldr	r1, [r5, #0]
 80a228a:	f011 0401 	ands.w	r4, r1, #1
 80a228e:	d110      	bne.n	80a22b2 <_Z16_fetch_usbserialv+0x36>
 80a2290:	4628      	mov	r0, r5
 80a2292:	f7fd ff04 	bl	80a009e <__cxa_guard_acquire>
 80a2296:	b160      	cbz	r0, 80a22b2 <_Z16_fetch_usbserialv+0x36>
 80a2298:	aa01      	add	r2, sp, #4
 80a229a:	4621      	mov	r1, r4
 80a229c:	4807      	ldr	r0, [pc, #28]	; (80a22bc <_Z16_fetch_usbserialv+0x40>)
 80a229e:	f7ff ffbf 	bl	80a2220 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a22a2:	4628      	mov	r0, r5
 80a22a4:	f7fd ff00 	bl	80a00a8 <__cxa_guard_release>
 80a22a8:	4a05      	ldr	r2, [pc, #20]	; (80a22c0 <_Z16_fetch_usbserialv+0x44>)
 80a22aa:	4906      	ldr	r1, [pc, #24]	; (80a22c4 <_Z16_fetch_usbserialv+0x48>)
 80a22ac:	4803      	ldr	r0, [pc, #12]	; (80a22bc <_Z16_fetch_usbserialv+0x40>)
 80a22ae:	f000 fabf 	bl	80a2830 <__aeabi_atexit>
	return _usbserial;
}
 80a22b2:	4802      	ldr	r0, [pc, #8]	; (80a22bc <_Z16_fetch_usbserialv+0x40>)
 80a22b4:	b007      	add	sp, #28
 80a22b6:	bd30      	pop	{r4, r5, pc}
 80a22b8:	200000d8 	.word	0x200000d8
 80a22bc:	20000260 	.word	0x20000260
 80a22c0:	2000006c 	.word	0x2000006c
 80a22c4:	080a21a1 	.word	0x080a21a1

080a22c8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a22c8:	b510      	push	{r4, lr}
 80a22ca:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a22cc:	2214      	movs	r2, #20
 80a22ce:	2100      	movs	r1, #0
 80a22d0:	f000 fc17 	bl	80a2b02 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a22d4:	4b05      	ldr	r3, [pc, #20]	; (80a22ec <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a22d6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a22d8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a22da:	4b05      	ldr	r3, [pc, #20]	; (80a22f0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a22dc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a22de:	f240 1301 	movw	r3, #257	; 0x101
 80a22e2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a22e4:	2381      	movs	r3, #129	; 0x81
 80a22e6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a22e8:	bd10      	pop	{r4, pc}
 80a22ea:	bf00      	nop
 80a22ec:	20000310 	.word	0x20000310
 80a22f0:	20000278 	.word	0x20000278

080a22f4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a22f4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a22f6:	4c0e      	ldr	r4, [pc, #56]	; (80a2330 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a22f8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a22fa:	a801      	add	r0, sp, #4
 80a22fc:	f7ff ffe4 	bl	80a22c8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2300:	6823      	ldr	r3, [r4, #0]
 80a2302:	07db      	lsls	r3, r3, #31
 80a2304:	d410      	bmi.n	80a2328 <_Z17_fetch_usbserial1v+0x34>
 80a2306:	4620      	mov	r0, r4
 80a2308:	f7fd fec9 	bl	80a009e <__cxa_guard_acquire>
 80a230c:	b160      	cbz	r0, 80a2328 <_Z17_fetch_usbserial1v+0x34>
 80a230e:	aa01      	add	r2, sp, #4
 80a2310:	2101      	movs	r1, #1
 80a2312:	4808      	ldr	r0, [pc, #32]	; (80a2334 <_Z17_fetch_usbserial1v+0x40>)
 80a2314:	f7ff ff84 	bl	80a2220 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2318:	4620      	mov	r0, r4
 80a231a:	f7fd fec5 	bl	80a00a8 <__cxa_guard_release>
 80a231e:	4a06      	ldr	r2, [pc, #24]	; (80a2338 <_Z17_fetch_usbserial1v+0x44>)
 80a2320:	4906      	ldr	r1, [pc, #24]	; (80a233c <_Z17_fetch_usbserial1v+0x48>)
 80a2322:	4804      	ldr	r0, [pc, #16]	; (80a2334 <_Z17_fetch_usbserial1v+0x40>)
 80a2324:	f000 fa84 	bl	80a2830 <__aeabi_atexit>
  return _usbserial1;
}
 80a2328:	4802      	ldr	r0, [pc, #8]	; (80a2334 <_Z17_fetch_usbserial1v+0x40>)
 80a232a:	b006      	add	sp, #24
 80a232c:	bd10      	pop	{r4, pc}
 80a232e:	bf00      	nop
 80a2330:	20000274 	.word	0x20000274
 80a2334:	200002fc 	.word	0x200002fc
 80a2338:	2000006c 	.word	0x2000006c
 80a233c:	080a21a1 	.word	0x080a21a1

080a2340 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
 80a2340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a2342:	b285      	uxth	r5, r0

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
 80a2344:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a2346:	4628      	mov	r0, r5

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
 80a2348:	460e      	mov	r6, r1
 80a234a:	4617      	mov	r7, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a234c:	f000 f9b4 	bl	80a26b8 <pinAvailable>
 80a2350:	b160      	cbz	r0, 80a236c <tone+0x2c>
 80a2352:	2102      	movs	r1, #2
 80a2354:	4628      	mov	r0, r5
 80a2356:	f7ff fb63 	bl	80a1a20 <HAL_Validate_Pin_Function>
 80a235a:	2802      	cmp	r0, #2
 80a235c:	d106      	bne.n	80a236c <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
 80a235e:	463a      	mov	r2, r7
 80a2360:	4631      	mov	r1, r6
 80a2362:	4620      	mov	r0, r4
    }
}
 80a2364:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Start(pin, frequency, duration);
 80a2368:	f7ff bc4c 	b.w	80a1c04 <HAL_Tone_Start>
 80a236c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a236e <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a236e:	4770      	bx	lr

080a2370 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2370:	7441      	strb	r1, [r0, #17]
 80a2372:	4770      	bx	lr

080a2374 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2374:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2376:	7c00      	ldrb	r0, [r0, #16]
 80a2378:	f7ff fbe2 	bl	80a1b40 <HAL_USART_Available_Data_For_Write>
}
 80a237c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2380:	bd08      	pop	{r3, pc}

080a2382 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2382:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2384:	7c00      	ldrb	r0, [r0, #16]
 80a2386:	f7ff fbb3 	bl	80a1af0 <HAL_USART_Available_Data>
}
 80a238a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a238e:	bd08      	pop	{r3, pc}

080a2390 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2390:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2392:	7c00      	ldrb	r0, [r0, #16]
 80a2394:	f7ff fbbc 	bl	80a1b10 <HAL_USART_Peek_Data>
}
 80a2398:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a239c:	bf28      	it	cs
 80a239e:	f04f 30ff 	movcs.w	r0, #4294967295
 80a23a2:	bd08      	pop	{r3, pc}

080a23a4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a23a4:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a23a6:	7c00      	ldrb	r0, [r0, #16]
 80a23a8:	f7ff fbaa 	bl	80a1b00 <HAL_USART_Read_Data>
}
 80a23ac:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a23b0:	bf28      	it	cs
 80a23b2:	f04f 30ff 	movcs.w	r0, #4294967295
 80a23b6:	bd08      	pop	{r3, pc}

080a23b8 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a23b8:	7c00      	ldrb	r0, [r0, #16]
 80a23ba:	f7ff bbb1 	b.w	80a1b20 <HAL_USART_Flush_Data>

080a23be <_ZN11USARTSerialD0Ev>:
 80a23be:	b510      	push	{r4, lr}
 80a23c0:	4604      	mov	r4, r0
 80a23c2:	2114      	movs	r1, #20
 80a23c4:	f000 fa39 	bl	80a283a <_ZdlPvj>
 80a23c8:	4620      	mov	r0, r4
 80a23ca:	bd10      	pop	{r4, pc}

080a23cc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a23cc:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a23ce:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a23d0:	4604      	mov	r4, r0
 80a23d2:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a23d4:	b925      	cbnz	r5, 80a23e0 <_ZN11USARTSerial5writeEh+0x14>
 80a23d6:	7c00      	ldrb	r0, [r0, #16]
 80a23d8:	f7ff fbb2 	bl	80a1b40 <HAL_USART_Available_Data_For_Write>
 80a23dc:	2800      	cmp	r0, #0
 80a23de:	dd05      	ble.n	80a23ec <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a23e0:	4631      	mov	r1, r6
 80a23e2:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a23e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a23e8:	f7ff bb7a 	b.w	80a1ae0 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a23ec:	4628      	mov	r0, r5
 80a23ee:	bd70      	pop	{r4, r5, r6, pc}

080a23f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a23f0:	b510      	push	{r4, lr}
 80a23f2:	4604      	mov	r4, r0
 80a23f4:	4608      	mov	r0, r1
 80a23f6:	4611      	mov	r1, r2
 80a23f8:	2200      	movs	r2, #0
 80a23fa:	6062      	str	r2, [r4, #4]
 80a23fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2400:	60a2      	str	r2, [r4, #8]
 80a2402:	4a05      	ldr	r2, [pc, #20]	; (80a2418 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2404:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2406:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2408:	2201      	movs	r2, #1
 80a240a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a240c:	461a      	mov	r2, r3
 80a240e:	f7ff fb5f 	bl	80a1ad0 <HAL_USART_Init>
}
 80a2412:	4620      	mov	r0, r4
 80a2414:	bd10      	pop	{r4, pc}
 80a2416:	bf00      	nop
 80a2418:	080a2d58 	.word	0x080a2d58

080a241c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a241c:	7c00      	ldrb	r0, [r0, #16]
 80a241e:	f7ff bb87 	b.w	80a1b30 <HAL_USART_Is_Enabled>
	...

080a2424 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2424:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2426:	4d0c      	ldr	r5, [pc, #48]	; (80a2458 <_Z22__fetch_global_Serial1v+0x34>)
 80a2428:	6829      	ldr	r1, [r5, #0]
 80a242a:	f011 0401 	ands.w	r4, r1, #1
 80a242e:	d111      	bne.n	80a2454 <_Z22__fetch_global_Serial1v+0x30>
 80a2430:	4628      	mov	r0, r5
 80a2432:	f7fd fe34 	bl	80a009e <__cxa_guard_acquire>
 80a2436:	b168      	cbz	r0, 80a2454 <_Z22__fetch_global_Serial1v+0x30>
 80a2438:	4a08      	ldr	r2, [pc, #32]	; (80a245c <_Z22__fetch_global_Serial1v+0x38>)
 80a243a:	4621      	mov	r1, r4
 80a243c:	4b08      	ldr	r3, [pc, #32]	; (80a2460 <_Z22__fetch_global_Serial1v+0x3c>)
 80a243e:	4809      	ldr	r0, [pc, #36]	; (80a2464 <_Z22__fetch_global_Serial1v+0x40>)
 80a2440:	f7ff ffd6 	bl	80a23f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2444:	4628      	mov	r0, r5
 80a2446:	f7fd fe2f 	bl	80a00a8 <__cxa_guard_release>
 80a244a:	4a07      	ldr	r2, [pc, #28]	; (80a2468 <_Z22__fetch_global_Serial1v+0x44>)
 80a244c:	4907      	ldr	r1, [pc, #28]	; (80a246c <_Z22__fetch_global_Serial1v+0x48>)
 80a244e:	4805      	ldr	r0, [pc, #20]	; (80a2464 <_Z22__fetch_global_Serial1v+0x40>)
 80a2450:	f000 f9ee 	bl	80a2830 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2454:	4803      	ldr	r0, [pc, #12]	; (80a2464 <_Z22__fetch_global_Serial1v+0x40>)
 80a2456:	bd38      	pop	{r3, r4, r5, pc}
 80a2458:	200004ac 	.word	0x200004ac
 80a245c:	200004b0 	.word	0x200004b0
 80a2460:	20000428 	.word	0x20000428
 80a2464:	20000414 	.word	0x20000414
 80a2468:	2000006c 	.word	0x2000006c
 80a246c:	080a236f 	.word	0x080a236f

080a2470 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2470:	4770      	bx	lr

080a2472 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2474:	4606      	mov	r6, r0
 80a2476:	4615      	mov	r5, r2
 80a2478:	460c      	mov	r4, r1
 80a247a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a247c:	42bc      	cmp	r4, r7
 80a247e:	d006      	beq.n	80a248e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2480:	6833      	ldr	r3, [r6, #0]
 80a2482:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2486:	689b      	ldr	r3, [r3, #8]
 80a2488:	4630      	mov	r0, r6
 80a248a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a248c:	e7f6      	b.n	80a247c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a248e:	4628      	mov	r0, r5
 80a2490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2492 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2492:	2200      	movs	r2, #0
 80a2494:	7c00      	ldrb	r0, [r0, #16]
 80a2496:	f7ff bb7b 	b.w	80a1b90 <HAL_I2C_Write_Data>

080a249a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a249a:	2100      	movs	r1, #0
 80a249c:	7c00      	ldrb	r0, [r0, #16]
 80a249e:	f7ff bb7f 	b.w	80a1ba0 <HAL_I2C_Available_Data>

080a24a2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a24a2:	2100      	movs	r1, #0
 80a24a4:	7c00      	ldrb	r0, [r0, #16]
 80a24a6:	f7ff bb83 	b.w	80a1bb0 <HAL_I2C_Read_Data>

080a24aa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a24aa:	2100      	movs	r1, #0
 80a24ac:	7c00      	ldrb	r0, [r0, #16]
 80a24ae:	f7ff bb87 	b.w	80a1bc0 <HAL_I2C_Peek_Data>

080a24b2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a24b2:	2100      	movs	r1, #0
 80a24b4:	7c00      	ldrb	r0, [r0, #16]
 80a24b6:	f7ff bb8b 	b.w	80a1bd0 <HAL_I2C_Flush_Data>

080a24ba <_ZN7TwoWireD0Ev>:
 80a24ba:	b510      	push	{r4, lr}
 80a24bc:	4604      	mov	r4, r0
 80a24be:	2114      	movs	r1, #20
 80a24c0:	f000 f9bb 	bl	80a283a <_ZdlPvj>
 80a24c4:	4620      	mov	r0, r4
 80a24c6:	bd10      	pop	{r4, pc}

080a24c8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a24c8:	b510      	push	{r4, lr}
 80a24ca:	4604      	mov	r4, r0
 80a24cc:	4608      	mov	r0, r1
 80a24ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a24d2:	60a3      	str	r3, [r4, #8]
 80a24d4:	4b04      	ldr	r3, [pc, #16]	; (80a24e8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a24d6:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a24d8:	7420      	strb	r0, [r4, #16]
 80a24da:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a24dc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a24de:	f7ff fb87 	bl	80a1bf0 <HAL_I2C_Init>

}
 80a24e2:	4620      	mov	r0, r4
 80a24e4:	bd10      	pop	{r4, pc}
 80a24e6:	bf00      	nop
 80a24e8:	080a2d88 	.word	0x080a2d88

080a24ec <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a24ec:	2300      	movs	r3, #0
 80a24ee:	461a      	mov	r2, r3
 80a24f0:	4619      	mov	r1, r3
 80a24f2:	7c00      	ldrb	r0, [r0, #16]
 80a24f4:	f7ff bb2c 	b.w	80a1b50 <HAL_I2C_Begin>

080a24f8 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a24f8:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a24fa:	2400      	movs	r4, #0
 80a24fc:	7c00      	ldrb	r0, [r0, #16]
 80a24fe:	9400      	str	r4, [sp, #0]
 80a2500:	f7ff fb2e 	bl	80a1b60 <HAL_I2C_Request_Data>
  return result;
}
 80a2504:	b2c0      	uxtb	r0, r0
 80a2506:	b002      	add	sp, #8
 80a2508:	bd10      	pop	{r4, pc}

080a250a <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a250a:	2301      	movs	r3, #1
 80a250c:	b2d2      	uxtb	r2, r2
 80a250e:	b2c9      	uxtb	r1, r1
 80a2510:	f7ff bff2 	b.w	80a24f8 <_ZN7TwoWire11requestFromEhhh>

080a2514 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a2514:	2200      	movs	r2, #0
 80a2516:	7c00      	ldrb	r0, [r0, #16]
 80a2518:	f7ff bb2a 	b.w	80a1b70 <HAL_I2C_Begin_Transmission>

080a251c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a251c:	b2c9      	uxtb	r1, r1
 80a251e:	f7ff bff9 	b.w	80a2514 <_ZN7TwoWire17beginTransmissionEh>

080a2522 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a2522:	2200      	movs	r2, #0
 80a2524:	7c00      	ldrb	r0, [r0, #16]
 80a2526:	f7ff bb2b 	b.w	80a1b80 <HAL_I2C_End_Transmission>

080a252a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a252a:	2101      	movs	r1, #1
 80a252c:	f7ff bff9 	b.w	80a2522 <_ZN7TwoWire15endTransmissionEh>

080a2530 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a2530:	2100      	movs	r1, #0
 80a2532:	7c00      	ldrb	r0, [r0, #16]
 80a2534:	f7ff bb54 	b.w	80a1be0 <HAL_I2C_Is_Enabled>

080a2538 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2538:	2200      	movs	r2, #0
 80a253a:	4611      	mov	r1, r2
 80a253c:	6840      	ldr	r0, [r0, #4]
 80a253e:	f7ff bbed 	b.w	80a1d1c <network_ready>

080a2542 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2542:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2544:	4616      	mov	r6, r2
 80a2546:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2548:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a254a:	460f      	mov	r7, r1
 80a254c:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a254e:	2100      	movs	r1, #0
 80a2550:	a803      	add	r0, sp, #12
 80a2552:	f000 fad6 	bl	80a2b02 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2556:	4630      	mov	r0, r6
 80a2558:	f000 fb04 	bl	80a2b64 <strlen>
 80a255c:	2500      	movs	r5, #0
 80a255e:	9500      	str	r5, [sp, #0]
 80a2560:	b281      	uxth	r1, r0
 80a2562:	687b      	ldr	r3, [r7, #4]
 80a2564:	aa03      	add	r2, sp, #12
 80a2566:	4630      	mov	r0, r6
 80a2568:	f7ff fb8c 	bl	80a1c84 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a256c:	b120      	cbz	r0, 80a2578 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a256e:	4629      	mov	r1, r5
 80a2570:	4620      	mov	r0, r4
 80a2572:	f7ff fdf1 	bl	80a2158 <_ZN9IPAddressC1Em>
 80a2576:	e003      	b.n	80a2580 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2578:	a903      	add	r1, sp, #12
 80a257a:	4620      	mov	r0, r4
 80a257c:	f7ff fdda 	bl	80a2134 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2580:	4620      	mov	r0, r4
 80a2582:	b009      	add	sp, #36	; 0x24
 80a2584:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2586 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2586:	2200      	movs	r2, #0
 80a2588:	4611      	mov	r1, r2
 80a258a:	6840      	ldr	r0, [r0, #4]
 80a258c:	f7ff bbe6 	b.w	80a1d5c <network_listening>

080a2590 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2590:	2200      	movs	r2, #0
 80a2592:	4611      	mov	r1, r2
 80a2594:	6840      	ldr	r0, [r0, #4]
 80a2596:	f7ff bbf1 	b.w	80a1d7c <network_get_listen_timeout>

080a259a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a259a:	2200      	movs	r2, #0
 80a259c:	6840      	ldr	r0, [r0, #4]
 80a259e:	f7ff bbe5 	b.w	80a1d6c <network_set_listen_timeout>

080a25a2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a25a2:	2200      	movs	r2, #0
 80a25a4:	f081 0101 	eor.w	r1, r1, #1
 80a25a8:	6840      	ldr	r0, [r0, #4]
 80a25aa:	f7ff bbcf 	b.w	80a1d4c <network_listen>

080a25ae <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a25ae:	2300      	movs	r3, #0
 80a25b0:	461a      	mov	r2, r3
 80a25b2:	4619      	mov	r1, r3
 80a25b4:	6840      	ldr	r0, [r0, #4]
 80a25b6:	f7ff bbc1 	b.w	80a1d3c <network_off>

080a25ba <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a25ba:	2200      	movs	r2, #0
 80a25bc:	4611      	mov	r1, r2
 80a25be:	6840      	ldr	r0, [r0, #4]
 80a25c0:	f7ff bb9c 	b.w	80a1cfc <network_connecting>

080a25c4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a25c4:	2200      	movs	r2, #0
 80a25c6:	2102      	movs	r1, #2
 80a25c8:	6840      	ldr	r0, [r0, #4]
 80a25ca:	f7ff bb9f 	b.w	80a1d0c <network_disconnect>

080a25ce <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a25ce:	2300      	movs	r3, #0
 80a25d0:	461a      	mov	r2, r3
 80a25d2:	6840      	ldr	r0, [r0, #4]
 80a25d4:	f7ff bb8a 	b.w	80a1cec <network_connect>

080a25d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a25d8:	4b02      	ldr	r3, [pc, #8]	; (80a25e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a25da:	2204      	movs	r2, #4
 80a25dc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a25de:	4a02      	ldr	r2, [pc, #8]	; (80a25e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a25e0:	601a      	str	r2, [r3, #0]
 80a25e2:	4770      	bx	lr
 80a25e4:	20000534 	.word	0x20000534
 80a25e8:	080a2db0 	.word	0x080a2db0

080a25ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a25ec:	2300      	movs	r3, #0
 80a25ee:	461a      	mov	r2, r3
 80a25f0:	6840      	ldr	r0, [r0, #4]
 80a25f2:	f7ff bb7b 	b.w	80a1cec <network_connect>

080a25f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a25f6:	2200      	movs	r2, #0
 80a25f8:	2102      	movs	r1, #2
 80a25fa:	6840      	ldr	r0, [r0, #4]
 80a25fc:	f7ff bb86 	b.w	80a1d0c <network_disconnect>

080a2600 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2600:	2200      	movs	r2, #0
 80a2602:	4611      	mov	r1, r2
 80a2604:	6840      	ldr	r0, [r0, #4]
 80a2606:	f7ff bb79 	b.w	80a1cfc <network_connecting>

080a260a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a260a:	2200      	movs	r2, #0
 80a260c:	4611      	mov	r1, r2
 80a260e:	6840      	ldr	r0, [r0, #4]
 80a2610:	f7ff bb84 	b.w	80a1d1c <network_ready>

080a2614 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2614:	2300      	movs	r3, #0
 80a2616:	461a      	mov	r2, r3
 80a2618:	4619      	mov	r1, r3
 80a261a:	6840      	ldr	r0, [r0, #4]
 80a261c:	f7ff bb86 	b.w	80a1d2c <network_on>

080a2620 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2620:	2300      	movs	r3, #0
 80a2622:	461a      	mov	r2, r3
 80a2624:	4619      	mov	r1, r3
 80a2626:	6840      	ldr	r0, [r0, #4]
 80a2628:	f7ff bb88 	b.w	80a1d3c <network_off>

080a262c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a262c:	2200      	movs	r2, #0
 80a262e:	f081 0101 	eor.w	r1, r1, #1
 80a2632:	6840      	ldr	r0, [r0, #4]
 80a2634:	f7ff bb8a 	b.w	80a1d4c <network_listen>

080a2638 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2638:	2200      	movs	r2, #0
 80a263a:	6840      	ldr	r0, [r0, #4]
 80a263c:	f7ff bb96 	b.w	80a1d6c <network_set_listen_timeout>

080a2640 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2640:	2200      	movs	r2, #0
 80a2642:	4611      	mov	r1, r2
 80a2644:	6840      	ldr	r0, [r0, #4]
 80a2646:	f7ff bb99 	b.w	80a1d7c <network_get_listen_timeout>

080a264a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a264a:	2200      	movs	r2, #0
 80a264c:	4611      	mov	r1, r2
 80a264e:	6840      	ldr	r0, [r0, #4]
 80a2650:	f7ff bb84 	b.w	80a1d5c <network_listening>

080a2654 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2654:	b570      	push	{r4, r5, r6, lr}
 80a2656:	4616      	mov	r6, r2
 80a2658:	b08e      	sub	sp, #56	; 0x38
 80a265a:	4604      	mov	r4, r0
    IPAddress addr;
 80a265c:	a808      	add	r0, sp, #32
 80a265e:	f7ff fd5b 	bl	80a2118 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2662:	2211      	movs	r2, #17
 80a2664:	2100      	movs	r1, #0
 80a2666:	a803      	add	r0, sp, #12
 80a2668:	f000 fa4b 	bl	80a2b02 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a266c:	4630      	mov	r0, r6
 80a266e:	f000 fa79 	bl	80a2b64 <strlen>
 80a2672:	2500      	movs	r5, #0
 80a2674:	4b0a      	ldr	r3, [pc, #40]	; (80a26a0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2676:	9500      	str	r5, [sp, #0]
 80a2678:	b281      	uxth	r1, r0
 80a267a:	685b      	ldr	r3, [r3, #4]
 80a267c:	aa03      	add	r2, sp, #12
 80a267e:	4630      	mov	r0, r6
 80a2680:	f7ff fb00 	bl	80a1c84 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2684:	b120      	cbz	r0, 80a2690 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2686:	4629      	mov	r1, r5
 80a2688:	4620      	mov	r0, r4
 80a268a:	f7ff fd65 	bl	80a2158 <_ZN9IPAddressC1Em>
 80a268e:	e003      	b.n	80a2698 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2690:	a903      	add	r1, sp, #12
 80a2692:	4620      	mov	r0, r4
 80a2694:	f7ff fd4e 	bl	80a2134 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2698:	4620      	mov	r0, r4
 80a269a:	b00e      	add	sp, #56	; 0x38
 80a269c:	bd70      	pop	{r4, r5, r6, pc}
 80a269e:	bf00      	nop
 80a26a0:	20000534 	.word	0x20000534

080a26a4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a26a4:	4b02      	ldr	r3, [pc, #8]	; (80a26b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a26a6:	4a03      	ldr	r2, [pc, #12]	; (80a26b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a26a8:	601a      	str	r2, [r3, #0]
 80a26aa:	2200      	movs	r2, #0
 80a26ac:	605a      	str	r2, [r3, #4]
 80a26ae:	4770      	bx	lr
 80a26b0:	2000053c 	.word	0x2000053c
 80a26b4:	080a2de4 	.word	0x080a2de4

080a26b8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a26b8:	b510      	push	{r4, lr}
 80a26ba:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a26bc:	480f      	ldr	r0, [pc, #60]	; (80a26fc <pinAvailable+0x44>)
 80a26be:	f7ff fba1 	bl	80a1e04 <_ZN8SPIClass9isEnabledEv>
 80a26c2:	b128      	cbz	r0, 80a26d0 <pinAvailable+0x18>
 80a26c4:	f1a4 030d 	sub.w	r3, r4, #13
 80a26c8:	2b02      	cmp	r3, #2
 80a26ca:	d801      	bhi.n	80a26d0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a26cc:	2000      	movs	r0, #0
 80a26ce:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a26d0:	f000 f88e 	bl	80a27f0 <_Z19__fetch_global_Wirev>
 80a26d4:	f7ff ff2c 	bl	80a2530 <_ZN7TwoWire9isEnabledEv>
 80a26d8:	b108      	cbz	r0, 80a26de <pinAvailable+0x26>
 80a26da:	2c01      	cmp	r4, #1
 80a26dc:	d9f6      	bls.n	80a26cc <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a26de:	f7ff fea1 	bl	80a2424 <_Z22__fetch_global_Serial1v>
 80a26e2:	f7ff fe9b 	bl	80a241c <_ZN11USARTSerial9isEnabledEv>
 80a26e6:	b118      	cbz	r0, 80a26f0 <pinAvailable+0x38>
 80a26e8:	f1a4 0312 	sub.w	r3, r4, #18
 80a26ec:	2b01      	cmp	r3, #1
 80a26ee:	d9ed      	bls.n	80a26cc <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a26f0:	2c17      	cmp	r4, #23
 80a26f2:	bf8c      	ite	hi
 80a26f4:	2000      	movhi	r0, #0
 80a26f6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a26f8:	bd10      	pop	{r4, pc}
 80a26fa:	bf00      	nop
 80a26fc:	20000544 	.word	0x20000544

080a2700 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2700:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2702:	b538      	push	{r3, r4, r5, lr}
 80a2704:	4604      	mov	r4, r0
 80a2706:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2708:	d80a      	bhi.n	80a2720 <pinMode+0x20>
 80a270a:	29ff      	cmp	r1, #255	; 0xff
 80a270c:	d008      	beq.n	80a2720 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a270e:	f7ff ffd3 	bl	80a26b8 <pinAvailable>
 80a2712:	b128      	cbz	r0, 80a2720 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2714:	4629      	mov	r1, r5
 80a2716:	4620      	mov	r0, r4
}
 80a2718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a271c:	f7ff b988 	b.w	80a1a30 <HAL_Pin_Mode>
 80a2720:	bd38      	pop	{r3, r4, r5, pc}

080a2722 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2722:	b538      	push	{r3, r4, r5, lr}
 80a2724:	4604      	mov	r4, r0
 80a2726:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2728:	f7ff f98a 	bl	80a1a40 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a272c:	28ff      	cmp	r0, #255	; 0xff
 80a272e:	d010      	beq.n	80a2752 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2730:	2806      	cmp	r0, #6
 80a2732:	d804      	bhi.n	80a273e <digitalWrite+0x1c>
 80a2734:	234d      	movs	r3, #77	; 0x4d
 80a2736:	fa23 f000 	lsr.w	r0, r3, r0
 80a273a:	07c3      	lsls	r3, r0, #31
 80a273c:	d409      	bmi.n	80a2752 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a273e:	4620      	mov	r0, r4
 80a2740:	f7ff ffba 	bl	80a26b8 <pinAvailable>
 80a2744:	b128      	cbz	r0, 80a2752 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2746:	4629      	mov	r1, r5
 80a2748:	4620      	mov	r0, r4
}
 80a274a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a274e:	f7ff b97f 	b.w	80a1a50 <HAL_GPIO_Write>
 80a2752:	bd38      	pop	{r3, r4, r5, pc}

080a2754 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2754:	b510      	push	{r4, lr}
 80a2756:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2758:	f7ff f972 	bl	80a1a40 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a275c:	3804      	subs	r0, #4
 80a275e:	b2c0      	uxtb	r0, r0
 80a2760:	2801      	cmp	r0, #1
 80a2762:	d908      	bls.n	80a2776 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2764:	4620      	mov	r0, r4
 80a2766:	f7ff ffa7 	bl	80a26b8 <pinAvailable>
 80a276a:	b120      	cbz	r0, 80a2776 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a276c:	4620      	mov	r0, r4
}
 80a276e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2772:	f7ff b975 	b.w	80a1a60 <HAL_GPIO_Read>
}
 80a2776:	2000      	movs	r0, #0
 80a2778:	bd10      	pop	{r4, pc}
	...

080a277c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a277c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a277e:	4c0c      	ldr	r4, [pc, #48]	; (80a27b0 <_GLOBAL__sub_I_SPI+0x34>)
 80a2780:	4e0c      	ldr	r6, [pc, #48]	; (80a27b4 <_GLOBAL__sub_I_SPI+0x38>)
 80a2782:	4d0d      	ldr	r5, [pc, #52]	; (80a27b8 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2784:	2100      	movs	r1, #0
 80a2786:	4620      	mov	r0, r4
 80a2788:	f7ff fb28 	bl	80a1ddc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a278c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a278e:	4c0b      	ldr	r4, [pc, #44]	; (80a27bc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2790:	4632      	mov	r2, r6
 80a2792:	4629      	mov	r1, r5
 80a2794:	f000 f84c 	bl	80a2830 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2798:	2101      	movs	r1, #1
 80a279a:	4620      	mov	r0, r4
 80a279c:	f7ff fb1e 	bl	80a1ddc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a27a0:	4632      	mov	r2, r6
 80a27a2:	4629      	mov	r1, r5
 80a27a4:	4620      	mov	r0, r4
 80a27a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a27aa:	f000 b841 	b.w	80a2830 <__aeabi_atexit>
 80a27ae:	bf00      	nop
 80a27b0:	20000544 	.word	0x20000544
 80a27b4:	2000006c 	.word	0x2000006c
 80a27b8:	080a1dcd 	.word	0x080a1dcd
 80a27bc:	20000554 	.word	0x20000554

080a27c0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a27c0:	b513      	push	{r0, r1, r4, lr}
 80a27c2:	4c08      	ldr	r4, [pc, #32]	; (80a27e4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a27c4:	2300      	movs	r3, #0
 80a27c6:	461a      	mov	r2, r3
 80a27c8:	4619      	mov	r1, r3
 80a27ca:	9300      	str	r3, [sp, #0]
 80a27cc:	4620      	mov	r0, r4
 80a27ce:	f7ff fcd9 	bl	80a2184 <_ZN9IPAddressC1Ehhhh>
 80a27d2:	4620      	mov	r0, r4
 80a27d4:	4a04      	ldr	r2, [pc, #16]	; (80a27e8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a27d6:	4905      	ldr	r1, [pc, #20]	; (80a27ec <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a27d8:	b002      	add	sp, #8
 80a27da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a27de:	f000 b827 	b.w	80a2830 <__aeabi_atexit>
 80a27e2:	bf00      	nop
 80a27e4:	20000568 	.word	0x20000568
 80a27e8:	2000006c 	.word	0x2000006c
 80a27ec:	080a20d5 	.word	0x080a20d5

080a27f0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a27f0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a27f2:	4d0b      	ldr	r5, [pc, #44]	; (80a2820 <_Z19__fetch_global_Wirev+0x30>)
 80a27f4:	6829      	ldr	r1, [r5, #0]
 80a27f6:	f011 0401 	ands.w	r4, r1, #1
 80a27fa:	d10f      	bne.n	80a281c <_Z19__fetch_global_Wirev+0x2c>
 80a27fc:	4628      	mov	r0, r5
 80a27fe:	f7fd fc4e 	bl	80a009e <__cxa_guard_acquire>
 80a2802:	b158      	cbz	r0, 80a281c <_Z19__fetch_global_Wirev+0x2c>
 80a2804:	4621      	mov	r1, r4
 80a2806:	4807      	ldr	r0, [pc, #28]	; (80a2824 <_Z19__fetch_global_Wirev+0x34>)
 80a2808:	f7ff fe5e 	bl	80a24c8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a280c:	4628      	mov	r0, r5
 80a280e:	f7fd fc4b 	bl	80a00a8 <__cxa_guard_release>
 80a2812:	4a05      	ldr	r2, [pc, #20]	; (80a2828 <_Z19__fetch_global_Wirev+0x38>)
 80a2814:	4905      	ldr	r1, [pc, #20]	; (80a282c <_Z19__fetch_global_Wirev+0x3c>)
 80a2816:	4803      	ldr	r0, [pc, #12]	; (80a2824 <_Z19__fetch_global_Wirev+0x34>)
 80a2818:	f000 f80a 	bl	80a2830 <__aeabi_atexit>
	return wire;
}
 80a281c:	4801      	ldr	r0, [pc, #4]	; (80a2824 <_Z19__fetch_global_Wirev+0x34>)
 80a281e:	bd38      	pop	{r3, r4, r5, pc}
 80a2820:	20000580 	.word	0x20000580
 80a2824:	20000584 	.word	0x20000584
 80a2828:	2000006c 	.word	0x2000006c
 80a282c:	080a2471 	.word	0x080a2471

080a2830 <__aeabi_atexit>:
 80a2830:	460b      	mov	r3, r1
 80a2832:	4601      	mov	r1, r0
 80a2834:	4618      	mov	r0, r3
 80a2836:	f000 b94b 	b.w	80a2ad0 <__cxa_atexit>

080a283a <_ZdlPvj>:
 80a283a:	f7fd bc2e 	b.w	80a009a <_ZdlPv>
	...

080a2840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2840:	4b18      	ldr	r3, [pc, #96]	; (80a28a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2842:	681a      	ldr	r2, [r3, #0]
 80a2844:	07d1      	lsls	r1, r2, #31
 80a2846:	bf5c      	itt	pl
 80a2848:	2201      	movpl	r2, #1
 80a284a:	601a      	strpl	r2, [r3, #0]
 80a284c:	4b16      	ldr	r3, [pc, #88]	; (80a28a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a284e:	681a      	ldr	r2, [r3, #0]
 80a2850:	07d2      	lsls	r2, r2, #31
 80a2852:	bf5c      	itt	pl
 80a2854:	2201      	movpl	r2, #1
 80a2856:	601a      	strpl	r2, [r3, #0]
 80a2858:	4b14      	ldr	r3, [pc, #80]	; (80a28ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a285a:	681a      	ldr	r2, [r3, #0]
 80a285c:	07d0      	lsls	r0, r2, #31
 80a285e:	bf5c      	itt	pl
 80a2860:	2201      	movpl	r2, #1
 80a2862:	601a      	strpl	r2, [r3, #0]
 80a2864:	4b12      	ldr	r3, [pc, #72]	; (80a28b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2866:	681a      	ldr	r2, [r3, #0]
 80a2868:	07d1      	lsls	r1, r2, #31
 80a286a:	bf5c      	itt	pl
 80a286c:	2201      	movpl	r2, #1
 80a286e:	601a      	strpl	r2, [r3, #0]
 80a2870:	4b10      	ldr	r3, [pc, #64]	; (80a28b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2872:	681a      	ldr	r2, [r3, #0]
 80a2874:	07d2      	lsls	r2, r2, #31
 80a2876:	bf5c      	itt	pl
 80a2878:	2201      	movpl	r2, #1
 80a287a:	601a      	strpl	r2, [r3, #0]
 80a287c:	4b0e      	ldr	r3, [pc, #56]	; (80a28b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a287e:	681a      	ldr	r2, [r3, #0]
 80a2880:	07d0      	lsls	r0, r2, #31
 80a2882:	bf5c      	itt	pl
 80a2884:	2201      	movpl	r2, #1
 80a2886:	601a      	strpl	r2, [r3, #0]
 80a2888:	4b0c      	ldr	r3, [pc, #48]	; (80a28bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a288a:	681a      	ldr	r2, [r3, #0]
 80a288c:	07d1      	lsls	r1, r2, #31
 80a288e:	bf5c      	itt	pl
 80a2890:	2201      	movpl	r2, #1
 80a2892:	601a      	strpl	r2, [r3, #0]
 80a2894:	4b0a      	ldr	r3, [pc, #40]	; (80a28c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2896:	681a      	ldr	r2, [r3, #0]
 80a2898:	07d2      	lsls	r2, r2, #31
 80a289a:	bf5c      	itt	pl
 80a289c:	2201      	movpl	r2, #1
 80a289e:	601a      	strpl	r2, [r3, #0]
 80a28a0:	4770      	bx	lr
 80a28a2:	bf00      	nop
 80a28a4:	200005b4 	.word	0x200005b4
 80a28a8:	200005b0 	.word	0x200005b0
 80a28ac:	200005ac 	.word	0x200005ac
 80a28b0:	200005a8 	.word	0x200005a8
 80a28b4:	200005a4 	.word	0x200005a4
 80a28b8:	200005a0 	.word	0x200005a0
 80a28bc:	2000059c 	.word	0x2000059c
 80a28c0:	20000598 	.word	0x20000598

080a28c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a28c4:	4b24      	ldr	r3, [pc, #144]	; (80a2958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a28c6:	681a      	ldr	r2, [r3, #0]
 80a28c8:	07d0      	lsls	r0, r2, #31
 80a28ca:	bf5c      	itt	pl
 80a28cc:	2201      	movpl	r2, #1
 80a28ce:	601a      	strpl	r2, [r3, #0]
 80a28d0:	4b22      	ldr	r3, [pc, #136]	; (80a295c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a28d2:	681a      	ldr	r2, [r3, #0]
 80a28d4:	07d1      	lsls	r1, r2, #31
 80a28d6:	bf5c      	itt	pl
 80a28d8:	2201      	movpl	r2, #1
 80a28da:	601a      	strpl	r2, [r3, #0]
 80a28dc:	4b20      	ldr	r3, [pc, #128]	; (80a2960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a28de:	681a      	ldr	r2, [r3, #0]
 80a28e0:	07d2      	lsls	r2, r2, #31
 80a28e2:	bf5c      	itt	pl
 80a28e4:	2201      	movpl	r2, #1
 80a28e6:	601a      	strpl	r2, [r3, #0]
 80a28e8:	4b1e      	ldr	r3, [pc, #120]	; (80a2964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a28ea:	681a      	ldr	r2, [r3, #0]
 80a28ec:	07d0      	lsls	r0, r2, #31
 80a28ee:	bf5c      	itt	pl
 80a28f0:	2201      	movpl	r2, #1
 80a28f2:	601a      	strpl	r2, [r3, #0]
 80a28f4:	4b1c      	ldr	r3, [pc, #112]	; (80a2968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a28f6:	681a      	ldr	r2, [r3, #0]
 80a28f8:	07d1      	lsls	r1, r2, #31
 80a28fa:	bf5c      	itt	pl
 80a28fc:	2201      	movpl	r2, #1
 80a28fe:	601a      	strpl	r2, [r3, #0]
 80a2900:	4b1a      	ldr	r3, [pc, #104]	; (80a296c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2902:	681a      	ldr	r2, [r3, #0]
 80a2904:	07d2      	lsls	r2, r2, #31
 80a2906:	bf5c      	itt	pl
 80a2908:	2201      	movpl	r2, #1
 80a290a:	601a      	strpl	r2, [r3, #0]
 80a290c:	4b18      	ldr	r3, [pc, #96]	; (80a2970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a290e:	681a      	ldr	r2, [r3, #0]
 80a2910:	07d0      	lsls	r0, r2, #31
 80a2912:	bf5c      	itt	pl
 80a2914:	2201      	movpl	r2, #1
 80a2916:	601a      	strpl	r2, [r3, #0]
 80a2918:	4b16      	ldr	r3, [pc, #88]	; (80a2974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a291a:	681a      	ldr	r2, [r3, #0]
 80a291c:	07d1      	lsls	r1, r2, #31
 80a291e:	bf5c      	itt	pl
 80a2920:	2201      	movpl	r2, #1
 80a2922:	601a      	strpl	r2, [r3, #0]
 80a2924:	4b14      	ldr	r3, [pc, #80]	; (80a2978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2926:	681a      	ldr	r2, [r3, #0]
 80a2928:	07d2      	lsls	r2, r2, #31
 80a292a:	bf5c      	itt	pl
 80a292c:	2201      	movpl	r2, #1
 80a292e:	601a      	strpl	r2, [r3, #0]
 80a2930:	4b12      	ldr	r3, [pc, #72]	; (80a297c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2932:	681a      	ldr	r2, [r3, #0]
 80a2934:	07d0      	lsls	r0, r2, #31
 80a2936:	bf5c      	itt	pl
 80a2938:	2201      	movpl	r2, #1
 80a293a:	601a      	strpl	r2, [r3, #0]
 80a293c:	4b10      	ldr	r3, [pc, #64]	; (80a2980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a293e:	681a      	ldr	r2, [r3, #0]
 80a2940:	07d1      	lsls	r1, r2, #31
 80a2942:	bf5c      	itt	pl
 80a2944:	2201      	movpl	r2, #1
 80a2946:	601a      	strpl	r2, [r3, #0]
 80a2948:	4b0e      	ldr	r3, [pc, #56]	; (80a2984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a294a:	681a      	ldr	r2, [r3, #0]
 80a294c:	07d2      	lsls	r2, r2, #31
 80a294e:	bf5c      	itt	pl
 80a2950:	2201      	movpl	r2, #1
 80a2952:	601a      	strpl	r2, [r3, #0]
 80a2954:	4770      	bx	lr
 80a2956:	bf00      	nop
 80a2958:	200005e4 	.word	0x200005e4
 80a295c:	200005e0 	.word	0x200005e0
 80a2960:	200005dc 	.word	0x200005dc
 80a2964:	200005d8 	.word	0x200005d8
 80a2968:	200005d4 	.word	0x200005d4
 80a296c:	200005d0 	.word	0x200005d0
 80a2970:	200005cc 	.word	0x200005cc
 80a2974:	200005c8 	.word	0x200005c8
 80a2978:	200005c4 	.word	0x200005c4
 80a297c:	200005c0 	.word	0x200005c0
 80a2980:	200005bc 	.word	0x200005bc
 80a2984:	200005b8 	.word	0x200005b8

080a2988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2988:	4b24      	ldr	r3, [pc, #144]	; (80a2a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a298a:	681a      	ldr	r2, [r3, #0]
 80a298c:	07d0      	lsls	r0, r2, #31
 80a298e:	bf5c      	itt	pl
 80a2990:	2201      	movpl	r2, #1
 80a2992:	601a      	strpl	r2, [r3, #0]
 80a2994:	4b22      	ldr	r3, [pc, #136]	; (80a2a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2996:	681a      	ldr	r2, [r3, #0]
 80a2998:	07d1      	lsls	r1, r2, #31
 80a299a:	bf5c      	itt	pl
 80a299c:	2201      	movpl	r2, #1
 80a299e:	601a      	strpl	r2, [r3, #0]
 80a29a0:	4b20      	ldr	r3, [pc, #128]	; (80a2a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a29a2:	681a      	ldr	r2, [r3, #0]
 80a29a4:	07d2      	lsls	r2, r2, #31
 80a29a6:	bf5c      	itt	pl
 80a29a8:	2201      	movpl	r2, #1
 80a29aa:	601a      	strpl	r2, [r3, #0]
 80a29ac:	4b1e      	ldr	r3, [pc, #120]	; (80a2a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a29ae:	681a      	ldr	r2, [r3, #0]
 80a29b0:	07d0      	lsls	r0, r2, #31
 80a29b2:	bf5c      	itt	pl
 80a29b4:	2201      	movpl	r2, #1
 80a29b6:	601a      	strpl	r2, [r3, #0]
 80a29b8:	4b1c      	ldr	r3, [pc, #112]	; (80a2a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a29ba:	681a      	ldr	r2, [r3, #0]
 80a29bc:	07d1      	lsls	r1, r2, #31
 80a29be:	bf5c      	itt	pl
 80a29c0:	2201      	movpl	r2, #1
 80a29c2:	601a      	strpl	r2, [r3, #0]
 80a29c4:	4b1a      	ldr	r3, [pc, #104]	; (80a2a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a29c6:	681a      	ldr	r2, [r3, #0]
 80a29c8:	07d2      	lsls	r2, r2, #31
 80a29ca:	bf5c      	itt	pl
 80a29cc:	2201      	movpl	r2, #1
 80a29ce:	601a      	strpl	r2, [r3, #0]
 80a29d0:	4b18      	ldr	r3, [pc, #96]	; (80a2a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a29d2:	681a      	ldr	r2, [r3, #0]
 80a29d4:	07d0      	lsls	r0, r2, #31
 80a29d6:	bf5c      	itt	pl
 80a29d8:	2201      	movpl	r2, #1
 80a29da:	601a      	strpl	r2, [r3, #0]
 80a29dc:	4b16      	ldr	r3, [pc, #88]	; (80a2a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a29de:	681a      	ldr	r2, [r3, #0]
 80a29e0:	07d1      	lsls	r1, r2, #31
 80a29e2:	bf5c      	itt	pl
 80a29e4:	2201      	movpl	r2, #1
 80a29e6:	601a      	strpl	r2, [r3, #0]
 80a29e8:	4b14      	ldr	r3, [pc, #80]	; (80a2a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a29ea:	681a      	ldr	r2, [r3, #0]
 80a29ec:	07d2      	lsls	r2, r2, #31
 80a29ee:	bf5c      	itt	pl
 80a29f0:	2201      	movpl	r2, #1
 80a29f2:	601a      	strpl	r2, [r3, #0]
 80a29f4:	4b12      	ldr	r3, [pc, #72]	; (80a2a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a29f6:	681a      	ldr	r2, [r3, #0]
 80a29f8:	07d0      	lsls	r0, r2, #31
 80a29fa:	bf5c      	itt	pl
 80a29fc:	2201      	movpl	r2, #1
 80a29fe:	601a      	strpl	r2, [r3, #0]
 80a2a00:	4b10      	ldr	r3, [pc, #64]	; (80a2a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2a02:	681a      	ldr	r2, [r3, #0]
 80a2a04:	07d1      	lsls	r1, r2, #31
 80a2a06:	bf5c      	itt	pl
 80a2a08:	2201      	movpl	r2, #1
 80a2a0a:	601a      	strpl	r2, [r3, #0]
 80a2a0c:	4b0e      	ldr	r3, [pc, #56]	; (80a2a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2a0e:	681a      	ldr	r2, [r3, #0]
 80a2a10:	07d2      	lsls	r2, r2, #31
 80a2a12:	bf5c      	itt	pl
 80a2a14:	2201      	movpl	r2, #1
 80a2a16:	601a      	strpl	r2, [r3, #0]
 80a2a18:	4770      	bx	lr
 80a2a1a:	bf00      	nop
 80a2a1c:	20000614 	.word	0x20000614
 80a2a20:	20000610 	.word	0x20000610
 80a2a24:	2000060c 	.word	0x2000060c
 80a2a28:	20000608 	.word	0x20000608
 80a2a2c:	20000604 	.word	0x20000604
 80a2a30:	20000600 	.word	0x20000600
 80a2a34:	200005fc 	.word	0x200005fc
 80a2a38:	200005f8 	.word	0x200005f8
 80a2a3c:	200005f4 	.word	0x200005f4
 80a2a40:	200005f0 	.word	0x200005f0
 80a2a44:	200005ec 	.word	0x200005ec
 80a2a48:	200005e8 	.word	0x200005e8

080a2a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2a4c:	4b18      	ldr	r3, [pc, #96]	; (80a2ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2a4e:	681a      	ldr	r2, [r3, #0]
 80a2a50:	07d1      	lsls	r1, r2, #31
 80a2a52:	bf5c      	itt	pl
 80a2a54:	2201      	movpl	r2, #1
 80a2a56:	601a      	strpl	r2, [r3, #0]
 80a2a58:	4b16      	ldr	r3, [pc, #88]	; (80a2ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2a5a:	681a      	ldr	r2, [r3, #0]
 80a2a5c:	07d2      	lsls	r2, r2, #31
 80a2a5e:	bf5c      	itt	pl
 80a2a60:	2201      	movpl	r2, #1
 80a2a62:	601a      	strpl	r2, [r3, #0]
 80a2a64:	4b14      	ldr	r3, [pc, #80]	; (80a2ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2a66:	681a      	ldr	r2, [r3, #0]
 80a2a68:	07d0      	lsls	r0, r2, #31
 80a2a6a:	bf5c      	itt	pl
 80a2a6c:	2201      	movpl	r2, #1
 80a2a6e:	601a      	strpl	r2, [r3, #0]
 80a2a70:	4b12      	ldr	r3, [pc, #72]	; (80a2abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2a72:	681a      	ldr	r2, [r3, #0]
 80a2a74:	07d1      	lsls	r1, r2, #31
 80a2a76:	bf5c      	itt	pl
 80a2a78:	2201      	movpl	r2, #1
 80a2a7a:	601a      	strpl	r2, [r3, #0]
 80a2a7c:	4b10      	ldr	r3, [pc, #64]	; (80a2ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2a7e:	681a      	ldr	r2, [r3, #0]
 80a2a80:	07d2      	lsls	r2, r2, #31
 80a2a82:	bf5c      	itt	pl
 80a2a84:	2201      	movpl	r2, #1
 80a2a86:	601a      	strpl	r2, [r3, #0]
 80a2a88:	4b0e      	ldr	r3, [pc, #56]	; (80a2ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2a8a:	681a      	ldr	r2, [r3, #0]
 80a2a8c:	07d0      	lsls	r0, r2, #31
 80a2a8e:	bf5c      	itt	pl
 80a2a90:	2201      	movpl	r2, #1
 80a2a92:	601a      	strpl	r2, [r3, #0]
 80a2a94:	4b0c      	ldr	r3, [pc, #48]	; (80a2ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2a96:	681a      	ldr	r2, [r3, #0]
 80a2a98:	07d1      	lsls	r1, r2, #31
 80a2a9a:	bf5c      	itt	pl
 80a2a9c:	2201      	movpl	r2, #1
 80a2a9e:	601a      	strpl	r2, [r3, #0]
 80a2aa0:	4b0a      	ldr	r3, [pc, #40]	; (80a2acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2aa2:	681a      	ldr	r2, [r3, #0]
 80a2aa4:	07d2      	lsls	r2, r2, #31
 80a2aa6:	bf5c      	itt	pl
 80a2aa8:	2201      	movpl	r2, #1
 80a2aaa:	601a      	strpl	r2, [r3, #0]
 80a2aac:	4770      	bx	lr
 80a2aae:	bf00      	nop
 80a2ab0:	20000634 	.word	0x20000634
 80a2ab4:	20000630 	.word	0x20000630
 80a2ab8:	2000062c 	.word	0x2000062c
 80a2abc:	20000628 	.word	0x20000628
 80a2ac0:	20000624 	.word	0x20000624
 80a2ac4:	20000620 	.word	0x20000620
 80a2ac8:	2000061c 	.word	0x2000061c
 80a2acc:	20000618 	.word	0x20000618

080a2ad0 <__cxa_atexit>:
 80a2ad0:	b510      	push	{r4, lr}
 80a2ad2:	4c05      	ldr	r4, [pc, #20]	; (80a2ae8 <__cxa_atexit+0x18>)
 80a2ad4:	4613      	mov	r3, r2
 80a2ad6:	b12c      	cbz	r4, 80a2ae4 <__cxa_atexit+0x14>
 80a2ad8:	460a      	mov	r2, r1
 80a2ada:	4601      	mov	r1, r0
 80a2adc:	2002      	movs	r0, #2
 80a2ade:	f3af 8000 	nop.w
 80a2ae2:	bd10      	pop	{r4, pc}
 80a2ae4:	4620      	mov	r0, r4
 80a2ae6:	bd10      	pop	{r4, pc}
 80a2ae8:	00000000 	.word	0x00000000

080a2aec <memcpy>:
 80a2aec:	b510      	push	{r4, lr}
 80a2aee:	1e43      	subs	r3, r0, #1
 80a2af0:	440a      	add	r2, r1
 80a2af2:	4291      	cmp	r1, r2
 80a2af4:	d004      	beq.n	80a2b00 <memcpy+0x14>
 80a2af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2afe:	e7f8      	b.n	80a2af2 <memcpy+0x6>
 80a2b00:	bd10      	pop	{r4, pc}

080a2b02 <memset>:
 80a2b02:	4603      	mov	r3, r0
 80a2b04:	4402      	add	r2, r0
 80a2b06:	4293      	cmp	r3, r2
 80a2b08:	d002      	beq.n	80a2b10 <memset+0xe>
 80a2b0a:	f803 1b01 	strb.w	r1, [r3], #1
 80a2b0e:	e7fa      	b.n	80a2b06 <memset+0x4>
 80a2b10:	4770      	bx	lr
	...

080a2b14 <srand>:
 80a2b14:	b538      	push	{r3, r4, r5, lr}
 80a2b16:	4b12      	ldr	r3, [pc, #72]	; (80a2b60 <srand+0x4c>)
 80a2b18:	4605      	mov	r5, r0
 80a2b1a:	681c      	ldr	r4, [r3, #0]
 80a2b1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2b1e:	b9d3      	cbnz	r3, 80a2b56 <srand+0x42>
 80a2b20:	2018      	movs	r0, #24
 80a2b22:	f7ff f943 	bl	80a1dac <malloc>
 80a2b26:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2b2a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2b2c:	8003      	strh	r3, [r0, #0]
 80a2b2e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2b32:	8043      	strh	r3, [r0, #2]
 80a2b34:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2b38:	8083      	strh	r3, [r0, #4]
 80a2b3a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2b3e:	80c3      	strh	r3, [r0, #6]
 80a2b40:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2b44:	8103      	strh	r3, [r0, #8]
 80a2b46:	2305      	movs	r3, #5
 80a2b48:	8143      	strh	r3, [r0, #10]
 80a2b4a:	230b      	movs	r3, #11
 80a2b4c:	8183      	strh	r3, [r0, #12]
 80a2b4e:	2201      	movs	r2, #1
 80a2b50:	2300      	movs	r3, #0
 80a2b52:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2b56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2b58:	2200      	movs	r2, #0
 80a2b5a:	611d      	str	r5, [r3, #16]
 80a2b5c:	615a      	str	r2, [r3, #20]
 80a2b5e:	bd38      	pop	{r3, r4, r5, pc}
 80a2b60:	20000068 	.word	0x20000068

080a2b64 <strlen>:
 80a2b64:	4603      	mov	r3, r0
 80a2b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2b6a:	2a00      	cmp	r2, #0
 80a2b6c:	d1fb      	bne.n	80a2b66 <strlen+0x2>
 80a2b6e:	1a18      	subs	r0, r3, r0
 80a2b70:	3801      	subs	r0, #1
 80a2b72:	4770      	bx	lr

080a2b74 <dynalib_user>:
 80a2b74:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2b84:	0000 0000 504d 3152 3132 6e20 746f 6620     ....MPR121 not f
 80a2b94:	756f 646e 202c 6863 6365 206b 6977 6972     ound, check wiri
 80a2ba4:	676e 003f 504d 3152 3132 6620 756f 646e     ng?.MPR121 found
 80a2bb4:	0021 6863 7261 6567 0064 6863 7261 6967     !.charged.chargi
 80a2bc4:	676e 7500 706e 756c 6767 6465 6c00 6f6f     ng.unplugged.loo
 80a2bd4:	0070 0000                                   p...

080a2bd8 <CSWTCH.215>:
 80a2bd8:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a2be8:	0050 0000                                   P...

080a2bec <_ZTV8SPIClass>:
	...
 80a2bf4:	1dcd 080a 1dcf 080a 6162 6475 5300 7265     ........baud.Ser
 80a2c04:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 80a2c14:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 80a2c24:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 80a2c34:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 80a2c44:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 80a2c54:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 80a2c64:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 80a2c74:	0070 3025 3031 2075 5d00 0020 6425 2c00     p.%010u .] .%d.,
 80a2c84:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
 80a2c94:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
 80a2ca4:	0a0d 6600 6c00 006e 6e66 6300 646f 0065     ...f.ln.fn.code.
 80a2cb4:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
 80a2cc4:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 80a2cd4:	0072 6170 696e 0063 6c61 006c 005a 2b25     r.panic.all.Z.%+
 80a2ce4:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a2cf4:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a2d04:	6974 656d 0000 0000                         time....

080a2d0c <_ZTV9IPAddress>:
	...
 80a2d14:	20e5 080a 20d5 080a 20d7 080a               . ... ... ..

080a2d20 <_ZTV9USBSerial>:
	...
 80a2d28:	21a1 080a 21f1 080a 21ff 080a 1e55 080a     .!...!...!..U...
 80a2d38:	21dd 080a 21a3 080a 21b9 080a 21eb 080a     .!...!...!...!..
 80a2d48:	21cf 080a 219d 080a                         .!...!..

080a2d50 <_ZTV11USARTSerial>:
	...
 80a2d58:	236f 080a 23bf 080a 23cd 080a 1e55 080a     o#...#...#..U...
 80a2d68:	2383 080a 23a5 080a 2391 080a 23b9 080a     .#...#...#...#..
 80a2d78:	2371 080a 2375 080a                         q#..u#..

080a2d80 <_ZTV7TwoWire>:
	...
 80a2d88:	2471 080a 24bb 080a 2493 080a 2473 080a     q$...$...$..s$..
 80a2d98:	249b 080a 24a3 080a 24ab 080a 24b3 080a     .$...$...$...$..

080a2da8 <_ZTVN5spark9WiFiClassE>:
	...
 80a2db0:	25cf 080a 25c5 080a 25bb 080a 2539 080a     .%...%...%..9%..
 80a2dc0:	1f2b 080a 25af 080a 25a3 080a 259b 080a     +....%...%...%..
 80a2dd0:	2591 080a 2587 080a 2543 080a               .%...%..C%..

080a2ddc <_ZTVN5spark12NetworkClassE>:
	...
 80a2de4:	25ed 080a 25f7 080a 2601 080a 260b 080a     .%...%...&...&..
 80a2df4:	2615 080a 2621 080a 262d 080a 2639 080a     .&..!&..-&..9&..
 80a2e04:	2641 080a 264b 080a 2655 080a               A&..K&..U&..

080a2e10 <__sf_fake_stdin>:
	...

080a2e30 <__sf_fake_stdout>:
	...

080a2e50 <__sf_fake_stderr>:
	...
 80a2e70:	0043                                        C.

080a2e72 <link_const_variable_data_end>:
	...

080a2e74 <link_constructors_location>:
 80a2e74:	080a0469 	.word	0x080a0469
 80a2e78:	080a1809 	.word	0x080a1809
 80a2e7c:	080a1a0d 	.word	0x080a1a0d
 80a2e80:	080a1e3d 	.word	0x080a1e3d
 80a2e84:	080a1f39 	.word	0x080a1f39
 80a2e88:	080a1f49 	.word	0x080a1f49
 80a2e8c:	080a1f81 	.word	0x080a1f81
 80a2e90:	080a25d9 	.word	0x080a25d9
 80a2e94:	080a26a5 	.word	0x080a26a5
 80a2e98:	080a277d 	.word	0x080a277d
 80a2e9c:	080a27c1 	.word	0x080a27c1
 80a2ea0:	080a2841 	.word	0x080a2841
 80a2ea4:	080a28c5 	.word	0x080a28c5
 80a2ea8:	080a2989 	.word	0x080a2989
 80a2eac:	080a2a4d 	.word	0x080a2a4d
