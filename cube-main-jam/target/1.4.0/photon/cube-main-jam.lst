
/Users/matthewmccord/Workspace/photon_iot/seattle-indies-photon-cube-jam-2019/cube-main-jam/target/1.4.0/photon/cube-main-jam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003ee4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3f00  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000004e0  20000000  080a3f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001d8  200004e0  200004e0  000304e0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a43e4  080a43e4  000243e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a440c  080a440c  0002440c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d1b5c  00000000  00000000  00024410  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013006  00000000  00000000  000f5f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001697d  00000000  00000000  00108f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002198  00000000  00000000  0011f8ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003258  00000000  00000000  00121a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002cf47  00000000  00000000  00124cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002e599  00000000  00000000  00151c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aaf0b  00000000  00000000  001801bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bd34  00000000  00000000  0022b0cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 fab5 	bl	80a359c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 faba 	bl	80a35b2 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3f04 	.word	0x080a3f04
 80a004c:	200004e0 	.word	0x200004e0
 80a0050:	200004e0 	.word	0x200004e0
 80a0054:	200006b8 	.word	0x200006b8
 80a0058:	200006b8 	.word	0x200006b8

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f003 f847 	bl	80a30f0 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a3ea8 	.word	0x080a3ea8
 80a0084:	080a3ef8 	.word	0x080a3ef8

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b860 	b.w	80a014c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f89d 	bl	80a01cc <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 bfed 	b.w	80a3074 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f002 bb93 	b.w	80a27c4 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f002 bb99 	b.w	80a27d4 <free>
	...

080a00a4 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a6:	4a03      	ldr	r2, [pc, #12]	; (80a00b4 <__cxa_pure_virtual+0x10>)
 80a00a8:	2100      	movs	r1, #0
 80a00aa:	200c      	movs	r0, #12
 80a00ac:	f002 fafe 	bl	80a26ac <panic_>
 80a00b0:	e7fe      	b.n	80a00b0 <__cxa_pure_virtual+0xc>
 80a00b2:	bf00      	nop
 80a00b4:	080a2409 	.word	0x080a2409

080a00b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b8:	7800      	ldrb	r0, [r0, #0]
 80a00ba:	fab0 f080 	clz	r0, r0
 80a00be:	0940      	lsrs	r0, r0, #5
 80a00c0:	4770      	bx	lr

080a00c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c2:	2301      	movs	r3, #1
 80a00c4:	7003      	strb	r3, [r0, #0]
 80a00c6:	4770      	bx	lr

080a00c8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
 80a00c8:	4770      	bx	lr
	...

080a00cc <_Z12displaySetupv>:
#define OLED_RESET  A2
#define OLED_DC     A3
#define OLED_CS     A4
Adafruit_SSD1306 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);

void displaySetup() {
 80a00cc:	b510      	push	{r4, lr}
  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  display.begin(SSD1306_SWITCHCAPVCC);
 80a00ce:	4c05      	ldr	r4, [pc, #20]	; (80a00e4 <_Z12displaySetupv+0x18>)
 80a00d0:	223c      	movs	r2, #60	; 0x3c
 80a00d2:	4620      	mov	r0, r4
 80a00d4:	2102      	movs	r1, #2
 80a00d6:	f000 fe93 	bl	80a0e00 <_ZN16Adafruit_SSD13065beginEhh>
  // init done

  display.display(); // show splashscreen
 80a00da:	4620      	mov	r0, r4
}
 80a00dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void displaySetup() {
  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  display.begin(SSD1306_SWITCHCAPVCC);
  // init done

  display.display(); // show splashscreen
 80a00e0:	f000 bf5e 	b.w	80a0fa0 <_ZN16Adafruit_SSD13067displayEv>
 80a00e4:	20000508 	.word	0x20000508

080a00e8 <_Z10touchSetupv>:
// Keeps track of the last pins touched
// so we know when buttons are 'released'
uint16_t lasttouched = 0;
uint16_t currtouched = 0;

void touchSetup() {
 80a00e8:	b510      	push	{r4, lr}
  // Default address is 0x5A, if tied to 3.3V its 0x5B
  // If tied to SDA its 0x5C and if SCL then 0x5D
  if (!cap.begin(0x5A)) {
 80a00ea:	215a      	movs	r1, #90	; 0x5a
 80a00ec:	480b      	ldr	r0, [pc, #44]	; (80a011c <_Z10touchSetupv+0x34>)
 80a00ee:	f000 fa24 	bl	80a053a <_ZN15Adafruit_MPR1215beginEh>
 80a00f2:	b958      	cbnz	r0, 80a010c <_Z10touchSetupv+0x24>
    Serial.println("MPR121 not found, check wiring?");
 80a00f4:	f002 fed8 	bl	80a2ea8 <_Z16_fetch_usbserialv>
 80a00f8:	4909      	ldr	r1, [pc, #36]	; (80a0120 <_Z10touchSetupv+0x38>)
 80a00fa:	f002 fcea 	bl	80a2ad2 <_ZN5Print7printlnEPKc>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00fe:	4c09      	ldr	r4, [pc, #36]	; (80a0124 <_Z10touchSetupv+0x3c>)
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0100:	f002 f992 	bl	80a2428 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0104:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a0106:	f002 fafd 	bl	80a2704 <spark_process>
 80a010a:	e7f9      	b.n	80a0100 <_Z10touchSetupv+0x18>
      #endif
    }

  }

  Serial.println("MPR121 found!");
 80a010c:	f002 fecc 	bl	80a2ea8 <_Z16_fetch_usbserialv>
}
 80a0110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      #endif
    }

  }

  Serial.println("MPR121 found!");
 80a0114:	4904      	ldr	r1, [pc, #16]	; (80a0128 <_Z10touchSetupv+0x40>)
 80a0116:	f002 bcdc 	b.w	80a2ad2 <_ZN5Print7printlnEPKc>
 80a011a:	bf00      	nop
 80a011c:	2000052c 	.word	0x2000052c
 80a0120:	080a3638 	.word	0x080a3638
 80a0124:	200005c4 	.word	0x200005c4
 80a0128:	080a3658 	.word	0x080a3658

080a012c <_Z13neoPixelSetupv>:
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

void neoPixelSetup() {
 80a012c:	b510      	push	{r4, lr}
  strip.setBrightness(BRIGHTNESS);
 80a012e:	4c06      	ldr	r4, [pc, #24]	; (80a0148 <_Z13neoPixelSetupv+0x1c>)
 80a0130:	21ff      	movs	r1, #255	; 0xff
 80a0132:	4620      	mov	r0, r4
 80a0134:	f002 f928 	bl	80a2388 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  strip.begin();
 80a0138:	4620      	mov	r0, r4
 80a013a:	f000 ffe5 	bl	80a1108 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
 80a013e:	4620      	mov	r0, r4
}
 80a0140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

void neoPixelSetup() {
  strip.setBrightness(BRIGHTNESS);
  strip.begin();
  strip.show();
 80a0144:	f001 b816 	b.w	80a1174 <_ZN17Adafruit_NeoPixel4showEv>
 80a0148:	200004f4 	.word	0x200004f4

080a014c <setup>:
void buzzerSetup() {
  pinMode(BUZZER_PIN, OUTPUT);
}
#endif

void setup() {
 80a014c:	b510      	push	{r4, lr}
  Serial.begin(9600);
 80a014e:	f002 feab 	bl	80a2ea8 <_Z16_fetch_usbserialv>
  delay(1000);
  Serial.println("External Hardware Test");
 80a0152:	4c1d      	ldr	r4, [pc, #116]	; (80a01c8 <setup+0x7c>)
  pinMode(BUZZER_PIN, OUTPUT);
}
#endif

void setup() {
  Serial.begin(9600);
 80a0154:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0158:	f002 fe9a 	bl	80a2e90 <_ZN9USBSerial5beginEl>
  delay(1000);
 80a015c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0160:	f002 fb40 	bl	80a27e4 <delay>
  Serial.println("External Hardware Test");
 80a0164:	f002 fea0 	bl	80a2ea8 <_Z16_fetch_usbserialv>
 80a0168:	4621      	mov	r1, r4
 80a016a:	f002 fcb2 	bl	80a2ad2 <_ZN5Print7printlnEPKc>
  delay(1000);
 80a016e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0172:	f002 fb37 	bl	80a27e4 <delay>
  Serial.println("External Hardware Test");
 80a0176:	f002 fe97 	bl	80a2ea8 <_Z16_fetch_usbserialv>
 80a017a:	4621      	mov	r1, r4
 80a017c:	f002 fca9 	bl	80a2ad2 <_ZN5Print7printlnEPKc>
  delay(1000);
 80a0180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0184:	f002 fb2e 	bl	80a27e4 <delay>
  Serial.println("External Hardware Test");
 80a0188:	f002 fe8e 	bl	80a2ea8 <_Z16_fetch_usbserialv>
 80a018c:	4621      	mov	r1, r4
 80a018e:	f002 fca0 	bl	80a2ad2 <_ZN5Print7printlnEPKc>
  delay(1000);
 80a0192:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0196:	f002 fb25 	bl	80a27e4 <delay>
  Serial.println("External Hardware Test");
 80a019a:	f002 fe85 	bl	80a2ea8 <_Z16_fetch_usbserialv>
 80a019e:	4621      	mov	r1, r4
 80a01a0:	f002 fc97 	bl	80a2ad2 <_ZN5Print7printlnEPKc>
  delay(1000);
 80a01a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a01a8:	f002 fb1c 	bl	80a27e4 <delay>
  Serial.println("External Hardware Test");
 80a01ac:	f002 fe7c 	bl	80a2ea8 <_Z16_fetch_usbserialv>
 80a01b0:	4621      	mov	r1, r4
 80a01b2:	f002 fc8e 	bl	80a2ad2 <_ZN5Print7printlnEPKc>
  #ifdef TEST_DISPLAY
  displaySetup();
 80a01b6:	f7ff ff89 	bl	80a00cc <_Z12displaySetupv>
  #endif

  #ifdef TEST_TOUCH
  touchSetup();
 80a01ba:	f7ff ff95 	bl	80a00e8 <_Z10touchSetupv>
  #endif

  #ifdef TEST_BUZZER
  buzzerSetup();
  #endif
}
 80a01be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  #ifdef TEST_TOUCH
  touchSetup();
  #endif

  #ifdef TEST_NEOPIXEL
  neoPixelSetup();
 80a01c2:	f7ff bfb3 	b.w	80a012c <_Z13neoPixelSetupv>
 80a01c6:	bf00      	nop
 80a01c8:	080a3666 	.word	0x080a3666

080a01cc <loop>:

bool goingUp = true;
int value = 0;
int rate = 2;

void loop() {
 80a01cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  #ifdef TEST_TOUCH
  // cap.setThresholds(touch_threshold, release_threshold);
  // Get the currently touched pads
  currtouched = cap.touched();
 80a01d0:	4867      	ldr	r0, [pc, #412]	; (80a0370 <loop+0x1a4>)
 80a01d2:	f000 f97a 	bl	80a04ca <_ZN15Adafruit_MPR1217touchedEv>
 80a01d6:	4e67      	ldr	r6, [pc, #412]	; (80a0374 <loop+0x1a8>)
  #endif

  if (goingUp) {
 80a01d8:	4967      	ldr	r1, [pc, #412]	; (80a0378 <loop+0x1ac>)
void loop() {

  #ifdef TEST_TOUCH
  // cap.setThresholds(touch_threshold, release_threshold);
  // Get the currently touched pads
  currtouched = cap.touched();
 80a01da:	8030      	strh	r0, [r6, #0]
  #endif

  if (goingUp) {
 80a01dc:	7808      	ldrb	r0, [r1, #0]
 80a01de:	4b67      	ldr	r3, [pc, #412]	; (80a037c <loop+0x1b0>)
 80a01e0:	4c67      	ldr	r4, [pc, #412]	; (80a0380 <loop+0x1b4>)
 80a01e2:	b148      	cbz	r0, 80a01f8 <loop+0x2c>
    value += rate;
 80a01e4:	6818      	ldr	r0, [r3, #0]
 80a01e6:	6822      	ldr	r2, [r4, #0]
 80a01e8:	4402      	add	r2, r0
    if (value > 255) {
 80a01ea:	2aff      	cmp	r2, #255	; 0xff
 80a01ec:	dd08      	ble.n	80a0200 <loop+0x34>
      value = 255;
 80a01ee:	22ff      	movs	r2, #255	; 0xff
 80a01f0:	601a      	str	r2, [r3, #0]
      goingUp = false;
 80a01f2:	2300      	movs	r3, #0
 80a01f4:	700b      	strb	r3, [r1, #0]
 80a01f6:	e008      	b.n	80a020a <loop+0x3e>
    }
  } else {
    value -= rate;
 80a01f8:	681a      	ldr	r2, [r3, #0]
 80a01fa:	6824      	ldr	r4, [r4, #0]
    if (value < 0) {
 80a01fc:	1b12      	subs	r2, r2, r4
 80a01fe:	d401      	bmi.n	80a0204 <loop+0x38>
    if (value > 255) {
      value = 255;
      goingUp = false;
    }
  } else {
    value -= rate;
 80a0200:	601a      	str	r2, [r3, #0]
 80a0202:	e002      	b.n	80a020a <loop+0x3e>
    if (value < 0) {
      value = 0;
 80a0204:	6018      	str	r0, [r3, #0]
      goingUp = true;
 80a0206:	2301      	movs	r3, #1
 80a0208:	700b      	strb	r3, [r1, #0]
  //   strip.setPixelColor(PIXEL_COUNT - 3, strip.Color(00000, 00000, value));
  // }

  // strip.setPixelColor(cubePanelLights[currentPanel][0], strip.Color(value, 00000, value));

  if (currentPanel > 0) {
 80a020a:	4c5e      	ldr	r4, [pc, #376]	; (80a0384 <loop+0x1b8>)
 80a020c:	4d5e      	ldr	r5, [pc, #376]	; (80a0388 <loop+0x1bc>)
 80a020e:	6823      	ldr	r3, [r4, #0]
 80a0210:	2b00      	cmp	r3, #0
 80a0212:	dd3a      	ble.n	80a028a <loop+0xbe>
    strip.setPixelColor(cubePanelLights[currentPanel - 1][0], strip.Color(00000, 00000, 00000));
 80a0214:	2200      	movs	r2, #0
 80a0216:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80a021a:	4611      	mov	r1, r2
 80a021c:	4610      	mov	r0, r2
 80a021e:	f833 7c10 	ldrh.w	r7, [r3, #-16]
 80a0222:	f002 f8ac 	bl	80a237e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0226:	4639      	mov	r1, r7
 80a0228:	4602      	mov	r2, r0
 80a022a:	4858      	ldr	r0, [pc, #352]	; (80a038c <loop+0x1c0>)
 80a022c:	f002 f85c 	bl	80a22e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    strip.setPixelColor(cubePanelLights[currentPanel - 1][1], strip.Color(00000, 00000, 00000));
 80a0230:	6823      	ldr	r3, [r4, #0]
 80a0232:	2200      	movs	r2, #0
 80a0234:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80a0238:	4611      	mov	r1, r2
 80a023a:	4610      	mov	r0, r2
 80a023c:	f833 7c0c 	ldrh.w	r7, [r3, #-12]
 80a0240:	f002 f89d 	bl	80a237e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0244:	4639      	mov	r1, r7
 80a0246:	4602      	mov	r2, r0
 80a0248:	4850      	ldr	r0, [pc, #320]	; (80a038c <loop+0x1c0>)
 80a024a:	f002 f84d 	bl	80a22e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    strip.setPixelColor(cubePanelLights[currentPanel - 1][2], strip.Color(00000, 00000, 00000));
 80a024e:	6823      	ldr	r3, [r4, #0]
 80a0250:	2200      	movs	r2, #0
 80a0252:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80a0256:	4611      	mov	r1, r2
 80a0258:	4610      	mov	r0, r2
 80a025a:	f833 7c08 	ldrh.w	r7, [r3, #-8]
 80a025e:	f002 f88e 	bl	80a237e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0262:	4639      	mov	r1, r7
 80a0264:	4602      	mov	r2, r0
 80a0266:	4849      	ldr	r0, [pc, #292]	; (80a038c <loop+0x1c0>)
 80a0268:	f002 f83e 	bl	80a22e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    strip.setPixelColor(cubePanelLights[currentPanel - 1][3], strip.Color(00000, 00000, 00000));
 80a026c:	6823      	ldr	r3, [r4, #0]
 80a026e:	2200      	movs	r2, #0
 80a0270:	4611      	mov	r1, r2
 80a0272:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80a0276:	4610      	mov	r0, r2
 80a0278:	f833 7c04 	ldrh.w	r7, [r3, #-4]
 80a027c:	f002 f87f 	bl	80a237e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0280:	4639      	mov	r1, r7
 80a0282:	4602      	mov	r2, r0
 80a0284:	4841      	ldr	r0, [pc, #260]	; (80a038c <loop+0x1c0>)
 80a0286:	f002 f82f 	bl	80a22e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  }

  strip.setPixelColor(cubePanelLights[currentPanel][0], strip.Color(255, 255, 255));
 80a028a:	6823      	ldr	r3, [r4, #0]
 80a028c:	22ff      	movs	r2, #255	; 0xff
 80a028e:	011b      	lsls	r3, r3, #4
 80a0290:	4611      	mov	r1, r2
 80a0292:	4610      	mov	r0, r2
 80a0294:	5aef      	ldrh	r7, [r5, r3]
 80a0296:	f002 f872 	bl	80a237e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a029a:	4639      	mov	r1, r7
 80a029c:	4602      	mov	r2, r0
 80a029e:	483b      	ldr	r0, [pc, #236]	; (80a038c <loop+0x1c0>)
 80a02a0:	f002 f822 	bl	80a22e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  strip.setPixelColor(cubePanelLights[currentPanel][1], strip.Color(255, 255, 255));
 80a02a4:	6823      	ldr	r3, [r4, #0]
 80a02a6:	22ff      	movs	r2, #255	; 0xff
 80a02a8:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80a02ac:	4611      	mov	r1, r2
 80a02ae:	4610      	mov	r0, r2
 80a02b0:	889f      	ldrh	r7, [r3, #4]
 80a02b2:	f002 f864 	bl	80a237e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a02b6:	4639      	mov	r1, r7
 80a02b8:	4602      	mov	r2, r0
 80a02ba:	4834      	ldr	r0, [pc, #208]	; (80a038c <loop+0x1c0>)
 80a02bc:	f002 f814 	bl	80a22e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  strip.setPixelColor(cubePanelLights[currentPanel][2], strip.Color(255, 255, 255));
 80a02c0:	6823      	ldr	r3, [r4, #0]
 80a02c2:	22ff      	movs	r2, #255	; 0xff
 80a02c4:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80a02c8:	4611      	mov	r1, r2
 80a02ca:	4610      	mov	r0, r2
 80a02cc:	891f      	ldrh	r7, [r3, #8]
 80a02ce:	f002 f856 	bl	80a237e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a02d2:	4639      	mov	r1, r7
 80a02d4:	4602      	mov	r2, r0
 80a02d6:	482d      	ldr	r0, [pc, #180]	; (80a038c <loop+0x1c0>)
 80a02d8:	f002 f806 	bl	80a22e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  strip.setPixelColor(cubePanelLights[currentPanel][3], strip.Color(255, 255, 255));
 80a02dc:	6823      	ldr	r3, [r4, #0]
 80a02de:	22ff      	movs	r2, #255	; 0xff
 80a02e0:	eb05 1503 	add.w	r5, r5, r3, lsl #4
 80a02e4:	4611      	mov	r1, r2
 80a02e6:	4610      	mov	r0, r2
 80a02e8:	89ad      	ldrh	r5, [r5, #12]
 80a02ea:	f002 f848 	bl	80a237e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a02ee:	4629      	mov	r1, r5
 80a02f0:	4602      	mov	r2, r0
 80a02f2:	4826      	ldr	r0, [pc, #152]	; (80a038c <loop+0x1c0>)
 80a02f4:	f001 fff8 	bl	80a22e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  strip.show();
 80a02f8:	4824      	ldr	r0, [pc, #144]	; (80a038c <loop+0x1c0>)
 80a02fa:	f000 ff3b 	bl	80a1174 <_ZN17Adafruit_NeoPixel4showEv>
 80a02fe:	4f24      	ldr	r7, [pc, #144]	; (80a0390 <loop+0x1c4>)
 80a0300:	2500      	movs	r5, #0
  // }


  for (uint8_t i=0; i<12; i++) {
    // it if *is* touched and *wasnt* touched before, alert!
    if ((currtouched & _BV(i)) && !(lasttouched & _BV(i)) ) {
 80a0302:	8833      	ldrh	r3, [r6, #0]
 80a0304:	fa5f f885 	uxtb.w	r8, r5
 80a0308:	412b      	asrs	r3, r5
 80a030a:	07d8      	lsls	r0, r3, #31
 80a030c:	d519      	bpl.n	80a0342 <loop+0x176>
 80a030e:	883b      	ldrh	r3, [r7, #0]
 80a0310:	412b      	asrs	r3, r5
 80a0312:	07d9      	lsls	r1, r3, #31
 80a0314:	d424      	bmi.n	80a0360 <loop+0x194>
      Serial.print(i); Serial.println(" touched");
 80a0316:	f002 fdc7 	bl	80a2ea8 <_Z16_fetch_usbserialv>
 80a031a:	220a      	movs	r2, #10
 80a031c:	4641      	mov	r1, r8
 80a031e:	f002 fc0c 	bl	80a2b3a <_ZN5Print5printEhi>
 80a0322:	f002 fdc1 	bl	80a2ea8 <_Z16_fetch_usbserialv>
 80a0326:	491b      	ldr	r1, [pc, #108]	; (80a0394 <loop+0x1c8>)
 80a0328:	f002 fbd3 	bl	80a2ad2 <_ZN5Print7printlnEPKc>
      currentPanel += 1;
 80a032c:	6823      	ldr	r3, [r4, #0]
 80a032e:	4a15      	ldr	r2, [pc, #84]	; (80a0384 <loop+0x1b8>)
 80a0330:	3301      	adds	r3, #1
 80a0332:	2b05      	cmp	r3, #5
 80a0334:	bfc8      	it	gt
 80a0336:	2300      	movgt	r3, #0
 80a0338:	6013      	str	r3, [r2, #0]
      if (currentPanel > 5) {
        currentPanel = 0;
      }
    }
    // if it *was* touched and now *isnt*, alert!
    if (!(currtouched & _BV(i)) && (lasttouched & _BV(i)) ) {
 80a033a:	8833      	ldrh	r3, [r6, #0]
 80a033c:	412b      	asrs	r3, r5
 80a033e:	07da      	lsls	r2, r3, #31
 80a0340:	d40e      	bmi.n	80a0360 <loop+0x194>
 80a0342:	883b      	ldrh	r3, [r7, #0]
 80a0344:	412b      	asrs	r3, r5
 80a0346:	07db      	lsls	r3, r3, #31
 80a0348:	d50a      	bpl.n	80a0360 <loop+0x194>
      Serial.print(i); Serial.println(" released");
 80a034a:	f002 fdad 	bl	80a2ea8 <_Z16_fetch_usbserialv>
 80a034e:	4641      	mov	r1, r8
 80a0350:	220a      	movs	r2, #10
 80a0352:	f002 fbf2 	bl	80a2b3a <_ZN5Print5printEhi>
 80a0356:	f002 fda7 	bl	80a2ea8 <_Z16_fetch_usbserialv>
 80a035a:	490f      	ldr	r1, [pc, #60]	; (80a0398 <loop+0x1cc>)
 80a035c:	f002 fbb9 	bl	80a2ad2 <_ZN5Print7printlnEPKc>
 80a0360:	3501      	adds	r5, #1
  //   nextTime = millis() + 100;
  //   display.display();
  // }


  for (uint8_t i=0; i<12; i++) {
 80a0362:	2d0c      	cmp	r5, #12
 80a0364:	d1cd      	bne.n	80a0302 <loop+0x136>
      Serial.print(i); Serial.println(" released");
    }
  }

  // reset our state
  lasttouched = currtouched;
 80a0366:	8832      	ldrh	r2, [r6, #0]
 80a0368:	4b09      	ldr	r3, [pc, #36]	; (80a0390 <loop+0x1c4>)
 80a036a:	801a      	strh	r2, [r3, #0]
 80a036c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0370:	2000052c 	.word	0x2000052c
 80a0374:	20000530 	.word	0x20000530
 80a0378:	20000000 	.word	0x20000000
 80a037c:	200004f0 	.word	0x200004f0
 80a0380:	20000004 	.word	0x20000004
 80a0384:	200004e4 	.word	0x200004e4
 80a0388:	20000008 	.word	0x20000008
 80a038c:	200004f4 	.word	0x200004f4
 80a0390:	2000052e 	.word	0x2000052e
 80a0394:	080a3685 	.word	0x080a3685
 80a0398:	080a368e 	.word	0x080a368e

080a039c <_ZN16Adafruit_SSD1306D0Ev>:
 80a039c:	b510      	push	{r4, lr}
 80a039e:	4604      	mov	r4, r0
 80a03a0:	2124      	movs	r1, #36	; 0x24
 80a03a2:	f002 ffa2 	bl	80a32ea <_ZdlPvj>
 80a03a6:	4620      	mov	r0, r4
 80a03a8:	bd10      	pop	{r4, pc}
	...

080a03ac <_GLOBAL__sub_I_SystemMode>:
  #endif
  #endif

  // put a delay so it isn't overwhelming
  delay(50);
 80a03ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a03ae:	f002 f843 	bl	80a2438 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a03b2:	4b16      	ldr	r3, [pc, #88]	; (80a040c <_GLOBAL__sub_I_SystemMode+0x60>)
 80a03b4:	2200      	movs	r2, #0
 80a03b6:	701a      	strb	r2, [r3, #0]
 80a03b8:	805a      	strh	r2, [r3, #2]
 80a03ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
#define OLED_CLK    A0
#define OLED_MOSI   A1
#define OLED_RESET  A2
#define OLED_DC     A3
#define OLED_CS     A4
Adafruit_SSD1306 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);
 80a03be:	4c14      	ldr	r4, [pc, #80]	; (80a0410 <_GLOBAL__sub_I_SystemMode+0x64>)
 80a03c0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a03c2:	2003      	movs	r0, #3
 80a03c4:	f002 f97a 	bl	80a26bc <set_system_mode>
 80a03c8:	4d12      	ldr	r5, [pc, #72]	; (80a0414 <_GLOBAL__sub_I_SystemMode+0x68>)
 80a03ca:	220c      	movs	r2, #12
 80a03cc:	230e      	movs	r3, #14
 80a03ce:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a03d2:	210b      	movs	r1, #11
 80a03d4:	230d      	movs	r3, #13
 80a03d6:	220a      	movs	r2, #10
 80a03d8:	4620      	mov	r0, r4
 80a03da:	f000 fcb1 	bl	80a0d40 <_ZN16Adafruit_SSD1306C1Eaaaaa>
 80a03de:	462a      	mov	r2, r5
 80a03e0:	490d      	ldr	r1, [pc, #52]	; (80a0418 <_GLOBAL__sub_I_SystemMode+0x6c>)
 80a03e2:	4620      	mov	r0, r4
 80a03e4:	f002 ff7c 	bl	80a32e0 <__aeabi_atexit>
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a03e8:	4c0c      	ldr	r4, [pc, #48]	; (80a041c <_GLOBAL__sub_I_SystemMode+0x70>)

/**
 * Touch Board
 */
#ifdef TEST_TOUCH
Adafruit_MPR121 cap = Adafruit_MPR121();
 80a03ea:	480d      	ldr	r0, [pc, #52]	; (80a0420 <_GLOBAL__sub_I_SystemMode+0x74>)
 80a03ec:	f000 f81c 	bl	80a0428 <_ZN15Adafruit_MPR121C1Ev>
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a03f0:	2302      	movs	r3, #2
 80a03f2:	461a      	mov	r2, r3
 80a03f4:	2118      	movs	r1, #24
 80a03f6:	4620      	mov	r0, r4
 80a03f8:	f000 feab 	bl	80a1152 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a03fc:	462a      	mov	r2, r5
 80a03fe:	4620      	mov	r0, r4
 80a0400:	4908      	ldr	r1, [pc, #32]	; (80a0424 <_GLOBAL__sub_I_SystemMode+0x78>)
  #endif
  #endif

  // put a delay so it isn't overwhelming
  delay(50);
 80a0402:	b003      	add	sp, #12
 80a0404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0408:	f002 bf6a 	b.w	80a32e0 <__aeabi_atexit>
 80a040c:	200004e8 	.word	0x200004e8
 80a0410:	20000508 	.word	0x20000508
 80a0414:	200004e0 	.word	0x200004e0
 80a0418:	080a00c9 	.word	0x080a00c9
 80a041c:	200004f4 	.word	0x200004f4
 80a0420:	2000052c 	.word	0x2000052c
 80a0424:	080a10b5 	.word	0x080a10b5

080a0428 <_ZN15Adafruit_MPR121C1Ev>:
 ****************************************************/

#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}
 80a0428:	4770      	bx	lr

080a042a <_ZN15Adafruit_MPR12113readRegister8Eh>:
}

/*********************************************************************/


uint8_t Adafruit_MPR121::readRegister8(uint8_t reg) {
 80a042a:	b538      	push	{r3, r4, r5, lr}
 80a042c:	4604      	mov	r4, r0
 80a042e:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a0430:	f002 fefc 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a0434:	f994 1000 	ldrsb.w	r1, [r4]
 80a0438:	f002 fa36 	bl	80a28a8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a043c:	f002 fef6 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a0440:	6803      	ldr	r3, [r0, #0]
 80a0442:	4629      	mov	r1, r5
 80a0444:	689b      	ldr	r3, [r3, #8]
 80a0446:	4798      	blx	r3
    Wire.endTransmission(false);
 80a0448:	f002 fef0 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a044c:	2100      	movs	r1, #0
 80a044e:	f002 fa2e 	bl	80a28ae <_ZN7TwoWire15endTransmissionEh>
    while (Wire.requestFrom(_i2caddr, 1) != 1);
 80a0452:	f002 feeb 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a0456:	2201      	movs	r2, #1
 80a0458:	f994 1000 	ldrsb.w	r1, [r4]
 80a045c:	f002 fa1b 	bl	80a2896 <_ZN7TwoWire11requestFromEii>
 80a0460:	2801      	cmp	r0, #1
 80a0462:	d1f6      	bne.n	80a0452 <_ZN15Adafruit_MPR12113readRegister8Eh+0x28>
    return ( Wire.read());
 80a0464:	f002 fee2 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a0468:	6803      	ldr	r3, [r0, #0]
 80a046a:	695b      	ldr	r3, [r3, #20]
 80a046c:	4798      	blx	r3
}
 80a046e:	b2c0      	uxtb	r0, r0
 80a0470:	bd38      	pop	{r3, r4, r5, pc}

080a0472 <_ZN15Adafruit_MPR12114readRegister16Eh>:

uint16_t Adafruit_MPR121::readRegister16(uint8_t reg) {
 80a0472:	b538      	push	{r3, r4, r5, lr}
 80a0474:	4604      	mov	r4, r0
 80a0476:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a0478:	f002 fed8 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a047c:	f994 1000 	ldrsb.w	r1, [r4]
 80a0480:	f002 fa12 	bl	80a28a8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a0484:	f002 fed2 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a0488:	6803      	ldr	r3, [r0, #0]
 80a048a:	4629      	mov	r1, r5
 80a048c:	689b      	ldr	r3, [r3, #8]
 80a048e:	4798      	blx	r3
    Wire.endTransmission(false);
 80a0490:	f002 fecc 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a0494:	2100      	movs	r1, #0
 80a0496:	f002 fa0a 	bl	80a28ae <_ZN7TwoWire15endTransmissionEh>
    while (Wire.requestFrom(_i2caddr, 2) != 2);
 80a049a:	f002 fec7 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a049e:	2202      	movs	r2, #2
 80a04a0:	f994 1000 	ldrsb.w	r1, [r4]
 80a04a4:	f002 f9f7 	bl	80a2896 <_ZN7TwoWire11requestFromEii>
 80a04a8:	2802      	cmp	r0, #2
 80a04aa:	d1f6      	bne.n	80a049a <_ZN15Adafruit_MPR12114readRegister16Eh+0x28>
    uint16_t v = Wire.read();
 80a04ac:	f002 febe 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a04b0:	6803      	ldr	r3, [r0, #0]
 80a04b2:	695b      	ldr	r3, [r3, #20]
 80a04b4:	4798      	blx	r3
 80a04b6:	4604      	mov	r4, r0
    v |=  ((uint16_t) Wire.read()) << 8;
 80a04b8:	f002 feb8 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a04bc:	6803      	ldr	r3, [r0, #0]
 80a04be:	695b      	ldr	r3, [r3, #20]
 80a04c0:	4798      	blx	r3
    return v;
 80a04c2:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
 80a04c6:	b280      	uxth	r0, r0
 80a04c8:	bd38      	pop	{r3, r4, r5, pc}

080a04ca <_ZN15Adafruit_MPR1217touchedEv>:
  if (t > 12) return 0;
  uint16_t bl = readRegister8(MPR121_BASELINE_0 + t);
  return (bl << 2);
}

uint16_t  Adafruit_MPR121::touched(void) {
 80a04ca:	b508      	push	{r3, lr}
  uint16_t t = readRegister16(MPR121_TOUCHSTATUS_L);
 80a04cc:	2100      	movs	r1, #0
 80a04ce:	f7ff ffd0 	bl	80a0472 <_ZN15Adafruit_MPR12114readRegister16Eh>
  return t & 0x0FFF;
}
 80a04d2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80a04d6:	bd08      	pop	{r3, pc}

080a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>:
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
 80a04d8:	b570      	push	{r4, r5, r6, lr}
 80a04da:	4606      	mov	r6, r0
 80a04dc:	4614      	mov	r4, r2
 80a04de:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a04e0:	f002 fea4 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a04e4:	f996 1000 	ldrsb.w	r1, [r6]
 80a04e8:	f002 f9de 	bl	80a28a8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 80a04ec:	f002 fe9e 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a04f0:	6803      	ldr	r3, [r0, #0]
 80a04f2:	4629      	mov	r1, r5
 80a04f4:	689b      	ldr	r3, [r3, #8]
 80a04f6:	4798      	blx	r3
    Wire.write((uint8_t)(value));
 80a04f8:	f002 fe98 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a04fc:	6803      	ldr	r3, [r0, #0]
 80a04fe:	4621      	mov	r1, r4
 80a0500:	689b      	ldr	r3, [r3, #8]
 80a0502:	4798      	blx	r3
    Wire.endTransmission();
 80a0504:	f002 fe92 	bl	80a322c <_Z19__fetch_global_Wirev>
}
 80a0508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
    Wire.beginTransmission(_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)(value));
    Wire.endTransmission();
 80a050c:	f002 b9d3 	b.w	80a28b6 <_ZN7TwoWire15endTransmissionEv>

080a0510 <_ZN15Adafruit_MPR12113setThresholdsEhh>:
void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
 80a0510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0512:	4605      	mov	r5, r0
 80a0514:	460f      	mov	r7, r1
 80a0516:	4616      	mov	r6, r2
 80a0518:	2441      	movs	r4, #65	; 0x41
  for (uint8_t i=0; i<12; i++) {
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
 80a051a:	4621      	mov	r1, r4
 80a051c:	463a      	mov	r2, r7
 80a051e:	4628      	mov	r0, r5
 80a0520:	f7ff ffda 	bl	80a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
 80a0524:	1c61      	adds	r1, r4, #1
 80a0526:	3402      	adds	r4, #2
 80a0528:	4632      	mov	r2, r6
 80a052a:	b2c9      	uxtb	r1, r1
 80a052c:	4628      	mov	r0, r5
 80a052e:	b2e4      	uxtb	r4, r4
 80a0530:	f7ff ffd2 	bl	80a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
  for (uint8_t i=0; i<12; i++) {
 80a0534:	2c59      	cmp	r4, #89	; 0x59
 80a0536:	d1f0      	bne.n	80a051a <_ZN15Adafruit_MPR12113setThresholdsEhh+0xa>
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
  }
}
 80a0538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a053a <_ZN15Adafruit_MPR1215beginEh>:
#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
 80a053a:	b538      	push	{r3, r4, r5, lr}
 80a053c:	4604      	mov	r4, r0
 80a053e:	460d      	mov	r5, r1
  Wire.begin();
 80a0540:	f002 fe74 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a0544:	f002 f998 	bl	80a2878 <_ZN7TwoWire5beginEv>
    
  _i2caddr = i2caddr;

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a0548:	2263      	movs	r2, #99	; 0x63
 80a054a:	2180      	movs	r1, #128	; 0x80
 80a054c:	4620      	mov	r0, r4
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
  Wire.begin();
    
  _i2caddr = i2caddr;
 80a054e:	7025      	strb	r5, [r4, #0]

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a0550:	f7ff ffc2 	bl	80a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  delay(1);
 80a0554:	2001      	movs	r0, #1
 80a0556:	f002 f945 	bl	80a27e4 <delay>
  //  Serial.print("$"); Serial.print(i, HEX); 
  //  Serial.print(": 0x"); Serial.println(readRegister8(i));
  }
  

  writeRegister(MPR121_ECR, 0x0);
 80a055a:	2200      	movs	r2, #0
 80a055c:	215e      	movs	r1, #94	; 0x5e
 80a055e:	4620      	mov	r0, r4
 80a0560:	f7ff ffba 	bl	80a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  uint8_t c = readRegister8(MPR121_CONFIG2);
 80a0564:	215d      	movs	r1, #93	; 0x5d
 80a0566:	4620      	mov	r0, r4
 80a0568:	f7ff ff5f 	bl	80a042a <_ZN15Adafruit_MPR12113readRegister8Eh>
  
  if (c != 0x24) return false;
 80a056c:	2824      	cmp	r0, #36	; 0x24
 80a056e:	d151      	bne.n	80a0614 <_ZN15Adafruit_MPR1215beginEh+0xda>
  return true;
}

void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
 80a0570:	4620      	mov	r0, r4
 80a0572:	2206      	movs	r2, #6
 80a0574:	210c      	movs	r1, #12
 80a0576:	f7ff ffcb 	bl	80a0510 <_ZN15Adafruit_MPR12113setThresholdsEhh>
  
  if (c != 0x24) return false;


  setThreshholds(12, 6);
  writeRegister(MPR121_MHDR, 0x01);
 80a057a:	4620      	mov	r0, r4
 80a057c:	2201      	movs	r2, #1
 80a057e:	212b      	movs	r1, #43	; 0x2b
 80a0580:	f7ff ffaa 	bl	80a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDR, 0x01);
 80a0584:	4620      	mov	r0, r4
 80a0586:	2201      	movs	r2, #1
 80a0588:	212c      	movs	r1, #44	; 0x2c
 80a058a:	f7ff ffa5 	bl	80a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLR, 0x0E);
 80a058e:	4620      	mov	r0, r4
 80a0590:	220e      	movs	r2, #14
 80a0592:	212d      	movs	r1, #45	; 0x2d
 80a0594:	f7ff ffa0 	bl	80a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLR, 0x00);
 80a0598:	4620      	mov	r0, r4
 80a059a:	2200      	movs	r2, #0
 80a059c:	212e      	movs	r1, #46	; 0x2e
 80a059e:	f7ff ff9b 	bl	80a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_MHDF, 0x01);
 80a05a2:	4620      	mov	r0, r4
 80a05a4:	2201      	movs	r2, #1
 80a05a6:	212f      	movs	r1, #47	; 0x2f
 80a05a8:	f7ff ff96 	bl	80a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDF, 0x05);
 80a05ac:	4620      	mov	r0, r4
 80a05ae:	2205      	movs	r2, #5
 80a05b0:	2130      	movs	r1, #48	; 0x30
 80a05b2:	f7ff ff91 	bl	80a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLF, 0x01);
 80a05b6:	4620      	mov	r0, r4
 80a05b8:	2201      	movs	r2, #1
 80a05ba:	2131      	movs	r1, #49	; 0x31
 80a05bc:	f7ff ff8c 	bl	80a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLF, 0x00);
 80a05c0:	4620      	mov	r0, r4
 80a05c2:	2200      	movs	r2, #0
 80a05c4:	2132      	movs	r1, #50	; 0x32
 80a05c6:	f7ff ff87 	bl	80a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_NHDT, 0x00);
 80a05ca:	4620      	mov	r0, r4
 80a05cc:	2200      	movs	r2, #0
 80a05ce:	2133      	movs	r1, #51	; 0x33
 80a05d0:	f7ff ff82 	bl	80a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLT, 0x00);
 80a05d4:	4620      	mov	r0, r4
 80a05d6:	2200      	movs	r2, #0
 80a05d8:	2134      	movs	r1, #52	; 0x34
 80a05da:	f7ff ff7d 	bl	80a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLT, 0x00);
 80a05de:	4620      	mov	r0, r4
 80a05e0:	2200      	movs	r2, #0
 80a05e2:	2135      	movs	r1, #53	; 0x35
 80a05e4:	f7ff ff78 	bl	80a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_DEBOUNCE, 0);
 80a05e8:	4620      	mov	r0, r4
 80a05ea:	2200      	movs	r2, #0
 80a05ec:	215b      	movs	r1, #91	; 0x5b
 80a05ee:	f7ff ff73 	bl	80a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 80a05f2:	4620      	mov	r0, r4
 80a05f4:	2210      	movs	r2, #16
 80a05f6:	215c      	movs	r1, #92	; 0x5c
 80a05f8:	f7ff ff6e 	bl	80a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 80a05fc:	4620      	mov	r0, r4
 80a05fe:	2220      	movs	r2, #32
 80a0600:	215d      	movs	r1, #93	; 0x5d
 80a0602:	f7ff ff69 	bl	80a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>

//  writeRegister(MPR121_UPLIMIT, 150);
//  writeRegister(MPR121_TARGETLIMIT, 100); // should be ~400 (100 shifted)
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking
 80a0606:	4620      	mov	r0, r4
 80a0608:	228f      	movs	r2, #143	; 0x8f
 80a060a:	215e      	movs	r1, #94	; 0x5e
 80a060c:	f7ff ff64 	bl	80a04d8 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  return true;
 80a0610:	2001      	movs	r0, #1
 80a0612:	bd38      	pop	{r3, r4, r5, pc}

  writeRegister(MPR121_ECR, 0x0);

  uint8_t c = readRegister8(MPR121_CONFIG2);
  
  if (c != 0x24) return false;
 80a0614:	2000      	movs	r0, #0
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking

  return true;
}
 80a0616:	bd38      	pop	{r3, r4, r5, pc}

080a0618 <_GLOBAL__sub_I__ZN15Adafruit_MPR121C2Ev>:
 80a0618:	f001 bf0e 	b.w	80a2438 <HAL_Pin_Map>

080a061c <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a061c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0620:	461e      	mov	r6, r3
 80a0622:	b085      	sub	sp, #20
 80a0624:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80a0628:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a062a:	1a9a      	subs	r2, r3, r2
 80a062c:	2a00      	cmp	r2, #0
 80a062e:	bfb8      	it	lt
 80a0630:	4252      	neglt	r2, r2
 80a0632:	9200      	str	r2, [sp, #0]
 80a0634:	1a72      	subs	r2, r6, r1
 80a0636:	2a00      	cmp	r2, #0
 80a0638:	bfb8      	it	lt
 80a063a:	4252      	neglt	r2, r2
 80a063c:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a063e:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a0640:	9a00      	ldr	r2, [sp, #0]
 80a0642:	9901      	ldr	r1, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a0644:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a0646:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a0648:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a064c:	dd05      	ble.n	80a065a <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
 80a064e:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
 80a0650:	461e      	mov	r6, r3
 80a0652:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a0654:	4622      	mov	r2, r4
    swap(x0, y0);
 80a0656:	462c      	mov	r4, r5
 80a0658:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
 80a065a:	42b4      	cmp	r4, r6
 80a065c:	dd05      	ble.n	80a066a <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
 80a065e:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
 80a0660:	461d      	mov	r5, r3
 80a0662:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
 80a0664:	4622      	mov	r2, r4
 80a0666:	4634      	mov	r4, r6
 80a0668:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
 80a066a:	1b5a      	subs	r2, r3, r5
 80a066c:	2a00      	cmp	r2, #0
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a066e:	ebc4 0806 	rsb	r8, r4, r6
  dy = abs(y1 - y0);
 80a0672:	bfb8      	it	lt
 80a0674:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a0676:	fa1f f888 	uxth.w	r8, r8
  dy = abs(y1 - y0);
 80a067a:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
 80a067c:	fa0f f788 	sxth.w	r7, r8
 80a0680:	2202      	movs	r2, #2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a0682:	429d      	cmp	r5, r3
 80a0684:	bfb4      	ite	lt
 80a0686:	2301      	movlt	r3, #1
 80a0688:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);

  int16_t err = dx / 2;
 80a068c:	fb97 f7f2 	sdiv	r7, r7, r2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a0690:	9302      	str	r3, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 80a0692:	42b4      	cmp	r4, r6
 80a0694:	dc1f      	bgt.n	80a06d6 <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
 80a0696:	9a01      	ldr	r2, [sp, #4]
 80a0698:	9b00      	ldr	r3, [sp, #0]
      drawPixel(y0, x0, color);
    } else {
      drawPixel(x0, y0, color);
 80a069a:	4648      	mov	r0, r9
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
 80a069c:	4293      	cmp	r3, r2
 80a069e:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
 80a06a2:	bfc8      	it	gt
 80a06a4:	4622      	movgt	r2, r4
 80a06a6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a06aa:	bfc8      	it	gt
 80a06ac:	4629      	movgt	r1, r5
 80a06ae:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
 80a06b0:	bfdc      	itt	le
 80a06b2:	462a      	movle	r2, r5
 80a06b4:	4621      	movle	r1, r4
 80a06b6:	47d8      	blx	fp
    }
    err -= dy;
 80a06b8:	9b03      	ldr	r3, [sp, #12]
 80a06ba:	1aff      	subs	r7, r7, r3
 80a06bc:	b2bb      	uxth	r3, r7
 80a06be:	b21f      	sxth	r7, r3
    if (err < 0) {
 80a06c0:	2f00      	cmp	r7, #0
 80a06c2:	da05      	bge.n	80a06d0 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
 80a06c4:	9a02      	ldr	r2, [sp, #8]
      err += dx;
 80a06c6:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
 80a06ca:	4415      	add	r5, r2
 80a06cc:	b22d      	sxth	r5, r5
      err += dx;
 80a06ce:	b23f      	sxth	r7, r7
 80a06d0:	3401      	adds	r4, #1
 80a06d2:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
 80a06d4:	e7dd      	b.n	80a0692 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
 80a06d6:	b005      	add	sp, #20
 80a06d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a06dc <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a06dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a06e0:	4604      	mov	r4, r0
 80a06e2:	4691      	mov	r9, r2
 80a06e4:	460d      	mov	r5, r1
 80a06e6:	4698      	mov	r8, r3
 80a06e8:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 80a06ec:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a06ee:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 80a06f2:	9600      	str	r6, [sp, #0]
 80a06f4:	69ff      	ldr	r7, [r7, #28]
 80a06f6:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 80a06f8:	6823      	ldr	r3, [r4, #0]
 80a06fa:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80a06fe:	9600      	str	r6, [sp, #0]
 80a0700:	444a      	add	r2, r9
 80a0702:	69df      	ldr	r7, [r3, #28]
 80a0704:	4629      	mov	r1, r5
 80a0706:	4643      	mov	r3, r8
 80a0708:	4620      	mov	r0, r4
 80a070a:	b212      	sxth	r2, r2
 80a070c:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 80a070e:	6823      	ldr	r3, [r4, #0]
 80a0710:	9600      	str	r6, [sp, #0]
 80a0712:	699f      	ldr	r7, [r3, #24]
 80a0714:	464a      	mov	r2, r9
 80a0716:	4653      	mov	r3, sl
 80a0718:	4629      	mov	r1, r5
 80a071a:	4620      	mov	r0, r4
 80a071c:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 80a071e:	6823      	ldr	r3, [r4, #0]
 80a0720:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 80a0724:	960a      	str	r6, [sp, #40]	; 0x28
 80a0726:	4429      	add	r1, r5
 80a0728:	699d      	ldr	r5, [r3, #24]
 80a072a:	464a      	mov	r2, r9
 80a072c:	4653      	mov	r3, sl
 80a072e:	4620      	mov	r0, r4
 80a0730:	46ac      	mov	ip, r5
 80a0732:	b209      	sxth	r1, r1
}
 80a0734:	b002      	add	sp, #8
 80a0736:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
 80a073a:	4760      	bx	ip

080a073c <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 80a073c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 80a073e:	3b01      	subs	r3, #1
 80a0740:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a0744:	4413      	add	r3, r2
 80a0746:	6804      	ldr	r4, [r0, #0]
 80a0748:	b21b      	sxth	r3, r3
 80a074a:	9300      	str	r3, [sp, #0]
 80a074c:	9501      	str	r5, [sp, #4]
 80a074e:	6964      	ldr	r4, [r4, #20]
 80a0750:	460b      	mov	r3, r1
 80a0752:	47a0      	blx	r4
}
 80a0754:	b003      	add	sp, #12
 80a0756:	bd30      	pop	{r4, r5, pc}

080a0758 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 80a0758:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 80a075a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a075e:	6804      	ldr	r4, [r0, #0]
 80a0760:	e88d 0024 	stmia.w	sp, {r2, r5}
 80a0764:	3b01      	subs	r3, #1
 80a0766:	440b      	add	r3, r1
 80a0768:	6964      	ldr	r4, [r4, #20]
 80a076a:	b21b      	sxth	r3, r3
 80a076c:	47a0      	blx	r4
}
 80a076e:	b003      	add	sp, #12
 80a0770:	bd30      	pop	{r4, r5, pc}

080a0772 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a0772:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0776:	4605      	mov	r5, r0
 80a0778:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a077a:	460c      	mov	r4, r1
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a077c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80a0780:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a0784:	eb01 0a03 	add.w	sl, r1, r3
 80a0788:	4554      	cmp	r4, sl
 80a078a:	da0b      	bge.n	80a07a4 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
 80a078c:	682b      	ldr	r3, [r5, #0]
 80a078e:	f8cd 9000 	str.w	r9, [sp]
 80a0792:	699e      	ldr	r6, [r3, #24]
 80a0794:	4621      	mov	r1, r4
 80a0796:	4643      	mov	r3, r8
 80a0798:	463a      	mov	r2, r7
 80a079a:	4628      	mov	r0, r5
 80a079c:	3401      	adds	r4, #1
 80a079e:	47b0      	blx	r6
 80a07a0:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a07a2:	e7f1      	b.n	80a0788 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
 80a07a4:	b002      	add	sp, #8
 80a07a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a07aa <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 80a07aa:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 80a07ac:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80a07b0:	6804      	ldr	r4, [r0, #0]
 80a07b2:	9101      	str	r1, [sp, #4]
 80a07b4:	9200      	str	r2, [sp, #0]
 80a07b6:	2200      	movs	r2, #0
 80a07b8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a07bc:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80a07be:	4611      	mov	r1, r2
 80a07c0:	47a0      	blx	r4
}
 80a07c2:	b002      	add	sp, #8
 80a07c4:	bd10      	pop	{r4, pc}

080a07c6 <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
 80a07c6:	4770      	bx	lr

080a07c8 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a07c8:	8101      	strh	r1, [r0, #8]
{
  _width    = WIDTH;
 80a07ca:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
 80a07cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 80a07d0:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
 80a07d2:	4d07      	ldr	r5, [pc, #28]	; (80a07f0 <_ZN12Adafruit_GFXC1Ess+0x28>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a07d4:	2400      	movs	r4, #0
 80a07d6:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
  _height   = HEIGHT;
 80a07d8:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
 80a07da:	2201      	movs	r2, #1
 80a07dc:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a07de:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
 80a07e0:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
 80a07e2:	8204      	strh	r4, [r0, #16]
 80a07e4:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
 80a07e6:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
 80a07e8:	82c1      	strh	r1, [r0, #22]
 80a07ea:	8281      	strh	r1, [r0, #20]
  wrap      = true;
 80a07ec:	7682      	strb	r2, [r0, #26]
}
 80a07ee:	bd30      	pop	{r4, r5, pc}
 80a07f0:	080a36a0 	.word	0x080a36a0

080a07f4 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
 80a07f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a07f8:	b08f      	sub	sp, #60	; 0x3c
 80a07fa:	9106      	str	r1, [sp, #24]
 80a07fc:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 80a0800:	4604      	mov	r4, r0
 80a0802:	9107      	str	r1, [sp, #28]
 80a0804:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80a0808:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 80a080c:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
 80a080e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80a0812:	9806      	ldr	r0, [sp, #24]
 80a0814:	4281      	cmp	r1, r0
 80a0816:	dd7d      	ble.n	80a0914 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
 80a0818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80a081c:	4291      	cmp	r1, r2
 80a081e:	dd79      	ble.n	80a0914 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
     (y >= _height)           || // Clip bottom
 80a0820:	2106      	movs	r1, #6
 80a0822:	fb01 0008 	mla	r0, r1, r8, r0
 80a0826:	2800      	cmp	r0, #0
 80a0828:	dd74      	ble.n	80a0914 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
     ((x + 6 * size - 1) < 0) || // Clip left
 80a082a:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
 80a082e:	2800      	cmp	r0, #0
 80a0830:	dd70      	ble.n	80a0914 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
 80a0832:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80a0836:	b295      	uxth	r5, r2
 80a0838:	930c      	str	r3, [sp, #48]	; 0x30
 80a083a:	f105 0308 	add.w	r3, r5, #8
 80a083e:	b29b      	uxth	r3, r3
 80a0840:	9109      	str	r1, [sp, #36]	; 0x24
 80a0842:	2600      	movs	r6, #0
 80a0844:	930d      	str	r3, [sp, #52]	; 0x34
 80a0846:	462f      	mov	r7, r5
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0848:	46a9      	mov	r9, r5
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
 80a084a:	2e05      	cmp	r6, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
 80a084c:	bf1f      	itttt	ne
 80a084e:	4b33      	ldrne	r3, [pc, #204]	; (80a091c <_ZN12Adafruit_GFX8drawCharEsshtth+0x128>)
 80a0850:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
 80a0852:	199b      	addne	r3, r3, r6
 80a0854:	f813 a002 	ldrbne.w	sl, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0858:	fa1f f388 	uxth.w	r3, r8
 80a085c:	9304      	str	r3, [sp, #16]
 80a085e:	9904      	ldr	r1, [sp, #16]
 80a0860:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80a0864:	b2b2      	uxth	r2, r6
 80a0866:	fb01 3102 	mla	r1, r1, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a086a:	4413      	add	r3, r2
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a086c:	b209      	sxth	r1, r1
 80a086e:	910a      	str	r1, [sp, #40]	; 0x28
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a0870:	b21b      	sxth	r3, r3
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a0872:	fa0f f188 	sxth.w	r1, r8
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
 80a0876:	bf08      	it	eq
 80a0878:	f04f 0a00 	moveq.w	sl, #0
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a087c:	9505      	str	r5, [sp, #20]
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a087e:	9103      	str	r1, [sp, #12]
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a0880:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
 80a0882:	f01a 0f01 	tst.w	sl, #1
 80a0886:	d011      	beq.n	80a08ac <_ZN12Adafruit_GFX8drawCharEsshtth+0xb8>
        if (size == 1) // default size
 80a0888:	f1b8 0f01 	cmp.w	r8, #1
 80a088c:	6823      	ldr	r3, [r4, #0]
 80a088e:	d103      	bne.n	80a0898 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa4>
          drawPixel(x+i, y+j, color);
 80a0890:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a0894:	9b07      	ldr	r3, [sp, #28]
 80a0896:	e014      	b.n	80a08c2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0898:	9a07      	ldr	r2, [sp, #28]
 80a089a:	9201      	str	r2, [sp, #4]
 80a089c:	9a03      	ldr	r2, [sp, #12]
 80a089e:	9200      	str	r2, [sp, #0]
 80a08a0:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a08a4:	4613      	mov	r3, r2
 80a08a6:	fa0f f289 	sxth.w	r2, r9
 80a08aa:	e018      	b.n	80a08de <_ZN12Adafruit_GFX8drawCharEsshtth+0xea>
        } 
      } else if (bg != color) {
 80a08ac:	9b07      	ldr	r3, [sp, #28]
 80a08ae:	9a08      	ldr	r2, [sp, #32]
 80a08b0:	4293      	cmp	r3, r2
 80a08b2:	d017      	beq.n	80a08e4 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf0>
        if (size == 1) // default size
 80a08b4:	f1b8 0f01 	cmp.w	r8, #1
 80a08b8:	6823      	ldr	r3, [r4, #0]
 80a08ba:	d107      	bne.n	80a08cc <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, bg);
 80a08bc:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a08c0:	4613      	mov	r3, r2
 80a08c2:	b23a      	sxth	r2, r7
 80a08c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80a08c6:	4620      	mov	r0, r4
 80a08c8:	47d8      	blx	fp
 80a08ca:	e00b      	b.n	80a08e4 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf0>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a08cc:	9a08      	ldr	r2, [sp, #32]
 80a08ce:	9201      	str	r2, [sp, #4]
 80a08d0:	9a03      	ldr	r2, [sp, #12]
 80a08d2:	9200      	str	r2, [sp, #0]
 80a08d4:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a08d8:	4613      	mov	r3, r2
 80a08da:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80a08de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a08e0:	4620      	mov	r0, r4
 80a08e2:	47d8      	blx	fp
 80a08e4:	9b04      	ldr	r3, [sp, #16]
 80a08e6:	9a04      	ldr	r2, [sp, #16]
 80a08e8:	4499      	add	r9, r3
 80a08ea:	9b05      	ldr	r3, [sp, #20]
 80a08ec:	3701      	adds	r7, #1
 80a08ee:	4413      	add	r3, r2
 80a08f0:	b29b      	uxth	r3, r3
 80a08f2:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 80a08f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a08f6:	b2bf      	uxth	r7, r7
 80a08f8:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
 80a08fa:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 80a08fe:	fa1f f989 	uxth.w	r9, r9
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 80a0902:	d1be      	bne.n	80a0882 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8e>
 80a0904:	9b09      	ldr	r3, [sp, #36]	; 0x24
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
 80a0906:	3601      	adds	r6, #1
 80a0908:	3b01      	subs	r3, #1
 80a090a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a090e:	b276      	sxtb	r6, r6
 80a0910:	9309      	str	r3, [sp, #36]	; 0x24
 80a0912:	d198      	bne.n	80a0846 <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
 80a0914:	b00f      	add	sp, #60	; 0x3c
 80a0916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a091a:	bf00      	nop
 80a091c:	080a36d0 	.word	0x080a36d0

080a0920 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a0920:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
 80a0922:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a0924:	b085      	sub	sp, #20
 80a0926:	4604      	mov	r4, r0
 80a0928:	460b      	mov	r3, r1

  if (c == '\n') {
 80a092a:	d104      	bne.n	80a0936 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
 80a092c:	7e02      	ldrb	r2, [r0, #24]
 80a092e:	8a43      	ldrh	r3, [r0, #18]
 80a0930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a0934:	e023      	b.n	80a097e <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
 80a0936:	290d      	cmp	r1, #13
 80a0938:	d024      	beq.n	80a0984 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80a093a:	7e05      	ldrb	r5, [r0, #24]
 80a093c:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 80a0940:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 80a0944:	9502      	str	r5, [sp, #8]
 80a0946:	8ac5      	ldrh	r5, [r0, #22]
 80a0948:	9501      	str	r5, [sp, #4]
 80a094a:	8a85      	ldrh	r5, [r0, #20]
 80a094c:	9500      	str	r5, [sp, #0]
 80a094e:	f7ff ff51 	bl	80a07f4 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
 80a0952:	7e22      	ldrb	r2, [r4, #24]
 80a0954:	8a23      	ldrh	r3, [r4, #16]
 80a0956:	b291      	uxth	r1, r2
 80a0958:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80a095c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80a0960:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
 80a0962:	b21b      	sxth	r3, r3
 80a0964:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80a0966:	b168      	cbz	r0, 80a0984 <_ZN12Adafruit_GFX5writeEh+0x64>
 80a0968:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80a096c:	f06f 0505 	mvn.w	r5, #5
 80a0970:	fb05 0202 	mla	r2, r5, r2, r0
 80a0974:	4293      	cmp	r3, r2
 80a0976:	dd05      	ble.n	80a0984 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
 80a0978:	8a63      	ldrh	r3, [r4, #18]
 80a097a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80a097e:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
 80a0980:	2300      	movs	r3, #0
 80a0982:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
 80a0984:	2001      	movs	r0, #1
 80a0986:	b005      	add	sp, #20
 80a0988:	bd30      	pop	{r4, r5, pc}

080a098a <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
 80a098a:	7e40      	ldrb	r0, [r0, #25]
 80a098c:	4770      	bx	lr

080a098e <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
 80a098e:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80a0992:	4770      	bx	lr

080a0994 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
 80a0994:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80a0998:	4770      	bx	lr

080a099a <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a099a:	f001 bd4d 	b.w	80a2438 <HAL_Pin_Map>
	...

080a09a0 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a09a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
 80a09a2:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a09a4:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
 80a09a8:	2c02      	cmp	r4, #2
 80a09aa:	d008      	beq.n	80a09be <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
 80a09ac:	2c03      	cmp	r4, #3
 80a09ae:	d00f      	beq.n	80a09d0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
 80a09b0:	2c01      	cmp	r4, #1
 80a09b2:	d170      	bne.n	80a0a96 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
 80a09b4:	8904      	ldrh	r4, [r0, #8]
 80a09b6:	3c01      	subs	r4, #1
 80a09b8:	1aa2      	subs	r2, r4, r2
 80a09ba:	b212      	sxth	r2, r2
      break;
 80a09bc:	e00c      	b.n	80a09d8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
 80a09be:	8944      	ldrh	r4, [r0, #10]
 80a09c0:	3c01      	subs	r4, #1
 80a09c2:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
 80a09c4:	8904      	ldrh	r4, [r0, #8]
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
 80a09c6:	b212      	sxth	r2, r2
      x -= (w-1);
 80a09c8:	1ae4      	subs	r4, r4, r3
 80a09ca:	1a61      	subs	r1, r4, r1
 80a09cc:	b209      	sxth	r1, r1
      break;
 80a09ce:	e062      	b.n	80a0a96 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
 80a09d0:	8944      	ldrh	r4, [r0, #10]
 80a09d2:	1ae4      	subs	r4, r4, r3
 80a09d4:	1a61      	subs	r1, r4, r1
 80a09d6:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 80a09d8:	2a00      	cmp	r2, #0
 80a09da:	db5b      	blt.n	80a0a94 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
 80a09dc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a09e0:	4294      	cmp	r4, r2
 80a09e2:	f340 8090 	ble.w	80a0b06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
 80a09e6:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 80a09e8:	bfbe      	ittt	lt
 80a09ea:	185b      	addlt	r3, r3, r1
 80a09ec:	b21b      	sxthlt	r3, r3
    __y = 0;
 80a09ee:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a09f0:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80a09f4:	18cc      	adds	r4, r1, r3
 80a09f6:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
 80a09f8:	bfc4      	itt	gt
 80a09fa:	1a43      	subgt	r3, r0, r1
 80a09fc:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
 80a09fe:	2b00      	cmp	r3, #0
 80a0a00:	f340 8081 	ble.w	80a0b06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 80a0a04:	b2c9      	uxtb	r1, r1
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0a06:	08c8      	lsrs	r0, r1, #3
 80a0a08:	4f3f      	ldr	r7, [pc, #252]	; (80a0b08 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
 80a0a0a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a0a0e:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
 80a0a12:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0a14:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a0a18:	d017      	beq.n	80a0a4a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
 80a0a1a:	f1c1 0108 	rsb	r1, r1, #8
 80a0a1e:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a0a20:	493a      	ldr	r1, [pc, #232]	; (80a0b0c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
 80a0a22:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a0a24:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
 80a0a26:	bf3f      	itttt	cc
 80a0a28:	ebc3 0e00 	rsbcc	lr, r3, r0
 80a0a2c:	21ff      	movcc	r1, #255	; 0xff
 80a0a2e:	fa41 f10e 	asrcc.w	r1, r1, lr
 80a0a32:	400e      	andcc	r6, r1
 80a0a34:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
 80a0a36:	2d01      	cmp	r5, #1
      *pBuf |= mask;
 80a0a38:	bf0c      	ite	eq
 80a0a3a:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
 80a0a3c:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a0a3e:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
 80a0a40:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a0a42:	d360      	bcc.n	80a0b06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
 80a0a44:	1a18      	subs	r0, r3, r0
 80a0a46:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
 80a0a48:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
 80a0a4a:	2b07      	cmp	r3, #7
 80a0a4c:	d917      	bls.n	80a0a7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
 80a0a4e:	2d01      	cmp	r5, #1
 80a0a50:	bf0c      	ite	eq
 80a0a52:	20ff      	moveq	r0, #255	; 0xff
 80a0a54:	2000      	movne	r0, #0
 80a0a56:	461a      	mov	r2, r3
 80a0a58:	f104 0180 	add.w	r1, r4, #128	; 0x80

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 80a0a5c:	3a08      	subs	r2, #8
 80a0a5e:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
 80a0a60:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
 80a0a62:	f801 0c80 	strb.w	r0, [r1, #-128]
 80a0a66:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 80a0a6a:	d8f7      	bhi.n	80a0a5c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
 80a0a6c:	f1a3 0208 	sub.w	r2, r3, #8
 80a0a70:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80a0a74:	3201      	adds	r2, #1
 80a0a76:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 80a0a7a:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
 80a0a7e:	2b00      	cmp	r3, #0
 80a0a80:	d041      	beq.n	80a0b06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a0a82:	4a23      	ldr	r2, [pc, #140]	; (80a0b10 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
    if(color == WHITE) { 
 80a0a84:	2d01      	cmp	r5, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a0a86:	5cd2      	ldrb	r2, [r2, r3]
 80a0a88:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
      *pBuf |= mask;
 80a0a8a:	bf0c      	ite	eq
 80a0a8c:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
 80a0a8e:	4393      	bicne	r3, r2
 80a0a90:	7023      	strb	r3, [r4, #0]
 80a0a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
 80a0a96:	2a00      	cmp	r2, #0
 80a0a98:	db35      	blt.n	80a0b06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a0a9a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a0a9e:	4294      	cmp	r4, r2
 80a0aa0:	dd31      	ble.n	80a0b06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
 80a0aa2:	2900      	cmp	r1, #0
    w += x;
 80a0aa4:	bfbc      	itt	lt
 80a0aa6:	18c9      	addlt	r1, r1, r3
 80a0aa8:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a0aaa:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
 80a0aae:	bfb8      	it	lt
 80a0ab0:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a0ab2:	18ce      	adds	r6, r1, r3
 80a0ab4:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 80a0ab6:	bfc4      	itt	gt
 80a0ab8:	1a63      	subgt	r3, r4, r1
 80a0aba:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
 80a0abc:	2b00      	cmp	r3, #0
 80a0abe:	dd22      	ble.n	80a0b06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0ac0:	10d0      	asrs	r0, r2, #3
 80a0ac2:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
 80a0ac6:	4810      	ldr	r0, [pc, #64]	; (80a0b08 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
 80a0ac8:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0acc:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
 80a0ace:	2001      	movs	r0, #1
 80a0ad0:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
 80a0ad4:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
 80a0ad6:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
 80a0ad8:	d109      	bne.n	80a0aee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
 80a0ada:	3b01      	subs	r3, #1
 80a0adc:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
 80a0ade:	1c5c      	adds	r4, r3, #1
 80a0ae0:	d011      	beq.n	80a0b06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a0ae2:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a0ae6:	4310      	orrs	r0, r2
 80a0ae8:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a0aec:	e7f5      	b.n	80a0ada <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
 80a0aee:	43d2      	mvns	r2, r2
 80a0af0:	b2d2      	uxtb	r2, r2
 80a0af2:	3b01      	subs	r3, #1
 80a0af4:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
 80a0af6:	1c58      	adds	r0, r3, #1
 80a0af8:	d005      	beq.n	80a0b06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a0afa:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a0afe:	4010      	ands	r0, r2
 80a0b00:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a0b04:	e7f5      	b.n	80a0af2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
 80a0b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0b08:	20000078 	.word	0x20000078
 80a0b0c:	20000070 	.word	0x20000070
 80a0b10:	20000068 	.word	0x20000068

080a0b14 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a0b14:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
 80a0b16:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a0b18:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
 80a0b1c:	2c02      	cmp	r4, #2
 80a0b1e:	d008      	beq.n	80a0b32 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
 80a0b20:	2c03      	cmp	r4, #3
 80a0b22:	d00f      	beq.n	80a0b44 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
 80a0b24:	2c01      	cmp	r4, #1
 80a0b26:	d112      	bne.n	80a0b4e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
 80a0b28:	8904      	ldrh	r4, [r0, #8]
 80a0b2a:	1ae4      	subs	r4, r4, r3
 80a0b2c:	1aa2      	subs	r2, r4, r2
 80a0b2e:	b212      	sxth	r2, r2
      break;
 80a0b30:	e06d      	b.n	80a0c0e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 80a0b32:	8904      	ldrh	r4, [r0, #8]
 80a0b34:	3c01      	subs	r4, #1
 80a0b36:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
 80a0b38:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 80a0b3a:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
 80a0b3c:	1ae4      	subs	r4, r4, r3
 80a0b3e:	1aa2      	subs	r2, r4, r2
 80a0b40:	b212      	sxth	r2, r2
      break;
 80a0b42:	e004      	b.n	80a0b4e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
 80a0b44:	8944      	ldrh	r4, [r0, #10]
 80a0b46:	3c01      	subs	r4, #1
 80a0b48:	1a61      	subs	r1, r4, r1
 80a0b4a:	b209      	sxth	r1, r1
      break;
 80a0b4c:	e05f      	b.n	80a0c0e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 80a0b4e:	2900      	cmp	r1, #0
 80a0b50:	db5c      	blt.n	80a0c0c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
 80a0b52:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a0b56:	428c      	cmp	r4, r1
 80a0b58:	f340 8091 	ble.w	80a0c7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
 80a0b5c:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 80a0b5e:	bfbc      	itt	lt
 80a0b60:	18d2      	addlt	r2, r2, r3
 80a0b62:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a0b64:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
 80a0b68:	bfb8      	it	lt
 80a0b6a:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a0b6c:	18d4      	adds	r4, r2, r3
 80a0b6e:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
 80a0b70:	bfc4      	itt	gt
 80a0b72:	1a83      	subgt	r3, r0, r2
 80a0b74:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
 80a0b76:	2b00      	cmp	r3, #0
 80a0b78:	f340 8081 	ble.w	80a0c7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 80a0b7c:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0b7e:	4e40      	ldr	r6, [pc, #256]	; (80a0c80 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
 80a0b80:	b2da      	uxtb	r2, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0b82:	08e3      	lsrs	r3, r4, #3
 80a0b84:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a0b88:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0b8c:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a0b90:	d017      	beq.n	80a0bc2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
 80a0b92:	f1c4 0408 	rsb	r4, r4, #8
 80a0b96:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a0b98:	4c3a      	ldr	r4, [pc, #232]	; (80a0c84 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
 80a0b9a:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a0b9c:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
 80a0b9e:	bf3f      	itttt	cc
 80a0ba0:	ebc2 0e00 	rsbcc	lr, r2, r0
 80a0ba4:	24ff      	movcc	r4, #255	; 0xff
 80a0ba6:	fa44 f40e 	asrcc.w	r4, r4, lr
 80a0baa:	4027      	andcc	r7, r4
 80a0bac:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
 80a0bae:	2d01      	cmp	r5, #1
      *pBuf |= mask;
 80a0bb0:	bf0c      	ite	eq
 80a0bb2:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
 80a0bb4:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a0bb6:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
 80a0bb8:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a0bba:	d360      	bcc.n	80a0c7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
 80a0bbc:	1a10      	subs	r0, r2, r0
 80a0bbe:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
 80a0bc0:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
 80a0bc2:	2a07      	cmp	r2, #7
 80a0bc4:	d917      	bls.n	80a0bf6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
 80a0bc6:	2d01      	cmp	r5, #1
 80a0bc8:	bf0c      	ite	eq
 80a0bca:	24ff      	moveq	r4, #255	; 0xff
 80a0bcc:	2400      	movne	r4, #0
 80a0bce:	4611      	mov	r1, r2
 80a0bd0:	f103 0080 	add.w	r0, r3, #128	; 0x80

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 80a0bd4:	3908      	subs	r1, #8
 80a0bd6:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
 80a0bd8:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
 80a0bda:	f800 4c80 	strb.w	r4, [r0, #-128]
 80a0bde:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 80a0be2:	d8f7      	bhi.n	80a0bd4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
 80a0be4:	f1a2 0108 	sub.w	r1, r2, #8
 80a0be8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80a0bec:	3101      	adds	r1, #1
 80a0bee:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
 80a0bf2:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
 80a0bf6:	2a00      	cmp	r2, #0
 80a0bf8:	d041      	beq.n	80a0c7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a0bfa:	4923      	ldr	r1, [pc, #140]	; (80a0c88 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
    if(color == WHITE) { 
 80a0bfc:	2d01      	cmp	r5, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a0bfe:	5c89      	ldrb	r1, [r1, r2]
 80a0c00:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
      *pBuf |= mask;
 80a0c02:	bf0c      	ite	eq
 80a0c04:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
 80a0c06:	438a      	bicne	r2, r1
 80a0c08:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
 80a0c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
 80a0c0e:	2900      	cmp	r1, #0
 80a0c10:	db35      	blt.n	80a0c7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a0c12:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a0c16:	428c      	cmp	r4, r1
 80a0c18:	dd31      	ble.n	80a0c7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
 80a0c1a:	2a00      	cmp	r2, #0
    w += x;
 80a0c1c:	bfbc      	itt	lt
 80a0c1e:	18d2      	addlt	r2, r2, r3
 80a0c20:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a0c22:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
 80a0c26:	bfb8      	it	lt
 80a0c28:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a0c2a:	18d6      	adds	r6, r2, r3
 80a0c2c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 80a0c2e:	bfc4      	itt	gt
 80a0c30:	1aa3      	subgt	r3, r4, r2
 80a0c32:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
 80a0c34:	2b00      	cmp	r3, #0
 80a0c36:	dd22      	ble.n	80a0c7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0c38:	10c8      	asrs	r0, r1, #3
 80a0c3a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
 80a0c3e:	4810      	ldr	r0, [pc, #64]	; (80a0c80 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
 80a0c40:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0c44:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
 80a0c46:	2201      	movs	r2, #1
 80a0c48:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
 80a0c4c:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
 80a0c4e:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
 80a0c50:	d109      	bne.n	80a0c66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
 80a0c52:	1e5a      	subs	r2, r3, #1
 80a0c54:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
 80a0c56:	1c5c      	adds	r4, r3, #1
 80a0c58:	d011      	beq.n	80a0c7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a0c5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a0c5e:	430a      	orrs	r2, r1
 80a0c60:	f800 2c01 	strb.w	r2, [r0, #-1]
 80a0c64:	e7f5      	b.n	80a0c52 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
 80a0c66:	43c9      	mvns	r1, r1
 80a0c68:	b2c9      	uxtb	r1, r1
 80a0c6a:	1e5a      	subs	r2, r3, #1
 80a0c6c:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
 80a0c6e:	1c5a      	adds	r2, r3, #1
 80a0c70:	d005      	beq.n	80a0c7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a0c72:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a0c76:	400a      	ands	r2, r1
 80a0c78:	f800 2c01 	strb.w	r2, [r0, #-1]
 80a0c7c:	e7f5      	b.n	80a0c6a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
 80a0c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0c80:	20000078 	.word	0x20000078
 80a0c84:	20000070 	.word	0x20000070
 80a0c88:	20000068 	.word	0x20000068

080a0c8c <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>:
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
 80a0c8c:	b410      	push	{r4}
  
  if(hwSPI) {
 80a0c8e:	b122      	cbz	r2, 80a0c9a <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1+0xe>
    (void)SPI.transfer(d);
 80a0c90:	4619      	mov	r1, r3
 80a0c92:	4805      	ldr	r0, [pc, #20]	; (80a0ca8 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1+0x1c>)
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}
 80a0c94:	bc10      	pop	{r4}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
    (void)SPI.transfer(d);
 80a0c96:	f001 bfe9 	b.w	80a2c6c <_ZN8SPIClass8transferEh>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
 80a0c9a:	2201      	movs	r2, #1
 80a0c9c:	b2c9      	uxtb	r1, r1
 80a0c9e:	b2c0      	uxtb	r0, r0
  }
}
 80a0ca0:	bc10      	pop	{r4}
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
 80a0ca2:	f002 ba9f 	b.w	80a31e4 <shiftOut>
 80a0ca6:	bf00      	nop
 80a0ca8:	200005f8 	.word	0x200005f8

080a0cac <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a0cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 80a0cae:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a0cb0:	4606      	mov	r6, r0
 80a0cb2:	4614      	mov	r4, r2
 80a0cb4:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 80a0cb6:	db3f      	blt.n	80a0d38 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a0cb8:	f7ff fe69 	bl	80a098e <_ZN12Adafruit_GFX5widthEv>
 80a0cbc:	4285      	cmp	r5, r0
 80a0cbe:	da3b      	bge.n	80a0d38 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a0cc0:	2c00      	cmp	r4, #0
 80a0cc2:	db39      	blt.n	80a0d38 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a0cc4:	4630      	mov	r0, r6
 80a0cc6:	f7ff fe65 	bl	80a0994 <_ZN12Adafruit_GFX6heightEv>
 80a0cca:	4284      	cmp	r4, r0
 80a0ccc:	da34      	bge.n	80a0d38 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a0cce:	4630      	mov	r0, r6
 80a0cd0:	f7ff fe5b 	bl	80a098a <_ZN12Adafruit_GFX11getRotationEv>
 80a0cd4:	2802      	cmp	r0, #2
 80a0cd6:	d127      	bne.n	80a0d28 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0cd8:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
 80a0cda:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0cdc:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
 80a0cde:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0ce0:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
 80a0ce2:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0ce4:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
 80a0ce6:	b204      	sxth	r4, r0
 80a0ce8:	e006      	b.n	80a0cf8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a0cea:	2801      	cmp	r0, #1
 80a0cec:	d104      	bne.n	80a0cf8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
 80a0cee:	8933      	ldrh	r3, [r6, #8]
 80a0cf0:	3b01      	subs	r3, #1
 80a0cf2:	1b1b      	subs	r3, r3, r4
 80a0cf4:	462c      	mov	r4, r5
 80a0cf6:	b21d      	sxth	r5, r3
 80a0cf8:	2008      	movs	r0, #8
    break;
  }  

  // x is which column
  if (color == WHITE) 
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a0cfa:	fb94 f0f0 	sdiv	r0, r4, r0
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
 80a0cfe:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a0d00:	b200      	sxth	r0, r0
 80a0d02:	4b0e      	ldr	r3, [pc, #56]	; (80a0d3c <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
 80a0d04:	f004 0207 	and.w	r2, r4, #7
 80a0d08:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
 80a0d0c:	d104      	bne.n	80a0d18 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a0d0e:	4097      	lsls	r7, r2
 80a0d10:	5c5a      	ldrb	r2, [r3, r1]
 80a0d12:	4317      	orrs	r7, r2
 80a0d14:	545f      	strb	r7, [r3, r1]
 80a0d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
 80a0d18:	5c58      	ldrb	r0, [r3, r1]
 80a0d1a:	2701      	movs	r7, #1
 80a0d1c:	fa07 f202 	lsl.w	r2, r7, r2
 80a0d20:	ea20 0202 	bic.w	r2, r0, r2
 80a0d24:	545a      	strb	r2, [r3, r1]
 80a0d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a0d28:	2803      	cmp	r0, #3
 80a0d2a:	d1de      	bne.n	80a0cea <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
 80a0d2c:	8973      	ldrh	r3, [r6, #10]
 80a0d2e:	3b01      	subs	r3, #1
 80a0d30:	1b5b      	subs	r3, r3, r5
 80a0d32:	4625      	mov	r5, r4
 80a0d34:	b21c      	sxth	r4, r3
 80a0d36:	e7df      	b.n	80a0cf8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
 80a0d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0d3a:	bf00      	nop
 80a0d3c:	20000078 	.word	0x20000078

080a0d40 <_ZN16Adafruit_SSD1306C1Eaaaaa>:
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 80a0d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d42:	4604      	mov	r4, r0
 80a0d44:	461f      	mov	r7, r3
 80a0d46:	460d      	mov	r5, r1
 80a0d48:	4616      	mov	r6, r2
 80a0d4a:	2180      	movs	r1, #128	; 0x80
 80a0d4c:	2240      	movs	r2, #64	; 0x40
 80a0d4e:	f7ff fd3b 	bl	80a07c8 <_ZN12Adafruit_GFXC1Ess>
 80a0d52:	4b09      	ldr	r3, [pc, #36]	; (80a0d78 <_ZN16Adafruit_SSD1306C1Eaaaaa+0x38>)
  cs = CS;
  rst = RST;
  dc = DC;
 80a0d54:	77e7      	strb	r7, [r4, #31]
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 80a0d56:	6023      	str	r3, [r4, #0]
  cs = CS;
 80a0d58:	f99d 301c 	ldrsb.w	r3, [sp, #28]
  rst = RST;
  dc = DC;
  sclk = SCLK;
 80a0d5c:	77a6      	strb	r6, [r4, #30]
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
  cs = CS;
 80a0d5e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  rst = RST;
 80a0d62:	f99d 3018 	ldrsb.w	r3, [sp, #24]
  dc = DC;
  sclk = SCLK;
  sid = SID;
 80a0d66:	7765      	strb	r5, [r4, #29]
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
  cs = CS;
  rst = RST;
 80a0d68:	f884 3020 	strb.w	r3, [r4, #32]
  dc = DC;
  sclk = SCLK;
  sid = SID;
  hwSPI = false;
 80a0d6c:	2300      	movs	r3, #0
 80a0d6e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 80a0d72:	4620      	mov	r0, r4
 80a0d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0d76:	bf00      	nop
 80a0d78:	080a3bd4 	.word	0x080a3bd4

080a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 80a0d7c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
 80a0d7e:	f990 301d 	ldrsb.w	r3, [r0, #29]
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 80a0d82:	4604      	mov	r4, r0
  if (sid != -1)
 80a0d84:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 80a0d86:	460d      	mov	r5, r1
  if (sid != -1)
 80a0d88:	d022      	beq.n	80a0dd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x54>
  {
    // SPI
    digitalWrite(cs, HIGH);
 80a0d8a:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
 80a0d8e:	2101      	movs	r1, #1
 80a0d90:	b280      	uxth	r0, r0
 80a0d92:	f002 fa0e 	bl	80a31b2 <digitalWrite>
    digitalWrite(dc, LOW);
 80a0d96:	f994 001f 	ldrsb.w	r0, [r4, #31]
 80a0d9a:	2100      	movs	r1, #0
 80a0d9c:	b280      	uxth	r0, r0
 80a0d9e:	f002 fa08 	bl	80a31b2 <digitalWrite>
    digitalWrite(cs, LOW);
 80a0da2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0da6:	2100      	movs	r1, #0
 80a0da8:	b280      	uxth	r0, r0
 80a0daa:	f002 fa02 	bl	80a31b2 <digitalWrite>
    fastSPIwrite(c);
 80a0dae:	f994 101e 	ldrsb.w	r1, [r4, #30]
 80a0db2:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a0db6:	462b      	mov	r3, r5
 80a0db8:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 80a0dbc:	f7ff ff66 	bl	80a0c8c <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>
    digitalWrite(cs, HIGH);
 80a0dc0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0dc4:	2101      	movs	r1, #1
 80a0dc6:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
 80a0dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
 80a0dcc:	f002 b9f1 	b.w	80a31b2 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
 80a0dd0:	f002 fa2c 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a0dd4:	f994 101b 	ldrsb.w	r1, [r4, #27]
 80a0dd8:	f001 fd66 	bl	80a28a8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
 80a0ddc:	f002 fa26 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a0de0:	6803      	ldr	r3, [r0, #0]
 80a0de2:	2100      	movs	r1, #0
 80a0de4:	689b      	ldr	r3, [r3, #8]
 80a0de6:	4798      	blx	r3
    Wire.write(c);
 80a0de8:	f002 fa20 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a0dec:	6803      	ldr	r3, [r0, #0]
 80a0dee:	4629      	mov	r1, r5
 80a0df0:	689b      	ldr	r3, [r3, #8]
 80a0df2:	4798      	blx	r3
    Wire.endTransmission();
 80a0df4:	f002 fa1a 	bl	80a322c <_Z19__fetch_global_Wirev>
  }
}
 80a0df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
 80a0dfc:	f001 bd5b 	b.w	80a28b6 <_ZN7TwoWire15endTransmissionEv>

080a0e00 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
 80a0e00:	b538      	push	{r3, r4, r5, lr}
 80a0e02:	4604      	mov	r4, r0
  _vccstate = vccstate;
 80a0e04:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
 80a0e06:	f990 301d 	ldrsb.w	r3, [r0, #29]
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
 80a0e0a:	460d      	mov	r5, r1
  _vccstate = vccstate;
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
 80a0e0c:	3301      	adds	r3, #1
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
 80a0e0e:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
 80a0e10:	d033      	beq.n	80a0e7a <_ZN16Adafruit_SSD13065beginEhh+0x7a>
    pinMode(dc, OUTPUT);
 80a0e12:	f990 001f 	ldrsb.w	r0, [r0, #31]
 80a0e16:	2101      	movs	r1, #1
 80a0e18:	b280      	uxth	r0, r0
 80a0e1a:	f002 f9b9 	bl	80a3190 <pinMode>
    pinMode(cs, OUTPUT);
 80a0e1e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0e22:	2101      	movs	r1, #1
 80a0e24:	b280      	uxth	r0, r0
 80a0e26:	f002 f9b3 	bl	80a3190 <pinMode>
    if (!hwSPI){
 80a0e2a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80a0e2e:	b95b      	cbnz	r3, 80a0e48 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
 80a0e30:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a0e34:	2101      	movs	r1, #1
 80a0e36:	b280      	uxth	r0, r0
 80a0e38:	f002 f9aa 	bl	80a3190 <pinMode>
    	pinMode(sclk, OUTPUT);
 80a0e3c:	f994 001e 	ldrsb.w	r0, [r4, #30]
 80a0e40:	2101      	movs	r1, #1
 80a0e42:	b280      	uxth	r0, r0
 80a0e44:	f002 f9a4 	bl	80a3190 <pinMode>
    	}
    if (hwSPI){
 80a0e48:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80a0e4c:	b1cb      	cbz	r3, 80a0e82 <_ZN16Adafruit_SSD13065beginEhh+0x82>
        digitalWrite(cs, HIGH);
 80a0e4e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0e52:	2101      	movs	r1, #1
 80a0e54:	b280      	uxth	r0, r0
 80a0e56:	f002 f9ac 	bl	80a31b2 <digitalWrite>
        SPI.setBitOrder(MSBFIRST);
 80a0e5a:	2101      	movs	r1, #1
 80a0e5c:	484f      	ldr	r0, [pc, #316]	; (80a0f9c <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
 80a0e5e:	f001 fea4 	bl	80a2baa <_ZN8SPIClass11setBitOrderEh>
        SPI.setClockDivider(SPI_CLOCK_DIV8);	// 72MHz / 8 = 9Mhz
 80a0e62:	2110      	movs	r1, #16
 80a0e64:	484d      	ldr	r0, [pc, #308]	; (80a0f9c <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
 80a0e66:	f001 feed 	bl	80a2c44 <_ZN8SPIClass15setClockDividerEh>
        SPI.setDataMode(0);
 80a0e6a:	2100      	movs	r1, #0
 80a0e6c:	484b      	ldr	r0, [pc, #300]	; (80a0f9c <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
 80a0e6e:	f001 fe9f 	bl	80a2bb0 <_ZN8SPIClass11setDataModeEh>
        SPI.begin();	
 80a0e72:	484a      	ldr	r0, [pc, #296]	; (80a0f9c <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
 80a0e74:	f001 fe94 	bl	80a2ba0 <_ZN8SPIClass5beginEv>
 80a0e78:	e003      	b.n	80a0e82 <_ZN16Adafruit_SSD13065beginEhh+0x82>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
 80a0e7a:	f002 f9d7 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a0e7e:	f001 fcfb 	bl	80a2878 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
 80a0e82:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a0e86:	2101      	movs	r1, #1
 80a0e88:	b280      	uxth	r0, r0
 80a0e8a:	f002 f981 	bl	80a3190 <pinMode>
  digitalWrite(rst, HIGH);
 80a0e8e:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a0e92:	2101      	movs	r1, #1
 80a0e94:	b280      	uxth	r0, r0
 80a0e96:	f002 f98c 	bl	80a31b2 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
 80a0e9a:	2001      	movs	r0, #1
 80a0e9c:	f001 fca2 	bl	80a27e4 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
 80a0ea0:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a0ea4:	2100      	movs	r1, #0
 80a0ea6:	b280      	uxth	r0, r0
 80a0ea8:	f002 f983 	bl	80a31b2 <digitalWrite>
  // wait 10ms
  delay(10);
 80a0eac:	200a      	movs	r0, #10
 80a0eae:	f001 fc99 	bl	80a27e4 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
 80a0eb2:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a0eb6:	2101      	movs	r1, #1
 80a0eb8:	b280      	uxth	r0, r0
 80a0eba:	f002 f97a 	bl	80a31b2 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 80a0ebe:	4620      	mov	r0, r4
 80a0ec0:	21ae      	movs	r1, #174	; 0xae
 80a0ec2:	f7ff ff5b 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 80a0ec6:	4620      	mov	r0, r4
 80a0ec8:	21d5      	movs	r1, #213	; 0xd5
 80a0eca:	f7ff ff57 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
 80a0ece:	4620      	mov	r0, r4
 80a0ed0:	2180      	movs	r1, #128	; 0x80
 80a0ed2:	f7ff ff53 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 80a0ed6:	4620      	mov	r0, r4
 80a0ed8:	21a8      	movs	r1, #168	; 0xa8
 80a0eda:	f7ff ff4f 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
 80a0ede:	4620      	mov	r0, r4
 80a0ee0:	213f      	movs	r1, #63	; 0x3f
 80a0ee2:	f7ff ff4b 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 80a0ee6:	4620      	mov	r0, r4
 80a0ee8:	21d3      	movs	r1, #211	; 0xd3
 80a0eea:	f7ff ff47 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
 80a0eee:	4620      	mov	r0, r4
 80a0ef0:	2100      	movs	r1, #0
 80a0ef2:	f7ff ff43 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 80a0ef6:	4620      	mov	r0, r4
 80a0ef8:	2140      	movs	r1, #64	; 0x40
 80a0efa:	f7ff ff3f 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 80a0efe:	218d      	movs	r1, #141	; 0x8d
 80a0f00:	4620      	mov	r0, r4
 80a0f02:	f7ff ff3b 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 80a0f06:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
 80a0f08:	bf0c      	ite	eq
 80a0f0a:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
 80a0f0c:	2114      	movne	r1, #20
 80a0f0e:	4620      	mov	r0, r4
 80a0f10:	f7ff ff34 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 80a0f14:	4620      	mov	r0, r4
 80a0f16:	2120      	movs	r1, #32
 80a0f18:	f7ff ff30 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
 80a0f1c:	4620      	mov	r0, r4
 80a0f1e:	2100      	movs	r1, #0
 80a0f20:	f7ff ff2c 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
 80a0f24:	4620      	mov	r0, r4
 80a0f26:	21a1      	movs	r1, #161	; 0xa1
 80a0f28:	f7ff ff28 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
 80a0f2c:	4620      	mov	r0, r4
 80a0f2e:	21c8      	movs	r1, #200	; 0xc8
 80a0f30:	f7ff ff24 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 80a0f34:	4620      	mov	r0, r4
 80a0f36:	21da      	movs	r1, #218	; 0xda
 80a0f38:	f7ff ff20 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
 80a0f3c:	4620      	mov	r0, r4
 80a0f3e:	2112      	movs	r1, #18
 80a0f40:	f7ff ff1c 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 80a0f44:	2181      	movs	r1, #129	; 0x81
 80a0f46:	4620      	mov	r0, r4
 80a0f48:	f7ff ff18 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 80a0f4c:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
 80a0f4e:	bf0c      	ite	eq
 80a0f50:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
 80a0f52:	21cf      	movne	r1, #207	; 0xcf
 80a0f54:	4620      	mov	r0, r4
 80a0f56:	f7ff ff11 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 80a0f5a:	21d9      	movs	r1, #217	; 0xd9
 80a0f5c:	4620      	mov	r0, r4
 80a0f5e:	f7ff ff0d 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 80a0f62:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
 80a0f64:	bf0c      	ite	eq
 80a0f66:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
 80a0f68:	21f1      	movne	r1, #241	; 0xf1
 80a0f6a:	4620      	mov	r0, r4
 80a0f6c:	f7ff ff06 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 80a0f70:	4620      	mov	r0, r4
 80a0f72:	21db      	movs	r1, #219	; 0xdb
 80a0f74:	f7ff ff02 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
 80a0f78:	4620      	mov	r0, r4
 80a0f7a:	2140      	movs	r1, #64	; 0x40
 80a0f7c:	f7ff fefe 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 80a0f80:	4620      	mov	r0, r4
 80a0f82:	21a4      	movs	r1, #164	; 0xa4
 80a0f84:	f7ff fefa 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 80a0f88:	4620      	mov	r0, r4
 80a0f8a:	21a6      	movs	r1, #166	; 0xa6
 80a0f8c:	f7ff fef6 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 80a0f90:	4620      	mov	r0, r4
}
 80a0f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 80a0f96:	21af      	movs	r1, #175	; 0xaf
 80a0f98:	f7ff bef0 	b.w	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
 80a0f9c:	200005f8 	.word	0x200005f8

080a0fa0 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
 80a0fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0fa4:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
 80a0fa6:	2121      	movs	r1, #33	; 0x21
 80a0fa8:	f7ff fee8 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
 80a0fac:	2100      	movs	r1, #0
 80a0fae:	4620      	mov	r0, r4
 80a0fb0:	f7ff fee4 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
 80a0fb4:	217f      	movs	r1, #127	; 0x7f
 80a0fb6:	4620      	mov	r0, r4
 80a0fb8:	f7ff fee0 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
 80a0fbc:	2122      	movs	r1, #34	; 0x22
 80a0fbe:	4620      	mov	r0, r4
 80a0fc0:	f7ff fedc 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
 80a0fc4:	2100      	movs	r1, #0
 80a0fc6:	4620      	mov	r0, r4
 80a0fc8:	f7ff fed8 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
 80a0fcc:	2107      	movs	r1, #7
 80a0fce:	4620      	mov	r0, r4
 80a0fd0:	f7ff fed4 	bl	80a0d7c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
 80a0fd4:	f994 301d 	ldrsb.w	r3, [r4, #29]
 80a0fd8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a1088 <_ZN16Adafruit_SSD13067displayEv+0xe8>
 80a0fdc:	3301      	adds	r3, #1
 80a0fde:	d02e      	beq.n	80a103e <_ZN16Adafruit_SSD13067displayEv+0x9e>
  {
    // SPI
    digitalWrite(cs, HIGH);
 80a0fe0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0fe4:	2101      	movs	r1, #1
 80a0fe6:	b280      	uxth	r0, r0
 80a0fe8:	f002 f8e3 	bl	80a31b2 <digitalWrite>
    digitalWrite(dc, HIGH);
 80a0fec:	f994 001f 	ldrsb.w	r0, [r4, #31]
 80a0ff0:	2101      	movs	r1, #1
 80a0ff2:	b280      	uxth	r0, r0
 80a0ff4:	f002 f8dd 	bl	80a31b2 <digitalWrite>
    digitalWrite(cs, LOW);
 80a0ff8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0ffc:	2100      	movs	r1, #0
 80a0ffe:	b280      	uxth	r0, r0
 80a1000:	f002 f8d7 	bl	80a31b2 <digitalWrite>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a1004:	2001      	movs	r0, #1
 80a1006:	f001 f9ff 	bl	80a2408 <HAL_Delay_Microseconds>
 80a100a:	2500      	movs	r5, #0
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
 80a100c:	f818 3005 	ldrb.w	r3, [r8, r5]
 80a1010:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 80a1014:	f994 101e 	ldrsb.w	r1, [r4, #30]
 80a1018:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a101c:	3501      	adds	r5, #1
 80a101e:	f7ff fe35 	bl	80a0c8c <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
 80a1022:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80a1026:	d1f1      	bne.n	80a100c <_ZN16Adafruit_SSD13067displayEv+0x6c>
 80a1028:	2001      	movs	r0, #1
 80a102a:	f001 f9ed 	bl	80a2408 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
 80a102e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a1032:	2101      	movs	r1, #1
 80a1034:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
 80a1036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
 80a103a:	f002 b8ba 	b.w	80a31b2 <digitalWrite>
 80a103e:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
 80a1040:	f002 f8f4 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a1044:	f994 101b 	ldrsb.w	r1, [r4, #27]
 80a1048:	f001 fc2e 	bl	80a28a8 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
 80a104c:	f002 f8ee 	bl	80a322c <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a1050:	6803      	ldr	r3, [r0, #0]
 80a1052:	2140      	movs	r1, #64	; 0x40
 80a1054:	689b      	ldr	r3, [r3, #8]
 80a1056:	4798      	blx	r3
 80a1058:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
 80a105a:	f002 f8e7 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a105e:	19af      	adds	r7, r5, r6
 80a1060:	6803      	ldr	r3, [r0, #0]
 80a1062:	b2bf      	uxth	r7, r7
 80a1064:	689b      	ldr	r3, [r3, #8]
 80a1066:	f818 1007 	ldrb.w	r1, [r8, r7]
 80a106a:	3601      	adds	r6, #1
 80a106c:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
 80a106e:	2e10      	cmp	r6, #16
 80a1070:	d1f3      	bne.n	80a105a <_ZN16Adafruit_SSD13067displayEv+0xba>
 80a1072:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
 80a1074:	f002 f8da 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a1078:	b2ad      	uxth	r5, r5
 80a107a:	f001 fc1c 	bl	80a28b6 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
 80a107e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80a1082:	d1dd      	bne.n	80a1040 <_ZN16Adafruit_SSD13067displayEv+0xa0>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
 80a1084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1088:	20000078 	.word	0x20000078

080a108c <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
 80a108c:	f001 b9d4 	b.w	80a2438 <HAL_Pin_Map>

080a1090 <_GLOBAL__sub_I__ZN7MPU9250C2Ev>:
 80a1090:	f001 b9d2 	b.w	80a2438 <HAL_Pin_Map>

080a1094 <_GLOBAL__sub_I__ZN7MPU92507getMresEv>:
 80a1094:	f001 b9d0 	b.w	80a2438 <HAL_Pin_Map>

080a1098 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff>:
  q[1] = q2 * norm;
  q[2] = q3 * norm;
  q[3] = q4 * norm;
}

const float * getQ () { return q; }
 80a1098:	b508      	push	{r3, lr}
 80a109a:	f001 f9cd 	bl	80a2438 <HAL_Pin_Map>
// noticed any reduction in solution accuracy. This is essentially the I
// coefficient in a PID control sense; the bigger the feedback coefficient,
// the faster the solution converges, usually at the expense of accuracy.
// In any case, this is the free parameter in the Madgwick filtering and
// fusion scheme.
static float beta = sqrt(3.0f / 4.0f) * GyroMeasError;   // Compute beta
 80a109e:	4a02      	ldr	r2, [pc, #8]	; (80a10a8 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x10>)
 80a10a0:	4b02      	ldr	r3, [pc, #8]	; (80a10ac <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x14>)
 80a10a2:	601a      	str	r2, [r3, #0]
 80a10a4:	bd08      	pop	{r3, pc}
 80a10a6:	bf00      	nop
 80a10a8:	3f1ac70d 	.word	0x3f1ac70d
 80a10ac:	20000534 	.word	0x20000534

080a10b0 <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a10b0:	f001 b9b2 	b.w	80a2418 <HAL_Timer_Get_Micro_Seconds>

080a10b4 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a10b4:	b510      	push	{r4, lr}
 80a10b6:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a10b8:	68c0      	ldr	r0, [r0, #12]
 80a10ba:	b108      	cbz	r0, 80a10c0 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a10bc:	f001 fb8a 	bl	80a27d4 <free>
  if (begun) pinMode(pin, INPUT);
 80a10c0:	7823      	ldrb	r3, [r4, #0]
 80a10c2:	b11b      	cbz	r3, 80a10cc <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a10c4:	2100      	movs	r1, #0
 80a10c6:	79e0      	ldrb	r0, [r4, #7]
 80a10c8:	f002 f862 	bl	80a3190 <pinMode>
}
 80a10cc:	4620      	mov	r0, r4
 80a10ce:	bd10      	pop	{r4, pc}

080a10d0 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a10d0:	b538      	push	{r3, r4, r5, lr}
 80a10d2:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a10d4:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a10d6:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a10d8:	b108      	cbz	r0, 80a10de <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a10da:	f001 fb7b 	bl	80a27d4 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a10de:	79a3      	ldrb	r3, [r4, #6]
 80a10e0:	2b06      	cmp	r3, #6
 80a10e2:	bf0c      	ite	eq
 80a10e4:	2004      	moveq	r0, #4
 80a10e6:	2003      	movne	r0, #3
 80a10e8:	4368      	muls	r0, r5
 80a10ea:	b280      	uxth	r0, r0
 80a10ec:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a10ee:	f001 fb69 	bl	80a27c4 <malloc>
 80a10f2:	60e0      	str	r0, [r4, #12]
 80a10f4:	b128      	cbz	r0, 80a1102 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a10f6:	88a2      	ldrh	r2, [r4, #4]
 80a10f8:	2100      	movs	r1, #0
 80a10fa:	f002 fa5a 	bl	80a35b2 <memset>
    numLEDs = n;
 80a10fe:	8065      	strh	r5, [r4, #2]
 80a1100:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a1102:	80a0      	strh	r0, [r4, #4]
 80a1104:	8060      	strh	r0, [r4, #2]
 80a1106:	bd38      	pop	{r3, r4, r5, pc}

080a1108 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a1108:	b510      	push	{r4, lr}
 80a110a:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a110c:	2101      	movs	r1, #1
 80a110e:	79c0      	ldrb	r0, [r0, #7]
 80a1110:	f002 f83e 	bl	80a3190 <pinMode>
  digitalWrite(pin, LOW);
 80a1114:	2100      	movs	r1, #0
 80a1116:	79e0      	ldrb	r0, [r4, #7]
 80a1118:	f002 f84b 	bl	80a31b2 <digitalWrite>
  begun = true;
 80a111c:	2301      	movs	r3, #1
 80a111e:	7023      	strb	r3, [r4, #0]
 80a1120:	bd10      	pop	{r4, pc}

080a1122 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a1122:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a1124:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a1126:	4605      	mov	r5, r0
 80a1128:	460c      	mov	r4, r1
    if (begun) {
 80a112a:	b11b      	cbz	r3, 80a1134 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a112c:	2100      	movs	r1, #0
 80a112e:	79c0      	ldrb	r0, [r0, #7]
 80a1130:	f002 f82e 	bl	80a3190 <pinMode>
    }
    pin = p;
    if (begun) {
 80a1134:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a1136:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a1138:	b153      	cbz	r3, 80a1150 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a113a:	b2a4      	uxth	r4, r4
 80a113c:	4620      	mov	r0, r4
 80a113e:	2101      	movs	r1, #1
 80a1140:	f002 f826 	bl	80a3190 <pinMode>
        digitalWrite(p, LOW);
 80a1144:	4620      	mov	r0, r4
    }
}
 80a1146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a114a:	2100      	movs	r1, #0
 80a114c:	f002 b831 	b.w	80a31b2 <digitalWrite>
 80a1150:	bd38      	pop	{r3, r4, r5, pc}

080a1152 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a1152:	b570      	push	{r4, r5, r6, lr}
 80a1154:	4604      	mov	r4, r0
 80a1156:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a1158:	2500      	movs	r5, #0
 80a115a:	7183      	strb	r3, [r0, #6]
 80a115c:	7005      	strb	r5, [r0, #0]
 80a115e:	7205      	strb	r5, [r0, #8]
 80a1160:	60c5      	str	r5, [r0, #12]
 80a1162:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a1164:	f7ff ffb4 	bl	80a10d0 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a1168:	4620      	mov	r0, r4
 80a116a:	4631      	mov	r1, r6
 80a116c:	f7ff ffd9 	bl	80a1122 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a1170:	4620      	mov	r0, r4
 80a1172:	bd70      	pop	{r4, r5, r6, pc}

080a1174 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a1174:	68c3      	ldr	r3, [r0, #12]
 80a1176:	2b00      	cmp	r3, #0
 80a1178:	f000 858e 	beq.w	80a1c98 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a117c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1180:	4604      	mov	r4, r0
 80a1182:	7983      	ldrb	r3, [r0, #6]
 80a1184:	b086      	sub	sp, #24
 80a1186:	3b02      	subs	r3, #2
 80a1188:	b2db      	uxtb	r3, r3
 80a118a:	2b04      	cmp	r3, #4
 80a118c:	bf96      	itet	ls
 80a118e:	4a29      	ldrls	r2, [pc, #164]	; (80a1234 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a1190:	2532      	movhi	r5, #50	; 0x32
 80a1192:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a1196:	f7ff ff8b 	bl	80a10b0 <micros>
 80a119a:	6923      	ldr	r3, [r4, #16]
 80a119c:	1ac0      	subs	r0, r0, r3
 80a119e:	42a8      	cmp	r0, r5
 80a11a0:	d3f9      	bcc.n	80a1196 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a11a2:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a11a4:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a11a6:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a11a8:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a11aa:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a11ae:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a11b2:	f000 8272 	beq.w	80a169a <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a11b6:	2907      	cmp	r1, #7
 80a11b8:	f000 826f 	beq.w	80a169a <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a11bc:	2906      	cmp	r1, #6
 80a11be:	f000 8432 	beq.w	80a1a26 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a11c2:	2905      	cmp	r1, #5
 80a11c4:	f000 83ab 	beq.w	80a191e <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a11c8:	2908      	cmp	r1, #8
 80a11ca:	f000 83a8 	beq.w	80a191e <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a11ce:	2900      	cmp	r1, #0
 80a11d0:	f040 8563 	bne.w	80a1c9a <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a11d4:	4a18      	ldr	r2, [pc, #96]	; (80a1238 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a11d6:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a11da:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a11de:	b29b      	uxth	r3, r3
 80a11e0:	2b00      	cmp	r3, #0
 80a11e2:	f000 8395 	beq.w	80a1910 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a11e6:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a11e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a11ec:	f10e 0503 	add.w	r5, lr, #3
 80a11f0:	3b03      	subs	r3, #3
 80a11f2:	b29b      	uxth	r3, r3
 80a11f4:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a11f8:	f89e 3000 	ldrb.w	r3, [lr]
 80a11fc:	b2db      	uxtb	r3, r3
 80a11fe:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a1202:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1206:	b2db      	uxtb	r3, r3
 80a1208:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a120c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1210:	b2db      	uxtb	r3, r3
 80a1212:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1216:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a121a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a121e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1222:	021b      	lsls	r3, r3, #8
 80a1224:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1228:	4303      	orrs	r3, r0
 80a122a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a122c:	f88d 1005 	strb.w	r1, [sp, #5]
 80a1230:	e11b      	b.n	80a146a <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a1232:	bf00      	nop
 80a1234:	080a3c04 	.word	0x080a3c04
 80a1238:	20000538 	.word	0x20000538
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a123c:	4600      	mov	r0, r0
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a1344:	79e3      	ldrb	r3, [r4, #7]
 80a1346:	6810      	ldr	r0, [r2, #0]
 80a1348:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a134c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1350:	88bf      	ldrh	r7, [r7, #4]
 80a1352:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1356:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1358:	4600      	mov	r0, r0
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1452:	9b04      	ldr	r3, [sp, #16]
 80a1454:	085b      	lsrs	r3, r3, #1
 80a1456:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1458:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a145c:	3301      	adds	r3, #1
 80a145e:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1460:	2b17      	cmp	r3, #23
 80a1462:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1466:	f200 82db 	bhi.w	80a1a20 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a146a:	79e3      	ldrb	r3, [r4, #7]
 80a146c:	6810      	ldr	r0, [r2, #0]
 80a146e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1472:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1476:	88bf      	ldrh	r7, [r7, #4]
 80a1478:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a147c:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a147e:	9803      	ldr	r0, [sp, #12]
 80a1480:	9b04      	ldr	r3, [sp, #16]
 80a1482:	4218      	tst	r0, r3
 80a1484:	f47f aeda 	bne.w	80a123c <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a1488:	4600      	mov	r0, r0
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a14da:	79e3      	ldrb	r3, [r4, #7]
 80a14dc:	6810      	ldr	r0, [r2, #0]
 80a14de:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a14e2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a14e6:	88bf      	ldrh	r7, [r7, #4]
 80a14e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a14ec:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a14ee:	4600      	mov	r0, r0
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	bf00      	nop
 80a1508:	bf00      	nop
 80a150a:	bf00      	nop
 80a150c:	bf00      	nop
 80a150e:	bf00      	nop
 80a1510:	bf00      	nop
 80a1512:	bf00      	nop
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	bf00      	nop
 80a155c:	bf00      	nop
 80a155e:	bf00      	nop
 80a1560:	bf00      	nop
 80a1562:	bf00      	nop
 80a1564:	bf00      	nop
 80a1566:	bf00      	nop
 80a1568:	bf00      	nop
 80a156a:	bf00      	nop
 80a156c:	bf00      	nop
 80a156e:	bf00      	nop
 80a1570:	bf00      	nop
 80a1572:	bf00      	nop
 80a1574:	bf00      	nop
 80a1576:	bf00      	nop
 80a1578:	bf00      	nop
 80a157a:	bf00      	nop
 80a157c:	bf00      	nop
 80a157e:	bf00      	nop
 80a1580:	bf00      	nop
 80a1582:	bf00      	nop
 80a1584:	bf00      	nop
 80a1586:	bf00      	nop
 80a1588:	bf00      	nop
 80a158a:	bf00      	nop
 80a158c:	bf00      	nop
 80a158e:	bf00      	nop
 80a1590:	bf00      	nop
 80a1592:	bf00      	nop
 80a1594:	bf00      	nop
 80a1596:	bf00      	nop
 80a1598:	bf00      	nop
 80a159a:	bf00      	nop
 80a159c:	bf00      	nop
 80a159e:	bf00      	nop
 80a15a0:	bf00      	nop
 80a15a2:	bf00      	nop
 80a15a4:	bf00      	nop
 80a15a6:	bf00      	nop
 80a15a8:	bf00      	nop
 80a15aa:	bf00      	nop
 80a15ac:	bf00      	nop
 80a15ae:	bf00      	nop
 80a15b0:	bf00      	nop
 80a15b2:	bf00      	nop
 80a15b4:	bf00      	nop
 80a15b6:	bf00      	nop
 80a15b8:	bf00      	nop
 80a15ba:	bf00      	nop
 80a15bc:	bf00      	nop
 80a15be:	bf00      	nop
 80a15c0:	bf00      	nop
 80a15c2:	bf00      	nop
 80a15c4:	bf00      	nop
 80a15c6:	bf00      	nop
 80a15c8:	bf00      	nop
 80a15ca:	bf00      	nop
 80a15cc:	bf00      	nop
 80a15ce:	bf00      	nop
 80a15d0:	bf00      	nop
 80a15d2:	bf00      	nop
 80a15d4:	bf00      	nop
 80a15d6:	bf00      	nop
 80a15d8:	bf00      	nop
 80a15da:	bf00      	nop
 80a15dc:	bf00      	nop
 80a15de:	bf00      	nop
 80a15e0:	bf00      	nop
 80a15e2:	bf00      	nop
 80a15e4:	bf00      	nop
 80a15e6:	bf00      	nop
 80a15e8:	bf00      	nop
 80a15ea:	bf00      	nop
 80a15ec:	bf00      	nop
 80a15ee:	bf00      	nop
 80a15f0:	bf00      	nop
 80a15f2:	bf00      	nop
 80a15f4:	bf00      	nop
 80a15f6:	bf00      	nop
 80a15f8:	bf00      	nop
 80a15fa:	bf00      	nop
 80a15fc:	bf00      	nop
 80a15fe:	bf00      	nop
 80a1600:	bf00      	nop
 80a1602:	bf00      	nop
 80a1604:	bf00      	nop
 80a1606:	bf00      	nop
 80a1608:	bf00      	nop
 80a160a:	bf00      	nop
 80a160c:	bf00      	nop
 80a160e:	bf00      	nop
 80a1610:	bf00      	nop
 80a1612:	bf00      	nop
 80a1614:	bf00      	nop
 80a1616:	bf00      	nop
 80a1618:	bf00      	nop
 80a161a:	bf00      	nop
 80a161c:	bf00      	nop
 80a161e:	bf00      	nop
 80a1620:	bf00      	nop
 80a1622:	bf00      	nop
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
 80a162c:	bf00      	nop
 80a162e:	bf00      	nop
 80a1630:	bf00      	nop
 80a1632:	bf00      	nop
 80a1634:	bf00      	nop
 80a1636:	bf00      	nop
 80a1638:	bf00      	nop
 80a163a:	bf00      	nop
 80a163c:	bf00      	nop
 80a163e:	bf00      	nop
 80a1640:	bf00      	nop
 80a1642:	bf00      	nop
 80a1644:	bf00      	nop
 80a1646:	bf00      	nop
 80a1648:	bf00      	nop
 80a164a:	bf00      	nop
 80a164c:	bf00      	nop
 80a164e:	bf00      	nop
 80a1650:	bf00      	nop
 80a1652:	bf00      	nop
 80a1654:	bf00      	nop
 80a1656:	bf00      	nop
 80a1658:	bf00      	nop
 80a165a:	bf00      	nop
 80a165c:	bf00      	nop
 80a165e:	bf00      	nop
 80a1660:	bf00      	nop
 80a1662:	bf00      	nop
 80a1664:	bf00      	nop
 80a1666:	bf00      	nop
 80a1668:	bf00      	nop
 80a166a:	bf00      	nop
 80a166c:	bf00      	nop
 80a166e:	bf00      	nop
 80a1670:	bf00      	nop
 80a1672:	bf00      	nop
 80a1674:	bf00      	nop
 80a1676:	bf00      	nop
 80a1678:	bf00      	nop
 80a167a:	bf00      	nop
 80a167c:	bf00      	nop
 80a167e:	bf00      	nop
 80a1680:	bf00      	nop
 80a1682:	bf00      	nop
 80a1684:	bf00      	nop
 80a1686:	bf00      	nop
 80a1688:	bf00      	nop
 80a168a:	bf00      	nop
 80a168c:	bf00      	nop
 80a168e:	bf00      	nop
 80a1690:	bf00      	nop
 80a1692:	bf00      	nop
 80a1694:	bf00      	nop
 80a1696:	bf00      	nop
 80a1698:	e6db      	b.n	80a1452 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a169a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a169e:	4a17      	ldr	r2, [pc, #92]	; (80a16fc <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a16a0:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a16a2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a16a6:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a16a8:	2b00      	cmp	r3, #0
 80a16aa:	f000 8131 	beq.w	80a1910 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a16ae:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a16b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a16b4:	f10e 0103 	add.w	r1, lr, #3
 80a16b8:	3b03      	subs	r3, #3
 80a16ba:	b29b      	uxth	r3, r3
 80a16bc:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a16c0:	f89e 3000 	ldrb.w	r3, [lr]
 80a16c4:	b2db      	uxtb	r3, r3
 80a16c6:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a16ca:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a16ce:	b2db      	uxtb	r3, r3
 80a16d0:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a16d4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a16d8:	b2db      	uxtb	r3, r3
 80a16da:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a16de:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a16e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a16e6:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a16ea:	0200      	lsls	r0, r0, #8
 80a16ec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a16f0:	433b      	orrs	r3, r7
 80a16f2:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a16f4:	f88d 6005 	strb.w	r6, [sp, #5]
 80a16f8:	e080      	b.n	80a17fc <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a16fa:	bf00      	nop
 80a16fc:	20000538 	.word	0x20000538
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1700:	4600      	mov	r0, r0
 80a1702:	bf00      	nop
 80a1704:	bf00      	nop
 80a1706:	bf00      	nop
 80a1708:	bf00      	nop
 80a170a:	bf00      	nop
 80a170c:	bf00      	nop
 80a170e:	bf00      	nop
 80a1710:	bf00      	nop
 80a1712:	bf00      	nop
 80a1714:	bf00      	nop
 80a1716:	bf00      	nop
 80a1718:	bf00      	nop
 80a171a:	bf00      	nop
 80a171c:	bf00      	nop
 80a171e:	bf00      	nop
 80a1720:	bf00      	nop
 80a1722:	bf00      	nop
 80a1724:	bf00      	nop
 80a1726:	bf00      	nop
 80a1728:	bf00      	nop
 80a172a:	bf00      	nop
 80a172c:	bf00      	nop
 80a172e:	bf00      	nop
 80a1730:	bf00      	nop
 80a1732:	bf00      	nop
 80a1734:	bf00      	nop
 80a1736:	bf00      	nop
 80a1738:	bf00      	nop
 80a173a:	bf00      	nop
 80a173c:	bf00      	nop
 80a173e:	bf00      	nop
 80a1740:	bf00      	nop
 80a1742:	bf00      	nop
 80a1744:	bf00      	nop
 80a1746:	bf00      	nop
 80a1748:	bf00      	nop
 80a174a:	bf00      	nop
 80a174c:	bf00      	nop
 80a174e:	bf00      	nop
 80a1750:	bf00      	nop
 80a1752:	bf00      	nop
 80a1754:	bf00      	nop
 80a1756:	bf00      	nop
 80a1758:	bf00      	nop
 80a175a:	bf00      	nop
 80a175c:	bf00      	nop
 80a175e:	bf00      	nop
 80a1760:	bf00      	nop
 80a1762:	bf00      	nop
 80a1764:	bf00      	nop
 80a1766:	bf00      	nop
 80a1768:	bf00      	nop
 80a176a:	bf00      	nop
 80a176c:	bf00      	nop
 80a176e:	bf00      	nop
 80a1770:	bf00      	nop
 80a1772:	bf00      	nop
 80a1774:	bf00      	nop
 80a1776:	bf00      	nop
 80a1778:	bf00      	nop
 80a177a:	bf00      	nop
 80a177c:	bf00      	nop
 80a177e:	bf00      	nop
 80a1780:	bf00      	nop
 80a1782:	bf00      	nop
 80a1784:	bf00      	nop
 80a1786:	bf00      	nop
 80a1788:	bf00      	nop
 80a178a:	bf00      	nop
 80a178c:	bf00      	nop
 80a178e:	bf00      	nop
 80a1790:	bf00      	nop
 80a1792:	bf00      	nop
 80a1794:	bf00      	nop
 80a1796:	bf00      	nop
 80a1798:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a179a:	79e3      	ldrb	r3, [r4, #7]
 80a179c:	6810      	ldr	r0, [r2, #0]
 80a179e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a17a2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a17a6:	88bf      	ldrh	r7, [r7, #4]
 80a17a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a17ac:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a17ae:	4600      	mov	r0, r0
 80a17b0:	bf00      	nop
 80a17b2:	bf00      	nop
 80a17b4:	bf00      	nop
 80a17b6:	bf00      	nop
 80a17b8:	bf00      	nop
 80a17ba:	bf00      	nop
 80a17bc:	bf00      	nop
 80a17be:	bf00      	nop
 80a17c0:	bf00      	nop
 80a17c2:	bf00      	nop
 80a17c4:	bf00      	nop
 80a17c6:	bf00      	nop
 80a17c8:	bf00      	nop
 80a17ca:	bf00      	nop
 80a17cc:	bf00      	nop
 80a17ce:	bf00      	nop
 80a17d0:	bf00      	nop
 80a17d2:	bf00      	nop
 80a17d4:	bf00      	nop
 80a17d6:	bf00      	nop
 80a17d8:	bf00      	nop
 80a17da:	bf00      	nop
 80a17dc:	bf00      	nop
 80a17de:	bf00      	nop
 80a17e0:	bf00      	nop
 80a17e2:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a17e4:	9b04      	ldr	r3, [sp, #16]
 80a17e6:	085b      	lsrs	r3, r3, #1
 80a17e8:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a17ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a17ee:	3301      	adds	r3, #1
 80a17f0:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a17f2:	2b17      	cmp	r3, #23
 80a17f4:	f88d 3005 	strb.w	r3, [sp, #5]
 80a17f8:	f200 8083 	bhi.w	80a1902 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a17fc:	79e3      	ldrb	r3, [r4, #7]
 80a17fe:	6810      	ldr	r0, [r2, #0]
 80a1800:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1804:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1808:	88bf      	ldrh	r7, [r7, #4]
 80a180a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a180e:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1810:	9803      	ldr	r0, [sp, #12]
 80a1812:	9b04      	ldr	r3, [sp, #16]
 80a1814:	4218      	tst	r0, r3
 80a1816:	f47f af73 	bne.w	80a1700 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a181a:	4600      	mov	r0, r0
 80a181c:	bf00      	nop
 80a181e:	bf00      	nop
 80a1820:	bf00      	nop
 80a1822:	bf00      	nop
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
 80a1838:	bf00      	nop
 80a183a:	bf00      	nop
 80a183c:	bf00      	nop
 80a183e:	bf00      	nop
 80a1840:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a1842:	79e3      	ldrb	r3, [r4, #7]
 80a1844:	6810      	ldr	r0, [r2, #0]
 80a1846:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a184a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a184e:	88bf      	ldrh	r7, [r7, #4]
 80a1850:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1854:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1856:	4600      	mov	r0, r0
 80a1858:	bf00      	nop
 80a185a:	bf00      	nop
 80a185c:	bf00      	nop
 80a185e:	bf00      	nop
 80a1860:	bf00      	nop
 80a1862:	bf00      	nop
 80a1864:	bf00      	nop
 80a1866:	bf00      	nop
 80a1868:	bf00      	nop
 80a186a:	bf00      	nop
 80a186c:	bf00      	nop
 80a186e:	bf00      	nop
 80a1870:	bf00      	nop
 80a1872:	bf00      	nop
 80a1874:	bf00      	nop
 80a1876:	bf00      	nop
 80a1878:	bf00      	nop
 80a187a:	bf00      	nop
 80a187c:	bf00      	nop
 80a187e:	bf00      	nop
 80a1880:	bf00      	nop
 80a1882:	bf00      	nop
 80a1884:	bf00      	nop
 80a1886:	bf00      	nop
 80a1888:	bf00      	nop
 80a188a:	bf00      	nop
 80a188c:	bf00      	nop
 80a188e:	bf00      	nop
 80a1890:	bf00      	nop
 80a1892:	bf00      	nop
 80a1894:	bf00      	nop
 80a1896:	bf00      	nop
 80a1898:	bf00      	nop
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
 80a18b6:	bf00      	nop
 80a18b8:	bf00      	nop
 80a18ba:	bf00      	nop
 80a18bc:	bf00      	nop
 80a18be:	bf00      	nop
 80a18c0:	bf00      	nop
 80a18c2:	bf00      	nop
 80a18c4:	bf00      	nop
 80a18c6:	bf00      	nop
 80a18c8:	bf00      	nop
 80a18ca:	bf00      	nop
 80a18cc:	bf00      	nop
 80a18ce:	bf00      	nop
 80a18d0:	bf00      	nop
 80a18d2:	bf00      	nop
 80a18d4:	bf00      	nop
 80a18d6:	bf00      	nop
 80a18d8:	bf00      	nop
 80a18da:	bf00      	nop
 80a18dc:	bf00      	nop
 80a18de:	bf00      	nop
 80a18e0:	bf00      	nop
 80a18e2:	bf00      	nop
 80a18e4:	bf00      	nop
 80a18e6:	bf00      	nop
 80a18e8:	bf00      	nop
 80a18ea:	bf00      	nop
 80a18ec:	bf00      	nop
 80a18ee:	bf00      	nop
 80a18f0:	bf00      	nop
 80a18f2:	bf00      	nop
 80a18f4:	bf00      	nop
 80a18f6:	bf00      	nop
 80a18f8:	bf00      	nop
 80a18fa:	bf00      	nop
 80a18fc:	bf00      	nop
 80a18fe:	bf00      	nop
 80a1900:	e770      	b.n	80a17e4 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1902:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1906:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1908:	b29b      	uxth	r3, r3
 80a190a:	2b00      	cmp	r3, #0
 80a190c:	f47f aecf 	bne.w	80a16ae <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a1910:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a1912:	f7ff fbcd 	bl	80a10b0 <micros>
 80a1916:	6120      	str	r0, [r4, #16]
}
 80a1918:	b006      	add	sp, #24
 80a191a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a191e:	4b5e      	ldr	r3, [pc, #376]	; (80a1a98 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a1920:	4a5e      	ldr	r2, [pc, #376]	; (80a1a9c <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1922:	4618      	mov	r0, r3
 80a1924:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1926:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a192a:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a192c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a1930:	b292      	uxth	r2, r2
 80a1932:	2a00      	cmp	r2, #0
 80a1934:	d0ec      	beq.n	80a1910 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1936:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a193a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a193e:	f10e 0503 	add.w	r5, lr, #3
 80a1942:	3a03      	subs	r2, #3
 80a1944:	b292      	uxth	r2, r2
 80a1946:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a194a:	f89e 2000 	ldrb.w	r2, [lr]
 80a194e:	b2d2      	uxtb	r2, r2
 80a1950:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a1954:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a1958:	b2d2      	uxtb	r2, r2
 80a195a:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a195e:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a1962:	b2d2      	uxtb	r2, r2
 80a1964:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1968:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a196c:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a1970:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a1974:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a1978:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a197c:	ea42 020c 	orr.w	r2, r2, ip
 80a1980:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1982:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a1986:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1988:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a198a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a198e:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1992:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1996:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a199a:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a199c:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a19a0:	9e03      	ldr	r6, [sp, #12]
 80a19a2:	9a04      	ldr	r2, [sp, #16]
 80a19a4:	4216      	tst	r6, r2
 80a19a6:	d023      	beq.n	80a19f0 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a19a8:	685a      	ldr	r2, [r3, #4]
 80a19aa:	9e05      	ldr	r6, [sp, #20]
 80a19ac:	1b92      	subs	r2, r2, r6
 80a19ae:	2a4f      	cmp	r2, #79	; 0x4f
 80a19b0:	d9fa      	bls.n	80a19a8 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a19b2:	79e2      	ldrb	r2, [r4, #7]
 80a19b4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a19b8:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a19bc:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a19c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a19c4:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a19c8:	6842      	ldr	r2, [r0, #4]
 80a19ca:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a19cc:	685a      	ldr	r2, [r3, #4]
 80a19ce:	9e05      	ldr	r6, [sp, #20]
 80a19d0:	1b92      	subs	r2, r2, r6
 80a19d2:	2a07      	cmp	r2, #7
 80a19d4:	d9fa      	bls.n	80a19cc <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a19d6:	9a04      	ldr	r2, [sp, #16]
 80a19d8:	0852      	lsrs	r2, r2, #1
 80a19da:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a19dc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a19e0:	3201      	adds	r2, #1
 80a19e2:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a19e4:	2a17      	cmp	r2, #23
 80a19e6:	f88d 2005 	strb.w	r2, [sp, #5]
 80a19ea:	d9cc      	bls.n	80a1986 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a19ec:	46ae      	mov	lr, r5
 80a19ee:	e79d      	b.n	80a192c <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a19f0:	685a      	ldr	r2, [r3, #4]
 80a19f2:	9e05      	ldr	r6, [sp, #20]
 80a19f4:	1b92      	subs	r2, r2, r6
 80a19f6:	2a18      	cmp	r2, #24
 80a19f8:	d9fa      	bls.n	80a19f0 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a19fa:	79e2      	ldrb	r2, [r4, #7]
 80a19fc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1a00:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1a04:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1a08:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1a0c:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1a10:	6842      	ldr	r2, [r0, #4]
 80a1a12:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a1a14:	685a      	ldr	r2, [r3, #4]
 80a1a16:	9e05      	ldr	r6, [sp, #20]
 80a1a18:	1b92      	subs	r2, r2, r6
 80a1a1a:	2a45      	cmp	r2, #69	; 0x45
 80a1a1c:	d9fa      	bls.n	80a1a14 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a1a1e:	e7da      	b.n	80a19d6 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a1a20:	46ae      	mov	lr, r5
 80a1a22:	f7ff bbda 	b.w	80a11da <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a1a26:	4a1d      	ldr	r2, [pc, #116]	; (80a1a9c <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a1a28:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a1a2c:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a1a2e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1a32:	b29b      	uxth	r3, r3
 80a1a34:	2b00      	cmp	r3, #0
 80a1a36:	f43f af6b 	beq.w	80a1910 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a1a3a:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a1a3c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1a40:	f10e 0104 	add.w	r1, lr, #4
 80a1a44:	3b04      	subs	r3, #4
 80a1a46:	b29b      	uxth	r3, r3
 80a1a48:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1a4c:	f89e 3000 	ldrb.w	r3, [lr]
 80a1a50:	b2db      	uxtb	r3, r3
 80a1a52:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a1a56:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1a5a:	b2db      	uxtb	r3, r3
 80a1a5c:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a1a60:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1a64:	b2db      	uxtb	r3, r3
 80a1a66:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a1a6a:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a1a6e:	b2db      	uxtb	r3, r3
 80a1a70:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a1a74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a1a78:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a1a7c:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a1a80:	043f      	lsls	r7, r7, #16
 80a1a82:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a1a86:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a1a8a:	4303      	orrs	r3, r0
 80a1a8c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a1a90:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a1a92:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1a96:	e07e      	b.n	80a1b96 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a1a98:	e0001000 	.word	0xe0001000
 80a1a9c:	20000538 	.word	0x20000538
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1aa0:	4600      	mov	r0, r0
 80a1aa2:	bf00      	nop
 80a1aa4:	bf00      	nop
 80a1aa6:	bf00      	nop
 80a1aa8:	bf00      	nop
 80a1aaa:	bf00      	nop
 80a1aac:	bf00      	nop
 80a1aae:	bf00      	nop
 80a1ab0:	bf00      	nop
 80a1ab2:	bf00      	nop
 80a1ab4:	bf00      	nop
 80a1ab6:	bf00      	nop
 80a1ab8:	bf00      	nop
 80a1aba:	bf00      	nop
 80a1abc:	bf00      	nop
 80a1abe:	bf00      	nop
 80a1ac0:	bf00      	nop
 80a1ac2:	bf00      	nop
 80a1ac4:	bf00      	nop
 80a1ac6:	bf00      	nop
 80a1ac8:	bf00      	nop
 80a1aca:	bf00      	nop
 80a1acc:	bf00      	nop
 80a1ace:	bf00      	nop
 80a1ad0:	bf00      	nop
 80a1ad2:	bf00      	nop
 80a1ad4:	bf00      	nop
 80a1ad6:	bf00      	nop
 80a1ad8:	bf00      	nop
 80a1ada:	bf00      	nop
 80a1adc:	bf00      	nop
 80a1ade:	bf00      	nop
 80a1ae0:	bf00      	nop
 80a1ae2:	bf00      	nop
 80a1ae4:	bf00      	nop
 80a1ae6:	bf00      	nop
 80a1ae8:	bf00      	nop
 80a1aea:	bf00      	nop
 80a1aec:	bf00      	nop
 80a1aee:	bf00      	nop
 80a1af0:	bf00      	nop
 80a1af2:	bf00      	nop
 80a1af4:	bf00      	nop
 80a1af6:	bf00      	nop
 80a1af8:	bf00      	nop
 80a1afa:	bf00      	nop
 80a1afc:	bf00      	nop
 80a1afe:	bf00      	nop
 80a1b00:	bf00      	nop
 80a1b02:	bf00      	nop
 80a1b04:	bf00      	nop
 80a1b06:	bf00      	nop
 80a1b08:	bf00      	nop
 80a1b0a:	bf00      	nop
 80a1b0c:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a1b0e:	79e3      	ldrb	r3, [r4, #7]
 80a1b10:	6810      	ldr	r0, [r2, #0]
 80a1b12:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1b16:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1b1a:	88bf      	ldrh	r7, [r7, #4]
 80a1b1c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1b20:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1b22:	4600      	mov	r0, r0
 80a1b24:	bf00      	nop
 80a1b26:	bf00      	nop
 80a1b28:	bf00      	nop
 80a1b2a:	bf00      	nop
 80a1b2c:	bf00      	nop
 80a1b2e:	bf00      	nop
 80a1b30:	bf00      	nop
 80a1b32:	bf00      	nop
 80a1b34:	bf00      	nop
 80a1b36:	bf00      	nop
 80a1b38:	bf00      	nop
 80a1b3a:	bf00      	nop
 80a1b3c:	bf00      	nop
 80a1b3e:	bf00      	nop
 80a1b40:	bf00      	nop
 80a1b42:	bf00      	nop
 80a1b44:	bf00      	nop
 80a1b46:	bf00      	nop
 80a1b48:	bf00      	nop
 80a1b4a:	bf00      	nop
 80a1b4c:	bf00      	nop
 80a1b4e:	bf00      	nop
 80a1b50:	bf00      	nop
 80a1b52:	bf00      	nop
 80a1b54:	bf00      	nop
 80a1b56:	bf00      	nop
 80a1b58:	bf00      	nop
 80a1b5a:	bf00      	nop
 80a1b5c:	bf00      	nop
 80a1b5e:	bf00      	nop
 80a1b60:	bf00      	nop
 80a1b62:	bf00      	nop
 80a1b64:	bf00      	nop
 80a1b66:	bf00      	nop
 80a1b68:	bf00      	nop
 80a1b6a:	bf00      	nop
 80a1b6c:	bf00      	nop
 80a1b6e:	bf00      	nop
 80a1b70:	bf00      	nop
 80a1b72:	bf00      	nop
 80a1b74:	bf00      	nop
 80a1b76:	bf00      	nop
 80a1b78:	bf00      	nop
 80a1b7a:	bf00      	nop
 80a1b7c:	bf00      	nop
 80a1b7e:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1b80:	9b04      	ldr	r3, [sp, #16]
 80a1b82:	085b      	lsrs	r3, r3, #1
 80a1b84:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a1b86:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1b8a:	3301      	adds	r3, #1
 80a1b8c:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a1b8e:	2b1f      	cmp	r3, #31
 80a1b90:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1b94:	d87e      	bhi.n	80a1c94 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a1b96:	79e3      	ldrb	r3, [r4, #7]
 80a1b98:	6810      	ldr	r0, [r2, #0]
 80a1b9a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1b9e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1ba2:	88bf      	ldrh	r7, [r7, #4]
 80a1ba4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1ba8:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1baa:	9803      	ldr	r0, [sp, #12]
 80a1bac:	9b04      	ldr	r3, [sp, #16]
 80a1bae:	4218      	tst	r0, r3
 80a1bb0:	f47f af76 	bne.w	80a1aa0 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1bb4:	4600      	mov	r0, r0
 80a1bb6:	bf00      	nop
 80a1bb8:	bf00      	nop
 80a1bba:	bf00      	nop
 80a1bbc:	bf00      	nop
 80a1bbe:	bf00      	nop
 80a1bc0:	bf00      	nop
 80a1bc2:	bf00      	nop
 80a1bc4:	bf00      	nop
 80a1bc6:	bf00      	nop
 80a1bc8:	bf00      	nop
 80a1bca:	bf00      	nop
 80a1bcc:	bf00      	nop
 80a1bce:	bf00      	nop
 80a1bd0:	bf00      	nop
 80a1bd2:	bf00      	nop
 80a1bd4:	bf00      	nop
 80a1bd6:	bf00      	nop
 80a1bd8:	bf00      	nop
 80a1bda:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a1bdc:	79e3      	ldrb	r3, [r4, #7]
 80a1bde:	6810      	ldr	r0, [r2, #0]
 80a1be0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1be4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1be8:	88bf      	ldrh	r7, [r7, #4]
 80a1bea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1bee:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1bf0:	4600      	mov	r0, r0
 80a1bf2:	bf00      	nop
 80a1bf4:	bf00      	nop
 80a1bf6:	bf00      	nop
 80a1bf8:	bf00      	nop
 80a1bfa:	bf00      	nop
 80a1bfc:	bf00      	nop
 80a1bfe:	bf00      	nop
 80a1c00:	bf00      	nop
 80a1c02:	bf00      	nop
 80a1c04:	bf00      	nop
 80a1c06:	bf00      	nop
 80a1c08:	bf00      	nop
 80a1c0a:	bf00      	nop
 80a1c0c:	bf00      	nop
 80a1c0e:	bf00      	nop
 80a1c10:	bf00      	nop
 80a1c12:	bf00      	nop
 80a1c14:	bf00      	nop
 80a1c16:	bf00      	nop
 80a1c18:	bf00      	nop
 80a1c1a:	bf00      	nop
 80a1c1c:	bf00      	nop
 80a1c1e:	bf00      	nop
 80a1c20:	bf00      	nop
 80a1c22:	bf00      	nop
 80a1c24:	bf00      	nop
 80a1c26:	bf00      	nop
 80a1c28:	bf00      	nop
 80a1c2a:	bf00      	nop
 80a1c2c:	bf00      	nop
 80a1c2e:	bf00      	nop
 80a1c30:	bf00      	nop
 80a1c32:	bf00      	nop
 80a1c34:	bf00      	nop
 80a1c36:	bf00      	nop
 80a1c38:	bf00      	nop
 80a1c3a:	bf00      	nop
 80a1c3c:	bf00      	nop
 80a1c3e:	bf00      	nop
 80a1c40:	bf00      	nop
 80a1c42:	bf00      	nop
 80a1c44:	bf00      	nop
 80a1c46:	bf00      	nop
 80a1c48:	bf00      	nop
 80a1c4a:	bf00      	nop
 80a1c4c:	bf00      	nop
 80a1c4e:	bf00      	nop
 80a1c50:	bf00      	nop
 80a1c52:	bf00      	nop
 80a1c54:	bf00      	nop
 80a1c56:	bf00      	nop
 80a1c58:	bf00      	nop
 80a1c5a:	bf00      	nop
 80a1c5c:	bf00      	nop
 80a1c5e:	bf00      	nop
 80a1c60:	bf00      	nop
 80a1c62:	bf00      	nop
 80a1c64:	bf00      	nop
 80a1c66:	bf00      	nop
 80a1c68:	bf00      	nop
 80a1c6a:	bf00      	nop
 80a1c6c:	bf00      	nop
 80a1c6e:	bf00      	nop
 80a1c70:	bf00      	nop
 80a1c72:	bf00      	nop
 80a1c74:	bf00      	nop
 80a1c76:	bf00      	nop
 80a1c78:	bf00      	nop
 80a1c7a:	bf00      	nop
 80a1c7c:	bf00      	nop
 80a1c7e:	bf00      	nop
 80a1c80:	bf00      	nop
 80a1c82:	bf00      	nop
 80a1c84:	bf00      	nop
 80a1c86:	bf00      	nop
 80a1c88:	bf00      	nop
 80a1c8a:	bf00      	nop
 80a1c8c:	bf00      	nop
 80a1c8e:	bf00      	nop
 80a1c90:	bf00      	nop
 80a1c92:	e775      	b.n	80a1b80 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a1c94:	468e      	mov	lr, r1
 80a1c96:	e6ca      	b.n	80a1a2e <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a1c98:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a1c9a:	2903      	cmp	r1, #3
 80a1c9c:	f000 812e 	beq.w	80a1efc <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1ca0:	4a1e      	ldr	r2, [pc, #120]	; (80a1d1c <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1ca2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1ca6:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1ca8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1cac:	b29b      	uxth	r3, r3
 80a1cae:	2b00      	cmp	r3, #0
 80a1cb0:	f43f ae2e 	beq.w	80a1910 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1cb4:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1cb6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1cba:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a1cbc:	3b03      	subs	r3, #3
 80a1cbe:	b29b      	uxth	r3, r3
 80a1cc0:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1cc4:	f89e 3000 	ldrb.w	r3, [lr]
 80a1cc8:	f10e 0103 	add.w	r1, lr, #3
 80a1ccc:	b2db      	uxtb	r3, r3
 80a1cce:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1cd2:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1cd6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1cda:	b2db      	uxtb	r3, r3
 80a1cdc:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a1ce0:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1ce4:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a1ce8:	b2db      	uxtb	r3, r3
 80a1cea:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1cee:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1cf2:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1cf6:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1cfa:	021b      	lsls	r3, r3, #8
 80a1cfc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1d00:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1d04:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a1d08:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1d0c:	433b      	orrs	r3, r7
 80a1d0e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1d10:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a1d14:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a1d18:	e07d      	b.n	80a1e16 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a1d1a:	bf00      	nop
 80a1d1c:	20000538 	.word	0x20000538
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a1d20:	9b04      	ldr	r3, [sp, #16]
 80a1d22:	085b      	lsrs	r3, r3, #1
 80a1d24:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1d26:	4600      	mov	r0, r0
 80a1d28:	bf00      	nop
 80a1d2a:	bf00      	nop
 80a1d2c:	bf00      	nop
 80a1d2e:	bf00      	nop
 80a1d30:	bf00      	nop
 80a1d32:	bf00      	nop
 80a1d34:	bf00      	nop
 80a1d36:	bf00      	nop
 80a1d38:	bf00      	nop
 80a1d3a:	bf00      	nop
 80a1d3c:	bf00      	nop
 80a1d3e:	bf00      	nop
 80a1d40:	bf00      	nop
 80a1d42:	bf00      	nop
 80a1d44:	bf00      	nop
 80a1d46:	bf00      	nop
 80a1d48:	bf00      	nop
 80a1d4a:	bf00      	nop
 80a1d4c:	bf00      	nop
 80a1d4e:	bf00      	nop
 80a1d50:	bf00      	nop
 80a1d52:	bf00      	nop
 80a1d54:	bf00      	nop
 80a1d56:	bf00      	nop
 80a1d58:	bf00      	nop
 80a1d5a:	bf00      	nop
 80a1d5c:	bf00      	nop
 80a1d5e:	bf00      	nop
 80a1d60:	bf00      	nop
 80a1d62:	bf00      	nop
 80a1d64:	bf00      	nop
 80a1d66:	bf00      	nop
 80a1d68:	bf00      	nop
 80a1d6a:	bf00      	nop
 80a1d6c:	bf00      	nop
 80a1d6e:	bf00      	nop
 80a1d70:	bf00      	nop
 80a1d72:	bf00      	nop
 80a1d74:	bf00      	nop
 80a1d76:	bf00      	nop
 80a1d78:	bf00      	nop
 80a1d7a:	bf00      	nop
 80a1d7c:	bf00      	nop
 80a1d7e:	bf00      	nop
 80a1d80:	bf00      	nop
 80a1d82:	bf00      	nop
 80a1d84:	bf00      	nop
 80a1d86:	bf00      	nop
 80a1d88:	bf00      	nop
 80a1d8a:	bf00      	nop
 80a1d8c:	bf00      	nop
 80a1d8e:	bf00      	nop
 80a1d90:	bf00      	nop
 80a1d92:	bf00      	nop
 80a1d94:	bf00      	nop
 80a1d96:	bf00      	nop
 80a1d98:	bf00      	nop
 80a1d9a:	bf00      	nop
 80a1d9c:	bf00      	nop
 80a1d9e:	bf00      	nop
 80a1da0:	bf00      	nop
 80a1da2:	bf00      	nop
 80a1da4:	bf00      	nop
 80a1da6:	bf00      	nop
 80a1da8:	bf00      	nop
 80a1daa:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1dac:	79e0      	ldrb	r0, [r4, #7]
 80a1dae:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1db0:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1db4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1db8:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a1dbc:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1dc0:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1dc4:	3301      	adds	r3, #1
 80a1dc6:	b2db      	uxtb	r3, r3
 80a1dc8:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1dcc:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1dd0:	4600      	mov	r0, r0
 80a1dd2:	bf00      	nop
 80a1dd4:	bf00      	nop
 80a1dd6:	bf00      	nop
 80a1dd8:	bf00      	nop
 80a1dda:	bf00      	nop
 80a1ddc:	bf00      	nop
 80a1dde:	bf00      	nop
 80a1de0:	bf00      	nop
 80a1de2:	bf00      	nop
 80a1de4:	bf00      	nop
 80a1de6:	bf00      	nop
 80a1de8:	bf00      	nop
 80a1dea:	bf00      	nop
 80a1dec:	bf00      	nop
 80a1dee:	bf00      	nop
 80a1df0:	bf00      	nop
 80a1df2:	bf00      	nop
 80a1df4:	bf00      	nop
 80a1df6:	bf00      	nop
 80a1df8:	bf00      	nop
          if(j==24) break;
 80a1dfa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1dfe:	2b18      	cmp	r3, #24
 80a1e00:	d07a      	beq.n	80a1ef8 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a1e02:	79e3      	ldrb	r3, [r4, #7]
 80a1e04:	6810      	ldr	r0, [r2, #0]
 80a1e06:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1e0a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1e0e:	88bf      	ldrh	r7, [r7, #4]
 80a1e10:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1e14:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a1e16:	9803      	ldr	r0, [sp, #12]
 80a1e18:	9b04      	ldr	r3, [sp, #16]
 80a1e1a:	4218      	tst	r0, r3
 80a1e1c:	d180      	bne.n	80a1d20 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a1e1e:	4600      	mov	r0, r0
 80a1e20:	bf00      	nop
 80a1e22:	bf00      	nop
 80a1e24:	bf00      	nop
 80a1e26:	bf00      	nop
 80a1e28:	bf00      	nop
 80a1e2a:	bf00      	nop
 80a1e2c:	bf00      	nop
 80a1e2e:	bf00      	nop
 80a1e30:	bf00      	nop
 80a1e32:	bf00      	nop
 80a1e34:	bf00      	nop
 80a1e36:	bf00      	nop
 80a1e38:	bf00      	nop
 80a1e3a:	bf00      	nop
 80a1e3c:	bf00      	nop
 80a1e3e:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a1e40:	79e3      	ldrb	r3, [r4, #7]
 80a1e42:	6810      	ldr	r0, [r2, #0]
 80a1e44:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1e48:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1e4c:	88bf      	ldrh	r7, [r7, #4]
 80a1e4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1e52:	831f      	strh	r7, [r3, #24]
          j++;
 80a1e54:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1e58:	3301      	adds	r3, #1
 80a1e5a:	b2db      	uxtb	r3, r3
 80a1e5c:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a1e60:	9b04      	ldr	r3, [sp, #16]
 80a1e62:	085b      	lsrs	r3, r3, #1
 80a1e64:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1e66:	4600      	mov	r0, r0
 80a1e68:	bf00      	nop
 80a1e6a:	bf00      	nop
 80a1e6c:	bf00      	nop
 80a1e6e:	bf00      	nop
 80a1e70:	bf00      	nop
 80a1e72:	bf00      	nop
 80a1e74:	bf00      	nop
 80a1e76:	bf00      	nop
 80a1e78:	bf00      	nop
 80a1e7a:	bf00      	nop
 80a1e7c:	bf00      	nop
 80a1e7e:	bf00      	nop
 80a1e80:	bf00      	nop
 80a1e82:	bf00      	nop
 80a1e84:	bf00      	nop
 80a1e86:	bf00      	nop
 80a1e88:	bf00      	nop
 80a1e8a:	bf00      	nop
 80a1e8c:	bf00      	nop
 80a1e8e:	bf00      	nop
 80a1e90:	bf00      	nop
 80a1e92:	bf00      	nop
 80a1e94:	bf00      	nop
 80a1e96:	bf00      	nop
 80a1e98:	bf00      	nop
 80a1e9a:	bf00      	nop
 80a1e9c:	bf00      	nop
 80a1e9e:	bf00      	nop
 80a1ea0:	bf00      	nop
 80a1ea2:	bf00      	nop
 80a1ea4:	bf00      	nop
 80a1ea6:	bf00      	nop
 80a1ea8:	bf00      	nop
 80a1eaa:	bf00      	nop
 80a1eac:	bf00      	nop
 80a1eae:	bf00      	nop
 80a1eb0:	bf00      	nop
 80a1eb2:	bf00      	nop
 80a1eb4:	bf00      	nop
 80a1eb6:	bf00      	nop
 80a1eb8:	bf00      	nop
 80a1eba:	bf00      	nop
 80a1ebc:	bf00      	nop
 80a1ebe:	bf00      	nop
 80a1ec0:	bf00      	nop
 80a1ec2:	bf00      	nop
 80a1ec4:	bf00      	nop
 80a1ec6:	bf00      	nop
 80a1ec8:	bf00      	nop
 80a1eca:	bf00      	nop
 80a1ecc:	bf00      	nop
 80a1ece:	bf00      	nop
 80a1ed0:	bf00      	nop
 80a1ed2:	bf00      	nop
 80a1ed4:	bf00      	nop
 80a1ed6:	bf00      	nop
 80a1ed8:	bf00      	nop
 80a1eda:	bf00      	nop
 80a1edc:	bf00      	nop
 80a1ede:	bf00      	nop
 80a1ee0:	bf00      	nop
 80a1ee2:	bf00      	nop
 80a1ee4:	bf00      	nop
 80a1ee6:	bf00      	nop
 80a1ee8:	bf00      	nop
 80a1eea:	bf00      	nop
 80a1eec:	bf00      	nop
 80a1eee:	bf00      	nop
          if(j==24) break;
 80a1ef0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1ef4:	2b18      	cmp	r3, #24
 80a1ef6:	d184      	bne.n	80a1e02 <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1ef8:	468e      	mov	lr, r1
 80a1efa:	e6d5      	b.n	80a1ca8 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a1efc:	4a17      	ldr	r2, [pc, #92]	; (80a1f5c <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1efe:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1f02:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1f04:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1f08:	b29b      	uxth	r3, r3
 80a1f0a:	2b00      	cmp	r3, #0
 80a1f0c:	f43f ad00 	beq.w	80a1910 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1f10:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1f12:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1f16:	f10e 0103 	add.w	r1, lr, #3
 80a1f1a:	3b03      	subs	r3, #3
 80a1f1c:	b29b      	uxth	r3, r3
 80a1f1e:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1f22:	f89e 3000 	ldrb.w	r3, [lr]
 80a1f26:	b2db      	uxtb	r3, r3
 80a1f28:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a1f2c:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1f30:	b2db      	uxtb	r3, r3
 80a1f32:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a1f36:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1f3a:	b2db      	uxtb	r3, r3
 80a1f3c:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1f40:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1f44:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1f48:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1f4c:	021b      	lsls	r3, r3, #8
 80a1f4e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1f52:	4303      	orrs	r3, r0
 80a1f54:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1f56:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1f5a:	e0e0      	b.n	80a211e <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a1f5c:	20000538 	.word	0x20000538
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1f60:	4600      	mov	r0, r0
 80a1f62:	bf00      	nop
 80a1f64:	bf00      	nop
 80a1f66:	bf00      	nop
 80a1f68:	bf00      	nop
 80a1f6a:	bf00      	nop
 80a1f6c:	bf00      	nop
 80a1f6e:	bf00      	nop
 80a1f70:	bf00      	nop
 80a1f72:	bf00      	nop
 80a1f74:	bf00      	nop
 80a1f76:	bf00      	nop
 80a1f78:	bf00      	nop
 80a1f7a:	bf00      	nop
 80a1f7c:	bf00      	nop
 80a1f7e:	bf00      	nop
 80a1f80:	bf00      	nop
 80a1f82:	bf00      	nop
 80a1f84:	bf00      	nop
 80a1f86:	bf00      	nop
 80a1f88:	bf00      	nop
 80a1f8a:	bf00      	nop
 80a1f8c:	bf00      	nop
 80a1f8e:	bf00      	nop
 80a1f90:	bf00      	nop
 80a1f92:	bf00      	nop
 80a1f94:	bf00      	nop
 80a1f96:	bf00      	nop
 80a1f98:	bf00      	nop
 80a1f9a:	bf00      	nop
 80a1f9c:	bf00      	nop
 80a1f9e:	bf00      	nop
 80a1fa0:	bf00      	nop
 80a1fa2:	bf00      	nop
 80a1fa4:	bf00      	nop
 80a1fa6:	bf00      	nop
 80a1fa8:	bf00      	nop
 80a1faa:	bf00      	nop
 80a1fac:	bf00      	nop
 80a1fae:	bf00      	nop
 80a1fb0:	bf00      	nop
 80a1fb2:	bf00      	nop
 80a1fb4:	bf00      	nop
 80a1fb6:	bf00      	nop
 80a1fb8:	bf00      	nop
 80a1fba:	bf00      	nop
 80a1fbc:	bf00      	nop
 80a1fbe:	bf00      	nop
 80a1fc0:	bf00      	nop
 80a1fc2:	bf00      	nop
 80a1fc4:	bf00      	nop
 80a1fc6:	bf00      	nop
 80a1fc8:	bf00      	nop
 80a1fca:	bf00      	nop
 80a1fcc:	bf00      	nop
 80a1fce:	bf00      	nop
 80a1fd0:	bf00      	nop
 80a1fd2:	bf00      	nop
 80a1fd4:	bf00      	nop
 80a1fd6:	bf00      	nop
 80a1fd8:	bf00      	nop
 80a1fda:	bf00      	nop
 80a1fdc:	bf00      	nop
 80a1fde:	bf00      	nop
 80a1fe0:	bf00      	nop
 80a1fe2:	bf00      	nop
 80a1fe4:	bf00      	nop
 80a1fe6:	bf00      	nop
 80a1fe8:	bf00      	nop
 80a1fea:	bf00      	nop
 80a1fec:	bf00      	nop
 80a1fee:	bf00      	nop
 80a1ff0:	bf00      	nop
 80a1ff2:	bf00      	nop
 80a1ff4:	bf00      	nop
 80a1ff6:	bf00      	nop
 80a1ff8:	bf00      	nop
 80a1ffa:	bf00      	nop
 80a1ffc:	bf00      	nop
 80a1ffe:	bf00      	nop
 80a2000:	bf00      	nop
 80a2002:	bf00      	nop
 80a2004:	bf00      	nop
 80a2006:	bf00      	nop
 80a2008:	bf00      	nop
 80a200a:	bf00      	nop
 80a200c:	bf00      	nop
 80a200e:	bf00      	nop
 80a2010:	bf00      	nop
 80a2012:	bf00      	nop
 80a2014:	bf00      	nop
 80a2016:	bf00      	nop
 80a2018:	bf00      	nop
 80a201a:	bf00      	nop
 80a201c:	bf00      	nop
 80a201e:	bf00      	nop
 80a2020:	bf00      	nop
 80a2022:	bf00      	nop
 80a2024:	bf00      	nop
 80a2026:	bf00      	nop
 80a2028:	bf00      	nop
 80a202a:	bf00      	nop
 80a202c:	bf00      	nop
 80a202e:	bf00      	nop
 80a2030:	bf00      	nop
 80a2032:	bf00      	nop
 80a2034:	bf00      	nop
 80a2036:	bf00      	nop
 80a2038:	bf00      	nop
 80a203a:	bf00      	nop
 80a203c:	bf00      	nop
 80a203e:	bf00      	nop
 80a2040:	bf00      	nop
 80a2042:	bf00      	nop
 80a2044:	bf00      	nop
 80a2046:	bf00      	nop
 80a2048:	bf00      	nop
 80a204a:	bf00      	nop
 80a204c:	bf00      	nop
 80a204e:	bf00      	nop
 80a2050:	bf00      	nop
 80a2052:	bf00      	nop
 80a2054:	bf00      	nop
 80a2056:	bf00      	nop
 80a2058:	bf00      	nop
 80a205a:	bf00      	nop
 80a205c:	bf00      	nop
 80a205e:	bf00      	nop
 80a2060:	bf00      	nop
 80a2062:	bf00      	nop
 80a2064:	bf00      	nop
 80a2066:	bf00      	nop
 80a2068:	bf00      	nop
 80a206a:	bf00      	nop
 80a206c:	bf00      	nop
 80a206e:	bf00      	nop
 80a2070:	bf00      	nop
 80a2072:	bf00      	nop
 80a2074:	bf00      	nop
 80a2076:	bf00      	nop
 80a2078:	bf00      	nop
 80a207a:	bf00      	nop
 80a207c:	bf00      	nop
 80a207e:	bf00      	nop
 80a2080:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a2082:	79e3      	ldrb	r3, [r4, #7]
 80a2084:	6810      	ldr	r0, [r2, #0]
 80a2086:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a208a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a208e:	88bf      	ldrh	r7, [r7, #4]
 80a2090:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2094:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2096:	4600      	mov	r0, r0
 80a2098:	bf00      	nop
 80a209a:	bf00      	nop
 80a209c:	bf00      	nop
 80a209e:	bf00      	nop
 80a20a0:	bf00      	nop
 80a20a2:	bf00      	nop
 80a20a4:	bf00      	nop
 80a20a6:	bf00      	nop
 80a20a8:	bf00      	nop
 80a20aa:	bf00      	nop
 80a20ac:	bf00      	nop
 80a20ae:	bf00      	nop
 80a20b0:	bf00      	nop
 80a20b2:	bf00      	nop
 80a20b4:	bf00      	nop
 80a20b6:	bf00      	nop
 80a20b8:	bf00      	nop
 80a20ba:	bf00      	nop
 80a20bc:	bf00      	nop
 80a20be:	bf00      	nop
 80a20c0:	bf00      	nop
 80a20c2:	bf00      	nop
 80a20c4:	bf00      	nop
 80a20c6:	bf00      	nop
 80a20c8:	bf00      	nop
 80a20ca:	bf00      	nop
 80a20cc:	bf00      	nop
 80a20ce:	bf00      	nop
 80a20d0:	bf00      	nop
 80a20d2:	bf00      	nop
 80a20d4:	bf00      	nop
 80a20d6:	bf00      	nop
 80a20d8:	bf00      	nop
 80a20da:	bf00      	nop
 80a20dc:	bf00      	nop
 80a20de:	bf00      	nop
 80a20e0:	bf00      	nop
 80a20e2:	bf00      	nop
 80a20e4:	bf00      	nop
 80a20e6:	bf00      	nop
 80a20e8:	bf00      	nop
 80a20ea:	bf00      	nop
 80a20ec:	bf00      	nop
 80a20ee:	bf00      	nop
 80a20f0:	bf00      	nop
 80a20f2:	bf00      	nop
 80a20f4:	bf00      	nop
 80a20f6:	bf00      	nop
 80a20f8:	bf00      	nop
 80a20fa:	bf00      	nop
 80a20fc:	bf00      	nop
 80a20fe:	bf00      	nop
 80a2100:	bf00      	nop
 80a2102:	bf00      	nop
 80a2104:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a2106:	9b04      	ldr	r3, [sp, #16]
 80a2108:	085b      	lsrs	r3, r3, #1
 80a210a:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a210c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a2110:	3301      	adds	r3, #1
 80a2112:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a2114:	2b17      	cmp	r3, #23
 80a2116:	f88d 3005 	strb.w	r3, [sp, #5]
 80a211a:	f200 80e3 	bhi.w	80a22e4 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a211e:	79e3      	ldrb	r3, [r4, #7]
 80a2120:	6810      	ldr	r0, [r2, #0]
 80a2122:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2126:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a212a:	88bf      	ldrh	r7, [r7, #4]
 80a212c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2130:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a2132:	9803      	ldr	r0, [sp, #12]
 80a2134:	9b04      	ldr	r3, [sp, #16]
 80a2136:	4218      	tst	r0, r3
 80a2138:	f47f af12 	bne.w	80a1f60 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a213c:	4600      	mov	r0, r0
 80a213e:	bf00      	nop
 80a2140:	bf00      	nop
 80a2142:	bf00      	nop
 80a2144:	bf00      	nop
 80a2146:	bf00      	nop
 80a2148:	bf00      	nop
 80a214a:	bf00      	nop
 80a214c:	bf00      	nop
 80a214e:	bf00      	nop
 80a2150:	bf00      	nop
 80a2152:	bf00      	nop
 80a2154:	bf00      	nop
 80a2156:	bf00      	nop
 80a2158:	bf00      	nop
 80a215a:	bf00      	nop
 80a215c:	bf00      	nop
 80a215e:	bf00      	nop
 80a2160:	bf00      	nop
 80a2162:	bf00      	nop
 80a2164:	bf00      	nop
 80a2166:	bf00      	nop
 80a2168:	bf00      	nop
 80a216a:	bf00      	nop
 80a216c:	bf00      	nop
 80a216e:	bf00      	nop
 80a2170:	bf00      	nop
 80a2172:	bf00      	nop
 80a2174:	bf00      	nop
 80a2176:	bf00      	nop
 80a2178:	bf00      	nop
 80a217a:	bf00      	nop
 80a217c:	bf00      	nop
 80a217e:	bf00      	nop
 80a2180:	bf00      	nop
 80a2182:	bf00      	nop
 80a2184:	bf00      	nop
 80a2186:	bf00      	nop
 80a2188:	bf00      	nop
 80a218a:	bf00      	nop
 80a218c:	bf00      	nop
 80a218e:	bf00      	nop
 80a2190:	bf00      	nop
 80a2192:	bf00      	nop
 80a2194:	bf00      	nop
 80a2196:	bf00      	nop
 80a2198:	bf00      	nop
 80a219a:	bf00      	nop
 80a219c:	bf00      	nop
 80a219e:	bf00      	nop
 80a21a0:	bf00      	nop
 80a21a2:	bf00      	nop
 80a21a4:	bf00      	nop
 80a21a6:	bf00      	nop
 80a21a8:	bf00      	nop
 80a21aa:	bf00      	nop
 80a21ac:	bf00      	nop
 80a21ae:	bf00      	nop
 80a21b0:	bf00      	nop
 80a21b2:	bf00      	nop
 80a21b4:	bf00      	nop
 80a21b6:	bf00      	nop
 80a21b8:	bf00      	nop
 80a21ba:	bf00      	nop
 80a21bc:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a21be:	79e3      	ldrb	r3, [r4, #7]
 80a21c0:	6810      	ldr	r0, [r2, #0]
 80a21c2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a21c6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a21ca:	88bf      	ldrh	r7, [r7, #4]
 80a21cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a21d0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a21d2:	4600      	mov	r0, r0
 80a21d4:	bf00      	nop
 80a21d6:	bf00      	nop
 80a21d8:	bf00      	nop
 80a21da:	bf00      	nop
 80a21dc:	bf00      	nop
 80a21de:	bf00      	nop
 80a21e0:	bf00      	nop
 80a21e2:	bf00      	nop
 80a21e4:	bf00      	nop
 80a21e6:	bf00      	nop
 80a21e8:	bf00      	nop
 80a21ea:	bf00      	nop
 80a21ec:	bf00      	nop
 80a21ee:	bf00      	nop
 80a21f0:	bf00      	nop
 80a21f2:	bf00      	nop
 80a21f4:	bf00      	nop
 80a21f6:	bf00      	nop
 80a21f8:	bf00      	nop
 80a21fa:	bf00      	nop
 80a21fc:	bf00      	nop
 80a21fe:	bf00      	nop
 80a2200:	bf00      	nop
 80a2202:	bf00      	nop
 80a2204:	bf00      	nop
 80a2206:	bf00      	nop
 80a2208:	bf00      	nop
 80a220a:	bf00      	nop
 80a220c:	bf00      	nop
 80a220e:	bf00      	nop
 80a2210:	bf00      	nop
 80a2212:	bf00      	nop
 80a2214:	bf00      	nop
 80a2216:	bf00      	nop
 80a2218:	bf00      	nop
 80a221a:	bf00      	nop
 80a221c:	bf00      	nop
 80a221e:	bf00      	nop
 80a2220:	bf00      	nop
 80a2222:	bf00      	nop
 80a2224:	bf00      	nop
 80a2226:	bf00      	nop
 80a2228:	bf00      	nop
 80a222a:	bf00      	nop
 80a222c:	bf00      	nop
 80a222e:	bf00      	nop
 80a2230:	bf00      	nop
 80a2232:	bf00      	nop
 80a2234:	bf00      	nop
 80a2236:	bf00      	nop
 80a2238:	bf00      	nop
 80a223a:	bf00      	nop
 80a223c:	bf00      	nop
 80a223e:	bf00      	nop
 80a2240:	bf00      	nop
 80a2242:	bf00      	nop
 80a2244:	bf00      	nop
 80a2246:	bf00      	nop
 80a2248:	bf00      	nop
 80a224a:	bf00      	nop
 80a224c:	bf00      	nop
 80a224e:	bf00      	nop
 80a2250:	bf00      	nop
 80a2252:	bf00      	nop
 80a2254:	bf00      	nop
 80a2256:	bf00      	nop
 80a2258:	bf00      	nop
 80a225a:	bf00      	nop
 80a225c:	bf00      	nop
 80a225e:	bf00      	nop
 80a2260:	bf00      	nop
 80a2262:	bf00      	nop
 80a2264:	bf00      	nop
 80a2266:	bf00      	nop
 80a2268:	bf00      	nop
 80a226a:	bf00      	nop
 80a226c:	bf00      	nop
 80a226e:	bf00      	nop
 80a2270:	bf00      	nop
 80a2272:	bf00      	nop
 80a2274:	bf00      	nop
 80a2276:	bf00      	nop
 80a2278:	bf00      	nop
 80a227a:	bf00      	nop
 80a227c:	bf00      	nop
 80a227e:	bf00      	nop
 80a2280:	bf00      	nop
 80a2282:	bf00      	nop
 80a2284:	bf00      	nop
 80a2286:	bf00      	nop
 80a2288:	bf00      	nop
 80a228a:	bf00      	nop
 80a228c:	bf00      	nop
 80a228e:	bf00      	nop
 80a2290:	bf00      	nop
 80a2292:	bf00      	nop
 80a2294:	bf00      	nop
 80a2296:	bf00      	nop
 80a2298:	bf00      	nop
 80a229a:	bf00      	nop
 80a229c:	bf00      	nop
 80a229e:	bf00      	nop
 80a22a0:	bf00      	nop
 80a22a2:	bf00      	nop
 80a22a4:	bf00      	nop
 80a22a6:	bf00      	nop
 80a22a8:	bf00      	nop
 80a22aa:	bf00      	nop
 80a22ac:	bf00      	nop
 80a22ae:	bf00      	nop
 80a22b0:	bf00      	nop
 80a22b2:	bf00      	nop
 80a22b4:	bf00      	nop
 80a22b6:	bf00      	nop
 80a22b8:	bf00      	nop
 80a22ba:	bf00      	nop
 80a22bc:	bf00      	nop
 80a22be:	bf00      	nop
 80a22c0:	bf00      	nop
 80a22c2:	bf00      	nop
 80a22c4:	bf00      	nop
 80a22c6:	bf00      	nop
 80a22c8:	bf00      	nop
 80a22ca:	bf00      	nop
 80a22cc:	bf00      	nop
 80a22ce:	bf00      	nop
 80a22d0:	bf00      	nop
 80a22d2:	bf00      	nop
 80a22d4:	bf00      	nop
 80a22d6:	bf00      	nop
 80a22d8:	bf00      	nop
 80a22da:	bf00      	nop
 80a22dc:	bf00      	nop
 80a22de:	bf00      	nop
 80a22e0:	bf00      	nop
 80a22e2:	e710      	b.n	80a2106 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a22e4:	468e      	mov	lr, r1
 80a22e6:	e60d      	b.n	80a1f04 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a22e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a22e8:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a22ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a22ec:	428b      	cmp	r3, r1
 80a22ee:	d945      	bls.n	80a237c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a22f0:	7a05      	ldrb	r5, [r0, #8]
 80a22f2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a22f6:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a22fa:	b2d6      	uxtb	r6, r2
 80a22fc:	b145      	cbz	r5, 80a2310 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a22fe:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a2300:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a2302:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a2304:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a2308:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a230c:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a2310:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a2314:	68c7      	ldr	r7, [r0, #12]
 80a2316:	f1bc 0f06 	cmp.w	ip, #6
 80a231a:	bf0c      	ite	eq
 80a231c:	2504      	moveq	r5, #4
 80a231e:	2503      	movne	r5, #3
 80a2320:	4369      	muls	r1, r5
 80a2322:	f1bc 0f08 	cmp.w	ip, #8
 80a2326:	eb07 0501 	add.w	r5, r7, r1
 80a232a:	d824      	bhi.n	80a2376 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a232c:	f04f 0e01 	mov.w	lr, #1
 80a2330:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a2334:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a2338:	d10c      	bne.n	80a2354 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a233a:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a233e:	d10d      	bne.n	80a235c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a2340:	f01e 0f10 	tst.w	lr, #16
 80a2344:	d017      	beq.n	80a2376 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a2346:	2bff      	cmp	r3, #255	; 0xff
 80a2348:	bf08      	it	eq
 80a234a:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a234c:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a234e:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a2350:	70ac      	strb	r4, [r5, #2]
        } break;
 80a2352:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a2354:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a2356:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a2358:	70ae      	strb	r6, [r5, #2]
        } break;
 80a235a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a235c:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a235e:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a2360:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a2362:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a2364:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a2366:	b90b      	cbnz	r3, 80a236c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a2368:	b2d2      	uxtb	r2, r2
 80a236a:	e002      	b.n	80a2372 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a236c:	435a      	muls	r2, r3
 80a236e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a2372:	70ea      	strb	r2, [r5, #3]
        } break;
 80a2374:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a2376:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a2378:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a237a:	70ae      	strb	r6, [r5, #2]
 80a237c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a237e <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a237e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a2382:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a2386:	4770      	bx	lr

080a2388 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a2388:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a238a:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a238c:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a238e:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a2390:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a2392:	d01e      	beq.n	80a23d2 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a2394:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a2396:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a239a:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a239c:	d00c      	beq.n	80a23b8 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a239e:	29ff      	cmp	r1, #255	; 0xff
 80a23a0:	bf0f      	iteee	eq
 80a23a2:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a23a6:	0211      	lslne	r1, r2, #8
 80a23a8:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80a23ac:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a23b0:	bf0c      	ite	eq
 80a23b2:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a23b6:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a23b8:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a23ba:	1b29      	subs	r1, r5, r4
 80a23bc:	8886      	ldrh	r6, [r0, #4]
 80a23be:	b289      	uxth	r1, r1
 80a23c0:	428e      	cmp	r6, r1
 80a23c2:	d905      	bls.n	80a23d0 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a23c4:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a23c6:	4359      	muls	r1, r3
 80a23c8:	1209      	asrs	r1, r1, #8
 80a23ca:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a23ce:	e7f4      	b.n	80a23ba <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a23d0:	7202      	strb	r2, [r0, #8]
 80a23d2:	bd70      	pop	{r4, r5, r6, pc}

080a23d4 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a23d4:	b508      	push	{r3, lr}
 80a23d6:	f000 f82f 	bl	80a2438 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a23da:	f000 f82d 	bl	80a2438 <HAL_Pin_Map>
 80a23de:	4b01      	ldr	r3, [pc, #4]	; (80a23e4 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a23e0:	6018      	str	r0, [r3, #0]
 80a23e2:	bd08      	pop	{r3, pc}
 80a23e4:	20000538 	.word	0x20000538

080a23e8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a23e8:	b508      	push	{r3, lr}
 80a23ea:	4b02      	ldr	r3, [pc, #8]	; (80a23f4 <os_mutex_create+0xc>)
 80a23ec:	681b      	ldr	r3, [r3, #0]
 80a23ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a23f0:	9301      	str	r3, [sp, #4]
 80a23f2:	bd08      	pop	{r3, pc}
 80a23f4:	080601d0 	.word	0x080601d0

080a23f8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a23f8:	b508      	push	{r3, lr}
 80a23fa:	4b02      	ldr	r3, [pc, #8]	; (80a2404 <HAL_RNG_GetRandomNumber+0xc>)
 80a23fc:	681b      	ldr	r3, [r3, #0]
 80a23fe:	685b      	ldr	r3, [r3, #4]
 80a2400:	9301      	str	r3, [sp, #4]
 80a2402:	bd08      	pop	{r3, pc}
 80a2404:	0806019c 	.word	0x0806019c

080a2408 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a2408:	b508      	push	{r3, lr}
 80a240a:	4b02      	ldr	r3, [pc, #8]	; (80a2414 <HAL_Delay_Microseconds+0xc>)
 80a240c:	681b      	ldr	r3, [r3, #0]
 80a240e:	68db      	ldr	r3, [r3, #12]
 80a2410:	9301      	str	r3, [sp, #4]
 80a2412:	bd08      	pop	{r3, pc}
 80a2414:	0806019c 	.word	0x0806019c

080a2418 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a2418:	b508      	push	{r3, lr}
 80a241a:	4b02      	ldr	r3, [pc, #8]	; (80a2424 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a241c:	681b      	ldr	r3, [r3, #0]
 80a241e:	691b      	ldr	r3, [r3, #16]
 80a2420:	9301      	str	r3, [sp, #4]
 80a2422:	bd08      	pop	{r3, pc}
 80a2424:	0806019c 	.word	0x0806019c

080a2428 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a2428:	b508      	push	{r3, lr}
 80a242a:	4b02      	ldr	r3, [pc, #8]	; (80a2434 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a242c:	681b      	ldr	r3, [r3, #0]
 80a242e:	695b      	ldr	r3, [r3, #20]
 80a2430:	9301      	str	r3, [sp, #4]
 80a2432:	bd08      	pop	{r3, pc}
 80a2434:	0806019c 	.word	0x0806019c

080a2438 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a2438:	b508      	push	{r3, lr}
 80a243a:	4b02      	ldr	r3, [pc, #8]	; (80a2444 <HAL_Pin_Map+0xc>)
 80a243c:	681b      	ldr	r3, [r3, #0]
 80a243e:	681b      	ldr	r3, [r3, #0]
 80a2440:	9301      	str	r3, [sp, #4]
 80a2442:	bd08      	pop	{r3, pc}
 80a2444:	080601b0 	.word	0x080601b0

080a2448 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a2448:	b508      	push	{r3, lr}
 80a244a:	4b02      	ldr	r3, [pc, #8]	; (80a2454 <HAL_Pin_Mode+0xc>)
 80a244c:	681b      	ldr	r3, [r3, #0]
 80a244e:	689b      	ldr	r3, [r3, #8]
 80a2450:	9301      	str	r3, [sp, #4]
 80a2452:	bd08      	pop	{r3, pc}
 80a2454:	080601b0 	.word	0x080601b0

080a2458 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a2458:	b508      	push	{r3, lr}
 80a245a:	4b02      	ldr	r3, [pc, #8]	; (80a2464 <HAL_Get_Pin_Mode+0xc>)
 80a245c:	681b      	ldr	r3, [r3, #0]
 80a245e:	68db      	ldr	r3, [r3, #12]
 80a2460:	9301      	str	r3, [sp, #4]
 80a2462:	bd08      	pop	{r3, pc}
 80a2464:	080601b0 	.word	0x080601b0

080a2468 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a2468:	b508      	push	{r3, lr}
 80a246a:	4b02      	ldr	r3, [pc, #8]	; (80a2474 <HAL_GPIO_Write+0xc>)
 80a246c:	681b      	ldr	r3, [r3, #0]
 80a246e:	691b      	ldr	r3, [r3, #16]
 80a2470:	9301      	str	r3, [sp, #4]
 80a2472:	bd08      	pop	{r3, pc}
 80a2474:	080601b0 	.word	0x080601b0

080a2478 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a2478:	b508      	push	{r3, lr}
 80a247a:	4b02      	ldr	r3, [pc, #8]	; (80a2484 <HAL_I2C_Begin+0xc>)
 80a247c:	681b      	ldr	r3, [r3, #0]
 80a247e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2480:	9301      	str	r3, [sp, #4]
 80a2482:	bd08      	pop	{r3, pc}
 80a2484:	080601ac 	.word	0x080601ac

080a2488 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a2488:	b508      	push	{r3, lr}
 80a248a:	4b02      	ldr	r3, [pc, #8]	; (80a2494 <HAL_I2C_Request_Data+0xc>)
 80a248c:	681b      	ldr	r3, [r3, #0]
 80a248e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2490:	9301      	str	r3, [sp, #4]
 80a2492:	bd08      	pop	{r3, pc}
 80a2494:	080601ac 	.word	0x080601ac

080a2498 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a2498:	b508      	push	{r3, lr}
 80a249a:	4b02      	ldr	r3, [pc, #8]	; (80a24a4 <HAL_I2C_Begin_Transmission+0xc>)
 80a249c:	681b      	ldr	r3, [r3, #0]
 80a249e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a24a0:	9301      	str	r3, [sp, #4]
 80a24a2:	bd08      	pop	{r3, pc}
 80a24a4:	080601ac 	.word	0x080601ac

080a24a8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a24a8:	b508      	push	{r3, lr}
 80a24aa:	4b02      	ldr	r3, [pc, #8]	; (80a24b4 <HAL_I2C_End_Transmission+0xc>)
 80a24ac:	681b      	ldr	r3, [r3, #0]
 80a24ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a24b0:	9301      	str	r3, [sp, #4]
 80a24b2:	bd08      	pop	{r3, pc}
 80a24b4:	080601ac 	.word	0x080601ac

080a24b8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a24b8:	b508      	push	{r3, lr}
 80a24ba:	4b02      	ldr	r3, [pc, #8]	; (80a24c4 <HAL_I2C_Write_Data+0xc>)
 80a24bc:	681b      	ldr	r3, [r3, #0]
 80a24be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a24c0:	9301      	str	r3, [sp, #4]
 80a24c2:	bd08      	pop	{r3, pc}
 80a24c4:	080601ac 	.word	0x080601ac

080a24c8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a24c8:	b508      	push	{r3, lr}
 80a24ca:	4b02      	ldr	r3, [pc, #8]	; (80a24d4 <HAL_I2C_Available_Data+0xc>)
 80a24cc:	681b      	ldr	r3, [r3, #0]
 80a24ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a24d0:	9301      	str	r3, [sp, #4]
 80a24d2:	bd08      	pop	{r3, pc}
 80a24d4:	080601ac 	.word	0x080601ac

080a24d8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a24d8:	b508      	push	{r3, lr}
 80a24da:	4b02      	ldr	r3, [pc, #8]	; (80a24e4 <HAL_I2C_Read_Data+0xc>)
 80a24dc:	681b      	ldr	r3, [r3, #0]
 80a24de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a24e0:	9301      	str	r3, [sp, #4]
 80a24e2:	bd08      	pop	{r3, pc}
 80a24e4:	080601ac 	.word	0x080601ac

080a24e8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a24e8:	b508      	push	{r3, lr}
 80a24ea:	4b02      	ldr	r3, [pc, #8]	; (80a24f4 <HAL_I2C_Peek_Data+0xc>)
 80a24ec:	681b      	ldr	r3, [r3, #0]
 80a24ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a24f0:	9301      	str	r3, [sp, #4]
 80a24f2:	bd08      	pop	{r3, pc}
 80a24f4:	080601ac 	.word	0x080601ac

080a24f8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a24f8:	b508      	push	{r3, lr}
 80a24fa:	4b02      	ldr	r3, [pc, #8]	; (80a2504 <HAL_I2C_Flush_Data+0xc>)
 80a24fc:	681b      	ldr	r3, [r3, #0]
 80a24fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2500:	9301      	str	r3, [sp, #4]
 80a2502:	bd08      	pop	{r3, pc}
 80a2504:	080601ac 	.word	0x080601ac

080a2508 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a2508:	b508      	push	{r3, lr}
 80a250a:	4b02      	ldr	r3, [pc, #8]	; (80a2514 <HAL_I2C_Is_Enabled+0xc>)
 80a250c:	681b      	ldr	r3, [r3, #0]
 80a250e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2510:	9301      	str	r3, [sp, #4]
 80a2512:	bd08      	pop	{r3, pc}
 80a2514:	080601ac 	.word	0x080601ac

080a2518 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a2518:	b508      	push	{r3, lr}
 80a251a:	4b03      	ldr	r3, [pc, #12]	; (80a2528 <HAL_I2C_Init+0x10>)
 80a251c:	681b      	ldr	r3, [r3, #0]
 80a251e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a2522:	9301      	str	r3, [sp, #4]
 80a2524:	bd08      	pop	{r3, pc}
 80a2526:	0000      	.short	0x0000
 80a2528:	080601ac 	.word	0x080601ac

080a252c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a252c:	b508      	push	{r3, lr}
 80a252e:	4b02      	ldr	r3, [pc, #8]	; (80a2538 <HAL_SPI_Begin+0xc>)
 80a2530:	681b      	ldr	r3, [r3, #0]
 80a2532:	681b      	ldr	r3, [r3, #0]
 80a2534:	9301      	str	r3, [sp, #4]
 80a2536:	bd08      	pop	{r3, pc}
 80a2538:	080601b4 	.word	0x080601b4

080a253c <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a253c:	b508      	push	{r3, lr}
 80a253e:	4b02      	ldr	r3, [pc, #8]	; (80a2548 <HAL_SPI_Set_Bit_Order+0xc>)
 80a2540:	681b      	ldr	r3, [r3, #0]
 80a2542:	689b      	ldr	r3, [r3, #8]
 80a2544:	9301      	str	r3, [sp, #4]
 80a2546:	bd08      	pop	{r3, pc}
 80a2548:	080601b4 	.word	0x080601b4

080a254c <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a254c:	b508      	push	{r3, lr}
 80a254e:	4b02      	ldr	r3, [pc, #8]	; (80a2558 <HAL_SPI_Set_Data_Mode+0xc>)
 80a2550:	681b      	ldr	r3, [r3, #0]
 80a2552:	68db      	ldr	r3, [r3, #12]
 80a2554:	9301      	str	r3, [sp, #4]
 80a2556:	bd08      	pop	{r3, pc}
 80a2558:	080601b4 	.word	0x080601b4

080a255c <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a255c:	b508      	push	{r3, lr}
 80a255e:	4b02      	ldr	r3, [pc, #8]	; (80a2568 <HAL_SPI_Set_Clock_Divider+0xc>)
 80a2560:	681b      	ldr	r3, [r3, #0]
 80a2562:	691b      	ldr	r3, [r3, #16]
 80a2564:	9301      	str	r3, [sp, #4]
 80a2566:	bd08      	pop	{r3, pc}
 80a2568:	080601b4 	.word	0x080601b4

080a256c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a256c:	b508      	push	{r3, lr}
 80a256e:	4b02      	ldr	r3, [pc, #8]	; (80a2578 <HAL_SPI_Send_Receive_Data+0xc>)
 80a2570:	681b      	ldr	r3, [r3, #0]
 80a2572:	695b      	ldr	r3, [r3, #20]
 80a2574:	9301      	str	r3, [sp, #4]
 80a2576:	bd08      	pop	{r3, pc}
 80a2578:	080601b4 	.word	0x080601b4

080a257c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a257c:	b508      	push	{r3, lr}
 80a257e:	4b02      	ldr	r3, [pc, #8]	; (80a2588 <HAL_SPI_Init+0xc>)
 80a2580:	681b      	ldr	r3, [r3, #0]
 80a2582:	69db      	ldr	r3, [r3, #28]
 80a2584:	9301      	str	r3, [sp, #4]
 80a2586:	bd08      	pop	{r3, pc}
 80a2588:	080601b4 	.word	0x080601b4

080a258c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a258c:	b508      	push	{r3, lr}
 80a258e:	4b02      	ldr	r3, [pc, #8]	; (80a2598 <HAL_SPI_Is_Enabled+0xc>)
 80a2590:	681b      	ldr	r3, [r3, #0]
 80a2592:	6a1b      	ldr	r3, [r3, #32]
 80a2594:	9301      	str	r3, [sp, #4]
 80a2596:	bd08      	pop	{r3, pc}
 80a2598:	080601b4 	.word	0x080601b4

080a259c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a259c:	b508      	push	{r3, lr}
 80a259e:	4b02      	ldr	r3, [pc, #8]	; (80a25a8 <HAL_SPI_Info+0xc>)
 80a25a0:	681b      	ldr	r3, [r3, #0]
 80a25a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a25a4:	9301      	str	r3, [sp, #4]
 80a25a6:	bd08      	pop	{r3, pc}
 80a25a8:	080601b4 	.word	0x080601b4

080a25ac <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a25ac:	b508      	push	{r3, lr}
 80a25ae:	4b02      	ldr	r3, [pc, #8]	; (80a25b8 <HAL_USART_Init+0xc>)
 80a25b0:	681b      	ldr	r3, [r3, #0]
 80a25b2:	699b      	ldr	r3, [r3, #24]
 80a25b4:	9301      	str	r3, [sp, #4]
 80a25b6:	bd08      	pop	{r3, pc}
 80a25b8:	080601c4 	.word	0x080601c4

080a25bc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a25bc:	b508      	push	{r3, lr}
 80a25be:	4b02      	ldr	r3, [pc, #8]	; (80a25c8 <HAL_USART_Write_Data+0xc>)
 80a25c0:	681b      	ldr	r3, [r3, #0]
 80a25c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a25c4:	9301      	str	r3, [sp, #4]
 80a25c6:	bd08      	pop	{r3, pc}
 80a25c8:	080601c4 	.word	0x080601c4

080a25cc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a25cc:	b508      	push	{r3, lr}
 80a25ce:	4b02      	ldr	r3, [pc, #8]	; (80a25d8 <HAL_USART_Available_Data+0xc>)
 80a25d0:	681b      	ldr	r3, [r3, #0]
 80a25d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a25d4:	9301      	str	r3, [sp, #4]
 80a25d6:	bd08      	pop	{r3, pc}
 80a25d8:	080601c4 	.word	0x080601c4

080a25dc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a25dc:	b508      	push	{r3, lr}
 80a25de:	4b02      	ldr	r3, [pc, #8]	; (80a25e8 <HAL_USART_Read_Data+0xc>)
 80a25e0:	681b      	ldr	r3, [r3, #0]
 80a25e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a25e4:	9301      	str	r3, [sp, #4]
 80a25e6:	bd08      	pop	{r3, pc}
 80a25e8:	080601c4 	.word	0x080601c4

080a25ec <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a25ec:	b508      	push	{r3, lr}
 80a25ee:	4b02      	ldr	r3, [pc, #8]	; (80a25f8 <HAL_USART_Peek_Data+0xc>)
 80a25f0:	681b      	ldr	r3, [r3, #0]
 80a25f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a25f4:	9301      	str	r3, [sp, #4]
 80a25f6:	bd08      	pop	{r3, pc}
 80a25f8:	080601c4 	.word	0x080601c4

080a25fc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a25fc:	b508      	push	{r3, lr}
 80a25fe:	4b02      	ldr	r3, [pc, #8]	; (80a2608 <HAL_USART_Flush_Data+0xc>)
 80a2600:	681b      	ldr	r3, [r3, #0]
 80a2602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2604:	9301      	str	r3, [sp, #4]
 80a2606:	bd08      	pop	{r3, pc}
 80a2608:	080601c4 	.word	0x080601c4

080a260c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a260c:	b508      	push	{r3, lr}
 80a260e:	4b02      	ldr	r3, [pc, #8]	; (80a2618 <HAL_USART_Is_Enabled+0xc>)
 80a2610:	681b      	ldr	r3, [r3, #0]
 80a2612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2614:	9301      	str	r3, [sp, #4]
 80a2616:	bd08      	pop	{r3, pc}
 80a2618:	080601c4 	.word	0x080601c4

080a261c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a261c:	b508      	push	{r3, lr}
 80a261e:	4b02      	ldr	r3, [pc, #8]	; (80a2628 <HAL_USART_Available_Data_For_Write+0xc>)
 80a2620:	681b      	ldr	r3, [r3, #0]
 80a2622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2624:	9301      	str	r3, [sp, #4]
 80a2626:	bd08      	pop	{r3, pc}
 80a2628:	080601c4 	.word	0x080601c4

080a262c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a262c:	b508      	push	{r3, lr}
 80a262e:	4b02      	ldr	r3, [pc, #8]	; (80a2638 <HAL_USB_USART_Init+0xc>)
 80a2630:	681b      	ldr	r3, [r3, #0]
 80a2632:	681b      	ldr	r3, [r3, #0]
 80a2634:	9301      	str	r3, [sp, #4]
 80a2636:	bd08      	pop	{r3, pc}
 80a2638:	080601d8 	.word	0x080601d8

080a263c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a263c:	b508      	push	{r3, lr}
 80a263e:	4b02      	ldr	r3, [pc, #8]	; (80a2648 <HAL_USB_USART_Begin+0xc>)
 80a2640:	681b      	ldr	r3, [r3, #0]
 80a2642:	685b      	ldr	r3, [r3, #4]
 80a2644:	9301      	str	r3, [sp, #4]
 80a2646:	bd08      	pop	{r3, pc}
 80a2648:	080601d8 	.word	0x080601d8

080a264c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a264c:	b508      	push	{r3, lr}
 80a264e:	4b02      	ldr	r3, [pc, #8]	; (80a2658 <HAL_USB_USART_Available_Data+0xc>)
 80a2650:	681b      	ldr	r3, [r3, #0]
 80a2652:	691b      	ldr	r3, [r3, #16]
 80a2654:	9301      	str	r3, [sp, #4]
 80a2656:	bd08      	pop	{r3, pc}
 80a2658:	080601d8 	.word	0x080601d8

080a265c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a265c:	b508      	push	{r3, lr}
 80a265e:	4b02      	ldr	r3, [pc, #8]	; (80a2668 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2660:	681b      	ldr	r3, [r3, #0]
 80a2662:	695b      	ldr	r3, [r3, #20]
 80a2664:	9301      	str	r3, [sp, #4]
 80a2666:	bd08      	pop	{r3, pc}
 80a2668:	080601d8 	.word	0x080601d8

080a266c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a266c:	b508      	push	{r3, lr}
 80a266e:	4b02      	ldr	r3, [pc, #8]	; (80a2678 <HAL_USB_USART_Receive_Data+0xc>)
 80a2670:	681b      	ldr	r3, [r3, #0]
 80a2672:	699b      	ldr	r3, [r3, #24]
 80a2674:	9301      	str	r3, [sp, #4]
 80a2676:	bd08      	pop	{r3, pc}
 80a2678:	080601d8 	.word	0x080601d8

080a267c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a267c:	b508      	push	{r3, lr}
 80a267e:	4b02      	ldr	r3, [pc, #8]	; (80a2688 <HAL_USB_USART_Send_Data+0xc>)
 80a2680:	681b      	ldr	r3, [r3, #0]
 80a2682:	69db      	ldr	r3, [r3, #28]
 80a2684:	9301      	str	r3, [sp, #4]
 80a2686:	bd08      	pop	{r3, pc}
 80a2688:	080601d8 	.word	0x080601d8

080a268c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a268c:	b508      	push	{r3, lr}
 80a268e:	4b02      	ldr	r3, [pc, #8]	; (80a2698 <HAL_USB_USART_Flush_Data+0xc>)
 80a2690:	681b      	ldr	r3, [r3, #0]
 80a2692:	6a1b      	ldr	r3, [r3, #32]
 80a2694:	9301      	str	r3, [sp, #4]
 80a2696:	bd08      	pop	{r3, pc}
 80a2698:	080601d8 	.word	0x080601d8

080a269c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a269c:	b508      	push	{r3, lr}
 80a269e:	4b02      	ldr	r3, [pc, #8]	; (80a26a8 <inet_gethostbyname+0xc>)
 80a26a0:	681b      	ldr	r3, [r3, #0]
 80a26a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a26a4:	9301      	str	r3, [sp, #4]
 80a26a6:	bd08      	pop	{r3, pc}
 80a26a8:	080601c0 	.word	0x080601c0

080a26ac <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a26ac:	b508      	push	{r3, lr}
 80a26ae:	4b02      	ldr	r3, [pc, #8]	; (80a26b8 <panic_+0xc>)
 80a26b0:	681b      	ldr	r3, [r3, #0]
 80a26b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a26b4:	9301      	str	r3, [sp, #4]
 80a26b6:	bd08      	pop	{r3, pc}
 80a26b8:	080201a8 	.word	0x080201a8

080a26bc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a26bc:	b508      	push	{r3, lr}
 80a26be:	4b02      	ldr	r3, [pc, #8]	; (80a26c8 <set_system_mode+0xc>)
 80a26c0:	681b      	ldr	r3, [r3, #0]
 80a26c2:	685b      	ldr	r3, [r3, #4]
 80a26c4:	9301      	str	r3, [sp, #4]
 80a26c6:	bd08      	pop	{r3, pc}
 80a26c8:	080601a4 	.word	0x080601a4

080a26cc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a26cc:	b508      	push	{r3, lr}
 80a26ce:	4b02      	ldr	r3, [pc, #8]	; (80a26d8 <system_delay_ms+0xc>)
 80a26d0:	681b      	ldr	r3, [r3, #0]
 80a26d2:	695b      	ldr	r3, [r3, #20]
 80a26d4:	9301      	str	r3, [sp, #4]
 80a26d6:	bd08      	pop	{r3, pc}
 80a26d8:	080601a4 	.word	0x080601a4

080a26dc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a26dc:	b508      	push	{r3, lr}
 80a26de:	4b03      	ldr	r3, [pc, #12]	; (80a26ec <system_ctrl_set_app_request_handler+0x10>)
 80a26e0:	681b      	ldr	r3, [r3, #0]
 80a26e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a26e6:	9301      	str	r3, [sp, #4]
 80a26e8:	bd08      	pop	{r3, pc}
 80a26ea:	0000      	.short	0x0000
 80a26ec:	080601a4 	.word	0x080601a4

080a26f0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a26f0:	b508      	push	{r3, lr}
 80a26f2:	4b03      	ldr	r3, [pc, #12]	; (80a2700 <system_ctrl_set_result+0x10>)
 80a26f4:	681b      	ldr	r3, [r3, #0]
 80a26f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a26fa:	9301      	str	r3, [sp, #4]
 80a26fc:	bd08      	pop	{r3, pc}
 80a26fe:	0000      	.short	0x0000
 80a2700:	080601a4 	.word	0x080601a4

080a2704 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a2704:	b508      	push	{r3, lr}
 80a2706:	4b02      	ldr	r3, [pc, #8]	; (80a2710 <spark_process+0xc>)
 80a2708:	681b      	ldr	r3, [r3, #0]
 80a270a:	689b      	ldr	r3, [r3, #8]
 80a270c:	9301      	str	r3, [sp, #4]
 80a270e:	bd08      	pop	{r3, pc}
 80a2710:	080601cc 	.word	0x080601cc

080a2714 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a2714:	b508      	push	{r3, lr}
 80a2716:	4b02      	ldr	r3, [pc, #8]	; (80a2720 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2718:	681b      	ldr	r3, [r3, #0]
 80a271a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a271c:	9301      	str	r3, [sp, #4]
 80a271e:	bd08      	pop	{r3, pc}
 80a2720:	080601cc 	.word	0x080601cc

080a2724 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2724:	b508      	push	{r3, lr}
 80a2726:	4b02      	ldr	r3, [pc, #8]	; (80a2730 <network_connect+0xc>)
 80a2728:	681b      	ldr	r3, [r3, #0]
 80a272a:	685b      	ldr	r3, [r3, #4]
 80a272c:	9301      	str	r3, [sp, #4]
 80a272e:	bd08      	pop	{r3, pc}
 80a2730:	080601c8 	.word	0x080601c8

080a2734 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a2734:	b508      	push	{r3, lr}
 80a2736:	4b02      	ldr	r3, [pc, #8]	; (80a2740 <network_connecting+0xc>)
 80a2738:	681b      	ldr	r3, [r3, #0]
 80a273a:	689b      	ldr	r3, [r3, #8]
 80a273c:	9301      	str	r3, [sp, #4]
 80a273e:	bd08      	pop	{r3, pc}
 80a2740:	080601c8 	.word	0x080601c8

080a2744 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a2744:	b508      	push	{r3, lr}
 80a2746:	4b02      	ldr	r3, [pc, #8]	; (80a2750 <network_disconnect+0xc>)
 80a2748:	681b      	ldr	r3, [r3, #0]
 80a274a:	68db      	ldr	r3, [r3, #12]
 80a274c:	9301      	str	r3, [sp, #4]
 80a274e:	bd08      	pop	{r3, pc}
 80a2750:	080601c8 	.word	0x080601c8

080a2754 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a2754:	b508      	push	{r3, lr}
 80a2756:	4b02      	ldr	r3, [pc, #8]	; (80a2760 <network_ready+0xc>)
 80a2758:	681b      	ldr	r3, [r3, #0]
 80a275a:	691b      	ldr	r3, [r3, #16]
 80a275c:	9301      	str	r3, [sp, #4]
 80a275e:	bd08      	pop	{r3, pc}
 80a2760:	080601c8 	.word	0x080601c8

080a2764 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2764:	b508      	push	{r3, lr}
 80a2766:	4b02      	ldr	r3, [pc, #8]	; (80a2770 <network_on+0xc>)
 80a2768:	681b      	ldr	r3, [r3, #0]
 80a276a:	695b      	ldr	r3, [r3, #20]
 80a276c:	9301      	str	r3, [sp, #4]
 80a276e:	bd08      	pop	{r3, pc}
 80a2770:	080601c8 	.word	0x080601c8

080a2774 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2774:	b508      	push	{r3, lr}
 80a2776:	4b02      	ldr	r3, [pc, #8]	; (80a2780 <network_off+0xc>)
 80a2778:	681b      	ldr	r3, [r3, #0]
 80a277a:	699b      	ldr	r3, [r3, #24]
 80a277c:	9301      	str	r3, [sp, #4]
 80a277e:	bd08      	pop	{r3, pc}
 80a2780:	080601c8 	.word	0x080601c8

080a2784 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a2784:	b508      	push	{r3, lr}
 80a2786:	4b02      	ldr	r3, [pc, #8]	; (80a2790 <network_listen+0xc>)
 80a2788:	681b      	ldr	r3, [r3, #0]
 80a278a:	69db      	ldr	r3, [r3, #28]
 80a278c:	9301      	str	r3, [sp, #4]
 80a278e:	bd08      	pop	{r3, pc}
 80a2790:	080601c8 	.word	0x080601c8

080a2794 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a2794:	b508      	push	{r3, lr}
 80a2796:	4b02      	ldr	r3, [pc, #8]	; (80a27a0 <network_listening+0xc>)
 80a2798:	681b      	ldr	r3, [r3, #0]
 80a279a:	6a1b      	ldr	r3, [r3, #32]
 80a279c:	9301      	str	r3, [sp, #4]
 80a279e:	bd08      	pop	{r3, pc}
 80a27a0:	080601c8 	.word	0x080601c8

080a27a4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a27a4:	b508      	push	{r3, lr}
 80a27a6:	4b02      	ldr	r3, [pc, #8]	; (80a27b0 <network_set_listen_timeout+0xc>)
 80a27a8:	681b      	ldr	r3, [r3, #0]
 80a27aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a27ac:	9301      	str	r3, [sp, #4]
 80a27ae:	bd08      	pop	{r3, pc}
 80a27b0:	080601c8 	.word	0x080601c8

080a27b4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a27b4:	b508      	push	{r3, lr}
 80a27b6:	4b02      	ldr	r3, [pc, #8]	; (80a27c0 <network_get_listen_timeout+0xc>)
 80a27b8:	681b      	ldr	r3, [r3, #0]
 80a27ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a27bc:	9301      	str	r3, [sp, #4]
 80a27be:	bd08      	pop	{r3, pc}
 80a27c0:	080601c8 	.word	0x080601c8

080a27c4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a27c4:	b508      	push	{r3, lr}
 80a27c6:	4b02      	ldr	r3, [pc, #8]	; (80a27d0 <malloc+0xc>)
 80a27c8:	681b      	ldr	r3, [r3, #0]
 80a27ca:	681b      	ldr	r3, [r3, #0]
 80a27cc:	9301      	str	r3, [sp, #4]
 80a27ce:	bd08      	pop	{r3, pc}
 80a27d0:	080601a0 	.word	0x080601a0

080a27d4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a27d4:	b508      	push	{r3, lr}
 80a27d6:	4b02      	ldr	r3, [pc, #8]	; (80a27e0 <free+0xc>)
 80a27d8:	681b      	ldr	r3, [r3, #0]
 80a27da:	685b      	ldr	r3, [r3, #4]
 80a27dc:	9301      	str	r3, [sp, #4]
 80a27de:	bd08      	pop	{r3, pc}
 80a27e0:	080601a0 	.word	0x080601a0

080a27e4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a27e4:	2100      	movs	r1, #0
 80a27e6:	f7ff bf71 	b.w	80a26cc <system_delay_ms>

080a27ea <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a27ea:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a27ec:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a27ee:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a27f0:	b113      	cbz	r3, 80a27f8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a27f2:	2203      	movs	r2, #3
 80a27f4:	4601      	mov	r1, r0
 80a27f6:	4798      	blx	r3
    }
 80a27f8:	4620      	mov	r0, r4
 80a27fa:	bd10      	pop	{r4, pc}

080a27fc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a27fc:	4770      	bx	lr

080a27fe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a27fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2800:	4606      	mov	r6, r0
 80a2802:	4615      	mov	r5, r2
 80a2804:	460c      	mov	r4, r1
 80a2806:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2808:	42bc      	cmp	r4, r7
 80a280a:	d006      	beq.n	80a281a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a280c:	6833      	ldr	r3, [r6, #0]
 80a280e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2812:	689b      	ldr	r3, [r3, #8]
 80a2814:	4630      	mov	r0, r6
 80a2816:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2818:	e7f6      	b.n	80a2808 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a281a:	4628      	mov	r0, r5
 80a281c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a281e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a281e:	2200      	movs	r2, #0
 80a2820:	7c00      	ldrb	r0, [r0, #16]
 80a2822:	f7ff be49 	b.w	80a24b8 <HAL_I2C_Write_Data>

080a2826 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a2826:	2100      	movs	r1, #0
 80a2828:	7c00      	ldrb	r0, [r0, #16]
 80a282a:	f7ff be4d 	b.w	80a24c8 <HAL_I2C_Available_Data>

080a282e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a282e:	2100      	movs	r1, #0
 80a2830:	7c00      	ldrb	r0, [r0, #16]
 80a2832:	f7ff be51 	b.w	80a24d8 <HAL_I2C_Read_Data>

080a2836 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a2836:	2100      	movs	r1, #0
 80a2838:	7c00      	ldrb	r0, [r0, #16]
 80a283a:	f7ff be55 	b.w	80a24e8 <HAL_I2C_Peek_Data>

080a283e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a283e:	2100      	movs	r1, #0
 80a2840:	7c00      	ldrb	r0, [r0, #16]
 80a2842:	f7ff be59 	b.w	80a24f8 <HAL_I2C_Flush_Data>

080a2846 <_ZN7TwoWireD0Ev>:
 80a2846:	b510      	push	{r4, lr}
 80a2848:	4604      	mov	r4, r0
 80a284a:	2114      	movs	r1, #20
 80a284c:	f000 fd4d 	bl	80a32ea <_ZdlPvj>
 80a2850:	4620      	mov	r0, r4
 80a2852:	bd10      	pop	{r4, pc}

080a2854 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2854:	b510      	push	{r4, lr}
 80a2856:	4604      	mov	r4, r0
 80a2858:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a285a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a285e:	60a3      	str	r3, [r4, #8]
 80a2860:	4b04      	ldr	r3, [pc, #16]	; (80a2874 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2862:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a2864:	7420      	strb	r0, [r4, #16]
 80a2866:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2868:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a286a:	f7ff fe55 	bl	80a2518 <HAL_I2C_Init>

}
 80a286e:	4620      	mov	r0, r4
 80a2870:	bd10      	pop	{r4, pc}
 80a2872:	bf00      	nop
 80a2874:	080a3c20 	.word	0x080a3c20

080a2878 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a2878:	2300      	movs	r3, #0
 80a287a:	461a      	mov	r2, r3
 80a287c:	4619      	mov	r1, r3
 80a287e:	7c00      	ldrb	r0, [r0, #16]
 80a2880:	f7ff bdfa 	b.w	80a2478 <HAL_I2C_Begin>

080a2884 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a2884:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a2886:	2400      	movs	r4, #0
 80a2888:	7c00      	ldrb	r0, [r0, #16]
 80a288a:	9400      	str	r4, [sp, #0]
 80a288c:	f7ff fdfc 	bl	80a2488 <HAL_I2C_Request_Data>
  return result;
}
 80a2890:	b2c0      	uxtb	r0, r0
 80a2892:	b002      	add	sp, #8
 80a2894:	bd10      	pop	{r4, pc}

080a2896 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a2896:	2301      	movs	r3, #1
 80a2898:	b2d2      	uxtb	r2, r2
 80a289a:	b2c9      	uxtb	r1, r1
 80a289c:	f7ff bff2 	b.w	80a2884 <_ZN7TwoWire11requestFromEhhh>

080a28a0 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a28a0:	2200      	movs	r2, #0
 80a28a2:	7c00      	ldrb	r0, [r0, #16]
 80a28a4:	f7ff bdf8 	b.w	80a2498 <HAL_I2C_Begin_Transmission>

080a28a8 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a28a8:	b2c9      	uxtb	r1, r1
 80a28aa:	f7ff bff9 	b.w	80a28a0 <_ZN7TwoWire17beginTransmissionEh>

080a28ae <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a28ae:	2200      	movs	r2, #0
 80a28b0:	7c00      	ldrb	r0, [r0, #16]
 80a28b2:	f7ff bdf9 	b.w	80a24a8 <HAL_I2C_End_Transmission>

080a28b6 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a28b6:	2101      	movs	r1, #1
 80a28b8:	f7ff bff9 	b.w	80a28ae <_ZN7TwoWire15endTransmissionEh>

080a28bc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a28bc:	2100      	movs	r1, #0
 80a28be:	7c00      	ldrb	r0, [r0, #16]
 80a28c0:	f7ff be22 	b.w	80a2508 <HAL_I2C_Is_Enabled>

080a28c4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a28c4:	4770      	bx	lr

080a28c6 <_ZN9IPAddressD0Ev>:
 80a28c6:	b510      	push	{r4, lr}
 80a28c8:	4604      	mov	r4, r0
 80a28ca:	2118      	movs	r1, #24
 80a28cc:	f000 fd0d 	bl	80a32ea <_ZdlPvj>
 80a28d0:	4620      	mov	r0, r4
 80a28d2:	bd10      	pop	{r4, pc}

080a28d4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a28d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a28d6:	460f      	mov	r7, r1
 80a28d8:	f100 0608 	add.w	r6, r0, #8
 80a28dc:	1d05      	adds	r5, r0, #4
 80a28de:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a28e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a28e4:	220a      	movs	r2, #10
 80a28e6:	4638      	mov	r0, r7
 80a28e8:	f000 f927 	bl	80a2b3a <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a28ec:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a28ee:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a28f0:	d007      	beq.n	80a2902 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a28f2:	2c00      	cmp	r4, #0
 80a28f4:	d0f4      	beq.n	80a28e0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a28f6:	212e      	movs	r1, #46	; 0x2e
 80a28f8:	4638      	mov	r0, r7
 80a28fa:	f000 f8db 	bl	80a2ab4 <_ZN5Print5printEc>
 80a28fe:	4404      	add	r4, r0
 80a2900:	e7ee      	b.n	80a28e0 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2902:	4620      	mov	r0, r4
 80a2904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2908 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2908:	b510      	push	{r4, lr}
 80a290a:	4604      	mov	r4, r0
 80a290c:	4b04      	ldr	r3, [pc, #16]	; (80a2920 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a290e:	2211      	movs	r2, #17
 80a2910:	f840 3b04 	str.w	r3, [r0], #4
 80a2914:	2100      	movs	r1, #0
 80a2916:	f000 fe4c 	bl	80a35b2 <memset>
{
    clear();
}
 80a291a:	4620      	mov	r0, r4
 80a291c:	bd10      	pop	{r4, pc}
 80a291e:	bf00      	nop
 80a2920:	080a3c48 	.word	0x080a3c48

080a2924 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2924:	4603      	mov	r3, r0
 80a2926:	4a07      	ldr	r2, [pc, #28]	; (80a2944 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2928:	b510      	push	{r4, lr}
 80a292a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a292e:	f101 0210 	add.w	r2, r1, #16
 80a2932:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2936:	4291      	cmp	r1, r2
 80a2938:	f843 4b04 	str.w	r4, [r3], #4
 80a293c:	d1f9      	bne.n	80a2932 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a293e:	780a      	ldrb	r2, [r1, #0]
 80a2940:	701a      	strb	r2, [r3, #0]
}
 80a2942:	bd10      	pop	{r4, pc}
 80a2944:	080a3c48 	.word	0x080a3c48

080a2948 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2948:	4a02      	ldr	r2, [pc, #8]	; (80a2954 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a294a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a294c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a294e:	2204      	movs	r2, #4
 80a2950:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a2952:	4770      	bx	lr
 80a2954:	080a3c48 	.word	0x080a3c48

080a2958 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2958:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a295a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a295e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a2962:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a2966:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a296a:	2304      	movs	r3, #4
 80a296c:	6041      	str	r1, [r0, #4]
 80a296e:	7503      	strb	r3, [r0, #20]
 80a2970:	bd10      	pop	{r4, pc}
	...

080a2974 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2976:	4d04      	ldr	r5, [pc, #16]	; (80a2988 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2978:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a297a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a297e:	9500      	str	r5, [sp, #0]
 80a2980:	f7ff ffea 	bl	80a2958 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2984:	b003      	add	sp, #12
 80a2986:	bd30      	pop	{r4, r5, pc}
 80a2988:	080a3c48 	.word	0x080a3c48

080a298c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a298c:	4a01      	ldr	r2, [pc, #4]	; (80a2994 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a298e:	4b02      	ldr	r3, [pc, #8]	; (80a2998 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2990:	601a      	str	r2, [r3, #0]
 80a2992:	4770      	bx	lr
 80a2994:	080a3cca 	.word	0x080a3cca
 80a2998:	2000053c 	.word	0x2000053c

080a299c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a299c:	2300      	movs	r3, #0
 80a299e:	461a      	mov	r2, r3
 80a29a0:	6840      	ldr	r0, [r0, #4]
 80a29a2:	f7ff bebf 	b.w	80a2724 <network_connect>

080a29a6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a29a6:	2200      	movs	r2, #0
 80a29a8:	2102      	movs	r1, #2
 80a29aa:	6840      	ldr	r0, [r0, #4]
 80a29ac:	f7ff beca 	b.w	80a2744 <network_disconnect>

080a29b0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a29b0:	2200      	movs	r2, #0
 80a29b2:	4611      	mov	r1, r2
 80a29b4:	6840      	ldr	r0, [r0, #4]
 80a29b6:	f7ff bebd 	b.w	80a2734 <network_connecting>

080a29ba <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a29ba:	2200      	movs	r2, #0
 80a29bc:	4611      	mov	r1, r2
 80a29be:	6840      	ldr	r0, [r0, #4]
 80a29c0:	f7ff bec8 	b.w	80a2754 <network_ready>

080a29c4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a29c4:	2300      	movs	r3, #0
 80a29c6:	461a      	mov	r2, r3
 80a29c8:	4619      	mov	r1, r3
 80a29ca:	6840      	ldr	r0, [r0, #4]
 80a29cc:	f7ff beca 	b.w	80a2764 <network_on>

080a29d0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a29d0:	2300      	movs	r3, #0
 80a29d2:	461a      	mov	r2, r3
 80a29d4:	4619      	mov	r1, r3
 80a29d6:	6840      	ldr	r0, [r0, #4]
 80a29d8:	f7ff becc 	b.w	80a2774 <network_off>

080a29dc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a29dc:	2200      	movs	r2, #0
 80a29de:	f081 0101 	eor.w	r1, r1, #1
 80a29e2:	6840      	ldr	r0, [r0, #4]
 80a29e4:	f7ff bece 	b.w	80a2784 <network_listen>

080a29e8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a29e8:	2200      	movs	r2, #0
 80a29ea:	6840      	ldr	r0, [r0, #4]
 80a29ec:	f7ff beda 	b.w	80a27a4 <network_set_listen_timeout>

080a29f0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a29f0:	2200      	movs	r2, #0
 80a29f2:	4611      	mov	r1, r2
 80a29f4:	6840      	ldr	r0, [r0, #4]
 80a29f6:	f7ff bedd 	b.w	80a27b4 <network_get_listen_timeout>

080a29fa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a29fa:	2200      	movs	r2, #0
 80a29fc:	4611      	mov	r1, r2
 80a29fe:	6840      	ldr	r0, [r0, #4]
 80a2a00:	f7ff bec8 	b.w	80a2794 <network_listening>

080a2a04 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2a04:	b570      	push	{r4, r5, r6, lr}
 80a2a06:	4616      	mov	r6, r2
 80a2a08:	b08e      	sub	sp, #56	; 0x38
 80a2a0a:	4604      	mov	r4, r0
    IPAddress addr;
 80a2a0c:	a808      	add	r0, sp, #32
 80a2a0e:	f7ff ff7b 	bl	80a2908 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2a12:	2211      	movs	r2, #17
 80a2a14:	2100      	movs	r1, #0
 80a2a16:	a803      	add	r0, sp, #12
 80a2a18:	f000 fdcb 	bl	80a35b2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2a1c:	4630      	mov	r0, r6
 80a2a1e:	f000 fdf9 	bl	80a3614 <strlen>
 80a2a22:	2500      	movs	r5, #0
 80a2a24:	4b0a      	ldr	r3, [pc, #40]	; (80a2a50 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2a26:	9500      	str	r5, [sp, #0]
 80a2a28:	b281      	uxth	r1, r0
 80a2a2a:	685b      	ldr	r3, [r3, #4]
 80a2a2c:	aa03      	add	r2, sp, #12
 80a2a2e:	4630      	mov	r0, r6
 80a2a30:	f7ff fe34 	bl	80a269c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2a34:	b120      	cbz	r0, 80a2a40 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2a36:	4629      	mov	r1, r5
 80a2a38:	4620      	mov	r0, r4
 80a2a3a:	f7ff ff85 	bl	80a2948 <_ZN9IPAddressC1Em>
 80a2a3e:	e003      	b.n	80a2a48 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2a40:	a903      	add	r1, sp, #12
 80a2a42:	4620      	mov	r0, r4
 80a2a44:	f7ff ff6e 	bl	80a2924 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2a48:	4620      	mov	r0, r4
 80a2a4a:	b00e      	add	sp, #56	; 0x38
 80a2a4c:	bd70      	pop	{r4, r5, r6, pc}
 80a2a4e:	bf00      	nop
 80a2a50:	200005b4 	.word	0x200005b4

080a2a54 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2a54:	4b02      	ldr	r3, [pc, #8]	; (80a2a60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2a56:	4a03      	ldr	r2, [pc, #12]	; (80a2a64 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2a58:	601a      	str	r2, [r3, #0]
 80a2a5a:	2200      	movs	r2, #0
 80a2a5c:	605a      	str	r2, [r3, #4]
 80a2a5e:	4770      	bx	lr
 80a2a60:	20000540 	.word	0x20000540
 80a2a64:	080a3d40 	.word	0x080a3d40

080a2a68 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2a6a:	4606      	mov	r6, r0
 80a2a6c:	460d      	mov	r5, r1
 80a2a6e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a2a70:	2400      	movs	r4, #0
  while (size--) {
 80a2a72:	42bd      	cmp	r5, r7
 80a2a74:	d00c      	beq.n	80a2a90 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2a76:	6833      	ldr	r3, [r6, #0]
 80a2a78:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2a7c:	689b      	ldr	r3, [r3, #8]
 80a2a7e:	4630      	mov	r0, r6
 80a2a80:	4798      	blx	r3
     if (chunk>=0)
 80a2a82:	2800      	cmp	r0, #0
 80a2a84:	db01      	blt.n	80a2a8a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2a86:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a2a88:	e7f3      	b.n	80a2a72 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2a8a:	2c00      	cmp	r4, #0
 80a2a8c:	bf08      	it	eq
 80a2a8e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2a90:	4620      	mov	r0, r4
 80a2a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2a94 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2a94:	b570      	push	{r4, r5, r6, lr}
 80a2a96:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2a98:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a2a9a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a2a9c:	b149      	cbz	r1, 80a2ab2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2a9e:	f000 fdb9 	bl	80a3614 <strlen>
 80a2aa2:	682b      	ldr	r3, [r5, #0]
 80a2aa4:	4602      	mov	r2, r0
 80a2aa6:	4621      	mov	r1, r4
 80a2aa8:	4628      	mov	r0, r5
    }
 80a2aaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a2aae:	68db      	ldr	r3, [r3, #12]
 80a2ab0:	4718      	bx	r3
    }
 80a2ab2:	bd70      	pop	{r4, r5, r6, pc}

080a2ab4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2ab4:	6803      	ldr	r3, [r0, #0]
 80a2ab6:	689b      	ldr	r3, [r3, #8]
 80a2ab8:	4718      	bx	r3

080a2aba <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2aba:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2abc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2abe:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2ac0:	f7ff fff8 	bl	80a2ab4 <_ZN5Print5printEc>
  n += print('\n');
 80a2ac4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a2ac6:	4604      	mov	r4, r0
  n += print('\n');
 80a2ac8:	4628      	mov	r0, r5
 80a2aca:	f7ff fff3 	bl	80a2ab4 <_ZN5Print5printEc>
  return n;
}
 80a2ace:	4420      	add	r0, r4
 80a2ad0:	bd38      	pop	{r3, r4, r5, pc}

080a2ad2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2ad2:	b538      	push	{r3, r4, r5, lr}
 80a2ad4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2ad6:	f7ff ffdd 	bl	80a2a94 <_ZN5Print5writeEPKc>
 80a2ada:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a2adc:	4628      	mov	r0, r5
 80a2ade:	f7ff ffec 	bl	80a2aba <_ZN5Print7printlnEv>
  return n;
}
 80a2ae2:	4420      	add	r0, r4
 80a2ae4:	bd38      	pop	{r3, r4, r5, pc}

080a2ae6 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2ae6:	2a01      	cmp	r2, #1
 80a2ae8:	bf98      	it	ls
 80a2aea:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2aec:	b530      	push	{r4, r5, lr}
 80a2aee:	460b      	mov	r3, r1
 80a2af0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2af2:	2100      	movs	r1, #0
 80a2af4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a2af8:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a2afc:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a2b00:	fb05 3312 	mls	r3, r5, r2, r3
 80a2b04:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2b06:	2b09      	cmp	r3, #9
 80a2b08:	bf94      	ite	ls
 80a2b0a:	3330      	addls	r3, #48	; 0x30
 80a2b0c:	3337      	addhi	r3, #55	; 0x37
 80a2b0e:	b2db      	uxtb	r3, r3
 80a2b10:	4621      	mov	r1, r4
 80a2b12:	f804 3901 	strb.w	r3, [r4], #-1
 80a2b16:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2b18:	2d00      	cmp	r5, #0
 80a2b1a:	d1ef      	bne.n	80a2afc <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2b1c:	f7ff ffba 	bl	80a2a94 <_ZN5Print5writeEPKc>
}
 80a2b20:	b00b      	add	sp, #44	; 0x2c
 80a2b22:	bd30      	pop	{r4, r5, pc}

080a2b24 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a2b24:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a2b26:	b922      	cbnz	r2, 80a2b32 <_ZN5Print5printEmi+0xe>
 80a2b28:	6803      	ldr	r3, [r0, #0]
 80a2b2a:	b2c9      	uxtb	r1, r1
 80a2b2c:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a2b2e:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a2b30:	4718      	bx	r3
  else return printNumber(n, base);
 80a2b32:	b2d2      	uxtb	r2, r2
}
 80a2b34:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2b36:	f7ff bfd6 	b.w	80a2ae6 <_ZN5Print11printNumberEmh>

080a2b3a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a2b3a:	f7ff bff3 	b.w	80a2b24 <_ZN5Print5printEmi>

080a2b3e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2b3e:	b510      	push	{r4, lr}
 80a2b40:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2b42:	f7ff fe52 	bl	80a27ea <_ZNSt14_Function_baseD1Ev>
 80a2b46:	4620      	mov	r0, r4
 80a2b48:	bd10      	pop	{r4, pc}
	...

080a2b4c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2b4c:	4803      	ldr	r0, [pc, #12]	; (80a2b5c <_GLOBAL__sub_I_RGB+0x10>)
 80a2b4e:	2300      	movs	r3, #0
 80a2b50:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2b52:	4a03      	ldr	r2, [pc, #12]	; (80a2b60 <_GLOBAL__sub_I_RGB+0x14>)
 80a2b54:	4903      	ldr	r1, [pc, #12]	; (80a2b64 <_GLOBAL__sub_I_RGB+0x18>)
 80a2b56:	f000 bbc3 	b.w	80a32e0 <__aeabi_atexit>
 80a2b5a:	bf00      	nop
 80a2b5c:	20000548 	.word	0x20000548
 80a2b60:	200004e0 	.word	0x200004e0
 80a2b64:	080a2b3f 	.word	0x080a2b3f

080a2b68 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a2b68:	4770      	bx	lr

080a2b6a <_ZN8SPIClassD0Ev>:
 80a2b6a:	b510      	push	{r4, lr}
 80a2b6c:	4604      	mov	r4, r0
 80a2b6e:	2110      	movs	r1, #16
 80a2b70:	f000 fbbb 	bl	80a32ea <_ZdlPvj>
 80a2b74:	4620      	mov	r0, r4
 80a2b76:	bd10      	pop	{r4, pc}

080a2b78 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2b78:	b570      	push	{r4, r5, r6, lr}
 80a2b7a:	4604      	mov	r4, r0
 80a2b7c:	460e      	mov	r6, r1
 80a2b7e:	4b07      	ldr	r3, [pc, #28]	; (80a2b9c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a2b80:	2500      	movs	r5, #0
 80a2b82:	6003      	str	r3, [r0, #0]
 80a2b84:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a2b88:	f7ff fc2e 	bl	80a23e8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a2b8c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a2b8e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a2b90:	f7ff fcf4 	bl	80a257c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a2b94:	60a5      	str	r5, [r4, #8]
}
 80a2b96:	4620      	mov	r0, r4
 80a2b98:	bd70      	pop	{r4, r5, r6, pc}
 80a2b9a:	bf00      	nop
 80a2b9c:	080a3d74 	.word	0x080a3d74

080a2ba0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a2ba0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a2ba4:	7900      	ldrb	r0, [r0, #4]
 80a2ba6:	f7ff bcc1 	b.w	80a252c <HAL_SPI_Begin>

080a2baa <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a2baa:	7900      	ldrb	r0, [r0, #4]
 80a2bac:	f7ff bcc6 	b.w	80a253c <HAL_SPI_Set_Bit_Order>

080a2bb0 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a2bb0:	7900      	ldrb	r0, [r0, #4]
 80a2bb2:	f7ff bccb 	b.w	80a254c <HAL_SPI_Set_Data_Mode>
	...

080a2bb8 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a2bb8:	4a05      	ldr	r2, [pc, #20]	; (80a2bd0 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a2bba:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a2bbc:	5c99      	ldrb	r1, [r3, r2]
 80a2bbe:	4281      	cmp	r1, r0
 80a2bc0:	d002      	beq.n	80a2bc8 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a2bc2:	3301      	adds	r3, #1
 80a2bc4:	2b08      	cmp	r3, #8
 80a2bc6:	d1f9      	bne.n	80a2bbc <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a2bc8:	1c58      	adds	r0, r3, #1
}
 80a2bca:	b2c0      	uxtb	r0, r0
 80a2bcc:	4770      	bx	lr
 80a2bce:	bf00      	nop
 80a2bd0:	080a3d7c 	.word	0x080a3d7c

080a2bd4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a2bd4:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a2bd6:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a2bd8:	6018      	str	r0, [r3, #0]
 80a2bda:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a2bdc:	6818      	ldr	r0, [r3, #0]
 80a2bde:	b2e5      	uxtb	r5, r4
 80a2be0:	4288      	cmp	r0, r1
 80a2be2:	d906      	bls.n	80a2bf2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a2be4:	3401      	adds	r4, #1
 80a2be6:	2c08      	cmp	r4, #8
 80a2be8:	d002      	beq.n	80a2bf0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a2bea:	0840      	lsrs	r0, r0, #1
 80a2bec:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a2bee:	e7f5      	b.n	80a2bdc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a2bf0:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a2bf2:	4b02      	ldr	r3, [pc, #8]	; (80a2bfc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a2bf4:	5d5b      	ldrb	r3, [r3, r5]
 80a2bf6:	7013      	strb	r3, [r2, #0]
 80a2bf8:	bd30      	pop	{r4, r5, pc}
 80a2bfa:	bf00      	nop
 80a2bfc:	080a3d7c 	.word	0x080a3d7c

080a2c00 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a2c00:	b570      	push	{r4, r5, r6, lr}
 80a2c02:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a2c04:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a2c08:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a2c0a:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a2c0c:	2214      	movs	r2, #20
 80a2c0e:	2100      	movs	r1, #0
 80a2c10:	a803      	add	r0, sp, #12
 80a2c12:	f000 fcce 	bl	80a35b2 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a2c16:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a2c18:	a903      	add	r1, sp, #12
 80a2c1a:	4630      	mov	r0, r6
 80a2c1c:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a2c1e:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a2c22:	f7ff fcbb 	bl	80a259c <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a2c26:	ab02      	add	r3, sp, #8
 80a2c28:	f10d 0207 	add.w	r2, sp, #7
 80a2c2c:	4629      	mov	r1, r5
 80a2c2e:	9804      	ldr	r0, [sp, #16]
 80a2c30:	f7ff ffd0 	bl	80a2bd4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2c34:	7920      	ldrb	r0, [r4, #4]
 80a2c36:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a2c3a:	f7ff fc8f 	bl	80a255c <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a2c3e:	9802      	ldr	r0, [sp, #8]
 80a2c40:	b008      	add	sp, #32
 80a2c42:	bd70      	pop	{r4, r5, r6, pc}

080a2c44 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a2c44:	b538      	push	{r3, r4, r5, lr}
 80a2c46:	4604      	mov	r4, r0
    if (dividerReference)
 80a2c48:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a2c4a:	4608      	mov	r0, r1
    if (dividerReference)
 80a2c4c:	b14d      	cbz	r5, 80a2c62 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a2c4e:	f7ff ffb3 	bl	80a2bb8 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a2c52:	2201      	movs	r2, #1
 80a2c54:	fa25 f100 	lsr.w	r1, r5, r0
 80a2c58:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a2c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a2c5e:	f7ff bfcf 	b.w	80a2c00 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2c62:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a2c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2c68:	f7ff bc78 	b.w	80a255c <HAL_SPI_Set_Clock_Divider>

080a2c6c <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a2c6c:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a2c6e:	7900      	ldrb	r0, [r0, #4]
 80a2c70:	f7ff fc7c 	bl	80a256c <HAL_SPI_Send_Receive_Data>
}
 80a2c74:	b2c0      	uxtb	r0, r0
 80a2c76:	bd08      	pop	{r3, pc}

080a2c78 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a2c78:	7900      	ldrb	r0, [r0, #4]
 80a2c7a:	f7ff bc87 	b.w	80a258c <HAL_SPI_Is_Enabled>
	...

080a2c80 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a2c84:	4b03      	ldr	r3, [pc, #12]	; (80a2c94 <_GLOBAL__sub_I_System+0x14>)
 80a2c86:	2000      	movs	r0, #0
 80a2c88:	7018      	strb	r0, [r3, #0]
 80a2c8a:	8058      	strh	r0, [r3, #2]
 80a2c8c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2c8e:	f7ff bd15 	b.w	80a26bc <set_system_mode>
 80a2c92:	bf00      	nop
 80a2c94:	20000558 	.word	0x20000558

080a2c98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2c98:	4b02      	ldr	r3, [pc, #8]	; (80a2ca4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2c9a:	681a      	ldr	r2, [r3, #0]
 80a2c9c:	4b02      	ldr	r3, [pc, #8]	; (80a2ca8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2c9e:	601a      	str	r2, [r3, #0]
 80a2ca0:	4770      	bx	lr
 80a2ca2:	bf00      	nop
 80a2ca4:	20000478 	.word	0x20000478
 80a2ca8:	20000560 	.word	0x20000560

080a2cac <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2cac:	4770      	bx	lr

080a2cae <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2cae:	7441      	strb	r1, [r0, #17]
 80a2cb0:	4770      	bx	lr

080a2cb2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2cb2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2cb4:	7c00      	ldrb	r0, [r0, #16]
 80a2cb6:	f7ff fcb1 	bl	80a261c <HAL_USART_Available_Data_For_Write>
}
 80a2cba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2cbe:	bd08      	pop	{r3, pc}

080a2cc0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2cc0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2cc2:	7c00      	ldrb	r0, [r0, #16]
 80a2cc4:	f7ff fc82 	bl	80a25cc <HAL_USART_Available_Data>
}
 80a2cc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2ccc:	bd08      	pop	{r3, pc}

080a2cce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2cce:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2cd0:	7c00      	ldrb	r0, [r0, #16]
 80a2cd2:	f7ff fc8b 	bl	80a25ec <HAL_USART_Peek_Data>
}
 80a2cd6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2cda:	bf28      	it	cs
 80a2cdc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2ce0:	bd08      	pop	{r3, pc}

080a2ce2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2ce2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2ce4:	7c00      	ldrb	r0, [r0, #16]
 80a2ce6:	f7ff fc79 	bl	80a25dc <HAL_USART_Read_Data>
}
 80a2cea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2cee:	bf28      	it	cs
 80a2cf0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2cf4:	bd08      	pop	{r3, pc}

080a2cf6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2cf6:	7c00      	ldrb	r0, [r0, #16]
 80a2cf8:	f7ff bc80 	b.w	80a25fc <HAL_USART_Flush_Data>

080a2cfc <_ZN11USARTSerialD0Ev>:
 80a2cfc:	b510      	push	{r4, lr}
 80a2cfe:	4604      	mov	r4, r0
 80a2d00:	2114      	movs	r1, #20
 80a2d02:	f000 faf2 	bl	80a32ea <_ZdlPvj>
 80a2d06:	4620      	mov	r0, r4
 80a2d08:	bd10      	pop	{r4, pc}

080a2d0a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2d0a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2d0c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2d0e:	4604      	mov	r4, r0
 80a2d10:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2d12:	b925      	cbnz	r5, 80a2d1e <_ZN11USARTSerial5writeEh+0x14>
 80a2d14:	7c00      	ldrb	r0, [r0, #16]
 80a2d16:	f7ff fc81 	bl	80a261c <HAL_USART_Available_Data_For_Write>
 80a2d1a:	2800      	cmp	r0, #0
 80a2d1c:	dd05      	ble.n	80a2d2a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2d1e:	4631      	mov	r1, r6
 80a2d20:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2d26:	f7ff bc49 	b.w	80a25bc <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2d2a:	4628      	mov	r0, r5
 80a2d2c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2d30 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2d30:	b510      	push	{r4, lr}
 80a2d32:	4604      	mov	r4, r0
 80a2d34:	4608      	mov	r0, r1
 80a2d36:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2d38:	2200      	movs	r2, #0
 80a2d3a:	6062      	str	r2, [r4, #4]
 80a2d3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2d40:	60a2      	str	r2, [r4, #8]
 80a2d42:	4a05      	ldr	r2, [pc, #20]	; (80a2d58 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2d44:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2d46:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2d48:	2201      	movs	r2, #1
 80a2d4a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2d4c:	461a      	mov	r2, r3
 80a2d4e:	f7ff fc2d 	bl	80a25ac <HAL_USART_Init>
}
 80a2d52:	4620      	mov	r0, r4
 80a2d54:	bd10      	pop	{r4, pc}
 80a2d56:	bf00      	nop
 80a2d58:	080a3db8 	.word	0x080a3db8

080a2d5c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2d5c:	7c00      	ldrb	r0, [r0, #16]
 80a2d5e:	f7ff bc55 	b.w	80a260c <HAL_USART_Is_Enabled>
	...

080a2d64 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a2d66:	4c19      	ldr	r4, [pc, #100]	; (80a2dcc <_Z22__fetch_global_Serial1v+0x68>)
 80a2d68:	6825      	ldr	r5, [r4, #0]
 80a2d6a:	b94d      	cbnz	r5, 80a2d80 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a2d6c:	2084      	movs	r0, #132	; 0x84
 80a2d6e:	f7fd f994 	bl	80a009a <_Znwj>
 80a2d72:	4606      	mov	r6, r0
 80a2d74:	b118      	cbz	r0, 80a2d7e <_Z22__fetch_global_Serial1v+0x1a>
 80a2d76:	2284      	movs	r2, #132	; 0x84
 80a2d78:	4629      	mov	r1, r5
 80a2d7a:	f000 fc1a 	bl	80a35b2 <memset>
 80a2d7e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a2d80:	4d13      	ldr	r5, [pc, #76]	; (80a2dd0 <_Z22__fetch_global_Serial1v+0x6c>)
 80a2d82:	682e      	ldr	r6, [r5, #0]
 80a2d84:	b94e      	cbnz	r6, 80a2d9a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a2d86:	2084      	movs	r0, #132	; 0x84
 80a2d88:	f7fd f987 	bl	80a009a <_Znwj>
 80a2d8c:	4607      	mov	r7, r0
 80a2d8e:	b118      	cbz	r0, 80a2d98 <_Z22__fetch_global_Serial1v+0x34>
 80a2d90:	2284      	movs	r2, #132	; 0x84
 80a2d92:	4631      	mov	r1, r6
 80a2d94:	f000 fc0d 	bl	80a35b2 <memset>
 80a2d98:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a2d9a:	4f0e      	ldr	r7, [pc, #56]	; (80a2dd4 <_Z22__fetch_global_Serial1v+0x70>)
 80a2d9c:	6839      	ldr	r1, [r7, #0]
 80a2d9e:	f011 0601 	ands.w	r6, r1, #1
 80a2da2:	d111      	bne.n	80a2dc8 <_Z22__fetch_global_Serial1v+0x64>
 80a2da4:	4638      	mov	r0, r7
 80a2da6:	f7fd f987 	bl	80a00b8 <__cxa_guard_acquire>
 80a2daa:	b168      	cbz	r0, 80a2dc8 <_Z22__fetch_global_Serial1v+0x64>
 80a2dac:	6822      	ldr	r2, [r4, #0]
 80a2dae:	4631      	mov	r1, r6
 80a2db0:	682b      	ldr	r3, [r5, #0]
 80a2db2:	4809      	ldr	r0, [pc, #36]	; (80a2dd8 <_Z22__fetch_global_Serial1v+0x74>)
 80a2db4:	f7ff ffbc 	bl	80a2d30 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2db8:	4638      	mov	r0, r7
 80a2dba:	f7fd f982 	bl	80a00c2 <__cxa_guard_release>
 80a2dbe:	4a07      	ldr	r2, [pc, #28]	; (80a2ddc <_Z22__fetch_global_Serial1v+0x78>)
 80a2dc0:	4907      	ldr	r1, [pc, #28]	; (80a2de0 <_Z22__fetch_global_Serial1v+0x7c>)
 80a2dc2:	4805      	ldr	r0, [pc, #20]	; (80a2dd8 <_Z22__fetch_global_Serial1v+0x74>)
 80a2dc4:	f000 fa8c 	bl	80a32e0 <__aeabi_atexit>
#endif
	return serial1;
}
 80a2dc8:	4803      	ldr	r0, [pc, #12]	; (80a2dd8 <_Z22__fetch_global_Serial1v+0x74>)
 80a2dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2dcc:	20000580 	.word	0x20000580
 80a2dd0:	20000578 	.word	0x20000578
 80a2dd4:	2000057c 	.word	0x2000057c
 80a2dd8:	20000564 	.word	0x20000564
 80a2ddc:	200004e0 	.word	0x200004e0
 80a2de0:	080a2cad 	.word	0x080a2cad

080a2de4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2de4:	7441      	strb	r1, [r0, #17]
 80a2de6:	4770      	bx	lr

080a2de8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2de8:	4770      	bx	lr

080a2dea <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2dea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2dec:	2100      	movs	r1, #0
 80a2dee:	7c00      	ldrb	r0, [r0, #16]
 80a2df0:	f7ff fc3c 	bl	80a266c <HAL_USB_USART_Receive_Data>
}
 80a2df4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2df8:	bf28      	it	cs
 80a2dfa:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2dfe:	bd08      	pop	{r3, pc}

080a2e00 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2e00:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2e02:	2101      	movs	r1, #1
 80a2e04:	7c00      	ldrb	r0, [r0, #16]
 80a2e06:	f7ff fc31 	bl	80a266c <HAL_USB_USART_Receive_Data>
}
 80a2e0a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2e0e:	bf28      	it	cs
 80a2e10:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2e14:	bd08      	pop	{r3, pc}

080a2e16 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2e16:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2e18:	7c00      	ldrb	r0, [r0, #16]
 80a2e1a:	f7ff fc1f 	bl	80a265c <HAL_USB_USART_Available_Data_For_Write>
}
 80a2e1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2e22:	bd08      	pop	{r3, pc}

080a2e24 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2e24:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2e26:	7c00      	ldrb	r0, [r0, #16]
 80a2e28:	f7ff fc10 	bl	80a264c <HAL_USB_USART_Available_Data>
}
 80a2e2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2e30:	bd08      	pop	{r3, pc}

080a2e32 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2e32:	7c00      	ldrb	r0, [r0, #16]
 80a2e34:	f7ff bc2a 	b.w	80a268c <HAL_USB_USART_Flush_Data>

080a2e38 <_ZN9USBSerialD0Ev>:
 80a2e38:	b510      	push	{r4, lr}
 80a2e3a:	4604      	mov	r4, r0
 80a2e3c:	2114      	movs	r1, #20
 80a2e3e:	f000 fa54 	bl	80a32ea <_ZdlPvj>
 80a2e42:	4620      	mov	r0, r4
 80a2e44:	bd10      	pop	{r4, pc}

080a2e46 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2e46:	b538      	push	{r3, r4, r5, lr}
 80a2e48:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2e4a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2e4c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2e4e:	f7ff fc05 	bl	80a265c <HAL_USB_USART_Available_Data_For_Write>
 80a2e52:	2800      	cmp	r0, #0
 80a2e54:	dc01      	bgt.n	80a2e5a <_ZN9USBSerial5writeEh+0x14>
 80a2e56:	7c60      	ldrb	r0, [r4, #17]
 80a2e58:	b128      	cbz	r0, 80a2e66 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2e5a:	4629      	mov	r1, r5
 80a2e5c:	7c20      	ldrb	r0, [r4, #16]
 80a2e5e:	f7ff fc0d 	bl	80a267c <HAL_USB_USART_Send_Data>
 80a2e62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2e66:	bd38      	pop	{r3, r4, r5, pc}

080a2e68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2e68:	b510      	push	{r4, lr}
 80a2e6a:	4604      	mov	r4, r0
 80a2e6c:	2300      	movs	r3, #0
 80a2e6e:	6063      	str	r3, [r4, #4]
 80a2e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2e74:	60a3      	str	r3, [r4, #8]
 80a2e76:	4b05      	ldr	r3, [pc, #20]	; (80a2e8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2e78:	4608      	mov	r0, r1
 80a2e7a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2e7c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2e7e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2e80:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2e82:	4611      	mov	r1, r2
 80a2e84:	f7ff fbd2 	bl	80a262c <HAL_USB_USART_Init>
}
 80a2e88:	4620      	mov	r0, r4
 80a2e8a:	bd10      	pop	{r4, pc}
 80a2e8c:	080a3de8 	.word	0x080a3de8

080a2e90 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2e90:	2200      	movs	r2, #0
 80a2e92:	7c00      	ldrb	r0, [r0, #16]
 80a2e94:	f7ff bbd2 	b.w	80a263c <HAL_USB_USART_Begin>

080a2e98 <_Z19acquireSerialBufferv>:
 80a2e98:	b510      	push	{r4, lr}
 80a2e9a:	4604      	mov	r4, r0
 80a2e9c:	2214      	movs	r2, #20
 80a2e9e:	2100      	movs	r1, #0
 80a2ea0:	f000 fb87 	bl	80a35b2 <memset>
 80a2ea4:	4620      	mov	r0, r4
 80a2ea6:	bd10      	pop	{r4, pc}

080a2ea8 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2ea8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2eaa:	4d0e      	ldr	r5, [pc, #56]	; (80a2ee4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2eac:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2eae:	a801      	add	r0, sp, #4
 80a2eb0:	f7ff fff2 	bl	80a2e98 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2eb4:	6829      	ldr	r1, [r5, #0]
 80a2eb6:	f011 0401 	ands.w	r4, r1, #1
 80a2eba:	d110      	bne.n	80a2ede <_Z16_fetch_usbserialv+0x36>
 80a2ebc:	4628      	mov	r0, r5
 80a2ebe:	f7fd f8fb 	bl	80a00b8 <__cxa_guard_acquire>
 80a2ec2:	b160      	cbz	r0, 80a2ede <_Z16_fetch_usbserialv+0x36>
 80a2ec4:	aa01      	add	r2, sp, #4
 80a2ec6:	4621      	mov	r1, r4
 80a2ec8:	4807      	ldr	r0, [pc, #28]	; (80a2ee8 <_Z16_fetch_usbserialv+0x40>)
 80a2eca:	f7ff ffcd 	bl	80a2e68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2ece:	4628      	mov	r0, r5
 80a2ed0:	f7fd f8f7 	bl	80a00c2 <__cxa_guard_release>
 80a2ed4:	4a05      	ldr	r2, [pc, #20]	; (80a2eec <_Z16_fetch_usbserialv+0x44>)
 80a2ed6:	4906      	ldr	r1, [pc, #24]	; (80a2ef0 <_Z16_fetch_usbserialv+0x48>)
 80a2ed8:	4803      	ldr	r0, [pc, #12]	; (80a2ee8 <_Z16_fetch_usbserialv+0x40>)
 80a2eda:	f000 fa01 	bl	80a32e0 <__aeabi_atexit>
	return _usbserial;
}
 80a2ede:	4802      	ldr	r0, [pc, #8]	; (80a2ee8 <_Z16_fetch_usbserialv+0x40>)
 80a2ee0:	b007      	add	sp, #28
 80a2ee2:	bd30      	pop	{r4, r5, pc}
 80a2ee4:	20000584 	.word	0x20000584
 80a2ee8:	2000058c 	.word	0x2000058c
 80a2eec:	200004e0 	.word	0x200004e0
 80a2ef0:	080a2de9 	.word	0x080a2de9

080a2ef4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2ef4:	b510      	push	{r4, lr}
 80a2ef6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2ef8:	2214      	movs	r2, #20
 80a2efa:	2100      	movs	r1, #0
 80a2efc:	f000 fb59 	bl	80a35b2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2f00:	4620      	mov	r0, r4
 80a2f02:	bd10      	pop	{r4, pc}

080a2f04 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2f04:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2f06:	4c0e      	ldr	r4, [pc, #56]	; (80a2f40 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2f08:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2f0a:	a801      	add	r0, sp, #4
 80a2f0c:	f7ff fff2 	bl	80a2ef4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2f10:	6823      	ldr	r3, [r4, #0]
 80a2f12:	07db      	lsls	r3, r3, #31
 80a2f14:	d410      	bmi.n	80a2f38 <_Z17_fetch_usbserial1v+0x34>
 80a2f16:	4620      	mov	r0, r4
 80a2f18:	f7fd f8ce 	bl	80a00b8 <__cxa_guard_acquire>
 80a2f1c:	b160      	cbz	r0, 80a2f38 <_Z17_fetch_usbserial1v+0x34>
 80a2f1e:	aa01      	add	r2, sp, #4
 80a2f20:	2101      	movs	r1, #1
 80a2f22:	4808      	ldr	r0, [pc, #32]	; (80a2f44 <_Z17_fetch_usbserial1v+0x40>)
 80a2f24:	f7ff ffa0 	bl	80a2e68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2f28:	4620      	mov	r0, r4
 80a2f2a:	f7fd f8ca 	bl	80a00c2 <__cxa_guard_release>
 80a2f2e:	4a06      	ldr	r2, [pc, #24]	; (80a2f48 <_Z17_fetch_usbserial1v+0x44>)
 80a2f30:	4906      	ldr	r1, [pc, #24]	; (80a2f4c <_Z17_fetch_usbserial1v+0x48>)
 80a2f32:	4804      	ldr	r0, [pc, #16]	; (80a2f44 <_Z17_fetch_usbserial1v+0x40>)
 80a2f34:	f000 f9d4 	bl	80a32e0 <__aeabi_atexit>
  return _usbserial1;
}
 80a2f38:	4802      	ldr	r0, [pc, #8]	; (80a2f44 <_Z17_fetch_usbserial1v+0x40>)
 80a2f3a:	b006      	add	sp, #24
 80a2f3c:	bd10      	pop	{r4, pc}
 80a2f3e:	bf00      	nop
 80a2f40:	20000588 	.word	0x20000588
 80a2f44:	200005a0 	.word	0x200005a0
 80a2f48:	200004e0 	.word	0x200004e0
 80a2f4c:	080a2de9 	.word	0x080a2de9

080a2f50 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2f50:	2200      	movs	r2, #0
 80a2f52:	4611      	mov	r1, r2
 80a2f54:	6840      	ldr	r0, [r0, #4]
 80a2f56:	f7ff bbfd 	b.w	80a2754 <network_ready>

080a2f5a <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2f5c:	4616      	mov	r6, r2
 80a2f5e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2f60:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2f62:	460f      	mov	r7, r1
 80a2f64:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a2f66:	2100      	movs	r1, #0
 80a2f68:	a803      	add	r0, sp, #12
 80a2f6a:	f000 fb22 	bl	80a35b2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2f6e:	4630      	mov	r0, r6
 80a2f70:	f000 fb50 	bl	80a3614 <strlen>
 80a2f74:	2500      	movs	r5, #0
 80a2f76:	9500      	str	r5, [sp, #0]
 80a2f78:	b281      	uxth	r1, r0
 80a2f7a:	687b      	ldr	r3, [r7, #4]
 80a2f7c:	aa03      	add	r2, sp, #12
 80a2f7e:	4630      	mov	r0, r6
 80a2f80:	f7ff fb8c 	bl	80a269c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2f84:	b120      	cbz	r0, 80a2f90 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a2f86:	4629      	mov	r1, r5
 80a2f88:	4620      	mov	r0, r4
 80a2f8a:	f7ff fcdd 	bl	80a2948 <_ZN9IPAddressC1Em>
 80a2f8e:	e003      	b.n	80a2f98 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2f90:	a903      	add	r1, sp, #12
 80a2f92:	4620      	mov	r0, r4
 80a2f94:	f7ff fcc6 	bl	80a2924 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2f98:	4620      	mov	r0, r4
 80a2f9a:	b009      	add	sp, #36	; 0x24
 80a2f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2f9e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2f9e:	2200      	movs	r2, #0
 80a2fa0:	4611      	mov	r1, r2
 80a2fa2:	6840      	ldr	r0, [r0, #4]
 80a2fa4:	f7ff bbf6 	b.w	80a2794 <network_listening>

080a2fa8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2fa8:	2200      	movs	r2, #0
 80a2faa:	4611      	mov	r1, r2
 80a2fac:	6840      	ldr	r0, [r0, #4]
 80a2fae:	f7ff bc01 	b.w	80a27b4 <network_get_listen_timeout>

080a2fb2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2fb2:	2200      	movs	r2, #0
 80a2fb4:	6840      	ldr	r0, [r0, #4]
 80a2fb6:	f7ff bbf5 	b.w	80a27a4 <network_set_listen_timeout>

080a2fba <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2fba:	2200      	movs	r2, #0
 80a2fbc:	f081 0101 	eor.w	r1, r1, #1
 80a2fc0:	6840      	ldr	r0, [r0, #4]
 80a2fc2:	f7ff bbdf 	b.w	80a2784 <network_listen>

080a2fc6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a2fc6:	2300      	movs	r3, #0
 80a2fc8:	461a      	mov	r2, r3
 80a2fca:	4619      	mov	r1, r3
 80a2fcc:	6840      	ldr	r0, [r0, #4]
 80a2fce:	f7ff bbd1 	b.w	80a2774 <network_off>

080a2fd2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2fd2:	2300      	movs	r3, #0
 80a2fd4:	461a      	mov	r2, r3
 80a2fd6:	4619      	mov	r1, r3
 80a2fd8:	6840      	ldr	r0, [r0, #4]
 80a2fda:	f7ff bbc3 	b.w	80a2764 <network_on>

080a2fde <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2fde:	2200      	movs	r2, #0
 80a2fe0:	4611      	mov	r1, r2
 80a2fe2:	6840      	ldr	r0, [r0, #4]
 80a2fe4:	f7ff bba6 	b.w	80a2734 <network_connecting>

080a2fe8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2fe8:	2200      	movs	r2, #0
 80a2fea:	2102      	movs	r1, #2
 80a2fec:	6840      	ldr	r0, [r0, #4]
 80a2fee:	f7ff bba9 	b.w	80a2744 <network_disconnect>

080a2ff2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2ff2:	2300      	movs	r3, #0
 80a2ff4:	461a      	mov	r2, r3
 80a2ff6:	6840      	ldr	r0, [r0, #4]
 80a2ff8:	f7ff bb94 	b.w	80a2724 <network_connect>

080a2ffc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2ffc:	4b02      	ldr	r3, [pc, #8]	; (80a3008 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2ffe:	2204      	movs	r2, #4
 80a3000:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a3002:	4a02      	ldr	r2, [pc, #8]	; (80a300c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a3004:	601a      	str	r2, [r3, #0]
 80a3006:	4770      	bx	lr
 80a3008:	200005b4 	.word	0x200005b4
 80a300c:	080a3e18 	.word	0x080a3e18

080a3010 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a3010:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a3012:	4b14      	ldr	r3, [pc, #80]	; (80a3064 <serialEventRun+0x54>)
 80a3014:	b133      	cbz	r3, 80a3024 <serialEventRun+0x14>
 80a3016:	f7ff ff47 	bl	80a2ea8 <_Z16_fetch_usbserialv>
 80a301a:	6803      	ldr	r3, [r0, #0]
 80a301c:	691b      	ldr	r3, [r3, #16]
 80a301e:	4798      	blx	r3
 80a3020:	2800      	cmp	r0, #0
 80a3022:	dc16      	bgt.n	80a3052 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a3024:	4b10      	ldr	r3, [pc, #64]	; (80a3068 <serialEventRun+0x58>)
 80a3026:	b133      	cbz	r3, 80a3036 <serialEventRun+0x26>
 80a3028:	f7ff fe9c 	bl	80a2d64 <_Z22__fetch_global_Serial1v>
 80a302c:	6803      	ldr	r3, [r0, #0]
 80a302e:	691b      	ldr	r3, [r3, #16]
 80a3030:	4798      	blx	r3
 80a3032:	2800      	cmp	r0, #0
 80a3034:	dc10      	bgt.n	80a3058 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a3036:	4b0d      	ldr	r3, [pc, #52]	; (80a306c <serialEventRun+0x5c>)
 80a3038:	b10b      	cbz	r3, 80a303e <serialEventRun+0x2e>
 80a303a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a303e:	4b0c      	ldr	r3, [pc, #48]	; (80a3070 <serialEventRun+0x60>)
 80a3040:	b17b      	cbz	r3, 80a3062 <serialEventRun+0x52>
 80a3042:	f7ff ff5f 	bl	80a2f04 <_Z17_fetch_usbserial1v>
 80a3046:	6803      	ldr	r3, [r0, #0]
 80a3048:	691b      	ldr	r3, [r3, #16]
 80a304a:	4798      	blx	r3
 80a304c:	2800      	cmp	r0, #0
 80a304e:	dc06      	bgt.n	80a305e <serialEventRun+0x4e>
 80a3050:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a3052:	f3af 8000 	nop.w
 80a3056:	e7e5      	b.n	80a3024 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a3058:	f3af 8000 	nop.w
 80a305c:	e7eb      	b.n	80a3036 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a305e:	f3af 8000 	nop.w
 80a3062:	bd08      	pop	{r3, pc}
	...

080a3074 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a3074:	b508      	push	{r3, lr}
	serialEventRun();
 80a3076:	f7ff ffcb 	bl	80a3010 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a307a:	f7ff f9d5 	bl	80a2428 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a307e:	4b01      	ldr	r3, [pc, #4]	; (80a3084 <_post_loop+0x10>)
 80a3080:	6018      	str	r0, [r3, #0]
 80a3082:	bd08      	pop	{r3, pc}
 80a3084:	200005c4 	.word	0x200005c4

080a3088 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a3088:	4802      	ldr	r0, [pc, #8]	; (80a3094 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a308a:	4a03      	ldr	r2, [pc, #12]	; (80a3098 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a308c:	4903      	ldr	r1, [pc, #12]	; (80a309c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a308e:	1a12      	subs	r2, r2, r0
 80a3090:	f000 ba84 	b.w	80a359c <memcpy>
 80a3094:	40024000 	.word	0x40024000
 80a3098:	40024004 	.word	0x40024004
 80a309c:	080a3f00 	.word	0x080a3f00

080a30a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a30a0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a30a2:	2300      	movs	r3, #0
 80a30a4:	9300      	str	r3, [sp, #0]
 80a30a6:	461a      	mov	r2, r3
 80a30a8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a30ac:	f7ff fb20 	bl	80a26f0 <system_ctrl_set_result>
}
 80a30b0:	b003      	add	sp, #12
 80a30b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a30b8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a30b8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a30ba:	8843      	ldrh	r3, [r0, #2]
 80a30bc:	2b0a      	cmp	r3, #10
 80a30be:	d008      	beq.n	80a30d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a30c0:	2b50      	cmp	r3, #80	; 0x50
 80a30c2:	d109      	bne.n	80a30d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a30c4:	4b09      	ldr	r3, [pc, #36]	; (80a30ec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a30c6:	681b      	ldr	r3, [r3, #0]
 80a30c8:	b13b      	cbz	r3, 80a30da <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a30ca:	b003      	add	sp, #12
 80a30cc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a30d0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a30d2:	f7ff ffe5 	bl	80a30a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a30d6:	e006      	b.n	80a30e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a30d8:	2300      	movs	r3, #0
 80a30da:	9300      	str	r3, [sp, #0]
 80a30dc:	461a      	mov	r2, r3
 80a30de:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a30e2:	f7ff fb05 	bl	80a26f0 <system_ctrl_set_result>
        break;
    }
}
 80a30e6:	b003      	add	sp, #12
 80a30e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80a30ec:	200005bc 	.word	0x200005bc

080a30f0 <module_user_init_hook>:

void module_user_init_hook()
{
 80a30f0:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a30f2:	4c10      	ldr	r4, [pc, #64]	; (80a3134 <module_user_init_hook+0x44>)
 80a30f4:	4d10      	ldr	r5, [pc, #64]	; (80a3138 <module_user_init_hook+0x48>)
 80a30f6:	6823      	ldr	r3, [r4, #0]
 80a30f8:	42ab      	cmp	r3, r5
 80a30fa:	4b10      	ldr	r3, [pc, #64]	; (80a313c <module_user_init_hook+0x4c>)
 80a30fc:	bf0c      	ite	eq
 80a30fe:	2201      	moveq	r2, #1
 80a3100:	2200      	movne	r2, #0
 80a3102:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3104:	d002      	beq.n	80a310c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a3106:	f7ff ffbf 	bl	80a3088 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a310a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a310c:	f7ff f974 	bl	80a23f8 <HAL_RNG_GetRandomNumber>
 80a3110:	4604      	mov	r4, r0
    srand(seed);
 80a3112:	f000 fa57 	bl	80a35c4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a3116:	4b0a      	ldr	r3, [pc, #40]	; (80a3140 <module_user_init_hook+0x50>)
 80a3118:	b113      	cbz	r3, 80a3120 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a311a:	4620      	mov	r0, r4
 80a311c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a3120:	2100      	movs	r1, #0
 80a3122:	4807      	ldr	r0, [pc, #28]	; (80a3140 <module_user_init_hook+0x50>)
 80a3124:	f7ff faf6 	bl	80a2714 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a3128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a312c:	2100      	movs	r1, #0
 80a312e:	4805      	ldr	r0, [pc, #20]	; (80a3144 <module_user_init_hook+0x54>)
 80a3130:	f7ff bad4 	b.w	80a26dc <system_ctrl_set_app_request_handler>
 80a3134:	40024000 	.word	0x40024000
 80a3138:	9a271c1e 	.word	0x9a271c1e
 80a313c:	200005c0 	.word	0x200005c0
 80a3140:	00000000 	.word	0x00000000
 80a3144:	080a30b9 	.word	0x080a30b9

080a3148 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a3148:	b510      	push	{r4, lr}
 80a314a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a314c:	480f      	ldr	r0, [pc, #60]	; (80a318c <pinAvailable+0x44>)
 80a314e:	f7ff fd93 	bl	80a2c78 <_ZN8SPIClass9isEnabledEv>
 80a3152:	b128      	cbz	r0, 80a3160 <pinAvailable+0x18>
 80a3154:	f1a4 030d 	sub.w	r3, r4, #13
 80a3158:	2b02      	cmp	r3, #2
 80a315a:	d801      	bhi.n	80a3160 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a315c:	2000      	movs	r0, #0
 80a315e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a3160:	f000 f864 	bl	80a322c <_Z19__fetch_global_Wirev>
 80a3164:	f7ff fbaa 	bl	80a28bc <_ZN7TwoWire9isEnabledEv>
 80a3168:	b108      	cbz	r0, 80a316e <pinAvailable+0x26>
 80a316a:	2c01      	cmp	r4, #1
 80a316c:	d9f6      	bls.n	80a315c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a316e:	f7ff fdf9 	bl	80a2d64 <_Z22__fetch_global_Serial1v>
 80a3172:	f7ff fdf3 	bl	80a2d5c <_ZN11USARTSerial9isEnabledEv>
 80a3176:	b118      	cbz	r0, 80a3180 <pinAvailable+0x38>
 80a3178:	f1a4 0312 	sub.w	r3, r4, #18
 80a317c:	2b01      	cmp	r3, #1
 80a317e:	d9ed      	bls.n	80a315c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a3180:	2c17      	cmp	r4, #23
 80a3182:	bf8c      	ite	hi
 80a3184:	2000      	movhi	r0, #0
 80a3186:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a3188:	bd10      	pop	{r4, pc}
 80a318a:	bf00      	nop
 80a318c:	200005f8 	.word	0x200005f8

080a3190 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3190:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a3192:	b538      	push	{r3, r4, r5, lr}
 80a3194:	4604      	mov	r4, r0
 80a3196:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3198:	d80a      	bhi.n	80a31b0 <pinMode+0x20>
 80a319a:	29ff      	cmp	r1, #255	; 0xff
 80a319c:	d008      	beq.n	80a31b0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a319e:	f7ff ffd3 	bl	80a3148 <pinAvailable>
 80a31a2:	b128      	cbz	r0, 80a31b0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a31a4:	4629      	mov	r1, r5
 80a31a6:	4620      	mov	r0, r4
}
 80a31a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a31ac:	f7ff b94c 	b.w	80a2448 <HAL_Pin_Mode>
 80a31b0:	bd38      	pop	{r3, r4, r5, pc}

080a31b2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a31b2:	b538      	push	{r3, r4, r5, lr}
 80a31b4:	4604      	mov	r4, r0
 80a31b6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a31b8:	f7ff f94e 	bl	80a2458 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a31bc:	28ff      	cmp	r0, #255	; 0xff
 80a31be:	d010      	beq.n	80a31e2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a31c0:	2806      	cmp	r0, #6
 80a31c2:	d804      	bhi.n	80a31ce <digitalWrite+0x1c>
 80a31c4:	234d      	movs	r3, #77	; 0x4d
 80a31c6:	fa23 f000 	lsr.w	r0, r3, r0
 80a31ca:	07c3      	lsls	r3, r0, #31
 80a31cc:	d409      	bmi.n	80a31e2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a31ce:	4620      	mov	r0, r4
 80a31d0:	f7ff ffba 	bl	80a3148 <pinAvailable>
 80a31d4:	b128      	cbz	r0, 80a31e2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a31d6:	4629      	mov	r1, r5
 80a31d8:	4620      	mov	r0, r4
}
 80a31da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a31de:	f7ff b943 	b.w	80a2468 <HAL_GPIO_Write>
 80a31e2:	bd38      	pop	{r3, r4, r5, pc}

080a31e4 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 80a31e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a31e8:	4690      	mov	r8, r2
 80a31ea:	461e      	mov	r6, r3
 80a31ec:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
 80a31ee:	460d      	mov	r5, r1
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 80a31f0:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
 80a31f2:	f1b8 0f00 	cmp.w	r8, #0
 80a31f6:	d104      	bne.n	80a3202 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
 80a31f8:	f1c4 0107 	rsb	r1, r4, #7
 80a31fc:	fa46 f101 	asr.w	r1, r6, r1
 80a3200:	e001      	b.n	80a3206 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 80a3202:	fa46 f104 	asr.w	r1, r6, r4
 80a3206:	f001 0101 	and.w	r1, r1, #1
 80a320a:	4638      	mov	r0, r7
 80a320c:	f7ff ffd1 	bl	80a31b2 <digitalWrite>

    digitalWrite(clockPin, HIGH);
 80a3210:	2101      	movs	r1, #1
 80a3212:	4628      	mov	r0, r5
 80a3214:	f7ff ffcd 	bl	80a31b2 <digitalWrite>
    digitalWrite(clockPin, LOW);
 80a3218:	2100      	movs	r1, #0
 80a321a:	4628      	mov	r0, r5
 80a321c:	f7ff ffc9 	bl	80a31b2 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
 80a3220:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80a3224:	d2e5      	bcs.n	80a31f2 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
 80a3226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a322c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a322c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a322e:	4d0b      	ldr	r5, [pc, #44]	; (80a325c <_Z19__fetch_global_Wirev+0x30>)
 80a3230:	6829      	ldr	r1, [r5, #0]
 80a3232:	f011 0401 	ands.w	r4, r1, #1
 80a3236:	d10f      	bne.n	80a3258 <_Z19__fetch_global_Wirev+0x2c>
 80a3238:	4628      	mov	r0, r5
 80a323a:	f7fc ff3d 	bl	80a00b8 <__cxa_guard_acquire>
 80a323e:	b158      	cbz	r0, 80a3258 <_Z19__fetch_global_Wirev+0x2c>
 80a3240:	4621      	mov	r1, r4
 80a3242:	4807      	ldr	r0, [pc, #28]	; (80a3260 <_Z19__fetch_global_Wirev+0x34>)
 80a3244:	f7ff fb06 	bl	80a2854 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a3248:	4628      	mov	r0, r5
 80a324a:	f7fc ff3a 	bl	80a00c2 <__cxa_guard_release>
 80a324e:	4a05      	ldr	r2, [pc, #20]	; (80a3264 <_Z19__fetch_global_Wirev+0x38>)
 80a3250:	4905      	ldr	r1, [pc, #20]	; (80a3268 <_Z19__fetch_global_Wirev+0x3c>)
 80a3252:	4803      	ldr	r0, [pc, #12]	; (80a3260 <_Z19__fetch_global_Wirev+0x34>)
 80a3254:	f000 f844 	bl	80a32e0 <__aeabi_atexit>
	return wire;
}
 80a3258:	4801      	ldr	r0, [pc, #4]	; (80a3260 <_Z19__fetch_global_Wirev+0x34>)
 80a325a:	bd38      	pop	{r3, r4, r5, pc}
 80a325c:	200005c8 	.word	0x200005c8
 80a3260:	200005cc 	.word	0x200005cc
 80a3264:	200004e0 	.word	0x200004e0
 80a3268:	080a27fd 	.word	0x080a27fd

080a326c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a326c:	b513      	push	{r0, r1, r4, lr}
 80a326e:	4c08      	ldr	r4, [pc, #32]	; (80a3290 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3270:	2300      	movs	r3, #0
 80a3272:	461a      	mov	r2, r3
 80a3274:	4619      	mov	r1, r3
 80a3276:	9300      	str	r3, [sp, #0]
 80a3278:	4620      	mov	r0, r4
 80a327a:	f7ff fb7b 	bl	80a2974 <_ZN9IPAddressC1Ehhhh>
 80a327e:	4620      	mov	r0, r4
 80a3280:	4a04      	ldr	r2, [pc, #16]	; (80a3294 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3282:	4905      	ldr	r1, [pc, #20]	; (80a3298 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3284:	b002      	add	sp, #8
 80a3286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a328a:	f000 b829 	b.w	80a32e0 <__aeabi_atexit>
 80a328e:	bf00      	nop
 80a3290:	200005e0 	.word	0x200005e0
 80a3294:	200004e0 	.word	0x200004e0
 80a3298:	080a28c5 	.word	0x080a28c5

080a329c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a329c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a329e:	4c0c      	ldr	r4, [pc, #48]	; (80a32d0 <_GLOBAL__sub_I_SPI+0x34>)
 80a32a0:	4e0c      	ldr	r6, [pc, #48]	; (80a32d4 <_GLOBAL__sub_I_SPI+0x38>)
 80a32a2:	4d0d      	ldr	r5, [pc, #52]	; (80a32d8 <_GLOBAL__sub_I_SPI+0x3c>)
 80a32a4:	2100      	movs	r1, #0
 80a32a6:	4620      	mov	r0, r4
 80a32a8:	f7ff fc66 	bl	80a2b78 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a32ac:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a32ae:	4c0b      	ldr	r4, [pc, #44]	; (80a32dc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a32b0:	4632      	mov	r2, r6
 80a32b2:	4629      	mov	r1, r5
 80a32b4:	f000 f814 	bl	80a32e0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a32b8:	2101      	movs	r1, #1
 80a32ba:	4620      	mov	r0, r4
 80a32bc:	f7ff fc5c 	bl	80a2b78 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a32c0:	4632      	mov	r2, r6
 80a32c2:	4629      	mov	r1, r5
 80a32c4:	4620      	mov	r0, r4
 80a32c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a32ca:	f000 b809 	b.w	80a32e0 <__aeabi_atexit>
 80a32ce:	bf00      	nop
 80a32d0:	200005f8 	.word	0x200005f8
 80a32d4:	200004e0 	.word	0x200004e0
 80a32d8:	080a2b69 	.word	0x080a2b69
 80a32dc:	20000608 	.word	0x20000608

080a32e0 <__aeabi_atexit>:
 80a32e0:	460b      	mov	r3, r1
 80a32e2:	4601      	mov	r1, r0
 80a32e4:	4618      	mov	r0, r3
 80a32e6:	f000 b94b 	b.w	80a3580 <__cxa_atexit>

080a32ea <_ZdlPvj>:
 80a32ea:	f7fc bed8 	b.w	80a009e <_ZdlPv>
	...

080a32f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a32f0:	4b24      	ldr	r3, [pc, #144]	; (80a3384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a32f2:	681a      	ldr	r2, [r3, #0]
 80a32f4:	07d0      	lsls	r0, r2, #31
 80a32f6:	bf5c      	itt	pl
 80a32f8:	2201      	movpl	r2, #1
 80a32fa:	601a      	strpl	r2, [r3, #0]
 80a32fc:	4b22      	ldr	r3, [pc, #136]	; (80a3388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a32fe:	681a      	ldr	r2, [r3, #0]
 80a3300:	07d1      	lsls	r1, r2, #31
 80a3302:	bf5c      	itt	pl
 80a3304:	2201      	movpl	r2, #1
 80a3306:	601a      	strpl	r2, [r3, #0]
 80a3308:	4b20      	ldr	r3, [pc, #128]	; (80a338c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a330a:	681a      	ldr	r2, [r3, #0]
 80a330c:	07d2      	lsls	r2, r2, #31
 80a330e:	bf5c      	itt	pl
 80a3310:	2201      	movpl	r2, #1
 80a3312:	601a      	strpl	r2, [r3, #0]
 80a3314:	4b1e      	ldr	r3, [pc, #120]	; (80a3390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a3316:	681a      	ldr	r2, [r3, #0]
 80a3318:	07d0      	lsls	r0, r2, #31
 80a331a:	bf5c      	itt	pl
 80a331c:	2201      	movpl	r2, #1
 80a331e:	601a      	strpl	r2, [r3, #0]
 80a3320:	4b1c      	ldr	r3, [pc, #112]	; (80a3394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a3322:	681a      	ldr	r2, [r3, #0]
 80a3324:	07d1      	lsls	r1, r2, #31
 80a3326:	bf5c      	itt	pl
 80a3328:	2201      	movpl	r2, #1
 80a332a:	601a      	strpl	r2, [r3, #0]
 80a332c:	4b1a      	ldr	r3, [pc, #104]	; (80a3398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a332e:	681a      	ldr	r2, [r3, #0]
 80a3330:	07d2      	lsls	r2, r2, #31
 80a3332:	bf5c      	itt	pl
 80a3334:	2201      	movpl	r2, #1
 80a3336:	601a      	strpl	r2, [r3, #0]
 80a3338:	4b18      	ldr	r3, [pc, #96]	; (80a339c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a333a:	681a      	ldr	r2, [r3, #0]
 80a333c:	07d0      	lsls	r0, r2, #31
 80a333e:	bf5c      	itt	pl
 80a3340:	2201      	movpl	r2, #1
 80a3342:	601a      	strpl	r2, [r3, #0]
 80a3344:	4b16      	ldr	r3, [pc, #88]	; (80a33a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a3346:	681a      	ldr	r2, [r3, #0]
 80a3348:	07d1      	lsls	r1, r2, #31
 80a334a:	bf5c      	itt	pl
 80a334c:	2201      	movpl	r2, #1
 80a334e:	601a      	strpl	r2, [r3, #0]
 80a3350:	4b14      	ldr	r3, [pc, #80]	; (80a33a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a3352:	681a      	ldr	r2, [r3, #0]
 80a3354:	07d2      	lsls	r2, r2, #31
 80a3356:	bf5c      	itt	pl
 80a3358:	2201      	movpl	r2, #1
 80a335a:	601a      	strpl	r2, [r3, #0]
 80a335c:	4b12      	ldr	r3, [pc, #72]	; (80a33a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a335e:	681a      	ldr	r2, [r3, #0]
 80a3360:	07d0      	lsls	r0, r2, #31
 80a3362:	bf5c      	itt	pl
 80a3364:	2201      	movpl	r2, #1
 80a3366:	601a      	strpl	r2, [r3, #0]
 80a3368:	4b10      	ldr	r3, [pc, #64]	; (80a33ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a336a:	681a      	ldr	r2, [r3, #0]
 80a336c:	07d1      	lsls	r1, r2, #31
 80a336e:	bf5c      	itt	pl
 80a3370:	2201      	movpl	r2, #1
 80a3372:	601a      	strpl	r2, [r3, #0]
 80a3374:	4b0e      	ldr	r3, [pc, #56]	; (80a33b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a3376:	681a      	ldr	r2, [r3, #0]
 80a3378:	07d2      	lsls	r2, r2, #31
 80a337a:	bf5c      	itt	pl
 80a337c:	2201      	movpl	r2, #1
 80a337e:	601a      	strpl	r2, [r3, #0]
 80a3380:	4770      	bx	lr
 80a3382:	bf00      	nop
 80a3384:	20000644 	.word	0x20000644
 80a3388:	20000640 	.word	0x20000640
 80a338c:	2000063c 	.word	0x2000063c
 80a3390:	20000638 	.word	0x20000638
 80a3394:	20000634 	.word	0x20000634
 80a3398:	20000630 	.word	0x20000630
 80a339c:	2000062c 	.word	0x2000062c
 80a33a0:	20000628 	.word	0x20000628
 80a33a4:	20000624 	.word	0x20000624
 80a33a8:	20000620 	.word	0x20000620
 80a33ac:	2000061c 	.word	0x2000061c
 80a33b0:	20000618 	.word	0x20000618

080a33b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a33b4:	4b18      	ldr	r3, [pc, #96]	; (80a3418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a33b6:	681a      	ldr	r2, [r3, #0]
 80a33b8:	07d1      	lsls	r1, r2, #31
 80a33ba:	bf5c      	itt	pl
 80a33bc:	2201      	movpl	r2, #1
 80a33be:	601a      	strpl	r2, [r3, #0]
 80a33c0:	4b16      	ldr	r3, [pc, #88]	; (80a341c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a33c2:	681a      	ldr	r2, [r3, #0]
 80a33c4:	07d2      	lsls	r2, r2, #31
 80a33c6:	bf5c      	itt	pl
 80a33c8:	2201      	movpl	r2, #1
 80a33ca:	601a      	strpl	r2, [r3, #0]
 80a33cc:	4b14      	ldr	r3, [pc, #80]	; (80a3420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a33ce:	681a      	ldr	r2, [r3, #0]
 80a33d0:	07d0      	lsls	r0, r2, #31
 80a33d2:	bf5c      	itt	pl
 80a33d4:	2201      	movpl	r2, #1
 80a33d6:	601a      	strpl	r2, [r3, #0]
 80a33d8:	4b12      	ldr	r3, [pc, #72]	; (80a3424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a33da:	681a      	ldr	r2, [r3, #0]
 80a33dc:	07d1      	lsls	r1, r2, #31
 80a33de:	bf5c      	itt	pl
 80a33e0:	2201      	movpl	r2, #1
 80a33e2:	601a      	strpl	r2, [r3, #0]
 80a33e4:	4b10      	ldr	r3, [pc, #64]	; (80a3428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a33e6:	681a      	ldr	r2, [r3, #0]
 80a33e8:	07d2      	lsls	r2, r2, #31
 80a33ea:	bf5c      	itt	pl
 80a33ec:	2201      	movpl	r2, #1
 80a33ee:	601a      	strpl	r2, [r3, #0]
 80a33f0:	4b0e      	ldr	r3, [pc, #56]	; (80a342c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a33f2:	681a      	ldr	r2, [r3, #0]
 80a33f4:	07d0      	lsls	r0, r2, #31
 80a33f6:	bf5c      	itt	pl
 80a33f8:	2201      	movpl	r2, #1
 80a33fa:	601a      	strpl	r2, [r3, #0]
 80a33fc:	4b0c      	ldr	r3, [pc, #48]	; (80a3430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a33fe:	681a      	ldr	r2, [r3, #0]
 80a3400:	07d1      	lsls	r1, r2, #31
 80a3402:	bf5c      	itt	pl
 80a3404:	2201      	movpl	r2, #1
 80a3406:	601a      	strpl	r2, [r3, #0]
 80a3408:	4b0a      	ldr	r3, [pc, #40]	; (80a3434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a340a:	681a      	ldr	r2, [r3, #0]
 80a340c:	07d2      	lsls	r2, r2, #31
 80a340e:	bf5c      	itt	pl
 80a3410:	2201      	movpl	r2, #1
 80a3412:	601a      	strpl	r2, [r3, #0]
 80a3414:	4770      	bx	lr
 80a3416:	bf00      	nop
 80a3418:	20000664 	.word	0x20000664
 80a341c:	20000660 	.word	0x20000660
 80a3420:	2000065c 	.word	0x2000065c
 80a3424:	20000658 	.word	0x20000658
 80a3428:	20000654 	.word	0x20000654
 80a342c:	20000650 	.word	0x20000650
 80a3430:	2000064c 	.word	0x2000064c
 80a3434:	20000648 	.word	0x20000648

080a3438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3438:	4b18      	ldr	r3, [pc, #96]	; (80a349c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a343a:	681a      	ldr	r2, [r3, #0]
 80a343c:	07d1      	lsls	r1, r2, #31
 80a343e:	bf5c      	itt	pl
 80a3440:	2201      	movpl	r2, #1
 80a3442:	601a      	strpl	r2, [r3, #0]
 80a3444:	4b16      	ldr	r3, [pc, #88]	; (80a34a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3446:	681a      	ldr	r2, [r3, #0]
 80a3448:	07d2      	lsls	r2, r2, #31
 80a344a:	bf5c      	itt	pl
 80a344c:	2201      	movpl	r2, #1
 80a344e:	601a      	strpl	r2, [r3, #0]
 80a3450:	4b14      	ldr	r3, [pc, #80]	; (80a34a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3452:	681a      	ldr	r2, [r3, #0]
 80a3454:	07d0      	lsls	r0, r2, #31
 80a3456:	bf5c      	itt	pl
 80a3458:	2201      	movpl	r2, #1
 80a345a:	601a      	strpl	r2, [r3, #0]
 80a345c:	4b12      	ldr	r3, [pc, #72]	; (80a34a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a345e:	681a      	ldr	r2, [r3, #0]
 80a3460:	07d1      	lsls	r1, r2, #31
 80a3462:	bf5c      	itt	pl
 80a3464:	2201      	movpl	r2, #1
 80a3466:	601a      	strpl	r2, [r3, #0]
 80a3468:	4b10      	ldr	r3, [pc, #64]	; (80a34ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a346a:	681a      	ldr	r2, [r3, #0]
 80a346c:	07d2      	lsls	r2, r2, #31
 80a346e:	bf5c      	itt	pl
 80a3470:	2201      	movpl	r2, #1
 80a3472:	601a      	strpl	r2, [r3, #0]
 80a3474:	4b0e      	ldr	r3, [pc, #56]	; (80a34b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3476:	681a      	ldr	r2, [r3, #0]
 80a3478:	07d0      	lsls	r0, r2, #31
 80a347a:	bf5c      	itt	pl
 80a347c:	2201      	movpl	r2, #1
 80a347e:	601a      	strpl	r2, [r3, #0]
 80a3480:	4b0c      	ldr	r3, [pc, #48]	; (80a34b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3482:	681a      	ldr	r2, [r3, #0]
 80a3484:	07d1      	lsls	r1, r2, #31
 80a3486:	bf5c      	itt	pl
 80a3488:	2201      	movpl	r2, #1
 80a348a:	601a      	strpl	r2, [r3, #0]
 80a348c:	4b0a      	ldr	r3, [pc, #40]	; (80a34b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a348e:	681a      	ldr	r2, [r3, #0]
 80a3490:	07d2      	lsls	r2, r2, #31
 80a3492:	bf5c      	itt	pl
 80a3494:	2201      	movpl	r2, #1
 80a3496:	601a      	strpl	r2, [r3, #0]
 80a3498:	4770      	bx	lr
 80a349a:	bf00      	nop
 80a349c:	20000684 	.word	0x20000684
 80a34a0:	20000680 	.word	0x20000680
 80a34a4:	2000067c 	.word	0x2000067c
 80a34a8:	20000678 	.word	0x20000678
 80a34ac:	20000674 	.word	0x20000674
 80a34b0:	20000670 	.word	0x20000670
 80a34b4:	2000066c 	.word	0x2000066c
 80a34b8:	20000668 	.word	0x20000668

080a34bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a34bc:	4b24      	ldr	r3, [pc, #144]	; (80a3550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a34be:	681a      	ldr	r2, [r3, #0]
 80a34c0:	07d0      	lsls	r0, r2, #31
 80a34c2:	bf5c      	itt	pl
 80a34c4:	2201      	movpl	r2, #1
 80a34c6:	601a      	strpl	r2, [r3, #0]
 80a34c8:	4b22      	ldr	r3, [pc, #136]	; (80a3554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a34ca:	681a      	ldr	r2, [r3, #0]
 80a34cc:	07d1      	lsls	r1, r2, #31
 80a34ce:	bf5c      	itt	pl
 80a34d0:	2201      	movpl	r2, #1
 80a34d2:	601a      	strpl	r2, [r3, #0]
 80a34d4:	4b20      	ldr	r3, [pc, #128]	; (80a3558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a34d6:	681a      	ldr	r2, [r3, #0]
 80a34d8:	07d2      	lsls	r2, r2, #31
 80a34da:	bf5c      	itt	pl
 80a34dc:	2201      	movpl	r2, #1
 80a34de:	601a      	strpl	r2, [r3, #0]
 80a34e0:	4b1e      	ldr	r3, [pc, #120]	; (80a355c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a34e2:	681a      	ldr	r2, [r3, #0]
 80a34e4:	07d0      	lsls	r0, r2, #31
 80a34e6:	bf5c      	itt	pl
 80a34e8:	2201      	movpl	r2, #1
 80a34ea:	601a      	strpl	r2, [r3, #0]
 80a34ec:	4b1c      	ldr	r3, [pc, #112]	; (80a3560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a34ee:	681a      	ldr	r2, [r3, #0]
 80a34f0:	07d1      	lsls	r1, r2, #31
 80a34f2:	bf5c      	itt	pl
 80a34f4:	2201      	movpl	r2, #1
 80a34f6:	601a      	strpl	r2, [r3, #0]
 80a34f8:	4b1a      	ldr	r3, [pc, #104]	; (80a3564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a34fa:	681a      	ldr	r2, [r3, #0]
 80a34fc:	07d2      	lsls	r2, r2, #31
 80a34fe:	bf5c      	itt	pl
 80a3500:	2201      	movpl	r2, #1
 80a3502:	601a      	strpl	r2, [r3, #0]
 80a3504:	4b18      	ldr	r3, [pc, #96]	; (80a3568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a3506:	681a      	ldr	r2, [r3, #0]
 80a3508:	07d0      	lsls	r0, r2, #31
 80a350a:	bf5c      	itt	pl
 80a350c:	2201      	movpl	r2, #1
 80a350e:	601a      	strpl	r2, [r3, #0]
 80a3510:	4b16      	ldr	r3, [pc, #88]	; (80a356c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a3512:	681a      	ldr	r2, [r3, #0]
 80a3514:	07d1      	lsls	r1, r2, #31
 80a3516:	bf5c      	itt	pl
 80a3518:	2201      	movpl	r2, #1
 80a351a:	601a      	strpl	r2, [r3, #0]
 80a351c:	4b14      	ldr	r3, [pc, #80]	; (80a3570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a351e:	681a      	ldr	r2, [r3, #0]
 80a3520:	07d2      	lsls	r2, r2, #31
 80a3522:	bf5c      	itt	pl
 80a3524:	2201      	movpl	r2, #1
 80a3526:	601a      	strpl	r2, [r3, #0]
 80a3528:	4b12      	ldr	r3, [pc, #72]	; (80a3574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a352a:	681a      	ldr	r2, [r3, #0]
 80a352c:	07d0      	lsls	r0, r2, #31
 80a352e:	bf5c      	itt	pl
 80a3530:	2201      	movpl	r2, #1
 80a3532:	601a      	strpl	r2, [r3, #0]
 80a3534:	4b10      	ldr	r3, [pc, #64]	; (80a3578 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a3536:	681a      	ldr	r2, [r3, #0]
 80a3538:	07d1      	lsls	r1, r2, #31
 80a353a:	bf5c      	itt	pl
 80a353c:	2201      	movpl	r2, #1
 80a353e:	601a      	strpl	r2, [r3, #0]
 80a3540:	4b0e      	ldr	r3, [pc, #56]	; (80a357c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a3542:	681a      	ldr	r2, [r3, #0]
 80a3544:	07d2      	lsls	r2, r2, #31
 80a3546:	bf5c      	itt	pl
 80a3548:	2201      	movpl	r2, #1
 80a354a:	601a      	strpl	r2, [r3, #0]
 80a354c:	4770      	bx	lr
 80a354e:	bf00      	nop
 80a3550:	200006b4 	.word	0x200006b4
 80a3554:	200006b0 	.word	0x200006b0
 80a3558:	200006ac 	.word	0x200006ac
 80a355c:	200006a8 	.word	0x200006a8
 80a3560:	200006a4 	.word	0x200006a4
 80a3564:	200006a0 	.word	0x200006a0
 80a3568:	2000069c 	.word	0x2000069c
 80a356c:	20000698 	.word	0x20000698
 80a3570:	20000694 	.word	0x20000694
 80a3574:	20000690 	.word	0x20000690
 80a3578:	2000068c 	.word	0x2000068c
 80a357c:	20000688 	.word	0x20000688

080a3580 <__cxa_atexit>:
 80a3580:	b510      	push	{r4, lr}
 80a3582:	4c05      	ldr	r4, [pc, #20]	; (80a3598 <__cxa_atexit+0x18>)
 80a3584:	4613      	mov	r3, r2
 80a3586:	b12c      	cbz	r4, 80a3594 <__cxa_atexit+0x14>
 80a3588:	460a      	mov	r2, r1
 80a358a:	4601      	mov	r1, r0
 80a358c:	2002      	movs	r0, #2
 80a358e:	f3af 8000 	nop.w
 80a3592:	bd10      	pop	{r4, pc}
 80a3594:	4620      	mov	r0, r4
 80a3596:	bd10      	pop	{r4, pc}
 80a3598:	00000000 	.word	0x00000000

080a359c <memcpy>:
 80a359c:	b510      	push	{r4, lr}
 80a359e:	1e43      	subs	r3, r0, #1
 80a35a0:	440a      	add	r2, r1
 80a35a2:	4291      	cmp	r1, r2
 80a35a4:	d004      	beq.n	80a35b0 <memcpy+0x14>
 80a35a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a35aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a35ae:	e7f8      	b.n	80a35a2 <memcpy+0x6>
 80a35b0:	bd10      	pop	{r4, pc}

080a35b2 <memset>:
 80a35b2:	4603      	mov	r3, r0
 80a35b4:	4402      	add	r2, r0
 80a35b6:	4293      	cmp	r3, r2
 80a35b8:	d002      	beq.n	80a35c0 <memset+0xe>
 80a35ba:	f803 1b01 	strb.w	r1, [r3], #1
 80a35be:	e7fa      	b.n	80a35b6 <memset+0x4>
 80a35c0:	4770      	bx	lr
	...

080a35c4 <srand>:
 80a35c4:	b538      	push	{r3, r4, r5, lr}
 80a35c6:	4b12      	ldr	r3, [pc, #72]	; (80a3610 <srand+0x4c>)
 80a35c8:	4605      	mov	r5, r0
 80a35ca:	681c      	ldr	r4, [r3, #0]
 80a35cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a35ce:	b9d3      	cbnz	r3, 80a3606 <srand+0x42>
 80a35d0:	2018      	movs	r0, #24
 80a35d2:	f7ff f8f7 	bl	80a27c4 <malloc>
 80a35d6:	f243 330e 	movw	r3, #13070	; 0x330e
 80a35da:	63a0      	str	r0, [r4, #56]	; 0x38
 80a35dc:	8003      	strh	r3, [r0, #0]
 80a35de:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a35e2:	8043      	strh	r3, [r0, #2]
 80a35e4:	f241 2334 	movw	r3, #4660	; 0x1234
 80a35e8:	8083      	strh	r3, [r0, #4]
 80a35ea:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a35ee:	80c3      	strh	r3, [r0, #6]
 80a35f0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a35f4:	8103      	strh	r3, [r0, #8]
 80a35f6:	2305      	movs	r3, #5
 80a35f8:	8143      	strh	r3, [r0, #10]
 80a35fa:	230b      	movs	r3, #11
 80a35fc:	8183      	strh	r3, [r0, #12]
 80a35fe:	2201      	movs	r2, #1
 80a3600:	2300      	movs	r3, #0
 80a3602:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3606:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3608:	2200      	movs	r2, #0
 80a360a:	611d      	str	r5, [r3, #16]
 80a360c:	615a      	str	r2, [r3, #20]
 80a360e:	bd38      	pop	{r3, r4, r5, pc}
 80a3610:	200004dc 	.word	0x200004dc

080a3614 <strlen>:
 80a3614:	4603      	mov	r3, r0
 80a3616:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a361a:	2a00      	cmp	r2, #0
 80a361c:	d1fb      	bne.n	80a3616 <strlen+0x2>
 80a361e:	1a18      	subs	r0, r3, r0
 80a3620:	3801      	subs	r0, #1
 80a3622:	4770      	bx	lr

080a3624 <dynalib_user>:
 80a3624:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a3634:	0000 0000 504d 3152 3132 6e20 746f 6620     ....MPR121 not f
 80a3644:	756f 646e 202c 6863 6365 206b 6977 6972     ound, check wiri
 80a3654:	676e 003f 504d 3152 3132 6620 756f 646e     ng?.MPR121 found
 80a3664:	0021 7845 6574 6e72 6c61 4820 7261 7764     !.External Hardw
 80a3674:	7261 2065 6554 7473 2a00 2a2a 2000 202d     are Test.***. - 
 80a3684:	2000 6f74 6375 6568 0064 7220 6c65 6165     . touched. relea
 80a3694:	6573 0064                                   sed.

080a3698 <_ZTV12Adafruit_GFX>:
	...
 80a36a8:	0921 080a 2a69 080a 00a5 080a 061d 080a     !...i*..........
 80a36b8:	073d 080a 0759 080a 06dd 080a 0773 080a     =...Y.......s...
 80a36c8:	07ab 080a 07c7 080a                         ........

080a36d0 <_ZL4font>:
 80a36d0:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 80a36e0:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 80a36f0:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 80a3700:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 80a3710:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 80a3720:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 80a3730:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 80a3740:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 80a3750:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 80a3760:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 80a3770:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 80a3780:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 80a3790:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 80a37a0:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 80a37b0:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 80a37c0:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 80a37d0:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 80a37e0:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 80a37f0:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 80a3800:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 80a3810:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 80a3820:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 80a3830:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 80a3840:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 80a3850:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 80a3860:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 80a3870:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 80a3880:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 80a3890:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 80a38a0:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 80a38b0:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 80a38c0:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 80a38d0:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 80a38e0:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 80a38f0:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 80a3900:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 80a3910:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 80a3920:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 80a3930:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 80a3940:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 80a3950:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 80a3960:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
 80a3970:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 80a3980:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 80a3990:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
 80a39a0:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 80a39b0:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
 80a39c0:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
 80a39d0:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
 80a39e0:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 80a39f0:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 80a3a00:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 80a3a10:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 80a3a20:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 80a3a30:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 80a3a40:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
 80a3a50:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
 80a3a60:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
 80a3a70:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
 80a3a80:	141f 1414 001f 1010 f010 0000 0000 101f     ................
 80a3a90:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
 80a3aa0:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
 80a3ab0:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
 80a3ac0:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
 80a3ad0:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
 80a3ae0:	1414 f414 1014 f010 f010 0000 101f 001f     ................
 80a3af0:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
 80a3b00:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
 80a3b10:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
 80a3b20:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
 80a3b30:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
 80a3b40:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
 80a3b50:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
 80a3b60:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
 80a3b70:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
 80a3b80:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
 80a3b90:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
 80a3ba0:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
 80a3bb0:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
 80a3bc0:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

080a3bcc <_ZTV16Adafruit_SSD1306>:
	...
 80a3bd4:	00c9 080a 039d 080a 0921 080a 2a69 080a     ........!...i*..
 80a3be4:	0cad 080a 061d 080a 0b15 080a 09a1 080a     ................
 80a3bf4:	06dd 080a 0773 080a 07ab 080a 07c7 080a     ....s...........

080a3c04 <CSWTCH.215>:
 80a3c04:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a3c14:	0050 0000                                   P...

080a3c18 <_ZTV7TwoWire>:
	...
 80a3c20:	27fd 080a 2847 080a 281f 080a 27ff 080a     .'..G(...(...'..
 80a3c30:	2827 080a 282f 080a 2837 080a 283f 080a     '(../(..7(..?(..

080a3c40 <_ZTV9IPAddress>:
	...
 80a3c48:	28d5 080a 28c5 080a 28c7 080a 6162 6475     .(...(...(..baud
 80a3c58:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a3c68:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a3c78:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a3c88:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a3c98:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a3ca8:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a3cb8:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a3cc8:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a3cd8:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a3ce8:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a3cf8:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a3d08:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a3d18:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a3d28:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a3d38 <_ZTVN5spark12NetworkClassE>:
	...
 80a3d40:	299d 080a 29a7 080a 29b1 080a 29bb 080a     .)...)...)...)..
 80a3d50:	29c5 080a 29d1 080a 29dd 080a 29e9 080a     .)...)...)...)..
 80a3d60:	29f1 080a 29fb 080a 2a05 080a               .)...)...*..

080a3d6c <_ZTV8SPIClass>:
	...
 80a3d74:	2b69 080a 2b6b 080a                         i+..k+..

080a3d7c <_ZL14clock_divisors>:
 80a3d7c:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
 80a3d8c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a3d9c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a3dac:	0000 0000                                   ....

080a3db0 <_ZTV11USARTSerial>:
	...
 80a3db8:	2cad 080a 2cfd 080a 2d0b 080a 2a69 080a     .,...,...-..i*..
 80a3dc8:	2cc1 080a 2ce3 080a 2ccf 080a 2cf7 080a     .,...,...,...,..
 80a3dd8:	2caf 080a 2cb3 080a                         .,...,..

080a3de0 <_ZTV9USBSerial>:
	...
 80a3de8:	2de9 080a 2e39 080a 2e47 080a 2a69 080a     .-..9...G...i*..
 80a3df8:	2e25 080a 2deb 080a 2e01 080a 2e33 080a     %....-......3...
 80a3e08:	2e17 080a 2de5 080a                         .....-..

080a3e10 <_ZTVN5spark9WiFiClassE>:
	...
 80a3e18:	2ff3 080a 2fe9 080a 2fdf 080a 2f51 080a     ./.../.../..Q/..
 80a3e28:	2fd3 080a 2fc7 080a 2fbb 080a 2fb3 080a     ./.../.../.../..
 80a3e38:	2fa9 080a 2f9f 080a 2f5b 080a               ./.../..[/..

080a3e44 <__sf_fake_stdin>:
	...

080a3e64 <__sf_fake_stdout>:
	...

080a3e84 <__sf_fake_stderr>:
	...
 80a3ea4:	0043                                        C.

080a3ea6 <link_const_variable_data_end>:
	...

080a3ea8 <link_constructors_location>:
 80a3ea8:	080a03ad 	.word	0x080a03ad
 80a3eac:	080a0619 	.word	0x080a0619
 80a3eb0:	080a099b 	.word	0x080a099b
 80a3eb4:	080a108d 	.word	0x080a108d
 80a3eb8:	080a1091 	.word	0x080a1091
 80a3ebc:	080a1095 	.word	0x080a1095
 80a3ec0:	080a1099 	.word	0x080a1099
 80a3ec4:	080a23d5 	.word	0x080a23d5
 80a3ec8:	080a298d 	.word	0x080a298d
 80a3ecc:	080a2a55 	.word	0x080a2a55
 80a3ed0:	080a2b4d 	.word	0x080a2b4d
 80a3ed4:	080a2c81 	.word	0x080a2c81
 80a3ed8:	080a2c99 	.word	0x080a2c99
 80a3edc:	080a2ffd 	.word	0x080a2ffd
 80a3ee0:	080a326d 	.word	0x080a326d
 80a3ee4:	080a329d 	.word	0x080a329d
 80a3ee8:	080a32f1 	.word	0x080a32f1
 80a3eec:	080a33b5 	.word	0x080a33b5
 80a3ef0:	080a3439 	.word	0x080a3439
 80a3ef4:	080a34bd 	.word	0x080a34bd

080a3ef8 <link_constructors_end>:
	...
