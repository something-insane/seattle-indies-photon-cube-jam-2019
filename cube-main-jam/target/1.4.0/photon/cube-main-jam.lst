
/Users/matthewmccord/Workspace/photon_iot/seattle-indies-photon-cube-jam-2019/cube-main-jam/target/1.4.0/photon/cube-main-jam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002fb4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2fd0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000128  20000000  080a2fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000240  20000128  20000128  00030128  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a30fc  080a30fc  000230fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3124  080a3124  00023124  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d63f6  00000000  00000000  00023128  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001399e  00000000  00000000  000f951e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016c9d  00000000  00000000  0010cebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002098  00000000  00000000  00123b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000031f8  00000000  00000000  00125bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002d827  00000000  00000000  00128de9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00030067  00000000  00000000  00156610  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ab26e  00000000  00000000  00186677  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bbbc  00000000  00000000  002318e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fdad 	bl	80a2b8c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fdb2 	bl	80a2ba2 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2fd4 	.word	0x080a2fd4
 80a004c:	20000128 	.word	0x20000128
 80a0050:	20000128 	.word	0x20000128
 80a0054:	20000368 	.word	0x20000368
 80a0058:	20000368 	.word	0x20000368

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fb63 	bl	80a2728 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2f7c 	.word	0x080a2f7c
 80a0084:	080a2fcc 	.word	0x080a2fcc

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b94e 	b.w	80a0328 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fa01 	bl	80a0494 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 bb09 	b.w	80a26ac <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 bf09 	b.w	80a1eb0 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 bf0f 	b.w	80a1ec0 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z16setCornerToColorim>:

  initCurrentLevel();
}

void setCornerToColor(int corner, uint32_t color) {
  stripCorners.setPixelColor(corner, color);
 80a00b4:	460a      	mov	r2, r1
 80a00b6:	b281      	uxth	r1, r0
 80a00b8:	4801      	ldr	r0, [pc, #4]	; (80a00c0 <_Z16setCornerToColorim+0xc>)
 80a00ba:	f001 bcc3 	b.w	80a1a44 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a00be:	bf00      	nop
 80a00c0:	200001b8 	.word	0x200001b8

080a00c4 <_Z18setAllCornerColorsv>:
}

void setAllCornerColors() {
 80a00c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a00c8:	4f0d      	ldr	r7, [pc, #52]	; (80a0100 <_Z18setAllCornerColorsv+0x3c>)
  // 8 Corners on the cube but we will just set the top 4
  for (int i = 4; i < 8; i += 1) {
    for (int j = 0; j < 3; j += 1 ) {
      setCornerToColor(cubeCornerLights[i][j], colorChoices[i - 4]);
 80a00ca:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80a0108 <_Z18setAllCornerColorsv+0x44>

void setCornerToColor(int corner, uint32_t color) {
  stripCorners.setPixelColor(corner, color);
}

void setAllCornerColors() {
 80a00ce:	2400      	movs	r4, #0
 80a00d0:	250c      	movs	r5, #12
 80a00d2:	fb05 7504 	mla	r5, r5, r4, r7
 80a00d6:	ea4f 0984 	mov.w	r9, r4, lsl #2
 80a00da:	3530      	adds	r5, #48	; 0x30
 80a00dc:	2600      	movs	r6, #0
  // 8 Corners on the cube but we will just set the top 4
  for (int i = 4; i < 8; i += 1) {
    for (int j = 0; j < 3; j += 1 ) {
      setCornerToColor(cubeCornerLights[i][j], colorChoices[i - 4]);
 80a00de:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 80a00e2:	f859 1008 	ldr.w	r1, [r9, r8]
}

void setAllCornerColors() {
  // 8 Corners on the cube but we will just set the top 4
  for (int i = 4; i < 8; i += 1) {
    for (int j = 0; j < 3; j += 1 ) {
 80a00e6:	3601      	adds	r6, #1
      setCornerToColor(cubeCornerLights[i][j], colorChoices[i - 4]);
 80a00e8:	f7ff ffe4 	bl	80a00b4 <_Z16setCornerToColorim>
}

void setAllCornerColors() {
  // 8 Corners on the cube but we will just set the top 4
  for (int i = 4; i < 8; i += 1) {
    for (int j = 0; j < 3; j += 1 ) {
 80a00ec:	2e03      	cmp	r6, #3
 80a00ee:	d1f6      	bne.n	80a00de <_Z18setAllCornerColorsv+0x1a>
 80a00f0:	3401      	adds	r4, #1
  stripCorners.setPixelColor(corner, color);
}

void setAllCornerColors() {
  // 8 Corners on the cube but we will just set the top 4
  for (int i = 4; i < 8; i += 1) {
 80a00f2:	2c04      	cmp	r4, #4
 80a00f4:	d1ec      	bne.n	80a00d0 <_Z18setAllCornerColorsv+0xc>
      setCornerToColor(cubeCornerLights[i][j], colorChoices[i - 4]);
    }
  }

  stripCorners.show();
}
 80a00f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for (int j = 0; j < 3; j += 1 ) {
      setCornerToColor(cubeCornerLights[i][j], colorChoices[i - 4]);
    }
  }

  stripCorners.show();
 80a00fa:	4802      	ldr	r0, [pc, #8]	; (80a0104 <_Z18setAllCornerColorsv+0x40>)
 80a00fc:	f000 bbe8 	b.w	80a08d0 <_ZN17Adafruit_NeoPixel4showEv>
 80a0100:	20000000 	.word	0x20000000
 80a0104:	200001b8 	.word	0x200001b8
 80a0108:	2000016c 	.word	0x2000016c

080a010c <_Z20clearAllCornerColorsv>:
}

void clearAllCornerColors() {
 80a010c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // 8 Corners on the cube
  for (int i = 0; i < 8; i += 1) {
    for (int j = 0; j < 3; j += 1 ) {
      setCornerToColor(cubeCornerLights[i][j], COLOR_OFF);
 80a0110:	4e0a      	ldr	r6, [pc, #40]	; (80a013c <_Z20clearAllCornerColorsv+0x30>)
 80a0112:	4f0b      	ldr	r7, [pc, #44]	; (80a0140 <_Z20clearAllCornerColorsv+0x34>)
  }

  stripCorners.show();
}

void clearAllCornerColors() {
 80a0114:	2400      	movs	r4, #0
 80a0116:	2500      	movs	r5, #0
  // 8 Corners on the cube
  for (int i = 0; i < 8; i += 1) {
    for (int j = 0; j < 3; j += 1 ) {
      setCornerToColor(cubeCornerLights[i][j], COLOR_OFF);
 80a0118:	eb07 0804 	add.w	r8, r7, r4
 80a011c:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 80a0120:	6831      	ldr	r1, [r6, #0]
}

void clearAllCornerColors() {
  // 8 Corners on the cube
  for (int i = 0; i < 8; i += 1) {
    for (int j = 0; j < 3; j += 1 ) {
 80a0122:	3501      	adds	r5, #1
      setCornerToColor(cubeCornerLights[i][j], COLOR_OFF);
 80a0124:	f7ff ffc6 	bl	80a00b4 <_Z16setCornerToColorim>
}

void clearAllCornerColors() {
  // 8 Corners on the cube
  for (int i = 0; i < 8; i += 1) {
    for (int j = 0; j < 3; j += 1 ) {
 80a0128:	2d03      	cmp	r5, #3
 80a012a:	d1f7      	bne.n	80a011c <_Z20clearAllCornerColorsv+0x10>
 80a012c:	340c      	adds	r4, #12
  stripCorners.show();
}

void clearAllCornerColors() {
  // 8 Corners on the cube
  for (int i = 0; i < 8; i += 1) {
 80a012e:	2c60      	cmp	r4, #96	; 0x60
 80a0130:	d1f1      	bne.n	80a0116 <_Z20clearAllCornerColorsv+0xa>
      setCornerToColor(cubeCornerLights[i][j], COLOR_OFF);
    }
  }

  stripCorners.show();
}
 80a0132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (int j = 0; j < 3; j += 1 ) {
      setCornerToColor(cubeCornerLights[i][j], COLOR_OFF);
    }
  }

  stripCorners.show();
 80a0136:	4803      	ldr	r0, [pc, #12]	; (80a0144 <_Z20clearAllCornerColorsv+0x38>)
 80a0138:	f000 bbca 	b.w	80a08d0 <_ZN17Adafruit_NeoPixel4showEv>
 80a013c:	200001d8 	.word	0x200001d8
 80a0140:	20000000 	.word	0x20000000
 80a0144:	200001b8 	.word	0x200001b8

080a0148 <_Z16initCurrentLevelv>:
  currentStateCounter = 0;

  gameState = newState;
}

void initCurrentLevel() {
 80a0148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  patternCount = 0;
 80a014a:	4b10      	ldr	r3, [pc, #64]	; (80a018c <_Z16initCurrentLevelv+0x44>)
 80a014c:	2400      	movs	r4, #0
 80a014e:	601c      	str	r4, [r3, #0]
  numberOfGuesses = 0;
 80a0150:	4b0f      	ldr	r3, [pc, #60]	; (80a0190 <_Z16initCurrentLevelv+0x48>)
  // int panels[] = { PANEL_ONE, PANEL_TWO, PANEL_THREE, PANEL_FOUR, PANEL_FIVE, PANEL_SIX };

  size_t sizer = sizeof(colorChoices) / sizeof(uint32_t);
  int counts = static_cast<int>(sizer);

  for (int i = 0; i < level; i += 1) {
 80a0152:	4f10      	ldr	r7, [pc, #64]	; (80a0194 <_Z16initCurrentLevelv+0x4c>)
 80a0154:	4d10      	ldr	r5, [pc, #64]	; (80a0198 <_Z16initCurrentLevelv+0x50>)
    int rndIndex = rand() % static_cast<int>(counts);

    pattern[i] = colorChoices[rndIndex];
 80a0156:	4e11      	ldr	r6, [pc, #68]	; (80a019c <_Z16initCurrentLevelv+0x54>)
  gameState = newState;
}

void initCurrentLevel() {
  patternCount = 0;
  numberOfGuesses = 0;
 80a0158:	601c      	str	r4, [r3, #0]
  // int panels[] = { PANEL_ONE, PANEL_TWO, PANEL_THREE, PANEL_FOUR, PANEL_FIVE, PANEL_SIX };

  size_t sizer = sizeof(colorChoices) / sizeof(uint32_t);
  int counts = static_cast<int>(sizer);

  for (int i = 0; i < level; i += 1) {
 80a015a:	683b      	ldr	r3, [r7, #0]
 80a015c:	429c      	cmp	r4, r3
 80a015e:	da10      	bge.n	80a0182 <_Z16initCurrentLevelv+0x3a>
    int rndIndex = rand() % static_cast<int>(counts);
 80a0160:	f002 fd50 	bl	80a2c04 <rand>

    pattern[i] = colorChoices[rndIndex];
 80a0164:	4b0e      	ldr	r3, [pc, #56]	; (80a01a0 <_Z16initCurrentLevelv+0x58>)
 80a0166:	00a2      	lsls	r2, r4, #2
 80a0168:	4003      	ands	r3, r0
 80a016a:	2b00      	cmp	r3, #0
 80a016c:	bfbe      	ittt	lt
 80a016e:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 80a0172:	f063 0303 	ornlt	r3, r3, #3
 80a0176:	3301      	addlt	r3, #1
 80a0178:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  // int panels[] = { PANEL_ONE, PANEL_TWO, PANEL_THREE, PANEL_FOUR, PANEL_FIVE, PANEL_SIX };

  size_t sizer = sizeof(colorChoices) / sizeof(uint32_t);
  int counts = static_cast<int>(sizer);

  for (int i = 0; i < level; i += 1) {
 80a017c:	3401      	adds	r4, #1
    int rndIndex = rand() % static_cast<int>(counts);

    pattern[i] = colorChoices[rndIndex];
 80a017e:	5153      	str	r3, [r2, r5]
  // int panels[] = { PANEL_ONE, PANEL_TWO, PANEL_THREE, PANEL_FOUR, PANEL_FIVE, PANEL_SIX };

  size_t sizer = sizeof(colorChoices) / sizeof(uint32_t);
  int counts = static_cast<int>(sizer);

  for (int i = 0; i < level; i += 1) {
 80a0180:	e7eb      	b.n	80a015a <_Z16initCurrentLevelv+0x12>
    int rndIndex = rand() % static_cast<int>(counts);

    pattern[i] = colorChoices[rndIndex];
  }

  currentCorrectPin = pattern[0];
 80a0182:	4b05      	ldr	r3, [pc, #20]	; (80a0198 <_Z16initCurrentLevelv+0x50>)
 80a0184:	681a      	ldr	r2, [r3, #0]
 80a0186:	4b07      	ldr	r3, [pc, #28]	; (80a01a4 <_Z16initCurrentLevelv+0x5c>)
 80a0188:	601a      	str	r2, [r3, #0]
 80a018a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a018c:	200001b0 	.word	0x200001b0
 80a0190:	200001a0 	.word	0x200001a0
 80a0194:	20000168 	.word	0x20000168
 80a0198:	2000012c 	.word	0x2000012c
 80a019c:	2000016c 	.word	0x2000016c
 80a01a0:	80000003 	.word	0x80000003
 80a01a4:	20000184 	.word	0x20000184

080a01a8 <_Z10touchSetupv>:
// Keeps track of the last pins touched
// so we know when buttons are 'released'
uint16_t lasttouched = 0;
uint16_t currtouched = 0;

void touchSetup() {
 80a01a8:	b510      	push	{r4, lr}
  // Default address is 0x5A, if tied to 3.3V its 0x5B
  // If tied to SDA its 0x5C and if SCL then 0x5D
  if (!cap.begin(0x5A)) {
 80a01aa:	215a      	movs	r1, #90	; 0x5a
 80a01ac:	480b      	ldr	r0, [pc, #44]	; (80a01dc <_Z10touchSetupv+0x34>)
 80a01ae:	f000 faa8 	bl	80a0702 <_ZN15Adafruit_MPR1215beginEh>
 80a01b2:	b958      	cbnz	r0, 80a01cc <_Z10touchSetupv+0x24>
    Serial.println("MPR121 not found, check wiring?");
 80a01b4:	f002 f994 	bl	80a24e0 <_Z16_fetch_usbserialv>
 80a01b8:	4909      	ldr	r1, [pc, #36]	; (80a01e0 <_Z10touchSetupv+0x38>)
 80a01ba:	f002 f800 	bl	80a21be <_ZN5Print7printlnEPKc>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a01be:	4c09      	ldr	r4, [pc, #36]	; (80a01e4 <_Z10touchSetupv+0x3c>)
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a01c0:	f001 fcd8 	bl	80a1b74 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a01c4:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a01c6:	f001 fe13 	bl	80a1df0 <spark_process>
 80a01ca:	e7f9      	b.n	80a01c0 <_Z10touchSetupv+0x18>
      #endif
    }

  }

  Serial.println("MPR121 found!");
 80a01cc:	f002 f988 	bl	80a24e0 <_Z16_fetch_usbserialv>
}
 80a01d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      #endif
    }

  }

  Serial.println("MPR121 found!");
 80a01d4:	4904      	ldr	r1, [pc, #16]	; (80a01e8 <_Z10touchSetupv+0x40>)
 80a01d6:	f001 bff2 	b.w	80a21be <_ZN5Print7printlnEPKc>
 80a01da:	bf00      	nop
 80a01dc:	20000180 	.word	0x20000180
 80a01e0:	080a2c9c 	.word	0x080a2c9c
 80a01e4:	20000274 	.word	0x20000274
 80a01e8:	080a2cbc 	.word	0x080a2cbc

080a01ec <_Z13neoPixelSetupv>:
}
#endif

void neoPixelSetup() {
 80a01ec:	b510      	push	{r4, lr}
  strip.setBrightness(BRIGHTNESS);
 80a01ee:	4c0c      	ldr	r4, [pc, #48]	; (80a0220 <_Z13neoPixelSetupv+0x34>)
 80a01f0:	2132      	movs	r1, #50	; 0x32
 80a01f2:	4620      	mov	r0, r4
 80a01f4:	f001 fc76 	bl	80a1ae4 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  strip.begin();
 80a01f8:	4620      	mov	r0, r4
 80a01fa:	f000 fb33 	bl	80a0864 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
 80a01fe:	4620      	mov	r0, r4

  stripCorners.setBrightness(BRIGHTNESS);
 80a0200:	4c08      	ldr	r4, [pc, #32]	; (80a0224 <_Z13neoPixelSetupv+0x38>)
#endif

void neoPixelSetup() {
  strip.setBrightness(BRIGHTNESS);
  strip.begin();
  strip.show();
 80a0202:	f000 fb65 	bl	80a08d0 <_ZN17Adafruit_NeoPixel4showEv>

  stripCorners.setBrightness(BRIGHTNESS);
 80a0206:	4620      	mov	r0, r4
 80a0208:	2132      	movs	r1, #50	; 0x32
 80a020a:	f001 fc6b 	bl	80a1ae4 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  stripCorners.begin();
 80a020e:	4620      	mov	r0, r4
 80a0210:	f000 fb28 	bl	80a0864 <_ZN17Adafruit_NeoPixel5beginEv>
  stripCorners.show();
 80a0214:	4620      	mov	r0, r4
}
 80a0216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  strip.begin();
  strip.show();

  stripCorners.setBrightness(BRIGHTNESS);
  stripCorners.begin();
  stripCorners.show();
 80a021a:	f000 bb59 	b.w	80a08d0 <_ZN17Adafruit_NeoPixel4showEv>
 80a021e:	bf00      	nop
 80a0220:	20000188 	.word	0x20000188
 80a0224:	200001b8 	.word	0x200001b8

080a0228 <_Z23lightAllPanelsWithColorm>:


//   // 6 panels total
// }

void lightAllPanelsWithColor(uint32_t panelColor) {
 80a0228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a022c:	4606      	mov	r6, r0
  // 6 is the number of panels
  for (int i = 0; i < 6; i += 1) {
    // 4 is the number of lights per panel
    for (int j = 0; j < 4; j += 1) {
      strip.setPixelColor(cubePanelLights[i][j], panelColor);
 80a022e:	4f0b      	ldr	r7, [pc, #44]	; (80a025c <_Z23lightAllPanelsWithColorm+0x34>)


//   // 6 panels total
// }

void lightAllPanelsWithColor(uint32_t panelColor) {
 80a0230:	2400      	movs	r4, #0
 80a0232:	2500      	movs	r5, #0
  // 6 is the number of panels
  for (int i = 0; i < 6; i += 1) {
    // 4 is the number of lights per panel
    for (int j = 0; j < 4; j += 1) {
      strip.setPixelColor(cubePanelLights[i][j], panelColor);
 80a0234:	eb07 0804 	add.w	r8, r7, r4
 80a0238:	f838 1025 	ldrh.w	r1, [r8, r5, lsl #2]
 80a023c:	4632      	mov	r2, r6
 80a023e:	4808      	ldr	r0, [pc, #32]	; (80a0260 <_Z23lightAllPanelsWithColorm+0x38>)

void lightAllPanelsWithColor(uint32_t panelColor) {
  // 6 is the number of panels
  for (int i = 0; i < 6; i += 1) {
    // 4 is the number of lights per panel
    for (int j = 0; j < 4; j += 1) {
 80a0240:	3501      	adds	r5, #1
      strip.setPixelColor(cubePanelLights[i][j], panelColor);
 80a0242:	f001 fbff 	bl	80a1a44 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>

void lightAllPanelsWithColor(uint32_t panelColor) {
  // 6 is the number of panels
  for (int i = 0; i < 6; i += 1) {
    // 4 is the number of lights per panel
    for (int j = 0; j < 4; j += 1) {
 80a0246:	2d04      	cmp	r5, #4
 80a0248:	d1f6      	bne.n	80a0238 <_Z23lightAllPanelsWithColorm+0x10>
 80a024a:	3410      	adds	r4, #16
//   // 6 panels total
// }

void lightAllPanelsWithColor(uint32_t panelColor) {
  // 6 is the number of panels
  for (int i = 0; i < 6; i += 1) {
 80a024c:	2c60      	cmp	r4, #96	; 0x60
 80a024e:	d1f0      	bne.n	80a0232 <_Z23lightAllPanelsWithColorm+0xa>
      strip.setPixelColor(cubePanelLights[i][j], panelColor);
    }
  }

  strip.show();
}
 80a0250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (int j = 0; j < 4; j += 1) {
      strip.setPixelColor(cubePanelLights[i][j], panelColor);
    }
  }

  strip.show();
 80a0254:	4802      	ldr	r0, [pc, #8]	; (80a0260 <_Z23lightAllPanelsWithColorm+0x38>)
 80a0256:	f000 bb3b 	b.w	80a08d0 <_ZN17Adafruit_NeoPixel4showEv>
 80a025a:	bf00      	nop
 80a025c:	20000060 	.word	0x20000060
 80a0260:	20000188 	.word	0x20000188

080a0264 <_Z15changeGameStatei>:
  }

  stripCorners.show();
}

void changeGameState(int newState) {
 80a0264:	b510      	push	{r4, lr}
 80a0266:	4604      	mov	r4, r0
  // here we can do some cleanup / setup depending on the state we are about to enter
  switch (newState) {
 80a0268:	2804      	cmp	r0, #4
 80a026a:	d822      	bhi.n	80a02b2 <_Z15changeGameStatei+0x4e>
 80a026c:	e8df f000 	tbb	[pc, r0]
 80a0270:	14100d03 	.word	0x14100d03
 80a0274:	1b          	.byte	0x1b
 80a0275:	00          	.byte	0x00
    case STATE_LOADING:
      clearAllCornerColors();
 80a0276:	f7ff ff49 	bl	80a010c <_Z20clearAllCornerColorsv>

      // here we just light up all cube panels blue for "loading"
      lightAllPanelsWithColor(strip.Color(0, 0, 255));
 80a027a:	2100      	movs	r1, #0
 80a027c:	22ff      	movs	r2, #255	; 0xff
 80a027e:	4608      	mov	r0, r1
 80a0280:	f001 fc2b 	bl	80a1ada <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0284:	f7ff ffd0 	bl	80a0228 <_Z23lightAllPanelsWithColorm>
      // resetTheGlowyValues();

      break;
 80a0288:	e013      	b.n	80a02b2 <_Z15changeGameStatei+0x4e>
    case STATE_SHOW_PATTERN:
      setAllCornerColors();
 80a028a:	f7ff ff1b 	bl	80a00c4 <_Z18setAllCornerColorsv>
      // do nothing

      break;
 80a028e:	e010      	b.n	80a02b2 <_Z15changeGameStatei+0x4e>
    case STATE_GET_USER_INPUT:
      didGuessThisRound = false;
 80a0290:	4b0b      	ldr	r3, [pc, #44]	; (80a02c0 <_Z15changeGameStatei+0x5c>)
 80a0292:	2200      	movs	r2, #0
 80a0294:	701a      	strb	r2, [r3, #0]

      break;
 80a0296:	e00c      	b.n	80a02b2 <_Z15changeGameStatei+0x4e>
    case STATE_VICTORY:
      clearAllCornerColors();
 80a0298:	f7ff ff38 	bl	80a010c <_Z20clearAllCornerColorsv>

      // here we just light up all cube panels green for success
      lightAllPanelsWithColor(COLOR_WHITE);
 80a029c:	4b09      	ldr	r3, [pc, #36]	; (80a02c4 <_Z15changeGameStatei+0x60>)
 80a029e:	6818      	ldr	r0, [r3, #0]
 80a02a0:	f7ff ffc2 	bl	80a0228 <_Z23lightAllPanelsWithColorm>

      // resetTheGlowyValues();

      break;
 80a02a4:	e005      	b.n	80a02b2 <_Z15changeGameStatei+0x4e>
    case STATE_LOSER:
      clearAllCornerColors();
 80a02a6:	f7ff ff31 	bl	80a010c <_Z20clearAllCornerColorsv>

      // here we just light up all cube panels red for failure
      lightAllPanelsWithColor(COLOR_PURPLE);
 80a02aa:	4b07      	ldr	r3, [pc, #28]	; (80a02c8 <_Z15changeGameStatei+0x64>)
 80a02ac:	6818      	ldr	r0, [r3, #0]
 80a02ae:	f7ff ffbb 	bl	80a0228 <_Z23lightAllPanelsWithColorm>
      // resetTheGlowyValues();

      break;
  }

  currentStateCounter = 0;
 80a02b2:	4b06      	ldr	r3, [pc, #24]	; (80a02cc <_Z15changeGameStatei+0x68>)
 80a02b4:	2200      	movs	r2, #0
 80a02b6:	601a      	str	r2, [r3, #0]

  gameState = newState;
 80a02b8:	4b05      	ldr	r3, [pc, #20]	; (80a02d0 <_Z15changeGameStatei+0x6c>)
 80a02ba:	601c      	str	r4, [r3, #0]
 80a02bc:	bd10      	pop	{r4, pc}
 80a02be:	bf00      	nop
 80a02c0:	200001b4 	.word	0x200001b4
 80a02c4:	200001ac 	.word	0x200001ac
 80a02c8:	200001dc 	.word	0x200001dc
 80a02cc:	200001a8 	.word	0x200001a8
 80a02d0:	2000017c 	.word	0x2000017c

080a02d4 <_Z9nextLevelv>:
  goingUp = true;
  glowyValue = 0;
  rate = 2;
}

void nextLevel() {
 80a02d4:	b508      	push	{r3, lr}
  changeGameState(STATE_LOADING);
 80a02d6:	2000      	movs	r0, #0
 80a02d8:	f7ff ffc4 	bl	80a0264 <_Z15changeGameStatei>

  #ifdef TEST_BEEPER
    tone(BEEPER_PIN, 220, 1000);
 80a02dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a02e0:	21dc      	movs	r1, #220	; 0xdc
 80a02e2:	2013      	movs	r0, #19
 80a02e4:	f001 ffec 	bl	80a22c0 <tone>
  #endif

  level += 1;
 80a02e8:	4a03      	ldr	r2, [pc, #12]	; (80a02f8 <_Z9nextLevelv+0x24>)
 80a02ea:	6813      	ldr	r3, [r2, #0]
 80a02ec:	3301      	adds	r3, #1
 80a02ee:	6013      	str	r3, [r2, #0]

  initCurrentLevel();
}
 80a02f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tone(BEEPER_PIN, 220, 1000);
  #endif

  level += 1;

  initCurrentLevel();
 80a02f4:	f7ff bf28 	b.w	80a0148 <_Z16initCurrentLevelv>
 80a02f8:	20000168 	.word	0x20000168

080a02fc <_Z8initCubev>:

  currentCorrectPin = pattern[0];
}

void initCube() {
  level = 0;
 80a02fc:	4b05      	ldr	r3, [pc, #20]	; (80a0314 <_Z8initCubev+0x18>)
 80a02fe:	2200      	movs	r2, #0
 80a0300:	601a      	str	r2, [r3, #0]
  delayBetweenColors = 50;
 80a0302:	4b05      	ldr	r3, [pc, #20]	; (80a0318 <_Z8initCubev+0x1c>)
 80a0304:	2232      	movs	r2, #50	; 0x32
 80a0306:	601a      	str	r2, [r3, #0]
  rndDelayRange = 1;
 80a0308:	4b04      	ldr	r3, [pc, #16]	; (80a031c <_Z8initCubev+0x20>)
 80a030a:	2201      	movs	r2, #1
 80a030c:	601a      	str	r2, [r3, #0]

  nextLevel();
 80a030e:	f7ff bfe1 	b.w	80a02d4 <_Z9nextLevelv>
 80a0312:	bf00      	nop
 80a0314:	20000168 	.word	0x20000168
 80a0318:	2000019c 	.word	0x2000019c
 80a031c:	20000158 	.word	0x20000158

080a0320 <_Z11beeperSetupv>:

#endif

#ifdef TEST_BEEPER
void beeperSetup() {
  pinMode(BEEPER_PIN, OUTPUT);
 80a0320:	2101      	movs	r1, #1
 80a0322:	2013      	movs	r0, #19
 80a0324:	f002 ba50 	b.w	80a27c8 <pinMode>

080a0328 <setup>:
void buzzerSetup() {
  pinMode(BUZZER_PIN, OUTPUT);
}
#endif

void setup() {
 80a0328:	b508      	push	{r3, lr}
  #ifdef TEST_DISPLAY
  displaySetup();
  #endif

  #ifdef TEST_TOUCH
  touchSetup();
 80a032a:	f7ff ff3d 	bl	80a01a8 <_Z10touchSetupv>
  #endif

  #ifdef TEST_NEOPIXEL
  neoPixelSetup();
 80a032e:	f7ff ff5d 	bl	80a01ec <_Z13neoPixelSetupv>
  #endif

  #ifdef TEST_BEEPER
  beeperSetup();
 80a0332:	f7ff fff5 	bl	80a0320 <_Z11beeperSetupv>
  #ifdef TEST_BUZZER
  buzzerSetup();
  #endif

  initCube();
}
 80a0336:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  #ifdef TEST_BUZZER
  buzzerSetup();
  #endif

  initCube();
 80a033a:	f7ff bfdf 	b.w	80a02fc <_Z8initCubev>
	...

080a0340 <_Z12neoPixelLoopv>:
}

void neoPixelLoop() {
 80a0340:	b510      	push	{r4, lr}
  // strip.setPixelColor(pixel_number, strip.Color(R, G, B));

  switch (gameState) {
 80a0342:	4b24      	ldr	r3, [pc, #144]	; (80a03d4 <_Z12neoPixelLoopv+0x94>)
 80a0344:	681a      	ldr	r2, [r3, #0]
 80a0346:	2a03      	cmp	r2, #3
 80a0348:	d02e      	beq.n	80a03a8 <_Z12neoPixelLoopv+0x68>
 80a034a:	2a04      	cmp	r2, #4
 80a034c:	d036      	beq.n	80a03bc <_Z12neoPixelLoopv+0x7c>
 80a034e:	2a01      	cmp	r2, #1
 80a0350:	d13e      	bne.n	80a03d0 <_Z12neoPixelLoopv+0x90>
    case STATE_SHOW_PATTERN:
      {
        // display the current levels pattern on the cube to user
        uint32_t currentColor = pattern[patternCount];

        if (currentStateCounter <= SOME_DELAY_NUMBER) {
 80a0352:	f241 7170 	movw	r1, #6000	; 0x1770
 80a0356:	4b20      	ldr	r3, [pc, #128]	; (80a03d8 <_Z12neoPixelLoopv+0x98>)
 80a0358:	6818      	ldr	r0, [r3, #0]
 80a035a:	461c      	mov	r4, r3
 80a035c:	4288      	cmp	r0, r1
 80a035e:	dc0a      	bgt.n	80a0376 <_Z12neoPixelLoopv+0x36>
          if (!panelsLitThisRound) {
 80a0360:	4b1e      	ldr	r3, [pc, #120]	; (80a03dc <_Z12neoPixelLoopv+0x9c>)
 80a0362:	7819      	ldrb	r1, [r3, #0]
 80a0364:	b939      	cbnz	r1, 80a0376 <_Z12neoPixelLoopv+0x36>

      break;
    case STATE_SHOW_PATTERN:
      {
        // display the current levels pattern on the cube to user
        uint32_t currentColor = pattern[patternCount];
 80a0366:	491e      	ldr	r1, [pc, #120]	; (80a03e0 <_Z12neoPixelLoopv+0xa0>)

        if (currentStateCounter <= SOME_DELAY_NUMBER) {
          if (!panelsLitThisRound) {
            panelsLitThisRound = true;
 80a0368:	701a      	strb	r2, [r3, #0]

      break;
    case STATE_SHOW_PATTERN:
      {
        // display the current levels pattern on the cube to user
        uint32_t currentColor = pattern[patternCount];
 80a036a:	6808      	ldr	r0, [r1, #0]
 80a036c:	491d      	ldr	r1, [pc, #116]	; (80a03e4 <_Z12neoPixelLoopv+0xa4>)
 80a036e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]

        if (currentStateCounter <= SOME_DELAY_NUMBER) {
          if (!panelsLitThisRound) {
            panelsLitThisRound = true;

            lightAllPanelsWithColor(currentColor);
 80a0372:	f7ff ff59 	bl	80a0228 <_Z23lightAllPanelsWithColorm>
          }
        }

        if (currentStateCounter > SOME_DELAY_NUMBER) {
 80a0376:	f241 7370 	movw	r3, #6000	; 0x1770
 80a037a:	6822      	ldr	r2, [r4, #0]
 80a037c:	429a      	cmp	r2, r3
 80a037e:	dd27      	ble.n	80a03d0 <_Z12neoPixelLoopv+0x90>
          lightAllPanelsWithColor(COLOR_OFF);
 80a0380:	4b19      	ldr	r3, [pc, #100]	; (80a03e8 <_Z12neoPixelLoopv+0xa8>)
 80a0382:	6818      	ldr	r0, [r3, #0]
 80a0384:	f7ff ff50 	bl	80a0228 <_Z23lightAllPanelsWithColorm>

          patternCount += 1;
 80a0388:	4a15      	ldr	r2, [pc, #84]	; (80a03e0 <_Z12neoPixelLoopv+0xa0>)
          panelsLitThisRound = false;
 80a038a:	2100      	movs	r1, #0
        }

        if (currentStateCounter > SOME_DELAY_NUMBER) {
          lightAllPanelsWithColor(COLOR_OFF);

          patternCount += 1;
 80a038c:	6813      	ldr	r3, [r2, #0]
 80a038e:	3301      	adds	r3, #1
 80a0390:	6013      	str	r3, [r2, #0]
          panelsLitThisRound = false;
 80a0392:	4a12      	ldr	r2, [pc, #72]	; (80a03dc <_Z12neoPixelLoopv+0x9c>)
 80a0394:	7011      	strb	r1, [r2, #0]

          if (patternCount >= level) {
 80a0396:	4a15      	ldr	r2, [pc, #84]	; (80a03ec <_Z12neoPixelLoopv+0xac>)
 80a0398:	6812      	ldr	r2, [r2, #0]
 80a039a:	4293      	cmp	r3, r2
 80a039c:	db18      	blt.n	80a03d0 <_Z12neoPixelLoopv+0x90>
        initCube();
      }

      break;
  }
}
 80a039e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

          patternCount += 1;
          panelsLitThisRound = false;

          if (patternCount >= level) {
            changeGameState(STATE_GET_USER_INPUT);
 80a03a2:	2002      	movs	r0, #2
 80a03a4:	f7ff bf5e 	b.w	80a0264 <_Z15changeGameStatei>

      break;
    case STATE_VICTORY:
      // show some kind of cool "you did it correctly" light pattern?

      if (currentStateCounter > SOME_DELAY_NUMBER) {
 80a03a8:	4b0b      	ldr	r3, [pc, #44]	; (80a03d8 <_Z12neoPixelLoopv+0x98>)
 80a03aa:	681a      	ldr	r2, [r3, #0]
 80a03ac:	f241 7370 	movw	r3, #6000	; 0x1770
 80a03b0:	429a      	cmp	r2, r3
 80a03b2:	dd0d      	ble.n	80a03d0 <_Z12neoPixelLoopv+0x90>
        initCube();
      }

      break;
  }
}
 80a03b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      break;
    case STATE_VICTORY:
      // show some kind of cool "you did it correctly" light pattern?

      if (currentStateCounter > SOME_DELAY_NUMBER) {
        nextLevel();
 80a03b8:	f7ff bf8c 	b.w	80a02d4 <_Z9nextLevelv>

      break;
    case STATE_LOSER:
      // wow what a jerk, our player failed show a boo light pattern

      if (currentStateCounter > SOME_DELAY_NUMBER) {
 80a03bc:	4b06      	ldr	r3, [pc, #24]	; (80a03d8 <_Z12neoPixelLoopv+0x98>)
 80a03be:	681a      	ldr	r2, [r3, #0]
 80a03c0:	f241 7370 	movw	r3, #6000	; 0x1770
 80a03c4:	429a      	cmp	r2, r3
 80a03c6:	dd03      	ble.n	80a03d0 <_Z12neoPixelLoopv+0x90>
        initCube();
      }

      break;
  }
}
 80a03c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      break;
    case STATE_LOSER:
      // wow what a jerk, our player failed show a boo light pattern

      if (currentStateCounter > SOME_DELAY_NUMBER) {
        initCube();
 80a03cc:	f7ff bf96 	b.w	80a02fc <_Z8initCubev>
 80a03d0:	bd10      	pop	{r4, pc}
 80a03d2:	bf00      	nop
 80a03d4:	2000017c 	.word	0x2000017c
 80a03d8:	200001a8 	.word	0x200001a8
 80a03dc:	20000160 	.word	0x20000160
 80a03e0:	200001b0 	.word	0x200001b0
 80a03e4:	2000012c 	.word	0x2000012c
 80a03e8:	200001d8 	.word	0x200001d8
 80a03ec:	20000168 	.word	0x20000168

080a03f0 <_Z16handleTouchedPini>:
      break;
  }
}

void handleTouchedPin(int pinNumber) {
  didGuessThisRound = true;
 80a03f0:	4b02      	ldr	r3, [pc, #8]	; (80a03fc <_Z16handleTouchedPini+0xc>)
 80a03f2:	2201      	movs	r2, #1

  // TODO: Remove always assuming correct sensor/corner was touched
  changeGameState(STATE_VICTORY);
 80a03f4:	2003      	movs	r0, #3
      break;
  }
}

void handleTouchedPin(int pinNumber) {
  didGuessThisRound = true;
 80a03f6:	701a      	strb	r2, [r3, #0]

  // TODO: Remove always assuming correct sensor/corner was touched
  changeGameState(STATE_VICTORY);
 80a03f8:	f7ff bf34 	b.w	80a0264 <_Z15changeGameStatei>
 80a03fc:	200001b4 	.word	0x200001b4

080a0400 <_Z16touchSensorsLoopv>:

void handleReleasedPin(int pinNumber) {
  //
}

void touchSensorsLoop() {
 80a0400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // cap.setThresholds(touch_threshold, release_threshold);
  // Get the currently touched pads
  currtouched = cap.touched();
 80a0402:	481e      	ldr	r0, [pc, #120]	; (80a047c <_Z16touchSensorsLoopv+0x7c>)
 80a0404:	f000 f945 	bl	80a0692 <_ZN15Adafruit_MPR1217touchedEv>

  switch (gameState) {
 80a0408:	4b1d      	ldr	r3, [pc, #116]	; (80a0480 <_Z16touchSensorsLoopv+0x80>)
}

void touchSensorsLoop() {
  // cap.setThresholds(touch_threshold, release_threshold);
  // Get the currently touched pads
  currtouched = cap.touched();
 80a040a:	4d1e      	ldr	r5, [pc, #120]	; (80a0484 <_Z16touchSensorsLoopv+0x84>)

  switch (gameState) {
 80a040c:	681b      	ldr	r3, [r3, #0]
}

void touchSensorsLoop() {
  // cap.setThresholds(touch_threshold, release_threshold);
  // Get the currently touched pads
  currtouched = cap.touched();
 80a040e:	8028      	strh	r0, [r5, #0]

  switch (gameState) {
 80a0410:	2b02      	cmp	r3, #2
 80a0412:	d131      	bne.n	80a0478 <_Z16touchSensorsLoopv+0x78>
      break;
    case STATE_GET_USER_INPUT:
      // get user input when touch sensors pressed and check for correct pattern input from user.
      for (uint8_t i=0; i<12; i++) {
        // it if *is* touched and *wasnt* touched before, alert!
        if ((currtouched & _BV(i)) && !(lasttouched & _BV(i)) ) {
 80a0414:	4e1c      	ldr	r6, [pc, #112]	; (80a0488 <_Z16touchSensorsLoopv+0x88>)
void touchSensorsLoop() {
  // cap.setThresholds(touch_threshold, release_threshold);
  // Get the currently touched pads
  currtouched = cap.touched();

  switch (gameState) {
 80a0416:	2400      	movs	r4, #0
      break;
    case STATE_GET_USER_INPUT:
      // get user input when touch sensors pressed and check for correct pattern input from user.
      for (uint8_t i=0; i<12; i++) {
        // it if *is* touched and *wasnt* touched before, alert!
        if ((currtouched & _BV(i)) && !(lasttouched & _BV(i)) ) {
 80a0418:	882b      	ldrh	r3, [r5, #0]
 80a041a:	b2e7      	uxtb	r7, r4
 80a041c:	4123      	asrs	r3, r4
 80a041e:	07d8      	lsls	r0, r3, #31
 80a0420:	d511      	bpl.n	80a0446 <_Z16touchSensorsLoopv+0x46>
 80a0422:	8833      	ldrh	r3, [r6, #0]
 80a0424:	4123      	asrs	r3, r4
 80a0426:	07d9      	lsls	r1, r3, #31
 80a0428:	d40d      	bmi.n	80a0446 <_Z16touchSensorsLoopv+0x46>
          Serial.print(i); Serial.println(" touched");
 80a042a:	f002 f859 	bl	80a24e0 <_Z16_fetch_usbserialv>
 80a042e:	220a      	movs	r2, #10
 80a0430:	4639      	mov	r1, r7
 80a0432:	f001 fef8 	bl	80a2226 <_ZN5Print5printEhi>
 80a0436:	f002 f853 	bl	80a24e0 <_Z16_fetch_usbserialv>
 80a043a:	4914      	ldr	r1, [pc, #80]	; (80a048c <_Z16touchSensorsLoopv+0x8c>)
 80a043c:	f001 febf 	bl	80a21be <_ZN5Print7printlnEPKc>

          handleTouchedPin(i);
 80a0440:	4620      	mov	r0, r4
 80a0442:	f7ff ffd5 	bl	80a03f0 <_Z16handleTouchedPini>
        }

      // if it *was* touched and now *isnt*, alert!
        if (!(currtouched & _BV(i)) && (lasttouched & _BV(i)) ) {
 80a0446:	882b      	ldrh	r3, [r5, #0]
 80a0448:	4123      	asrs	r3, r4
 80a044a:	07da      	lsls	r2, r3, #31
 80a044c:	d40e      	bmi.n	80a046c <_Z16touchSensorsLoopv+0x6c>
 80a044e:	8833      	ldrh	r3, [r6, #0]
 80a0450:	4123      	asrs	r3, r4
 80a0452:	07db      	lsls	r3, r3, #31
 80a0454:	d50a      	bpl.n	80a046c <_Z16touchSensorsLoopv+0x6c>
          Serial.print(i); Serial.println(" released");
 80a0456:	f002 f843 	bl	80a24e0 <_Z16_fetch_usbserialv>
 80a045a:	4639      	mov	r1, r7
 80a045c:	220a      	movs	r2, #10
 80a045e:	f001 fee2 	bl	80a2226 <_ZN5Print5printEhi>
 80a0462:	f002 f83d 	bl	80a24e0 <_Z16_fetch_usbserialv>
 80a0466:	490a      	ldr	r1, [pc, #40]	; (80a0490 <_Z16touchSensorsLoopv+0x90>)
 80a0468:	f001 fea9 	bl	80a21be <_ZN5Print7printlnEPKc>
 80a046c:	3401      	adds	r4, #1
      // do nothing

      break;
    case STATE_GET_USER_INPUT:
      // get user input when touch sensors pressed and check for correct pattern input from user.
      for (uint8_t i=0; i<12; i++) {
 80a046e:	2c0c      	cmp	r4, #12
 80a0470:	d1d2      	bne.n	80a0418 <_Z16touchSensorsLoopv+0x18>
          handleReleasedPin(i);
        }
      }

      // reset our state
      lasttouched = currtouched;
 80a0472:	882a      	ldrh	r2, [r5, #0]
 80a0474:	4b04      	ldr	r3, [pc, #16]	; (80a0488 <_Z16touchSensorsLoopv+0x88>)
 80a0476:	801a      	strh	r2, [r3, #0]
 80a0478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a047a:	bf00      	nop
 80a047c:	20000180 	.word	0x20000180
 80a0480:	2000017c 	.word	0x2000017c
 80a0484:	200001e0 	.word	0x200001e0
 80a0488:	200001d0 	.word	0x200001d0
 80a048c:	080a2cca 	.word	0x080a2cca
 80a0490:	080a2cd3 	.word	0x080a2cd3

080a0494 <loop>:
    }
  }
}

void loop() {
  if (currentStateCounter <= SOME_DELAY_NUMBER) {
 80a0494:	f241 7170 	movw	r1, #6000	; 0x1770
      goingUp = true;
    }
  }
}

void loop() {
 80a0498:	b508      	push	{r3, lr}
  if (currentStateCounter <= SOME_DELAY_NUMBER) {
 80a049a:	4b0b      	ldr	r3, [pc, #44]	; (80a04c8 <loop+0x34>)
 80a049c:	681a      	ldr	r2, [r3, #0]
 80a049e:	428a      	cmp	r2, r1
    currentStateCounter += 1;
 80a04a0:	bfdc      	itt	le
 80a04a2:	3201      	addle	r2, #1
 80a04a4:	601a      	strle	r2, [r3, #0]
  }

  switch (gameState) {
 80a04a6:	4a09      	ldr	r2, [pc, #36]	; (80a04cc <loop+0x38>)
 80a04a8:	6812      	ldr	r2, [r2, #0]
 80a04aa:	b93a      	cbnz	r2, 80a04bc <loop+0x28>
    case STATE_LOADING:
      // incrementTheGlowyValues();

      if (currentStateCounter > SOME_DELAY_NUMBER) {
 80a04ac:	681a      	ldr	r2, [r3, #0]
 80a04ae:	f241 7370 	movw	r3, #6000	; 0x1770
 80a04b2:	429a      	cmp	r2, r3
 80a04b4:	dd02      	ble.n	80a04bc <loop+0x28>
        changeGameState(STATE_SHOW_PATTERN);
 80a04b6:	2001      	movs	r0, #1
 80a04b8:	f7ff fed4 	bl	80a0264 <_Z15changeGameStatei>
  // pinMode(TX, OUTPUT);
  // noTone(TX);
  #endif

  #ifdef TEST_NEOPIXEL
    neoPixelLoop();
 80a04bc:	f7ff ff40 	bl	80a0340 <_Z12neoPixelLoopv>
  #endif

  #ifdef TEST_TOUCH
    touchSensorsLoop();
  #endif
}
 80a04c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  #ifdef TEST_NEOPIXEL
    neoPixelLoop();
  #endif

  #ifdef TEST_TOUCH
    touchSensorsLoop();
 80a04c4:	f7ff bf9c 	b.w	80a0400 <_Z16touchSensorsLoopv>
 80a04c8:	200001a8 	.word	0x200001a8
 80a04cc:	2000017c 	.word	0x2000017c

080a04d0 <_GLOBAL__sub_I_SystemMode>:
  #endif
}
 80a04d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a04d4:	f001 fb56 	bl	80a1b84 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a04d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a04dc:	4b35      	ldr	r3, [pc, #212]	; (80a05b4 <_GLOBAL__sub_I_SystemMode+0xe4>)
 80a04de:	2400      	movs	r4, #0
 80a04e0:	701c      	strb	r4, [r3, #0]
 80a04e2:	805c      	strh	r4, [r3, #2]
 80a04e4:	809a      	strh	r2, [r3, #4]
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a04e6:	4d34      	ldr	r5, [pc, #208]	; (80a05b8 <_GLOBAL__sub_I_SystemMode+0xe8>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a04e8:	2003      	movs	r0, #3
 80a04ea:	f001 fc5d 	bl	80a1da8 <set_system_mode>
 80a04ee:	2302      	movs	r3, #2
 80a04f0:	461a      	mov	r2, r3
 80a04f2:	4f32      	ldr	r7, [pc, #200]	; (80a05bc <_GLOBAL__sub_I_SystemMode+0xec>)
 80a04f4:	4e32      	ldr	r6, [pc, #200]	; (80a05c0 <_GLOBAL__sub_I_SystemMode+0xf0>)
 80a04f6:	2118      	movs	r1, #24
 80a04f8:	4628      	mov	r0, r5
 80a04fa:	f000 f9d8 	bl	80a08ae <_ZN17Adafruit_NeoPixelC1Ethh>
 80a04fe:	4628      	mov	r0, r5
Adafruit_NeoPixel stripCorners(PIXEL_COUNT, PIXEL_CORNERS_PIN, PIXEL_TYPE);
 80a0500:	4d30      	ldr	r5, [pc, #192]	; (80a05c4 <_GLOBAL__sub_I_SystemMode+0xf4>)
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0502:	463a      	mov	r2, r7
 80a0504:	4631      	mov	r1, r6
 80a0506:	f002 f9e3 	bl	80a28d0 <__aeabi_atexit>
Adafruit_NeoPixel stripCorners(PIXEL_COUNT, PIXEL_CORNERS_PIN, PIXEL_TYPE);
 80a050a:	2302      	movs	r3, #2
 80a050c:	2203      	movs	r2, #3
 80a050e:	2118      	movs	r1, #24
 80a0510:	4628      	mov	r0, r5
 80a0512:	f000 f9cc 	bl	80a08ae <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0516:	463a      	mov	r2, r7
 80a0518:	4631      	mov	r1, r6
 80a051a:	4628      	mov	r0, r5
 80a051c:	f002 f9d8 	bl	80a28d0 <__aeabi_atexit>

uint32_t COLOR_RED = strip.Color(255, 0, 0);
 80a0520:	4622      	mov	r2, r4
 80a0522:	4621      	mov	r1, r4
 80a0524:	20ff      	movs	r0, #255	; 0xff
 80a0526:	f001 fad8 	bl	80a1ada <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a052a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80a05ec <_GLOBAL__sub_I_SystemMode+0x11c>
uint32_t COLOR_BLUE = strip.Color(0, 0, 255);
 80a052e:	4621      	mov	r1, r4
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
Adafruit_NeoPixel stripCorners(PIXEL_COUNT, PIXEL_CORNERS_PIN, PIXEL_TYPE);

uint32_t COLOR_RED = strip.Color(255, 0, 0);
 80a0530:	f8c8 0000 	str.w	r0, [r8]
uint32_t COLOR_BLUE = strip.Color(0, 0, 255);
 80a0534:	22ff      	movs	r2, #255	; 0xff
 80a0536:	4620      	mov	r0, r4
 80a0538:	f001 facf 	bl	80a1ada <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a053c:	4e22      	ldr	r6, [pc, #136]	; (80a05c8 <_GLOBAL__sub_I_SystemMode+0xf8>)
uint32_t COLOR_GREEN = strip.Color(0, 255, 0);
 80a053e:	4622      	mov	r2, r4

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
Adafruit_NeoPixel stripCorners(PIXEL_COUNT, PIXEL_CORNERS_PIN, PIXEL_TYPE);

uint32_t COLOR_RED = strip.Color(255, 0, 0);
uint32_t COLOR_BLUE = strip.Color(0, 0, 255);
 80a0540:	6030      	str	r0, [r6, #0]
uint32_t COLOR_GREEN = strip.Color(0, 255, 0);
 80a0542:	21ff      	movs	r1, #255	; 0xff
 80a0544:	4620      	mov	r0, r4
 80a0546:	f001 fac8 	bl	80a1ada <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a054a:	4f20      	ldr	r7, [pc, #128]	; (80a05cc <_GLOBAL__sub_I_SystemMode+0xfc>)
uint32_t COLOR_YELLOW = strip.Color(255, 255, 0);
 80a054c:	21ff      	movs	r1, #255	; 0xff
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
Adafruit_NeoPixel stripCorners(PIXEL_COUNT, PIXEL_CORNERS_PIN, PIXEL_TYPE);

uint32_t COLOR_RED = strip.Color(255, 0, 0);
uint32_t COLOR_BLUE = strip.Color(0, 0, 255);
uint32_t COLOR_GREEN = strip.Color(0, 255, 0);
 80a054e:	6038      	str	r0, [r7, #0]
uint32_t COLOR_YELLOW = strip.Color(255, 255, 0);
 80a0550:	4622      	mov	r2, r4
 80a0552:	4608      	mov	r0, r1
 80a0554:	f001 fac1 	bl	80a1ada <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0558:	4d1d      	ldr	r5, [pc, #116]	; (80a05d0 <_GLOBAL__sub_I_SystemMode+0x100>)
uint32_t COLOR_PURPLE = strip.Color(255, 0, 255);
 80a055a:	22ff      	movs	r2, #255	; 0xff
Adafruit_NeoPixel stripCorners(PIXEL_COUNT, PIXEL_CORNERS_PIN, PIXEL_TYPE);

uint32_t COLOR_RED = strip.Color(255, 0, 0);
uint32_t COLOR_BLUE = strip.Color(0, 0, 255);
uint32_t COLOR_GREEN = strip.Color(0, 255, 0);
uint32_t COLOR_YELLOW = strip.Color(255, 255, 0);
 80a055c:	6028      	str	r0, [r5, #0]
uint32_t COLOR_PURPLE = strip.Color(255, 0, 255);
 80a055e:	4621      	mov	r1, r4
 80a0560:	4610      	mov	r0, r2
 80a0562:	f001 faba 	bl	80a1ada <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0566:	4b1b      	ldr	r3, [pc, #108]	; (80a05d4 <_GLOBAL__sub_I_SystemMode+0x104>)
uint32_t COLOR_TEAL = strip.Color(0, 255, 255);
 80a0568:	22ff      	movs	r2, #255	; 0xff

uint32_t COLOR_RED = strip.Color(255, 0, 0);
uint32_t COLOR_BLUE = strip.Color(0, 0, 255);
uint32_t COLOR_GREEN = strip.Color(0, 255, 0);
uint32_t COLOR_YELLOW = strip.Color(255, 255, 0);
uint32_t COLOR_PURPLE = strip.Color(255, 0, 255);
 80a056a:	6018      	str	r0, [r3, #0]
uint32_t COLOR_TEAL = strip.Color(0, 255, 255);
 80a056c:	4611      	mov	r1, r2
 80a056e:	4620      	mov	r0, r4
 80a0570:	f001 fab3 	bl	80a1ada <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0574:	4b18      	ldr	r3, [pc, #96]	; (80a05d8 <_GLOBAL__sub_I_SystemMode+0x108>)
uint32_t COLOR_WHITE = strip.Color(255, 255, 255);
 80a0576:	22ff      	movs	r2, #255	; 0xff
uint32_t COLOR_RED = strip.Color(255, 0, 0);
uint32_t COLOR_BLUE = strip.Color(0, 0, 255);
uint32_t COLOR_GREEN = strip.Color(0, 255, 0);
uint32_t COLOR_YELLOW = strip.Color(255, 255, 0);
uint32_t COLOR_PURPLE = strip.Color(255, 0, 255);
uint32_t COLOR_TEAL = strip.Color(0, 255, 255);
 80a0578:	6018      	str	r0, [r3, #0]
uint32_t COLOR_WHITE = strip.Color(255, 255, 255);
 80a057a:	4611      	mov	r1, r2
 80a057c:	4610      	mov	r0, r2
 80a057e:	f001 faac 	bl	80a1ada <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0582:	4b16      	ldr	r3, [pc, #88]	; (80a05dc <_GLOBAL__sub_I_SystemMode+0x10c>)

uint32_t COLOR_OFF = strip.Color(0, 0, 0);
 80a0584:	4622      	mov	r2, r4
uint32_t COLOR_BLUE = strip.Color(0, 0, 255);
uint32_t COLOR_GREEN = strip.Color(0, 255, 0);
uint32_t COLOR_YELLOW = strip.Color(255, 255, 0);
uint32_t COLOR_PURPLE = strip.Color(255, 0, 255);
uint32_t COLOR_TEAL = strip.Color(0, 255, 255);
uint32_t COLOR_WHITE = strip.Color(255, 255, 255);
 80a0586:	6018      	str	r0, [r3, #0]

uint32_t COLOR_OFF = strip.Color(0, 0, 0);
 80a0588:	4621      	mov	r1, r4
 80a058a:	4620      	mov	r0, r4
 80a058c:	f001 faa5 	bl	80a1ada <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0590:	4b13      	ldr	r3, [pc, #76]	; (80a05e0 <_GLOBAL__sub_I_SystemMode+0x110>)

uint32_t colorChoices[] = { COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW };
 80a0592:	f8d8 2000 	ldr.w	r2, [r8]
uint32_t COLOR_YELLOW = strip.Color(255, 255, 0);
uint32_t COLOR_PURPLE = strip.Color(255, 0, 255);
uint32_t COLOR_TEAL = strip.Color(0, 255, 255);
uint32_t COLOR_WHITE = strip.Color(255, 255, 255);

uint32_t COLOR_OFF = strip.Color(0, 0, 0);
 80a0596:	6018      	str	r0, [r3, #0]

uint32_t colorChoices[] = { COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW };
 80a0598:	4b12      	ldr	r3, [pc, #72]	; (80a05e4 <_GLOBAL__sub_I_SystemMode+0x114>)

/**
 * Touch Board
 */
#ifdef TEST_TOUCH
Adafruit_MPR121 cap = Adafruit_MPR121();
 80a059a:	4813      	ldr	r0, [pc, #76]	; (80a05e8 <_GLOBAL__sub_I_SystemMode+0x118>)
uint32_t COLOR_TEAL = strip.Color(0, 255, 255);
uint32_t COLOR_WHITE = strip.Color(255, 255, 255);

uint32_t COLOR_OFF = strip.Color(0, 0, 0);

uint32_t colorChoices[] = { COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW };
 80a059c:	601a      	str	r2, [r3, #0]
 80a059e:	683a      	ldr	r2, [r7, #0]
 80a05a0:	605a      	str	r2, [r3, #4]
 80a05a2:	6832      	ldr	r2, [r6, #0]
 80a05a4:	609a      	str	r2, [r3, #8]
 80a05a6:	682a      	ldr	r2, [r5, #0]
 80a05a8:	60da      	str	r2, [r3, #12]
  #endif

  #ifdef TEST_TOUCH
    touchSensorsLoop();
  #endif
}
 80a05aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

/**
 * Touch Board
 */
#ifdef TEST_TOUCH
Adafruit_MPR121 cap = Adafruit_MPR121();
 80a05ae:	f000 b81f 	b.w	80a05f0 <_ZN15Adafruit_MPR121C1Ev>
 80a05b2:	bf00      	nop
 80a05b4:	20000162 	.word	0x20000162
 80a05b8:	20000188 	.word	0x20000188
 80a05bc:	20000128 	.word	0x20000128
 80a05c0:	080a0811 	.word	0x080a0811
 80a05c4:	200001b8 	.word	0x200001b8
 80a05c8:	2000015c 	.word	0x2000015c
 80a05cc:	200001d4 	.word	0x200001d4
 80a05d0:	200001a4 	.word	0x200001a4
 80a05d4:	200001dc 	.word	0x200001dc
 80a05d8:	200001cc 	.word	0x200001cc
 80a05dc:	200001ac 	.word	0x200001ac
 80a05e0:	200001d8 	.word	0x200001d8
 80a05e4:	2000016c 	.word	0x2000016c
 80a05e8:	20000180 	.word	0x20000180
 80a05ec:	20000154 	.word	0x20000154

080a05f0 <_ZN15Adafruit_MPR121C1Ev>:
 ****************************************************/

#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}
 80a05f0:	4770      	bx	lr

080a05f2 <_ZN15Adafruit_MPR12113readRegister8Eh>:
}

/*********************************************************************/


uint8_t Adafruit_MPR121::readRegister8(uint8_t reg) {
 80a05f2:	b538      	push	{r3, r4, r5, lr}
 80a05f4:	4604      	mov	r4, r0
 80a05f6:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a05f8:	f002 f910 	bl	80a281c <_Z19__fetch_global_Wirev>
 80a05fc:	f994 1000 	ldrsb.w	r1, [r4]
 80a0600:	f001 fcc8 	bl	80a1f94 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a0604:	f002 f90a 	bl	80a281c <_Z19__fetch_global_Wirev>
 80a0608:	6803      	ldr	r3, [r0, #0]
 80a060a:	4629      	mov	r1, r5
 80a060c:	689b      	ldr	r3, [r3, #8]
 80a060e:	4798      	blx	r3
    Wire.endTransmission(false);
 80a0610:	f002 f904 	bl	80a281c <_Z19__fetch_global_Wirev>
 80a0614:	2100      	movs	r1, #0
 80a0616:	f001 fcc0 	bl	80a1f9a <_ZN7TwoWire15endTransmissionEh>
    while (Wire.requestFrom(_i2caddr, 1) != 1);
 80a061a:	f002 f8ff 	bl	80a281c <_Z19__fetch_global_Wirev>
 80a061e:	2201      	movs	r2, #1
 80a0620:	f994 1000 	ldrsb.w	r1, [r4]
 80a0624:	f001 fcad 	bl	80a1f82 <_ZN7TwoWire11requestFromEii>
 80a0628:	2801      	cmp	r0, #1
 80a062a:	d1f6      	bne.n	80a061a <_ZN15Adafruit_MPR12113readRegister8Eh+0x28>
    return ( Wire.read());
 80a062c:	f002 f8f6 	bl	80a281c <_Z19__fetch_global_Wirev>
 80a0630:	6803      	ldr	r3, [r0, #0]
 80a0632:	695b      	ldr	r3, [r3, #20]
 80a0634:	4798      	blx	r3
}
 80a0636:	b2c0      	uxtb	r0, r0
 80a0638:	bd38      	pop	{r3, r4, r5, pc}

080a063a <_ZN15Adafruit_MPR12114readRegister16Eh>:

uint16_t Adafruit_MPR121::readRegister16(uint8_t reg) {
 80a063a:	b538      	push	{r3, r4, r5, lr}
 80a063c:	4604      	mov	r4, r0
 80a063e:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a0640:	f002 f8ec 	bl	80a281c <_Z19__fetch_global_Wirev>
 80a0644:	f994 1000 	ldrsb.w	r1, [r4]
 80a0648:	f001 fca4 	bl	80a1f94 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a064c:	f002 f8e6 	bl	80a281c <_Z19__fetch_global_Wirev>
 80a0650:	6803      	ldr	r3, [r0, #0]
 80a0652:	4629      	mov	r1, r5
 80a0654:	689b      	ldr	r3, [r3, #8]
 80a0656:	4798      	blx	r3
    Wire.endTransmission(false);
 80a0658:	f002 f8e0 	bl	80a281c <_Z19__fetch_global_Wirev>
 80a065c:	2100      	movs	r1, #0
 80a065e:	f001 fc9c 	bl	80a1f9a <_ZN7TwoWire15endTransmissionEh>
    while (Wire.requestFrom(_i2caddr, 2) != 2);
 80a0662:	f002 f8db 	bl	80a281c <_Z19__fetch_global_Wirev>
 80a0666:	2202      	movs	r2, #2
 80a0668:	f994 1000 	ldrsb.w	r1, [r4]
 80a066c:	f001 fc89 	bl	80a1f82 <_ZN7TwoWire11requestFromEii>
 80a0670:	2802      	cmp	r0, #2
 80a0672:	d1f6      	bne.n	80a0662 <_ZN15Adafruit_MPR12114readRegister16Eh+0x28>
    uint16_t v = Wire.read();
 80a0674:	f002 f8d2 	bl	80a281c <_Z19__fetch_global_Wirev>
 80a0678:	6803      	ldr	r3, [r0, #0]
 80a067a:	695b      	ldr	r3, [r3, #20]
 80a067c:	4798      	blx	r3
 80a067e:	4604      	mov	r4, r0
    v |=  ((uint16_t) Wire.read()) << 8;
 80a0680:	f002 f8cc 	bl	80a281c <_Z19__fetch_global_Wirev>
 80a0684:	6803      	ldr	r3, [r0, #0]
 80a0686:	695b      	ldr	r3, [r3, #20]
 80a0688:	4798      	blx	r3
    return v;
 80a068a:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
 80a068e:	b280      	uxth	r0, r0
 80a0690:	bd38      	pop	{r3, r4, r5, pc}

080a0692 <_ZN15Adafruit_MPR1217touchedEv>:
  if (t > 12) return 0;
  uint16_t bl = readRegister8(MPR121_BASELINE_0 + t);
  return (bl << 2);
}

uint16_t  Adafruit_MPR121::touched(void) {
 80a0692:	b508      	push	{r3, lr}
  uint16_t t = readRegister16(MPR121_TOUCHSTATUS_L);
 80a0694:	2100      	movs	r1, #0
 80a0696:	f7ff ffd0 	bl	80a063a <_ZN15Adafruit_MPR12114readRegister16Eh>
  return t & 0x0FFF;
}
 80a069a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80a069e:	bd08      	pop	{r3, pc}

080a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>:
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
 80a06a0:	b570      	push	{r4, r5, r6, lr}
 80a06a2:	4606      	mov	r6, r0
 80a06a4:	4614      	mov	r4, r2
 80a06a6:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a06a8:	f002 f8b8 	bl	80a281c <_Z19__fetch_global_Wirev>
 80a06ac:	f996 1000 	ldrsb.w	r1, [r6]
 80a06b0:	f001 fc70 	bl	80a1f94 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 80a06b4:	f002 f8b2 	bl	80a281c <_Z19__fetch_global_Wirev>
 80a06b8:	6803      	ldr	r3, [r0, #0]
 80a06ba:	4629      	mov	r1, r5
 80a06bc:	689b      	ldr	r3, [r3, #8]
 80a06be:	4798      	blx	r3
    Wire.write((uint8_t)(value));
 80a06c0:	f002 f8ac 	bl	80a281c <_Z19__fetch_global_Wirev>
 80a06c4:	6803      	ldr	r3, [r0, #0]
 80a06c6:	4621      	mov	r1, r4
 80a06c8:	689b      	ldr	r3, [r3, #8]
 80a06ca:	4798      	blx	r3
    Wire.endTransmission();
 80a06cc:	f002 f8a6 	bl	80a281c <_Z19__fetch_global_Wirev>
}
 80a06d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
    Wire.beginTransmission(_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)(value));
    Wire.endTransmission();
 80a06d4:	f001 bc65 	b.w	80a1fa2 <_ZN7TwoWire15endTransmissionEv>

080a06d8 <_ZN15Adafruit_MPR12113setThresholdsEhh>:
void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
 80a06d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a06da:	4605      	mov	r5, r0
 80a06dc:	460f      	mov	r7, r1
 80a06de:	4616      	mov	r6, r2
 80a06e0:	2441      	movs	r4, #65	; 0x41
  for (uint8_t i=0; i<12; i++) {
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
 80a06e2:	4621      	mov	r1, r4
 80a06e4:	463a      	mov	r2, r7
 80a06e6:	4628      	mov	r0, r5
 80a06e8:	f7ff ffda 	bl	80a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
 80a06ec:	1c61      	adds	r1, r4, #1
 80a06ee:	3402      	adds	r4, #2
 80a06f0:	4632      	mov	r2, r6
 80a06f2:	b2c9      	uxtb	r1, r1
 80a06f4:	4628      	mov	r0, r5
 80a06f6:	b2e4      	uxtb	r4, r4
 80a06f8:	f7ff ffd2 	bl	80a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
  for (uint8_t i=0; i<12; i++) {
 80a06fc:	2c59      	cmp	r4, #89	; 0x59
 80a06fe:	d1f0      	bne.n	80a06e2 <_ZN15Adafruit_MPR12113setThresholdsEhh+0xa>
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
  }
}
 80a0700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0702 <_ZN15Adafruit_MPR1215beginEh>:
#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
 80a0702:	b538      	push	{r3, r4, r5, lr}
 80a0704:	4604      	mov	r4, r0
 80a0706:	460d      	mov	r5, r1
  Wire.begin();
 80a0708:	f002 f888 	bl	80a281c <_Z19__fetch_global_Wirev>
 80a070c:	f001 fc2a 	bl	80a1f64 <_ZN7TwoWire5beginEv>
    
  _i2caddr = i2caddr;

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a0710:	2263      	movs	r2, #99	; 0x63
 80a0712:	2180      	movs	r1, #128	; 0x80
 80a0714:	4620      	mov	r0, r4
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
  Wire.begin();
    
  _i2caddr = i2caddr;
 80a0716:	7025      	strb	r5, [r4, #0]

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a0718:	f7ff ffc2 	bl	80a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  delay(1);
 80a071c:	2001      	movs	r0, #1
 80a071e:	f001 fbd7 	bl	80a1ed0 <delay>
  //  Serial.print("$"); Serial.print(i, HEX); 
  //  Serial.print(": 0x"); Serial.println(readRegister8(i));
  }
  

  writeRegister(MPR121_ECR, 0x0);
 80a0722:	2200      	movs	r2, #0
 80a0724:	215e      	movs	r1, #94	; 0x5e
 80a0726:	4620      	mov	r0, r4
 80a0728:	f7ff ffba 	bl	80a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  uint8_t c = readRegister8(MPR121_CONFIG2);
 80a072c:	215d      	movs	r1, #93	; 0x5d
 80a072e:	4620      	mov	r0, r4
 80a0730:	f7ff ff5f 	bl	80a05f2 <_ZN15Adafruit_MPR12113readRegister8Eh>
  
  if (c != 0x24) return false;
 80a0734:	2824      	cmp	r0, #36	; 0x24
 80a0736:	d151      	bne.n	80a07dc <_ZN15Adafruit_MPR1215beginEh+0xda>
  return true;
}

void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
 80a0738:	4620      	mov	r0, r4
 80a073a:	2206      	movs	r2, #6
 80a073c:	210c      	movs	r1, #12
 80a073e:	f7ff ffcb 	bl	80a06d8 <_ZN15Adafruit_MPR12113setThresholdsEhh>
  
  if (c != 0x24) return false;


  setThreshholds(12, 6);
  writeRegister(MPR121_MHDR, 0x01);
 80a0742:	4620      	mov	r0, r4
 80a0744:	2201      	movs	r2, #1
 80a0746:	212b      	movs	r1, #43	; 0x2b
 80a0748:	f7ff ffaa 	bl	80a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDR, 0x01);
 80a074c:	4620      	mov	r0, r4
 80a074e:	2201      	movs	r2, #1
 80a0750:	212c      	movs	r1, #44	; 0x2c
 80a0752:	f7ff ffa5 	bl	80a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLR, 0x0E);
 80a0756:	4620      	mov	r0, r4
 80a0758:	220e      	movs	r2, #14
 80a075a:	212d      	movs	r1, #45	; 0x2d
 80a075c:	f7ff ffa0 	bl	80a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLR, 0x00);
 80a0760:	4620      	mov	r0, r4
 80a0762:	2200      	movs	r2, #0
 80a0764:	212e      	movs	r1, #46	; 0x2e
 80a0766:	f7ff ff9b 	bl	80a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_MHDF, 0x01);
 80a076a:	4620      	mov	r0, r4
 80a076c:	2201      	movs	r2, #1
 80a076e:	212f      	movs	r1, #47	; 0x2f
 80a0770:	f7ff ff96 	bl	80a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDF, 0x05);
 80a0774:	4620      	mov	r0, r4
 80a0776:	2205      	movs	r2, #5
 80a0778:	2130      	movs	r1, #48	; 0x30
 80a077a:	f7ff ff91 	bl	80a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLF, 0x01);
 80a077e:	4620      	mov	r0, r4
 80a0780:	2201      	movs	r2, #1
 80a0782:	2131      	movs	r1, #49	; 0x31
 80a0784:	f7ff ff8c 	bl	80a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLF, 0x00);
 80a0788:	4620      	mov	r0, r4
 80a078a:	2200      	movs	r2, #0
 80a078c:	2132      	movs	r1, #50	; 0x32
 80a078e:	f7ff ff87 	bl	80a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_NHDT, 0x00);
 80a0792:	4620      	mov	r0, r4
 80a0794:	2200      	movs	r2, #0
 80a0796:	2133      	movs	r1, #51	; 0x33
 80a0798:	f7ff ff82 	bl	80a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLT, 0x00);
 80a079c:	4620      	mov	r0, r4
 80a079e:	2200      	movs	r2, #0
 80a07a0:	2134      	movs	r1, #52	; 0x34
 80a07a2:	f7ff ff7d 	bl	80a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLT, 0x00);
 80a07a6:	4620      	mov	r0, r4
 80a07a8:	2200      	movs	r2, #0
 80a07aa:	2135      	movs	r1, #53	; 0x35
 80a07ac:	f7ff ff78 	bl	80a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_DEBOUNCE, 0);
 80a07b0:	4620      	mov	r0, r4
 80a07b2:	2200      	movs	r2, #0
 80a07b4:	215b      	movs	r1, #91	; 0x5b
 80a07b6:	f7ff ff73 	bl	80a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 80a07ba:	4620      	mov	r0, r4
 80a07bc:	2210      	movs	r2, #16
 80a07be:	215c      	movs	r1, #92	; 0x5c
 80a07c0:	f7ff ff6e 	bl	80a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 80a07c4:	4620      	mov	r0, r4
 80a07c6:	2220      	movs	r2, #32
 80a07c8:	215d      	movs	r1, #93	; 0x5d
 80a07ca:	f7ff ff69 	bl	80a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>

//  writeRegister(MPR121_UPLIMIT, 150);
//  writeRegister(MPR121_TARGETLIMIT, 100); // should be ~400 (100 shifted)
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking
 80a07ce:	4620      	mov	r0, r4
 80a07d0:	228f      	movs	r2, #143	; 0x8f
 80a07d2:	215e      	movs	r1, #94	; 0x5e
 80a07d4:	f7ff ff64 	bl	80a06a0 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  return true;
 80a07d8:	2001      	movs	r0, #1
 80a07da:	bd38      	pop	{r3, r4, r5, pc}

  writeRegister(MPR121_ECR, 0x0);

  uint8_t c = readRegister8(MPR121_CONFIG2);
  
  if (c != 0x24) return false;
 80a07dc:	2000      	movs	r0, #0
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking

  return true;
}
 80a07de:	bd38      	pop	{r3, r4, r5, pc}

080a07e0 <_GLOBAL__sub_I__ZN15Adafruit_MPR121C2Ev>:
 80a07e0:	f001 b9d0 	b.w	80a1b84 <HAL_Pin_Map>

080a07e4 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a07e4:	f001 b9ce 	b.w	80a1b84 <HAL_Pin_Map>

080a07e8 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
 80a07e8:	f001 b9cc 	b.w	80a1b84 <HAL_Pin_Map>

080a07ec <_GLOBAL__sub_I__ZN7MPU9250C2Ev>:
 80a07ec:	f001 b9ca 	b.w	80a1b84 <HAL_Pin_Map>

080a07f0 <_GLOBAL__sub_I__ZN7MPU92507getMresEv>:
 80a07f0:	f001 b9c8 	b.w	80a1b84 <HAL_Pin_Map>

080a07f4 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff>:
  q[1] = q2 * norm;
  q[2] = q3 * norm;
  q[3] = q4 * norm;
}

const float * getQ () { return q; }
 80a07f4:	b508      	push	{r3, lr}
 80a07f6:	f001 f9c5 	bl	80a1b84 <HAL_Pin_Map>
// noticed any reduction in solution accuracy. This is essentially the I
// coefficient in a PID control sense; the bigger the feedback coefficient,
// the faster the solution converges, usually at the expense of accuracy.
// In any case, this is the free parameter in the Madgwick filtering and
// fusion scheme.
static float beta = sqrt(3.0f / 4.0f) * GyroMeasError;   // Compute beta
 80a07fa:	4a02      	ldr	r2, [pc, #8]	; (80a0804 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x10>)
 80a07fc:	4b02      	ldr	r3, [pc, #8]	; (80a0808 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x14>)
 80a07fe:	601a      	str	r2, [r3, #0]
 80a0800:	bd08      	pop	{r3, pc}
 80a0802:	bf00      	nop
 80a0804:	3f1ac70d 	.word	0x3f1ac70d
 80a0808:	200001e4 	.word	0x200001e4

080a080c <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a080c:	f001 b9aa 	b.w	80a1b64 <HAL_Timer_Get_Micro_Seconds>

080a0810 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0810:	b510      	push	{r4, lr}
 80a0812:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0814:	68c0      	ldr	r0, [r0, #12]
 80a0816:	b108      	cbz	r0, 80a081c <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a0818:	f001 fb52 	bl	80a1ec0 <free>
  if (begun) pinMode(pin, INPUT);
 80a081c:	7823      	ldrb	r3, [r4, #0]
 80a081e:	b11b      	cbz	r3, 80a0828 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0820:	2100      	movs	r1, #0
 80a0822:	79e0      	ldrb	r0, [r4, #7]
 80a0824:	f001 ffd0 	bl	80a27c8 <pinMode>
}
 80a0828:	4620      	mov	r0, r4
 80a082a:	bd10      	pop	{r4, pc}

080a082c <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a082c:	b538      	push	{r3, r4, r5, lr}
 80a082e:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0830:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0832:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0834:	b108      	cbz	r0, 80a083a <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a0836:	f001 fb43 	bl	80a1ec0 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a083a:	79a3      	ldrb	r3, [r4, #6]
 80a083c:	2b06      	cmp	r3, #6
 80a083e:	bf0c      	ite	eq
 80a0840:	2004      	moveq	r0, #4
 80a0842:	2003      	movne	r0, #3
 80a0844:	4368      	muls	r0, r5
 80a0846:	b280      	uxth	r0, r0
 80a0848:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a084a:	f001 fb31 	bl	80a1eb0 <malloc>
 80a084e:	60e0      	str	r0, [r4, #12]
 80a0850:	b128      	cbz	r0, 80a085e <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a0852:	88a2      	ldrh	r2, [r4, #4]
 80a0854:	2100      	movs	r1, #0
 80a0856:	f002 f9a4 	bl	80a2ba2 <memset>
    numLEDs = n;
 80a085a:	8065      	strh	r5, [r4, #2]
 80a085c:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a085e:	80a0      	strh	r0, [r4, #4]
 80a0860:	8060      	strh	r0, [r4, #2]
 80a0862:	bd38      	pop	{r3, r4, r5, pc}

080a0864 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a0864:	b510      	push	{r4, lr}
 80a0866:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a0868:	2101      	movs	r1, #1
 80a086a:	79c0      	ldrb	r0, [r0, #7]
 80a086c:	f001 ffac 	bl	80a27c8 <pinMode>
  digitalWrite(pin, LOW);
 80a0870:	2100      	movs	r1, #0
 80a0872:	79e0      	ldrb	r0, [r4, #7]
 80a0874:	f001 ffb9 	bl	80a27ea <digitalWrite>
  begun = true;
 80a0878:	2301      	movs	r3, #1
 80a087a:	7023      	strb	r3, [r4, #0]
 80a087c:	bd10      	pop	{r4, pc}

080a087e <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a087e:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0880:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0882:	4605      	mov	r5, r0
 80a0884:	460c      	mov	r4, r1
    if (begun) {
 80a0886:	b11b      	cbz	r3, 80a0890 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a0888:	2100      	movs	r1, #0
 80a088a:	79c0      	ldrb	r0, [r0, #7]
 80a088c:	f001 ff9c 	bl	80a27c8 <pinMode>
    }
    pin = p;
    if (begun) {
 80a0890:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a0892:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0894:	b153      	cbz	r3, 80a08ac <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a0896:	b2a4      	uxth	r4, r4
 80a0898:	4620      	mov	r0, r4
 80a089a:	2101      	movs	r1, #1
 80a089c:	f001 ff94 	bl	80a27c8 <pinMode>
        digitalWrite(p, LOW);
 80a08a0:	4620      	mov	r0, r4
    }
}
 80a08a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a08a6:	2100      	movs	r1, #0
 80a08a8:	f001 bf9f 	b.w	80a27ea <digitalWrite>
 80a08ac:	bd38      	pop	{r3, r4, r5, pc}

080a08ae <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a08ae:	b570      	push	{r4, r5, r6, lr}
 80a08b0:	4604      	mov	r4, r0
 80a08b2:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a08b4:	2500      	movs	r5, #0
 80a08b6:	7183      	strb	r3, [r0, #6]
 80a08b8:	7005      	strb	r5, [r0, #0]
 80a08ba:	7205      	strb	r5, [r0, #8]
 80a08bc:	60c5      	str	r5, [r0, #12]
 80a08be:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a08c0:	f7ff ffb4 	bl	80a082c <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a08c4:	4620      	mov	r0, r4
 80a08c6:	4631      	mov	r1, r6
 80a08c8:	f7ff ffd9 	bl	80a087e <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a08cc:	4620      	mov	r0, r4
 80a08ce:	bd70      	pop	{r4, r5, r6, pc}

080a08d0 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a08d0:	68c3      	ldr	r3, [r0, #12]
 80a08d2:	2b00      	cmp	r3, #0
 80a08d4:	f000 858e 	beq.w	80a13f4 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a08d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a08dc:	4604      	mov	r4, r0
 80a08de:	7983      	ldrb	r3, [r0, #6]
 80a08e0:	b086      	sub	sp, #24
 80a08e2:	3b02      	subs	r3, #2
 80a08e4:	b2db      	uxtb	r3, r3
 80a08e6:	2b04      	cmp	r3, #4
 80a08e8:	bf96      	itet	ls
 80a08ea:	4a29      	ldrls	r2, [pc, #164]	; (80a0990 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a08ec:	2532      	movhi	r5, #50	; 0x32
 80a08ee:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a08f2:	f7ff ff8b 	bl	80a080c <micros>
 80a08f6:	6923      	ldr	r3, [r4, #16]
 80a08f8:	1ac0      	subs	r0, r0, r3
 80a08fa:	42a8      	cmp	r0, r5
 80a08fc:	d3f9      	bcc.n	80a08f2 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a08fe:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0900:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0902:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0904:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0906:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a090a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a090e:	f000 8272 	beq.w	80a0df6 <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a0912:	2907      	cmp	r1, #7
 80a0914:	f000 826f 	beq.w	80a0df6 <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0918:	2906      	cmp	r1, #6
 80a091a:	f000 8432 	beq.w	80a1182 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a091e:	2905      	cmp	r1, #5
 80a0920:	f000 83ab 	beq.w	80a107a <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0924:	2908      	cmp	r1, #8
 80a0926:	f000 83a8 	beq.w	80a107a <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a092a:	2900      	cmp	r1, #0
 80a092c:	f040 8563 	bne.w	80a13f6 <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a0930:	4a18      	ldr	r2, [pc, #96]	; (80a0994 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0932:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0936:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a093a:	b29b      	uxth	r3, r3
 80a093c:	2b00      	cmp	r3, #0
 80a093e:	f000 8395 	beq.w	80a106c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0942:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0944:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0948:	f10e 0503 	add.w	r5, lr, #3
 80a094c:	3b03      	subs	r3, #3
 80a094e:	b29b      	uxth	r3, r3
 80a0950:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0954:	f89e 3000 	ldrb.w	r3, [lr]
 80a0958:	b2db      	uxtb	r3, r3
 80a095a:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a095e:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0962:	b2db      	uxtb	r3, r3
 80a0964:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0968:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a096c:	b2db      	uxtb	r3, r3
 80a096e:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0972:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0976:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a097a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a097e:	021b      	lsls	r3, r3, #8
 80a0980:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0984:	4303      	orrs	r3, r0
 80a0986:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0988:	f88d 1005 	strb.w	r1, [sp, #5]
 80a098c:	e11b      	b.n	80a0bc6 <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a098e:	bf00      	nop
 80a0990:	080a2ce0 	.word	0x080a2ce0
 80a0994:	200001e8 	.word	0x200001e8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0998:	4600      	mov	r0, r0
 80a099a:	bf00      	nop
 80a099c:	bf00      	nop
 80a099e:	bf00      	nop
 80a09a0:	bf00      	nop
 80a09a2:	bf00      	nop
 80a09a4:	bf00      	nop
 80a09a6:	bf00      	nop
 80a09a8:	bf00      	nop
 80a09aa:	bf00      	nop
 80a09ac:	bf00      	nop
 80a09ae:	bf00      	nop
 80a09b0:	bf00      	nop
 80a09b2:	bf00      	nop
 80a09b4:	bf00      	nop
 80a09b6:	bf00      	nop
 80a09b8:	bf00      	nop
 80a09ba:	bf00      	nop
 80a09bc:	bf00      	nop
 80a09be:	bf00      	nop
 80a09c0:	bf00      	nop
 80a09c2:	bf00      	nop
 80a09c4:	bf00      	nop
 80a09c6:	bf00      	nop
 80a09c8:	bf00      	nop
 80a09ca:	bf00      	nop
 80a09cc:	bf00      	nop
 80a09ce:	bf00      	nop
 80a09d0:	bf00      	nop
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
 80a09e4:	bf00      	nop
 80a09e6:	bf00      	nop
 80a09e8:	bf00      	nop
 80a09ea:	bf00      	nop
 80a09ec:	bf00      	nop
 80a09ee:	bf00      	nop
 80a09f0:	bf00      	nop
 80a09f2:	bf00      	nop
 80a09f4:	bf00      	nop
 80a09f6:	bf00      	nop
 80a09f8:	bf00      	nop
 80a09fa:	bf00      	nop
 80a09fc:	bf00      	nop
 80a09fe:	bf00      	nop
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
 80a0a04:	bf00      	nop
 80a0a06:	bf00      	nop
 80a0a08:	bf00      	nop
 80a0a0a:	bf00      	nop
 80a0a0c:	bf00      	nop
 80a0a0e:	bf00      	nop
 80a0a10:	bf00      	nop
 80a0a12:	bf00      	nop
 80a0a14:	bf00      	nop
 80a0a16:	bf00      	nop
 80a0a18:	bf00      	nop
 80a0a1a:	bf00      	nop
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
 80a0a26:	bf00      	nop
 80a0a28:	bf00      	nop
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
 80a0a66:	bf00      	nop
 80a0a68:	bf00      	nop
 80a0a6a:	bf00      	nop
 80a0a6c:	bf00      	nop
 80a0a6e:	bf00      	nop
 80a0a70:	bf00      	nop
 80a0a72:	bf00      	nop
 80a0a74:	bf00      	nop
 80a0a76:	bf00      	nop
 80a0a78:	bf00      	nop
 80a0a7a:	bf00      	nop
 80a0a7c:	bf00      	nop
 80a0a7e:	bf00      	nop
 80a0a80:	bf00      	nop
 80a0a82:	bf00      	nop
 80a0a84:	bf00      	nop
 80a0a86:	bf00      	nop
 80a0a88:	bf00      	nop
 80a0a8a:	bf00      	nop
 80a0a8c:	bf00      	nop
 80a0a8e:	bf00      	nop
 80a0a90:	bf00      	nop
 80a0a92:	bf00      	nop
 80a0a94:	bf00      	nop
 80a0a96:	bf00      	nop
 80a0a98:	bf00      	nop
 80a0a9a:	bf00      	nop
 80a0a9c:	bf00      	nop
 80a0a9e:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0aa0:	79e3      	ldrb	r3, [r4, #7]
 80a0aa2:	6810      	ldr	r0, [r2, #0]
 80a0aa4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0aa8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0aac:	88bf      	ldrh	r7, [r7, #4]
 80a0aae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0ab2:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ab4:	4600      	mov	r0, r0
 80a0ab6:	bf00      	nop
 80a0ab8:	bf00      	nop
 80a0aba:	bf00      	nop
 80a0abc:	bf00      	nop
 80a0abe:	bf00      	nop
 80a0ac0:	bf00      	nop
 80a0ac2:	bf00      	nop
 80a0ac4:	bf00      	nop
 80a0ac6:	bf00      	nop
 80a0ac8:	bf00      	nop
 80a0aca:	bf00      	nop
 80a0acc:	bf00      	nop
 80a0ace:	bf00      	nop
 80a0ad0:	bf00      	nop
 80a0ad2:	bf00      	nop
 80a0ad4:	bf00      	nop
 80a0ad6:	bf00      	nop
 80a0ad8:	bf00      	nop
 80a0ada:	bf00      	nop
 80a0adc:	bf00      	nop
 80a0ade:	bf00      	nop
 80a0ae0:	bf00      	nop
 80a0ae2:	bf00      	nop
 80a0ae4:	bf00      	nop
 80a0ae6:	bf00      	nop
 80a0ae8:	bf00      	nop
 80a0aea:	bf00      	nop
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
 80a0b00:	bf00      	nop
 80a0b02:	bf00      	nop
 80a0b04:	bf00      	nop
 80a0b06:	bf00      	nop
 80a0b08:	bf00      	nop
 80a0b0a:	bf00      	nop
 80a0b0c:	bf00      	nop
 80a0b0e:	bf00      	nop
 80a0b10:	bf00      	nop
 80a0b12:	bf00      	nop
 80a0b14:	bf00      	nop
 80a0b16:	bf00      	nop
 80a0b18:	bf00      	nop
 80a0b1a:	bf00      	nop
 80a0b1c:	bf00      	nop
 80a0b1e:	bf00      	nop
 80a0b20:	bf00      	nop
 80a0b22:	bf00      	nop
 80a0b24:	bf00      	nop
 80a0b26:	bf00      	nop
 80a0b28:	bf00      	nop
 80a0b2a:	bf00      	nop
 80a0b2c:	bf00      	nop
 80a0b2e:	bf00      	nop
 80a0b30:	bf00      	nop
 80a0b32:	bf00      	nop
 80a0b34:	bf00      	nop
 80a0b36:	bf00      	nop
 80a0b38:	bf00      	nop
 80a0b3a:	bf00      	nop
 80a0b3c:	bf00      	nop
 80a0b3e:	bf00      	nop
 80a0b40:	bf00      	nop
 80a0b42:	bf00      	nop
 80a0b44:	bf00      	nop
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
 80a0b7a:	bf00      	nop
 80a0b7c:	bf00      	nop
 80a0b7e:	bf00      	nop
 80a0b80:	bf00      	nop
 80a0b82:	bf00      	nop
 80a0b84:	bf00      	nop
 80a0b86:	bf00      	nop
 80a0b88:	bf00      	nop
 80a0b8a:	bf00      	nop
 80a0b8c:	bf00      	nop
 80a0b8e:	bf00      	nop
 80a0b90:	bf00      	nop
 80a0b92:	bf00      	nop
 80a0b94:	bf00      	nop
 80a0b96:	bf00      	nop
 80a0b98:	bf00      	nop
 80a0b9a:	bf00      	nop
 80a0b9c:	bf00      	nop
 80a0b9e:	bf00      	nop
 80a0ba0:	bf00      	nop
 80a0ba2:	bf00      	nop
 80a0ba4:	bf00      	nop
 80a0ba6:	bf00      	nop
 80a0ba8:	bf00      	nop
 80a0baa:	bf00      	nop
 80a0bac:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0bae:	9b04      	ldr	r3, [sp, #16]
 80a0bb0:	085b      	lsrs	r3, r3, #1
 80a0bb2:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0bb4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0bb8:	3301      	adds	r3, #1
 80a0bba:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0bbc:	2b17      	cmp	r3, #23
 80a0bbe:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0bc2:	f200 82db 	bhi.w	80a117c <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a0bc6:	79e3      	ldrb	r3, [r4, #7]
 80a0bc8:	6810      	ldr	r0, [r2, #0]
 80a0bca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0bce:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0bd2:	88bf      	ldrh	r7, [r7, #4]
 80a0bd4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0bd8:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0bda:	9803      	ldr	r0, [sp, #12]
 80a0bdc:	9b04      	ldr	r3, [sp, #16]
 80a0bde:	4218      	tst	r0, r3
 80a0be0:	f47f aeda 	bne.w	80a0998 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0be4:	4600      	mov	r0, r0
 80a0be6:	bf00      	nop
 80a0be8:	bf00      	nop
 80a0bea:	bf00      	nop
 80a0bec:	bf00      	nop
 80a0bee:	bf00      	nop
 80a0bf0:	bf00      	nop
 80a0bf2:	bf00      	nop
 80a0bf4:	bf00      	nop
 80a0bf6:	bf00      	nop
 80a0bf8:	bf00      	nop
 80a0bfa:	bf00      	nop
 80a0bfc:	bf00      	nop
 80a0bfe:	bf00      	nop
 80a0c00:	bf00      	nop
 80a0c02:	bf00      	nop
 80a0c04:	bf00      	nop
 80a0c06:	bf00      	nop
 80a0c08:	bf00      	nop
 80a0c0a:	bf00      	nop
 80a0c0c:	bf00      	nop
 80a0c0e:	bf00      	nop
 80a0c10:	bf00      	nop
 80a0c12:	bf00      	nop
 80a0c14:	bf00      	nop
 80a0c16:	bf00      	nop
 80a0c18:	bf00      	nop
 80a0c1a:	bf00      	nop
 80a0c1c:	bf00      	nop
 80a0c1e:	bf00      	nop
 80a0c20:	bf00      	nop
 80a0c22:	bf00      	nop
 80a0c24:	bf00      	nop
 80a0c26:	bf00      	nop
 80a0c28:	bf00      	nop
 80a0c2a:	bf00      	nop
 80a0c2c:	bf00      	nop
 80a0c2e:	bf00      	nop
 80a0c30:	bf00      	nop
 80a0c32:	bf00      	nop
 80a0c34:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a0c36:	79e3      	ldrb	r3, [r4, #7]
 80a0c38:	6810      	ldr	r0, [r2, #0]
 80a0c3a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c3e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c42:	88bf      	ldrh	r7, [r7, #4]
 80a0c44:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c48:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0c4a:	4600      	mov	r0, r0
 80a0c4c:	bf00      	nop
 80a0c4e:	bf00      	nop
 80a0c50:	bf00      	nop
 80a0c52:	bf00      	nop
 80a0c54:	bf00      	nop
 80a0c56:	bf00      	nop
 80a0c58:	bf00      	nop
 80a0c5a:	bf00      	nop
 80a0c5c:	bf00      	nop
 80a0c5e:	bf00      	nop
 80a0c60:	bf00      	nop
 80a0c62:	bf00      	nop
 80a0c64:	bf00      	nop
 80a0c66:	bf00      	nop
 80a0c68:	bf00      	nop
 80a0c6a:	bf00      	nop
 80a0c6c:	bf00      	nop
 80a0c6e:	bf00      	nop
 80a0c70:	bf00      	nop
 80a0c72:	bf00      	nop
 80a0c74:	bf00      	nop
 80a0c76:	bf00      	nop
 80a0c78:	bf00      	nop
 80a0c7a:	bf00      	nop
 80a0c7c:	bf00      	nop
 80a0c7e:	bf00      	nop
 80a0c80:	bf00      	nop
 80a0c82:	bf00      	nop
 80a0c84:	bf00      	nop
 80a0c86:	bf00      	nop
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
 80a0c8c:	bf00      	nop
 80a0c8e:	bf00      	nop
 80a0c90:	bf00      	nop
 80a0c92:	bf00      	nop
 80a0c94:	bf00      	nop
 80a0c96:	bf00      	nop
 80a0c98:	bf00      	nop
 80a0c9a:	bf00      	nop
 80a0c9c:	bf00      	nop
 80a0c9e:	bf00      	nop
 80a0ca0:	bf00      	nop
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	bf00      	nop
 80a0d00:	bf00      	nop
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
 80a0d0e:	bf00      	nop
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	e6db      	b.n	80a0bae <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0df6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0dfa:	4a17      	ldr	r2, [pc, #92]	; (80a0e58 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a0dfc:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a0dfe:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0e02:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0e04:	2b00      	cmp	r3, #0
 80a0e06:	f000 8131 	beq.w	80a106c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0e0a:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0e0c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0e10:	f10e 0103 	add.w	r1, lr, #3
 80a0e14:	3b03      	subs	r3, #3
 80a0e16:	b29b      	uxth	r3, r3
 80a0e18:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0e1c:	f89e 3000 	ldrb.w	r3, [lr]
 80a0e20:	b2db      	uxtb	r3, r3
 80a0e22:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0e26:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0e2a:	b2db      	uxtb	r3, r3
 80a0e2c:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0e30:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0e34:	b2db      	uxtb	r3, r3
 80a0e36:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0e3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0e3e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a0e42:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a0e46:	0200      	lsls	r0, r0, #8
 80a0e48:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a0e4c:	433b      	orrs	r3, r7
 80a0e4e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0e50:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0e54:	e080      	b.n	80a0f58 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a0e56:	bf00      	nop
 80a0e58:	200001e8 	.word	0x200001e8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0e5c:	4600      	mov	r0, r0
 80a0e5e:	bf00      	nop
 80a0e60:	bf00      	nop
 80a0e62:	bf00      	nop
 80a0e64:	bf00      	nop
 80a0e66:	bf00      	nop
 80a0e68:	bf00      	nop
 80a0e6a:	bf00      	nop
 80a0e6c:	bf00      	nop
 80a0e6e:	bf00      	nop
 80a0e70:	bf00      	nop
 80a0e72:	bf00      	nop
 80a0e74:	bf00      	nop
 80a0e76:	bf00      	nop
 80a0e78:	bf00      	nop
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
 80a0ea4:	bf00      	nop
 80a0ea6:	bf00      	nop
 80a0ea8:	bf00      	nop
 80a0eaa:	bf00      	nop
 80a0eac:	bf00      	nop
 80a0eae:	bf00      	nop
 80a0eb0:	bf00      	nop
 80a0eb2:	bf00      	nop
 80a0eb4:	bf00      	nop
 80a0eb6:	bf00      	nop
 80a0eb8:	bf00      	nop
 80a0eba:	bf00      	nop
 80a0ebc:	bf00      	nop
 80a0ebe:	bf00      	nop
 80a0ec0:	bf00      	nop
 80a0ec2:	bf00      	nop
 80a0ec4:	bf00      	nop
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a0ef6:	79e3      	ldrb	r3, [r4, #7]
 80a0ef8:	6810      	ldr	r0, [r2, #0]
 80a0efa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0efe:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0f02:	88bf      	ldrh	r7, [r7, #4]
 80a0f04:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f08:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f0a:	4600      	mov	r0, r0
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0f40:	9b04      	ldr	r3, [sp, #16]
 80a0f42:	085b      	lsrs	r3, r3, #1
 80a0f44:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0f46:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0f4a:	3301      	adds	r3, #1
 80a0f4c:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0f4e:	2b17      	cmp	r3, #23
 80a0f50:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0f54:	f200 8083 	bhi.w	80a105e <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a0f58:	79e3      	ldrb	r3, [r4, #7]
 80a0f5a:	6810      	ldr	r0, [r2, #0]
 80a0f5c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0f60:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0f64:	88bf      	ldrh	r7, [r7, #4]
 80a0f66:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f6a:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0f6c:	9803      	ldr	r0, [sp, #12]
 80a0f6e:	9b04      	ldr	r3, [sp, #16]
 80a0f70:	4218      	tst	r0, r3
 80a0f72:	f47f af73 	bne.w	80a0e5c <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f76:	4600      	mov	r0, r0
 80a0f78:	bf00      	nop
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
 80a0f86:	bf00      	nop
 80a0f88:	bf00      	nop
 80a0f8a:	bf00      	nop
 80a0f8c:	bf00      	nop
 80a0f8e:	bf00      	nop
 80a0f90:	bf00      	nop
 80a0f92:	bf00      	nop
 80a0f94:	bf00      	nop
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a0f9e:	79e3      	ldrb	r3, [r4, #7]
 80a0fa0:	6810      	ldr	r0, [r2, #0]
 80a0fa2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0fa6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0faa:	88bf      	ldrh	r7, [r7, #4]
 80a0fac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0fb0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0fb2:	4600      	mov	r0, r0
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	e770      	b.n	80a0f40 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a105e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1062:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1064:	b29b      	uxth	r3, r3
 80a1066:	2b00      	cmp	r3, #0
 80a1068:	f47f aecf 	bne.w	80a0e0a <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a106c:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a106e:	f7ff fbcd 	bl	80a080c <micros>
 80a1072:	6120      	str	r0, [r4, #16]
}
 80a1074:	b006      	add	sp, #24
 80a1076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a107a:	4b5e      	ldr	r3, [pc, #376]	; (80a11f4 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a107c:	4a5e      	ldr	r2, [pc, #376]	; (80a11f8 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a107e:	4618      	mov	r0, r3
 80a1080:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1082:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1086:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1088:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a108c:	b292      	uxth	r2, r2
 80a108e:	2a00      	cmp	r2, #0
 80a1090:	d0ec      	beq.n	80a106c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1092:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1096:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a109a:	f10e 0503 	add.w	r5, lr, #3
 80a109e:	3a03      	subs	r2, #3
 80a10a0:	b292      	uxth	r2, r2
 80a10a2:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a10a6:	f89e 2000 	ldrb.w	r2, [lr]
 80a10aa:	b2d2      	uxtb	r2, r2
 80a10ac:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a10b0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a10b4:	b2d2      	uxtb	r2, r2
 80a10b6:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a10ba:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a10be:	b2d2      	uxtb	r2, r2
 80a10c0:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a10c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a10c8:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a10cc:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a10d0:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a10d4:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a10d8:	ea42 020c 	orr.w	r2, r2, ip
 80a10dc:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a10de:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a10e2:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a10e4:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a10e6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a10ea:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a10ee:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a10f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a10f6:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a10f8:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a10fc:	9e03      	ldr	r6, [sp, #12]
 80a10fe:	9a04      	ldr	r2, [sp, #16]
 80a1100:	4216      	tst	r6, r2
 80a1102:	d023      	beq.n	80a114c <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1104:	685a      	ldr	r2, [r3, #4]
 80a1106:	9e05      	ldr	r6, [sp, #20]
 80a1108:	1b92      	subs	r2, r2, r6
 80a110a:	2a4f      	cmp	r2, #79	; 0x4f
 80a110c:	d9fa      	bls.n	80a1104 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a110e:	79e2      	ldrb	r2, [r4, #7]
 80a1110:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1114:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1118:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a111c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1120:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1124:	6842      	ldr	r2, [r0, #4]
 80a1126:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a1128:	685a      	ldr	r2, [r3, #4]
 80a112a:	9e05      	ldr	r6, [sp, #20]
 80a112c:	1b92      	subs	r2, r2, r6
 80a112e:	2a07      	cmp	r2, #7
 80a1130:	d9fa      	bls.n	80a1128 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a1132:	9a04      	ldr	r2, [sp, #16]
 80a1134:	0852      	lsrs	r2, r2, #1
 80a1136:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1138:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a113c:	3201      	adds	r2, #1
 80a113e:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1140:	2a17      	cmp	r2, #23
 80a1142:	f88d 2005 	strb.w	r2, [sp, #5]
 80a1146:	d9cc      	bls.n	80a10e2 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1148:	46ae      	mov	lr, r5
 80a114a:	e79d      	b.n	80a1088 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a114c:	685a      	ldr	r2, [r3, #4]
 80a114e:	9e05      	ldr	r6, [sp, #20]
 80a1150:	1b92      	subs	r2, r2, r6
 80a1152:	2a18      	cmp	r2, #24
 80a1154:	d9fa      	bls.n	80a114c <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a1156:	79e2      	ldrb	r2, [r4, #7]
 80a1158:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a115c:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1160:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1164:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1168:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a116c:	6842      	ldr	r2, [r0, #4]
 80a116e:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a1170:	685a      	ldr	r2, [r3, #4]
 80a1172:	9e05      	ldr	r6, [sp, #20]
 80a1174:	1b92      	subs	r2, r2, r6
 80a1176:	2a45      	cmp	r2, #69	; 0x45
 80a1178:	d9fa      	bls.n	80a1170 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a117a:	e7da      	b.n	80a1132 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a117c:	46ae      	mov	lr, r5
 80a117e:	f7ff bbda 	b.w	80a0936 <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a1182:	4a1d      	ldr	r2, [pc, #116]	; (80a11f8 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a1184:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a1188:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a118a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a118e:	b29b      	uxth	r3, r3
 80a1190:	2b00      	cmp	r3, #0
 80a1192:	f43f af6b 	beq.w	80a106c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a1196:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a1198:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a119c:	f10e 0104 	add.w	r1, lr, #4
 80a11a0:	3b04      	subs	r3, #4
 80a11a2:	b29b      	uxth	r3, r3
 80a11a4:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a11a8:	f89e 3000 	ldrb.w	r3, [lr]
 80a11ac:	b2db      	uxtb	r3, r3
 80a11ae:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a11b2:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a11b6:	b2db      	uxtb	r3, r3
 80a11b8:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a11bc:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a11c0:	b2db      	uxtb	r3, r3
 80a11c2:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a11c6:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a11ca:	b2db      	uxtb	r3, r3
 80a11cc:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a11d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a11d4:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a11d8:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a11dc:	043f      	lsls	r7, r7, #16
 80a11de:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a11e2:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a11e6:	4303      	orrs	r3, r0
 80a11e8:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a11ec:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a11ee:	f88d 6005 	strb.w	r6, [sp, #5]
 80a11f2:	e07e      	b.n	80a12f2 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a11f4:	e0001000 	.word	0xe0001000
 80a11f8:	200001e8 	.word	0x200001e8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a11fc:	4600      	mov	r0, r0
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a126a:	79e3      	ldrb	r3, [r4, #7]
 80a126c:	6810      	ldr	r0, [r2, #0]
 80a126e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1272:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1276:	88bf      	ldrh	r7, [r7, #4]
 80a1278:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a127c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a127e:	4600      	mov	r0, r0
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a12dc:	9b04      	ldr	r3, [sp, #16]
 80a12de:	085b      	lsrs	r3, r3, #1
 80a12e0:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a12e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a12e6:	3301      	adds	r3, #1
 80a12e8:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a12ea:	2b1f      	cmp	r3, #31
 80a12ec:	f88d 3005 	strb.w	r3, [sp, #5]
 80a12f0:	d87e      	bhi.n	80a13f0 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a12f2:	79e3      	ldrb	r3, [r4, #7]
 80a12f4:	6810      	ldr	r0, [r2, #0]
 80a12f6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a12fa:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a12fe:	88bf      	ldrh	r7, [r7, #4]
 80a1300:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1304:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1306:	9803      	ldr	r0, [sp, #12]
 80a1308:	9b04      	ldr	r3, [sp, #16]
 80a130a:	4218      	tst	r0, r3
 80a130c:	f47f af76 	bne.w	80a11fc <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1310:	4600      	mov	r0, r0
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a1338:	79e3      	ldrb	r3, [r4, #7]
 80a133a:	6810      	ldr	r0, [r2, #0]
 80a133c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1340:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1344:	88bf      	ldrh	r7, [r7, #4]
 80a1346:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a134a:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a134c:	4600      	mov	r0, r0
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	e775      	b.n	80a12dc <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a13f0:	468e      	mov	lr, r1
 80a13f2:	e6ca      	b.n	80a118a <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a13f4:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a13f6:	2903      	cmp	r1, #3
 80a13f8:	f000 812e 	beq.w	80a1658 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a13fc:	4a1e      	ldr	r2, [pc, #120]	; (80a1478 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a13fe:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1402:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1404:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1408:	b29b      	uxth	r3, r3
 80a140a:	2b00      	cmp	r3, #0
 80a140c:	f43f ae2e 	beq.w	80a106c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1410:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1412:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1416:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a1418:	3b03      	subs	r3, #3
 80a141a:	b29b      	uxth	r3, r3
 80a141c:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1420:	f89e 3000 	ldrb.w	r3, [lr]
 80a1424:	f10e 0103 	add.w	r1, lr, #3
 80a1428:	b2db      	uxtb	r3, r3
 80a142a:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a142e:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1432:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1436:	b2db      	uxtb	r3, r3
 80a1438:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a143c:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1440:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a1444:	b2db      	uxtb	r3, r3
 80a1446:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a144a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a144e:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1452:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1456:	021b      	lsls	r3, r3, #8
 80a1458:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a145c:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1460:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a1464:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1468:	433b      	orrs	r3, r7
 80a146a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a146c:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a1470:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a1474:	e07d      	b.n	80a1572 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a1476:	bf00      	nop
 80a1478:	200001e8 	.word	0x200001e8
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a147c:	9b04      	ldr	r3, [sp, #16]
 80a147e:	085b      	lsrs	r3, r3, #1
 80a1480:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1482:	4600      	mov	r0, r0
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1508:	79e0      	ldrb	r0, [r4, #7]
 80a150a:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a150c:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1510:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1514:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a1518:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a151c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1520:	3301      	adds	r3, #1
 80a1522:	b2db      	uxtb	r3, r3
 80a1524:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1528:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a152c:	4600      	mov	r0, r0
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
          if(j==24) break;
 80a1556:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a155a:	2b18      	cmp	r3, #24
 80a155c:	d07a      	beq.n	80a1654 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a155e:	79e3      	ldrb	r3, [r4, #7]
 80a1560:	6810      	ldr	r0, [r2, #0]
 80a1562:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1566:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a156a:	88bf      	ldrh	r7, [r7, #4]
 80a156c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1570:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a1572:	9803      	ldr	r0, [sp, #12]
 80a1574:	9b04      	ldr	r3, [sp, #16]
 80a1576:	4218      	tst	r0, r3
 80a1578:	d180      	bne.n	80a147c <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a157a:	4600      	mov	r0, r0
 80a157c:	bf00      	nop
 80a157e:	bf00      	nop
 80a1580:	bf00      	nop
 80a1582:	bf00      	nop
 80a1584:	bf00      	nop
 80a1586:	bf00      	nop
 80a1588:	bf00      	nop
 80a158a:	bf00      	nop
 80a158c:	bf00      	nop
 80a158e:	bf00      	nop
 80a1590:	bf00      	nop
 80a1592:	bf00      	nop
 80a1594:	bf00      	nop
 80a1596:	bf00      	nop
 80a1598:	bf00      	nop
 80a159a:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a159c:	79e3      	ldrb	r3, [r4, #7]
 80a159e:	6810      	ldr	r0, [r2, #0]
 80a15a0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a15a4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a15a8:	88bf      	ldrh	r7, [r7, #4]
 80a15aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a15ae:	831f      	strh	r7, [r3, #24]
          j++;
 80a15b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a15b4:	3301      	adds	r3, #1
 80a15b6:	b2db      	uxtb	r3, r3
 80a15b8:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a15bc:	9b04      	ldr	r3, [sp, #16]
 80a15be:	085b      	lsrs	r3, r3, #1
 80a15c0:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a15c2:	4600      	mov	r0, r0
 80a15c4:	bf00      	nop
 80a15c6:	bf00      	nop
 80a15c8:	bf00      	nop
 80a15ca:	bf00      	nop
 80a15cc:	bf00      	nop
 80a15ce:	bf00      	nop
 80a15d0:	bf00      	nop
 80a15d2:	bf00      	nop
 80a15d4:	bf00      	nop
 80a15d6:	bf00      	nop
 80a15d8:	bf00      	nop
 80a15da:	bf00      	nop
 80a15dc:	bf00      	nop
 80a15de:	bf00      	nop
 80a15e0:	bf00      	nop
 80a15e2:	bf00      	nop
 80a15e4:	bf00      	nop
 80a15e6:	bf00      	nop
 80a15e8:	bf00      	nop
 80a15ea:	bf00      	nop
 80a15ec:	bf00      	nop
 80a15ee:	bf00      	nop
 80a15f0:	bf00      	nop
 80a15f2:	bf00      	nop
 80a15f4:	bf00      	nop
 80a15f6:	bf00      	nop
 80a15f8:	bf00      	nop
 80a15fa:	bf00      	nop
 80a15fc:	bf00      	nop
 80a15fe:	bf00      	nop
 80a1600:	bf00      	nop
 80a1602:	bf00      	nop
 80a1604:	bf00      	nop
 80a1606:	bf00      	nop
 80a1608:	bf00      	nop
 80a160a:	bf00      	nop
 80a160c:	bf00      	nop
 80a160e:	bf00      	nop
 80a1610:	bf00      	nop
 80a1612:	bf00      	nop
 80a1614:	bf00      	nop
 80a1616:	bf00      	nop
 80a1618:	bf00      	nop
 80a161a:	bf00      	nop
 80a161c:	bf00      	nop
 80a161e:	bf00      	nop
 80a1620:	bf00      	nop
 80a1622:	bf00      	nop
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
 80a162c:	bf00      	nop
 80a162e:	bf00      	nop
 80a1630:	bf00      	nop
 80a1632:	bf00      	nop
 80a1634:	bf00      	nop
 80a1636:	bf00      	nop
 80a1638:	bf00      	nop
 80a163a:	bf00      	nop
 80a163c:	bf00      	nop
 80a163e:	bf00      	nop
 80a1640:	bf00      	nop
 80a1642:	bf00      	nop
 80a1644:	bf00      	nop
 80a1646:	bf00      	nop
 80a1648:	bf00      	nop
 80a164a:	bf00      	nop
          if(j==24) break;
 80a164c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1650:	2b18      	cmp	r3, #24
 80a1652:	d184      	bne.n	80a155e <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1654:	468e      	mov	lr, r1
 80a1656:	e6d5      	b.n	80a1404 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a1658:	4a17      	ldr	r2, [pc, #92]	; (80a16b8 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a165a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a165e:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1660:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1664:	b29b      	uxth	r3, r3
 80a1666:	2b00      	cmp	r3, #0
 80a1668:	f43f ad00 	beq.w	80a106c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a166c:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a166e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1672:	f10e 0103 	add.w	r1, lr, #3
 80a1676:	3b03      	subs	r3, #3
 80a1678:	b29b      	uxth	r3, r3
 80a167a:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a167e:	f89e 3000 	ldrb.w	r3, [lr]
 80a1682:	b2db      	uxtb	r3, r3
 80a1684:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a1688:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a168c:	b2db      	uxtb	r3, r3
 80a168e:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a1692:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1696:	b2db      	uxtb	r3, r3
 80a1698:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a169c:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a16a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a16a4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a16a8:	021b      	lsls	r3, r3, #8
 80a16aa:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a16ae:	4303      	orrs	r3, r0
 80a16b0:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a16b2:	f88d 6005 	strb.w	r6, [sp, #5]
 80a16b6:	e0e0      	b.n	80a187a <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a16b8:	200001e8 	.word	0x200001e8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a16bc:	4600      	mov	r0, r0
 80a16be:	bf00      	nop
 80a16c0:	bf00      	nop
 80a16c2:	bf00      	nop
 80a16c4:	bf00      	nop
 80a16c6:	bf00      	nop
 80a16c8:	bf00      	nop
 80a16ca:	bf00      	nop
 80a16cc:	bf00      	nop
 80a16ce:	bf00      	nop
 80a16d0:	bf00      	nop
 80a16d2:	bf00      	nop
 80a16d4:	bf00      	nop
 80a16d6:	bf00      	nop
 80a16d8:	bf00      	nop
 80a16da:	bf00      	nop
 80a16dc:	bf00      	nop
 80a16de:	bf00      	nop
 80a16e0:	bf00      	nop
 80a16e2:	bf00      	nop
 80a16e4:	bf00      	nop
 80a16e6:	bf00      	nop
 80a16e8:	bf00      	nop
 80a16ea:	bf00      	nop
 80a16ec:	bf00      	nop
 80a16ee:	bf00      	nop
 80a16f0:	bf00      	nop
 80a16f2:	bf00      	nop
 80a16f4:	bf00      	nop
 80a16f6:	bf00      	nop
 80a16f8:	bf00      	nop
 80a16fa:	bf00      	nop
 80a16fc:	bf00      	nop
 80a16fe:	bf00      	nop
 80a1700:	bf00      	nop
 80a1702:	bf00      	nop
 80a1704:	bf00      	nop
 80a1706:	bf00      	nop
 80a1708:	bf00      	nop
 80a170a:	bf00      	nop
 80a170c:	bf00      	nop
 80a170e:	bf00      	nop
 80a1710:	bf00      	nop
 80a1712:	bf00      	nop
 80a1714:	bf00      	nop
 80a1716:	bf00      	nop
 80a1718:	bf00      	nop
 80a171a:	bf00      	nop
 80a171c:	bf00      	nop
 80a171e:	bf00      	nop
 80a1720:	bf00      	nop
 80a1722:	bf00      	nop
 80a1724:	bf00      	nop
 80a1726:	bf00      	nop
 80a1728:	bf00      	nop
 80a172a:	bf00      	nop
 80a172c:	bf00      	nop
 80a172e:	bf00      	nop
 80a1730:	bf00      	nop
 80a1732:	bf00      	nop
 80a1734:	bf00      	nop
 80a1736:	bf00      	nop
 80a1738:	bf00      	nop
 80a173a:	bf00      	nop
 80a173c:	bf00      	nop
 80a173e:	bf00      	nop
 80a1740:	bf00      	nop
 80a1742:	bf00      	nop
 80a1744:	bf00      	nop
 80a1746:	bf00      	nop
 80a1748:	bf00      	nop
 80a174a:	bf00      	nop
 80a174c:	bf00      	nop
 80a174e:	bf00      	nop
 80a1750:	bf00      	nop
 80a1752:	bf00      	nop
 80a1754:	bf00      	nop
 80a1756:	bf00      	nop
 80a1758:	bf00      	nop
 80a175a:	bf00      	nop
 80a175c:	bf00      	nop
 80a175e:	bf00      	nop
 80a1760:	bf00      	nop
 80a1762:	bf00      	nop
 80a1764:	bf00      	nop
 80a1766:	bf00      	nop
 80a1768:	bf00      	nop
 80a176a:	bf00      	nop
 80a176c:	bf00      	nop
 80a176e:	bf00      	nop
 80a1770:	bf00      	nop
 80a1772:	bf00      	nop
 80a1774:	bf00      	nop
 80a1776:	bf00      	nop
 80a1778:	bf00      	nop
 80a177a:	bf00      	nop
 80a177c:	bf00      	nop
 80a177e:	bf00      	nop
 80a1780:	bf00      	nop
 80a1782:	bf00      	nop
 80a1784:	bf00      	nop
 80a1786:	bf00      	nop
 80a1788:	bf00      	nop
 80a178a:	bf00      	nop
 80a178c:	bf00      	nop
 80a178e:	bf00      	nop
 80a1790:	bf00      	nop
 80a1792:	bf00      	nop
 80a1794:	bf00      	nop
 80a1796:	bf00      	nop
 80a1798:	bf00      	nop
 80a179a:	bf00      	nop
 80a179c:	bf00      	nop
 80a179e:	bf00      	nop
 80a17a0:	bf00      	nop
 80a17a2:	bf00      	nop
 80a17a4:	bf00      	nop
 80a17a6:	bf00      	nop
 80a17a8:	bf00      	nop
 80a17aa:	bf00      	nop
 80a17ac:	bf00      	nop
 80a17ae:	bf00      	nop
 80a17b0:	bf00      	nop
 80a17b2:	bf00      	nop
 80a17b4:	bf00      	nop
 80a17b6:	bf00      	nop
 80a17b8:	bf00      	nop
 80a17ba:	bf00      	nop
 80a17bc:	bf00      	nop
 80a17be:	bf00      	nop
 80a17c0:	bf00      	nop
 80a17c2:	bf00      	nop
 80a17c4:	bf00      	nop
 80a17c6:	bf00      	nop
 80a17c8:	bf00      	nop
 80a17ca:	bf00      	nop
 80a17cc:	bf00      	nop
 80a17ce:	bf00      	nop
 80a17d0:	bf00      	nop
 80a17d2:	bf00      	nop
 80a17d4:	bf00      	nop
 80a17d6:	bf00      	nop
 80a17d8:	bf00      	nop
 80a17da:	bf00      	nop
 80a17dc:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a17de:	79e3      	ldrb	r3, [r4, #7]
 80a17e0:	6810      	ldr	r0, [r2, #0]
 80a17e2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a17e6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a17ea:	88bf      	ldrh	r7, [r7, #4]
 80a17ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a17f0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a17f2:	4600      	mov	r0, r0
 80a17f4:	bf00      	nop
 80a17f6:	bf00      	nop
 80a17f8:	bf00      	nop
 80a17fa:	bf00      	nop
 80a17fc:	bf00      	nop
 80a17fe:	bf00      	nop
 80a1800:	bf00      	nop
 80a1802:	bf00      	nop
 80a1804:	bf00      	nop
 80a1806:	bf00      	nop
 80a1808:	bf00      	nop
 80a180a:	bf00      	nop
 80a180c:	bf00      	nop
 80a180e:	bf00      	nop
 80a1810:	bf00      	nop
 80a1812:	bf00      	nop
 80a1814:	bf00      	nop
 80a1816:	bf00      	nop
 80a1818:	bf00      	nop
 80a181a:	bf00      	nop
 80a181c:	bf00      	nop
 80a181e:	bf00      	nop
 80a1820:	bf00      	nop
 80a1822:	bf00      	nop
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
 80a1838:	bf00      	nop
 80a183a:	bf00      	nop
 80a183c:	bf00      	nop
 80a183e:	bf00      	nop
 80a1840:	bf00      	nop
 80a1842:	bf00      	nop
 80a1844:	bf00      	nop
 80a1846:	bf00      	nop
 80a1848:	bf00      	nop
 80a184a:	bf00      	nop
 80a184c:	bf00      	nop
 80a184e:	bf00      	nop
 80a1850:	bf00      	nop
 80a1852:	bf00      	nop
 80a1854:	bf00      	nop
 80a1856:	bf00      	nop
 80a1858:	bf00      	nop
 80a185a:	bf00      	nop
 80a185c:	bf00      	nop
 80a185e:	bf00      	nop
 80a1860:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1862:	9b04      	ldr	r3, [sp, #16]
 80a1864:	085b      	lsrs	r3, r3, #1
 80a1866:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1868:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a186c:	3301      	adds	r3, #1
 80a186e:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1870:	2b17      	cmp	r3, #23
 80a1872:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1876:	f200 80e3 	bhi.w	80a1a40 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a187a:	79e3      	ldrb	r3, [r4, #7]
 80a187c:	6810      	ldr	r0, [r2, #0]
 80a187e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1882:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1886:	88bf      	ldrh	r7, [r7, #4]
 80a1888:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a188c:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a188e:	9803      	ldr	r0, [sp, #12]
 80a1890:	9b04      	ldr	r3, [sp, #16]
 80a1892:	4218      	tst	r0, r3
 80a1894:	f47f af12 	bne.w	80a16bc <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1898:	4600      	mov	r0, r0
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
 80a18b6:	bf00      	nop
 80a18b8:	bf00      	nop
 80a18ba:	bf00      	nop
 80a18bc:	bf00      	nop
 80a18be:	bf00      	nop
 80a18c0:	bf00      	nop
 80a18c2:	bf00      	nop
 80a18c4:	bf00      	nop
 80a18c6:	bf00      	nop
 80a18c8:	bf00      	nop
 80a18ca:	bf00      	nop
 80a18cc:	bf00      	nop
 80a18ce:	bf00      	nop
 80a18d0:	bf00      	nop
 80a18d2:	bf00      	nop
 80a18d4:	bf00      	nop
 80a18d6:	bf00      	nop
 80a18d8:	bf00      	nop
 80a18da:	bf00      	nop
 80a18dc:	bf00      	nop
 80a18de:	bf00      	nop
 80a18e0:	bf00      	nop
 80a18e2:	bf00      	nop
 80a18e4:	bf00      	nop
 80a18e6:	bf00      	nop
 80a18e8:	bf00      	nop
 80a18ea:	bf00      	nop
 80a18ec:	bf00      	nop
 80a18ee:	bf00      	nop
 80a18f0:	bf00      	nop
 80a18f2:	bf00      	nop
 80a18f4:	bf00      	nop
 80a18f6:	bf00      	nop
 80a18f8:	bf00      	nop
 80a18fa:	bf00      	nop
 80a18fc:	bf00      	nop
 80a18fe:	bf00      	nop
 80a1900:	bf00      	nop
 80a1902:	bf00      	nop
 80a1904:	bf00      	nop
 80a1906:	bf00      	nop
 80a1908:	bf00      	nop
 80a190a:	bf00      	nop
 80a190c:	bf00      	nop
 80a190e:	bf00      	nop
 80a1910:	bf00      	nop
 80a1912:	bf00      	nop
 80a1914:	bf00      	nop
 80a1916:	bf00      	nop
 80a1918:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a191a:	79e3      	ldrb	r3, [r4, #7]
 80a191c:	6810      	ldr	r0, [r2, #0]
 80a191e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1922:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1926:	88bf      	ldrh	r7, [r7, #4]
 80a1928:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a192c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a192e:	4600      	mov	r0, r0
 80a1930:	bf00      	nop
 80a1932:	bf00      	nop
 80a1934:	bf00      	nop
 80a1936:	bf00      	nop
 80a1938:	bf00      	nop
 80a193a:	bf00      	nop
 80a193c:	bf00      	nop
 80a193e:	bf00      	nop
 80a1940:	bf00      	nop
 80a1942:	bf00      	nop
 80a1944:	bf00      	nop
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
 80a194a:	bf00      	nop
 80a194c:	bf00      	nop
 80a194e:	bf00      	nop
 80a1950:	bf00      	nop
 80a1952:	bf00      	nop
 80a1954:	bf00      	nop
 80a1956:	bf00      	nop
 80a1958:	bf00      	nop
 80a195a:	bf00      	nop
 80a195c:	bf00      	nop
 80a195e:	bf00      	nop
 80a1960:	bf00      	nop
 80a1962:	bf00      	nop
 80a1964:	bf00      	nop
 80a1966:	bf00      	nop
 80a1968:	bf00      	nop
 80a196a:	bf00      	nop
 80a196c:	bf00      	nop
 80a196e:	bf00      	nop
 80a1970:	bf00      	nop
 80a1972:	bf00      	nop
 80a1974:	bf00      	nop
 80a1976:	bf00      	nop
 80a1978:	bf00      	nop
 80a197a:	bf00      	nop
 80a197c:	bf00      	nop
 80a197e:	bf00      	nop
 80a1980:	bf00      	nop
 80a1982:	bf00      	nop
 80a1984:	bf00      	nop
 80a1986:	bf00      	nop
 80a1988:	bf00      	nop
 80a198a:	bf00      	nop
 80a198c:	bf00      	nop
 80a198e:	bf00      	nop
 80a1990:	bf00      	nop
 80a1992:	bf00      	nop
 80a1994:	bf00      	nop
 80a1996:	bf00      	nop
 80a1998:	bf00      	nop
 80a199a:	bf00      	nop
 80a199c:	bf00      	nop
 80a199e:	bf00      	nop
 80a19a0:	bf00      	nop
 80a19a2:	bf00      	nop
 80a19a4:	bf00      	nop
 80a19a6:	bf00      	nop
 80a19a8:	bf00      	nop
 80a19aa:	bf00      	nop
 80a19ac:	bf00      	nop
 80a19ae:	bf00      	nop
 80a19b0:	bf00      	nop
 80a19b2:	bf00      	nop
 80a19b4:	bf00      	nop
 80a19b6:	bf00      	nop
 80a19b8:	bf00      	nop
 80a19ba:	bf00      	nop
 80a19bc:	bf00      	nop
 80a19be:	bf00      	nop
 80a19c0:	bf00      	nop
 80a19c2:	bf00      	nop
 80a19c4:	bf00      	nop
 80a19c6:	bf00      	nop
 80a19c8:	bf00      	nop
 80a19ca:	bf00      	nop
 80a19cc:	bf00      	nop
 80a19ce:	bf00      	nop
 80a19d0:	bf00      	nop
 80a19d2:	bf00      	nop
 80a19d4:	bf00      	nop
 80a19d6:	bf00      	nop
 80a19d8:	bf00      	nop
 80a19da:	bf00      	nop
 80a19dc:	bf00      	nop
 80a19de:	bf00      	nop
 80a19e0:	bf00      	nop
 80a19e2:	bf00      	nop
 80a19e4:	bf00      	nop
 80a19e6:	bf00      	nop
 80a19e8:	bf00      	nop
 80a19ea:	bf00      	nop
 80a19ec:	bf00      	nop
 80a19ee:	bf00      	nop
 80a19f0:	bf00      	nop
 80a19f2:	bf00      	nop
 80a19f4:	bf00      	nop
 80a19f6:	bf00      	nop
 80a19f8:	bf00      	nop
 80a19fa:	bf00      	nop
 80a19fc:	bf00      	nop
 80a19fe:	bf00      	nop
 80a1a00:	bf00      	nop
 80a1a02:	bf00      	nop
 80a1a04:	bf00      	nop
 80a1a06:	bf00      	nop
 80a1a08:	bf00      	nop
 80a1a0a:	bf00      	nop
 80a1a0c:	bf00      	nop
 80a1a0e:	bf00      	nop
 80a1a10:	bf00      	nop
 80a1a12:	bf00      	nop
 80a1a14:	bf00      	nop
 80a1a16:	bf00      	nop
 80a1a18:	bf00      	nop
 80a1a1a:	bf00      	nop
 80a1a1c:	bf00      	nop
 80a1a1e:	bf00      	nop
 80a1a20:	bf00      	nop
 80a1a22:	bf00      	nop
 80a1a24:	bf00      	nop
 80a1a26:	bf00      	nop
 80a1a28:	bf00      	nop
 80a1a2a:	bf00      	nop
 80a1a2c:	bf00      	nop
 80a1a2e:	bf00      	nop
 80a1a30:	bf00      	nop
 80a1a32:	bf00      	nop
 80a1a34:	bf00      	nop
 80a1a36:	bf00      	nop
 80a1a38:	bf00      	nop
 80a1a3a:	bf00      	nop
 80a1a3c:	bf00      	nop
 80a1a3e:	e710      	b.n	80a1862 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1a40:	468e      	mov	lr, r1
 80a1a42:	e60d      	b.n	80a1660 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a1a44 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a1a44:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a1a46:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1a48:	428b      	cmp	r3, r1
 80a1a4a:	d945      	bls.n	80a1ad8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a1a4c:	7a05      	ldrb	r5, [r0, #8]
 80a1a4e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a1a52:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a1a56:	b2d6      	uxtb	r6, r2
 80a1a58:	b145      	cbz	r5, 80a1a6c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a1a5a:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a1a5c:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a1a5e:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a1a60:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1a64:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a1a68:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1a6c:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a1a70:	68c7      	ldr	r7, [r0, #12]
 80a1a72:	f1bc 0f06 	cmp.w	ip, #6
 80a1a76:	bf0c      	ite	eq
 80a1a78:	2504      	moveq	r5, #4
 80a1a7a:	2503      	movne	r5, #3
 80a1a7c:	4369      	muls	r1, r5
 80a1a7e:	f1bc 0f08 	cmp.w	ip, #8
 80a1a82:	eb07 0501 	add.w	r5, r7, r1
 80a1a86:	d824      	bhi.n	80a1ad2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a1a88:	f04f 0e01 	mov.w	lr, #1
 80a1a8c:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a1a90:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a1a94:	d10c      	bne.n	80a1ab0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a1a96:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a1a9a:	d10d      	bne.n	80a1ab8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a1a9c:	f01e 0f10 	tst.w	lr, #16
 80a1aa0:	d017      	beq.n	80a1ad2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a1aa2:	2bff      	cmp	r3, #255	; 0xff
 80a1aa4:	bf08      	it	eq
 80a1aa6:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a1aa8:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a1aaa:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a1aac:	70ac      	strb	r4, [r5, #2]
        } break;
 80a1aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1ab0:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a1ab2:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a1ab4:	70ae      	strb	r6, [r5, #2]
        } break;
 80a1ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a1ab8:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1aba:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a1abc:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1abe:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1ac0:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1ac2:	b90b      	cbnz	r3, 80a1ac8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1ac4:	b2d2      	uxtb	r2, r2
 80a1ac6:	e002      	b.n	80a1ace <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1ac8:	435a      	muls	r2, r3
 80a1aca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a1ace:	70ea      	strb	r2, [r5, #3]
        } break;
 80a1ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a1ad2:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1ad4:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a1ad6:	70ae      	strb	r6, [r5, #2]
 80a1ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1ada <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a1ada:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a1ade:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a1ae2:	4770      	bx	lr

080a1ae4 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a1ae4:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a1ae6:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a1ae8:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a1aea:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a1aec:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a1aee:	d01e      	beq.n	80a1b2e <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a1af0:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a1af2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a1af6:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a1af8:	d00c      	beq.n	80a1b14 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a1afa:	29ff      	cmp	r1, #255	; 0xff
 80a1afc:	bf0f      	iteee	eq
 80a1afe:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a1b02:	0211      	lslne	r1, r2, #8
 80a1b04:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80a1b08:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a1b0c:	bf0c      	ite	eq
 80a1b0e:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a1b12:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a1b14:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a1b16:	1b29      	subs	r1, r5, r4
 80a1b18:	8886      	ldrh	r6, [r0, #4]
 80a1b1a:	b289      	uxth	r1, r1
 80a1b1c:	428e      	cmp	r6, r1
 80a1b1e:	d905      	bls.n	80a1b2c <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a1b20:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a1b22:	4359      	muls	r1, r3
 80a1b24:	1209      	asrs	r1, r1, #8
 80a1b26:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a1b2a:	e7f4      	b.n	80a1b16 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a1b2c:	7202      	strb	r2, [r0, #8]
 80a1b2e:	bd70      	pop	{r4, r5, r6, pc}

080a1b30 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a1b30:	b508      	push	{r3, lr}
 80a1b32:	f000 f827 	bl	80a1b84 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a1b36:	f000 f825 	bl	80a1b84 <HAL_Pin_Map>
 80a1b3a:	4b01      	ldr	r3, [pc, #4]	; (80a1b40 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a1b3c:	6018      	str	r0, [r3, #0]
 80a1b3e:	bd08      	pop	{r3, pc}
 80a1b40:	200001e8 	.word	0x200001e8

080a1b44 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1b44:	b508      	push	{r3, lr}
 80a1b46:	4b02      	ldr	r3, [pc, #8]	; (80a1b50 <os_mutex_create+0xc>)
 80a1b48:	681b      	ldr	r3, [r3, #0]
 80a1b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1b4c:	9301      	str	r3, [sp, #4]
 80a1b4e:	bd08      	pop	{r3, pc}
 80a1b50:	080601d0 	.word	0x080601d0

080a1b54 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1b54:	b508      	push	{r3, lr}
 80a1b56:	4b02      	ldr	r3, [pc, #8]	; (80a1b60 <HAL_RNG_GetRandomNumber+0xc>)
 80a1b58:	681b      	ldr	r3, [r3, #0]
 80a1b5a:	685b      	ldr	r3, [r3, #4]
 80a1b5c:	9301      	str	r3, [sp, #4]
 80a1b5e:	bd08      	pop	{r3, pc}
 80a1b60:	0806019c 	.word	0x0806019c

080a1b64 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1b64:	b508      	push	{r3, lr}
 80a1b66:	4b02      	ldr	r3, [pc, #8]	; (80a1b70 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1b68:	681b      	ldr	r3, [r3, #0]
 80a1b6a:	691b      	ldr	r3, [r3, #16]
 80a1b6c:	9301      	str	r3, [sp, #4]
 80a1b6e:	bd08      	pop	{r3, pc}
 80a1b70:	0806019c 	.word	0x0806019c

080a1b74 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1b74:	b508      	push	{r3, lr}
 80a1b76:	4b02      	ldr	r3, [pc, #8]	; (80a1b80 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1b78:	681b      	ldr	r3, [r3, #0]
 80a1b7a:	695b      	ldr	r3, [r3, #20]
 80a1b7c:	9301      	str	r3, [sp, #4]
 80a1b7e:	bd08      	pop	{r3, pc}
 80a1b80:	0806019c 	.word	0x0806019c

080a1b84 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1b84:	b508      	push	{r3, lr}
 80a1b86:	4b02      	ldr	r3, [pc, #8]	; (80a1b90 <HAL_Pin_Map+0xc>)
 80a1b88:	681b      	ldr	r3, [r3, #0]
 80a1b8a:	681b      	ldr	r3, [r3, #0]
 80a1b8c:	9301      	str	r3, [sp, #4]
 80a1b8e:	bd08      	pop	{r3, pc}
 80a1b90:	080601b0 	.word	0x080601b0

080a1b94 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1b94:	b508      	push	{r3, lr}
 80a1b96:	4b02      	ldr	r3, [pc, #8]	; (80a1ba0 <HAL_Validate_Pin_Function+0xc>)
 80a1b98:	681b      	ldr	r3, [r3, #0]
 80a1b9a:	685b      	ldr	r3, [r3, #4]
 80a1b9c:	9301      	str	r3, [sp, #4]
 80a1b9e:	bd08      	pop	{r3, pc}
 80a1ba0:	080601b0 	.word	0x080601b0

080a1ba4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1ba4:	b508      	push	{r3, lr}
 80a1ba6:	4b02      	ldr	r3, [pc, #8]	; (80a1bb0 <HAL_Pin_Mode+0xc>)
 80a1ba8:	681b      	ldr	r3, [r3, #0]
 80a1baa:	689b      	ldr	r3, [r3, #8]
 80a1bac:	9301      	str	r3, [sp, #4]
 80a1bae:	bd08      	pop	{r3, pc}
 80a1bb0:	080601b0 	.word	0x080601b0

080a1bb4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1bb4:	b508      	push	{r3, lr}
 80a1bb6:	4b02      	ldr	r3, [pc, #8]	; (80a1bc0 <HAL_Get_Pin_Mode+0xc>)
 80a1bb8:	681b      	ldr	r3, [r3, #0]
 80a1bba:	68db      	ldr	r3, [r3, #12]
 80a1bbc:	9301      	str	r3, [sp, #4]
 80a1bbe:	bd08      	pop	{r3, pc}
 80a1bc0:	080601b0 	.word	0x080601b0

080a1bc4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1bc4:	b508      	push	{r3, lr}
 80a1bc6:	4b02      	ldr	r3, [pc, #8]	; (80a1bd0 <HAL_GPIO_Write+0xc>)
 80a1bc8:	681b      	ldr	r3, [r3, #0]
 80a1bca:	691b      	ldr	r3, [r3, #16]
 80a1bcc:	9301      	str	r3, [sp, #4]
 80a1bce:	bd08      	pop	{r3, pc}
 80a1bd0:	080601b0 	.word	0x080601b0

080a1bd4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a1bd4:	b508      	push	{r3, lr}
 80a1bd6:	4b02      	ldr	r3, [pc, #8]	; (80a1be0 <HAL_I2C_Begin+0xc>)
 80a1bd8:	681b      	ldr	r3, [r3, #0]
 80a1bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1bdc:	9301      	str	r3, [sp, #4]
 80a1bde:	bd08      	pop	{r3, pc}
 80a1be0:	080601ac 	.word	0x080601ac

080a1be4 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a1be4:	b508      	push	{r3, lr}
 80a1be6:	4b02      	ldr	r3, [pc, #8]	; (80a1bf0 <HAL_I2C_Request_Data+0xc>)
 80a1be8:	681b      	ldr	r3, [r3, #0]
 80a1bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1bec:	9301      	str	r3, [sp, #4]
 80a1bee:	bd08      	pop	{r3, pc}
 80a1bf0:	080601ac 	.word	0x080601ac

080a1bf4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a1bf4:	b508      	push	{r3, lr}
 80a1bf6:	4b02      	ldr	r3, [pc, #8]	; (80a1c00 <HAL_I2C_Begin_Transmission+0xc>)
 80a1bf8:	681b      	ldr	r3, [r3, #0]
 80a1bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1bfc:	9301      	str	r3, [sp, #4]
 80a1bfe:	bd08      	pop	{r3, pc}
 80a1c00:	080601ac 	.word	0x080601ac

080a1c04 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a1c04:	b508      	push	{r3, lr}
 80a1c06:	4b02      	ldr	r3, [pc, #8]	; (80a1c10 <HAL_I2C_End_Transmission+0xc>)
 80a1c08:	681b      	ldr	r3, [r3, #0]
 80a1c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1c0c:	9301      	str	r3, [sp, #4]
 80a1c0e:	bd08      	pop	{r3, pc}
 80a1c10:	080601ac 	.word	0x080601ac

080a1c14 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1c14:	b508      	push	{r3, lr}
 80a1c16:	4b02      	ldr	r3, [pc, #8]	; (80a1c20 <HAL_I2C_Write_Data+0xc>)
 80a1c18:	681b      	ldr	r3, [r3, #0]
 80a1c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1c1c:	9301      	str	r3, [sp, #4]
 80a1c1e:	bd08      	pop	{r3, pc}
 80a1c20:	080601ac 	.word	0x080601ac

080a1c24 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1c24:	b508      	push	{r3, lr}
 80a1c26:	4b02      	ldr	r3, [pc, #8]	; (80a1c30 <HAL_I2C_Available_Data+0xc>)
 80a1c28:	681b      	ldr	r3, [r3, #0]
 80a1c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1c2c:	9301      	str	r3, [sp, #4]
 80a1c2e:	bd08      	pop	{r3, pc}
 80a1c30:	080601ac 	.word	0x080601ac

080a1c34 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1c34:	b508      	push	{r3, lr}
 80a1c36:	4b02      	ldr	r3, [pc, #8]	; (80a1c40 <HAL_I2C_Read_Data+0xc>)
 80a1c38:	681b      	ldr	r3, [r3, #0]
 80a1c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1c3c:	9301      	str	r3, [sp, #4]
 80a1c3e:	bd08      	pop	{r3, pc}
 80a1c40:	080601ac 	.word	0x080601ac

080a1c44 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1c44:	b508      	push	{r3, lr}
 80a1c46:	4b02      	ldr	r3, [pc, #8]	; (80a1c50 <HAL_I2C_Peek_Data+0xc>)
 80a1c48:	681b      	ldr	r3, [r3, #0]
 80a1c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1c4c:	9301      	str	r3, [sp, #4]
 80a1c4e:	bd08      	pop	{r3, pc}
 80a1c50:	080601ac 	.word	0x080601ac

080a1c54 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1c54:	b508      	push	{r3, lr}
 80a1c56:	4b02      	ldr	r3, [pc, #8]	; (80a1c60 <HAL_I2C_Flush_Data+0xc>)
 80a1c58:	681b      	ldr	r3, [r3, #0]
 80a1c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1c5c:	9301      	str	r3, [sp, #4]
 80a1c5e:	bd08      	pop	{r3, pc}
 80a1c60:	080601ac 	.word	0x080601ac

080a1c64 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1c64:	b508      	push	{r3, lr}
 80a1c66:	4b02      	ldr	r3, [pc, #8]	; (80a1c70 <HAL_I2C_Is_Enabled+0xc>)
 80a1c68:	681b      	ldr	r3, [r3, #0]
 80a1c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1c6c:	9301      	str	r3, [sp, #4]
 80a1c6e:	bd08      	pop	{r3, pc}
 80a1c70:	080601ac 	.word	0x080601ac

080a1c74 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1c74:	b508      	push	{r3, lr}
 80a1c76:	4b03      	ldr	r3, [pc, #12]	; (80a1c84 <HAL_I2C_Init+0x10>)
 80a1c78:	681b      	ldr	r3, [r3, #0]
 80a1c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1c7e:	9301      	str	r3, [sp, #4]
 80a1c80:	bd08      	pop	{r3, pc}
 80a1c82:	0000      	.short	0x0000
 80a1c84:	080601ac 	.word	0x080601ac

080a1c88 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
 80a1c88:	b508      	push	{r3, lr}
 80a1c8a:	4b02      	ldr	r3, [pc, #8]	; (80a1c94 <HAL_Tone_Start+0xc>)
 80a1c8c:	681b      	ldr	r3, [r3, #0]
 80a1c8e:	681b      	ldr	r3, [r3, #0]
 80a1c90:	9301      	str	r3, [sp, #4]
 80a1c92:	bd08      	pop	{r3, pc}
 80a1c94:	080601a8 	.word	0x080601a8

080a1c98 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1c98:	b508      	push	{r3, lr}
 80a1c9a:	4b02      	ldr	r3, [pc, #8]	; (80a1ca4 <HAL_SPI_Init+0xc>)
 80a1c9c:	681b      	ldr	r3, [r3, #0]
 80a1c9e:	69db      	ldr	r3, [r3, #28]
 80a1ca0:	9301      	str	r3, [sp, #4]
 80a1ca2:	bd08      	pop	{r3, pc}
 80a1ca4:	080601b4 	.word	0x080601b4

080a1ca8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1ca8:	b508      	push	{r3, lr}
 80a1caa:	4b02      	ldr	r3, [pc, #8]	; (80a1cb4 <HAL_SPI_Is_Enabled+0xc>)
 80a1cac:	681b      	ldr	r3, [r3, #0]
 80a1cae:	6a1b      	ldr	r3, [r3, #32]
 80a1cb0:	9301      	str	r3, [sp, #4]
 80a1cb2:	bd08      	pop	{r3, pc}
 80a1cb4:	080601b4 	.word	0x080601b4

080a1cb8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1cb8:	b508      	push	{r3, lr}
 80a1cba:	4b02      	ldr	r3, [pc, #8]	; (80a1cc4 <HAL_USART_Init+0xc>)
 80a1cbc:	681b      	ldr	r3, [r3, #0]
 80a1cbe:	699b      	ldr	r3, [r3, #24]
 80a1cc0:	9301      	str	r3, [sp, #4]
 80a1cc2:	bd08      	pop	{r3, pc}
 80a1cc4:	080601c4 	.word	0x080601c4

080a1cc8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1cc8:	b508      	push	{r3, lr}
 80a1cca:	4b02      	ldr	r3, [pc, #8]	; (80a1cd4 <HAL_USART_Write_Data+0xc>)
 80a1ccc:	681b      	ldr	r3, [r3, #0]
 80a1cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1cd0:	9301      	str	r3, [sp, #4]
 80a1cd2:	bd08      	pop	{r3, pc}
 80a1cd4:	080601c4 	.word	0x080601c4

080a1cd8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1cd8:	b508      	push	{r3, lr}
 80a1cda:	4b02      	ldr	r3, [pc, #8]	; (80a1ce4 <HAL_USART_Available_Data+0xc>)
 80a1cdc:	681b      	ldr	r3, [r3, #0]
 80a1cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1ce0:	9301      	str	r3, [sp, #4]
 80a1ce2:	bd08      	pop	{r3, pc}
 80a1ce4:	080601c4 	.word	0x080601c4

080a1ce8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1ce8:	b508      	push	{r3, lr}
 80a1cea:	4b02      	ldr	r3, [pc, #8]	; (80a1cf4 <HAL_USART_Read_Data+0xc>)
 80a1cec:	681b      	ldr	r3, [r3, #0]
 80a1cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1cf0:	9301      	str	r3, [sp, #4]
 80a1cf2:	bd08      	pop	{r3, pc}
 80a1cf4:	080601c4 	.word	0x080601c4

080a1cf8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1cf8:	b508      	push	{r3, lr}
 80a1cfa:	4b02      	ldr	r3, [pc, #8]	; (80a1d04 <HAL_USART_Peek_Data+0xc>)
 80a1cfc:	681b      	ldr	r3, [r3, #0]
 80a1cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1d00:	9301      	str	r3, [sp, #4]
 80a1d02:	bd08      	pop	{r3, pc}
 80a1d04:	080601c4 	.word	0x080601c4

080a1d08 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1d08:	b508      	push	{r3, lr}
 80a1d0a:	4b02      	ldr	r3, [pc, #8]	; (80a1d14 <HAL_USART_Flush_Data+0xc>)
 80a1d0c:	681b      	ldr	r3, [r3, #0]
 80a1d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1d10:	9301      	str	r3, [sp, #4]
 80a1d12:	bd08      	pop	{r3, pc}
 80a1d14:	080601c4 	.word	0x080601c4

080a1d18 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1d18:	b508      	push	{r3, lr}
 80a1d1a:	4b02      	ldr	r3, [pc, #8]	; (80a1d24 <HAL_USART_Is_Enabled+0xc>)
 80a1d1c:	681b      	ldr	r3, [r3, #0]
 80a1d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1d20:	9301      	str	r3, [sp, #4]
 80a1d22:	bd08      	pop	{r3, pc}
 80a1d24:	080601c4 	.word	0x080601c4

080a1d28 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1d28:	b508      	push	{r3, lr}
 80a1d2a:	4b02      	ldr	r3, [pc, #8]	; (80a1d34 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1d2c:	681b      	ldr	r3, [r3, #0]
 80a1d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1d30:	9301      	str	r3, [sp, #4]
 80a1d32:	bd08      	pop	{r3, pc}
 80a1d34:	080601c4 	.word	0x080601c4

080a1d38 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1d38:	b508      	push	{r3, lr}
 80a1d3a:	4b02      	ldr	r3, [pc, #8]	; (80a1d44 <HAL_USB_USART_Init+0xc>)
 80a1d3c:	681b      	ldr	r3, [r3, #0]
 80a1d3e:	681b      	ldr	r3, [r3, #0]
 80a1d40:	9301      	str	r3, [sp, #4]
 80a1d42:	bd08      	pop	{r3, pc}
 80a1d44:	080601d8 	.word	0x080601d8

080a1d48 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1d48:	b508      	push	{r3, lr}
 80a1d4a:	4b02      	ldr	r3, [pc, #8]	; (80a1d54 <HAL_USB_USART_Available_Data+0xc>)
 80a1d4c:	681b      	ldr	r3, [r3, #0]
 80a1d4e:	691b      	ldr	r3, [r3, #16]
 80a1d50:	9301      	str	r3, [sp, #4]
 80a1d52:	bd08      	pop	{r3, pc}
 80a1d54:	080601d8 	.word	0x080601d8

080a1d58 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1d58:	b508      	push	{r3, lr}
 80a1d5a:	4b02      	ldr	r3, [pc, #8]	; (80a1d64 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1d5c:	681b      	ldr	r3, [r3, #0]
 80a1d5e:	695b      	ldr	r3, [r3, #20]
 80a1d60:	9301      	str	r3, [sp, #4]
 80a1d62:	bd08      	pop	{r3, pc}
 80a1d64:	080601d8 	.word	0x080601d8

080a1d68 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1d68:	b508      	push	{r3, lr}
 80a1d6a:	4b02      	ldr	r3, [pc, #8]	; (80a1d74 <HAL_USB_USART_Receive_Data+0xc>)
 80a1d6c:	681b      	ldr	r3, [r3, #0]
 80a1d6e:	699b      	ldr	r3, [r3, #24]
 80a1d70:	9301      	str	r3, [sp, #4]
 80a1d72:	bd08      	pop	{r3, pc}
 80a1d74:	080601d8 	.word	0x080601d8

080a1d78 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1d78:	b508      	push	{r3, lr}
 80a1d7a:	4b02      	ldr	r3, [pc, #8]	; (80a1d84 <HAL_USB_USART_Send_Data+0xc>)
 80a1d7c:	681b      	ldr	r3, [r3, #0]
 80a1d7e:	69db      	ldr	r3, [r3, #28]
 80a1d80:	9301      	str	r3, [sp, #4]
 80a1d82:	bd08      	pop	{r3, pc}
 80a1d84:	080601d8 	.word	0x080601d8

080a1d88 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1d88:	b508      	push	{r3, lr}
 80a1d8a:	4b02      	ldr	r3, [pc, #8]	; (80a1d94 <HAL_USB_USART_Flush_Data+0xc>)
 80a1d8c:	681b      	ldr	r3, [r3, #0]
 80a1d8e:	6a1b      	ldr	r3, [r3, #32]
 80a1d90:	9301      	str	r3, [sp, #4]
 80a1d92:	bd08      	pop	{r3, pc}
 80a1d94:	080601d8 	.word	0x080601d8

080a1d98 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1d98:	b508      	push	{r3, lr}
 80a1d9a:	4b02      	ldr	r3, [pc, #8]	; (80a1da4 <inet_gethostbyname+0xc>)
 80a1d9c:	681b      	ldr	r3, [r3, #0]
 80a1d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1da0:	9301      	str	r3, [sp, #4]
 80a1da2:	bd08      	pop	{r3, pc}
 80a1da4:	080601c0 	.word	0x080601c0

080a1da8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1da8:	b508      	push	{r3, lr}
 80a1daa:	4b02      	ldr	r3, [pc, #8]	; (80a1db4 <set_system_mode+0xc>)
 80a1dac:	681b      	ldr	r3, [r3, #0]
 80a1dae:	685b      	ldr	r3, [r3, #4]
 80a1db0:	9301      	str	r3, [sp, #4]
 80a1db2:	bd08      	pop	{r3, pc}
 80a1db4:	080601a4 	.word	0x080601a4

080a1db8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1db8:	b508      	push	{r3, lr}
 80a1dba:	4b02      	ldr	r3, [pc, #8]	; (80a1dc4 <system_delay_ms+0xc>)
 80a1dbc:	681b      	ldr	r3, [r3, #0]
 80a1dbe:	695b      	ldr	r3, [r3, #20]
 80a1dc0:	9301      	str	r3, [sp, #4]
 80a1dc2:	bd08      	pop	{r3, pc}
 80a1dc4:	080601a4 	.word	0x080601a4

080a1dc8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1dc8:	b508      	push	{r3, lr}
 80a1dca:	4b03      	ldr	r3, [pc, #12]	; (80a1dd8 <system_ctrl_set_app_request_handler+0x10>)
 80a1dcc:	681b      	ldr	r3, [r3, #0]
 80a1dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1dd2:	9301      	str	r3, [sp, #4]
 80a1dd4:	bd08      	pop	{r3, pc}
 80a1dd6:	0000      	.short	0x0000
 80a1dd8:	080601a4 	.word	0x080601a4

080a1ddc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1ddc:	b508      	push	{r3, lr}
 80a1dde:	4b03      	ldr	r3, [pc, #12]	; (80a1dec <system_ctrl_set_result+0x10>)
 80a1de0:	681b      	ldr	r3, [r3, #0]
 80a1de2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1de6:	9301      	str	r3, [sp, #4]
 80a1de8:	bd08      	pop	{r3, pc}
 80a1dea:	0000      	.short	0x0000
 80a1dec:	080601a4 	.word	0x080601a4

080a1df0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1df0:	b508      	push	{r3, lr}
 80a1df2:	4b02      	ldr	r3, [pc, #8]	; (80a1dfc <spark_process+0xc>)
 80a1df4:	681b      	ldr	r3, [r3, #0]
 80a1df6:	689b      	ldr	r3, [r3, #8]
 80a1df8:	9301      	str	r3, [sp, #4]
 80a1dfa:	bd08      	pop	{r3, pc}
 80a1dfc:	080601cc 	.word	0x080601cc

080a1e00 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1e00:	b508      	push	{r3, lr}
 80a1e02:	4b02      	ldr	r3, [pc, #8]	; (80a1e0c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1e04:	681b      	ldr	r3, [r3, #0]
 80a1e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1e08:	9301      	str	r3, [sp, #4]
 80a1e0a:	bd08      	pop	{r3, pc}
 80a1e0c:	080601cc 	.word	0x080601cc

080a1e10 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1e10:	b508      	push	{r3, lr}
 80a1e12:	4b02      	ldr	r3, [pc, #8]	; (80a1e1c <network_connect+0xc>)
 80a1e14:	681b      	ldr	r3, [r3, #0]
 80a1e16:	685b      	ldr	r3, [r3, #4]
 80a1e18:	9301      	str	r3, [sp, #4]
 80a1e1a:	bd08      	pop	{r3, pc}
 80a1e1c:	080601c8 	.word	0x080601c8

080a1e20 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1e20:	b508      	push	{r3, lr}
 80a1e22:	4b02      	ldr	r3, [pc, #8]	; (80a1e2c <network_connecting+0xc>)
 80a1e24:	681b      	ldr	r3, [r3, #0]
 80a1e26:	689b      	ldr	r3, [r3, #8]
 80a1e28:	9301      	str	r3, [sp, #4]
 80a1e2a:	bd08      	pop	{r3, pc}
 80a1e2c:	080601c8 	.word	0x080601c8

080a1e30 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1e30:	b508      	push	{r3, lr}
 80a1e32:	4b02      	ldr	r3, [pc, #8]	; (80a1e3c <network_disconnect+0xc>)
 80a1e34:	681b      	ldr	r3, [r3, #0]
 80a1e36:	68db      	ldr	r3, [r3, #12]
 80a1e38:	9301      	str	r3, [sp, #4]
 80a1e3a:	bd08      	pop	{r3, pc}
 80a1e3c:	080601c8 	.word	0x080601c8

080a1e40 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1e40:	b508      	push	{r3, lr}
 80a1e42:	4b02      	ldr	r3, [pc, #8]	; (80a1e4c <network_ready+0xc>)
 80a1e44:	681b      	ldr	r3, [r3, #0]
 80a1e46:	691b      	ldr	r3, [r3, #16]
 80a1e48:	9301      	str	r3, [sp, #4]
 80a1e4a:	bd08      	pop	{r3, pc}
 80a1e4c:	080601c8 	.word	0x080601c8

080a1e50 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1e50:	b508      	push	{r3, lr}
 80a1e52:	4b02      	ldr	r3, [pc, #8]	; (80a1e5c <network_on+0xc>)
 80a1e54:	681b      	ldr	r3, [r3, #0]
 80a1e56:	695b      	ldr	r3, [r3, #20]
 80a1e58:	9301      	str	r3, [sp, #4]
 80a1e5a:	bd08      	pop	{r3, pc}
 80a1e5c:	080601c8 	.word	0x080601c8

080a1e60 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1e60:	b508      	push	{r3, lr}
 80a1e62:	4b02      	ldr	r3, [pc, #8]	; (80a1e6c <network_off+0xc>)
 80a1e64:	681b      	ldr	r3, [r3, #0]
 80a1e66:	699b      	ldr	r3, [r3, #24]
 80a1e68:	9301      	str	r3, [sp, #4]
 80a1e6a:	bd08      	pop	{r3, pc}
 80a1e6c:	080601c8 	.word	0x080601c8

080a1e70 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1e70:	b508      	push	{r3, lr}
 80a1e72:	4b02      	ldr	r3, [pc, #8]	; (80a1e7c <network_listen+0xc>)
 80a1e74:	681b      	ldr	r3, [r3, #0]
 80a1e76:	69db      	ldr	r3, [r3, #28]
 80a1e78:	9301      	str	r3, [sp, #4]
 80a1e7a:	bd08      	pop	{r3, pc}
 80a1e7c:	080601c8 	.word	0x080601c8

080a1e80 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1e80:	b508      	push	{r3, lr}
 80a1e82:	4b02      	ldr	r3, [pc, #8]	; (80a1e8c <network_listening+0xc>)
 80a1e84:	681b      	ldr	r3, [r3, #0]
 80a1e86:	6a1b      	ldr	r3, [r3, #32]
 80a1e88:	9301      	str	r3, [sp, #4]
 80a1e8a:	bd08      	pop	{r3, pc}
 80a1e8c:	080601c8 	.word	0x080601c8

080a1e90 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1e90:	b508      	push	{r3, lr}
 80a1e92:	4b02      	ldr	r3, [pc, #8]	; (80a1e9c <network_set_listen_timeout+0xc>)
 80a1e94:	681b      	ldr	r3, [r3, #0]
 80a1e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1e98:	9301      	str	r3, [sp, #4]
 80a1e9a:	bd08      	pop	{r3, pc}
 80a1e9c:	080601c8 	.word	0x080601c8

080a1ea0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1ea0:	b508      	push	{r3, lr}
 80a1ea2:	4b02      	ldr	r3, [pc, #8]	; (80a1eac <network_get_listen_timeout+0xc>)
 80a1ea4:	681b      	ldr	r3, [r3, #0]
 80a1ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1ea8:	9301      	str	r3, [sp, #4]
 80a1eaa:	bd08      	pop	{r3, pc}
 80a1eac:	080601c8 	.word	0x080601c8

080a1eb0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1eb0:	b508      	push	{r3, lr}
 80a1eb2:	4b02      	ldr	r3, [pc, #8]	; (80a1ebc <malloc+0xc>)
 80a1eb4:	681b      	ldr	r3, [r3, #0]
 80a1eb6:	681b      	ldr	r3, [r3, #0]
 80a1eb8:	9301      	str	r3, [sp, #4]
 80a1eba:	bd08      	pop	{r3, pc}
 80a1ebc:	080601a0 	.word	0x080601a0

080a1ec0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1ec0:	b508      	push	{r3, lr}
 80a1ec2:	4b02      	ldr	r3, [pc, #8]	; (80a1ecc <free+0xc>)
 80a1ec4:	681b      	ldr	r3, [r3, #0]
 80a1ec6:	685b      	ldr	r3, [r3, #4]
 80a1ec8:	9301      	str	r3, [sp, #4]
 80a1eca:	bd08      	pop	{r3, pc}
 80a1ecc:	080601a0 	.word	0x080601a0

080a1ed0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1ed0:	2100      	movs	r1, #0
 80a1ed2:	f7ff bf71 	b.w	80a1db8 <system_delay_ms>

080a1ed6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1ed6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1ed8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1eda:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1edc:	b113      	cbz	r3, 80a1ee4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1ede:	2203      	movs	r2, #3
 80a1ee0:	4601      	mov	r1, r0
 80a1ee2:	4798      	blx	r3
    }
 80a1ee4:	4620      	mov	r0, r4
 80a1ee6:	bd10      	pop	{r4, pc}

080a1ee8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1ee8:	4770      	bx	lr

080a1eea <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1eec:	4606      	mov	r6, r0
 80a1eee:	4615      	mov	r5, r2
 80a1ef0:	460c      	mov	r4, r1
 80a1ef2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1ef4:	42bc      	cmp	r4, r7
 80a1ef6:	d006      	beq.n	80a1f06 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1ef8:	6833      	ldr	r3, [r6, #0]
 80a1efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1efe:	689b      	ldr	r3, [r3, #8]
 80a1f00:	4630      	mov	r0, r6
 80a1f02:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1f04:	e7f6      	b.n	80a1ef4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1f06:	4628      	mov	r0, r5
 80a1f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1f0a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1f0a:	2200      	movs	r2, #0
 80a1f0c:	7c00      	ldrb	r0, [r0, #16]
 80a1f0e:	f7ff be81 	b.w	80a1c14 <HAL_I2C_Write_Data>

080a1f12 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1f12:	2100      	movs	r1, #0
 80a1f14:	7c00      	ldrb	r0, [r0, #16]
 80a1f16:	f7ff be85 	b.w	80a1c24 <HAL_I2C_Available_Data>

080a1f1a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1f1a:	2100      	movs	r1, #0
 80a1f1c:	7c00      	ldrb	r0, [r0, #16]
 80a1f1e:	f7ff be89 	b.w	80a1c34 <HAL_I2C_Read_Data>

080a1f22 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1f22:	2100      	movs	r1, #0
 80a1f24:	7c00      	ldrb	r0, [r0, #16]
 80a1f26:	f7ff be8d 	b.w	80a1c44 <HAL_I2C_Peek_Data>

080a1f2a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1f2a:	2100      	movs	r1, #0
 80a1f2c:	7c00      	ldrb	r0, [r0, #16]
 80a1f2e:	f7ff be91 	b.w	80a1c54 <HAL_I2C_Flush_Data>

080a1f32 <_ZN7TwoWireD0Ev>:
 80a1f32:	b510      	push	{r4, lr}
 80a1f34:	4604      	mov	r4, r0
 80a1f36:	2114      	movs	r1, #20
 80a1f38:	f000 fccf 	bl	80a28da <_ZdlPvj>
 80a1f3c:	4620      	mov	r0, r4
 80a1f3e:	bd10      	pop	{r4, pc}

080a1f40 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1f40:	b510      	push	{r4, lr}
 80a1f42:	4604      	mov	r4, r0
 80a1f44:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1f4a:	60a3      	str	r3, [r4, #8]
 80a1f4c:	4b04      	ldr	r3, [pc, #16]	; (80a1f60 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1f4e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1f50:	7420      	strb	r0, [r4, #16]
 80a1f52:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1f54:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1f56:	f7ff fe8d 	bl	80a1c74 <HAL_I2C_Init>

}
 80a1f5a:	4620      	mov	r0, r4
 80a1f5c:	bd10      	pop	{r4, pc}
 80a1f5e:	bf00      	nop
 80a1f60:	080a2cfc 	.word	0x080a2cfc

080a1f64 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1f64:	2300      	movs	r3, #0
 80a1f66:	461a      	mov	r2, r3
 80a1f68:	4619      	mov	r1, r3
 80a1f6a:	7c00      	ldrb	r0, [r0, #16]
 80a1f6c:	f7ff be32 	b.w	80a1bd4 <HAL_I2C_Begin>

080a1f70 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a1f70:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a1f72:	2400      	movs	r4, #0
 80a1f74:	7c00      	ldrb	r0, [r0, #16]
 80a1f76:	9400      	str	r4, [sp, #0]
 80a1f78:	f7ff fe34 	bl	80a1be4 <HAL_I2C_Request_Data>
  return result;
}
 80a1f7c:	b2c0      	uxtb	r0, r0
 80a1f7e:	b002      	add	sp, #8
 80a1f80:	bd10      	pop	{r4, pc}

080a1f82 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a1f82:	2301      	movs	r3, #1
 80a1f84:	b2d2      	uxtb	r2, r2
 80a1f86:	b2c9      	uxtb	r1, r1
 80a1f88:	f7ff bff2 	b.w	80a1f70 <_ZN7TwoWire11requestFromEhhh>

080a1f8c <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a1f8c:	2200      	movs	r2, #0
 80a1f8e:	7c00      	ldrb	r0, [r0, #16]
 80a1f90:	f7ff be30 	b.w	80a1bf4 <HAL_I2C_Begin_Transmission>

080a1f94 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a1f94:	b2c9      	uxtb	r1, r1
 80a1f96:	f7ff bff9 	b.w	80a1f8c <_ZN7TwoWire17beginTransmissionEh>

080a1f9a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a1f9a:	2200      	movs	r2, #0
 80a1f9c:	7c00      	ldrb	r0, [r0, #16]
 80a1f9e:	f7ff be31 	b.w	80a1c04 <HAL_I2C_End_Transmission>

080a1fa2 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a1fa2:	2101      	movs	r1, #1
 80a1fa4:	f7ff bff9 	b.w	80a1f9a <_ZN7TwoWire15endTransmissionEh>

080a1fa8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1fa8:	2100      	movs	r1, #0
 80a1faa:	7c00      	ldrb	r0, [r0, #16]
 80a1fac:	f7ff be5a 	b.w	80a1c64 <HAL_I2C_Is_Enabled>

080a1fb0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1fb0:	4770      	bx	lr

080a1fb2 <_ZN9IPAddressD0Ev>:
 80a1fb2:	b510      	push	{r4, lr}
 80a1fb4:	4604      	mov	r4, r0
 80a1fb6:	2118      	movs	r1, #24
 80a1fb8:	f000 fc8f 	bl	80a28da <_ZdlPvj>
 80a1fbc:	4620      	mov	r0, r4
 80a1fbe:	bd10      	pop	{r4, pc}

080a1fc0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1fc2:	460f      	mov	r7, r1
 80a1fc4:	f100 0608 	add.w	r6, r0, #8
 80a1fc8:	1d05      	adds	r5, r0, #4
 80a1fca:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1fcc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1fd0:	220a      	movs	r2, #10
 80a1fd2:	4638      	mov	r0, r7
 80a1fd4:	f000 f927 	bl	80a2226 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1fd8:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1fda:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1fdc:	d007      	beq.n	80a1fee <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1fde:	2c00      	cmp	r4, #0
 80a1fe0:	d0f4      	beq.n	80a1fcc <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1fe2:	212e      	movs	r1, #46	; 0x2e
 80a1fe4:	4638      	mov	r0, r7
 80a1fe6:	f000 f8db 	bl	80a21a0 <_ZN5Print5printEc>
 80a1fea:	4404      	add	r4, r0
 80a1fec:	e7ee      	b.n	80a1fcc <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1fee:	4620      	mov	r0, r4
 80a1ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1ff4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1ff4:	b510      	push	{r4, lr}
 80a1ff6:	4604      	mov	r4, r0
 80a1ff8:	4b04      	ldr	r3, [pc, #16]	; (80a200c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1ffa:	2211      	movs	r2, #17
 80a1ffc:	f840 3b04 	str.w	r3, [r0], #4
 80a2000:	2100      	movs	r1, #0
 80a2002:	f000 fdce 	bl	80a2ba2 <memset>
{
    clear();
}
 80a2006:	4620      	mov	r0, r4
 80a2008:	bd10      	pop	{r4, pc}
 80a200a:	bf00      	nop
 80a200c:	080a2d24 	.word	0x080a2d24

080a2010 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2010:	4603      	mov	r3, r0
 80a2012:	4a07      	ldr	r2, [pc, #28]	; (80a2030 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2014:	b510      	push	{r4, lr}
 80a2016:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a201a:	f101 0210 	add.w	r2, r1, #16
 80a201e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2022:	4291      	cmp	r1, r2
 80a2024:	f843 4b04 	str.w	r4, [r3], #4
 80a2028:	d1f9      	bne.n	80a201e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a202a:	780a      	ldrb	r2, [r1, #0]
 80a202c:	701a      	strb	r2, [r3, #0]
}
 80a202e:	bd10      	pop	{r4, pc}
 80a2030:	080a2d24 	.word	0x080a2d24

080a2034 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2034:	4a02      	ldr	r2, [pc, #8]	; (80a2040 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a2036:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2038:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a203a:	2204      	movs	r2, #4
 80a203c:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a203e:	4770      	bx	lr
 80a2040:	080a2d24 	.word	0x080a2d24

080a2044 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2044:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2046:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a204a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a204e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a2052:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a2056:	2304      	movs	r3, #4
 80a2058:	6041      	str	r1, [r0, #4]
 80a205a:	7503      	strb	r3, [r0, #20]
 80a205c:	bd10      	pop	{r4, pc}
	...

080a2060 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2062:	4d04      	ldr	r5, [pc, #16]	; (80a2074 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2064:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2066:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a206a:	9500      	str	r5, [sp, #0]
 80a206c:	f7ff ffea 	bl	80a2044 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2070:	b003      	add	sp, #12
 80a2072:	bd30      	pop	{r4, r5, pc}
 80a2074:	080a2d24 	.word	0x080a2d24

080a2078 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2078:	4a01      	ldr	r2, [pc, #4]	; (80a2080 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a207a:	4b02      	ldr	r3, [pc, #8]	; (80a2084 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a207c:	601a      	str	r2, [r3, #0]
 80a207e:	4770      	bx	lr
 80a2080:	080a2da6 	.word	0x080a2da6
 80a2084:	200001ec 	.word	0x200001ec

080a2088 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2088:	2300      	movs	r3, #0
 80a208a:	461a      	mov	r2, r3
 80a208c:	6840      	ldr	r0, [r0, #4]
 80a208e:	f7ff bebf 	b.w	80a1e10 <network_connect>

080a2092 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2092:	2200      	movs	r2, #0
 80a2094:	2102      	movs	r1, #2
 80a2096:	6840      	ldr	r0, [r0, #4]
 80a2098:	f7ff beca 	b.w	80a1e30 <network_disconnect>

080a209c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a209c:	2200      	movs	r2, #0
 80a209e:	4611      	mov	r1, r2
 80a20a0:	6840      	ldr	r0, [r0, #4]
 80a20a2:	f7ff bebd 	b.w	80a1e20 <network_connecting>

080a20a6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a20a6:	2200      	movs	r2, #0
 80a20a8:	4611      	mov	r1, r2
 80a20aa:	6840      	ldr	r0, [r0, #4]
 80a20ac:	f7ff bec8 	b.w	80a1e40 <network_ready>

080a20b0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a20b0:	2300      	movs	r3, #0
 80a20b2:	461a      	mov	r2, r3
 80a20b4:	4619      	mov	r1, r3
 80a20b6:	6840      	ldr	r0, [r0, #4]
 80a20b8:	f7ff beca 	b.w	80a1e50 <network_on>

080a20bc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a20bc:	2300      	movs	r3, #0
 80a20be:	461a      	mov	r2, r3
 80a20c0:	4619      	mov	r1, r3
 80a20c2:	6840      	ldr	r0, [r0, #4]
 80a20c4:	f7ff becc 	b.w	80a1e60 <network_off>

080a20c8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a20c8:	2200      	movs	r2, #0
 80a20ca:	f081 0101 	eor.w	r1, r1, #1
 80a20ce:	6840      	ldr	r0, [r0, #4]
 80a20d0:	f7ff bece 	b.w	80a1e70 <network_listen>

080a20d4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a20d4:	2200      	movs	r2, #0
 80a20d6:	6840      	ldr	r0, [r0, #4]
 80a20d8:	f7ff beda 	b.w	80a1e90 <network_set_listen_timeout>

080a20dc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a20dc:	2200      	movs	r2, #0
 80a20de:	4611      	mov	r1, r2
 80a20e0:	6840      	ldr	r0, [r0, #4]
 80a20e2:	f7ff bedd 	b.w	80a1ea0 <network_get_listen_timeout>

080a20e6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a20e6:	2200      	movs	r2, #0
 80a20e8:	4611      	mov	r1, r2
 80a20ea:	6840      	ldr	r0, [r0, #4]
 80a20ec:	f7ff bec8 	b.w	80a1e80 <network_listening>

080a20f0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a20f0:	b570      	push	{r4, r5, r6, lr}
 80a20f2:	4616      	mov	r6, r2
 80a20f4:	b08e      	sub	sp, #56	; 0x38
 80a20f6:	4604      	mov	r4, r0
    IPAddress addr;
 80a20f8:	a808      	add	r0, sp, #32
 80a20fa:	f7ff ff7b 	bl	80a1ff4 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a20fe:	2211      	movs	r2, #17
 80a2100:	2100      	movs	r1, #0
 80a2102:	a803      	add	r0, sp, #12
 80a2104:	f000 fd4d 	bl	80a2ba2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2108:	4630      	mov	r0, r6
 80a210a:	f000 fdb5 	bl	80a2c78 <strlen>
 80a210e:	2500      	movs	r5, #0
 80a2110:	4b0a      	ldr	r3, [pc, #40]	; (80a213c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2112:	9500      	str	r5, [sp, #0]
 80a2114:	b281      	uxth	r1, r0
 80a2116:	685b      	ldr	r3, [r3, #4]
 80a2118:	aa03      	add	r2, sp, #12
 80a211a:	4630      	mov	r0, r6
 80a211c:	f7ff fe3c 	bl	80a1d98 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2120:	b120      	cbz	r0, 80a212c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2122:	4629      	mov	r1, r5
 80a2124:	4620      	mov	r0, r4
 80a2126:	f7ff ff85 	bl	80a2034 <_ZN9IPAddressC1Em>
 80a212a:	e003      	b.n	80a2134 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a212c:	a903      	add	r1, sp, #12
 80a212e:	4620      	mov	r0, r4
 80a2130:	f7ff ff6e 	bl	80a2010 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2134:	4620      	mov	r0, r4
 80a2136:	b00e      	add	sp, #56	; 0x38
 80a2138:	bd70      	pop	{r4, r5, r6, pc}
 80a213a:	bf00      	nop
 80a213c:	20000264 	.word	0x20000264

080a2140 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2140:	4b02      	ldr	r3, [pc, #8]	; (80a214c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2142:	4a03      	ldr	r2, [pc, #12]	; (80a2150 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2144:	601a      	str	r2, [r3, #0]
 80a2146:	2200      	movs	r2, #0
 80a2148:	605a      	str	r2, [r3, #4]
 80a214a:	4770      	bx	lr
 80a214c:	200001f0 	.word	0x200001f0
 80a2150:	080a2e1c 	.word	0x080a2e1c

080a2154 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2156:	4606      	mov	r6, r0
 80a2158:	460d      	mov	r5, r1
 80a215a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a215c:	2400      	movs	r4, #0
  while (size--) {
 80a215e:	42bd      	cmp	r5, r7
 80a2160:	d00c      	beq.n	80a217c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2162:	6833      	ldr	r3, [r6, #0]
 80a2164:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2168:	689b      	ldr	r3, [r3, #8]
 80a216a:	4630      	mov	r0, r6
 80a216c:	4798      	blx	r3
     if (chunk>=0)
 80a216e:	2800      	cmp	r0, #0
 80a2170:	db01      	blt.n	80a2176 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2172:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a2174:	e7f3      	b.n	80a215e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2176:	2c00      	cmp	r4, #0
 80a2178:	bf08      	it	eq
 80a217a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a217c:	4620      	mov	r0, r4
 80a217e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2180 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2180:	b570      	push	{r4, r5, r6, lr}
 80a2182:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2184:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a2186:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a2188:	b149      	cbz	r1, 80a219e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a218a:	f000 fd75 	bl	80a2c78 <strlen>
 80a218e:	682b      	ldr	r3, [r5, #0]
 80a2190:	4602      	mov	r2, r0
 80a2192:	4621      	mov	r1, r4
 80a2194:	4628      	mov	r0, r5
    }
 80a2196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a219a:	68db      	ldr	r3, [r3, #12]
 80a219c:	4718      	bx	r3
    }
 80a219e:	bd70      	pop	{r4, r5, r6, pc}

080a21a0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a21a0:	6803      	ldr	r3, [r0, #0]
 80a21a2:	689b      	ldr	r3, [r3, #8]
 80a21a4:	4718      	bx	r3

080a21a6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a21a6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a21a8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a21aa:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a21ac:	f7ff fff8 	bl	80a21a0 <_ZN5Print5printEc>
  n += print('\n');
 80a21b0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a21b2:	4604      	mov	r4, r0
  n += print('\n');
 80a21b4:	4628      	mov	r0, r5
 80a21b6:	f7ff fff3 	bl	80a21a0 <_ZN5Print5printEc>
  return n;
}
 80a21ba:	4420      	add	r0, r4
 80a21bc:	bd38      	pop	{r3, r4, r5, pc}

080a21be <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a21be:	b538      	push	{r3, r4, r5, lr}
 80a21c0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a21c2:	f7ff ffdd 	bl	80a2180 <_ZN5Print5writeEPKc>
 80a21c6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a21c8:	4628      	mov	r0, r5
 80a21ca:	f7ff ffec 	bl	80a21a6 <_ZN5Print7printlnEv>
  return n;
}
 80a21ce:	4420      	add	r0, r4
 80a21d0:	bd38      	pop	{r3, r4, r5, pc}

080a21d2 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a21d2:	2a01      	cmp	r2, #1
 80a21d4:	bf98      	it	ls
 80a21d6:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a21d8:	b530      	push	{r4, r5, lr}
 80a21da:	460b      	mov	r3, r1
 80a21dc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a21de:	2100      	movs	r1, #0
 80a21e0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a21e4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a21e8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a21ec:	fb05 3312 	mls	r3, r5, r2, r3
 80a21f0:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a21f2:	2b09      	cmp	r3, #9
 80a21f4:	bf94      	ite	ls
 80a21f6:	3330      	addls	r3, #48	; 0x30
 80a21f8:	3337      	addhi	r3, #55	; 0x37
 80a21fa:	b2db      	uxtb	r3, r3
 80a21fc:	4621      	mov	r1, r4
 80a21fe:	f804 3901 	strb.w	r3, [r4], #-1
 80a2202:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2204:	2d00      	cmp	r5, #0
 80a2206:	d1ef      	bne.n	80a21e8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2208:	f7ff ffba 	bl	80a2180 <_ZN5Print5writeEPKc>
}
 80a220c:	b00b      	add	sp, #44	; 0x2c
 80a220e:	bd30      	pop	{r4, r5, pc}

080a2210 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a2210:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a2212:	b922      	cbnz	r2, 80a221e <_ZN5Print5printEmi+0xe>
 80a2214:	6803      	ldr	r3, [r0, #0]
 80a2216:	b2c9      	uxtb	r1, r1
 80a2218:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a221a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a221c:	4718      	bx	r3
  else return printNumber(n, base);
 80a221e:	b2d2      	uxtb	r2, r2
}
 80a2220:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2222:	f7ff bfd6 	b.w	80a21d2 <_ZN5Print11printNumberEmh>

080a2226 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a2226:	f7ff bff3 	b.w	80a2210 <_ZN5Print5printEmi>

080a222a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a222a:	b510      	push	{r4, lr}
 80a222c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a222e:	f7ff fe52 	bl	80a1ed6 <_ZNSt14_Function_baseD1Ev>
 80a2232:	4620      	mov	r0, r4
 80a2234:	bd10      	pop	{r4, pc}
	...

080a2238 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2238:	4803      	ldr	r0, [pc, #12]	; (80a2248 <_GLOBAL__sub_I_RGB+0x10>)
 80a223a:	2300      	movs	r3, #0
 80a223c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a223e:	4a03      	ldr	r2, [pc, #12]	; (80a224c <_GLOBAL__sub_I_RGB+0x14>)
 80a2240:	4903      	ldr	r1, [pc, #12]	; (80a2250 <_GLOBAL__sub_I_RGB+0x18>)
 80a2242:	f000 bb45 	b.w	80a28d0 <__aeabi_atexit>
 80a2246:	bf00      	nop
 80a2248:	200001f8 	.word	0x200001f8
 80a224c:	20000128 	.word	0x20000128
 80a2250:	080a222b 	.word	0x080a222b

080a2254 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a2254:	4770      	bx	lr

080a2256 <_ZN8SPIClassD0Ev>:
 80a2256:	b510      	push	{r4, lr}
 80a2258:	4604      	mov	r4, r0
 80a225a:	2110      	movs	r1, #16
 80a225c:	f000 fb3d 	bl	80a28da <_ZdlPvj>
 80a2260:	4620      	mov	r0, r4
 80a2262:	bd10      	pop	{r4, pc}

080a2264 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2264:	b570      	push	{r4, r5, r6, lr}
 80a2266:	4604      	mov	r4, r0
 80a2268:	460e      	mov	r6, r1
 80a226a:	4b07      	ldr	r3, [pc, #28]	; (80a2288 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a226c:	2500      	movs	r5, #0
 80a226e:	6003      	str	r3, [r0, #0]
 80a2270:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a2274:	f7ff fc66 	bl	80a1b44 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a2278:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a227a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a227c:	f7ff fd0c 	bl	80a1c98 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a2280:	60a5      	str	r5, [r4, #8]
}
 80a2282:	4620      	mov	r0, r4
 80a2284:	bd70      	pop	{r4, r5, r6, pc}
 80a2286:	bf00      	nop
 80a2288:	080a2e50 	.word	0x080a2e50

080a228c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a228c:	7900      	ldrb	r0, [r0, #4]
 80a228e:	f7ff bd0b 	b.w	80a1ca8 <HAL_SPI_Is_Enabled>
	...

080a2294 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2294:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a2298:	4b03      	ldr	r3, [pc, #12]	; (80a22a8 <_GLOBAL__sub_I_System+0x14>)
 80a229a:	2000      	movs	r0, #0
 80a229c:	7018      	strb	r0, [r3, #0]
 80a229e:	8058      	strh	r0, [r3, #2]
 80a22a0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a22a2:	f7ff bd81 	b.w	80a1da8 <set_system_mode>
 80a22a6:	bf00      	nop
 80a22a8:	20000208 	.word	0x20000208

080a22ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a22ac:	4b02      	ldr	r3, [pc, #8]	; (80a22b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a22ae:	681a      	ldr	r2, [r3, #0]
 80a22b0:	4b02      	ldr	r3, [pc, #8]	; (80a22bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a22b2:	601a      	str	r2, [r3, #0]
 80a22b4:	4770      	bx	lr
 80a22b6:	bf00      	nop
 80a22b8:	200000c0 	.word	0x200000c0
 80a22bc:	20000210 	.word	0x20000210

080a22c0 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
 80a22c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a22c2:	b285      	uxth	r5, r0

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
 80a22c4:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a22c6:	4628      	mov	r0, r5

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
 80a22c8:	460e      	mov	r6, r1
 80a22ca:	4617      	mov	r7, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a22cc:	f000 fa58 	bl	80a2780 <pinAvailable>
 80a22d0:	b160      	cbz	r0, 80a22ec <tone+0x2c>
 80a22d2:	2102      	movs	r1, #2
 80a22d4:	4628      	mov	r0, r5
 80a22d6:	f7ff fc5d 	bl	80a1b94 <HAL_Validate_Pin_Function>
 80a22da:	2802      	cmp	r0, #2
 80a22dc:	d106      	bne.n	80a22ec <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
 80a22de:	463a      	mov	r2, r7
 80a22e0:	4631      	mov	r1, r6
 80a22e2:	4620      	mov	r0, r4
    }
}
 80a22e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Start(pin, frequency, duration);
 80a22e8:	f7ff bcce 	b.w	80a1c88 <HAL_Tone_Start>
 80a22ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a22ee <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a22ee:	4770      	bx	lr

080a22f0 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a22f0:	7441      	strb	r1, [r0, #17]
 80a22f2:	4770      	bx	lr

080a22f4 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a22f4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a22f6:	7c00      	ldrb	r0, [r0, #16]
 80a22f8:	f7ff fd16 	bl	80a1d28 <HAL_USART_Available_Data_For_Write>
}
 80a22fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2300:	bd08      	pop	{r3, pc}

080a2302 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2302:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2304:	7c00      	ldrb	r0, [r0, #16]
 80a2306:	f7ff fce7 	bl	80a1cd8 <HAL_USART_Available_Data>
}
 80a230a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a230e:	bd08      	pop	{r3, pc}

080a2310 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2310:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2312:	7c00      	ldrb	r0, [r0, #16]
 80a2314:	f7ff fcf0 	bl	80a1cf8 <HAL_USART_Peek_Data>
}
 80a2318:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a231c:	bf28      	it	cs
 80a231e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2322:	bd08      	pop	{r3, pc}

080a2324 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2324:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2326:	7c00      	ldrb	r0, [r0, #16]
 80a2328:	f7ff fcde 	bl	80a1ce8 <HAL_USART_Read_Data>
}
 80a232c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2330:	bf28      	it	cs
 80a2332:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2336:	bd08      	pop	{r3, pc}

080a2338 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2338:	7c00      	ldrb	r0, [r0, #16]
 80a233a:	f7ff bce5 	b.w	80a1d08 <HAL_USART_Flush_Data>

080a233e <_ZN11USARTSerialD0Ev>:
 80a233e:	b510      	push	{r4, lr}
 80a2340:	4604      	mov	r4, r0
 80a2342:	2114      	movs	r1, #20
 80a2344:	f000 fac9 	bl	80a28da <_ZdlPvj>
 80a2348:	4620      	mov	r0, r4
 80a234a:	bd10      	pop	{r4, pc}

080a234c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a234c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a234e:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2350:	4604      	mov	r4, r0
 80a2352:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2354:	b925      	cbnz	r5, 80a2360 <_ZN11USARTSerial5writeEh+0x14>
 80a2356:	7c00      	ldrb	r0, [r0, #16]
 80a2358:	f7ff fce6 	bl	80a1d28 <HAL_USART_Available_Data_For_Write>
 80a235c:	2800      	cmp	r0, #0
 80a235e:	dd05      	ble.n	80a236c <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2360:	4631      	mov	r1, r6
 80a2362:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2368:	f7ff bcae 	b.w	80a1cc8 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a236c:	4628      	mov	r0, r5
 80a236e:	bd70      	pop	{r4, r5, r6, pc}

080a2370 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2370:	b510      	push	{r4, lr}
 80a2372:	4604      	mov	r4, r0
 80a2374:	4608      	mov	r0, r1
 80a2376:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2378:	2200      	movs	r2, #0
 80a237a:	6062      	str	r2, [r4, #4]
 80a237c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2380:	60a2      	str	r2, [r4, #8]
 80a2382:	4a05      	ldr	r2, [pc, #20]	; (80a2398 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2384:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2386:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2388:	2201      	movs	r2, #1
 80a238a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a238c:	461a      	mov	r2, r3
 80a238e:	f7ff fc93 	bl	80a1cb8 <HAL_USART_Init>
}
 80a2392:	4620      	mov	r0, r4
 80a2394:	bd10      	pop	{r4, pc}
 80a2396:	bf00      	nop
 80a2398:	080a2e8c 	.word	0x080a2e8c

080a239c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a239c:	7c00      	ldrb	r0, [r0, #16]
 80a239e:	f7ff bcbb 	b.w	80a1d18 <HAL_USART_Is_Enabled>
	...

080a23a4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a23a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a23a6:	4c19      	ldr	r4, [pc, #100]	; (80a240c <_Z22__fetch_global_Serial1v+0x68>)
 80a23a8:	6825      	ldr	r5, [r4, #0]
 80a23aa:	b94d      	cbnz	r5, 80a23c0 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a23ac:	2084      	movs	r0, #132	; 0x84
 80a23ae:	f7fd fe74 	bl	80a009a <_Znwj>
 80a23b2:	4606      	mov	r6, r0
 80a23b4:	b118      	cbz	r0, 80a23be <_Z22__fetch_global_Serial1v+0x1a>
 80a23b6:	2284      	movs	r2, #132	; 0x84
 80a23b8:	4629      	mov	r1, r5
 80a23ba:	f000 fbf2 	bl	80a2ba2 <memset>
 80a23be:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a23c0:	4d13      	ldr	r5, [pc, #76]	; (80a2410 <_Z22__fetch_global_Serial1v+0x6c>)
 80a23c2:	682e      	ldr	r6, [r5, #0]
 80a23c4:	b94e      	cbnz	r6, 80a23da <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a23c6:	2084      	movs	r0, #132	; 0x84
 80a23c8:	f7fd fe67 	bl	80a009a <_Znwj>
 80a23cc:	4607      	mov	r7, r0
 80a23ce:	b118      	cbz	r0, 80a23d8 <_Z22__fetch_global_Serial1v+0x34>
 80a23d0:	2284      	movs	r2, #132	; 0x84
 80a23d2:	4631      	mov	r1, r6
 80a23d4:	f000 fbe5 	bl	80a2ba2 <memset>
 80a23d8:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a23da:	4f0e      	ldr	r7, [pc, #56]	; (80a2414 <_Z22__fetch_global_Serial1v+0x70>)
 80a23dc:	6839      	ldr	r1, [r7, #0]
 80a23de:	f011 0601 	ands.w	r6, r1, #1
 80a23e2:	d111      	bne.n	80a2408 <_Z22__fetch_global_Serial1v+0x64>
 80a23e4:	4638      	mov	r0, r7
 80a23e6:	f7fd fe5c 	bl	80a00a2 <__cxa_guard_acquire>
 80a23ea:	b168      	cbz	r0, 80a2408 <_Z22__fetch_global_Serial1v+0x64>
 80a23ec:	6822      	ldr	r2, [r4, #0]
 80a23ee:	4631      	mov	r1, r6
 80a23f0:	682b      	ldr	r3, [r5, #0]
 80a23f2:	4809      	ldr	r0, [pc, #36]	; (80a2418 <_Z22__fetch_global_Serial1v+0x74>)
 80a23f4:	f7ff ffbc 	bl	80a2370 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a23f8:	4638      	mov	r0, r7
 80a23fa:	f7fd fe57 	bl	80a00ac <__cxa_guard_release>
 80a23fe:	4a07      	ldr	r2, [pc, #28]	; (80a241c <_Z22__fetch_global_Serial1v+0x78>)
 80a2400:	4907      	ldr	r1, [pc, #28]	; (80a2420 <_Z22__fetch_global_Serial1v+0x7c>)
 80a2402:	4805      	ldr	r0, [pc, #20]	; (80a2418 <_Z22__fetch_global_Serial1v+0x74>)
 80a2404:	f000 fa64 	bl	80a28d0 <__aeabi_atexit>
#endif
	return serial1;
}
 80a2408:	4803      	ldr	r0, [pc, #12]	; (80a2418 <_Z22__fetch_global_Serial1v+0x74>)
 80a240a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a240c:	20000230 	.word	0x20000230
 80a2410:	20000228 	.word	0x20000228
 80a2414:	2000022c 	.word	0x2000022c
 80a2418:	20000214 	.word	0x20000214
 80a241c:	20000128 	.word	0x20000128
 80a2420:	080a22ef 	.word	0x080a22ef

080a2424 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2424:	7441      	strb	r1, [r0, #17]
 80a2426:	4770      	bx	lr

080a2428 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2428:	4770      	bx	lr

080a242a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a242a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a242c:	2100      	movs	r1, #0
 80a242e:	7c00      	ldrb	r0, [r0, #16]
 80a2430:	f7ff fc9a 	bl	80a1d68 <HAL_USB_USART_Receive_Data>
}
 80a2434:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2438:	bf28      	it	cs
 80a243a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a243e:	bd08      	pop	{r3, pc}

080a2440 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2440:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2442:	2101      	movs	r1, #1
 80a2444:	7c00      	ldrb	r0, [r0, #16]
 80a2446:	f7ff fc8f 	bl	80a1d68 <HAL_USB_USART_Receive_Data>
}
 80a244a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a244e:	bf28      	it	cs
 80a2450:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2454:	bd08      	pop	{r3, pc}

080a2456 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2456:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2458:	7c00      	ldrb	r0, [r0, #16]
 80a245a:	f7ff fc7d 	bl	80a1d58 <HAL_USB_USART_Available_Data_For_Write>
}
 80a245e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2462:	bd08      	pop	{r3, pc}

080a2464 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2464:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2466:	7c00      	ldrb	r0, [r0, #16]
 80a2468:	f7ff fc6e 	bl	80a1d48 <HAL_USB_USART_Available_Data>
}
 80a246c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2470:	bd08      	pop	{r3, pc}

080a2472 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2472:	7c00      	ldrb	r0, [r0, #16]
 80a2474:	f7ff bc88 	b.w	80a1d88 <HAL_USB_USART_Flush_Data>

080a2478 <_ZN9USBSerialD0Ev>:
 80a2478:	b510      	push	{r4, lr}
 80a247a:	4604      	mov	r4, r0
 80a247c:	2114      	movs	r1, #20
 80a247e:	f000 fa2c 	bl	80a28da <_ZdlPvj>
 80a2482:	4620      	mov	r0, r4
 80a2484:	bd10      	pop	{r4, pc}

080a2486 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2486:	b538      	push	{r3, r4, r5, lr}
 80a2488:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a248a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a248c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a248e:	f7ff fc63 	bl	80a1d58 <HAL_USB_USART_Available_Data_For_Write>
 80a2492:	2800      	cmp	r0, #0
 80a2494:	dc01      	bgt.n	80a249a <_ZN9USBSerial5writeEh+0x14>
 80a2496:	7c60      	ldrb	r0, [r4, #17]
 80a2498:	b128      	cbz	r0, 80a24a6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a249a:	4629      	mov	r1, r5
 80a249c:	7c20      	ldrb	r0, [r4, #16]
 80a249e:	f7ff fc6b 	bl	80a1d78 <HAL_USB_USART_Send_Data>
 80a24a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a24a6:	bd38      	pop	{r3, r4, r5, pc}

080a24a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a24a8:	b510      	push	{r4, lr}
 80a24aa:	4604      	mov	r4, r0
 80a24ac:	2300      	movs	r3, #0
 80a24ae:	6063      	str	r3, [r4, #4]
 80a24b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a24b4:	60a3      	str	r3, [r4, #8]
 80a24b6:	4b05      	ldr	r3, [pc, #20]	; (80a24cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a24b8:	4608      	mov	r0, r1
 80a24ba:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a24bc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a24be:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a24c0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a24c2:	4611      	mov	r1, r2
 80a24c4:	f7ff fc38 	bl	80a1d38 <HAL_USB_USART_Init>
}
 80a24c8:	4620      	mov	r0, r4
 80a24ca:	bd10      	pop	{r4, pc}
 80a24cc:	080a2ebc 	.word	0x080a2ebc

080a24d0 <_Z19acquireSerialBufferv>:
 80a24d0:	b510      	push	{r4, lr}
 80a24d2:	4604      	mov	r4, r0
 80a24d4:	2214      	movs	r2, #20
 80a24d6:	2100      	movs	r1, #0
 80a24d8:	f000 fb63 	bl	80a2ba2 <memset>
 80a24dc:	4620      	mov	r0, r4
 80a24de:	bd10      	pop	{r4, pc}

080a24e0 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a24e0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a24e2:	4d0e      	ldr	r5, [pc, #56]	; (80a251c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a24e4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a24e6:	a801      	add	r0, sp, #4
 80a24e8:	f7ff fff2 	bl	80a24d0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a24ec:	6829      	ldr	r1, [r5, #0]
 80a24ee:	f011 0401 	ands.w	r4, r1, #1
 80a24f2:	d110      	bne.n	80a2516 <_Z16_fetch_usbserialv+0x36>
 80a24f4:	4628      	mov	r0, r5
 80a24f6:	f7fd fdd4 	bl	80a00a2 <__cxa_guard_acquire>
 80a24fa:	b160      	cbz	r0, 80a2516 <_Z16_fetch_usbserialv+0x36>
 80a24fc:	aa01      	add	r2, sp, #4
 80a24fe:	4621      	mov	r1, r4
 80a2500:	4807      	ldr	r0, [pc, #28]	; (80a2520 <_Z16_fetch_usbserialv+0x40>)
 80a2502:	f7ff ffd1 	bl	80a24a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2506:	4628      	mov	r0, r5
 80a2508:	f7fd fdd0 	bl	80a00ac <__cxa_guard_release>
 80a250c:	4a05      	ldr	r2, [pc, #20]	; (80a2524 <_Z16_fetch_usbserialv+0x44>)
 80a250e:	4906      	ldr	r1, [pc, #24]	; (80a2528 <_Z16_fetch_usbserialv+0x48>)
 80a2510:	4803      	ldr	r0, [pc, #12]	; (80a2520 <_Z16_fetch_usbserialv+0x40>)
 80a2512:	f000 f9dd 	bl	80a28d0 <__aeabi_atexit>
	return _usbserial;
}
 80a2516:	4802      	ldr	r0, [pc, #8]	; (80a2520 <_Z16_fetch_usbserialv+0x40>)
 80a2518:	b007      	add	sp, #28
 80a251a:	bd30      	pop	{r4, r5, pc}
 80a251c:	20000234 	.word	0x20000234
 80a2520:	2000023c 	.word	0x2000023c
 80a2524:	20000128 	.word	0x20000128
 80a2528:	080a2429 	.word	0x080a2429

080a252c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a252c:	b510      	push	{r4, lr}
 80a252e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2530:	2214      	movs	r2, #20
 80a2532:	2100      	movs	r1, #0
 80a2534:	f000 fb35 	bl	80a2ba2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2538:	4620      	mov	r0, r4
 80a253a:	bd10      	pop	{r4, pc}

080a253c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a253c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a253e:	4c0e      	ldr	r4, [pc, #56]	; (80a2578 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2540:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2542:	a801      	add	r0, sp, #4
 80a2544:	f7ff fff2 	bl	80a252c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2548:	6823      	ldr	r3, [r4, #0]
 80a254a:	07db      	lsls	r3, r3, #31
 80a254c:	d410      	bmi.n	80a2570 <_Z17_fetch_usbserial1v+0x34>
 80a254e:	4620      	mov	r0, r4
 80a2550:	f7fd fda7 	bl	80a00a2 <__cxa_guard_acquire>
 80a2554:	b160      	cbz	r0, 80a2570 <_Z17_fetch_usbserial1v+0x34>
 80a2556:	aa01      	add	r2, sp, #4
 80a2558:	2101      	movs	r1, #1
 80a255a:	4808      	ldr	r0, [pc, #32]	; (80a257c <_Z17_fetch_usbserial1v+0x40>)
 80a255c:	f7ff ffa4 	bl	80a24a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2560:	4620      	mov	r0, r4
 80a2562:	f7fd fda3 	bl	80a00ac <__cxa_guard_release>
 80a2566:	4a06      	ldr	r2, [pc, #24]	; (80a2580 <_Z17_fetch_usbserial1v+0x44>)
 80a2568:	4906      	ldr	r1, [pc, #24]	; (80a2584 <_Z17_fetch_usbserial1v+0x48>)
 80a256a:	4804      	ldr	r0, [pc, #16]	; (80a257c <_Z17_fetch_usbserial1v+0x40>)
 80a256c:	f000 f9b0 	bl	80a28d0 <__aeabi_atexit>
  return _usbserial1;
}
 80a2570:	4802      	ldr	r0, [pc, #8]	; (80a257c <_Z17_fetch_usbserial1v+0x40>)
 80a2572:	b006      	add	sp, #24
 80a2574:	bd10      	pop	{r4, pc}
 80a2576:	bf00      	nop
 80a2578:	20000238 	.word	0x20000238
 80a257c:	20000250 	.word	0x20000250
 80a2580:	20000128 	.word	0x20000128
 80a2584:	080a2429 	.word	0x080a2429

080a2588 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2588:	2200      	movs	r2, #0
 80a258a:	4611      	mov	r1, r2
 80a258c:	6840      	ldr	r0, [r0, #4]
 80a258e:	f7ff bc57 	b.w	80a1e40 <network_ready>

080a2592 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2592:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2594:	4616      	mov	r6, r2
 80a2596:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2598:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a259a:	460f      	mov	r7, r1
 80a259c:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a259e:	2100      	movs	r1, #0
 80a25a0:	a803      	add	r0, sp, #12
 80a25a2:	f000 fafe 	bl	80a2ba2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a25a6:	4630      	mov	r0, r6
 80a25a8:	f000 fb66 	bl	80a2c78 <strlen>
 80a25ac:	2500      	movs	r5, #0
 80a25ae:	9500      	str	r5, [sp, #0]
 80a25b0:	b281      	uxth	r1, r0
 80a25b2:	687b      	ldr	r3, [r7, #4]
 80a25b4:	aa03      	add	r2, sp, #12
 80a25b6:	4630      	mov	r0, r6
 80a25b8:	f7ff fbee 	bl	80a1d98 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a25bc:	b120      	cbz	r0, 80a25c8 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a25be:	4629      	mov	r1, r5
 80a25c0:	4620      	mov	r0, r4
 80a25c2:	f7ff fd37 	bl	80a2034 <_ZN9IPAddressC1Em>
 80a25c6:	e003      	b.n	80a25d0 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a25c8:	a903      	add	r1, sp, #12
 80a25ca:	4620      	mov	r0, r4
 80a25cc:	f7ff fd20 	bl	80a2010 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a25d0:	4620      	mov	r0, r4
 80a25d2:	b009      	add	sp, #36	; 0x24
 80a25d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a25d6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a25d6:	2200      	movs	r2, #0
 80a25d8:	4611      	mov	r1, r2
 80a25da:	6840      	ldr	r0, [r0, #4]
 80a25dc:	f7ff bc50 	b.w	80a1e80 <network_listening>

080a25e0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a25e0:	2200      	movs	r2, #0
 80a25e2:	4611      	mov	r1, r2
 80a25e4:	6840      	ldr	r0, [r0, #4]
 80a25e6:	f7ff bc5b 	b.w	80a1ea0 <network_get_listen_timeout>

080a25ea <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a25ea:	2200      	movs	r2, #0
 80a25ec:	6840      	ldr	r0, [r0, #4]
 80a25ee:	f7ff bc4f 	b.w	80a1e90 <network_set_listen_timeout>

080a25f2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a25f2:	2200      	movs	r2, #0
 80a25f4:	f081 0101 	eor.w	r1, r1, #1
 80a25f8:	6840      	ldr	r0, [r0, #4]
 80a25fa:	f7ff bc39 	b.w	80a1e70 <network_listen>

080a25fe <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a25fe:	2300      	movs	r3, #0
 80a2600:	461a      	mov	r2, r3
 80a2602:	4619      	mov	r1, r3
 80a2604:	6840      	ldr	r0, [r0, #4]
 80a2606:	f7ff bc2b 	b.w	80a1e60 <network_off>

080a260a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a260a:	2300      	movs	r3, #0
 80a260c:	461a      	mov	r2, r3
 80a260e:	4619      	mov	r1, r3
 80a2610:	6840      	ldr	r0, [r0, #4]
 80a2612:	f7ff bc1d 	b.w	80a1e50 <network_on>

080a2616 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2616:	2200      	movs	r2, #0
 80a2618:	4611      	mov	r1, r2
 80a261a:	6840      	ldr	r0, [r0, #4]
 80a261c:	f7ff bc00 	b.w	80a1e20 <network_connecting>

080a2620 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2620:	2200      	movs	r2, #0
 80a2622:	2102      	movs	r1, #2
 80a2624:	6840      	ldr	r0, [r0, #4]
 80a2626:	f7ff bc03 	b.w	80a1e30 <network_disconnect>

080a262a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a262a:	2300      	movs	r3, #0
 80a262c:	461a      	mov	r2, r3
 80a262e:	6840      	ldr	r0, [r0, #4]
 80a2630:	f7ff bbee 	b.w	80a1e10 <network_connect>

080a2634 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2634:	4b02      	ldr	r3, [pc, #8]	; (80a2640 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2636:	2204      	movs	r2, #4
 80a2638:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a263a:	4a02      	ldr	r2, [pc, #8]	; (80a2644 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a263c:	601a      	str	r2, [r3, #0]
 80a263e:	4770      	bx	lr
 80a2640:	20000264 	.word	0x20000264
 80a2644:	080a2eec 	.word	0x080a2eec

080a2648 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2648:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a264a:	4b14      	ldr	r3, [pc, #80]	; (80a269c <serialEventRun+0x54>)
 80a264c:	b133      	cbz	r3, 80a265c <serialEventRun+0x14>
 80a264e:	f7ff ff47 	bl	80a24e0 <_Z16_fetch_usbserialv>
 80a2652:	6803      	ldr	r3, [r0, #0]
 80a2654:	691b      	ldr	r3, [r3, #16]
 80a2656:	4798      	blx	r3
 80a2658:	2800      	cmp	r0, #0
 80a265a:	dc16      	bgt.n	80a268a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a265c:	4b10      	ldr	r3, [pc, #64]	; (80a26a0 <serialEventRun+0x58>)
 80a265e:	b133      	cbz	r3, 80a266e <serialEventRun+0x26>
 80a2660:	f7ff fea0 	bl	80a23a4 <_Z22__fetch_global_Serial1v>
 80a2664:	6803      	ldr	r3, [r0, #0]
 80a2666:	691b      	ldr	r3, [r3, #16]
 80a2668:	4798      	blx	r3
 80a266a:	2800      	cmp	r0, #0
 80a266c:	dc10      	bgt.n	80a2690 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a266e:	4b0d      	ldr	r3, [pc, #52]	; (80a26a4 <serialEventRun+0x5c>)
 80a2670:	b10b      	cbz	r3, 80a2676 <serialEventRun+0x2e>
 80a2672:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2676:	4b0c      	ldr	r3, [pc, #48]	; (80a26a8 <serialEventRun+0x60>)
 80a2678:	b17b      	cbz	r3, 80a269a <serialEventRun+0x52>
 80a267a:	f7ff ff5f 	bl	80a253c <_Z17_fetch_usbserial1v>
 80a267e:	6803      	ldr	r3, [r0, #0]
 80a2680:	691b      	ldr	r3, [r3, #16]
 80a2682:	4798      	blx	r3
 80a2684:	2800      	cmp	r0, #0
 80a2686:	dc06      	bgt.n	80a2696 <serialEventRun+0x4e>
 80a2688:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a268a:	f3af 8000 	nop.w
 80a268e:	e7e5      	b.n	80a265c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2690:	f3af 8000 	nop.w
 80a2694:	e7eb      	b.n	80a266e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2696:	f3af 8000 	nop.w
 80a269a:	bd08      	pop	{r3, pc}
	...

080a26ac <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a26ac:	b508      	push	{r3, lr}
	serialEventRun();
 80a26ae:	f7ff ffcb 	bl	80a2648 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a26b2:	f7ff fa5f 	bl	80a1b74 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a26b6:	4b01      	ldr	r3, [pc, #4]	; (80a26bc <_post_loop+0x10>)
 80a26b8:	6018      	str	r0, [r3, #0]
 80a26ba:	bd08      	pop	{r3, pc}
 80a26bc:	20000274 	.word	0x20000274

080a26c0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a26c0:	4802      	ldr	r0, [pc, #8]	; (80a26cc <_Z33system_initialize_user_backup_ramv+0xc>)
 80a26c2:	4a03      	ldr	r2, [pc, #12]	; (80a26d0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a26c4:	4903      	ldr	r1, [pc, #12]	; (80a26d4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a26c6:	1a12      	subs	r2, r2, r0
 80a26c8:	f000 ba60 	b.w	80a2b8c <memcpy>
 80a26cc:	40024000 	.word	0x40024000
 80a26d0:	40024004 	.word	0x40024004
 80a26d4:	080a2fd0 	.word	0x080a2fd0

080a26d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a26d8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a26da:	2300      	movs	r3, #0
 80a26dc:	9300      	str	r3, [sp, #0]
 80a26de:	461a      	mov	r2, r3
 80a26e0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a26e4:	f7ff fb7a 	bl	80a1ddc <system_ctrl_set_result>
}
 80a26e8:	b003      	add	sp, #12
 80a26ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a26f0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a26f0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a26f2:	8843      	ldrh	r3, [r0, #2]
 80a26f4:	2b0a      	cmp	r3, #10
 80a26f6:	d008      	beq.n	80a270a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a26f8:	2b50      	cmp	r3, #80	; 0x50
 80a26fa:	d109      	bne.n	80a2710 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a26fc:	4b09      	ldr	r3, [pc, #36]	; (80a2724 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a26fe:	681b      	ldr	r3, [r3, #0]
 80a2700:	b13b      	cbz	r3, 80a2712 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2702:	b003      	add	sp, #12
 80a2704:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2708:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a270a:	f7ff ffe5 	bl	80a26d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a270e:	e006      	b.n	80a271e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2710:	2300      	movs	r3, #0
 80a2712:	9300      	str	r3, [sp, #0]
 80a2714:	461a      	mov	r2, r3
 80a2716:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a271a:	f7ff fb5f 	bl	80a1ddc <system_ctrl_set_result>
        break;
    }
}
 80a271e:	b003      	add	sp, #12
 80a2720:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2724:	2000026c 	.word	0x2000026c

080a2728 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2728:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a272a:	4c10      	ldr	r4, [pc, #64]	; (80a276c <module_user_init_hook+0x44>)
 80a272c:	4d10      	ldr	r5, [pc, #64]	; (80a2770 <module_user_init_hook+0x48>)
 80a272e:	6823      	ldr	r3, [r4, #0]
 80a2730:	42ab      	cmp	r3, r5
 80a2732:	4b10      	ldr	r3, [pc, #64]	; (80a2774 <module_user_init_hook+0x4c>)
 80a2734:	bf0c      	ite	eq
 80a2736:	2201      	moveq	r2, #1
 80a2738:	2200      	movne	r2, #0
 80a273a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a273c:	d002      	beq.n	80a2744 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a273e:	f7ff ffbf 	bl	80a26c0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2742:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2744:	f7ff fa06 	bl	80a1b54 <HAL_RNG_GetRandomNumber>
 80a2748:	4604      	mov	r4, r0
    srand(seed);
 80a274a:	f000 fa33 	bl	80a2bb4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a274e:	4b0a      	ldr	r3, [pc, #40]	; (80a2778 <module_user_init_hook+0x50>)
 80a2750:	b113      	cbz	r3, 80a2758 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2752:	4620      	mov	r0, r4
 80a2754:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2758:	2100      	movs	r1, #0
 80a275a:	4807      	ldr	r0, [pc, #28]	; (80a2778 <module_user_init_hook+0x50>)
 80a275c:	f7ff fb50 	bl	80a1e00 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2764:	2100      	movs	r1, #0
 80a2766:	4805      	ldr	r0, [pc, #20]	; (80a277c <module_user_init_hook+0x54>)
 80a2768:	f7ff bb2e 	b.w	80a1dc8 <system_ctrl_set_app_request_handler>
 80a276c:	40024000 	.word	0x40024000
 80a2770:	9a271c1e 	.word	0x9a271c1e
 80a2774:	20000270 	.word	0x20000270
 80a2778:	00000000 	.word	0x00000000
 80a277c:	080a26f1 	.word	0x080a26f1

080a2780 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2780:	b510      	push	{r4, lr}
 80a2782:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2784:	480f      	ldr	r0, [pc, #60]	; (80a27c4 <pinAvailable+0x44>)
 80a2786:	f7ff fd81 	bl	80a228c <_ZN8SPIClass9isEnabledEv>
 80a278a:	b128      	cbz	r0, 80a2798 <pinAvailable+0x18>
 80a278c:	f1a4 030d 	sub.w	r3, r4, #13
 80a2790:	2b02      	cmp	r3, #2
 80a2792:	d801      	bhi.n	80a2798 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2794:	2000      	movs	r0, #0
 80a2796:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2798:	f000 f840 	bl	80a281c <_Z19__fetch_global_Wirev>
 80a279c:	f7ff fc04 	bl	80a1fa8 <_ZN7TwoWire9isEnabledEv>
 80a27a0:	b108      	cbz	r0, 80a27a6 <pinAvailable+0x26>
 80a27a2:	2c01      	cmp	r4, #1
 80a27a4:	d9f6      	bls.n	80a2794 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a27a6:	f7ff fdfd 	bl	80a23a4 <_Z22__fetch_global_Serial1v>
 80a27aa:	f7ff fdf7 	bl	80a239c <_ZN11USARTSerial9isEnabledEv>
 80a27ae:	b118      	cbz	r0, 80a27b8 <pinAvailable+0x38>
 80a27b0:	f1a4 0312 	sub.w	r3, r4, #18
 80a27b4:	2b01      	cmp	r3, #1
 80a27b6:	d9ed      	bls.n	80a2794 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a27b8:	2c17      	cmp	r4, #23
 80a27ba:	bf8c      	ite	hi
 80a27bc:	2000      	movhi	r0, #0
 80a27be:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a27c0:	bd10      	pop	{r4, pc}
 80a27c2:	bf00      	nop
 80a27c4:	200002a8 	.word	0x200002a8

080a27c8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a27c8:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a27ca:	b538      	push	{r3, r4, r5, lr}
 80a27cc:	4604      	mov	r4, r0
 80a27ce:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a27d0:	d80a      	bhi.n	80a27e8 <pinMode+0x20>
 80a27d2:	29ff      	cmp	r1, #255	; 0xff
 80a27d4:	d008      	beq.n	80a27e8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a27d6:	f7ff ffd3 	bl	80a2780 <pinAvailable>
 80a27da:	b128      	cbz	r0, 80a27e8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a27dc:	4629      	mov	r1, r5
 80a27de:	4620      	mov	r0, r4
}
 80a27e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a27e4:	f7ff b9de 	b.w	80a1ba4 <HAL_Pin_Mode>
 80a27e8:	bd38      	pop	{r3, r4, r5, pc}

080a27ea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a27ea:	b538      	push	{r3, r4, r5, lr}
 80a27ec:	4604      	mov	r4, r0
 80a27ee:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a27f0:	f7ff f9e0 	bl	80a1bb4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a27f4:	28ff      	cmp	r0, #255	; 0xff
 80a27f6:	d010      	beq.n	80a281a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a27f8:	2806      	cmp	r0, #6
 80a27fa:	d804      	bhi.n	80a2806 <digitalWrite+0x1c>
 80a27fc:	234d      	movs	r3, #77	; 0x4d
 80a27fe:	fa23 f000 	lsr.w	r0, r3, r0
 80a2802:	07c3      	lsls	r3, r0, #31
 80a2804:	d409      	bmi.n	80a281a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2806:	4620      	mov	r0, r4
 80a2808:	f7ff ffba 	bl	80a2780 <pinAvailable>
 80a280c:	b128      	cbz	r0, 80a281a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a280e:	4629      	mov	r1, r5
 80a2810:	4620      	mov	r0, r4
}
 80a2812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2816:	f7ff b9d5 	b.w	80a1bc4 <HAL_GPIO_Write>
 80a281a:	bd38      	pop	{r3, r4, r5, pc}

080a281c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a281c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a281e:	4d0b      	ldr	r5, [pc, #44]	; (80a284c <_Z19__fetch_global_Wirev+0x30>)
 80a2820:	6829      	ldr	r1, [r5, #0]
 80a2822:	f011 0401 	ands.w	r4, r1, #1
 80a2826:	d10f      	bne.n	80a2848 <_Z19__fetch_global_Wirev+0x2c>
 80a2828:	4628      	mov	r0, r5
 80a282a:	f7fd fc3a 	bl	80a00a2 <__cxa_guard_acquire>
 80a282e:	b158      	cbz	r0, 80a2848 <_Z19__fetch_global_Wirev+0x2c>
 80a2830:	4621      	mov	r1, r4
 80a2832:	4807      	ldr	r0, [pc, #28]	; (80a2850 <_Z19__fetch_global_Wirev+0x34>)
 80a2834:	f7ff fb84 	bl	80a1f40 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2838:	4628      	mov	r0, r5
 80a283a:	f7fd fc37 	bl	80a00ac <__cxa_guard_release>
 80a283e:	4a05      	ldr	r2, [pc, #20]	; (80a2854 <_Z19__fetch_global_Wirev+0x38>)
 80a2840:	4905      	ldr	r1, [pc, #20]	; (80a2858 <_Z19__fetch_global_Wirev+0x3c>)
 80a2842:	4803      	ldr	r0, [pc, #12]	; (80a2850 <_Z19__fetch_global_Wirev+0x34>)
 80a2844:	f000 f844 	bl	80a28d0 <__aeabi_atexit>
	return wire;
}
 80a2848:	4801      	ldr	r0, [pc, #4]	; (80a2850 <_Z19__fetch_global_Wirev+0x34>)
 80a284a:	bd38      	pop	{r3, r4, r5, pc}
 80a284c:	20000278 	.word	0x20000278
 80a2850:	2000027c 	.word	0x2000027c
 80a2854:	20000128 	.word	0x20000128
 80a2858:	080a1ee9 	.word	0x080a1ee9

080a285c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a285c:	b513      	push	{r0, r1, r4, lr}
 80a285e:	4c08      	ldr	r4, [pc, #32]	; (80a2880 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2860:	2300      	movs	r3, #0
 80a2862:	461a      	mov	r2, r3
 80a2864:	4619      	mov	r1, r3
 80a2866:	9300      	str	r3, [sp, #0]
 80a2868:	4620      	mov	r0, r4
 80a286a:	f7ff fbf9 	bl	80a2060 <_ZN9IPAddressC1Ehhhh>
 80a286e:	4620      	mov	r0, r4
 80a2870:	4a04      	ldr	r2, [pc, #16]	; (80a2884 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2872:	4905      	ldr	r1, [pc, #20]	; (80a2888 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2874:	b002      	add	sp, #8
 80a2876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a287a:	f000 b829 	b.w	80a28d0 <__aeabi_atexit>
 80a287e:	bf00      	nop
 80a2880:	20000290 	.word	0x20000290
 80a2884:	20000128 	.word	0x20000128
 80a2888:	080a1fb1 	.word	0x080a1fb1

080a288c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a288c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a288e:	4c0c      	ldr	r4, [pc, #48]	; (80a28c0 <_GLOBAL__sub_I_SPI+0x34>)
 80a2890:	4e0c      	ldr	r6, [pc, #48]	; (80a28c4 <_GLOBAL__sub_I_SPI+0x38>)
 80a2892:	4d0d      	ldr	r5, [pc, #52]	; (80a28c8 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2894:	2100      	movs	r1, #0
 80a2896:	4620      	mov	r0, r4
 80a2898:	f7ff fce4 	bl	80a2264 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a289c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a289e:	4c0b      	ldr	r4, [pc, #44]	; (80a28cc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a28a0:	4632      	mov	r2, r6
 80a28a2:	4629      	mov	r1, r5
 80a28a4:	f000 f814 	bl	80a28d0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a28a8:	2101      	movs	r1, #1
 80a28aa:	4620      	mov	r0, r4
 80a28ac:	f7ff fcda 	bl	80a2264 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a28b0:	4632      	mov	r2, r6
 80a28b2:	4629      	mov	r1, r5
 80a28b4:	4620      	mov	r0, r4
 80a28b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a28ba:	f000 b809 	b.w	80a28d0 <__aeabi_atexit>
 80a28be:	bf00      	nop
 80a28c0:	200002a8 	.word	0x200002a8
 80a28c4:	20000128 	.word	0x20000128
 80a28c8:	080a2255 	.word	0x080a2255
 80a28cc:	200002b8 	.word	0x200002b8

080a28d0 <__aeabi_atexit>:
 80a28d0:	460b      	mov	r3, r1
 80a28d2:	4601      	mov	r1, r0
 80a28d4:	4618      	mov	r0, r3
 80a28d6:	f000 b94b 	b.w	80a2b70 <__cxa_atexit>

080a28da <_ZdlPvj>:
 80a28da:	f7fd bbe0 	b.w	80a009e <_ZdlPv>
	...

080a28e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a28e0:	4b24      	ldr	r3, [pc, #144]	; (80a2974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a28e2:	681a      	ldr	r2, [r3, #0]
 80a28e4:	07d0      	lsls	r0, r2, #31
 80a28e6:	bf5c      	itt	pl
 80a28e8:	2201      	movpl	r2, #1
 80a28ea:	601a      	strpl	r2, [r3, #0]
 80a28ec:	4b22      	ldr	r3, [pc, #136]	; (80a2978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a28ee:	681a      	ldr	r2, [r3, #0]
 80a28f0:	07d1      	lsls	r1, r2, #31
 80a28f2:	bf5c      	itt	pl
 80a28f4:	2201      	movpl	r2, #1
 80a28f6:	601a      	strpl	r2, [r3, #0]
 80a28f8:	4b20      	ldr	r3, [pc, #128]	; (80a297c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a28fa:	681a      	ldr	r2, [r3, #0]
 80a28fc:	07d2      	lsls	r2, r2, #31
 80a28fe:	bf5c      	itt	pl
 80a2900:	2201      	movpl	r2, #1
 80a2902:	601a      	strpl	r2, [r3, #0]
 80a2904:	4b1e      	ldr	r3, [pc, #120]	; (80a2980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2906:	681a      	ldr	r2, [r3, #0]
 80a2908:	07d0      	lsls	r0, r2, #31
 80a290a:	bf5c      	itt	pl
 80a290c:	2201      	movpl	r2, #1
 80a290e:	601a      	strpl	r2, [r3, #0]
 80a2910:	4b1c      	ldr	r3, [pc, #112]	; (80a2984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2912:	681a      	ldr	r2, [r3, #0]
 80a2914:	07d1      	lsls	r1, r2, #31
 80a2916:	bf5c      	itt	pl
 80a2918:	2201      	movpl	r2, #1
 80a291a:	601a      	strpl	r2, [r3, #0]
 80a291c:	4b1a      	ldr	r3, [pc, #104]	; (80a2988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a291e:	681a      	ldr	r2, [r3, #0]
 80a2920:	07d2      	lsls	r2, r2, #31
 80a2922:	bf5c      	itt	pl
 80a2924:	2201      	movpl	r2, #1
 80a2926:	601a      	strpl	r2, [r3, #0]
 80a2928:	4b18      	ldr	r3, [pc, #96]	; (80a298c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a292a:	681a      	ldr	r2, [r3, #0]
 80a292c:	07d0      	lsls	r0, r2, #31
 80a292e:	bf5c      	itt	pl
 80a2930:	2201      	movpl	r2, #1
 80a2932:	601a      	strpl	r2, [r3, #0]
 80a2934:	4b16      	ldr	r3, [pc, #88]	; (80a2990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2936:	681a      	ldr	r2, [r3, #0]
 80a2938:	07d1      	lsls	r1, r2, #31
 80a293a:	bf5c      	itt	pl
 80a293c:	2201      	movpl	r2, #1
 80a293e:	601a      	strpl	r2, [r3, #0]
 80a2940:	4b14      	ldr	r3, [pc, #80]	; (80a2994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2942:	681a      	ldr	r2, [r3, #0]
 80a2944:	07d2      	lsls	r2, r2, #31
 80a2946:	bf5c      	itt	pl
 80a2948:	2201      	movpl	r2, #1
 80a294a:	601a      	strpl	r2, [r3, #0]
 80a294c:	4b12      	ldr	r3, [pc, #72]	; (80a2998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a294e:	681a      	ldr	r2, [r3, #0]
 80a2950:	07d0      	lsls	r0, r2, #31
 80a2952:	bf5c      	itt	pl
 80a2954:	2201      	movpl	r2, #1
 80a2956:	601a      	strpl	r2, [r3, #0]
 80a2958:	4b10      	ldr	r3, [pc, #64]	; (80a299c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a295a:	681a      	ldr	r2, [r3, #0]
 80a295c:	07d1      	lsls	r1, r2, #31
 80a295e:	bf5c      	itt	pl
 80a2960:	2201      	movpl	r2, #1
 80a2962:	601a      	strpl	r2, [r3, #0]
 80a2964:	4b0e      	ldr	r3, [pc, #56]	; (80a29a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2966:	681a      	ldr	r2, [r3, #0]
 80a2968:	07d2      	lsls	r2, r2, #31
 80a296a:	bf5c      	itt	pl
 80a296c:	2201      	movpl	r2, #1
 80a296e:	601a      	strpl	r2, [r3, #0]
 80a2970:	4770      	bx	lr
 80a2972:	bf00      	nop
 80a2974:	200002f4 	.word	0x200002f4
 80a2978:	200002f0 	.word	0x200002f0
 80a297c:	200002ec 	.word	0x200002ec
 80a2980:	200002e8 	.word	0x200002e8
 80a2984:	200002e4 	.word	0x200002e4
 80a2988:	200002e0 	.word	0x200002e0
 80a298c:	200002dc 	.word	0x200002dc
 80a2990:	200002d8 	.word	0x200002d8
 80a2994:	200002d4 	.word	0x200002d4
 80a2998:	200002d0 	.word	0x200002d0
 80a299c:	200002cc 	.word	0x200002cc
 80a29a0:	200002c8 	.word	0x200002c8

080a29a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a29a4:	4b18      	ldr	r3, [pc, #96]	; (80a2a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a29a6:	681a      	ldr	r2, [r3, #0]
 80a29a8:	07d1      	lsls	r1, r2, #31
 80a29aa:	bf5c      	itt	pl
 80a29ac:	2201      	movpl	r2, #1
 80a29ae:	601a      	strpl	r2, [r3, #0]
 80a29b0:	4b16      	ldr	r3, [pc, #88]	; (80a2a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a29b2:	681a      	ldr	r2, [r3, #0]
 80a29b4:	07d2      	lsls	r2, r2, #31
 80a29b6:	bf5c      	itt	pl
 80a29b8:	2201      	movpl	r2, #1
 80a29ba:	601a      	strpl	r2, [r3, #0]
 80a29bc:	4b14      	ldr	r3, [pc, #80]	; (80a2a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a29be:	681a      	ldr	r2, [r3, #0]
 80a29c0:	07d0      	lsls	r0, r2, #31
 80a29c2:	bf5c      	itt	pl
 80a29c4:	2201      	movpl	r2, #1
 80a29c6:	601a      	strpl	r2, [r3, #0]
 80a29c8:	4b12      	ldr	r3, [pc, #72]	; (80a2a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a29ca:	681a      	ldr	r2, [r3, #0]
 80a29cc:	07d1      	lsls	r1, r2, #31
 80a29ce:	bf5c      	itt	pl
 80a29d0:	2201      	movpl	r2, #1
 80a29d2:	601a      	strpl	r2, [r3, #0]
 80a29d4:	4b10      	ldr	r3, [pc, #64]	; (80a2a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a29d6:	681a      	ldr	r2, [r3, #0]
 80a29d8:	07d2      	lsls	r2, r2, #31
 80a29da:	bf5c      	itt	pl
 80a29dc:	2201      	movpl	r2, #1
 80a29de:	601a      	strpl	r2, [r3, #0]
 80a29e0:	4b0e      	ldr	r3, [pc, #56]	; (80a2a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a29e2:	681a      	ldr	r2, [r3, #0]
 80a29e4:	07d0      	lsls	r0, r2, #31
 80a29e6:	bf5c      	itt	pl
 80a29e8:	2201      	movpl	r2, #1
 80a29ea:	601a      	strpl	r2, [r3, #0]
 80a29ec:	4b0c      	ldr	r3, [pc, #48]	; (80a2a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a29ee:	681a      	ldr	r2, [r3, #0]
 80a29f0:	07d1      	lsls	r1, r2, #31
 80a29f2:	bf5c      	itt	pl
 80a29f4:	2201      	movpl	r2, #1
 80a29f6:	601a      	strpl	r2, [r3, #0]
 80a29f8:	4b0a      	ldr	r3, [pc, #40]	; (80a2a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a29fa:	681a      	ldr	r2, [r3, #0]
 80a29fc:	07d2      	lsls	r2, r2, #31
 80a29fe:	bf5c      	itt	pl
 80a2a00:	2201      	movpl	r2, #1
 80a2a02:	601a      	strpl	r2, [r3, #0]
 80a2a04:	4770      	bx	lr
 80a2a06:	bf00      	nop
 80a2a08:	20000314 	.word	0x20000314
 80a2a0c:	20000310 	.word	0x20000310
 80a2a10:	2000030c 	.word	0x2000030c
 80a2a14:	20000308 	.word	0x20000308
 80a2a18:	20000304 	.word	0x20000304
 80a2a1c:	20000300 	.word	0x20000300
 80a2a20:	200002fc 	.word	0x200002fc
 80a2a24:	200002f8 	.word	0x200002f8

080a2a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2a28:	4b18      	ldr	r3, [pc, #96]	; (80a2a8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2a2a:	681a      	ldr	r2, [r3, #0]
 80a2a2c:	07d1      	lsls	r1, r2, #31
 80a2a2e:	bf5c      	itt	pl
 80a2a30:	2201      	movpl	r2, #1
 80a2a32:	601a      	strpl	r2, [r3, #0]
 80a2a34:	4b16      	ldr	r3, [pc, #88]	; (80a2a90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2a36:	681a      	ldr	r2, [r3, #0]
 80a2a38:	07d2      	lsls	r2, r2, #31
 80a2a3a:	bf5c      	itt	pl
 80a2a3c:	2201      	movpl	r2, #1
 80a2a3e:	601a      	strpl	r2, [r3, #0]
 80a2a40:	4b14      	ldr	r3, [pc, #80]	; (80a2a94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2a42:	681a      	ldr	r2, [r3, #0]
 80a2a44:	07d0      	lsls	r0, r2, #31
 80a2a46:	bf5c      	itt	pl
 80a2a48:	2201      	movpl	r2, #1
 80a2a4a:	601a      	strpl	r2, [r3, #0]
 80a2a4c:	4b12      	ldr	r3, [pc, #72]	; (80a2a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2a4e:	681a      	ldr	r2, [r3, #0]
 80a2a50:	07d1      	lsls	r1, r2, #31
 80a2a52:	bf5c      	itt	pl
 80a2a54:	2201      	movpl	r2, #1
 80a2a56:	601a      	strpl	r2, [r3, #0]
 80a2a58:	4b10      	ldr	r3, [pc, #64]	; (80a2a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2a5a:	681a      	ldr	r2, [r3, #0]
 80a2a5c:	07d2      	lsls	r2, r2, #31
 80a2a5e:	bf5c      	itt	pl
 80a2a60:	2201      	movpl	r2, #1
 80a2a62:	601a      	strpl	r2, [r3, #0]
 80a2a64:	4b0e      	ldr	r3, [pc, #56]	; (80a2aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2a66:	681a      	ldr	r2, [r3, #0]
 80a2a68:	07d0      	lsls	r0, r2, #31
 80a2a6a:	bf5c      	itt	pl
 80a2a6c:	2201      	movpl	r2, #1
 80a2a6e:	601a      	strpl	r2, [r3, #0]
 80a2a70:	4b0c      	ldr	r3, [pc, #48]	; (80a2aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2a72:	681a      	ldr	r2, [r3, #0]
 80a2a74:	07d1      	lsls	r1, r2, #31
 80a2a76:	bf5c      	itt	pl
 80a2a78:	2201      	movpl	r2, #1
 80a2a7a:	601a      	strpl	r2, [r3, #0]
 80a2a7c:	4b0a      	ldr	r3, [pc, #40]	; (80a2aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2a7e:	681a      	ldr	r2, [r3, #0]
 80a2a80:	07d2      	lsls	r2, r2, #31
 80a2a82:	bf5c      	itt	pl
 80a2a84:	2201      	movpl	r2, #1
 80a2a86:	601a      	strpl	r2, [r3, #0]
 80a2a88:	4770      	bx	lr
 80a2a8a:	bf00      	nop
 80a2a8c:	20000334 	.word	0x20000334
 80a2a90:	20000330 	.word	0x20000330
 80a2a94:	2000032c 	.word	0x2000032c
 80a2a98:	20000328 	.word	0x20000328
 80a2a9c:	20000324 	.word	0x20000324
 80a2aa0:	20000320 	.word	0x20000320
 80a2aa4:	2000031c 	.word	0x2000031c
 80a2aa8:	20000318 	.word	0x20000318

080a2aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2aac:	4b24      	ldr	r3, [pc, #144]	; (80a2b40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2aae:	681a      	ldr	r2, [r3, #0]
 80a2ab0:	07d0      	lsls	r0, r2, #31
 80a2ab2:	bf5c      	itt	pl
 80a2ab4:	2201      	movpl	r2, #1
 80a2ab6:	601a      	strpl	r2, [r3, #0]
 80a2ab8:	4b22      	ldr	r3, [pc, #136]	; (80a2b44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2aba:	681a      	ldr	r2, [r3, #0]
 80a2abc:	07d1      	lsls	r1, r2, #31
 80a2abe:	bf5c      	itt	pl
 80a2ac0:	2201      	movpl	r2, #1
 80a2ac2:	601a      	strpl	r2, [r3, #0]
 80a2ac4:	4b20      	ldr	r3, [pc, #128]	; (80a2b48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2ac6:	681a      	ldr	r2, [r3, #0]
 80a2ac8:	07d2      	lsls	r2, r2, #31
 80a2aca:	bf5c      	itt	pl
 80a2acc:	2201      	movpl	r2, #1
 80a2ace:	601a      	strpl	r2, [r3, #0]
 80a2ad0:	4b1e      	ldr	r3, [pc, #120]	; (80a2b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2ad2:	681a      	ldr	r2, [r3, #0]
 80a2ad4:	07d0      	lsls	r0, r2, #31
 80a2ad6:	bf5c      	itt	pl
 80a2ad8:	2201      	movpl	r2, #1
 80a2ada:	601a      	strpl	r2, [r3, #0]
 80a2adc:	4b1c      	ldr	r3, [pc, #112]	; (80a2b50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2ade:	681a      	ldr	r2, [r3, #0]
 80a2ae0:	07d1      	lsls	r1, r2, #31
 80a2ae2:	bf5c      	itt	pl
 80a2ae4:	2201      	movpl	r2, #1
 80a2ae6:	601a      	strpl	r2, [r3, #0]
 80a2ae8:	4b1a      	ldr	r3, [pc, #104]	; (80a2b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2aea:	681a      	ldr	r2, [r3, #0]
 80a2aec:	07d2      	lsls	r2, r2, #31
 80a2aee:	bf5c      	itt	pl
 80a2af0:	2201      	movpl	r2, #1
 80a2af2:	601a      	strpl	r2, [r3, #0]
 80a2af4:	4b18      	ldr	r3, [pc, #96]	; (80a2b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2af6:	681a      	ldr	r2, [r3, #0]
 80a2af8:	07d0      	lsls	r0, r2, #31
 80a2afa:	bf5c      	itt	pl
 80a2afc:	2201      	movpl	r2, #1
 80a2afe:	601a      	strpl	r2, [r3, #0]
 80a2b00:	4b16      	ldr	r3, [pc, #88]	; (80a2b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2b02:	681a      	ldr	r2, [r3, #0]
 80a2b04:	07d1      	lsls	r1, r2, #31
 80a2b06:	bf5c      	itt	pl
 80a2b08:	2201      	movpl	r2, #1
 80a2b0a:	601a      	strpl	r2, [r3, #0]
 80a2b0c:	4b14      	ldr	r3, [pc, #80]	; (80a2b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2b0e:	681a      	ldr	r2, [r3, #0]
 80a2b10:	07d2      	lsls	r2, r2, #31
 80a2b12:	bf5c      	itt	pl
 80a2b14:	2201      	movpl	r2, #1
 80a2b16:	601a      	strpl	r2, [r3, #0]
 80a2b18:	4b12      	ldr	r3, [pc, #72]	; (80a2b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2b1a:	681a      	ldr	r2, [r3, #0]
 80a2b1c:	07d0      	lsls	r0, r2, #31
 80a2b1e:	bf5c      	itt	pl
 80a2b20:	2201      	movpl	r2, #1
 80a2b22:	601a      	strpl	r2, [r3, #0]
 80a2b24:	4b10      	ldr	r3, [pc, #64]	; (80a2b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2b26:	681a      	ldr	r2, [r3, #0]
 80a2b28:	07d1      	lsls	r1, r2, #31
 80a2b2a:	bf5c      	itt	pl
 80a2b2c:	2201      	movpl	r2, #1
 80a2b2e:	601a      	strpl	r2, [r3, #0]
 80a2b30:	4b0e      	ldr	r3, [pc, #56]	; (80a2b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2b32:	681a      	ldr	r2, [r3, #0]
 80a2b34:	07d2      	lsls	r2, r2, #31
 80a2b36:	bf5c      	itt	pl
 80a2b38:	2201      	movpl	r2, #1
 80a2b3a:	601a      	strpl	r2, [r3, #0]
 80a2b3c:	4770      	bx	lr
 80a2b3e:	bf00      	nop
 80a2b40:	20000364 	.word	0x20000364
 80a2b44:	20000360 	.word	0x20000360
 80a2b48:	2000035c 	.word	0x2000035c
 80a2b4c:	20000358 	.word	0x20000358
 80a2b50:	20000354 	.word	0x20000354
 80a2b54:	20000350 	.word	0x20000350
 80a2b58:	2000034c 	.word	0x2000034c
 80a2b5c:	20000348 	.word	0x20000348
 80a2b60:	20000344 	.word	0x20000344
 80a2b64:	20000340 	.word	0x20000340
 80a2b68:	2000033c 	.word	0x2000033c
 80a2b6c:	20000338 	.word	0x20000338

080a2b70 <__cxa_atexit>:
 80a2b70:	b510      	push	{r4, lr}
 80a2b72:	4c05      	ldr	r4, [pc, #20]	; (80a2b88 <__cxa_atexit+0x18>)
 80a2b74:	4613      	mov	r3, r2
 80a2b76:	b12c      	cbz	r4, 80a2b84 <__cxa_atexit+0x14>
 80a2b78:	460a      	mov	r2, r1
 80a2b7a:	4601      	mov	r1, r0
 80a2b7c:	2002      	movs	r0, #2
 80a2b7e:	f3af 8000 	nop.w
 80a2b82:	bd10      	pop	{r4, pc}
 80a2b84:	4620      	mov	r0, r4
 80a2b86:	bd10      	pop	{r4, pc}
 80a2b88:	00000000 	.word	0x00000000

080a2b8c <memcpy>:
 80a2b8c:	b510      	push	{r4, lr}
 80a2b8e:	1e43      	subs	r3, r0, #1
 80a2b90:	440a      	add	r2, r1
 80a2b92:	4291      	cmp	r1, r2
 80a2b94:	d004      	beq.n	80a2ba0 <memcpy+0x14>
 80a2b96:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2b9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2b9e:	e7f8      	b.n	80a2b92 <memcpy+0x6>
 80a2ba0:	bd10      	pop	{r4, pc}

080a2ba2 <memset>:
 80a2ba2:	4603      	mov	r3, r0
 80a2ba4:	4402      	add	r2, r0
 80a2ba6:	4293      	cmp	r3, r2
 80a2ba8:	d002      	beq.n	80a2bb0 <memset+0xe>
 80a2baa:	f803 1b01 	strb.w	r1, [r3], #1
 80a2bae:	e7fa      	b.n	80a2ba6 <memset+0x4>
 80a2bb0:	4770      	bx	lr
	...

080a2bb4 <srand>:
 80a2bb4:	b538      	push	{r3, r4, r5, lr}
 80a2bb6:	4b12      	ldr	r3, [pc, #72]	; (80a2c00 <srand+0x4c>)
 80a2bb8:	4605      	mov	r5, r0
 80a2bba:	681c      	ldr	r4, [r3, #0]
 80a2bbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2bbe:	b9d3      	cbnz	r3, 80a2bf6 <srand+0x42>
 80a2bc0:	2018      	movs	r0, #24
 80a2bc2:	f7ff f975 	bl	80a1eb0 <malloc>
 80a2bc6:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2bca:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2bcc:	8003      	strh	r3, [r0, #0]
 80a2bce:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2bd2:	8043      	strh	r3, [r0, #2]
 80a2bd4:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2bd8:	8083      	strh	r3, [r0, #4]
 80a2bda:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2bde:	80c3      	strh	r3, [r0, #6]
 80a2be0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2be4:	8103      	strh	r3, [r0, #8]
 80a2be6:	2305      	movs	r3, #5
 80a2be8:	8143      	strh	r3, [r0, #10]
 80a2bea:	230b      	movs	r3, #11
 80a2bec:	8183      	strh	r3, [r0, #12]
 80a2bee:	2201      	movs	r2, #1
 80a2bf0:	2300      	movs	r3, #0
 80a2bf2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2bf6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2bf8:	2200      	movs	r2, #0
 80a2bfa:	611d      	str	r5, [r3, #16]
 80a2bfc:	615a      	str	r2, [r3, #20]
 80a2bfe:	bd38      	pop	{r3, r4, r5, pc}
 80a2c00:	20000124 	.word	0x20000124

080a2c04 <rand>:
 80a2c04:	4b19      	ldr	r3, [pc, #100]	; (80a2c6c <rand+0x68>)
 80a2c06:	b510      	push	{r4, lr}
 80a2c08:	681c      	ldr	r4, [r3, #0]
 80a2c0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2c0c:	b9d3      	cbnz	r3, 80a2c44 <rand+0x40>
 80a2c0e:	2018      	movs	r0, #24
 80a2c10:	f7ff f94e 	bl	80a1eb0 <malloc>
 80a2c14:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2c18:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2c1a:	8003      	strh	r3, [r0, #0]
 80a2c1c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2c20:	8043      	strh	r3, [r0, #2]
 80a2c22:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2c26:	8083      	strh	r3, [r0, #4]
 80a2c28:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2c2c:	80c3      	strh	r3, [r0, #6]
 80a2c2e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2c32:	8103      	strh	r3, [r0, #8]
 80a2c34:	2305      	movs	r3, #5
 80a2c36:	8143      	strh	r3, [r0, #10]
 80a2c38:	230b      	movs	r3, #11
 80a2c3a:	8183      	strh	r3, [r0, #12]
 80a2c3c:	2201      	movs	r2, #1
 80a2c3e:	2300      	movs	r3, #0
 80a2c40:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2c44:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a2c46:	4c0a      	ldr	r4, [pc, #40]	; (80a2c70 <rand+0x6c>)
 80a2c48:	690b      	ldr	r3, [r1, #16]
 80a2c4a:	6948      	ldr	r0, [r1, #20]
 80a2c4c:	435c      	muls	r4, r3
 80a2c4e:	4a09      	ldr	r2, [pc, #36]	; (80a2c74 <rand+0x70>)
 80a2c50:	fb02 4000 	mla	r0, r2, r0, r4
 80a2c54:	fba3 2302 	umull	r2, r3, r3, r2
 80a2c58:	3201      	adds	r2, #1
 80a2c5a:	4403      	add	r3, r0
 80a2c5c:	f143 0300 	adc.w	r3, r3, #0
 80a2c60:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80a2c64:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80a2c68:	bd10      	pop	{r4, pc}
 80a2c6a:	bf00      	nop
 80a2c6c:	20000124 	.word	0x20000124
 80a2c70:	5851f42d 	.word	0x5851f42d
 80a2c74:	4c957f2d 	.word	0x4c957f2d

080a2c78 <strlen>:
 80a2c78:	4603      	mov	r3, r0
 80a2c7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2c7e:	2a00      	cmp	r2, #0
 80a2c80:	d1fb      	bne.n	80a2c7a <strlen+0x2>
 80a2c82:	1a18      	subs	r0, r3, r0
 80a2c84:	3801      	subs	r0, #1
 80a2c86:	4770      	bx	lr

080a2c88 <dynalib_user>:
 80a2c88:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2c98:	0000 0000 504d 3152 3132 6e20 746f 6620     ....MPR121 not f
 80a2ca8:	756f 646e 202c 6863 6365 206b 6977 6972     ound, check wiri
 80a2cb8:	676e 003f 504d 3152 3132 6620 756f 646e     ng?.MPR121 found
 80a2cc8:	0021 7420 756f 6863 6465 2000 6572 656c     !. touched. rele
 80a2cd8:	7361 6465 0000 0000                         ased....

080a2ce0 <CSWTCH.215>:
 80a2ce0:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a2cf0:	0050 0000                                   P...

080a2cf4 <_ZTV7TwoWire>:
	...
 80a2cfc:	1ee9 080a 1f33 080a 1f0b 080a 1eeb 080a     ....3...........
 80a2d0c:	1f13 080a 1f1b 080a 1f23 080a 1f2b 080a     ........#...+...

080a2d1c <_ZTV9IPAddress>:
	...
 80a2d24:	1fc1 080a 1fb1 080a 1fb3 080a 6162 6475     ............baud
 80a2d34:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a2d44:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a2d54:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a2d64:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a2d74:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a2d84:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a2d94:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a2da4:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a2db4:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a2dc4:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a2dd4:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a2de4:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a2df4:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a2e04:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a2e14 <_ZTVN5spark12NetworkClassE>:
	...
 80a2e1c:	2089 080a 2093 080a 209d 080a 20a7 080a     . ... ... ... ..
 80a2e2c:	20b1 080a 20bd 080a 20c9 080a 20d5 080a     . ... ... ... ..
 80a2e3c:	20dd 080a 20e7 080a 20f1 080a               . ... ... ..

080a2e48 <_ZTV8SPIClass>:
	...
 80a2e50:	2255 080a 2257 080a 005a 2b25 3330 3a64     U"..W"..Z.%+03d:
 80a2e60:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a2e70:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2e80:	0000 0000                                   ....

080a2e84 <_ZTV11USARTSerial>:
	...
 80a2e8c:	22ef 080a 233f 080a 234d 080a 2155 080a     ."..?#..M#..U!..
 80a2e9c:	2303 080a 2325 080a 2311 080a 2339 080a     .#..%#...#..9#..
 80a2eac:	22f1 080a 22f5 080a                         ."..."..

080a2eb4 <_ZTV9USBSerial>:
	...
 80a2ebc:	2429 080a 2479 080a 2487 080a 2155 080a     )$..y$...$..U!..
 80a2ecc:	2465 080a 242b 080a 2441 080a 2473 080a     e$..+$..A$..s$..
 80a2edc:	2457 080a 2425 080a                         W$..%$..

080a2ee4 <_ZTVN5spark9WiFiClassE>:
	...
 80a2eec:	262b 080a 2621 080a 2617 080a 2589 080a     +&..!&...&...%..
 80a2efc:	260b 080a 25ff 080a 25f3 080a 25eb 080a     .&...%...%...%..
 80a2f0c:	25e1 080a 25d7 080a 2593 080a               .%...%...%..

080a2f18 <__sf_fake_stdin>:
	...

080a2f38 <__sf_fake_stdout>:
	...

080a2f58 <__sf_fake_stderr>:
	...
 80a2f78:	0043                                        C.

080a2f7a <link_const_variable_data_end>:
	...

080a2f7c <link_constructors_location>:
 80a2f7c:	080a04d1 	.word	0x080a04d1
 80a2f80:	080a07e1 	.word	0x080a07e1
 80a2f84:	080a07e5 	.word	0x080a07e5
 80a2f88:	080a07e9 	.word	0x080a07e9
 80a2f8c:	080a07ed 	.word	0x080a07ed
 80a2f90:	080a07f1 	.word	0x080a07f1
 80a2f94:	080a07f5 	.word	0x080a07f5
 80a2f98:	080a1b31 	.word	0x080a1b31
 80a2f9c:	080a2079 	.word	0x080a2079
 80a2fa0:	080a2141 	.word	0x080a2141
 80a2fa4:	080a2239 	.word	0x080a2239
 80a2fa8:	080a2295 	.word	0x080a2295
 80a2fac:	080a22ad 	.word	0x080a22ad
 80a2fb0:	080a2635 	.word	0x080a2635
 80a2fb4:	080a285d 	.word	0x080a285d
 80a2fb8:	080a288d 	.word	0x080a288d
 80a2fbc:	080a28e1 	.word	0x080a28e1
 80a2fc0:	080a29a5 	.word	0x080a29a5
 80a2fc4:	080a2a29 	.word	0x080a2a29
 80a2fc8:	080a2aad 	.word	0x080a2aad

080a2fcc <link_constructors_end>:
 80a2fcc:	00000000 	.word	0x00000000
