
/Users/matthewmccord/Workspace/photon_iot/seattle-indies-photon-cube-jam-2019/cube-main-jam/target/1.4.0/photon/cube-main-jam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002fa4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2fc0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000128  20000000  080a2fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000244  20000128  20000128  00030128  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a30ec  080a30ec  000230ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3114  080a3114  00023114  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d63f1  00000000  00000000  00023118  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001396b  00000000  00000000  000f9509  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016c6a  00000000  00000000  0010ce74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000020a0  00000000  00000000  00123ade  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000031c8  00000000  00000000  00125b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002d827  00000000  00000000  00128d46  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00030067  00000000  00000000  0015656d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ab28e  00000000  00000000  001865d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bbd0  00000000  00000000  00231864  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fddd 	bl	80a2bec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fde2 	bl	80a2c02 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2fc4 	.word	0x080a2fc4
 80a004c:	20000128 	.word	0x20000128
 80a0050:	20000128 	.word	0x20000128
 80a0054:	2000036c 	.word	0x2000036c
 80a0058:	2000036c 	.word	0x2000036c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fb93 	bl	80a2788 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2f68 	.word	0x080a2f68
 80a0084:	080a2fb8 	.word	0x080a2fb8

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b948 	b.w	80a031c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fa31 	bl	80a04f4 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 bb39 	b.w	80a270c <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 bf39 	b.w	80a1f10 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 bf3f 	b.w	80a1f20 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z16setCornerToColorim>:

  initCurrentLevel();
}

void setCornerToColor(int corner, uint32_t color) {
  stripCorners.setPixelColor(corner, color);
 80a00b4:	460a      	mov	r2, r1
 80a00b6:	b281      	uxth	r1, r0
 80a00b8:	4801      	ldr	r0, [pc, #4]	; (80a00c0 <_Z16setCornerToColorim+0xc>)
 80a00ba:	f001 bcf3 	b.w	80a1aa4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a00be:	bf00      	nop
 80a00c0:	200001d4 	.word	0x200001d4

080a00c4 <_Z18setAllCornerColorsv>:
}

void setAllCornerColors() {
 80a00c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a00c8:	4f0d      	ldr	r7, [pc, #52]	; (80a0100 <_Z18setAllCornerColorsv+0x3c>)
  // 8 Corners on the cube but we will just set the top 4
  for (int i = 4; i < 8; i += 1) {
    for (int j = 0; j < 3; j += 1 ) {
      setCornerToColor(cubeCornerLights[i][j], colorChoices[i - 4]);
 80a00ca:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80a0108 <_Z18setAllCornerColorsv+0x44>

void setCornerToColor(int corner, uint32_t color) {
  stripCorners.setPixelColor(corner, color);
}

void setAllCornerColors() {
 80a00ce:	2400      	movs	r4, #0
 80a00d0:	250c      	movs	r5, #12
 80a00d2:	fb05 7504 	mla	r5, r5, r4, r7
 80a00d6:	ea4f 0984 	mov.w	r9, r4, lsl #2
 80a00da:	3530      	adds	r5, #48	; 0x30
 80a00dc:	2600      	movs	r6, #0
  // 8 Corners on the cube but we will just set the top 4
  for (int i = 4; i < 8; i += 1) {
    for (int j = 0; j < 3; j += 1 ) {
      setCornerToColor(cubeCornerLights[i][j], colorChoices[i - 4]);
 80a00de:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 80a00e2:	f859 1008 	ldr.w	r1, [r9, r8]
}

void setAllCornerColors() {
  // 8 Corners on the cube but we will just set the top 4
  for (int i = 4; i < 8; i += 1) {
    for (int j = 0; j < 3; j += 1 ) {
 80a00e6:	3601      	adds	r6, #1
      setCornerToColor(cubeCornerLights[i][j], colorChoices[i - 4]);
 80a00e8:	f7ff ffe4 	bl	80a00b4 <_Z16setCornerToColorim>
}

void setAllCornerColors() {
  // 8 Corners on the cube but we will just set the top 4
  for (int i = 4; i < 8; i += 1) {
    for (int j = 0; j < 3; j += 1 ) {
 80a00ec:	2e03      	cmp	r6, #3
 80a00ee:	d1f6      	bne.n	80a00de <_Z18setAllCornerColorsv+0x1a>
 80a00f0:	3401      	adds	r4, #1
  stripCorners.setPixelColor(corner, color);
}

void setAllCornerColors() {
  // 8 Corners on the cube but we will just set the top 4
  for (int i = 4; i < 8; i += 1) {
 80a00f2:	2c04      	cmp	r4, #4
 80a00f4:	d1ec      	bne.n	80a00d0 <_Z18setAllCornerColorsv+0xc>
      setCornerToColor(cubeCornerLights[i][j], colorChoices[i - 4]);
    }
  }

  stripCorners.show();
}
 80a00f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for (int j = 0; j < 3; j += 1 ) {
      setCornerToColor(cubeCornerLights[i][j], colorChoices[i - 4]);
    }
  }

  stripCorners.show();
 80a00fa:	4802      	ldr	r0, [pc, #8]	; (80a0104 <_Z18setAllCornerColorsv+0x40>)
 80a00fc:	f000 bc18 	b.w	80a0930 <_ZN17Adafruit_NeoPixel4showEv>
 80a0100:	20000000 	.word	0x20000000
 80a0104:	200001d4 	.word	0x200001d4
 80a0108:	2000016c 	.word	0x2000016c

080a010c <_Z20clearAllCornerColorsv>:
}

void clearAllCornerColors() {
 80a010c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // 8 Corners on the cube
  for (int i = 0; i < 8; i += 1) {
    for (int j = 0; j < 3; j += 1 ) {
      setCornerToColor(cubeCornerLights[i][j], COLOR_OFF);
 80a0110:	4e0a      	ldr	r6, [pc, #40]	; (80a013c <_Z20clearAllCornerColorsv+0x30>)
 80a0112:	4f0b      	ldr	r7, [pc, #44]	; (80a0140 <_Z20clearAllCornerColorsv+0x34>)
  }

  stripCorners.show();
}

void clearAllCornerColors() {
 80a0114:	2400      	movs	r4, #0
 80a0116:	2500      	movs	r5, #0
  // 8 Corners on the cube
  for (int i = 0; i < 8; i += 1) {
    for (int j = 0; j < 3; j += 1 ) {
      setCornerToColor(cubeCornerLights[i][j], COLOR_OFF);
 80a0118:	eb07 0804 	add.w	r8, r7, r4
 80a011c:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 80a0120:	6831      	ldr	r1, [r6, #0]
}

void clearAllCornerColors() {
  // 8 Corners on the cube
  for (int i = 0; i < 8; i += 1) {
    for (int j = 0; j < 3; j += 1 ) {
 80a0122:	3501      	adds	r5, #1
      setCornerToColor(cubeCornerLights[i][j], COLOR_OFF);
 80a0124:	f7ff ffc6 	bl	80a00b4 <_Z16setCornerToColorim>
}

void clearAllCornerColors() {
  // 8 Corners on the cube
  for (int i = 0; i < 8; i += 1) {
    for (int j = 0; j < 3; j += 1 ) {
 80a0128:	2d03      	cmp	r5, #3
 80a012a:	d1f7      	bne.n	80a011c <_Z20clearAllCornerColorsv+0x10>
 80a012c:	340c      	adds	r4, #12
  stripCorners.show();
}

void clearAllCornerColors() {
  // 8 Corners on the cube
  for (int i = 0; i < 8; i += 1) {
 80a012e:	2c60      	cmp	r4, #96	; 0x60
 80a0130:	d1f1      	bne.n	80a0116 <_Z20clearAllCornerColorsv+0xa>
      setCornerToColor(cubeCornerLights[i][j], COLOR_OFF);
    }
  }

  stripCorners.show();
}
 80a0132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (int j = 0; j < 3; j += 1 ) {
      setCornerToColor(cubeCornerLights[i][j], COLOR_OFF);
    }
  }

  stripCorners.show();
 80a0136:	4803      	ldr	r0, [pc, #12]	; (80a0144 <_Z20clearAllCornerColorsv+0x38>)
 80a0138:	f000 bbfa 	b.w	80a0930 <_ZN17Adafruit_NeoPixel4showEv>
 80a013c:	200001c0 	.word	0x200001c0
 80a0140:	20000000 	.word	0x20000000
 80a0144:	200001d4 	.word	0x200001d4

080a0148 <_Z16initCurrentLevelv>:

  gameState = newState;
}

void initCurrentLevel() {
  patternCount = 0;
 80a0148:	4a04      	ldr	r2, [pc, #16]	; (80a015c <_Z16initCurrentLevelv+0x14>)
 80a014a:	2300      	movs	r3, #0
 80a014c:	6013      	str	r3, [r2, #0]
  numberOfGuesses = 0;
 80a014e:	4a04      	ldr	r2, [pc, #16]	; (80a0160 <_Z16initCurrentLevelv+0x18>)
 80a0150:	6013      	str	r3, [r2, #0]
  //   int rndIndex = rand() % static_cast<int>(counts);

  //   pattern[i] = colorChoices[rndIndex];
  // }

  currentCorrectPin = pattern[0];
 80a0152:	4b04      	ldr	r3, [pc, #16]	; (80a0164 <_Z16initCurrentLevelv+0x1c>)
 80a0154:	681a      	ldr	r2, [r3, #0]
 80a0156:	4b04      	ldr	r3, [pc, #16]	; (80a0168 <_Z16initCurrentLevelv+0x20>)
 80a0158:	601a      	str	r2, [r3, #0]
 80a015a:	4770      	bx	lr
 80a015c:	20000154 	.word	0x20000154
 80a0160:	2000014c 	.word	0x2000014c
 80a0164:	20000180 	.word	0x20000180
 80a0168:	20000144 	.word	0x20000144

080a016c <_Z10touchSetupv>:
// Keeps track of the last pins touched
// so we know when buttons are 'released'
uint16_t lasttouched = 0;
uint16_t currtouched = 0;

void touchSetup() {
 80a016c:	b510      	push	{r4, lr}
  // Default address is 0x5A, if tied to 3.3V its 0x5B
  // If tied to SDA its 0x5C and if SCL then 0x5D
  if (!cap.begin(0x5A)) {
 80a016e:	215a      	movs	r1, #90	; 0x5a
 80a0170:	480b      	ldr	r0, [pc, #44]	; (80a01a0 <_Z10touchSetupv+0x34>)
 80a0172:	f000 faf6 	bl	80a0762 <_ZN15Adafruit_MPR1215beginEh>
 80a0176:	b958      	cbnz	r0, 80a0190 <_Z10touchSetupv+0x24>
    Serial.println("MPR121 not found, check wiring?");
 80a0178:	f002 f9e2 	bl	80a2540 <_Z16_fetch_usbserialv>
 80a017c:	4909      	ldr	r1, [pc, #36]	; (80a01a4 <_Z10touchSetupv+0x38>)
 80a017e:	f002 f84e 	bl	80a221e <_ZN5Print7printlnEPKc>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0182:	4c09      	ldr	r4, [pc, #36]	; (80a01a8 <_Z10touchSetupv+0x3c>)
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0184:	f001 fd26 	bl	80a1bd4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0188:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a018a:	f001 fe61 	bl	80a1e50 <spark_process>
 80a018e:	e7f9      	b.n	80a0184 <_Z10touchSetupv+0x18>
      #endif
    }

  }

  Serial.println("MPR121 found!");
 80a0190:	f002 f9d6 	bl	80a2540 <_Z16_fetch_usbserialv>
}
 80a0194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      #endif
    }

  }

  Serial.println("MPR121 found!");
 80a0198:	4904      	ldr	r1, [pc, #16]	; (80a01ac <_Z10touchSetupv+0x40>)
 80a019a:	f002 b840 	b.w	80a221e <_ZN5Print7printlnEPKc>
 80a019e:	bf00      	nop
 80a01a0:	200001d1 	.word	0x200001d1
 80a01a4:	080a2c88 	.word	0x080a2c88
 80a01a8:	20000278 	.word	0x20000278
 80a01ac:	080a2ca8 	.word	0x080a2ca8

080a01b0 <_Z13neoPixelSetupv>:
}
#endif

void neoPixelSetup() {
 80a01b0:	b510      	push	{r4, lr}
  strip.setBrightness(BRIGHTNESS);
 80a01b2:	4c0c      	ldr	r4, [pc, #48]	; (80a01e4 <_Z13neoPixelSetupv+0x34>)
 80a01b4:	2132      	movs	r1, #50	; 0x32
 80a01b6:	4620      	mov	r0, r4
 80a01b8:	f001 fcc4 	bl	80a1b44 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  strip.begin();
 80a01bc:	4620      	mov	r0, r4
 80a01be:	f000 fb81 	bl	80a08c4 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
 80a01c2:	4620      	mov	r0, r4

  stripCorners.setBrightness(BRIGHTNESS);
 80a01c4:	4c08      	ldr	r4, [pc, #32]	; (80a01e8 <_Z13neoPixelSetupv+0x38>)
#endif

void neoPixelSetup() {
  strip.setBrightness(BRIGHTNESS);
  strip.begin();
  strip.show();
 80a01c6:	f000 fbb3 	bl	80a0930 <_ZN17Adafruit_NeoPixel4showEv>

  stripCorners.setBrightness(BRIGHTNESS);
 80a01ca:	4620      	mov	r0, r4
 80a01cc:	2132      	movs	r1, #50	; 0x32
 80a01ce:	f001 fcb9 	bl	80a1b44 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  stripCorners.begin();
 80a01d2:	4620      	mov	r0, r4
 80a01d4:	f000 fb76 	bl	80a08c4 <_ZN17Adafruit_NeoPixel5beginEv>
  stripCorners.show();
 80a01d8:	4620      	mov	r0, r4
}
 80a01da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  strip.begin();
  strip.show();

  stripCorners.setBrightness(BRIGHTNESS);
  stripCorners.begin();
  stripCorners.show();
 80a01de:	f000 bba7 	b.w	80a0930 <_ZN17Adafruit_NeoPixel4showEv>
 80a01e2:	bf00      	nop
 80a01e4:	200001ac 	.word	0x200001ac
 80a01e8:	200001d4 	.word	0x200001d4

080a01ec <_Z23lightAllPanelsWithColorm>:


//   // 6 panels total
// }

void lightAllPanelsWithColor(uint32_t panelColor) {
 80a01ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a01f0:	4606      	mov	r6, r0
  // 6 is the number of panels
  for (int i = 0; i < 6; i += 1) {
    // 4 is the number of lights per panel
    for (int j = 0; j < 4; j += 1) {
      strip.setPixelColor(cubePanelLights[i][j], panelColor);
 80a01f2:	4f0b      	ldr	r7, [pc, #44]	; (80a0220 <_Z23lightAllPanelsWithColorm+0x34>)


//   // 6 panels total
// }

void lightAllPanelsWithColor(uint32_t panelColor) {
 80a01f4:	2400      	movs	r4, #0
 80a01f6:	2500      	movs	r5, #0
  // 6 is the number of panels
  for (int i = 0; i < 6; i += 1) {
    // 4 is the number of lights per panel
    for (int j = 0; j < 4; j += 1) {
      strip.setPixelColor(cubePanelLights[i][j], panelColor);
 80a01f8:	eb07 0804 	add.w	r8, r7, r4
 80a01fc:	f838 1025 	ldrh.w	r1, [r8, r5, lsl #2]
 80a0200:	4632      	mov	r2, r6
 80a0202:	4808      	ldr	r0, [pc, #32]	; (80a0224 <_Z23lightAllPanelsWithColorm+0x38>)

void lightAllPanelsWithColor(uint32_t panelColor) {
  // 6 is the number of panels
  for (int i = 0; i < 6; i += 1) {
    // 4 is the number of lights per panel
    for (int j = 0; j < 4; j += 1) {
 80a0204:	3501      	adds	r5, #1
      strip.setPixelColor(cubePanelLights[i][j], panelColor);
 80a0206:	f001 fc4d 	bl	80a1aa4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>

void lightAllPanelsWithColor(uint32_t panelColor) {
  // 6 is the number of panels
  for (int i = 0; i < 6; i += 1) {
    // 4 is the number of lights per panel
    for (int j = 0; j < 4; j += 1) {
 80a020a:	2d04      	cmp	r5, #4
 80a020c:	d1f6      	bne.n	80a01fc <_Z23lightAllPanelsWithColorm+0x10>
 80a020e:	3410      	adds	r4, #16
//   // 6 panels total
// }

void lightAllPanelsWithColor(uint32_t panelColor) {
  // 6 is the number of panels
  for (int i = 0; i < 6; i += 1) {
 80a0210:	2c60      	cmp	r4, #96	; 0x60
 80a0212:	d1f0      	bne.n	80a01f6 <_Z23lightAllPanelsWithColorm+0xa>
      strip.setPixelColor(cubePanelLights[i][j], panelColor);
    }
  }

  strip.show();
}
 80a0214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (int j = 0; j < 4; j += 1) {
      strip.setPixelColor(cubePanelLights[i][j], panelColor);
    }
  }

  strip.show();
 80a0218:	4802      	ldr	r0, [pc, #8]	; (80a0224 <_Z23lightAllPanelsWithColorm+0x38>)
 80a021a:	f000 bb89 	b.w	80a0930 <_ZN17Adafruit_NeoPixel4showEv>
 80a021e:	bf00      	nop
 80a0220:	20000060 	.word	0x20000060
 80a0224:	200001ac 	.word	0x200001ac

080a0228 <_Z17turnOffEveryLightv>:
  }

  stripCorners.show();
}

void turnOffEveryLight() {
 80a0228:	b508      	push	{r3, lr}
  lightAllPanelsWithColor(COLOR_OFF);
 80a022a:	4b04      	ldr	r3, [pc, #16]	; (80a023c <_Z17turnOffEveryLightv+0x14>)
 80a022c:	6818      	ldr	r0, [r3, #0]
 80a022e:	f7ff ffdd 	bl	80a01ec <_Z23lightAllPanelsWithColorm>
  clearAllCornerColors();
}
 80a0232:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stripCorners.show();
}

void turnOffEveryLight() {
  lightAllPanelsWithColor(COLOR_OFF);
  clearAllCornerColors();
 80a0236:	f7ff bf69 	b.w	80a010c <_Z20clearAllCornerColorsv>
 80a023a:	bf00      	nop
 80a023c:	200001c0 	.word	0x200001c0

080a0240 <_Z15changeGameStatei>:
}

void changeGameState(int newState) {
 80a0240:	b510      	push	{r4, lr}
 80a0242:	4604      	mov	r4, r0
  turnOffEveryLight();
 80a0244:	f7ff fff0 	bl	80a0228 <_Z17turnOffEveryLightv>
  delay(500);
 80a0248:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a024c:	f001 fe70 	bl	80a1f30 <delay>
 80a0250:	2300      	movs	r3, #0
  // here we can do some cleanup / setup depending on the state we are about to enter
  switch (newState) {
 80a0252:	2c04      	cmp	r4, #4
 80a0254:	d822      	bhi.n	80a029c <_Z15changeGameStatei+0x5c>
 80a0256:	e8df f004 	tbb	[pc, r4]
 80a025a:	0c03      	.short	0x0c03
 80a025c:	140f      	.short	0x140f
 80a025e:	1b          	.byte	0x1b
 80a025f:	00          	.byte	0x00
    case STATE_LOADING:
      loadingCount = 0;
 80a0260:	4a11      	ldr	r2, [pc, #68]	; (80a02a8 <_Z15changeGameStatei+0x68>)
 80a0262:	6013      	str	r3, [r2, #0]
      clearAllCornerColors();
 80a0264:	f7ff ff52 	bl	80a010c <_Z20clearAllCornerColorsv>

      // here we just light up all cube panels blue for "loading"
      lightAllPanelsWithColor(COLOR_TEAL);
 80a0268:	4b10      	ldr	r3, [pc, #64]	; (80a02ac <_Z15changeGameStatei+0x6c>)
 80a026a:	6818      	ldr	r0, [r3, #0]
 80a026c:	f7ff ffbe 	bl	80a01ec <_Z23lightAllPanelsWithColorm>
      // resetTheGlowyValues();

      break;
 80a0270:	e014      	b.n	80a029c <_Z15changeGameStatei+0x5c>
    case STATE_SHOW_PATTERN:
      setAllCornerColors();
 80a0272:	f7ff ff27 	bl	80a00c4 <_Z18setAllCornerColorsv>
      // do nothing

      break;
 80a0276:	e011      	b.n	80a029c <_Z15changeGameStatei+0x5c>
    case STATE_GET_USER_INPUT:
      numberOfGuesses = 0;
 80a0278:	4a0d      	ldr	r2, [pc, #52]	; (80a02b0 <_Z15changeGameStatei+0x70>)
 80a027a:	6013      	str	r3, [r2, #0]
      didGuessThisRound = false;
 80a027c:	4a0d      	ldr	r2, [pc, #52]	; (80a02b4 <_Z15changeGameStatei+0x74>)
 80a027e:	7013      	strb	r3, [r2, #0]

      break;
 80a0280:	e00c      	b.n	80a029c <_Z15changeGameStatei+0x5c>
    case STATE_VICTORY:
      clearAllCornerColors();
 80a0282:	f7ff ff43 	bl	80a010c <_Z20clearAllCornerColorsv>

      // here we just light up all cube panels green for success
      lightAllPanelsWithColor(COLOR_WHITE);
 80a0286:	4b0c      	ldr	r3, [pc, #48]	; (80a02b8 <_Z15changeGameStatei+0x78>)
 80a0288:	6818      	ldr	r0, [r3, #0]
 80a028a:	f7ff ffaf 	bl	80a01ec <_Z23lightAllPanelsWithColorm>

      // resetTheGlowyValues();

      break;
 80a028e:	e005      	b.n	80a029c <_Z15changeGameStatei+0x5c>
    case STATE_LOSER:
      clearAllCornerColors();
 80a0290:	f7ff ff3c 	bl	80a010c <_Z20clearAllCornerColorsv>

      // here we just light up all cube panels red for failure
      lightAllPanelsWithColor(COLOR_PURPLE);
 80a0294:	4b09      	ldr	r3, [pc, #36]	; (80a02bc <_Z15changeGameStatei+0x7c>)
 80a0296:	6818      	ldr	r0, [r3, #0]
 80a0298:	f7ff ffa8 	bl	80a01ec <_Z23lightAllPanelsWithColorm>
      // resetTheGlowyValues();

      break;
  }

  currentStateCounter = 0;
 80a029c:	4b08      	ldr	r3, [pc, #32]	; (80a02c0 <_Z15changeGameStatei+0x80>)
 80a029e:	2200      	movs	r2, #0
 80a02a0:	601a      	str	r2, [r3, #0]

  gameState = newState;
 80a02a2:	4b08      	ldr	r3, [pc, #32]	; (80a02c4 <_Z15changeGameStatei+0x84>)
 80a02a4:	601c      	str	r4, [r3, #0]
 80a02a6:	bd10      	pop	{r4, pc}
 80a02a8:	20000168 	.word	0x20000168
 80a02ac:	2000015c 	.word	0x2000015c
 80a02b0:	2000014c 	.word	0x2000014c
 80a02b4:	200001d0 	.word	0x200001d0
 80a02b8:	20000138 	.word	0x20000138
 80a02bc:	20000130 	.word	0x20000130
 80a02c0:	20000158 	.word	0x20000158
 80a02c4:	2000017c 	.word	0x2000017c

080a02c8 <_Z9nextLevelv>:
  goingUp = true;
  glowyValue = 0;
  rate = 2;
}

void nextLevel() {
 80a02c8:	b508      	push	{r3, lr}
  changeGameState(STATE_LOADING);
 80a02ca:	2000      	movs	r0, #0
 80a02cc:	f7ff ffb8 	bl	80a0240 <_Z15changeGameStatei>

  #ifdef TEST_BEEPER
    tone(BEEPER_PIN, 220, 1000);
 80a02d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a02d4:	21dc      	movs	r1, #220	; 0xdc
 80a02d6:	2013      	movs	r0, #19
 80a02d8:	f002 f822 	bl	80a2320 <tone>
  #endif

  level += 1;
 80a02dc:	4a03      	ldr	r2, [pc, #12]	; (80a02ec <_Z9nextLevelv+0x24>)
 80a02de:	6813      	ldr	r3, [r2, #0]
 80a02e0:	3301      	adds	r3, #1
 80a02e2:	6013      	str	r3, [r2, #0]

  initCurrentLevel();
}
 80a02e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tone(BEEPER_PIN, 220, 1000);
  #endif

  level += 1;

  initCurrentLevel();
 80a02e8:	f7ff bf2e 	b.w	80a0148 <_Z16initCurrentLevelv>
 80a02ec:	200001c8 	.word	0x200001c8

080a02f0 <_Z8initCubev>:

  currentCorrectPin = pattern[0];
}

void initCube() {
  level = 0;
 80a02f0:	4b05      	ldr	r3, [pc, #20]	; (80a0308 <_Z8initCubev+0x18>)
 80a02f2:	2200      	movs	r2, #0
 80a02f4:	601a      	str	r2, [r3, #0]
  delayBetweenColors = 50;
 80a02f6:	4b05      	ldr	r3, [pc, #20]	; (80a030c <_Z8initCubev+0x1c>)
 80a02f8:	2232      	movs	r2, #50	; 0x32
 80a02fa:	601a      	str	r2, [r3, #0]
  rndDelayRange = 1;
 80a02fc:	4b04      	ldr	r3, [pc, #16]	; (80a0310 <_Z8initCubev+0x20>)
 80a02fe:	2201      	movs	r2, #1
 80a0300:	601a      	str	r2, [r3, #0]

  nextLevel();
 80a0302:	f7ff bfe1 	b.w	80a02c8 <_Z9nextLevelv>
 80a0306:	bf00      	nop
 80a0308:	200001c8 	.word	0x200001c8
 80a030c:	2000013c 	.word	0x2000013c
 80a0310:	20000150 	.word	0x20000150

080a0314 <_Z11beeperSetupv>:

#endif

#ifdef TEST_BEEPER
void beeperSetup() {
  pinMode(BEEPER_PIN, OUTPUT);
 80a0314:	2101      	movs	r1, #1
 80a0316:	2013      	movs	r0, #19
 80a0318:	f002 ba86 	b.w	80a2828 <pinMode>

080a031c <setup>:
void buzzerSetup() {
  pinMode(BUZZER_PIN, OUTPUT);
}
#endif

void setup() {
 80a031c:	b508      	push	{r3, lr}
  #ifdef TEST_DISPLAY
  displaySetup();
  #endif

  #ifdef TEST_TOUCH
  touchSetup();
 80a031e:	f7ff ff25 	bl	80a016c <_Z10touchSetupv>
  #endif

  #ifdef TEST_NEOPIXEL
  neoPixelSetup();
 80a0322:	f7ff ff45 	bl	80a01b0 <_Z13neoPixelSetupv>
  #endif

  #ifdef TEST_BEEPER
  beeperSetup();
 80a0326:	f7ff fff5 	bl	80a0314 <_Z11beeperSetupv>
  #ifdef TEST_BUZZER
  buzzerSetup();
  #endif

  initCube();
}
 80a032a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  #ifdef TEST_BUZZER
  buzzerSetup();
  #endif

  initCube();
 80a032e:	f7ff bfdf 	b.w	80a02f0 <_Z8initCubev>
	...

080a0334 <_Z12neoPixelLoopv>:
}

void neoPixelLoop() {
 80a0334:	b510      	push	{r4, lr}
  // strip.setPixelColor(pixel_number, strip.Color(R, G, B));

  switch (gameState) {
 80a0336:	4b38      	ldr	r3, [pc, #224]	; (80a0418 <_Z12neoPixelLoopv+0xe4>)
 80a0338:	681b      	ldr	r3, [r3, #0]
 80a033a:	2b04      	cmp	r3, #4
 80a033c:	d86b      	bhi.n	80a0416 <_Z12neoPixelLoopv+0xe2>
 80a033e:	e8df f003 	tbb	[pc, r3]
 80a0342:	2a03      	.short	0x2a03
 80a0344:	566a      	.short	0x566a
 80a0346:	60          	.byte	0x60
 80a0347:	00          	.byte	0x00
    case STATE_LOADING:
      // do the fun loading light pattern?
      if (currentStateCounter <= SOME_DELAY_NUMBER / 2) {
 80a0348:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80a034c:	4c33      	ldr	r4, [pc, #204]	; (80a041c <_Z12neoPixelLoopv+0xe8>)
 80a034e:	6822      	ldr	r2, [r4, #0]
 80a0350:	429a      	cmp	r2, r3
 80a0352:	dc03      	bgt.n	80a035c <_Z12neoPixelLoopv+0x28>
        lightAllPanelsWithColor(COLOR_TEAL);
 80a0354:	4b32      	ldr	r3, [pc, #200]	; (80a0420 <_Z12neoPixelLoopv+0xec>)
 80a0356:	6818      	ldr	r0, [r3, #0]
 80a0358:	f7ff ff48 	bl	80a01ec <_Z23lightAllPanelsWithColorm>
      }

      if (currentStateCounter > SOME_DELAY_NUMBER / 2) {
 80a035c:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80a0360:	6822      	ldr	r2, [r4, #0]
 80a0362:	429a      	cmp	r2, r3
 80a0364:	dd07      	ble.n	80a0376 <_Z12neoPixelLoopv+0x42>
        lightAllPanelsWithColor(COLOR_OFF);
 80a0366:	4b2f      	ldr	r3, [pc, #188]	; (80a0424 <_Z12neoPixelLoopv+0xf0>)
 80a0368:	6818      	ldr	r0, [r3, #0]
 80a036a:	f7ff ff3f 	bl	80a01ec <_Z23lightAllPanelsWithColorm>

        loadingCount += 1;
 80a036e:	4a2e      	ldr	r2, [pc, #184]	; (80a0428 <_Z12neoPixelLoopv+0xf4>)
 80a0370:	6813      	ldr	r3, [r2, #0]
 80a0372:	3301      	adds	r3, #1
 80a0374:	6013      	str	r3, [r2, #0]
      }

      if (currentStateCounter >= SOME_DELAY_NUMBER) {
 80a0376:	f241 3387 	movw	r3, #4999	; 0x1387
 80a037a:	6822      	ldr	r2, [r4, #0]
 80a037c:	429a      	cmp	r2, r3
 80a037e:	dd4a      	ble.n	80a0416 <_Z12neoPixelLoopv+0xe2>
        if (loadingCount >= level) {
 80a0380:	4b29      	ldr	r3, [pc, #164]	; (80a0428 <_Z12neoPixelLoopv+0xf4>)
 80a0382:	681a      	ldr	r2, [r3, #0]
 80a0384:	4b29      	ldr	r3, [pc, #164]	; (80a042c <_Z12neoPixelLoopv+0xf8>)
 80a0386:	681b      	ldr	r3, [r3, #0]
 80a0388:	429a      	cmp	r2, r3
 80a038a:	db44      	blt.n	80a0416 <_Z12neoPixelLoopv+0xe2>
        initCube();
      }

      break;
  }
}
 80a038c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        loadingCount += 1;
      }

      if (currentStateCounter >= SOME_DELAY_NUMBER) {
        if (loadingCount >= level) {
          changeGameState(STATE_SHOW_PATTERN);
 80a0390:	2001      	movs	r0, #1
 80a0392:	f7ff bf55 	b.w	80a0240 <_Z15changeGameStatei>
    case STATE_SHOW_PATTERN:
      {
        // display the current levels pattern on the cube to user
        uint32_t currentColor = pattern[patternCount];

        if (currentStateCounter <= SOME_DELAY_NUMBER) {
 80a0396:	f241 3288 	movw	r2, #5000	; 0x1388
 80a039a:	4b20      	ldr	r3, [pc, #128]	; (80a041c <_Z12neoPixelLoopv+0xe8>)
 80a039c:	6819      	ldr	r1, [r3, #0]
 80a039e:	461c      	mov	r4, r3
 80a03a0:	4291      	cmp	r1, r2
 80a03a2:	dc0b      	bgt.n	80a03bc <_Z12neoPixelLoopv+0x88>
          if (!panelsLitThisRound) {
 80a03a4:	4b22      	ldr	r3, [pc, #136]	; (80a0430 <_Z12neoPixelLoopv+0xfc>)
 80a03a6:	781a      	ldrb	r2, [r3, #0]
 80a03a8:	b942      	cbnz	r2, 80a03bc <_Z12neoPixelLoopv+0x88>

      break;
    case STATE_SHOW_PATTERN:
      {
        // display the current levels pattern on the cube to user
        uint32_t currentColor = pattern[patternCount];
 80a03aa:	4a22      	ldr	r2, [pc, #136]	; (80a0434 <_Z12neoPixelLoopv+0x100>)
 80a03ac:	6811      	ldr	r1, [r2, #0]
 80a03ae:	4a22      	ldr	r2, [pc, #136]	; (80a0438 <_Z12neoPixelLoopv+0x104>)
 80a03b0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]

        if (currentStateCounter <= SOME_DELAY_NUMBER) {
          if (!panelsLitThisRound) {
            panelsLitThisRound = true;
 80a03b4:	2201      	movs	r2, #1
 80a03b6:	701a      	strb	r2, [r3, #0]

            lightAllPanelsWithColor(currentColor);
 80a03b8:	f7ff ff18 	bl	80a01ec <_Z23lightAllPanelsWithColorm>
          }
        }

        if (currentStateCounter > SOME_DELAY_NUMBER) {
 80a03bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80a03c0:	6822      	ldr	r2, [r4, #0]
 80a03c2:	429a      	cmp	r2, r3
 80a03c4:	dd27      	ble.n	80a0416 <_Z12neoPixelLoopv+0xe2>
          lightAllPanelsWithColor(COLOR_OFF);
 80a03c6:	4b17      	ldr	r3, [pc, #92]	; (80a0424 <_Z12neoPixelLoopv+0xf0>)
 80a03c8:	6818      	ldr	r0, [r3, #0]
 80a03ca:	f7ff ff0f 	bl	80a01ec <_Z23lightAllPanelsWithColorm>

          patternCount += 1;
 80a03ce:	4a19      	ldr	r2, [pc, #100]	; (80a0434 <_Z12neoPixelLoopv+0x100>)
          panelsLitThisRound = false;
 80a03d0:	2100      	movs	r1, #0
        }

        if (currentStateCounter > SOME_DELAY_NUMBER) {
          lightAllPanelsWithColor(COLOR_OFF);

          patternCount += 1;
 80a03d2:	6813      	ldr	r3, [r2, #0]
 80a03d4:	3301      	adds	r3, #1
 80a03d6:	6013      	str	r3, [r2, #0]
          panelsLitThisRound = false;
 80a03d8:	4a15      	ldr	r2, [pc, #84]	; (80a0430 <_Z12neoPixelLoopv+0xfc>)
 80a03da:	7011      	strb	r1, [r2, #0]

          if (patternCount >= level) {
 80a03dc:	4a13      	ldr	r2, [pc, #76]	; (80a042c <_Z12neoPixelLoopv+0xf8>)
 80a03de:	6812      	ldr	r2, [r2, #0]
 80a03e0:	4293      	cmp	r3, r2
 80a03e2:	db18      	blt.n	80a0416 <_Z12neoPixelLoopv+0xe2>
        initCube();
      }

      break;
  }
}
 80a03e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

          patternCount += 1;
          panelsLitThisRound = false;

          if (patternCount >= level) {
            changeGameState(STATE_GET_USER_INPUT);
 80a03e8:	2002      	movs	r0, #2
 80a03ea:	f7ff bf29 	b.w	80a0240 <_Z15changeGameStatei>

      break;
    case STATE_VICTORY:
      // show some kind of cool "you did it correctly" light pattern?

      if (currentStateCounter > SOME_DELAY_NUMBER) {
 80a03ee:	4b0b      	ldr	r3, [pc, #44]	; (80a041c <_Z12neoPixelLoopv+0xe8>)
 80a03f0:	681a      	ldr	r2, [r3, #0]
 80a03f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80a03f6:	429a      	cmp	r2, r3
 80a03f8:	dd0d      	ble.n	80a0416 <_Z12neoPixelLoopv+0xe2>
        initCube();
      }

      break;
  }
}
 80a03fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      break;
    case STATE_VICTORY:
      // show some kind of cool "you did it correctly" light pattern?

      if (currentStateCounter > SOME_DELAY_NUMBER) {
        nextLevel();
 80a03fe:	f7ff bf63 	b.w	80a02c8 <_Z9nextLevelv>

      break;
    case STATE_LOSER:
      // wow what a jerk, our player failed show a boo light pattern

      if (currentStateCounter > SOME_DELAY_NUMBER) {
 80a0402:	4b06      	ldr	r3, [pc, #24]	; (80a041c <_Z12neoPixelLoopv+0xe8>)
 80a0404:	681a      	ldr	r2, [r3, #0]
 80a0406:	f241 3388 	movw	r3, #5000	; 0x1388
 80a040a:	429a      	cmp	r2, r3
 80a040c:	dd03      	ble.n	80a0416 <_Z12neoPixelLoopv+0xe2>
        initCube();
      }

      break;
  }
}
 80a040e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      break;
    case STATE_LOSER:
      // wow what a jerk, our player failed show a boo light pattern

      if (currentStateCounter > SOME_DELAY_NUMBER) {
        initCube();
 80a0412:	f7ff bf6d 	b.w	80a02f0 <_Z8initCubev>
 80a0416:	bd10      	pop	{r4, pc}
 80a0418:	2000017c 	.word	0x2000017c
 80a041c:	20000158 	.word	0x20000158
 80a0420:	2000015c 	.word	0x2000015c
 80a0424:	200001c0 	.word	0x200001c0
 80a0428:	20000168 	.word	0x20000168
 80a042c:	200001c8 	.word	0x200001c8
 80a0430:	200001c4 	.word	0x200001c4
 80a0434:	20000154 	.word	0x20000154
 80a0438:	20000180 	.word	0x20000180

080a043c <_Z16handleTouchedPini>:
}

void handleTouchedPin(int pinNumber) {
  // didGuessThisRound = true;

  numberOfGuesses += 1;
 80a043c:	4a06      	ldr	r2, [pc, #24]	; (80a0458 <_Z16handleTouchedPini+0x1c>)
 80a043e:	6813      	ldr	r3, [r2, #0]
 80a0440:	3301      	adds	r3, #1
 80a0442:	6013      	str	r3, [r2, #0]

  if (numberOfGuesses >= level) {
 80a0444:	4a05      	ldr	r2, [pc, #20]	; (80a045c <_Z16handleTouchedPini+0x20>)
 80a0446:	6812      	ldr	r2, [r2, #0]
 80a0448:	4293      	cmp	r3, r2
 80a044a:	db02      	blt.n	80a0452 <_Z16handleTouchedPini+0x16>
    // TODO: Remove always assuming correct sensor/corner was touched
    changeGameState(STATE_VICTORY);
 80a044c:	2003      	movs	r0, #3
 80a044e:	f7ff bef7 	b.w	80a0240 <_Z15changeGameStatei>

  //   return;
  // }

  // if we get here the incorrect pin number was pressed
  changeGameState(STATE_LOSER);
 80a0452:	2004      	movs	r0, #4
 80a0454:	f7ff bef4 	b.w	80a0240 <_Z15changeGameStatei>
 80a0458:	2000014c 	.word	0x2000014c
 80a045c:	200001c8 	.word	0x200001c8

080a0460 <_Z16touchSensorsLoopv>:

void handleReleasedPin(int pinNumber) {
  //
}

void touchSensorsLoop() {
 80a0460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // cap.setThresholds(touch_threshold, release_threshold);
  // Get the currently touched pads
  currtouched = cap.touched();
 80a0462:	481e      	ldr	r0, [pc, #120]	; (80a04dc <_Z16touchSensorsLoopv+0x7c>)
 80a0464:	f000 f945 	bl	80a06f2 <_ZN15Adafruit_MPR1217touchedEv>

  switch (gameState) {
 80a0468:	4b1d      	ldr	r3, [pc, #116]	; (80a04e0 <_Z16touchSensorsLoopv+0x80>)
}

void touchSensorsLoop() {
  // cap.setThresholds(touch_threshold, release_threshold);
  // Get the currently touched pads
  currtouched = cap.touched();
 80a046a:	4d1e      	ldr	r5, [pc, #120]	; (80a04e4 <_Z16touchSensorsLoopv+0x84>)

  switch (gameState) {
 80a046c:	681b      	ldr	r3, [r3, #0]
}

void touchSensorsLoop() {
  // cap.setThresholds(touch_threshold, release_threshold);
  // Get the currently touched pads
  currtouched = cap.touched();
 80a046e:	8028      	strh	r0, [r5, #0]

  switch (gameState) {
 80a0470:	2b02      	cmp	r3, #2
 80a0472:	d131      	bne.n	80a04d8 <_Z16touchSensorsLoopv+0x78>
      break;
    case STATE_GET_USER_INPUT:
      // get user input when touch sensors pressed and check for correct pattern input from user.
      for (uint8_t i=0; i<12; i++) {
        // it if *is* touched and *wasnt* touched before, alert!
        if ((currtouched & _BV(i)) && !(lasttouched & _BV(i)) ) {
 80a0474:	4e1c      	ldr	r6, [pc, #112]	; (80a04e8 <_Z16touchSensorsLoopv+0x88>)
void touchSensorsLoop() {
  // cap.setThresholds(touch_threshold, release_threshold);
  // Get the currently touched pads
  currtouched = cap.touched();

  switch (gameState) {
 80a0476:	2400      	movs	r4, #0
      break;
    case STATE_GET_USER_INPUT:
      // get user input when touch sensors pressed and check for correct pattern input from user.
      for (uint8_t i=0; i<12; i++) {
        // it if *is* touched and *wasnt* touched before, alert!
        if ((currtouched & _BV(i)) && !(lasttouched & _BV(i)) ) {
 80a0478:	882b      	ldrh	r3, [r5, #0]
 80a047a:	b2e7      	uxtb	r7, r4
 80a047c:	4123      	asrs	r3, r4
 80a047e:	07d8      	lsls	r0, r3, #31
 80a0480:	d511      	bpl.n	80a04a6 <_Z16touchSensorsLoopv+0x46>
 80a0482:	8833      	ldrh	r3, [r6, #0]
 80a0484:	4123      	asrs	r3, r4
 80a0486:	07d9      	lsls	r1, r3, #31
 80a0488:	d40d      	bmi.n	80a04a6 <_Z16touchSensorsLoopv+0x46>
          Serial.print(i); Serial.println(" touched");
 80a048a:	f002 f859 	bl	80a2540 <_Z16_fetch_usbserialv>
 80a048e:	220a      	movs	r2, #10
 80a0490:	4639      	mov	r1, r7
 80a0492:	f001 fef8 	bl	80a2286 <_ZN5Print5printEhi>
 80a0496:	f002 f853 	bl	80a2540 <_Z16_fetch_usbserialv>
 80a049a:	4914      	ldr	r1, [pc, #80]	; (80a04ec <_Z16touchSensorsLoopv+0x8c>)
 80a049c:	f001 febf 	bl	80a221e <_ZN5Print7printlnEPKc>

          handleTouchedPin(i);
 80a04a0:	4620      	mov	r0, r4
 80a04a2:	f7ff ffcb 	bl	80a043c <_Z16handleTouchedPini>
        }

      // if it *was* touched and now *isnt*, alert!
        if (!(currtouched & _BV(i)) && (lasttouched & _BV(i)) ) {
 80a04a6:	882b      	ldrh	r3, [r5, #0]
 80a04a8:	4123      	asrs	r3, r4
 80a04aa:	07da      	lsls	r2, r3, #31
 80a04ac:	d40e      	bmi.n	80a04cc <_Z16touchSensorsLoopv+0x6c>
 80a04ae:	8833      	ldrh	r3, [r6, #0]
 80a04b0:	4123      	asrs	r3, r4
 80a04b2:	07db      	lsls	r3, r3, #31
 80a04b4:	d50a      	bpl.n	80a04cc <_Z16touchSensorsLoopv+0x6c>
          Serial.print(i); Serial.println(" released");
 80a04b6:	f002 f843 	bl	80a2540 <_Z16_fetch_usbserialv>
 80a04ba:	4639      	mov	r1, r7
 80a04bc:	220a      	movs	r2, #10
 80a04be:	f001 fee2 	bl	80a2286 <_ZN5Print5printEhi>
 80a04c2:	f002 f83d 	bl	80a2540 <_Z16_fetch_usbserialv>
 80a04c6:	490a      	ldr	r1, [pc, #40]	; (80a04f0 <_Z16touchSensorsLoopv+0x90>)
 80a04c8:	f001 fea9 	bl	80a221e <_ZN5Print7printlnEPKc>
 80a04cc:	3401      	adds	r4, #1
      // do nothing

      break;
    case STATE_GET_USER_INPUT:
      // get user input when touch sensors pressed and check for correct pattern input from user.
      for (uint8_t i=0; i<12; i++) {
 80a04ce:	2c0c      	cmp	r4, #12
 80a04d0:	d1d2      	bne.n	80a0478 <_Z16touchSensorsLoopv+0x18>
          handleReleasedPin(i);
        }
      }

      // reset our state
      lasttouched = currtouched;
 80a04d2:	882a      	ldrh	r2, [r5, #0]
 80a04d4:	4b04      	ldr	r3, [pc, #16]	; (80a04e8 <_Z16touchSensorsLoopv+0x88>)
 80a04d6:	801a      	strh	r2, [r3, #0]
 80a04d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a04da:	bf00      	nop
 80a04dc:	200001d1 	.word	0x200001d1
 80a04e0:	2000017c 	.word	0x2000017c
 80a04e4:	20000134 	.word	0x20000134
 80a04e8:	20000140 	.word	0x20000140
 80a04ec:	080a2cb6 	.word	0x080a2cb6
 80a04f0:	080a2cbf 	.word	0x080a2cbf

080a04f4 <loop>:
    }
  }
}

void loop() {
  if (currentStateCounter <= SOME_DELAY_NUMBER) {
 80a04f4:	f241 3188 	movw	r1, #5000	; 0x1388
      goingUp = true;
    }
  }
}

void loop() {
 80a04f8:	b508      	push	{r3, lr}
  if (currentStateCounter <= SOME_DELAY_NUMBER) {
 80a04fa:	4a06      	ldr	r2, [pc, #24]	; (80a0514 <loop+0x20>)
 80a04fc:	6813      	ldr	r3, [r2, #0]
 80a04fe:	428b      	cmp	r3, r1
    currentStateCounter += 1;
 80a0500:	bfdc      	itt	le
 80a0502:	3301      	addle	r3, #1
 80a0504:	6013      	strle	r3, [r2, #0]
  // pinMode(TX, OUTPUT);
  // noTone(TX);
  #endif

  #ifdef TEST_NEOPIXEL
    neoPixelLoop();
 80a0506:	f7ff ff15 	bl	80a0334 <_Z12neoPixelLoopv>
  #endif

  #ifdef TEST_TOUCH
    touchSensorsLoop();
  #endif
}
 80a050a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  #ifdef TEST_NEOPIXEL
    neoPixelLoop();
  #endif

  #ifdef TEST_TOUCH
    touchSensorsLoop();
 80a050e:	f7ff bfa7 	b.w	80a0460 <_Z16touchSensorsLoopv>
 80a0512:	bf00      	nop
 80a0514:	20000158 	.word	0x20000158

080a0518 <_GLOBAL__sub_I_SystemMode>:
  #endif
}
 80a0518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a051c:	f001 fb62 	bl	80a1be4 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0524:	4b3a      	ldr	r3, [pc, #232]	; (80a0610 <_GLOBAL__sub_I_SystemMode+0xf8>)
 80a0526:	2400      	movs	r4, #0
 80a0528:	701c      	strb	r4, [r3, #0]
 80a052a:	805c      	strh	r4, [r3, #2]
 80a052c:	809a      	strh	r2, [r3, #4]
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a052e:	4d39      	ldr	r5, [pc, #228]	; (80a0614 <_GLOBAL__sub_I_SystemMode+0xfc>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0530:	2003      	movs	r0, #3
 80a0532:	f001 fc69 	bl	80a1e08 <set_system_mode>
 80a0536:	2302      	movs	r3, #2
 80a0538:	461a      	mov	r2, r3
 80a053a:	4f37      	ldr	r7, [pc, #220]	; (80a0618 <_GLOBAL__sub_I_SystemMode+0x100>)
 80a053c:	4e37      	ldr	r6, [pc, #220]	; (80a061c <_GLOBAL__sub_I_SystemMode+0x104>)
 80a053e:	2118      	movs	r1, #24
 80a0540:	4628      	mov	r0, r5
 80a0542:	f000 f9e4 	bl	80a090e <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0546:	4628      	mov	r0, r5
Adafruit_NeoPixel stripCorners(PIXEL_COUNT, PIXEL_CORNERS_PIN, PIXEL_TYPE);
 80a0548:	4d35      	ldr	r5, [pc, #212]	; (80a0620 <_GLOBAL__sub_I_SystemMode+0x108>)
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a054a:	463a      	mov	r2, r7
 80a054c:	4631      	mov	r1, r6
 80a054e:	f002 f9ef 	bl	80a2930 <__aeabi_atexit>
Adafruit_NeoPixel stripCorners(PIXEL_COUNT, PIXEL_CORNERS_PIN, PIXEL_TYPE);
 80a0552:	2302      	movs	r3, #2
 80a0554:	2203      	movs	r2, #3
 80a0556:	2118      	movs	r1, #24
 80a0558:	4628      	mov	r0, r5
 80a055a:	f000 f9d8 	bl	80a090e <_ZN17Adafruit_NeoPixelC1Ethh>
 80a055e:	463a      	mov	r2, r7
 80a0560:	4631      	mov	r1, r6
 80a0562:	4628      	mov	r0, r5
 80a0564:	f002 f9e4 	bl	80a2930 <__aeabi_atexit>

uint32_t COLOR_RED = strip.Color(255, 0, 0);
 80a0568:	4622      	mov	r2, r4
 80a056a:	4621      	mov	r1, r4
 80a056c:	20ff      	movs	r0, #255	; 0xff
 80a056e:	f001 fae4 	bl	80a1b3a <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0572:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80a064c <_GLOBAL__sub_I_SystemMode+0x134>
uint32_t COLOR_BLUE = strip.Color(0, 0, 255);
 80a0576:	4621      	mov	r1, r4
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
Adafruit_NeoPixel stripCorners(PIXEL_COUNT, PIXEL_CORNERS_PIN, PIXEL_TYPE);

uint32_t COLOR_RED = strip.Color(255, 0, 0);
 80a0578:	f8c8 0000 	str.w	r0, [r8]
uint32_t COLOR_BLUE = strip.Color(0, 0, 255);
 80a057c:	22ff      	movs	r2, #255	; 0xff
 80a057e:	4620      	mov	r0, r4
 80a0580:	f001 fadb 	bl	80a1b3a <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0584:	4e27      	ldr	r6, [pc, #156]	; (80a0624 <_GLOBAL__sub_I_SystemMode+0x10c>)
uint32_t COLOR_GREEN = strip.Color(0, 255, 0);
 80a0586:	4622      	mov	r2, r4

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
Adafruit_NeoPixel stripCorners(PIXEL_COUNT, PIXEL_CORNERS_PIN, PIXEL_TYPE);

uint32_t COLOR_RED = strip.Color(255, 0, 0);
uint32_t COLOR_BLUE = strip.Color(0, 0, 255);
 80a0588:	6030      	str	r0, [r6, #0]
uint32_t COLOR_GREEN = strip.Color(0, 255, 0);
 80a058a:	21ff      	movs	r1, #255	; 0xff
 80a058c:	4620      	mov	r0, r4
 80a058e:	f001 fad4 	bl	80a1b3a <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0592:	4f25      	ldr	r7, [pc, #148]	; (80a0628 <_GLOBAL__sub_I_SystemMode+0x110>)
uint32_t COLOR_YELLOW = strip.Color(255, 255, 0);
 80a0594:	21ff      	movs	r1, #255	; 0xff
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
Adafruit_NeoPixel stripCorners(PIXEL_COUNT, PIXEL_CORNERS_PIN, PIXEL_TYPE);

uint32_t COLOR_RED = strip.Color(255, 0, 0);
uint32_t COLOR_BLUE = strip.Color(0, 0, 255);
uint32_t COLOR_GREEN = strip.Color(0, 255, 0);
 80a0596:	6038      	str	r0, [r7, #0]
uint32_t COLOR_YELLOW = strip.Color(255, 255, 0);
 80a0598:	4622      	mov	r2, r4
 80a059a:	4608      	mov	r0, r1
 80a059c:	f001 facd 	bl	80a1b3a <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a05a0:	4d22      	ldr	r5, [pc, #136]	; (80a062c <_GLOBAL__sub_I_SystemMode+0x114>)
uint32_t COLOR_PURPLE = strip.Color(255, 0, 255);
 80a05a2:	22ff      	movs	r2, #255	; 0xff
Adafruit_NeoPixel stripCorners(PIXEL_COUNT, PIXEL_CORNERS_PIN, PIXEL_TYPE);

uint32_t COLOR_RED = strip.Color(255, 0, 0);
uint32_t COLOR_BLUE = strip.Color(0, 0, 255);
uint32_t COLOR_GREEN = strip.Color(0, 255, 0);
uint32_t COLOR_YELLOW = strip.Color(255, 255, 0);
 80a05a4:	6028      	str	r0, [r5, #0]
uint32_t COLOR_PURPLE = strip.Color(255, 0, 255);
 80a05a6:	4621      	mov	r1, r4
 80a05a8:	4610      	mov	r0, r2
 80a05aa:	f001 fac6 	bl	80a1b3a <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a05ae:	4b20      	ldr	r3, [pc, #128]	; (80a0630 <_GLOBAL__sub_I_SystemMode+0x118>)
uint32_t COLOR_TEAL = strip.Color(0, 255, 255);
 80a05b0:	22ff      	movs	r2, #255	; 0xff

uint32_t COLOR_RED = strip.Color(255, 0, 0);
uint32_t COLOR_BLUE = strip.Color(0, 0, 255);
uint32_t COLOR_GREEN = strip.Color(0, 255, 0);
uint32_t COLOR_YELLOW = strip.Color(255, 255, 0);
uint32_t COLOR_PURPLE = strip.Color(255, 0, 255);
 80a05b2:	6018      	str	r0, [r3, #0]
uint32_t COLOR_TEAL = strip.Color(0, 255, 255);
 80a05b4:	4611      	mov	r1, r2
 80a05b6:	4620      	mov	r0, r4
 80a05b8:	f001 fabf 	bl	80a1b3a <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a05bc:	4b1d      	ldr	r3, [pc, #116]	; (80a0634 <_GLOBAL__sub_I_SystemMode+0x11c>)
uint32_t COLOR_WHITE = strip.Color(255, 255, 255);
 80a05be:	22ff      	movs	r2, #255	; 0xff
uint32_t COLOR_RED = strip.Color(255, 0, 0);
uint32_t COLOR_BLUE = strip.Color(0, 0, 255);
uint32_t COLOR_GREEN = strip.Color(0, 255, 0);
uint32_t COLOR_YELLOW = strip.Color(255, 255, 0);
uint32_t COLOR_PURPLE = strip.Color(255, 0, 255);
uint32_t COLOR_TEAL = strip.Color(0, 255, 255);
 80a05c0:	6018      	str	r0, [r3, #0]
uint32_t COLOR_WHITE = strip.Color(255, 255, 255);
 80a05c2:	4611      	mov	r1, r2
 80a05c4:	4610      	mov	r0, r2
 80a05c6:	f001 fab8 	bl	80a1b3a <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a05ca:	4b1b      	ldr	r3, [pc, #108]	; (80a0638 <_GLOBAL__sub_I_SystemMode+0x120>)

uint32_t COLOR_OFF = strip.Color(0, 0, 0);
 80a05cc:	4622      	mov	r2, r4
uint32_t COLOR_BLUE = strip.Color(0, 0, 255);
uint32_t COLOR_GREEN = strip.Color(0, 255, 0);
uint32_t COLOR_YELLOW = strip.Color(255, 255, 0);
uint32_t COLOR_PURPLE = strip.Color(255, 0, 255);
uint32_t COLOR_TEAL = strip.Color(0, 255, 255);
uint32_t COLOR_WHITE = strip.Color(255, 255, 255);
 80a05ce:	6018      	str	r0, [r3, #0]

uint32_t COLOR_OFF = strip.Color(0, 0, 0);
 80a05d0:	4621      	mov	r1, r4
 80a05d2:	4620      	mov	r0, r4
 80a05d4:	f001 fab1 	bl	80a1b3a <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a05d8:	4b18      	ldr	r3, [pc, #96]	; (80a063c <_GLOBAL__sub_I_SystemMode+0x124>)

uint32_t colorChoices[] = { COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW };
 80a05da:	f8d8 1000 	ldr.w	r1, [r8]
uint32_t COLOR_YELLOW = strip.Color(255, 255, 0);
uint32_t COLOR_PURPLE = strip.Color(255, 0, 255);
uint32_t COLOR_TEAL = strip.Color(0, 255, 255);
uint32_t COLOR_WHITE = strip.Color(255, 255, 255);

uint32_t COLOR_OFF = strip.Color(0, 0, 0);
 80a05de:	6018      	str	r0, [r3, #0]

uint32_t colorChoices[] = { COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW };
 80a05e0:	682a      	ldr	r2, [r5, #0]
 80a05e2:	4b17      	ldr	r3, [pc, #92]	; (80a0640 <_GLOBAL__sub_I_SystemMode+0x128>)
 80a05e4:	6838      	ldr	r0, [r7, #0]
 80a05e6:	6834      	ldr	r4, [r6, #0]
 80a05e8:	6058      	str	r0, [r3, #4]
 80a05ea:	6019      	str	r1, [r3, #0]
 80a05ec:	609c      	str	r4, [r3, #8]
 80a05ee:	60da      	str	r2, [r3, #12]
  COLOR_BLUE,
  COLOR_YELLOW,
  COLOR_RED,
  COLOR_YELLOW,
  COLOR_GREEN,
};
 80a05f0:	4b14      	ldr	r3, [pc, #80]	; (80a0644 <_GLOBAL__sub_I_SystemMode+0x12c>)
 80a05f2:	60d8      	str	r0, [r3, #12]
 80a05f4:	6258      	str	r0, [r3, #36]	; 0x24
 80a05f6:	601c      	str	r4, [r3, #0]
 80a05f8:	605a      	str	r2, [r3, #4]
 80a05fa:	6099      	str	r1, [r3, #8]
 80a05fc:	6119      	str	r1, [r3, #16]
 80a05fe:	615c      	str	r4, [r3, #20]
 80a0600:	619a      	str	r2, [r3, #24]
 80a0602:	61d9      	str	r1, [r3, #28]
 80a0604:	621a      	str	r2, [r3, #32]

/**
 * Touch Board
 */
#ifdef TEST_TOUCH
Adafruit_MPR121 cap = Adafruit_MPR121();
 80a0606:	4810      	ldr	r0, [pc, #64]	; (80a0648 <_GLOBAL__sub_I_SystemMode+0x130>)
  #endif

  #ifdef TEST_TOUCH
    touchSensorsLoop();
  #endif
}
 80a0608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

/**
 * Touch Board
 */
#ifdef TEST_TOUCH
Adafruit_MPR121 cap = Adafruit_MPR121();
 80a060c:	f000 b820 	b.w	80a0650 <_ZN15Adafruit_MPR121C1Ev>
 80a0610:	20000160 	.word	0x20000160
 80a0614:	200001ac 	.word	0x200001ac
 80a0618:	20000128 	.word	0x20000128
 80a061c:	080a0871 	.word	0x080a0871
 80a0620:	200001d4 	.word	0x200001d4
 80a0624:	200001a8 	.word	0x200001a8
 80a0628:	200001cc 	.word	0x200001cc
 80a062c:	2000012c 	.word	0x2000012c
 80a0630:	20000130 	.word	0x20000130
 80a0634:	2000015c 	.word	0x2000015c
 80a0638:	20000138 	.word	0x20000138
 80a063c:	200001c0 	.word	0x200001c0
 80a0640:	2000016c 	.word	0x2000016c
 80a0644:	20000180 	.word	0x20000180
 80a0648:	200001d1 	.word	0x200001d1
 80a064c:	20000148 	.word	0x20000148

080a0650 <_ZN15Adafruit_MPR121C1Ev>:
 ****************************************************/

#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}
 80a0650:	4770      	bx	lr

080a0652 <_ZN15Adafruit_MPR12113readRegister8Eh>:
}

/*********************************************************************/


uint8_t Adafruit_MPR121::readRegister8(uint8_t reg) {
 80a0652:	b538      	push	{r3, r4, r5, lr}
 80a0654:	4604      	mov	r4, r0
 80a0656:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a0658:	f002 f910 	bl	80a287c <_Z19__fetch_global_Wirev>
 80a065c:	f994 1000 	ldrsb.w	r1, [r4]
 80a0660:	f001 fcc8 	bl	80a1ff4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a0664:	f002 f90a 	bl	80a287c <_Z19__fetch_global_Wirev>
 80a0668:	6803      	ldr	r3, [r0, #0]
 80a066a:	4629      	mov	r1, r5
 80a066c:	689b      	ldr	r3, [r3, #8]
 80a066e:	4798      	blx	r3
    Wire.endTransmission(false);
 80a0670:	f002 f904 	bl	80a287c <_Z19__fetch_global_Wirev>
 80a0674:	2100      	movs	r1, #0
 80a0676:	f001 fcc0 	bl	80a1ffa <_ZN7TwoWire15endTransmissionEh>
    while (Wire.requestFrom(_i2caddr, 1) != 1);
 80a067a:	f002 f8ff 	bl	80a287c <_Z19__fetch_global_Wirev>
 80a067e:	2201      	movs	r2, #1
 80a0680:	f994 1000 	ldrsb.w	r1, [r4]
 80a0684:	f001 fcad 	bl	80a1fe2 <_ZN7TwoWire11requestFromEii>
 80a0688:	2801      	cmp	r0, #1
 80a068a:	d1f6      	bne.n	80a067a <_ZN15Adafruit_MPR12113readRegister8Eh+0x28>
    return ( Wire.read());
 80a068c:	f002 f8f6 	bl	80a287c <_Z19__fetch_global_Wirev>
 80a0690:	6803      	ldr	r3, [r0, #0]
 80a0692:	695b      	ldr	r3, [r3, #20]
 80a0694:	4798      	blx	r3
}
 80a0696:	b2c0      	uxtb	r0, r0
 80a0698:	bd38      	pop	{r3, r4, r5, pc}

080a069a <_ZN15Adafruit_MPR12114readRegister16Eh>:

uint16_t Adafruit_MPR121::readRegister16(uint8_t reg) {
 80a069a:	b538      	push	{r3, r4, r5, lr}
 80a069c:	4604      	mov	r4, r0
 80a069e:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a06a0:	f002 f8ec 	bl	80a287c <_Z19__fetch_global_Wirev>
 80a06a4:	f994 1000 	ldrsb.w	r1, [r4]
 80a06a8:	f001 fca4 	bl	80a1ff4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a06ac:	f002 f8e6 	bl	80a287c <_Z19__fetch_global_Wirev>
 80a06b0:	6803      	ldr	r3, [r0, #0]
 80a06b2:	4629      	mov	r1, r5
 80a06b4:	689b      	ldr	r3, [r3, #8]
 80a06b6:	4798      	blx	r3
    Wire.endTransmission(false);
 80a06b8:	f002 f8e0 	bl	80a287c <_Z19__fetch_global_Wirev>
 80a06bc:	2100      	movs	r1, #0
 80a06be:	f001 fc9c 	bl	80a1ffa <_ZN7TwoWire15endTransmissionEh>
    while (Wire.requestFrom(_i2caddr, 2) != 2);
 80a06c2:	f002 f8db 	bl	80a287c <_Z19__fetch_global_Wirev>
 80a06c6:	2202      	movs	r2, #2
 80a06c8:	f994 1000 	ldrsb.w	r1, [r4]
 80a06cc:	f001 fc89 	bl	80a1fe2 <_ZN7TwoWire11requestFromEii>
 80a06d0:	2802      	cmp	r0, #2
 80a06d2:	d1f6      	bne.n	80a06c2 <_ZN15Adafruit_MPR12114readRegister16Eh+0x28>
    uint16_t v = Wire.read();
 80a06d4:	f002 f8d2 	bl	80a287c <_Z19__fetch_global_Wirev>
 80a06d8:	6803      	ldr	r3, [r0, #0]
 80a06da:	695b      	ldr	r3, [r3, #20]
 80a06dc:	4798      	blx	r3
 80a06de:	4604      	mov	r4, r0
    v |=  ((uint16_t) Wire.read()) << 8;
 80a06e0:	f002 f8cc 	bl	80a287c <_Z19__fetch_global_Wirev>
 80a06e4:	6803      	ldr	r3, [r0, #0]
 80a06e6:	695b      	ldr	r3, [r3, #20]
 80a06e8:	4798      	blx	r3
    return v;
 80a06ea:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
 80a06ee:	b280      	uxth	r0, r0
 80a06f0:	bd38      	pop	{r3, r4, r5, pc}

080a06f2 <_ZN15Adafruit_MPR1217touchedEv>:
  if (t > 12) return 0;
  uint16_t bl = readRegister8(MPR121_BASELINE_0 + t);
  return (bl << 2);
}

uint16_t  Adafruit_MPR121::touched(void) {
 80a06f2:	b508      	push	{r3, lr}
  uint16_t t = readRegister16(MPR121_TOUCHSTATUS_L);
 80a06f4:	2100      	movs	r1, #0
 80a06f6:	f7ff ffd0 	bl	80a069a <_ZN15Adafruit_MPR12114readRegister16Eh>
  return t & 0x0FFF;
}
 80a06fa:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80a06fe:	bd08      	pop	{r3, pc}

080a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>:
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
 80a0700:	b570      	push	{r4, r5, r6, lr}
 80a0702:	4606      	mov	r6, r0
 80a0704:	4614      	mov	r4, r2
 80a0706:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a0708:	f002 f8b8 	bl	80a287c <_Z19__fetch_global_Wirev>
 80a070c:	f996 1000 	ldrsb.w	r1, [r6]
 80a0710:	f001 fc70 	bl	80a1ff4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 80a0714:	f002 f8b2 	bl	80a287c <_Z19__fetch_global_Wirev>
 80a0718:	6803      	ldr	r3, [r0, #0]
 80a071a:	4629      	mov	r1, r5
 80a071c:	689b      	ldr	r3, [r3, #8]
 80a071e:	4798      	blx	r3
    Wire.write((uint8_t)(value));
 80a0720:	f002 f8ac 	bl	80a287c <_Z19__fetch_global_Wirev>
 80a0724:	6803      	ldr	r3, [r0, #0]
 80a0726:	4621      	mov	r1, r4
 80a0728:	689b      	ldr	r3, [r3, #8]
 80a072a:	4798      	blx	r3
    Wire.endTransmission();
 80a072c:	f002 f8a6 	bl	80a287c <_Z19__fetch_global_Wirev>
}
 80a0730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
    Wire.beginTransmission(_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)(value));
    Wire.endTransmission();
 80a0734:	f001 bc65 	b.w	80a2002 <_ZN7TwoWire15endTransmissionEv>

080a0738 <_ZN15Adafruit_MPR12113setThresholdsEhh>:
void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
 80a0738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a073a:	4605      	mov	r5, r0
 80a073c:	460f      	mov	r7, r1
 80a073e:	4616      	mov	r6, r2
 80a0740:	2441      	movs	r4, #65	; 0x41
  for (uint8_t i=0; i<12; i++) {
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
 80a0742:	4621      	mov	r1, r4
 80a0744:	463a      	mov	r2, r7
 80a0746:	4628      	mov	r0, r5
 80a0748:	f7ff ffda 	bl	80a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
 80a074c:	1c61      	adds	r1, r4, #1
 80a074e:	3402      	adds	r4, #2
 80a0750:	4632      	mov	r2, r6
 80a0752:	b2c9      	uxtb	r1, r1
 80a0754:	4628      	mov	r0, r5
 80a0756:	b2e4      	uxtb	r4, r4
 80a0758:	f7ff ffd2 	bl	80a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
  for (uint8_t i=0; i<12; i++) {
 80a075c:	2c59      	cmp	r4, #89	; 0x59
 80a075e:	d1f0      	bne.n	80a0742 <_ZN15Adafruit_MPR12113setThresholdsEhh+0xa>
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
  }
}
 80a0760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0762 <_ZN15Adafruit_MPR1215beginEh>:
#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
 80a0762:	b538      	push	{r3, r4, r5, lr}
 80a0764:	4604      	mov	r4, r0
 80a0766:	460d      	mov	r5, r1
  Wire.begin();
 80a0768:	f002 f888 	bl	80a287c <_Z19__fetch_global_Wirev>
 80a076c:	f001 fc2a 	bl	80a1fc4 <_ZN7TwoWire5beginEv>
    
  _i2caddr = i2caddr;

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a0770:	2263      	movs	r2, #99	; 0x63
 80a0772:	2180      	movs	r1, #128	; 0x80
 80a0774:	4620      	mov	r0, r4
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
  Wire.begin();
    
  _i2caddr = i2caddr;
 80a0776:	7025      	strb	r5, [r4, #0]

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a0778:	f7ff ffc2 	bl	80a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  delay(1);
 80a077c:	2001      	movs	r0, #1
 80a077e:	f001 fbd7 	bl	80a1f30 <delay>
  //  Serial.print("$"); Serial.print(i, HEX); 
  //  Serial.print(": 0x"); Serial.println(readRegister8(i));
  }
  

  writeRegister(MPR121_ECR, 0x0);
 80a0782:	2200      	movs	r2, #0
 80a0784:	215e      	movs	r1, #94	; 0x5e
 80a0786:	4620      	mov	r0, r4
 80a0788:	f7ff ffba 	bl	80a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  uint8_t c = readRegister8(MPR121_CONFIG2);
 80a078c:	215d      	movs	r1, #93	; 0x5d
 80a078e:	4620      	mov	r0, r4
 80a0790:	f7ff ff5f 	bl	80a0652 <_ZN15Adafruit_MPR12113readRegister8Eh>
  
  if (c != 0x24) return false;
 80a0794:	2824      	cmp	r0, #36	; 0x24
 80a0796:	d151      	bne.n	80a083c <_ZN15Adafruit_MPR1215beginEh+0xda>
  return true;
}

void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
 80a0798:	4620      	mov	r0, r4
 80a079a:	2206      	movs	r2, #6
 80a079c:	210c      	movs	r1, #12
 80a079e:	f7ff ffcb 	bl	80a0738 <_ZN15Adafruit_MPR12113setThresholdsEhh>
  
  if (c != 0x24) return false;


  setThreshholds(12, 6);
  writeRegister(MPR121_MHDR, 0x01);
 80a07a2:	4620      	mov	r0, r4
 80a07a4:	2201      	movs	r2, #1
 80a07a6:	212b      	movs	r1, #43	; 0x2b
 80a07a8:	f7ff ffaa 	bl	80a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDR, 0x01);
 80a07ac:	4620      	mov	r0, r4
 80a07ae:	2201      	movs	r2, #1
 80a07b0:	212c      	movs	r1, #44	; 0x2c
 80a07b2:	f7ff ffa5 	bl	80a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLR, 0x0E);
 80a07b6:	4620      	mov	r0, r4
 80a07b8:	220e      	movs	r2, #14
 80a07ba:	212d      	movs	r1, #45	; 0x2d
 80a07bc:	f7ff ffa0 	bl	80a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLR, 0x00);
 80a07c0:	4620      	mov	r0, r4
 80a07c2:	2200      	movs	r2, #0
 80a07c4:	212e      	movs	r1, #46	; 0x2e
 80a07c6:	f7ff ff9b 	bl	80a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_MHDF, 0x01);
 80a07ca:	4620      	mov	r0, r4
 80a07cc:	2201      	movs	r2, #1
 80a07ce:	212f      	movs	r1, #47	; 0x2f
 80a07d0:	f7ff ff96 	bl	80a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDF, 0x05);
 80a07d4:	4620      	mov	r0, r4
 80a07d6:	2205      	movs	r2, #5
 80a07d8:	2130      	movs	r1, #48	; 0x30
 80a07da:	f7ff ff91 	bl	80a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLF, 0x01);
 80a07de:	4620      	mov	r0, r4
 80a07e0:	2201      	movs	r2, #1
 80a07e2:	2131      	movs	r1, #49	; 0x31
 80a07e4:	f7ff ff8c 	bl	80a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLF, 0x00);
 80a07e8:	4620      	mov	r0, r4
 80a07ea:	2200      	movs	r2, #0
 80a07ec:	2132      	movs	r1, #50	; 0x32
 80a07ee:	f7ff ff87 	bl	80a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_NHDT, 0x00);
 80a07f2:	4620      	mov	r0, r4
 80a07f4:	2200      	movs	r2, #0
 80a07f6:	2133      	movs	r1, #51	; 0x33
 80a07f8:	f7ff ff82 	bl	80a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLT, 0x00);
 80a07fc:	4620      	mov	r0, r4
 80a07fe:	2200      	movs	r2, #0
 80a0800:	2134      	movs	r1, #52	; 0x34
 80a0802:	f7ff ff7d 	bl	80a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLT, 0x00);
 80a0806:	4620      	mov	r0, r4
 80a0808:	2200      	movs	r2, #0
 80a080a:	2135      	movs	r1, #53	; 0x35
 80a080c:	f7ff ff78 	bl	80a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_DEBOUNCE, 0);
 80a0810:	4620      	mov	r0, r4
 80a0812:	2200      	movs	r2, #0
 80a0814:	215b      	movs	r1, #91	; 0x5b
 80a0816:	f7ff ff73 	bl	80a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 80a081a:	4620      	mov	r0, r4
 80a081c:	2210      	movs	r2, #16
 80a081e:	215c      	movs	r1, #92	; 0x5c
 80a0820:	f7ff ff6e 	bl	80a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 80a0824:	4620      	mov	r0, r4
 80a0826:	2220      	movs	r2, #32
 80a0828:	215d      	movs	r1, #93	; 0x5d
 80a082a:	f7ff ff69 	bl	80a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>

//  writeRegister(MPR121_UPLIMIT, 150);
//  writeRegister(MPR121_TARGETLIMIT, 100); // should be ~400 (100 shifted)
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking
 80a082e:	4620      	mov	r0, r4
 80a0830:	228f      	movs	r2, #143	; 0x8f
 80a0832:	215e      	movs	r1, #94	; 0x5e
 80a0834:	f7ff ff64 	bl	80a0700 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  return true;
 80a0838:	2001      	movs	r0, #1
 80a083a:	bd38      	pop	{r3, r4, r5, pc}

  writeRegister(MPR121_ECR, 0x0);

  uint8_t c = readRegister8(MPR121_CONFIG2);
  
  if (c != 0x24) return false;
 80a083c:	2000      	movs	r0, #0
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking

  return true;
}
 80a083e:	bd38      	pop	{r3, r4, r5, pc}

080a0840 <_GLOBAL__sub_I__ZN15Adafruit_MPR121C2Ev>:
 80a0840:	f001 b9d0 	b.w	80a1be4 <HAL_Pin_Map>

080a0844 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a0844:	f001 b9ce 	b.w	80a1be4 <HAL_Pin_Map>

080a0848 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
 80a0848:	f001 b9cc 	b.w	80a1be4 <HAL_Pin_Map>

080a084c <_GLOBAL__sub_I__ZN7MPU9250C2Ev>:
 80a084c:	f001 b9ca 	b.w	80a1be4 <HAL_Pin_Map>

080a0850 <_GLOBAL__sub_I__ZN7MPU92507getMresEv>:
 80a0850:	f001 b9c8 	b.w	80a1be4 <HAL_Pin_Map>

080a0854 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff>:
  q[1] = q2 * norm;
  q[2] = q3 * norm;
  q[3] = q4 * norm;
}

const float * getQ () { return q; }
 80a0854:	b508      	push	{r3, lr}
 80a0856:	f001 f9c5 	bl	80a1be4 <HAL_Pin_Map>
// noticed any reduction in solution accuracy. This is essentially the I
// coefficient in a PID control sense; the bigger the feedback coefficient,
// the faster the solution converges, usually at the expense of accuracy.
// In any case, this is the free parameter in the Madgwick filtering and
// fusion scheme.
static float beta = sqrt(3.0f / 4.0f) * GyroMeasError;   // Compute beta
 80a085a:	4a02      	ldr	r2, [pc, #8]	; (80a0864 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x10>)
 80a085c:	4b02      	ldr	r3, [pc, #8]	; (80a0868 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x14>)
 80a085e:	601a      	str	r2, [r3, #0]
 80a0860:	bd08      	pop	{r3, pc}
 80a0862:	bf00      	nop
 80a0864:	3f1ac70d 	.word	0x3f1ac70d
 80a0868:	200001e8 	.word	0x200001e8

080a086c <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a086c:	f001 b9aa 	b.w	80a1bc4 <HAL_Timer_Get_Micro_Seconds>

080a0870 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0870:	b510      	push	{r4, lr}
 80a0872:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0874:	68c0      	ldr	r0, [r0, #12]
 80a0876:	b108      	cbz	r0, 80a087c <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a0878:	f001 fb52 	bl	80a1f20 <free>
  if (begun) pinMode(pin, INPUT);
 80a087c:	7823      	ldrb	r3, [r4, #0]
 80a087e:	b11b      	cbz	r3, 80a0888 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0880:	2100      	movs	r1, #0
 80a0882:	79e0      	ldrb	r0, [r4, #7]
 80a0884:	f001 ffd0 	bl	80a2828 <pinMode>
}
 80a0888:	4620      	mov	r0, r4
 80a088a:	bd10      	pop	{r4, pc}

080a088c <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a088c:	b538      	push	{r3, r4, r5, lr}
 80a088e:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0890:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0892:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0894:	b108      	cbz	r0, 80a089a <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a0896:	f001 fb43 	bl	80a1f20 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a089a:	79a3      	ldrb	r3, [r4, #6]
 80a089c:	2b06      	cmp	r3, #6
 80a089e:	bf0c      	ite	eq
 80a08a0:	2004      	moveq	r0, #4
 80a08a2:	2003      	movne	r0, #3
 80a08a4:	4368      	muls	r0, r5
 80a08a6:	b280      	uxth	r0, r0
 80a08a8:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a08aa:	f001 fb31 	bl	80a1f10 <malloc>
 80a08ae:	60e0      	str	r0, [r4, #12]
 80a08b0:	b128      	cbz	r0, 80a08be <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a08b2:	88a2      	ldrh	r2, [r4, #4]
 80a08b4:	2100      	movs	r1, #0
 80a08b6:	f002 f9a4 	bl	80a2c02 <memset>
    numLEDs = n;
 80a08ba:	8065      	strh	r5, [r4, #2]
 80a08bc:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a08be:	80a0      	strh	r0, [r4, #4]
 80a08c0:	8060      	strh	r0, [r4, #2]
 80a08c2:	bd38      	pop	{r3, r4, r5, pc}

080a08c4 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a08c4:	b510      	push	{r4, lr}
 80a08c6:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a08c8:	2101      	movs	r1, #1
 80a08ca:	79c0      	ldrb	r0, [r0, #7]
 80a08cc:	f001 ffac 	bl	80a2828 <pinMode>
  digitalWrite(pin, LOW);
 80a08d0:	2100      	movs	r1, #0
 80a08d2:	79e0      	ldrb	r0, [r4, #7]
 80a08d4:	f001 ffb9 	bl	80a284a <digitalWrite>
  begun = true;
 80a08d8:	2301      	movs	r3, #1
 80a08da:	7023      	strb	r3, [r4, #0]
 80a08dc:	bd10      	pop	{r4, pc}

080a08de <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a08de:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a08e0:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a08e2:	4605      	mov	r5, r0
 80a08e4:	460c      	mov	r4, r1
    if (begun) {
 80a08e6:	b11b      	cbz	r3, 80a08f0 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a08e8:	2100      	movs	r1, #0
 80a08ea:	79c0      	ldrb	r0, [r0, #7]
 80a08ec:	f001 ff9c 	bl	80a2828 <pinMode>
    }
    pin = p;
    if (begun) {
 80a08f0:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a08f2:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a08f4:	b153      	cbz	r3, 80a090c <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a08f6:	b2a4      	uxth	r4, r4
 80a08f8:	4620      	mov	r0, r4
 80a08fa:	2101      	movs	r1, #1
 80a08fc:	f001 ff94 	bl	80a2828 <pinMode>
        digitalWrite(p, LOW);
 80a0900:	4620      	mov	r0, r4
    }
}
 80a0902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a0906:	2100      	movs	r1, #0
 80a0908:	f001 bf9f 	b.w	80a284a <digitalWrite>
 80a090c:	bd38      	pop	{r3, r4, r5, pc}

080a090e <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a090e:	b570      	push	{r4, r5, r6, lr}
 80a0910:	4604      	mov	r4, r0
 80a0912:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0914:	2500      	movs	r5, #0
 80a0916:	7183      	strb	r3, [r0, #6]
 80a0918:	7005      	strb	r5, [r0, #0]
 80a091a:	7205      	strb	r5, [r0, #8]
 80a091c:	60c5      	str	r5, [r0, #12]
 80a091e:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a0920:	f7ff ffb4 	bl	80a088c <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0924:	4620      	mov	r0, r4
 80a0926:	4631      	mov	r1, r6
 80a0928:	f7ff ffd9 	bl	80a08de <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a092c:	4620      	mov	r0, r4
 80a092e:	bd70      	pop	{r4, r5, r6, pc}

080a0930 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0930:	68c3      	ldr	r3, [r0, #12]
 80a0932:	2b00      	cmp	r3, #0
 80a0934:	f000 858e 	beq.w	80a1454 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a0938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a093c:	4604      	mov	r4, r0
 80a093e:	7983      	ldrb	r3, [r0, #6]
 80a0940:	b086      	sub	sp, #24
 80a0942:	3b02      	subs	r3, #2
 80a0944:	b2db      	uxtb	r3, r3
 80a0946:	2b04      	cmp	r3, #4
 80a0948:	bf96      	itet	ls
 80a094a:	4a29      	ldrls	r2, [pc, #164]	; (80a09f0 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a094c:	2532      	movhi	r5, #50	; 0x32
 80a094e:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0952:	f7ff ff8b 	bl	80a086c <micros>
 80a0956:	6923      	ldr	r3, [r4, #16]
 80a0958:	1ac0      	subs	r0, r0, r3
 80a095a:	42a8      	cmp	r0, r5
 80a095c:	d3f9      	bcc.n	80a0952 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a095e:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0960:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0962:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0964:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0966:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a096a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a096e:	f000 8272 	beq.w	80a0e56 <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a0972:	2907      	cmp	r1, #7
 80a0974:	f000 826f 	beq.w	80a0e56 <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0978:	2906      	cmp	r1, #6
 80a097a:	f000 8432 	beq.w	80a11e2 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a097e:	2905      	cmp	r1, #5
 80a0980:	f000 83ab 	beq.w	80a10da <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0984:	2908      	cmp	r1, #8
 80a0986:	f000 83a8 	beq.w	80a10da <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a098a:	2900      	cmp	r1, #0
 80a098c:	f040 8563 	bne.w	80a1456 <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a0990:	4a18      	ldr	r2, [pc, #96]	; (80a09f4 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0992:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0996:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a099a:	b29b      	uxth	r3, r3
 80a099c:	2b00      	cmp	r3, #0
 80a099e:	f000 8395 	beq.w	80a10cc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a09a2:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a09a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a09a8:	f10e 0503 	add.w	r5, lr, #3
 80a09ac:	3b03      	subs	r3, #3
 80a09ae:	b29b      	uxth	r3, r3
 80a09b0:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a09b4:	f89e 3000 	ldrb.w	r3, [lr]
 80a09b8:	b2db      	uxtb	r3, r3
 80a09ba:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a09be:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a09c2:	b2db      	uxtb	r3, r3
 80a09c4:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a09c8:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a09cc:	b2db      	uxtb	r3, r3
 80a09ce:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a09d2:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a09d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a09da:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a09de:	021b      	lsls	r3, r3, #8
 80a09e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a09e4:	4303      	orrs	r3, r0
 80a09e6:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a09e8:	f88d 1005 	strb.w	r1, [sp, #5]
 80a09ec:	e11b      	b.n	80a0c26 <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a09ee:	bf00      	nop
 80a09f0:	080a2ccc 	.word	0x080a2ccc
 80a09f4:	200001ec 	.word	0x200001ec
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a09f8:	4600      	mov	r0, r0
 80a09fa:	bf00      	nop
 80a09fc:	bf00      	nop
 80a09fe:	bf00      	nop
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
 80a0a04:	bf00      	nop
 80a0a06:	bf00      	nop
 80a0a08:	bf00      	nop
 80a0a0a:	bf00      	nop
 80a0a0c:	bf00      	nop
 80a0a0e:	bf00      	nop
 80a0a10:	bf00      	nop
 80a0a12:	bf00      	nop
 80a0a14:	bf00      	nop
 80a0a16:	bf00      	nop
 80a0a18:	bf00      	nop
 80a0a1a:	bf00      	nop
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
 80a0a26:	bf00      	nop
 80a0a28:	bf00      	nop
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
 80a0a66:	bf00      	nop
 80a0a68:	bf00      	nop
 80a0a6a:	bf00      	nop
 80a0a6c:	bf00      	nop
 80a0a6e:	bf00      	nop
 80a0a70:	bf00      	nop
 80a0a72:	bf00      	nop
 80a0a74:	bf00      	nop
 80a0a76:	bf00      	nop
 80a0a78:	bf00      	nop
 80a0a7a:	bf00      	nop
 80a0a7c:	bf00      	nop
 80a0a7e:	bf00      	nop
 80a0a80:	bf00      	nop
 80a0a82:	bf00      	nop
 80a0a84:	bf00      	nop
 80a0a86:	bf00      	nop
 80a0a88:	bf00      	nop
 80a0a8a:	bf00      	nop
 80a0a8c:	bf00      	nop
 80a0a8e:	bf00      	nop
 80a0a90:	bf00      	nop
 80a0a92:	bf00      	nop
 80a0a94:	bf00      	nop
 80a0a96:	bf00      	nop
 80a0a98:	bf00      	nop
 80a0a9a:	bf00      	nop
 80a0a9c:	bf00      	nop
 80a0a9e:	bf00      	nop
 80a0aa0:	bf00      	nop
 80a0aa2:	bf00      	nop
 80a0aa4:	bf00      	nop
 80a0aa6:	bf00      	nop
 80a0aa8:	bf00      	nop
 80a0aaa:	bf00      	nop
 80a0aac:	bf00      	nop
 80a0aae:	bf00      	nop
 80a0ab0:	bf00      	nop
 80a0ab2:	bf00      	nop
 80a0ab4:	bf00      	nop
 80a0ab6:	bf00      	nop
 80a0ab8:	bf00      	nop
 80a0aba:	bf00      	nop
 80a0abc:	bf00      	nop
 80a0abe:	bf00      	nop
 80a0ac0:	bf00      	nop
 80a0ac2:	bf00      	nop
 80a0ac4:	bf00      	nop
 80a0ac6:	bf00      	nop
 80a0ac8:	bf00      	nop
 80a0aca:	bf00      	nop
 80a0acc:	bf00      	nop
 80a0ace:	bf00      	nop
 80a0ad0:	bf00      	nop
 80a0ad2:	bf00      	nop
 80a0ad4:	bf00      	nop
 80a0ad6:	bf00      	nop
 80a0ad8:	bf00      	nop
 80a0ada:	bf00      	nop
 80a0adc:	bf00      	nop
 80a0ade:	bf00      	nop
 80a0ae0:	bf00      	nop
 80a0ae2:	bf00      	nop
 80a0ae4:	bf00      	nop
 80a0ae6:	bf00      	nop
 80a0ae8:	bf00      	nop
 80a0aea:	bf00      	nop
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0b00:	79e3      	ldrb	r3, [r4, #7]
 80a0b02:	6810      	ldr	r0, [r2, #0]
 80a0b04:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0b08:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0b0c:	88bf      	ldrh	r7, [r7, #4]
 80a0b0e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0b12:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0b14:	4600      	mov	r0, r0
 80a0b16:	bf00      	nop
 80a0b18:	bf00      	nop
 80a0b1a:	bf00      	nop
 80a0b1c:	bf00      	nop
 80a0b1e:	bf00      	nop
 80a0b20:	bf00      	nop
 80a0b22:	bf00      	nop
 80a0b24:	bf00      	nop
 80a0b26:	bf00      	nop
 80a0b28:	bf00      	nop
 80a0b2a:	bf00      	nop
 80a0b2c:	bf00      	nop
 80a0b2e:	bf00      	nop
 80a0b30:	bf00      	nop
 80a0b32:	bf00      	nop
 80a0b34:	bf00      	nop
 80a0b36:	bf00      	nop
 80a0b38:	bf00      	nop
 80a0b3a:	bf00      	nop
 80a0b3c:	bf00      	nop
 80a0b3e:	bf00      	nop
 80a0b40:	bf00      	nop
 80a0b42:	bf00      	nop
 80a0b44:	bf00      	nop
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
 80a0b7a:	bf00      	nop
 80a0b7c:	bf00      	nop
 80a0b7e:	bf00      	nop
 80a0b80:	bf00      	nop
 80a0b82:	bf00      	nop
 80a0b84:	bf00      	nop
 80a0b86:	bf00      	nop
 80a0b88:	bf00      	nop
 80a0b8a:	bf00      	nop
 80a0b8c:	bf00      	nop
 80a0b8e:	bf00      	nop
 80a0b90:	bf00      	nop
 80a0b92:	bf00      	nop
 80a0b94:	bf00      	nop
 80a0b96:	bf00      	nop
 80a0b98:	bf00      	nop
 80a0b9a:	bf00      	nop
 80a0b9c:	bf00      	nop
 80a0b9e:	bf00      	nop
 80a0ba0:	bf00      	nop
 80a0ba2:	bf00      	nop
 80a0ba4:	bf00      	nop
 80a0ba6:	bf00      	nop
 80a0ba8:	bf00      	nop
 80a0baa:	bf00      	nop
 80a0bac:	bf00      	nop
 80a0bae:	bf00      	nop
 80a0bb0:	bf00      	nop
 80a0bb2:	bf00      	nop
 80a0bb4:	bf00      	nop
 80a0bb6:	bf00      	nop
 80a0bb8:	bf00      	nop
 80a0bba:	bf00      	nop
 80a0bbc:	bf00      	nop
 80a0bbe:	bf00      	nop
 80a0bc0:	bf00      	nop
 80a0bc2:	bf00      	nop
 80a0bc4:	bf00      	nop
 80a0bc6:	bf00      	nop
 80a0bc8:	bf00      	nop
 80a0bca:	bf00      	nop
 80a0bcc:	bf00      	nop
 80a0bce:	bf00      	nop
 80a0bd0:	bf00      	nop
 80a0bd2:	bf00      	nop
 80a0bd4:	bf00      	nop
 80a0bd6:	bf00      	nop
 80a0bd8:	bf00      	nop
 80a0bda:	bf00      	nop
 80a0bdc:	bf00      	nop
 80a0bde:	bf00      	nop
 80a0be0:	bf00      	nop
 80a0be2:	bf00      	nop
 80a0be4:	bf00      	nop
 80a0be6:	bf00      	nop
 80a0be8:	bf00      	nop
 80a0bea:	bf00      	nop
 80a0bec:	bf00      	nop
 80a0bee:	bf00      	nop
 80a0bf0:	bf00      	nop
 80a0bf2:	bf00      	nop
 80a0bf4:	bf00      	nop
 80a0bf6:	bf00      	nop
 80a0bf8:	bf00      	nop
 80a0bfa:	bf00      	nop
 80a0bfc:	bf00      	nop
 80a0bfe:	bf00      	nop
 80a0c00:	bf00      	nop
 80a0c02:	bf00      	nop
 80a0c04:	bf00      	nop
 80a0c06:	bf00      	nop
 80a0c08:	bf00      	nop
 80a0c0a:	bf00      	nop
 80a0c0c:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0c0e:	9b04      	ldr	r3, [sp, #16]
 80a0c10:	085b      	lsrs	r3, r3, #1
 80a0c12:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0c14:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0c18:	3301      	adds	r3, #1
 80a0c1a:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0c1c:	2b17      	cmp	r3, #23
 80a0c1e:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0c22:	f200 82db 	bhi.w	80a11dc <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a0c26:	79e3      	ldrb	r3, [r4, #7]
 80a0c28:	6810      	ldr	r0, [r2, #0]
 80a0c2a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c2e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c32:	88bf      	ldrh	r7, [r7, #4]
 80a0c34:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c38:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0c3a:	9803      	ldr	r0, [sp, #12]
 80a0c3c:	9b04      	ldr	r3, [sp, #16]
 80a0c3e:	4218      	tst	r0, r3
 80a0c40:	f47f aeda 	bne.w	80a09f8 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0c44:	4600      	mov	r0, r0
 80a0c46:	bf00      	nop
 80a0c48:	bf00      	nop
 80a0c4a:	bf00      	nop
 80a0c4c:	bf00      	nop
 80a0c4e:	bf00      	nop
 80a0c50:	bf00      	nop
 80a0c52:	bf00      	nop
 80a0c54:	bf00      	nop
 80a0c56:	bf00      	nop
 80a0c58:	bf00      	nop
 80a0c5a:	bf00      	nop
 80a0c5c:	bf00      	nop
 80a0c5e:	bf00      	nop
 80a0c60:	bf00      	nop
 80a0c62:	bf00      	nop
 80a0c64:	bf00      	nop
 80a0c66:	bf00      	nop
 80a0c68:	bf00      	nop
 80a0c6a:	bf00      	nop
 80a0c6c:	bf00      	nop
 80a0c6e:	bf00      	nop
 80a0c70:	bf00      	nop
 80a0c72:	bf00      	nop
 80a0c74:	bf00      	nop
 80a0c76:	bf00      	nop
 80a0c78:	bf00      	nop
 80a0c7a:	bf00      	nop
 80a0c7c:	bf00      	nop
 80a0c7e:	bf00      	nop
 80a0c80:	bf00      	nop
 80a0c82:	bf00      	nop
 80a0c84:	bf00      	nop
 80a0c86:	bf00      	nop
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
 80a0c8c:	bf00      	nop
 80a0c8e:	bf00      	nop
 80a0c90:	bf00      	nop
 80a0c92:	bf00      	nop
 80a0c94:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a0c96:	79e3      	ldrb	r3, [r4, #7]
 80a0c98:	6810      	ldr	r0, [r2, #0]
 80a0c9a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c9e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0ca2:	88bf      	ldrh	r7, [r7, #4]
 80a0ca4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0ca8:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0caa:	4600      	mov	r0, r0
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	bf00      	nop
 80a0d00:	bf00      	nop
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
 80a0d0e:	bf00      	nop
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
 80a0e24:	bf00      	nop
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
 80a0e54:	e6db      	b.n	80a0c0e <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0e56:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0e5a:	4a17      	ldr	r2, [pc, #92]	; (80a0eb8 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a0e5c:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a0e5e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0e62:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0e64:	2b00      	cmp	r3, #0
 80a0e66:	f000 8131 	beq.w	80a10cc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0e6a:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0e6c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0e70:	f10e 0103 	add.w	r1, lr, #3
 80a0e74:	3b03      	subs	r3, #3
 80a0e76:	b29b      	uxth	r3, r3
 80a0e78:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0e7c:	f89e 3000 	ldrb.w	r3, [lr]
 80a0e80:	b2db      	uxtb	r3, r3
 80a0e82:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0e86:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0e8a:	b2db      	uxtb	r3, r3
 80a0e8c:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0e90:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0e94:	b2db      	uxtb	r3, r3
 80a0e96:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0e9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0e9e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a0ea2:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a0ea6:	0200      	lsls	r0, r0, #8
 80a0ea8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a0eac:	433b      	orrs	r3, r7
 80a0eae:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0eb0:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0eb4:	e080      	b.n	80a0fb8 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a0eb6:	bf00      	nop
 80a0eb8:	200001ec 	.word	0x200001ec
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ebc:	4600      	mov	r0, r0
 80a0ebe:	bf00      	nop
 80a0ec0:	bf00      	nop
 80a0ec2:	bf00      	nop
 80a0ec4:	bf00      	nop
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a0f56:	79e3      	ldrb	r3, [r4, #7]
 80a0f58:	6810      	ldr	r0, [r2, #0]
 80a0f5a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0f5e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0f62:	88bf      	ldrh	r7, [r7, #4]
 80a0f64:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f68:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f6a:	4600      	mov	r0, r0
 80a0f6c:	bf00      	nop
 80a0f6e:	bf00      	nop
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
 80a0f76:	bf00      	nop
 80a0f78:	bf00      	nop
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
 80a0f86:	bf00      	nop
 80a0f88:	bf00      	nop
 80a0f8a:	bf00      	nop
 80a0f8c:	bf00      	nop
 80a0f8e:	bf00      	nop
 80a0f90:	bf00      	nop
 80a0f92:	bf00      	nop
 80a0f94:	bf00      	nop
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0fa0:	9b04      	ldr	r3, [sp, #16]
 80a0fa2:	085b      	lsrs	r3, r3, #1
 80a0fa4:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0fa6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0faa:	3301      	adds	r3, #1
 80a0fac:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0fae:	2b17      	cmp	r3, #23
 80a0fb0:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0fb4:	f200 8083 	bhi.w	80a10be <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a0fb8:	79e3      	ldrb	r3, [r4, #7]
 80a0fba:	6810      	ldr	r0, [r2, #0]
 80a0fbc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0fc0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0fc4:	88bf      	ldrh	r7, [r7, #4]
 80a0fc6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0fca:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0fcc:	9803      	ldr	r0, [sp, #12]
 80a0fce:	9b04      	ldr	r3, [sp, #16]
 80a0fd0:	4218      	tst	r0, r3
 80a0fd2:	f47f af73 	bne.w	80a0ebc <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0fd6:	4600      	mov	r0, r0
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a0ffe:	79e3      	ldrb	r3, [r4, #7]
 80a1000:	6810      	ldr	r0, [r2, #0]
 80a1002:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1006:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a100a:	88bf      	ldrh	r7, [r7, #4]
 80a100c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1010:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1012:	4600      	mov	r0, r0
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	e770      	b.n	80a0fa0 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a10be:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a10c2:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a10c4:	b29b      	uxth	r3, r3
 80a10c6:	2b00      	cmp	r3, #0
 80a10c8:	f47f aecf 	bne.w	80a0e6a <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a10cc:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a10ce:	f7ff fbcd 	bl	80a086c <micros>
 80a10d2:	6120      	str	r0, [r4, #16]
}
 80a10d4:	b006      	add	sp, #24
 80a10d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a10da:	4b5e      	ldr	r3, [pc, #376]	; (80a1254 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a10dc:	4a5e      	ldr	r2, [pc, #376]	; (80a1258 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a10de:	4618      	mov	r0, r3
 80a10e0:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a10e2:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a10e6:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a10e8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a10ec:	b292      	uxth	r2, r2
 80a10ee:	2a00      	cmp	r2, #0
 80a10f0:	d0ec      	beq.n	80a10cc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a10f2:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a10f6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a10fa:	f10e 0503 	add.w	r5, lr, #3
 80a10fe:	3a03      	subs	r2, #3
 80a1100:	b292      	uxth	r2, r2
 80a1102:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a1106:	f89e 2000 	ldrb.w	r2, [lr]
 80a110a:	b2d2      	uxtb	r2, r2
 80a110c:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a1110:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a1114:	b2d2      	uxtb	r2, r2
 80a1116:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a111a:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a111e:	b2d2      	uxtb	r2, r2
 80a1120:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1124:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a1128:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a112c:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a1130:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a1134:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a1138:	ea42 020c 	orr.w	r2, r2, ip
 80a113c:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a113e:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a1142:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1144:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a1146:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a114a:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a114e:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1152:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1156:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a1158:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a115c:	9e03      	ldr	r6, [sp, #12]
 80a115e:	9a04      	ldr	r2, [sp, #16]
 80a1160:	4216      	tst	r6, r2
 80a1162:	d023      	beq.n	80a11ac <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1164:	685a      	ldr	r2, [r3, #4]
 80a1166:	9e05      	ldr	r6, [sp, #20]
 80a1168:	1b92      	subs	r2, r2, r6
 80a116a:	2a4f      	cmp	r2, #79	; 0x4f
 80a116c:	d9fa      	bls.n	80a1164 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a116e:	79e2      	ldrb	r2, [r4, #7]
 80a1170:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1174:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1178:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a117c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1180:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1184:	6842      	ldr	r2, [r0, #4]
 80a1186:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a1188:	685a      	ldr	r2, [r3, #4]
 80a118a:	9e05      	ldr	r6, [sp, #20]
 80a118c:	1b92      	subs	r2, r2, r6
 80a118e:	2a07      	cmp	r2, #7
 80a1190:	d9fa      	bls.n	80a1188 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a1192:	9a04      	ldr	r2, [sp, #16]
 80a1194:	0852      	lsrs	r2, r2, #1
 80a1196:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1198:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a119c:	3201      	adds	r2, #1
 80a119e:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a11a0:	2a17      	cmp	r2, #23
 80a11a2:	f88d 2005 	strb.w	r2, [sp, #5]
 80a11a6:	d9cc      	bls.n	80a1142 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a11a8:	46ae      	mov	lr, r5
 80a11aa:	e79d      	b.n	80a10e8 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a11ac:	685a      	ldr	r2, [r3, #4]
 80a11ae:	9e05      	ldr	r6, [sp, #20]
 80a11b0:	1b92      	subs	r2, r2, r6
 80a11b2:	2a18      	cmp	r2, #24
 80a11b4:	d9fa      	bls.n	80a11ac <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a11b6:	79e2      	ldrb	r2, [r4, #7]
 80a11b8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a11bc:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a11c0:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a11c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a11c8:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a11cc:	6842      	ldr	r2, [r0, #4]
 80a11ce:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a11d0:	685a      	ldr	r2, [r3, #4]
 80a11d2:	9e05      	ldr	r6, [sp, #20]
 80a11d4:	1b92      	subs	r2, r2, r6
 80a11d6:	2a45      	cmp	r2, #69	; 0x45
 80a11d8:	d9fa      	bls.n	80a11d0 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a11da:	e7da      	b.n	80a1192 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a11dc:	46ae      	mov	lr, r5
 80a11de:	f7ff bbda 	b.w	80a0996 <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a11e2:	4a1d      	ldr	r2, [pc, #116]	; (80a1258 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a11e4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a11e8:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a11ea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a11ee:	b29b      	uxth	r3, r3
 80a11f0:	2b00      	cmp	r3, #0
 80a11f2:	f43f af6b 	beq.w	80a10cc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a11f6:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a11f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a11fc:	f10e 0104 	add.w	r1, lr, #4
 80a1200:	3b04      	subs	r3, #4
 80a1202:	b29b      	uxth	r3, r3
 80a1204:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1208:	f89e 3000 	ldrb.w	r3, [lr]
 80a120c:	b2db      	uxtb	r3, r3
 80a120e:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a1212:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1216:	b2db      	uxtb	r3, r3
 80a1218:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a121c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1220:	b2db      	uxtb	r3, r3
 80a1222:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a1226:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a122a:	b2db      	uxtb	r3, r3
 80a122c:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a1230:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a1234:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a1238:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a123c:	043f      	lsls	r7, r7, #16
 80a123e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a1242:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a1246:	4303      	orrs	r3, r0
 80a1248:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a124c:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a124e:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1252:	e07e      	b.n	80a1352 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a1254:	e0001000 	.word	0xe0001000
 80a1258:	200001ec 	.word	0x200001ec
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a125c:	4600      	mov	r0, r0
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a12ca:	79e3      	ldrb	r3, [r4, #7]
 80a12cc:	6810      	ldr	r0, [r2, #0]
 80a12ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a12d2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a12d6:	88bf      	ldrh	r7, [r7, #4]
 80a12d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a12dc:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a12de:	4600      	mov	r0, r0
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a133c:	9b04      	ldr	r3, [sp, #16]
 80a133e:	085b      	lsrs	r3, r3, #1
 80a1340:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a1342:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1346:	3301      	adds	r3, #1
 80a1348:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a134a:	2b1f      	cmp	r3, #31
 80a134c:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1350:	d87e      	bhi.n	80a1450 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a1352:	79e3      	ldrb	r3, [r4, #7]
 80a1354:	6810      	ldr	r0, [r2, #0]
 80a1356:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a135a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a135e:	88bf      	ldrh	r7, [r7, #4]
 80a1360:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1364:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1366:	9803      	ldr	r0, [sp, #12]
 80a1368:	9b04      	ldr	r3, [sp, #16]
 80a136a:	4218      	tst	r0, r3
 80a136c:	f47f af76 	bne.w	80a125c <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1370:	4600      	mov	r0, r0
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a1398:	79e3      	ldrb	r3, [r4, #7]
 80a139a:	6810      	ldr	r0, [r2, #0]
 80a139c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a13a0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a13a4:	88bf      	ldrh	r7, [r7, #4]
 80a13a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a13aa:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a13ac:	4600      	mov	r0, r0
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	e775      	b.n	80a133c <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a1450:	468e      	mov	lr, r1
 80a1452:	e6ca      	b.n	80a11ea <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a1454:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a1456:	2903      	cmp	r1, #3
 80a1458:	f000 812e 	beq.w	80a16b8 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a145c:	4a1e      	ldr	r2, [pc, #120]	; (80a14d8 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a145e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1462:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1464:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1468:	b29b      	uxth	r3, r3
 80a146a:	2b00      	cmp	r3, #0
 80a146c:	f43f ae2e 	beq.w	80a10cc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1470:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1472:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1476:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a1478:	3b03      	subs	r3, #3
 80a147a:	b29b      	uxth	r3, r3
 80a147c:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1480:	f89e 3000 	ldrb.w	r3, [lr]
 80a1484:	f10e 0103 	add.w	r1, lr, #3
 80a1488:	b2db      	uxtb	r3, r3
 80a148a:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a148e:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1492:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1496:	b2db      	uxtb	r3, r3
 80a1498:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a149c:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a14a0:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a14a4:	b2db      	uxtb	r3, r3
 80a14a6:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a14aa:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a14ae:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a14b2:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a14b6:	021b      	lsls	r3, r3, #8
 80a14b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a14bc:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a14c0:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a14c4:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a14c8:	433b      	orrs	r3, r7
 80a14ca:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a14cc:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a14d0:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a14d4:	e07d      	b.n	80a15d2 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a14d6:	bf00      	nop
 80a14d8:	200001ec 	.word	0x200001ec
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a14dc:	9b04      	ldr	r3, [sp, #16]
 80a14de:	085b      	lsrs	r3, r3, #1
 80a14e0:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a14e2:	4600      	mov	r0, r0
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	bf00      	nop
 80a1508:	bf00      	nop
 80a150a:	bf00      	nop
 80a150c:	bf00      	nop
 80a150e:	bf00      	nop
 80a1510:	bf00      	nop
 80a1512:	bf00      	nop
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	bf00      	nop
 80a155c:	bf00      	nop
 80a155e:	bf00      	nop
 80a1560:	bf00      	nop
 80a1562:	bf00      	nop
 80a1564:	bf00      	nop
 80a1566:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1568:	79e0      	ldrb	r0, [r4, #7]
 80a156a:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a156c:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1570:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1574:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a1578:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a157c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1580:	3301      	adds	r3, #1
 80a1582:	b2db      	uxtb	r3, r3
 80a1584:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1588:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a158c:	4600      	mov	r0, r0
 80a158e:	bf00      	nop
 80a1590:	bf00      	nop
 80a1592:	bf00      	nop
 80a1594:	bf00      	nop
 80a1596:	bf00      	nop
 80a1598:	bf00      	nop
 80a159a:	bf00      	nop
 80a159c:	bf00      	nop
 80a159e:	bf00      	nop
 80a15a0:	bf00      	nop
 80a15a2:	bf00      	nop
 80a15a4:	bf00      	nop
 80a15a6:	bf00      	nop
 80a15a8:	bf00      	nop
 80a15aa:	bf00      	nop
 80a15ac:	bf00      	nop
 80a15ae:	bf00      	nop
 80a15b0:	bf00      	nop
 80a15b2:	bf00      	nop
 80a15b4:	bf00      	nop
          if(j==24) break;
 80a15b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a15ba:	2b18      	cmp	r3, #24
 80a15bc:	d07a      	beq.n	80a16b4 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a15be:	79e3      	ldrb	r3, [r4, #7]
 80a15c0:	6810      	ldr	r0, [r2, #0]
 80a15c2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a15c6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a15ca:	88bf      	ldrh	r7, [r7, #4]
 80a15cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a15d0:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a15d2:	9803      	ldr	r0, [sp, #12]
 80a15d4:	9b04      	ldr	r3, [sp, #16]
 80a15d6:	4218      	tst	r0, r3
 80a15d8:	d180      	bne.n	80a14dc <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a15da:	4600      	mov	r0, r0
 80a15dc:	bf00      	nop
 80a15de:	bf00      	nop
 80a15e0:	bf00      	nop
 80a15e2:	bf00      	nop
 80a15e4:	bf00      	nop
 80a15e6:	bf00      	nop
 80a15e8:	bf00      	nop
 80a15ea:	bf00      	nop
 80a15ec:	bf00      	nop
 80a15ee:	bf00      	nop
 80a15f0:	bf00      	nop
 80a15f2:	bf00      	nop
 80a15f4:	bf00      	nop
 80a15f6:	bf00      	nop
 80a15f8:	bf00      	nop
 80a15fa:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a15fc:	79e3      	ldrb	r3, [r4, #7]
 80a15fe:	6810      	ldr	r0, [r2, #0]
 80a1600:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1604:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1608:	88bf      	ldrh	r7, [r7, #4]
 80a160a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a160e:	831f      	strh	r7, [r3, #24]
          j++;
 80a1610:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1614:	3301      	adds	r3, #1
 80a1616:	b2db      	uxtb	r3, r3
 80a1618:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a161c:	9b04      	ldr	r3, [sp, #16]
 80a161e:	085b      	lsrs	r3, r3, #1
 80a1620:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1622:	4600      	mov	r0, r0
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
 80a162c:	bf00      	nop
 80a162e:	bf00      	nop
 80a1630:	bf00      	nop
 80a1632:	bf00      	nop
 80a1634:	bf00      	nop
 80a1636:	bf00      	nop
 80a1638:	bf00      	nop
 80a163a:	bf00      	nop
 80a163c:	bf00      	nop
 80a163e:	bf00      	nop
 80a1640:	bf00      	nop
 80a1642:	bf00      	nop
 80a1644:	bf00      	nop
 80a1646:	bf00      	nop
 80a1648:	bf00      	nop
 80a164a:	bf00      	nop
 80a164c:	bf00      	nop
 80a164e:	bf00      	nop
 80a1650:	bf00      	nop
 80a1652:	bf00      	nop
 80a1654:	bf00      	nop
 80a1656:	bf00      	nop
 80a1658:	bf00      	nop
 80a165a:	bf00      	nop
 80a165c:	bf00      	nop
 80a165e:	bf00      	nop
 80a1660:	bf00      	nop
 80a1662:	bf00      	nop
 80a1664:	bf00      	nop
 80a1666:	bf00      	nop
 80a1668:	bf00      	nop
 80a166a:	bf00      	nop
 80a166c:	bf00      	nop
 80a166e:	bf00      	nop
 80a1670:	bf00      	nop
 80a1672:	bf00      	nop
 80a1674:	bf00      	nop
 80a1676:	bf00      	nop
 80a1678:	bf00      	nop
 80a167a:	bf00      	nop
 80a167c:	bf00      	nop
 80a167e:	bf00      	nop
 80a1680:	bf00      	nop
 80a1682:	bf00      	nop
 80a1684:	bf00      	nop
 80a1686:	bf00      	nop
 80a1688:	bf00      	nop
 80a168a:	bf00      	nop
 80a168c:	bf00      	nop
 80a168e:	bf00      	nop
 80a1690:	bf00      	nop
 80a1692:	bf00      	nop
 80a1694:	bf00      	nop
 80a1696:	bf00      	nop
 80a1698:	bf00      	nop
 80a169a:	bf00      	nop
 80a169c:	bf00      	nop
 80a169e:	bf00      	nop
 80a16a0:	bf00      	nop
 80a16a2:	bf00      	nop
 80a16a4:	bf00      	nop
 80a16a6:	bf00      	nop
 80a16a8:	bf00      	nop
 80a16aa:	bf00      	nop
          if(j==24) break;
 80a16ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a16b0:	2b18      	cmp	r3, #24
 80a16b2:	d184      	bne.n	80a15be <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a16b4:	468e      	mov	lr, r1
 80a16b6:	e6d5      	b.n	80a1464 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a16b8:	4a17      	ldr	r2, [pc, #92]	; (80a1718 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a16ba:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a16be:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a16c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a16c4:	b29b      	uxth	r3, r3
 80a16c6:	2b00      	cmp	r3, #0
 80a16c8:	f43f ad00 	beq.w	80a10cc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a16cc:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a16ce:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a16d2:	f10e 0103 	add.w	r1, lr, #3
 80a16d6:	3b03      	subs	r3, #3
 80a16d8:	b29b      	uxth	r3, r3
 80a16da:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a16de:	f89e 3000 	ldrb.w	r3, [lr]
 80a16e2:	b2db      	uxtb	r3, r3
 80a16e4:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a16e8:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a16ec:	b2db      	uxtb	r3, r3
 80a16ee:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a16f2:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a16f6:	b2db      	uxtb	r3, r3
 80a16f8:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a16fc:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1700:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1704:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1708:	021b      	lsls	r3, r3, #8
 80a170a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a170e:	4303      	orrs	r3, r0
 80a1710:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1712:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1716:	e0e0      	b.n	80a18da <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a1718:	200001ec 	.word	0x200001ec
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a171c:	4600      	mov	r0, r0
 80a171e:	bf00      	nop
 80a1720:	bf00      	nop
 80a1722:	bf00      	nop
 80a1724:	bf00      	nop
 80a1726:	bf00      	nop
 80a1728:	bf00      	nop
 80a172a:	bf00      	nop
 80a172c:	bf00      	nop
 80a172e:	bf00      	nop
 80a1730:	bf00      	nop
 80a1732:	bf00      	nop
 80a1734:	bf00      	nop
 80a1736:	bf00      	nop
 80a1738:	bf00      	nop
 80a173a:	bf00      	nop
 80a173c:	bf00      	nop
 80a173e:	bf00      	nop
 80a1740:	bf00      	nop
 80a1742:	bf00      	nop
 80a1744:	bf00      	nop
 80a1746:	bf00      	nop
 80a1748:	bf00      	nop
 80a174a:	bf00      	nop
 80a174c:	bf00      	nop
 80a174e:	bf00      	nop
 80a1750:	bf00      	nop
 80a1752:	bf00      	nop
 80a1754:	bf00      	nop
 80a1756:	bf00      	nop
 80a1758:	bf00      	nop
 80a175a:	bf00      	nop
 80a175c:	bf00      	nop
 80a175e:	bf00      	nop
 80a1760:	bf00      	nop
 80a1762:	bf00      	nop
 80a1764:	bf00      	nop
 80a1766:	bf00      	nop
 80a1768:	bf00      	nop
 80a176a:	bf00      	nop
 80a176c:	bf00      	nop
 80a176e:	bf00      	nop
 80a1770:	bf00      	nop
 80a1772:	bf00      	nop
 80a1774:	bf00      	nop
 80a1776:	bf00      	nop
 80a1778:	bf00      	nop
 80a177a:	bf00      	nop
 80a177c:	bf00      	nop
 80a177e:	bf00      	nop
 80a1780:	bf00      	nop
 80a1782:	bf00      	nop
 80a1784:	bf00      	nop
 80a1786:	bf00      	nop
 80a1788:	bf00      	nop
 80a178a:	bf00      	nop
 80a178c:	bf00      	nop
 80a178e:	bf00      	nop
 80a1790:	bf00      	nop
 80a1792:	bf00      	nop
 80a1794:	bf00      	nop
 80a1796:	bf00      	nop
 80a1798:	bf00      	nop
 80a179a:	bf00      	nop
 80a179c:	bf00      	nop
 80a179e:	bf00      	nop
 80a17a0:	bf00      	nop
 80a17a2:	bf00      	nop
 80a17a4:	bf00      	nop
 80a17a6:	bf00      	nop
 80a17a8:	bf00      	nop
 80a17aa:	bf00      	nop
 80a17ac:	bf00      	nop
 80a17ae:	bf00      	nop
 80a17b0:	bf00      	nop
 80a17b2:	bf00      	nop
 80a17b4:	bf00      	nop
 80a17b6:	bf00      	nop
 80a17b8:	bf00      	nop
 80a17ba:	bf00      	nop
 80a17bc:	bf00      	nop
 80a17be:	bf00      	nop
 80a17c0:	bf00      	nop
 80a17c2:	bf00      	nop
 80a17c4:	bf00      	nop
 80a17c6:	bf00      	nop
 80a17c8:	bf00      	nop
 80a17ca:	bf00      	nop
 80a17cc:	bf00      	nop
 80a17ce:	bf00      	nop
 80a17d0:	bf00      	nop
 80a17d2:	bf00      	nop
 80a17d4:	bf00      	nop
 80a17d6:	bf00      	nop
 80a17d8:	bf00      	nop
 80a17da:	bf00      	nop
 80a17dc:	bf00      	nop
 80a17de:	bf00      	nop
 80a17e0:	bf00      	nop
 80a17e2:	bf00      	nop
 80a17e4:	bf00      	nop
 80a17e6:	bf00      	nop
 80a17e8:	bf00      	nop
 80a17ea:	bf00      	nop
 80a17ec:	bf00      	nop
 80a17ee:	bf00      	nop
 80a17f0:	bf00      	nop
 80a17f2:	bf00      	nop
 80a17f4:	bf00      	nop
 80a17f6:	bf00      	nop
 80a17f8:	bf00      	nop
 80a17fa:	bf00      	nop
 80a17fc:	bf00      	nop
 80a17fe:	bf00      	nop
 80a1800:	bf00      	nop
 80a1802:	bf00      	nop
 80a1804:	bf00      	nop
 80a1806:	bf00      	nop
 80a1808:	bf00      	nop
 80a180a:	bf00      	nop
 80a180c:	bf00      	nop
 80a180e:	bf00      	nop
 80a1810:	bf00      	nop
 80a1812:	bf00      	nop
 80a1814:	bf00      	nop
 80a1816:	bf00      	nop
 80a1818:	bf00      	nop
 80a181a:	bf00      	nop
 80a181c:	bf00      	nop
 80a181e:	bf00      	nop
 80a1820:	bf00      	nop
 80a1822:	bf00      	nop
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
 80a1838:	bf00      	nop
 80a183a:	bf00      	nop
 80a183c:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a183e:	79e3      	ldrb	r3, [r4, #7]
 80a1840:	6810      	ldr	r0, [r2, #0]
 80a1842:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1846:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a184a:	88bf      	ldrh	r7, [r7, #4]
 80a184c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1850:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1852:	4600      	mov	r0, r0
 80a1854:	bf00      	nop
 80a1856:	bf00      	nop
 80a1858:	bf00      	nop
 80a185a:	bf00      	nop
 80a185c:	bf00      	nop
 80a185e:	bf00      	nop
 80a1860:	bf00      	nop
 80a1862:	bf00      	nop
 80a1864:	bf00      	nop
 80a1866:	bf00      	nop
 80a1868:	bf00      	nop
 80a186a:	bf00      	nop
 80a186c:	bf00      	nop
 80a186e:	bf00      	nop
 80a1870:	bf00      	nop
 80a1872:	bf00      	nop
 80a1874:	bf00      	nop
 80a1876:	bf00      	nop
 80a1878:	bf00      	nop
 80a187a:	bf00      	nop
 80a187c:	bf00      	nop
 80a187e:	bf00      	nop
 80a1880:	bf00      	nop
 80a1882:	bf00      	nop
 80a1884:	bf00      	nop
 80a1886:	bf00      	nop
 80a1888:	bf00      	nop
 80a188a:	bf00      	nop
 80a188c:	bf00      	nop
 80a188e:	bf00      	nop
 80a1890:	bf00      	nop
 80a1892:	bf00      	nop
 80a1894:	bf00      	nop
 80a1896:	bf00      	nop
 80a1898:	bf00      	nop
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
 80a18b6:	bf00      	nop
 80a18b8:	bf00      	nop
 80a18ba:	bf00      	nop
 80a18bc:	bf00      	nop
 80a18be:	bf00      	nop
 80a18c0:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a18c2:	9b04      	ldr	r3, [sp, #16]
 80a18c4:	085b      	lsrs	r3, r3, #1
 80a18c6:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a18c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a18cc:	3301      	adds	r3, #1
 80a18ce:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a18d0:	2b17      	cmp	r3, #23
 80a18d2:	f88d 3005 	strb.w	r3, [sp, #5]
 80a18d6:	f200 80e3 	bhi.w	80a1aa0 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a18da:	79e3      	ldrb	r3, [r4, #7]
 80a18dc:	6810      	ldr	r0, [r2, #0]
 80a18de:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a18e2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a18e6:	88bf      	ldrh	r7, [r7, #4]
 80a18e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a18ec:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a18ee:	9803      	ldr	r0, [sp, #12]
 80a18f0:	9b04      	ldr	r3, [sp, #16]
 80a18f2:	4218      	tst	r0, r3
 80a18f4:	f47f af12 	bne.w	80a171c <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a18f8:	4600      	mov	r0, r0
 80a18fa:	bf00      	nop
 80a18fc:	bf00      	nop
 80a18fe:	bf00      	nop
 80a1900:	bf00      	nop
 80a1902:	bf00      	nop
 80a1904:	bf00      	nop
 80a1906:	bf00      	nop
 80a1908:	bf00      	nop
 80a190a:	bf00      	nop
 80a190c:	bf00      	nop
 80a190e:	bf00      	nop
 80a1910:	bf00      	nop
 80a1912:	bf00      	nop
 80a1914:	bf00      	nop
 80a1916:	bf00      	nop
 80a1918:	bf00      	nop
 80a191a:	bf00      	nop
 80a191c:	bf00      	nop
 80a191e:	bf00      	nop
 80a1920:	bf00      	nop
 80a1922:	bf00      	nop
 80a1924:	bf00      	nop
 80a1926:	bf00      	nop
 80a1928:	bf00      	nop
 80a192a:	bf00      	nop
 80a192c:	bf00      	nop
 80a192e:	bf00      	nop
 80a1930:	bf00      	nop
 80a1932:	bf00      	nop
 80a1934:	bf00      	nop
 80a1936:	bf00      	nop
 80a1938:	bf00      	nop
 80a193a:	bf00      	nop
 80a193c:	bf00      	nop
 80a193e:	bf00      	nop
 80a1940:	bf00      	nop
 80a1942:	bf00      	nop
 80a1944:	bf00      	nop
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
 80a194a:	bf00      	nop
 80a194c:	bf00      	nop
 80a194e:	bf00      	nop
 80a1950:	bf00      	nop
 80a1952:	bf00      	nop
 80a1954:	bf00      	nop
 80a1956:	bf00      	nop
 80a1958:	bf00      	nop
 80a195a:	bf00      	nop
 80a195c:	bf00      	nop
 80a195e:	bf00      	nop
 80a1960:	bf00      	nop
 80a1962:	bf00      	nop
 80a1964:	bf00      	nop
 80a1966:	bf00      	nop
 80a1968:	bf00      	nop
 80a196a:	bf00      	nop
 80a196c:	bf00      	nop
 80a196e:	bf00      	nop
 80a1970:	bf00      	nop
 80a1972:	bf00      	nop
 80a1974:	bf00      	nop
 80a1976:	bf00      	nop
 80a1978:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a197a:	79e3      	ldrb	r3, [r4, #7]
 80a197c:	6810      	ldr	r0, [r2, #0]
 80a197e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1982:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1986:	88bf      	ldrh	r7, [r7, #4]
 80a1988:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a198c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a198e:	4600      	mov	r0, r0
 80a1990:	bf00      	nop
 80a1992:	bf00      	nop
 80a1994:	bf00      	nop
 80a1996:	bf00      	nop
 80a1998:	bf00      	nop
 80a199a:	bf00      	nop
 80a199c:	bf00      	nop
 80a199e:	bf00      	nop
 80a19a0:	bf00      	nop
 80a19a2:	bf00      	nop
 80a19a4:	bf00      	nop
 80a19a6:	bf00      	nop
 80a19a8:	bf00      	nop
 80a19aa:	bf00      	nop
 80a19ac:	bf00      	nop
 80a19ae:	bf00      	nop
 80a19b0:	bf00      	nop
 80a19b2:	bf00      	nop
 80a19b4:	bf00      	nop
 80a19b6:	bf00      	nop
 80a19b8:	bf00      	nop
 80a19ba:	bf00      	nop
 80a19bc:	bf00      	nop
 80a19be:	bf00      	nop
 80a19c0:	bf00      	nop
 80a19c2:	bf00      	nop
 80a19c4:	bf00      	nop
 80a19c6:	bf00      	nop
 80a19c8:	bf00      	nop
 80a19ca:	bf00      	nop
 80a19cc:	bf00      	nop
 80a19ce:	bf00      	nop
 80a19d0:	bf00      	nop
 80a19d2:	bf00      	nop
 80a19d4:	bf00      	nop
 80a19d6:	bf00      	nop
 80a19d8:	bf00      	nop
 80a19da:	bf00      	nop
 80a19dc:	bf00      	nop
 80a19de:	bf00      	nop
 80a19e0:	bf00      	nop
 80a19e2:	bf00      	nop
 80a19e4:	bf00      	nop
 80a19e6:	bf00      	nop
 80a19e8:	bf00      	nop
 80a19ea:	bf00      	nop
 80a19ec:	bf00      	nop
 80a19ee:	bf00      	nop
 80a19f0:	bf00      	nop
 80a19f2:	bf00      	nop
 80a19f4:	bf00      	nop
 80a19f6:	bf00      	nop
 80a19f8:	bf00      	nop
 80a19fa:	bf00      	nop
 80a19fc:	bf00      	nop
 80a19fe:	bf00      	nop
 80a1a00:	bf00      	nop
 80a1a02:	bf00      	nop
 80a1a04:	bf00      	nop
 80a1a06:	bf00      	nop
 80a1a08:	bf00      	nop
 80a1a0a:	bf00      	nop
 80a1a0c:	bf00      	nop
 80a1a0e:	bf00      	nop
 80a1a10:	bf00      	nop
 80a1a12:	bf00      	nop
 80a1a14:	bf00      	nop
 80a1a16:	bf00      	nop
 80a1a18:	bf00      	nop
 80a1a1a:	bf00      	nop
 80a1a1c:	bf00      	nop
 80a1a1e:	bf00      	nop
 80a1a20:	bf00      	nop
 80a1a22:	bf00      	nop
 80a1a24:	bf00      	nop
 80a1a26:	bf00      	nop
 80a1a28:	bf00      	nop
 80a1a2a:	bf00      	nop
 80a1a2c:	bf00      	nop
 80a1a2e:	bf00      	nop
 80a1a30:	bf00      	nop
 80a1a32:	bf00      	nop
 80a1a34:	bf00      	nop
 80a1a36:	bf00      	nop
 80a1a38:	bf00      	nop
 80a1a3a:	bf00      	nop
 80a1a3c:	bf00      	nop
 80a1a3e:	bf00      	nop
 80a1a40:	bf00      	nop
 80a1a42:	bf00      	nop
 80a1a44:	bf00      	nop
 80a1a46:	bf00      	nop
 80a1a48:	bf00      	nop
 80a1a4a:	bf00      	nop
 80a1a4c:	bf00      	nop
 80a1a4e:	bf00      	nop
 80a1a50:	bf00      	nop
 80a1a52:	bf00      	nop
 80a1a54:	bf00      	nop
 80a1a56:	bf00      	nop
 80a1a58:	bf00      	nop
 80a1a5a:	bf00      	nop
 80a1a5c:	bf00      	nop
 80a1a5e:	bf00      	nop
 80a1a60:	bf00      	nop
 80a1a62:	bf00      	nop
 80a1a64:	bf00      	nop
 80a1a66:	bf00      	nop
 80a1a68:	bf00      	nop
 80a1a6a:	bf00      	nop
 80a1a6c:	bf00      	nop
 80a1a6e:	bf00      	nop
 80a1a70:	bf00      	nop
 80a1a72:	bf00      	nop
 80a1a74:	bf00      	nop
 80a1a76:	bf00      	nop
 80a1a78:	bf00      	nop
 80a1a7a:	bf00      	nop
 80a1a7c:	bf00      	nop
 80a1a7e:	bf00      	nop
 80a1a80:	bf00      	nop
 80a1a82:	bf00      	nop
 80a1a84:	bf00      	nop
 80a1a86:	bf00      	nop
 80a1a88:	bf00      	nop
 80a1a8a:	bf00      	nop
 80a1a8c:	bf00      	nop
 80a1a8e:	bf00      	nop
 80a1a90:	bf00      	nop
 80a1a92:	bf00      	nop
 80a1a94:	bf00      	nop
 80a1a96:	bf00      	nop
 80a1a98:	bf00      	nop
 80a1a9a:	bf00      	nop
 80a1a9c:	bf00      	nop
 80a1a9e:	e710      	b.n	80a18c2 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1aa0:	468e      	mov	lr, r1
 80a1aa2:	e60d      	b.n	80a16c0 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a1aa4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a1aa4:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a1aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1aa8:	428b      	cmp	r3, r1
 80a1aaa:	d945      	bls.n	80a1b38 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a1aac:	7a05      	ldrb	r5, [r0, #8]
 80a1aae:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a1ab2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a1ab6:	b2d6      	uxtb	r6, r2
 80a1ab8:	b145      	cbz	r5, 80a1acc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a1aba:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a1abc:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a1abe:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a1ac0:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1ac4:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a1ac8:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1acc:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a1ad0:	68c7      	ldr	r7, [r0, #12]
 80a1ad2:	f1bc 0f06 	cmp.w	ip, #6
 80a1ad6:	bf0c      	ite	eq
 80a1ad8:	2504      	moveq	r5, #4
 80a1ada:	2503      	movne	r5, #3
 80a1adc:	4369      	muls	r1, r5
 80a1ade:	f1bc 0f08 	cmp.w	ip, #8
 80a1ae2:	eb07 0501 	add.w	r5, r7, r1
 80a1ae6:	d824      	bhi.n	80a1b32 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a1ae8:	f04f 0e01 	mov.w	lr, #1
 80a1aec:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a1af0:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a1af4:	d10c      	bne.n	80a1b10 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a1af6:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a1afa:	d10d      	bne.n	80a1b18 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a1afc:	f01e 0f10 	tst.w	lr, #16
 80a1b00:	d017      	beq.n	80a1b32 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a1b02:	2bff      	cmp	r3, #255	; 0xff
 80a1b04:	bf08      	it	eq
 80a1b06:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a1b08:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a1b0a:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a1b0c:	70ac      	strb	r4, [r5, #2]
        } break;
 80a1b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1b10:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a1b12:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a1b14:	70ae      	strb	r6, [r5, #2]
        } break;
 80a1b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a1b18:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1b1a:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a1b1c:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1b1e:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1b20:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1b22:	b90b      	cbnz	r3, 80a1b28 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1b24:	b2d2      	uxtb	r2, r2
 80a1b26:	e002      	b.n	80a1b2e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1b28:	435a      	muls	r2, r3
 80a1b2a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a1b2e:	70ea      	strb	r2, [r5, #3]
        } break;
 80a1b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a1b32:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1b34:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a1b36:	70ae      	strb	r6, [r5, #2]
 80a1b38:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1b3a <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a1b3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a1b3e:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a1b42:	4770      	bx	lr

080a1b44 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a1b44:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a1b46:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a1b48:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a1b4a:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a1b4c:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a1b4e:	d01e      	beq.n	80a1b8e <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a1b50:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a1b52:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a1b56:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a1b58:	d00c      	beq.n	80a1b74 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a1b5a:	29ff      	cmp	r1, #255	; 0xff
 80a1b5c:	bf0f      	iteee	eq
 80a1b5e:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a1b62:	0211      	lslne	r1, r2, #8
 80a1b64:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80a1b68:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a1b6c:	bf0c      	ite	eq
 80a1b6e:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a1b72:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a1b74:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a1b76:	1b29      	subs	r1, r5, r4
 80a1b78:	8886      	ldrh	r6, [r0, #4]
 80a1b7a:	b289      	uxth	r1, r1
 80a1b7c:	428e      	cmp	r6, r1
 80a1b7e:	d905      	bls.n	80a1b8c <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a1b80:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a1b82:	4359      	muls	r1, r3
 80a1b84:	1209      	asrs	r1, r1, #8
 80a1b86:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a1b8a:	e7f4      	b.n	80a1b76 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a1b8c:	7202      	strb	r2, [r0, #8]
 80a1b8e:	bd70      	pop	{r4, r5, r6, pc}

080a1b90 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a1b90:	b508      	push	{r3, lr}
 80a1b92:	f000 f827 	bl	80a1be4 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a1b96:	f000 f825 	bl	80a1be4 <HAL_Pin_Map>
 80a1b9a:	4b01      	ldr	r3, [pc, #4]	; (80a1ba0 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a1b9c:	6018      	str	r0, [r3, #0]
 80a1b9e:	bd08      	pop	{r3, pc}
 80a1ba0:	200001ec 	.word	0x200001ec

080a1ba4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1ba4:	b508      	push	{r3, lr}
 80a1ba6:	4b02      	ldr	r3, [pc, #8]	; (80a1bb0 <os_mutex_create+0xc>)
 80a1ba8:	681b      	ldr	r3, [r3, #0]
 80a1baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1bac:	9301      	str	r3, [sp, #4]
 80a1bae:	bd08      	pop	{r3, pc}
 80a1bb0:	080601d0 	.word	0x080601d0

080a1bb4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1bb4:	b508      	push	{r3, lr}
 80a1bb6:	4b02      	ldr	r3, [pc, #8]	; (80a1bc0 <HAL_RNG_GetRandomNumber+0xc>)
 80a1bb8:	681b      	ldr	r3, [r3, #0]
 80a1bba:	685b      	ldr	r3, [r3, #4]
 80a1bbc:	9301      	str	r3, [sp, #4]
 80a1bbe:	bd08      	pop	{r3, pc}
 80a1bc0:	0806019c 	.word	0x0806019c

080a1bc4 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1bc4:	b508      	push	{r3, lr}
 80a1bc6:	4b02      	ldr	r3, [pc, #8]	; (80a1bd0 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1bc8:	681b      	ldr	r3, [r3, #0]
 80a1bca:	691b      	ldr	r3, [r3, #16]
 80a1bcc:	9301      	str	r3, [sp, #4]
 80a1bce:	bd08      	pop	{r3, pc}
 80a1bd0:	0806019c 	.word	0x0806019c

080a1bd4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1bd4:	b508      	push	{r3, lr}
 80a1bd6:	4b02      	ldr	r3, [pc, #8]	; (80a1be0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1bd8:	681b      	ldr	r3, [r3, #0]
 80a1bda:	695b      	ldr	r3, [r3, #20]
 80a1bdc:	9301      	str	r3, [sp, #4]
 80a1bde:	bd08      	pop	{r3, pc}
 80a1be0:	0806019c 	.word	0x0806019c

080a1be4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1be4:	b508      	push	{r3, lr}
 80a1be6:	4b02      	ldr	r3, [pc, #8]	; (80a1bf0 <HAL_Pin_Map+0xc>)
 80a1be8:	681b      	ldr	r3, [r3, #0]
 80a1bea:	681b      	ldr	r3, [r3, #0]
 80a1bec:	9301      	str	r3, [sp, #4]
 80a1bee:	bd08      	pop	{r3, pc}
 80a1bf0:	080601b0 	.word	0x080601b0

080a1bf4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1bf4:	b508      	push	{r3, lr}
 80a1bf6:	4b02      	ldr	r3, [pc, #8]	; (80a1c00 <HAL_Validate_Pin_Function+0xc>)
 80a1bf8:	681b      	ldr	r3, [r3, #0]
 80a1bfa:	685b      	ldr	r3, [r3, #4]
 80a1bfc:	9301      	str	r3, [sp, #4]
 80a1bfe:	bd08      	pop	{r3, pc}
 80a1c00:	080601b0 	.word	0x080601b0

080a1c04 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1c04:	b508      	push	{r3, lr}
 80a1c06:	4b02      	ldr	r3, [pc, #8]	; (80a1c10 <HAL_Pin_Mode+0xc>)
 80a1c08:	681b      	ldr	r3, [r3, #0]
 80a1c0a:	689b      	ldr	r3, [r3, #8]
 80a1c0c:	9301      	str	r3, [sp, #4]
 80a1c0e:	bd08      	pop	{r3, pc}
 80a1c10:	080601b0 	.word	0x080601b0

080a1c14 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1c14:	b508      	push	{r3, lr}
 80a1c16:	4b02      	ldr	r3, [pc, #8]	; (80a1c20 <HAL_Get_Pin_Mode+0xc>)
 80a1c18:	681b      	ldr	r3, [r3, #0]
 80a1c1a:	68db      	ldr	r3, [r3, #12]
 80a1c1c:	9301      	str	r3, [sp, #4]
 80a1c1e:	bd08      	pop	{r3, pc}
 80a1c20:	080601b0 	.word	0x080601b0

080a1c24 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1c24:	b508      	push	{r3, lr}
 80a1c26:	4b02      	ldr	r3, [pc, #8]	; (80a1c30 <HAL_GPIO_Write+0xc>)
 80a1c28:	681b      	ldr	r3, [r3, #0]
 80a1c2a:	691b      	ldr	r3, [r3, #16]
 80a1c2c:	9301      	str	r3, [sp, #4]
 80a1c2e:	bd08      	pop	{r3, pc}
 80a1c30:	080601b0 	.word	0x080601b0

080a1c34 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a1c34:	b508      	push	{r3, lr}
 80a1c36:	4b02      	ldr	r3, [pc, #8]	; (80a1c40 <HAL_I2C_Begin+0xc>)
 80a1c38:	681b      	ldr	r3, [r3, #0]
 80a1c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1c3c:	9301      	str	r3, [sp, #4]
 80a1c3e:	bd08      	pop	{r3, pc}
 80a1c40:	080601ac 	.word	0x080601ac

080a1c44 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a1c44:	b508      	push	{r3, lr}
 80a1c46:	4b02      	ldr	r3, [pc, #8]	; (80a1c50 <HAL_I2C_Request_Data+0xc>)
 80a1c48:	681b      	ldr	r3, [r3, #0]
 80a1c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1c4c:	9301      	str	r3, [sp, #4]
 80a1c4e:	bd08      	pop	{r3, pc}
 80a1c50:	080601ac 	.word	0x080601ac

080a1c54 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a1c54:	b508      	push	{r3, lr}
 80a1c56:	4b02      	ldr	r3, [pc, #8]	; (80a1c60 <HAL_I2C_Begin_Transmission+0xc>)
 80a1c58:	681b      	ldr	r3, [r3, #0]
 80a1c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1c5c:	9301      	str	r3, [sp, #4]
 80a1c5e:	bd08      	pop	{r3, pc}
 80a1c60:	080601ac 	.word	0x080601ac

080a1c64 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a1c64:	b508      	push	{r3, lr}
 80a1c66:	4b02      	ldr	r3, [pc, #8]	; (80a1c70 <HAL_I2C_End_Transmission+0xc>)
 80a1c68:	681b      	ldr	r3, [r3, #0]
 80a1c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1c6c:	9301      	str	r3, [sp, #4]
 80a1c6e:	bd08      	pop	{r3, pc}
 80a1c70:	080601ac 	.word	0x080601ac

080a1c74 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1c74:	b508      	push	{r3, lr}
 80a1c76:	4b02      	ldr	r3, [pc, #8]	; (80a1c80 <HAL_I2C_Write_Data+0xc>)
 80a1c78:	681b      	ldr	r3, [r3, #0]
 80a1c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1c7c:	9301      	str	r3, [sp, #4]
 80a1c7e:	bd08      	pop	{r3, pc}
 80a1c80:	080601ac 	.word	0x080601ac

080a1c84 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1c84:	b508      	push	{r3, lr}
 80a1c86:	4b02      	ldr	r3, [pc, #8]	; (80a1c90 <HAL_I2C_Available_Data+0xc>)
 80a1c88:	681b      	ldr	r3, [r3, #0]
 80a1c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1c8c:	9301      	str	r3, [sp, #4]
 80a1c8e:	bd08      	pop	{r3, pc}
 80a1c90:	080601ac 	.word	0x080601ac

080a1c94 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1c94:	b508      	push	{r3, lr}
 80a1c96:	4b02      	ldr	r3, [pc, #8]	; (80a1ca0 <HAL_I2C_Read_Data+0xc>)
 80a1c98:	681b      	ldr	r3, [r3, #0]
 80a1c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1c9c:	9301      	str	r3, [sp, #4]
 80a1c9e:	bd08      	pop	{r3, pc}
 80a1ca0:	080601ac 	.word	0x080601ac

080a1ca4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1ca4:	b508      	push	{r3, lr}
 80a1ca6:	4b02      	ldr	r3, [pc, #8]	; (80a1cb0 <HAL_I2C_Peek_Data+0xc>)
 80a1ca8:	681b      	ldr	r3, [r3, #0]
 80a1caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1cac:	9301      	str	r3, [sp, #4]
 80a1cae:	bd08      	pop	{r3, pc}
 80a1cb0:	080601ac 	.word	0x080601ac

080a1cb4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1cb4:	b508      	push	{r3, lr}
 80a1cb6:	4b02      	ldr	r3, [pc, #8]	; (80a1cc0 <HAL_I2C_Flush_Data+0xc>)
 80a1cb8:	681b      	ldr	r3, [r3, #0]
 80a1cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1cbc:	9301      	str	r3, [sp, #4]
 80a1cbe:	bd08      	pop	{r3, pc}
 80a1cc0:	080601ac 	.word	0x080601ac

080a1cc4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1cc4:	b508      	push	{r3, lr}
 80a1cc6:	4b02      	ldr	r3, [pc, #8]	; (80a1cd0 <HAL_I2C_Is_Enabled+0xc>)
 80a1cc8:	681b      	ldr	r3, [r3, #0]
 80a1cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1ccc:	9301      	str	r3, [sp, #4]
 80a1cce:	bd08      	pop	{r3, pc}
 80a1cd0:	080601ac 	.word	0x080601ac

080a1cd4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1cd4:	b508      	push	{r3, lr}
 80a1cd6:	4b03      	ldr	r3, [pc, #12]	; (80a1ce4 <HAL_I2C_Init+0x10>)
 80a1cd8:	681b      	ldr	r3, [r3, #0]
 80a1cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1cde:	9301      	str	r3, [sp, #4]
 80a1ce0:	bd08      	pop	{r3, pc}
 80a1ce2:	0000      	.short	0x0000
 80a1ce4:	080601ac 	.word	0x080601ac

080a1ce8 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
 80a1ce8:	b508      	push	{r3, lr}
 80a1cea:	4b02      	ldr	r3, [pc, #8]	; (80a1cf4 <HAL_Tone_Start+0xc>)
 80a1cec:	681b      	ldr	r3, [r3, #0]
 80a1cee:	681b      	ldr	r3, [r3, #0]
 80a1cf0:	9301      	str	r3, [sp, #4]
 80a1cf2:	bd08      	pop	{r3, pc}
 80a1cf4:	080601a8 	.word	0x080601a8

080a1cf8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1cf8:	b508      	push	{r3, lr}
 80a1cfa:	4b02      	ldr	r3, [pc, #8]	; (80a1d04 <HAL_SPI_Init+0xc>)
 80a1cfc:	681b      	ldr	r3, [r3, #0]
 80a1cfe:	69db      	ldr	r3, [r3, #28]
 80a1d00:	9301      	str	r3, [sp, #4]
 80a1d02:	bd08      	pop	{r3, pc}
 80a1d04:	080601b4 	.word	0x080601b4

080a1d08 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1d08:	b508      	push	{r3, lr}
 80a1d0a:	4b02      	ldr	r3, [pc, #8]	; (80a1d14 <HAL_SPI_Is_Enabled+0xc>)
 80a1d0c:	681b      	ldr	r3, [r3, #0]
 80a1d0e:	6a1b      	ldr	r3, [r3, #32]
 80a1d10:	9301      	str	r3, [sp, #4]
 80a1d12:	bd08      	pop	{r3, pc}
 80a1d14:	080601b4 	.word	0x080601b4

080a1d18 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1d18:	b508      	push	{r3, lr}
 80a1d1a:	4b02      	ldr	r3, [pc, #8]	; (80a1d24 <HAL_USART_Init+0xc>)
 80a1d1c:	681b      	ldr	r3, [r3, #0]
 80a1d1e:	699b      	ldr	r3, [r3, #24]
 80a1d20:	9301      	str	r3, [sp, #4]
 80a1d22:	bd08      	pop	{r3, pc}
 80a1d24:	080601c4 	.word	0x080601c4

080a1d28 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1d28:	b508      	push	{r3, lr}
 80a1d2a:	4b02      	ldr	r3, [pc, #8]	; (80a1d34 <HAL_USART_Write_Data+0xc>)
 80a1d2c:	681b      	ldr	r3, [r3, #0]
 80a1d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1d30:	9301      	str	r3, [sp, #4]
 80a1d32:	bd08      	pop	{r3, pc}
 80a1d34:	080601c4 	.word	0x080601c4

080a1d38 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1d38:	b508      	push	{r3, lr}
 80a1d3a:	4b02      	ldr	r3, [pc, #8]	; (80a1d44 <HAL_USART_Available_Data+0xc>)
 80a1d3c:	681b      	ldr	r3, [r3, #0]
 80a1d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1d40:	9301      	str	r3, [sp, #4]
 80a1d42:	bd08      	pop	{r3, pc}
 80a1d44:	080601c4 	.word	0x080601c4

080a1d48 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1d48:	b508      	push	{r3, lr}
 80a1d4a:	4b02      	ldr	r3, [pc, #8]	; (80a1d54 <HAL_USART_Read_Data+0xc>)
 80a1d4c:	681b      	ldr	r3, [r3, #0]
 80a1d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1d50:	9301      	str	r3, [sp, #4]
 80a1d52:	bd08      	pop	{r3, pc}
 80a1d54:	080601c4 	.word	0x080601c4

080a1d58 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1d58:	b508      	push	{r3, lr}
 80a1d5a:	4b02      	ldr	r3, [pc, #8]	; (80a1d64 <HAL_USART_Peek_Data+0xc>)
 80a1d5c:	681b      	ldr	r3, [r3, #0]
 80a1d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1d60:	9301      	str	r3, [sp, #4]
 80a1d62:	bd08      	pop	{r3, pc}
 80a1d64:	080601c4 	.word	0x080601c4

080a1d68 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1d68:	b508      	push	{r3, lr}
 80a1d6a:	4b02      	ldr	r3, [pc, #8]	; (80a1d74 <HAL_USART_Flush_Data+0xc>)
 80a1d6c:	681b      	ldr	r3, [r3, #0]
 80a1d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1d70:	9301      	str	r3, [sp, #4]
 80a1d72:	bd08      	pop	{r3, pc}
 80a1d74:	080601c4 	.word	0x080601c4

080a1d78 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1d78:	b508      	push	{r3, lr}
 80a1d7a:	4b02      	ldr	r3, [pc, #8]	; (80a1d84 <HAL_USART_Is_Enabled+0xc>)
 80a1d7c:	681b      	ldr	r3, [r3, #0]
 80a1d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1d80:	9301      	str	r3, [sp, #4]
 80a1d82:	bd08      	pop	{r3, pc}
 80a1d84:	080601c4 	.word	0x080601c4

080a1d88 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1d88:	b508      	push	{r3, lr}
 80a1d8a:	4b02      	ldr	r3, [pc, #8]	; (80a1d94 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1d8c:	681b      	ldr	r3, [r3, #0]
 80a1d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1d90:	9301      	str	r3, [sp, #4]
 80a1d92:	bd08      	pop	{r3, pc}
 80a1d94:	080601c4 	.word	0x080601c4

080a1d98 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1d98:	b508      	push	{r3, lr}
 80a1d9a:	4b02      	ldr	r3, [pc, #8]	; (80a1da4 <HAL_USB_USART_Init+0xc>)
 80a1d9c:	681b      	ldr	r3, [r3, #0]
 80a1d9e:	681b      	ldr	r3, [r3, #0]
 80a1da0:	9301      	str	r3, [sp, #4]
 80a1da2:	bd08      	pop	{r3, pc}
 80a1da4:	080601d8 	.word	0x080601d8

080a1da8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1da8:	b508      	push	{r3, lr}
 80a1daa:	4b02      	ldr	r3, [pc, #8]	; (80a1db4 <HAL_USB_USART_Available_Data+0xc>)
 80a1dac:	681b      	ldr	r3, [r3, #0]
 80a1dae:	691b      	ldr	r3, [r3, #16]
 80a1db0:	9301      	str	r3, [sp, #4]
 80a1db2:	bd08      	pop	{r3, pc}
 80a1db4:	080601d8 	.word	0x080601d8

080a1db8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1db8:	b508      	push	{r3, lr}
 80a1dba:	4b02      	ldr	r3, [pc, #8]	; (80a1dc4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1dbc:	681b      	ldr	r3, [r3, #0]
 80a1dbe:	695b      	ldr	r3, [r3, #20]
 80a1dc0:	9301      	str	r3, [sp, #4]
 80a1dc2:	bd08      	pop	{r3, pc}
 80a1dc4:	080601d8 	.word	0x080601d8

080a1dc8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1dc8:	b508      	push	{r3, lr}
 80a1dca:	4b02      	ldr	r3, [pc, #8]	; (80a1dd4 <HAL_USB_USART_Receive_Data+0xc>)
 80a1dcc:	681b      	ldr	r3, [r3, #0]
 80a1dce:	699b      	ldr	r3, [r3, #24]
 80a1dd0:	9301      	str	r3, [sp, #4]
 80a1dd2:	bd08      	pop	{r3, pc}
 80a1dd4:	080601d8 	.word	0x080601d8

080a1dd8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1dd8:	b508      	push	{r3, lr}
 80a1dda:	4b02      	ldr	r3, [pc, #8]	; (80a1de4 <HAL_USB_USART_Send_Data+0xc>)
 80a1ddc:	681b      	ldr	r3, [r3, #0]
 80a1dde:	69db      	ldr	r3, [r3, #28]
 80a1de0:	9301      	str	r3, [sp, #4]
 80a1de2:	bd08      	pop	{r3, pc}
 80a1de4:	080601d8 	.word	0x080601d8

080a1de8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1de8:	b508      	push	{r3, lr}
 80a1dea:	4b02      	ldr	r3, [pc, #8]	; (80a1df4 <HAL_USB_USART_Flush_Data+0xc>)
 80a1dec:	681b      	ldr	r3, [r3, #0]
 80a1dee:	6a1b      	ldr	r3, [r3, #32]
 80a1df0:	9301      	str	r3, [sp, #4]
 80a1df2:	bd08      	pop	{r3, pc}
 80a1df4:	080601d8 	.word	0x080601d8

080a1df8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1df8:	b508      	push	{r3, lr}
 80a1dfa:	4b02      	ldr	r3, [pc, #8]	; (80a1e04 <inet_gethostbyname+0xc>)
 80a1dfc:	681b      	ldr	r3, [r3, #0]
 80a1dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1e00:	9301      	str	r3, [sp, #4]
 80a1e02:	bd08      	pop	{r3, pc}
 80a1e04:	080601c0 	.word	0x080601c0

080a1e08 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1e08:	b508      	push	{r3, lr}
 80a1e0a:	4b02      	ldr	r3, [pc, #8]	; (80a1e14 <set_system_mode+0xc>)
 80a1e0c:	681b      	ldr	r3, [r3, #0]
 80a1e0e:	685b      	ldr	r3, [r3, #4]
 80a1e10:	9301      	str	r3, [sp, #4]
 80a1e12:	bd08      	pop	{r3, pc}
 80a1e14:	080601a4 	.word	0x080601a4

080a1e18 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1e18:	b508      	push	{r3, lr}
 80a1e1a:	4b02      	ldr	r3, [pc, #8]	; (80a1e24 <system_delay_ms+0xc>)
 80a1e1c:	681b      	ldr	r3, [r3, #0]
 80a1e1e:	695b      	ldr	r3, [r3, #20]
 80a1e20:	9301      	str	r3, [sp, #4]
 80a1e22:	bd08      	pop	{r3, pc}
 80a1e24:	080601a4 	.word	0x080601a4

080a1e28 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1e28:	b508      	push	{r3, lr}
 80a1e2a:	4b03      	ldr	r3, [pc, #12]	; (80a1e38 <system_ctrl_set_app_request_handler+0x10>)
 80a1e2c:	681b      	ldr	r3, [r3, #0]
 80a1e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1e32:	9301      	str	r3, [sp, #4]
 80a1e34:	bd08      	pop	{r3, pc}
 80a1e36:	0000      	.short	0x0000
 80a1e38:	080601a4 	.word	0x080601a4

080a1e3c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1e3c:	b508      	push	{r3, lr}
 80a1e3e:	4b03      	ldr	r3, [pc, #12]	; (80a1e4c <system_ctrl_set_result+0x10>)
 80a1e40:	681b      	ldr	r3, [r3, #0]
 80a1e42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1e46:	9301      	str	r3, [sp, #4]
 80a1e48:	bd08      	pop	{r3, pc}
 80a1e4a:	0000      	.short	0x0000
 80a1e4c:	080601a4 	.word	0x080601a4

080a1e50 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1e50:	b508      	push	{r3, lr}
 80a1e52:	4b02      	ldr	r3, [pc, #8]	; (80a1e5c <spark_process+0xc>)
 80a1e54:	681b      	ldr	r3, [r3, #0]
 80a1e56:	689b      	ldr	r3, [r3, #8]
 80a1e58:	9301      	str	r3, [sp, #4]
 80a1e5a:	bd08      	pop	{r3, pc}
 80a1e5c:	080601cc 	.word	0x080601cc

080a1e60 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1e60:	b508      	push	{r3, lr}
 80a1e62:	4b02      	ldr	r3, [pc, #8]	; (80a1e6c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1e64:	681b      	ldr	r3, [r3, #0]
 80a1e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1e68:	9301      	str	r3, [sp, #4]
 80a1e6a:	bd08      	pop	{r3, pc}
 80a1e6c:	080601cc 	.word	0x080601cc

080a1e70 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1e70:	b508      	push	{r3, lr}
 80a1e72:	4b02      	ldr	r3, [pc, #8]	; (80a1e7c <network_connect+0xc>)
 80a1e74:	681b      	ldr	r3, [r3, #0]
 80a1e76:	685b      	ldr	r3, [r3, #4]
 80a1e78:	9301      	str	r3, [sp, #4]
 80a1e7a:	bd08      	pop	{r3, pc}
 80a1e7c:	080601c8 	.word	0x080601c8

080a1e80 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1e80:	b508      	push	{r3, lr}
 80a1e82:	4b02      	ldr	r3, [pc, #8]	; (80a1e8c <network_connecting+0xc>)
 80a1e84:	681b      	ldr	r3, [r3, #0]
 80a1e86:	689b      	ldr	r3, [r3, #8]
 80a1e88:	9301      	str	r3, [sp, #4]
 80a1e8a:	bd08      	pop	{r3, pc}
 80a1e8c:	080601c8 	.word	0x080601c8

080a1e90 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1e90:	b508      	push	{r3, lr}
 80a1e92:	4b02      	ldr	r3, [pc, #8]	; (80a1e9c <network_disconnect+0xc>)
 80a1e94:	681b      	ldr	r3, [r3, #0]
 80a1e96:	68db      	ldr	r3, [r3, #12]
 80a1e98:	9301      	str	r3, [sp, #4]
 80a1e9a:	bd08      	pop	{r3, pc}
 80a1e9c:	080601c8 	.word	0x080601c8

080a1ea0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1ea0:	b508      	push	{r3, lr}
 80a1ea2:	4b02      	ldr	r3, [pc, #8]	; (80a1eac <network_ready+0xc>)
 80a1ea4:	681b      	ldr	r3, [r3, #0]
 80a1ea6:	691b      	ldr	r3, [r3, #16]
 80a1ea8:	9301      	str	r3, [sp, #4]
 80a1eaa:	bd08      	pop	{r3, pc}
 80a1eac:	080601c8 	.word	0x080601c8

080a1eb0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1eb0:	b508      	push	{r3, lr}
 80a1eb2:	4b02      	ldr	r3, [pc, #8]	; (80a1ebc <network_on+0xc>)
 80a1eb4:	681b      	ldr	r3, [r3, #0]
 80a1eb6:	695b      	ldr	r3, [r3, #20]
 80a1eb8:	9301      	str	r3, [sp, #4]
 80a1eba:	bd08      	pop	{r3, pc}
 80a1ebc:	080601c8 	.word	0x080601c8

080a1ec0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1ec0:	b508      	push	{r3, lr}
 80a1ec2:	4b02      	ldr	r3, [pc, #8]	; (80a1ecc <network_off+0xc>)
 80a1ec4:	681b      	ldr	r3, [r3, #0]
 80a1ec6:	699b      	ldr	r3, [r3, #24]
 80a1ec8:	9301      	str	r3, [sp, #4]
 80a1eca:	bd08      	pop	{r3, pc}
 80a1ecc:	080601c8 	.word	0x080601c8

080a1ed0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1ed0:	b508      	push	{r3, lr}
 80a1ed2:	4b02      	ldr	r3, [pc, #8]	; (80a1edc <network_listen+0xc>)
 80a1ed4:	681b      	ldr	r3, [r3, #0]
 80a1ed6:	69db      	ldr	r3, [r3, #28]
 80a1ed8:	9301      	str	r3, [sp, #4]
 80a1eda:	bd08      	pop	{r3, pc}
 80a1edc:	080601c8 	.word	0x080601c8

080a1ee0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1ee0:	b508      	push	{r3, lr}
 80a1ee2:	4b02      	ldr	r3, [pc, #8]	; (80a1eec <network_listening+0xc>)
 80a1ee4:	681b      	ldr	r3, [r3, #0]
 80a1ee6:	6a1b      	ldr	r3, [r3, #32]
 80a1ee8:	9301      	str	r3, [sp, #4]
 80a1eea:	bd08      	pop	{r3, pc}
 80a1eec:	080601c8 	.word	0x080601c8

080a1ef0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1ef0:	b508      	push	{r3, lr}
 80a1ef2:	4b02      	ldr	r3, [pc, #8]	; (80a1efc <network_set_listen_timeout+0xc>)
 80a1ef4:	681b      	ldr	r3, [r3, #0]
 80a1ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1ef8:	9301      	str	r3, [sp, #4]
 80a1efa:	bd08      	pop	{r3, pc}
 80a1efc:	080601c8 	.word	0x080601c8

080a1f00 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1f00:	b508      	push	{r3, lr}
 80a1f02:	4b02      	ldr	r3, [pc, #8]	; (80a1f0c <network_get_listen_timeout+0xc>)
 80a1f04:	681b      	ldr	r3, [r3, #0]
 80a1f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1f08:	9301      	str	r3, [sp, #4]
 80a1f0a:	bd08      	pop	{r3, pc}
 80a1f0c:	080601c8 	.word	0x080601c8

080a1f10 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1f10:	b508      	push	{r3, lr}
 80a1f12:	4b02      	ldr	r3, [pc, #8]	; (80a1f1c <malloc+0xc>)
 80a1f14:	681b      	ldr	r3, [r3, #0]
 80a1f16:	681b      	ldr	r3, [r3, #0]
 80a1f18:	9301      	str	r3, [sp, #4]
 80a1f1a:	bd08      	pop	{r3, pc}
 80a1f1c:	080601a0 	.word	0x080601a0

080a1f20 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1f20:	b508      	push	{r3, lr}
 80a1f22:	4b02      	ldr	r3, [pc, #8]	; (80a1f2c <free+0xc>)
 80a1f24:	681b      	ldr	r3, [r3, #0]
 80a1f26:	685b      	ldr	r3, [r3, #4]
 80a1f28:	9301      	str	r3, [sp, #4]
 80a1f2a:	bd08      	pop	{r3, pc}
 80a1f2c:	080601a0 	.word	0x080601a0

080a1f30 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1f30:	2100      	movs	r1, #0
 80a1f32:	f7ff bf71 	b.w	80a1e18 <system_delay_ms>

080a1f36 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1f36:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1f38:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1f3a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1f3c:	b113      	cbz	r3, 80a1f44 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1f3e:	2203      	movs	r2, #3
 80a1f40:	4601      	mov	r1, r0
 80a1f42:	4798      	blx	r3
    }
 80a1f44:	4620      	mov	r0, r4
 80a1f46:	bd10      	pop	{r4, pc}

080a1f48 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1f48:	4770      	bx	lr

080a1f4a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1f4c:	4606      	mov	r6, r0
 80a1f4e:	4615      	mov	r5, r2
 80a1f50:	460c      	mov	r4, r1
 80a1f52:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1f54:	42bc      	cmp	r4, r7
 80a1f56:	d006      	beq.n	80a1f66 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1f58:	6833      	ldr	r3, [r6, #0]
 80a1f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1f5e:	689b      	ldr	r3, [r3, #8]
 80a1f60:	4630      	mov	r0, r6
 80a1f62:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1f64:	e7f6      	b.n	80a1f54 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1f66:	4628      	mov	r0, r5
 80a1f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1f6a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1f6a:	2200      	movs	r2, #0
 80a1f6c:	7c00      	ldrb	r0, [r0, #16]
 80a1f6e:	f7ff be81 	b.w	80a1c74 <HAL_I2C_Write_Data>

080a1f72 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1f72:	2100      	movs	r1, #0
 80a1f74:	7c00      	ldrb	r0, [r0, #16]
 80a1f76:	f7ff be85 	b.w	80a1c84 <HAL_I2C_Available_Data>

080a1f7a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1f7a:	2100      	movs	r1, #0
 80a1f7c:	7c00      	ldrb	r0, [r0, #16]
 80a1f7e:	f7ff be89 	b.w	80a1c94 <HAL_I2C_Read_Data>

080a1f82 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1f82:	2100      	movs	r1, #0
 80a1f84:	7c00      	ldrb	r0, [r0, #16]
 80a1f86:	f7ff be8d 	b.w	80a1ca4 <HAL_I2C_Peek_Data>

080a1f8a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1f8a:	2100      	movs	r1, #0
 80a1f8c:	7c00      	ldrb	r0, [r0, #16]
 80a1f8e:	f7ff be91 	b.w	80a1cb4 <HAL_I2C_Flush_Data>

080a1f92 <_ZN7TwoWireD0Ev>:
 80a1f92:	b510      	push	{r4, lr}
 80a1f94:	4604      	mov	r4, r0
 80a1f96:	2114      	movs	r1, #20
 80a1f98:	f000 fccf 	bl	80a293a <_ZdlPvj>
 80a1f9c:	4620      	mov	r0, r4
 80a1f9e:	bd10      	pop	{r4, pc}

080a1fa0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1fa0:	b510      	push	{r4, lr}
 80a1fa2:	4604      	mov	r4, r0
 80a1fa4:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1faa:	60a3      	str	r3, [r4, #8]
 80a1fac:	4b04      	ldr	r3, [pc, #16]	; (80a1fc0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1fae:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1fb0:	7420      	strb	r0, [r4, #16]
 80a1fb2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1fb4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1fb6:	f7ff fe8d 	bl	80a1cd4 <HAL_I2C_Init>

}
 80a1fba:	4620      	mov	r0, r4
 80a1fbc:	bd10      	pop	{r4, pc}
 80a1fbe:	bf00      	nop
 80a1fc0:	080a2ce8 	.word	0x080a2ce8

080a1fc4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1fc4:	2300      	movs	r3, #0
 80a1fc6:	461a      	mov	r2, r3
 80a1fc8:	4619      	mov	r1, r3
 80a1fca:	7c00      	ldrb	r0, [r0, #16]
 80a1fcc:	f7ff be32 	b.w	80a1c34 <HAL_I2C_Begin>

080a1fd0 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a1fd0:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a1fd2:	2400      	movs	r4, #0
 80a1fd4:	7c00      	ldrb	r0, [r0, #16]
 80a1fd6:	9400      	str	r4, [sp, #0]
 80a1fd8:	f7ff fe34 	bl	80a1c44 <HAL_I2C_Request_Data>
  return result;
}
 80a1fdc:	b2c0      	uxtb	r0, r0
 80a1fde:	b002      	add	sp, #8
 80a1fe0:	bd10      	pop	{r4, pc}

080a1fe2 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a1fe2:	2301      	movs	r3, #1
 80a1fe4:	b2d2      	uxtb	r2, r2
 80a1fe6:	b2c9      	uxtb	r1, r1
 80a1fe8:	f7ff bff2 	b.w	80a1fd0 <_ZN7TwoWire11requestFromEhhh>

080a1fec <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a1fec:	2200      	movs	r2, #0
 80a1fee:	7c00      	ldrb	r0, [r0, #16]
 80a1ff0:	f7ff be30 	b.w	80a1c54 <HAL_I2C_Begin_Transmission>

080a1ff4 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a1ff4:	b2c9      	uxtb	r1, r1
 80a1ff6:	f7ff bff9 	b.w	80a1fec <_ZN7TwoWire17beginTransmissionEh>

080a1ffa <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a1ffa:	2200      	movs	r2, #0
 80a1ffc:	7c00      	ldrb	r0, [r0, #16]
 80a1ffe:	f7ff be31 	b.w	80a1c64 <HAL_I2C_End_Transmission>

080a2002 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a2002:	2101      	movs	r1, #1
 80a2004:	f7ff bff9 	b.w	80a1ffa <_ZN7TwoWire15endTransmissionEh>

080a2008 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a2008:	2100      	movs	r1, #0
 80a200a:	7c00      	ldrb	r0, [r0, #16]
 80a200c:	f7ff be5a 	b.w	80a1cc4 <HAL_I2C_Is_Enabled>

080a2010 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2010:	4770      	bx	lr

080a2012 <_ZN9IPAddressD0Ev>:
 80a2012:	b510      	push	{r4, lr}
 80a2014:	4604      	mov	r4, r0
 80a2016:	2118      	movs	r1, #24
 80a2018:	f000 fc8f 	bl	80a293a <_ZdlPvj>
 80a201c:	4620      	mov	r0, r4
 80a201e:	bd10      	pop	{r4, pc}

080a2020 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2022:	460f      	mov	r7, r1
 80a2024:	f100 0608 	add.w	r6, r0, #8
 80a2028:	1d05      	adds	r5, r0, #4
 80a202a:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a202c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2030:	220a      	movs	r2, #10
 80a2032:	4638      	mov	r0, r7
 80a2034:	f000 f927 	bl	80a2286 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2038:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a203a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a203c:	d007      	beq.n	80a204e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a203e:	2c00      	cmp	r4, #0
 80a2040:	d0f4      	beq.n	80a202c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2042:	212e      	movs	r1, #46	; 0x2e
 80a2044:	4638      	mov	r0, r7
 80a2046:	f000 f8db 	bl	80a2200 <_ZN5Print5printEc>
 80a204a:	4404      	add	r4, r0
 80a204c:	e7ee      	b.n	80a202c <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a204e:	4620      	mov	r0, r4
 80a2050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2054 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2054:	b510      	push	{r4, lr}
 80a2056:	4604      	mov	r4, r0
 80a2058:	4b04      	ldr	r3, [pc, #16]	; (80a206c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a205a:	2211      	movs	r2, #17
 80a205c:	f840 3b04 	str.w	r3, [r0], #4
 80a2060:	2100      	movs	r1, #0
 80a2062:	f000 fdce 	bl	80a2c02 <memset>
{
    clear();
}
 80a2066:	4620      	mov	r0, r4
 80a2068:	bd10      	pop	{r4, pc}
 80a206a:	bf00      	nop
 80a206c:	080a2d10 	.word	0x080a2d10

080a2070 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2070:	4603      	mov	r3, r0
 80a2072:	4a07      	ldr	r2, [pc, #28]	; (80a2090 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2074:	b510      	push	{r4, lr}
 80a2076:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a207a:	f101 0210 	add.w	r2, r1, #16
 80a207e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2082:	4291      	cmp	r1, r2
 80a2084:	f843 4b04 	str.w	r4, [r3], #4
 80a2088:	d1f9      	bne.n	80a207e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a208a:	780a      	ldrb	r2, [r1, #0]
 80a208c:	701a      	strb	r2, [r3, #0]
}
 80a208e:	bd10      	pop	{r4, pc}
 80a2090:	080a2d10 	.word	0x080a2d10

080a2094 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2094:	4a02      	ldr	r2, [pc, #8]	; (80a20a0 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a2096:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2098:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a209a:	2204      	movs	r2, #4
 80a209c:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a209e:	4770      	bx	lr
 80a20a0:	080a2d10 	.word	0x080a2d10

080a20a4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a20a4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a20a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a20aa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a20ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a20b2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a20b6:	2304      	movs	r3, #4
 80a20b8:	6041      	str	r1, [r0, #4]
 80a20ba:	7503      	strb	r3, [r0, #20]
 80a20bc:	bd10      	pop	{r4, pc}
	...

080a20c0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a20c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a20c2:	4d04      	ldr	r5, [pc, #16]	; (80a20d4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a20c4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a20c6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a20ca:	9500      	str	r5, [sp, #0]
 80a20cc:	f7ff ffea 	bl	80a20a4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a20d0:	b003      	add	sp, #12
 80a20d2:	bd30      	pop	{r4, r5, pc}
 80a20d4:	080a2d10 	.word	0x080a2d10

080a20d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a20d8:	4a01      	ldr	r2, [pc, #4]	; (80a20e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a20da:	4b02      	ldr	r3, [pc, #8]	; (80a20e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a20dc:	601a      	str	r2, [r3, #0]
 80a20de:	4770      	bx	lr
 80a20e0:	080a2d92 	.word	0x080a2d92
 80a20e4:	200001f0 	.word	0x200001f0

080a20e8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a20e8:	2300      	movs	r3, #0
 80a20ea:	461a      	mov	r2, r3
 80a20ec:	6840      	ldr	r0, [r0, #4]
 80a20ee:	f7ff bebf 	b.w	80a1e70 <network_connect>

080a20f2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a20f2:	2200      	movs	r2, #0
 80a20f4:	2102      	movs	r1, #2
 80a20f6:	6840      	ldr	r0, [r0, #4]
 80a20f8:	f7ff beca 	b.w	80a1e90 <network_disconnect>

080a20fc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a20fc:	2200      	movs	r2, #0
 80a20fe:	4611      	mov	r1, r2
 80a2100:	6840      	ldr	r0, [r0, #4]
 80a2102:	f7ff bebd 	b.w	80a1e80 <network_connecting>

080a2106 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2106:	2200      	movs	r2, #0
 80a2108:	4611      	mov	r1, r2
 80a210a:	6840      	ldr	r0, [r0, #4]
 80a210c:	f7ff bec8 	b.w	80a1ea0 <network_ready>

080a2110 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2110:	2300      	movs	r3, #0
 80a2112:	461a      	mov	r2, r3
 80a2114:	4619      	mov	r1, r3
 80a2116:	6840      	ldr	r0, [r0, #4]
 80a2118:	f7ff beca 	b.w	80a1eb0 <network_on>

080a211c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a211c:	2300      	movs	r3, #0
 80a211e:	461a      	mov	r2, r3
 80a2120:	4619      	mov	r1, r3
 80a2122:	6840      	ldr	r0, [r0, #4]
 80a2124:	f7ff becc 	b.w	80a1ec0 <network_off>

080a2128 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2128:	2200      	movs	r2, #0
 80a212a:	f081 0101 	eor.w	r1, r1, #1
 80a212e:	6840      	ldr	r0, [r0, #4]
 80a2130:	f7ff bece 	b.w	80a1ed0 <network_listen>

080a2134 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2134:	2200      	movs	r2, #0
 80a2136:	6840      	ldr	r0, [r0, #4]
 80a2138:	f7ff beda 	b.w	80a1ef0 <network_set_listen_timeout>

080a213c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a213c:	2200      	movs	r2, #0
 80a213e:	4611      	mov	r1, r2
 80a2140:	6840      	ldr	r0, [r0, #4]
 80a2142:	f7ff bedd 	b.w	80a1f00 <network_get_listen_timeout>

080a2146 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2146:	2200      	movs	r2, #0
 80a2148:	4611      	mov	r1, r2
 80a214a:	6840      	ldr	r0, [r0, #4]
 80a214c:	f7ff bec8 	b.w	80a1ee0 <network_listening>

080a2150 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2150:	b570      	push	{r4, r5, r6, lr}
 80a2152:	4616      	mov	r6, r2
 80a2154:	b08e      	sub	sp, #56	; 0x38
 80a2156:	4604      	mov	r4, r0
    IPAddress addr;
 80a2158:	a808      	add	r0, sp, #32
 80a215a:	f7ff ff7b 	bl	80a2054 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a215e:	2211      	movs	r2, #17
 80a2160:	2100      	movs	r1, #0
 80a2162:	a803      	add	r0, sp, #12
 80a2164:	f000 fd4d 	bl	80a2c02 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2168:	4630      	mov	r0, r6
 80a216a:	f000 fd7b 	bl	80a2c64 <strlen>
 80a216e:	2500      	movs	r5, #0
 80a2170:	4b0a      	ldr	r3, [pc, #40]	; (80a219c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2172:	9500      	str	r5, [sp, #0]
 80a2174:	b281      	uxth	r1, r0
 80a2176:	685b      	ldr	r3, [r3, #4]
 80a2178:	aa03      	add	r2, sp, #12
 80a217a:	4630      	mov	r0, r6
 80a217c:	f7ff fe3c 	bl	80a1df8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2180:	b120      	cbz	r0, 80a218c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2182:	4629      	mov	r1, r5
 80a2184:	4620      	mov	r0, r4
 80a2186:	f7ff ff85 	bl	80a2094 <_ZN9IPAddressC1Em>
 80a218a:	e003      	b.n	80a2194 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a218c:	a903      	add	r1, sp, #12
 80a218e:	4620      	mov	r0, r4
 80a2190:	f7ff ff6e 	bl	80a2070 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2194:	4620      	mov	r0, r4
 80a2196:	b00e      	add	sp, #56	; 0x38
 80a2198:	bd70      	pop	{r4, r5, r6, pc}
 80a219a:	bf00      	nop
 80a219c:	20000268 	.word	0x20000268

080a21a0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a21a0:	4b02      	ldr	r3, [pc, #8]	; (80a21ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a21a2:	4a03      	ldr	r2, [pc, #12]	; (80a21b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a21a4:	601a      	str	r2, [r3, #0]
 80a21a6:	2200      	movs	r2, #0
 80a21a8:	605a      	str	r2, [r3, #4]
 80a21aa:	4770      	bx	lr
 80a21ac:	200001f4 	.word	0x200001f4
 80a21b0:	080a2e08 	.word	0x080a2e08

080a21b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a21b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a21b6:	4606      	mov	r6, r0
 80a21b8:	460d      	mov	r5, r1
 80a21ba:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a21bc:	2400      	movs	r4, #0
  while (size--) {
 80a21be:	42bd      	cmp	r5, r7
 80a21c0:	d00c      	beq.n	80a21dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a21c2:	6833      	ldr	r3, [r6, #0]
 80a21c4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a21c8:	689b      	ldr	r3, [r3, #8]
 80a21ca:	4630      	mov	r0, r6
 80a21cc:	4798      	blx	r3
     if (chunk>=0)
 80a21ce:	2800      	cmp	r0, #0
 80a21d0:	db01      	blt.n	80a21d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a21d2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a21d4:	e7f3      	b.n	80a21be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a21d6:	2c00      	cmp	r4, #0
 80a21d8:	bf08      	it	eq
 80a21da:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a21dc:	4620      	mov	r0, r4
 80a21de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a21e0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a21e0:	b570      	push	{r4, r5, r6, lr}
 80a21e2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a21e4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a21e6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a21e8:	b149      	cbz	r1, 80a21fe <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a21ea:	f000 fd3b 	bl	80a2c64 <strlen>
 80a21ee:	682b      	ldr	r3, [r5, #0]
 80a21f0:	4602      	mov	r2, r0
 80a21f2:	4621      	mov	r1, r4
 80a21f4:	4628      	mov	r0, r5
    }
 80a21f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a21fa:	68db      	ldr	r3, [r3, #12]
 80a21fc:	4718      	bx	r3
    }
 80a21fe:	bd70      	pop	{r4, r5, r6, pc}

080a2200 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2200:	6803      	ldr	r3, [r0, #0]
 80a2202:	689b      	ldr	r3, [r3, #8]
 80a2204:	4718      	bx	r3

080a2206 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2206:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2208:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a220a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a220c:	f7ff fff8 	bl	80a2200 <_ZN5Print5printEc>
  n += print('\n');
 80a2210:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a2212:	4604      	mov	r4, r0
  n += print('\n');
 80a2214:	4628      	mov	r0, r5
 80a2216:	f7ff fff3 	bl	80a2200 <_ZN5Print5printEc>
  return n;
}
 80a221a:	4420      	add	r0, r4
 80a221c:	bd38      	pop	{r3, r4, r5, pc}

080a221e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a221e:	b538      	push	{r3, r4, r5, lr}
 80a2220:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2222:	f7ff ffdd 	bl	80a21e0 <_ZN5Print5writeEPKc>
 80a2226:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a2228:	4628      	mov	r0, r5
 80a222a:	f7ff ffec 	bl	80a2206 <_ZN5Print7printlnEv>
  return n;
}
 80a222e:	4420      	add	r0, r4
 80a2230:	bd38      	pop	{r3, r4, r5, pc}

080a2232 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2232:	2a01      	cmp	r2, #1
 80a2234:	bf98      	it	ls
 80a2236:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2238:	b530      	push	{r4, r5, lr}
 80a223a:	460b      	mov	r3, r1
 80a223c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a223e:	2100      	movs	r1, #0
 80a2240:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a2244:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a2248:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a224c:	fb05 3312 	mls	r3, r5, r2, r3
 80a2250:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2252:	2b09      	cmp	r3, #9
 80a2254:	bf94      	ite	ls
 80a2256:	3330      	addls	r3, #48	; 0x30
 80a2258:	3337      	addhi	r3, #55	; 0x37
 80a225a:	b2db      	uxtb	r3, r3
 80a225c:	4621      	mov	r1, r4
 80a225e:	f804 3901 	strb.w	r3, [r4], #-1
 80a2262:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2264:	2d00      	cmp	r5, #0
 80a2266:	d1ef      	bne.n	80a2248 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2268:	f7ff ffba 	bl	80a21e0 <_ZN5Print5writeEPKc>
}
 80a226c:	b00b      	add	sp, #44	; 0x2c
 80a226e:	bd30      	pop	{r4, r5, pc}

080a2270 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a2270:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a2272:	b922      	cbnz	r2, 80a227e <_ZN5Print5printEmi+0xe>
 80a2274:	6803      	ldr	r3, [r0, #0]
 80a2276:	b2c9      	uxtb	r1, r1
 80a2278:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a227a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a227c:	4718      	bx	r3
  else return printNumber(n, base);
 80a227e:	b2d2      	uxtb	r2, r2
}
 80a2280:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2282:	f7ff bfd6 	b.w	80a2232 <_ZN5Print11printNumberEmh>

080a2286 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a2286:	f7ff bff3 	b.w	80a2270 <_ZN5Print5printEmi>

080a228a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a228a:	b510      	push	{r4, lr}
 80a228c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a228e:	f7ff fe52 	bl	80a1f36 <_ZNSt14_Function_baseD1Ev>
 80a2292:	4620      	mov	r0, r4
 80a2294:	bd10      	pop	{r4, pc}
	...

080a2298 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2298:	4803      	ldr	r0, [pc, #12]	; (80a22a8 <_GLOBAL__sub_I_RGB+0x10>)
 80a229a:	2300      	movs	r3, #0
 80a229c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a229e:	4a03      	ldr	r2, [pc, #12]	; (80a22ac <_GLOBAL__sub_I_RGB+0x14>)
 80a22a0:	4903      	ldr	r1, [pc, #12]	; (80a22b0 <_GLOBAL__sub_I_RGB+0x18>)
 80a22a2:	f000 bb45 	b.w	80a2930 <__aeabi_atexit>
 80a22a6:	bf00      	nop
 80a22a8:	200001fc 	.word	0x200001fc
 80a22ac:	20000128 	.word	0x20000128
 80a22b0:	080a228b 	.word	0x080a228b

080a22b4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a22b4:	4770      	bx	lr

080a22b6 <_ZN8SPIClassD0Ev>:
 80a22b6:	b510      	push	{r4, lr}
 80a22b8:	4604      	mov	r4, r0
 80a22ba:	2110      	movs	r1, #16
 80a22bc:	f000 fb3d 	bl	80a293a <_ZdlPvj>
 80a22c0:	4620      	mov	r0, r4
 80a22c2:	bd10      	pop	{r4, pc}

080a22c4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a22c4:	b570      	push	{r4, r5, r6, lr}
 80a22c6:	4604      	mov	r4, r0
 80a22c8:	460e      	mov	r6, r1
 80a22ca:	4b07      	ldr	r3, [pc, #28]	; (80a22e8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a22cc:	2500      	movs	r5, #0
 80a22ce:	6003      	str	r3, [r0, #0]
 80a22d0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a22d4:	f7ff fc66 	bl	80a1ba4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a22d8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a22da:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a22dc:	f7ff fd0c 	bl	80a1cf8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a22e0:	60a5      	str	r5, [r4, #8]
}
 80a22e2:	4620      	mov	r0, r4
 80a22e4:	bd70      	pop	{r4, r5, r6, pc}
 80a22e6:	bf00      	nop
 80a22e8:	080a2e3c 	.word	0x080a2e3c

080a22ec <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a22ec:	7900      	ldrb	r0, [r0, #4]
 80a22ee:	f7ff bd0b 	b.w	80a1d08 <HAL_SPI_Is_Enabled>
	...

080a22f4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a22f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a22f8:	4b03      	ldr	r3, [pc, #12]	; (80a2308 <_GLOBAL__sub_I_System+0x14>)
 80a22fa:	2000      	movs	r0, #0
 80a22fc:	7018      	strb	r0, [r3, #0]
 80a22fe:	8058      	strh	r0, [r3, #2]
 80a2300:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2302:	f7ff bd81 	b.w	80a1e08 <set_system_mode>
 80a2306:	bf00      	nop
 80a2308:	2000020c 	.word	0x2000020c

080a230c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a230c:	4b02      	ldr	r3, [pc, #8]	; (80a2318 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a230e:	681a      	ldr	r2, [r3, #0]
 80a2310:	4b02      	ldr	r3, [pc, #8]	; (80a231c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2312:	601a      	str	r2, [r3, #0]
 80a2314:	4770      	bx	lr
 80a2316:	bf00      	nop
 80a2318:	200000c0 	.word	0x200000c0
 80a231c:	20000214 	.word	0x20000214

080a2320 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
 80a2320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a2322:	b285      	uxth	r5, r0

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
 80a2324:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a2326:	4628      	mov	r0, r5

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
 80a2328:	460e      	mov	r6, r1
 80a232a:	4617      	mov	r7, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a232c:	f000 fa58 	bl	80a27e0 <pinAvailable>
 80a2330:	b160      	cbz	r0, 80a234c <tone+0x2c>
 80a2332:	2102      	movs	r1, #2
 80a2334:	4628      	mov	r0, r5
 80a2336:	f7ff fc5d 	bl	80a1bf4 <HAL_Validate_Pin_Function>
 80a233a:	2802      	cmp	r0, #2
 80a233c:	d106      	bne.n	80a234c <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
 80a233e:	463a      	mov	r2, r7
 80a2340:	4631      	mov	r1, r6
 80a2342:	4620      	mov	r0, r4
    }
}
 80a2344:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Start(pin, frequency, duration);
 80a2348:	f7ff bcce 	b.w	80a1ce8 <HAL_Tone_Start>
 80a234c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a234e <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a234e:	4770      	bx	lr

080a2350 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2350:	7441      	strb	r1, [r0, #17]
 80a2352:	4770      	bx	lr

080a2354 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2354:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2356:	7c00      	ldrb	r0, [r0, #16]
 80a2358:	f7ff fd16 	bl	80a1d88 <HAL_USART_Available_Data_For_Write>
}
 80a235c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2360:	bd08      	pop	{r3, pc}

080a2362 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2362:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2364:	7c00      	ldrb	r0, [r0, #16]
 80a2366:	f7ff fce7 	bl	80a1d38 <HAL_USART_Available_Data>
}
 80a236a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a236e:	bd08      	pop	{r3, pc}

080a2370 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2370:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2372:	7c00      	ldrb	r0, [r0, #16]
 80a2374:	f7ff fcf0 	bl	80a1d58 <HAL_USART_Peek_Data>
}
 80a2378:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a237c:	bf28      	it	cs
 80a237e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2382:	bd08      	pop	{r3, pc}

080a2384 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2384:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2386:	7c00      	ldrb	r0, [r0, #16]
 80a2388:	f7ff fcde 	bl	80a1d48 <HAL_USART_Read_Data>
}
 80a238c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2390:	bf28      	it	cs
 80a2392:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2396:	bd08      	pop	{r3, pc}

080a2398 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2398:	7c00      	ldrb	r0, [r0, #16]
 80a239a:	f7ff bce5 	b.w	80a1d68 <HAL_USART_Flush_Data>

080a239e <_ZN11USARTSerialD0Ev>:
 80a239e:	b510      	push	{r4, lr}
 80a23a0:	4604      	mov	r4, r0
 80a23a2:	2114      	movs	r1, #20
 80a23a4:	f000 fac9 	bl	80a293a <_ZdlPvj>
 80a23a8:	4620      	mov	r0, r4
 80a23aa:	bd10      	pop	{r4, pc}

080a23ac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a23ac:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a23ae:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a23b0:	4604      	mov	r4, r0
 80a23b2:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a23b4:	b925      	cbnz	r5, 80a23c0 <_ZN11USARTSerial5writeEh+0x14>
 80a23b6:	7c00      	ldrb	r0, [r0, #16]
 80a23b8:	f7ff fce6 	bl	80a1d88 <HAL_USART_Available_Data_For_Write>
 80a23bc:	2800      	cmp	r0, #0
 80a23be:	dd05      	ble.n	80a23cc <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a23c0:	4631      	mov	r1, r6
 80a23c2:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a23c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a23c8:	f7ff bcae 	b.w	80a1d28 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a23cc:	4628      	mov	r0, r5
 80a23ce:	bd70      	pop	{r4, r5, r6, pc}

080a23d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a23d0:	b510      	push	{r4, lr}
 80a23d2:	4604      	mov	r4, r0
 80a23d4:	4608      	mov	r0, r1
 80a23d6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a23d8:	2200      	movs	r2, #0
 80a23da:	6062      	str	r2, [r4, #4]
 80a23dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a23e0:	60a2      	str	r2, [r4, #8]
 80a23e2:	4a05      	ldr	r2, [pc, #20]	; (80a23f8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a23e4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a23e6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a23e8:	2201      	movs	r2, #1
 80a23ea:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a23ec:	461a      	mov	r2, r3
 80a23ee:	f7ff fc93 	bl	80a1d18 <HAL_USART_Init>
}
 80a23f2:	4620      	mov	r0, r4
 80a23f4:	bd10      	pop	{r4, pc}
 80a23f6:	bf00      	nop
 80a23f8:	080a2e78 	.word	0x080a2e78

080a23fc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a23fc:	7c00      	ldrb	r0, [r0, #16]
 80a23fe:	f7ff bcbb 	b.w	80a1d78 <HAL_USART_Is_Enabled>
	...

080a2404 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a2406:	4c19      	ldr	r4, [pc, #100]	; (80a246c <_Z22__fetch_global_Serial1v+0x68>)
 80a2408:	6825      	ldr	r5, [r4, #0]
 80a240a:	b94d      	cbnz	r5, 80a2420 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a240c:	2084      	movs	r0, #132	; 0x84
 80a240e:	f7fd fe44 	bl	80a009a <_Znwj>
 80a2412:	4606      	mov	r6, r0
 80a2414:	b118      	cbz	r0, 80a241e <_Z22__fetch_global_Serial1v+0x1a>
 80a2416:	2284      	movs	r2, #132	; 0x84
 80a2418:	4629      	mov	r1, r5
 80a241a:	f000 fbf2 	bl	80a2c02 <memset>
 80a241e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a2420:	4d13      	ldr	r5, [pc, #76]	; (80a2470 <_Z22__fetch_global_Serial1v+0x6c>)
 80a2422:	682e      	ldr	r6, [r5, #0]
 80a2424:	b94e      	cbnz	r6, 80a243a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a2426:	2084      	movs	r0, #132	; 0x84
 80a2428:	f7fd fe37 	bl	80a009a <_Znwj>
 80a242c:	4607      	mov	r7, r0
 80a242e:	b118      	cbz	r0, 80a2438 <_Z22__fetch_global_Serial1v+0x34>
 80a2430:	2284      	movs	r2, #132	; 0x84
 80a2432:	4631      	mov	r1, r6
 80a2434:	f000 fbe5 	bl	80a2c02 <memset>
 80a2438:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a243a:	4f0e      	ldr	r7, [pc, #56]	; (80a2474 <_Z22__fetch_global_Serial1v+0x70>)
 80a243c:	6839      	ldr	r1, [r7, #0]
 80a243e:	f011 0601 	ands.w	r6, r1, #1
 80a2442:	d111      	bne.n	80a2468 <_Z22__fetch_global_Serial1v+0x64>
 80a2444:	4638      	mov	r0, r7
 80a2446:	f7fd fe2c 	bl	80a00a2 <__cxa_guard_acquire>
 80a244a:	b168      	cbz	r0, 80a2468 <_Z22__fetch_global_Serial1v+0x64>
 80a244c:	6822      	ldr	r2, [r4, #0]
 80a244e:	4631      	mov	r1, r6
 80a2450:	682b      	ldr	r3, [r5, #0]
 80a2452:	4809      	ldr	r0, [pc, #36]	; (80a2478 <_Z22__fetch_global_Serial1v+0x74>)
 80a2454:	f7ff ffbc 	bl	80a23d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2458:	4638      	mov	r0, r7
 80a245a:	f7fd fe27 	bl	80a00ac <__cxa_guard_release>
 80a245e:	4a07      	ldr	r2, [pc, #28]	; (80a247c <_Z22__fetch_global_Serial1v+0x78>)
 80a2460:	4907      	ldr	r1, [pc, #28]	; (80a2480 <_Z22__fetch_global_Serial1v+0x7c>)
 80a2462:	4805      	ldr	r0, [pc, #20]	; (80a2478 <_Z22__fetch_global_Serial1v+0x74>)
 80a2464:	f000 fa64 	bl	80a2930 <__aeabi_atexit>
#endif
	return serial1;
}
 80a2468:	4803      	ldr	r0, [pc, #12]	; (80a2478 <_Z22__fetch_global_Serial1v+0x74>)
 80a246a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a246c:	20000234 	.word	0x20000234
 80a2470:	2000022c 	.word	0x2000022c
 80a2474:	20000230 	.word	0x20000230
 80a2478:	20000218 	.word	0x20000218
 80a247c:	20000128 	.word	0x20000128
 80a2480:	080a234f 	.word	0x080a234f

080a2484 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2484:	7441      	strb	r1, [r0, #17]
 80a2486:	4770      	bx	lr

080a2488 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2488:	4770      	bx	lr

080a248a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a248a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a248c:	2100      	movs	r1, #0
 80a248e:	7c00      	ldrb	r0, [r0, #16]
 80a2490:	f7ff fc9a 	bl	80a1dc8 <HAL_USB_USART_Receive_Data>
}
 80a2494:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2498:	bf28      	it	cs
 80a249a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a249e:	bd08      	pop	{r3, pc}

080a24a0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a24a0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a24a2:	2101      	movs	r1, #1
 80a24a4:	7c00      	ldrb	r0, [r0, #16]
 80a24a6:	f7ff fc8f 	bl	80a1dc8 <HAL_USB_USART_Receive_Data>
}
 80a24aa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a24ae:	bf28      	it	cs
 80a24b0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a24b4:	bd08      	pop	{r3, pc}

080a24b6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a24b6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a24b8:	7c00      	ldrb	r0, [r0, #16]
 80a24ba:	f7ff fc7d 	bl	80a1db8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a24be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a24c2:	bd08      	pop	{r3, pc}

080a24c4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a24c4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a24c6:	7c00      	ldrb	r0, [r0, #16]
 80a24c8:	f7ff fc6e 	bl	80a1da8 <HAL_USB_USART_Available_Data>
}
 80a24cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a24d0:	bd08      	pop	{r3, pc}

080a24d2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a24d2:	7c00      	ldrb	r0, [r0, #16]
 80a24d4:	f7ff bc88 	b.w	80a1de8 <HAL_USB_USART_Flush_Data>

080a24d8 <_ZN9USBSerialD0Ev>:
 80a24d8:	b510      	push	{r4, lr}
 80a24da:	4604      	mov	r4, r0
 80a24dc:	2114      	movs	r1, #20
 80a24de:	f000 fa2c 	bl	80a293a <_ZdlPvj>
 80a24e2:	4620      	mov	r0, r4
 80a24e4:	bd10      	pop	{r4, pc}

080a24e6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a24e6:	b538      	push	{r3, r4, r5, lr}
 80a24e8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a24ea:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a24ec:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a24ee:	f7ff fc63 	bl	80a1db8 <HAL_USB_USART_Available_Data_For_Write>
 80a24f2:	2800      	cmp	r0, #0
 80a24f4:	dc01      	bgt.n	80a24fa <_ZN9USBSerial5writeEh+0x14>
 80a24f6:	7c60      	ldrb	r0, [r4, #17]
 80a24f8:	b128      	cbz	r0, 80a2506 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a24fa:	4629      	mov	r1, r5
 80a24fc:	7c20      	ldrb	r0, [r4, #16]
 80a24fe:	f7ff fc6b 	bl	80a1dd8 <HAL_USB_USART_Send_Data>
 80a2502:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2506:	bd38      	pop	{r3, r4, r5, pc}

080a2508 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2508:	b510      	push	{r4, lr}
 80a250a:	4604      	mov	r4, r0
 80a250c:	2300      	movs	r3, #0
 80a250e:	6063      	str	r3, [r4, #4]
 80a2510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2514:	60a3      	str	r3, [r4, #8]
 80a2516:	4b05      	ldr	r3, [pc, #20]	; (80a252c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2518:	4608      	mov	r0, r1
 80a251a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a251c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a251e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2520:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2522:	4611      	mov	r1, r2
 80a2524:	f7ff fc38 	bl	80a1d98 <HAL_USB_USART_Init>
}
 80a2528:	4620      	mov	r0, r4
 80a252a:	bd10      	pop	{r4, pc}
 80a252c:	080a2ea8 	.word	0x080a2ea8

080a2530 <_Z19acquireSerialBufferv>:
 80a2530:	b510      	push	{r4, lr}
 80a2532:	4604      	mov	r4, r0
 80a2534:	2214      	movs	r2, #20
 80a2536:	2100      	movs	r1, #0
 80a2538:	f000 fb63 	bl	80a2c02 <memset>
 80a253c:	4620      	mov	r0, r4
 80a253e:	bd10      	pop	{r4, pc}

080a2540 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2540:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2542:	4d0e      	ldr	r5, [pc, #56]	; (80a257c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2544:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2546:	a801      	add	r0, sp, #4
 80a2548:	f7ff fff2 	bl	80a2530 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a254c:	6829      	ldr	r1, [r5, #0]
 80a254e:	f011 0401 	ands.w	r4, r1, #1
 80a2552:	d110      	bne.n	80a2576 <_Z16_fetch_usbserialv+0x36>
 80a2554:	4628      	mov	r0, r5
 80a2556:	f7fd fda4 	bl	80a00a2 <__cxa_guard_acquire>
 80a255a:	b160      	cbz	r0, 80a2576 <_Z16_fetch_usbserialv+0x36>
 80a255c:	aa01      	add	r2, sp, #4
 80a255e:	4621      	mov	r1, r4
 80a2560:	4807      	ldr	r0, [pc, #28]	; (80a2580 <_Z16_fetch_usbserialv+0x40>)
 80a2562:	f7ff ffd1 	bl	80a2508 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2566:	4628      	mov	r0, r5
 80a2568:	f7fd fda0 	bl	80a00ac <__cxa_guard_release>
 80a256c:	4a05      	ldr	r2, [pc, #20]	; (80a2584 <_Z16_fetch_usbserialv+0x44>)
 80a256e:	4906      	ldr	r1, [pc, #24]	; (80a2588 <_Z16_fetch_usbserialv+0x48>)
 80a2570:	4803      	ldr	r0, [pc, #12]	; (80a2580 <_Z16_fetch_usbserialv+0x40>)
 80a2572:	f000 f9dd 	bl	80a2930 <__aeabi_atexit>
	return _usbserial;
}
 80a2576:	4802      	ldr	r0, [pc, #8]	; (80a2580 <_Z16_fetch_usbserialv+0x40>)
 80a2578:	b007      	add	sp, #28
 80a257a:	bd30      	pop	{r4, r5, pc}
 80a257c:	20000238 	.word	0x20000238
 80a2580:	20000240 	.word	0x20000240
 80a2584:	20000128 	.word	0x20000128
 80a2588:	080a2489 	.word	0x080a2489

080a258c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a258c:	b510      	push	{r4, lr}
 80a258e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2590:	2214      	movs	r2, #20
 80a2592:	2100      	movs	r1, #0
 80a2594:	f000 fb35 	bl	80a2c02 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2598:	4620      	mov	r0, r4
 80a259a:	bd10      	pop	{r4, pc}

080a259c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a259c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a259e:	4c0e      	ldr	r4, [pc, #56]	; (80a25d8 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a25a0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a25a2:	a801      	add	r0, sp, #4
 80a25a4:	f7ff fff2 	bl	80a258c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a25a8:	6823      	ldr	r3, [r4, #0]
 80a25aa:	07db      	lsls	r3, r3, #31
 80a25ac:	d410      	bmi.n	80a25d0 <_Z17_fetch_usbserial1v+0x34>
 80a25ae:	4620      	mov	r0, r4
 80a25b0:	f7fd fd77 	bl	80a00a2 <__cxa_guard_acquire>
 80a25b4:	b160      	cbz	r0, 80a25d0 <_Z17_fetch_usbserial1v+0x34>
 80a25b6:	aa01      	add	r2, sp, #4
 80a25b8:	2101      	movs	r1, #1
 80a25ba:	4808      	ldr	r0, [pc, #32]	; (80a25dc <_Z17_fetch_usbserial1v+0x40>)
 80a25bc:	f7ff ffa4 	bl	80a2508 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a25c0:	4620      	mov	r0, r4
 80a25c2:	f7fd fd73 	bl	80a00ac <__cxa_guard_release>
 80a25c6:	4a06      	ldr	r2, [pc, #24]	; (80a25e0 <_Z17_fetch_usbserial1v+0x44>)
 80a25c8:	4906      	ldr	r1, [pc, #24]	; (80a25e4 <_Z17_fetch_usbserial1v+0x48>)
 80a25ca:	4804      	ldr	r0, [pc, #16]	; (80a25dc <_Z17_fetch_usbserial1v+0x40>)
 80a25cc:	f000 f9b0 	bl	80a2930 <__aeabi_atexit>
  return _usbserial1;
}
 80a25d0:	4802      	ldr	r0, [pc, #8]	; (80a25dc <_Z17_fetch_usbserial1v+0x40>)
 80a25d2:	b006      	add	sp, #24
 80a25d4:	bd10      	pop	{r4, pc}
 80a25d6:	bf00      	nop
 80a25d8:	2000023c 	.word	0x2000023c
 80a25dc:	20000254 	.word	0x20000254
 80a25e0:	20000128 	.word	0x20000128
 80a25e4:	080a2489 	.word	0x080a2489

080a25e8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a25e8:	2200      	movs	r2, #0
 80a25ea:	4611      	mov	r1, r2
 80a25ec:	6840      	ldr	r0, [r0, #4]
 80a25ee:	f7ff bc57 	b.w	80a1ea0 <network_ready>

080a25f2 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a25f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a25f4:	4616      	mov	r6, r2
 80a25f6:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a25f8:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a25fa:	460f      	mov	r7, r1
 80a25fc:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a25fe:	2100      	movs	r1, #0
 80a2600:	a803      	add	r0, sp, #12
 80a2602:	f000 fafe 	bl	80a2c02 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2606:	4630      	mov	r0, r6
 80a2608:	f000 fb2c 	bl	80a2c64 <strlen>
 80a260c:	2500      	movs	r5, #0
 80a260e:	9500      	str	r5, [sp, #0]
 80a2610:	b281      	uxth	r1, r0
 80a2612:	687b      	ldr	r3, [r7, #4]
 80a2614:	aa03      	add	r2, sp, #12
 80a2616:	4630      	mov	r0, r6
 80a2618:	f7ff fbee 	bl	80a1df8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a261c:	b120      	cbz	r0, 80a2628 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a261e:	4629      	mov	r1, r5
 80a2620:	4620      	mov	r0, r4
 80a2622:	f7ff fd37 	bl	80a2094 <_ZN9IPAddressC1Em>
 80a2626:	e003      	b.n	80a2630 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2628:	a903      	add	r1, sp, #12
 80a262a:	4620      	mov	r0, r4
 80a262c:	f7ff fd20 	bl	80a2070 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2630:	4620      	mov	r0, r4
 80a2632:	b009      	add	sp, #36	; 0x24
 80a2634:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2636 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2636:	2200      	movs	r2, #0
 80a2638:	4611      	mov	r1, r2
 80a263a:	6840      	ldr	r0, [r0, #4]
 80a263c:	f7ff bc50 	b.w	80a1ee0 <network_listening>

080a2640 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2640:	2200      	movs	r2, #0
 80a2642:	4611      	mov	r1, r2
 80a2644:	6840      	ldr	r0, [r0, #4]
 80a2646:	f7ff bc5b 	b.w	80a1f00 <network_get_listen_timeout>

080a264a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a264a:	2200      	movs	r2, #0
 80a264c:	6840      	ldr	r0, [r0, #4]
 80a264e:	f7ff bc4f 	b.w	80a1ef0 <network_set_listen_timeout>

080a2652 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2652:	2200      	movs	r2, #0
 80a2654:	f081 0101 	eor.w	r1, r1, #1
 80a2658:	6840      	ldr	r0, [r0, #4]
 80a265a:	f7ff bc39 	b.w	80a1ed0 <network_listen>

080a265e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a265e:	2300      	movs	r3, #0
 80a2660:	461a      	mov	r2, r3
 80a2662:	4619      	mov	r1, r3
 80a2664:	6840      	ldr	r0, [r0, #4]
 80a2666:	f7ff bc2b 	b.w	80a1ec0 <network_off>

080a266a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a266a:	2300      	movs	r3, #0
 80a266c:	461a      	mov	r2, r3
 80a266e:	4619      	mov	r1, r3
 80a2670:	6840      	ldr	r0, [r0, #4]
 80a2672:	f7ff bc1d 	b.w	80a1eb0 <network_on>

080a2676 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2676:	2200      	movs	r2, #0
 80a2678:	4611      	mov	r1, r2
 80a267a:	6840      	ldr	r0, [r0, #4]
 80a267c:	f7ff bc00 	b.w	80a1e80 <network_connecting>

080a2680 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2680:	2200      	movs	r2, #0
 80a2682:	2102      	movs	r1, #2
 80a2684:	6840      	ldr	r0, [r0, #4]
 80a2686:	f7ff bc03 	b.w	80a1e90 <network_disconnect>

080a268a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a268a:	2300      	movs	r3, #0
 80a268c:	461a      	mov	r2, r3
 80a268e:	6840      	ldr	r0, [r0, #4]
 80a2690:	f7ff bbee 	b.w	80a1e70 <network_connect>

080a2694 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2694:	4b02      	ldr	r3, [pc, #8]	; (80a26a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2696:	2204      	movs	r2, #4
 80a2698:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a269a:	4a02      	ldr	r2, [pc, #8]	; (80a26a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a269c:	601a      	str	r2, [r3, #0]
 80a269e:	4770      	bx	lr
 80a26a0:	20000268 	.word	0x20000268
 80a26a4:	080a2ed8 	.word	0x080a2ed8

080a26a8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a26a8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a26aa:	4b14      	ldr	r3, [pc, #80]	; (80a26fc <serialEventRun+0x54>)
 80a26ac:	b133      	cbz	r3, 80a26bc <serialEventRun+0x14>
 80a26ae:	f7ff ff47 	bl	80a2540 <_Z16_fetch_usbserialv>
 80a26b2:	6803      	ldr	r3, [r0, #0]
 80a26b4:	691b      	ldr	r3, [r3, #16]
 80a26b6:	4798      	blx	r3
 80a26b8:	2800      	cmp	r0, #0
 80a26ba:	dc16      	bgt.n	80a26ea <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a26bc:	4b10      	ldr	r3, [pc, #64]	; (80a2700 <serialEventRun+0x58>)
 80a26be:	b133      	cbz	r3, 80a26ce <serialEventRun+0x26>
 80a26c0:	f7ff fea0 	bl	80a2404 <_Z22__fetch_global_Serial1v>
 80a26c4:	6803      	ldr	r3, [r0, #0]
 80a26c6:	691b      	ldr	r3, [r3, #16]
 80a26c8:	4798      	blx	r3
 80a26ca:	2800      	cmp	r0, #0
 80a26cc:	dc10      	bgt.n	80a26f0 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a26ce:	4b0d      	ldr	r3, [pc, #52]	; (80a2704 <serialEventRun+0x5c>)
 80a26d0:	b10b      	cbz	r3, 80a26d6 <serialEventRun+0x2e>
 80a26d2:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a26d6:	4b0c      	ldr	r3, [pc, #48]	; (80a2708 <serialEventRun+0x60>)
 80a26d8:	b17b      	cbz	r3, 80a26fa <serialEventRun+0x52>
 80a26da:	f7ff ff5f 	bl	80a259c <_Z17_fetch_usbserial1v>
 80a26de:	6803      	ldr	r3, [r0, #0]
 80a26e0:	691b      	ldr	r3, [r3, #16]
 80a26e2:	4798      	blx	r3
 80a26e4:	2800      	cmp	r0, #0
 80a26e6:	dc06      	bgt.n	80a26f6 <serialEventRun+0x4e>
 80a26e8:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a26ea:	f3af 8000 	nop.w
 80a26ee:	e7e5      	b.n	80a26bc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a26f0:	f3af 8000 	nop.w
 80a26f4:	e7eb      	b.n	80a26ce <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a26f6:	f3af 8000 	nop.w
 80a26fa:	bd08      	pop	{r3, pc}
	...

080a270c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a270c:	b508      	push	{r3, lr}
	serialEventRun();
 80a270e:	f7ff ffcb 	bl	80a26a8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2712:	f7ff fa5f 	bl	80a1bd4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2716:	4b01      	ldr	r3, [pc, #4]	; (80a271c <_post_loop+0x10>)
 80a2718:	6018      	str	r0, [r3, #0]
 80a271a:	bd08      	pop	{r3, pc}
 80a271c:	20000278 	.word	0x20000278

080a2720 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2720:	4802      	ldr	r0, [pc, #8]	; (80a272c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2722:	4a03      	ldr	r2, [pc, #12]	; (80a2730 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2724:	4903      	ldr	r1, [pc, #12]	; (80a2734 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2726:	1a12      	subs	r2, r2, r0
 80a2728:	f000 ba60 	b.w	80a2bec <memcpy>
 80a272c:	40024000 	.word	0x40024000
 80a2730:	40024004 	.word	0x40024004
 80a2734:	080a2fc0 	.word	0x080a2fc0

080a2738 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2738:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a273a:	2300      	movs	r3, #0
 80a273c:	9300      	str	r3, [sp, #0]
 80a273e:	461a      	mov	r2, r3
 80a2740:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2744:	f7ff fb7a 	bl	80a1e3c <system_ctrl_set_result>
}
 80a2748:	b003      	add	sp, #12
 80a274a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2750 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2750:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2752:	8843      	ldrh	r3, [r0, #2]
 80a2754:	2b0a      	cmp	r3, #10
 80a2756:	d008      	beq.n	80a276a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2758:	2b50      	cmp	r3, #80	; 0x50
 80a275a:	d109      	bne.n	80a2770 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a275c:	4b09      	ldr	r3, [pc, #36]	; (80a2784 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a275e:	681b      	ldr	r3, [r3, #0]
 80a2760:	b13b      	cbz	r3, 80a2772 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2762:	b003      	add	sp, #12
 80a2764:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2768:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a276a:	f7ff ffe5 	bl	80a2738 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a276e:	e006      	b.n	80a277e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2770:	2300      	movs	r3, #0
 80a2772:	9300      	str	r3, [sp, #0]
 80a2774:	461a      	mov	r2, r3
 80a2776:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a277a:	f7ff fb5f 	bl	80a1e3c <system_ctrl_set_result>
        break;
    }
}
 80a277e:	b003      	add	sp, #12
 80a2780:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2784:	20000270 	.word	0x20000270

080a2788 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2788:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a278a:	4c10      	ldr	r4, [pc, #64]	; (80a27cc <module_user_init_hook+0x44>)
 80a278c:	4d10      	ldr	r5, [pc, #64]	; (80a27d0 <module_user_init_hook+0x48>)
 80a278e:	6823      	ldr	r3, [r4, #0]
 80a2790:	42ab      	cmp	r3, r5
 80a2792:	4b10      	ldr	r3, [pc, #64]	; (80a27d4 <module_user_init_hook+0x4c>)
 80a2794:	bf0c      	ite	eq
 80a2796:	2201      	moveq	r2, #1
 80a2798:	2200      	movne	r2, #0
 80a279a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a279c:	d002      	beq.n	80a27a4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a279e:	f7ff ffbf 	bl	80a2720 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a27a2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a27a4:	f7ff fa06 	bl	80a1bb4 <HAL_RNG_GetRandomNumber>
 80a27a8:	4604      	mov	r4, r0
    srand(seed);
 80a27aa:	f000 fa33 	bl	80a2c14 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a27ae:	4b0a      	ldr	r3, [pc, #40]	; (80a27d8 <module_user_init_hook+0x50>)
 80a27b0:	b113      	cbz	r3, 80a27b8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a27b2:	4620      	mov	r0, r4
 80a27b4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a27b8:	2100      	movs	r1, #0
 80a27ba:	4807      	ldr	r0, [pc, #28]	; (80a27d8 <module_user_init_hook+0x50>)
 80a27bc:	f7ff fb50 	bl	80a1e60 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a27c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a27c4:	2100      	movs	r1, #0
 80a27c6:	4805      	ldr	r0, [pc, #20]	; (80a27dc <module_user_init_hook+0x54>)
 80a27c8:	f7ff bb2e 	b.w	80a1e28 <system_ctrl_set_app_request_handler>
 80a27cc:	40024000 	.word	0x40024000
 80a27d0:	9a271c1e 	.word	0x9a271c1e
 80a27d4:	20000274 	.word	0x20000274
 80a27d8:	00000000 	.word	0x00000000
 80a27dc:	080a2751 	.word	0x080a2751

080a27e0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a27e0:	b510      	push	{r4, lr}
 80a27e2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a27e4:	480f      	ldr	r0, [pc, #60]	; (80a2824 <pinAvailable+0x44>)
 80a27e6:	f7ff fd81 	bl	80a22ec <_ZN8SPIClass9isEnabledEv>
 80a27ea:	b128      	cbz	r0, 80a27f8 <pinAvailable+0x18>
 80a27ec:	f1a4 030d 	sub.w	r3, r4, #13
 80a27f0:	2b02      	cmp	r3, #2
 80a27f2:	d801      	bhi.n	80a27f8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a27f4:	2000      	movs	r0, #0
 80a27f6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a27f8:	f000 f840 	bl	80a287c <_Z19__fetch_global_Wirev>
 80a27fc:	f7ff fc04 	bl	80a2008 <_ZN7TwoWire9isEnabledEv>
 80a2800:	b108      	cbz	r0, 80a2806 <pinAvailable+0x26>
 80a2802:	2c01      	cmp	r4, #1
 80a2804:	d9f6      	bls.n	80a27f4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2806:	f7ff fdfd 	bl	80a2404 <_Z22__fetch_global_Serial1v>
 80a280a:	f7ff fdf7 	bl	80a23fc <_ZN11USARTSerial9isEnabledEv>
 80a280e:	b118      	cbz	r0, 80a2818 <pinAvailable+0x38>
 80a2810:	f1a4 0312 	sub.w	r3, r4, #18
 80a2814:	2b01      	cmp	r3, #1
 80a2816:	d9ed      	bls.n	80a27f4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2818:	2c17      	cmp	r4, #23
 80a281a:	bf8c      	ite	hi
 80a281c:	2000      	movhi	r0, #0
 80a281e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2820:	bd10      	pop	{r4, pc}
 80a2822:	bf00      	nop
 80a2824:	200002ac 	.word	0x200002ac

080a2828 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2828:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a282a:	b538      	push	{r3, r4, r5, lr}
 80a282c:	4604      	mov	r4, r0
 80a282e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2830:	d80a      	bhi.n	80a2848 <pinMode+0x20>
 80a2832:	29ff      	cmp	r1, #255	; 0xff
 80a2834:	d008      	beq.n	80a2848 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2836:	f7ff ffd3 	bl	80a27e0 <pinAvailable>
 80a283a:	b128      	cbz	r0, 80a2848 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a283c:	4629      	mov	r1, r5
 80a283e:	4620      	mov	r0, r4
}
 80a2840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2844:	f7ff b9de 	b.w	80a1c04 <HAL_Pin_Mode>
 80a2848:	bd38      	pop	{r3, r4, r5, pc}

080a284a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a284a:	b538      	push	{r3, r4, r5, lr}
 80a284c:	4604      	mov	r4, r0
 80a284e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2850:	f7ff f9e0 	bl	80a1c14 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2854:	28ff      	cmp	r0, #255	; 0xff
 80a2856:	d010      	beq.n	80a287a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2858:	2806      	cmp	r0, #6
 80a285a:	d804      	bhi.n	80a2866 <digitalWrite+0x1c>
 80a285c:	234d      	movs	r3, #77	; 0x4d
 80a285e:	fa23 f000 	lsr.w	r0, r3, r0
 80a2862:	07c3      	lsls	r3, r0, #31
 80a2864:	d409      	bmi.n	80a287a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2866:	4620      	mov	r0, r4
 80a2868:	f7ff ffba 	bl	80a27e0 <pinAvailable>
 80a286c:	b128      	cbz	r0, 80a287a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a286e:	4629      	mov	r1, r5
 80a2870:	4620      	mov	r0, r4
}
 80a2872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2876:	f7ff b9d5 	b.w	80a1c24 <HAL_GPIO_Write>
 80a287a:	bd38      	pop	{r3, r4, r5, pc}

080a287c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a287c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a287e:	4d0b      	ldr	r5, [pc, #44]	; (80a28ac <_Z19__fetch_global_Wirev+0x30>)
 80a2880:	6829      	ldr	r1, [r5, #0]
 80a2882:	f011 0401 	ands.w	r4, r1, #1
 80a2886:	d10f      	bne.n	80a28a8 <_Z19__fetch_global_Wirev+0x2c>
 80a2888:	4628      	mov	r0, r5
 80a288a:	f7fd fc0a 	bl	80a00a2 <__cxa_guard_acquire>
 80a288e:	b158      	cbz	r0, 80a28a8 <_Z19__fetch_global_Wirev+0x2c>
 80a2890:	4621      	mov	r1, r4
 80a2892:	4807      	ldr	r0, [pc, #28]	; (80a28b0 <_Z19__fetch_global_Wirev+0x34>)
 80a2894:	f7ff fb84 	bl	80a1fa0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2898:	4628      	mov	r0, r5
 80a289a:	f7fd fc07 	bl	80a00ac <__cxa_guard_release>
 80a289e:	4a05      	ldr	r2, [pc, #20]	; (80a28b4 <_Z19__fetch_global_Wirev+0x38>)
 80a28a0:	4905      	ldr	r1, [pc, #20]	; (80a28b8 <_Z19__fetch_global_Wirev+0x3c>)
 80a28a2:	4803      	ldr	r0, [pc, #12]	; (80a28b0 <_Z19__fetch_global_Wirev+0x34>)
 80a28a4:	f000 f844 	bl	80a2930 <__aeabi_atexit>
	return wire;
}
 80a28a8:	4801      	ldr	r0, [pc, #4]	; (80a28b0 <_Z19__fetch_global_Wirev+0x34>)
 80a28aa:	bd38      	pop	{r3, r4, r5, pc}
 80a28ac:	2000027c 	.word	0x2000027c
 80a28b0:	20000280 	.word	0x20000280
 80a28b4:	20000128 	.word	0x20000128
 80a28b8:	080a1f49 	.word	0x080a1f49

080a28bc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a28bc:	b513      	push	{r0, r1, r4, lr}
 80a28be:	4c08      	ldr	r4, [pc, #32]	; (80a28e0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a28c0:	2300      	movs	r3, #0
 80a28c2:	461a      	mov	r2, r3
 80a28c4:	4619      	mov	r1, r3
 80a28c6:	9300      	str	r3, [sp, #0]
 80a28c8:	4620      	mov	r0, r4
 80a28ca:	f7ff fbf9 	bl	80a20c0 <_ZN9IPAddressC1Ehhhh>
 80a28ce:	4620      	mov	r0, r4
 80a28d0:	4a04      	ldr	r2, [pc, #16]	; (80a28e4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a28d2:	4905      	ldr	r1, [pc, #20]	; (80a28e8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a28d4:	b002      	add	sp, #8
 80a28d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a28da:	f000 b829 	b.w	80a2930 <__aeabi_atexit>
 80a28de:	bf00      	nop
 80a28e0:	20000294 	.word	0x20000294
 80a28e4:	20000128 	.word	0x20000128
 80a28e8:	080a2011 	.word	0x080a2011

080a28ec <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a28ec:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a28ee:	4c0c      	ldr	r4, [pc, #48]	; (80a2920 <_GLOBAL__sub_I_SPI+0x34>)
 80a28f0:	4e0c      	ldr	r6, [pc, #48]	; (80a2924 <_GLOBAL__sub_I_SPI+0x38>)
 80a28f2:	4d0d      	ldr	r5, [pc, #52]	; (80a2928 <_GLOBAL__sub_I_SPI+0x3c>)
 80a28f4:	2100      	movs	r1, #0
 80a28f6:	4620      	mov	r0, r4
 80a28f8:	f7ff fce4 	bl	80a22c4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a28fc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a28fe:	4c0b      	ldr	r4, [pc, #44]	; (80a292c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2900:	4632      	mov	r2, r6
 80a2902:	4629      	mov	r1, r5
 80a2904:	f000 f814 	bl	80a2930 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2908:	2101      	movs	r1, #1
 80a290a:	4620      	mov	r0, r4
 80a290c:	f7ff fcda 	bl	80a22c4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2910:	4632      	mov	r2, r6
 80a2912:	4629      	mov	r1, r5
 80a2914:	4620      	mov	r0, r4
 80a2916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a291a:	f000 b809 	b.w	80a2930 <__aeabi_atexit>
 80a291e:	bf00      	nop
 80a2920:	200002ac 	.word	0x200002ac
 80a2924:	20000128 	.word	0x20000128
 80a2928:	080a22b5 	.word	0x080a22b5
 80a292c:	200002bc 	.word	0x200002bc

080a2930 <__aeabi_atexit>:
 80a2930:	460b      	mov	r3, r1
 80a2932:	4601      	mov	r1, r0
 80a2934:	4618      	mov	r0, r3
 80a2936:	f000 b94b 	b.w	80a2bd0 <__cxa_atexit>

080a293a <_ZdlPvj>:
 80a293a:	f7fd bbb0 	b.w	80a009e <_ZdlPv>
	...

080a2940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2940:	4b24      	ldr	r3, [pc, #144]	; (80a29d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2942:	681a      	ldr	r2, [r3, #0]
 80a2944:	07d0      	lsls	r0, r2, #31
 80a2946:	bf5c      	itt	pl
 80a2948:	2201      	movpl	r2, #1
 80a294a:	601a      	strpl	r2, [r3, #0]
 80a294c:	4b22      	ldr	r3, [pc, #136]	; (80a29d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a294e:	681a      	ldr	r2, [r3, #0]
 80a2950:	07d1      	lsls	r1, r2, #31
 80a2952:	bf5c      	itt	pl
 80a2954:	2201      	movpl	r2, #1
 80a2956:	601a      	strpl	r2, [r3, #0]
 80a2958:	4b20      	ldr	r3, [pc, #128]	; (80a29dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a295a:	681a      	ldr	r2, [r3, #0]
 80a295c:	07d2      	lsls	r2, r2, #31
 80a295e:	bf5c      	itt	pl
 80a2960:	2201      	movpl	r2, #1
 80a2962:	601a      	strpl	r2, [r3, #0]
 80a2964:	4b1e      	ldr	r3, [pc, #120]	; (80a29e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2966:	681a      	ldr	r2, [r3, #0]
 80a2968:	07d0      	lsls	r0, r2, #31
 80a296a:	bf5c      	itt	pl
 80a296c:	2201      	movpl	r2, #1
 80a296e:	601a      	strpl	r2, [r3, #0]
 80a2970:	4b1c      	ldr	r3, [pc, #112]	; (80a29e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2972:	681a      	ldr	r2, [r3, #0]
 80a2974:	07d1      	lsls	r1, r2, #31
 80a2976:	bf5c      	itt	pl
 80a2978:	2201      	movpl	r2, #1
 80a297a:	601a      	strpl	r2, [r3, #0]
 80a297c:	4b1a      	ldr	r3, [pc, #104]	; (80a29e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a297e:	681a      	ldr	r2, [r3, #0]
 80a2980:	07d2      	lsls	r2, r2, #31
 80a2982:	bf5c      	itt	pl
 80a2984:	2201      	movpl	r2, #1
 80a2986:	601a      	strpl	r2, [r3, #0]
 80a2988:	4b18      	ldr	r3, [pc, #96]	; (80a29ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a298a:	681a      	ldr	r2, [r3, #0]
 80a298c:	07d0      	lsls	r0, r2, #31
 80a298e:	bf5c      	itt	pl
 80a2990:	2201      	movpl	r2, #1
 80a2992:	601a      	strpl	r2, [r3, #0]
 80a2994:	4b16      	ldr	r3, [pc, #88]	; (80a29f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2996:	681a      	ldr	r2, [r3, #0]
 80a2998:	07d1      	lsls	r1, r2, #31
 80a299a:	bf5c      	itt	pl
 80a299c:	2201      	movpl	r2, #1
 80a299e:	601a      	strpl	r2, [r3, #0]
 80a29a0:	4b14      	ldr	r3, [pc, #80]	; (80a29f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a29a2:	681a      	ldr	r2, [r3, #0]
 80a29a4:	07d2      	lsls	r2, r2, #31
 80a29a6:	bf5c      	itt	pl
 80a29a8:	2201      	movpl	r2, #1
 80a29aa:	601a      	strpl	r2, [r3, #0]
 80a29ac:	4b12      	ldr	r3, [pc, #72]	; (80a29f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a29ae:	681a      	ldr	r2, [r3, #0]
 80a29b0:	07d0      	lsls	r0, r2, #31
 80a29b2:	bf5c      	itt	pl
 80a29b4:	2201      	movpl	r2, #1
 80a29b6:	601a      	strpl	r2, [r3, #0]
 80a29b8:	4b10      	ldr	r3, [pc, #64]	; (80a29fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a29ba:	681a      	ldr	r2, [r3, #0]
 80a29bc:	07d1      	lsls	r1, r2, #31
 80a29be:	bf5c      	itt	pl
 80a29c0:	2201      	movpl	r2, #1
 80a29c2:	601a      	strpl	r2, [r3, #0]
 80a29c4:	4b0e      	ldr	r3, [pc, #56]	; (80a2a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a29c6:	681a      	ldr	r2, [r3, #0]
 80a29c8:	07d2      	lsls	r2, r2, #31
 80a29ca:	bf5c      	itt	pl
 80a29cc:	2201      	movpl	r2, #1
 80a29ce:	601a      	strpl	r2, [r3, #0]
 80a29d0:	4770      	bx	lr
 80a29d2:	bf00      	nop
 80a29d4:	200002f8 	.word	0x200002f8
 80a29d8:	200002f4 	.word	0x200002f4
 80a29dc:	200002f0 	.word	0x200002f0
 80a29e0:	200002ec 	.word	0x200002ec
 80a29e4:	200002e8 	.word	0x200002e8
 80a29e8:	200002e4 	.word	0x200002e4
 80a29ec:	200002e0 	.word	0x200002e0
 80a29f0:	200002dc 	.word	0x200002dc
 80a29f4:	200002d8 	.word	0x200002d8
 80a29f8:	200002d4 	.word	0x200002d4
 80a29fc:	200002d0 	.word	0x200002d0
 80a2a00:	200002cc 	.word	0x200002cc

080a2a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2a04:	4b18      	ldr	r3, [pc, #96]	; (80a2a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2a06:	681a      	ldr	r2, [r3, #0]
 80a2a08:	07d1      	lsls	r1, r2, #31
 80a2a0a:	bf5c      	itt	pl
 80a2a0c:	2201      	movpl	r2, #1
 80a2a0e:	601a      	strpl	r2, [r3, #0]
 80a2a10:	4b16      	ldr	r3, [pc, #88]	; (80a2a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2a12:	681a      	ldr	r2, [r3, #0]
 80a2a14:	07d2      	lsls	r2, r2, #31
 80a2a16:	bf5c      	itt	pl
 80a2a18:	2201      	movpl	r2, #1
 80a2a1a:	601a      	strpl	r2, [r3, #0]
 80a2a1c:	4b14      	ldr	r3, [pc, #80]	; (80a2a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2a1e:	681a      	ldr	r2, [r3, #0]
 80a2a20:	07d0      	lsls	r0, r2, #31
 80a2a22:	bf5c      	itt	pl
 80a2a24:	2201      	movpl	r2, #1
 80a2a26:	601a      	strpl	r2, [r3, #0]
 80a2a28:	4b12      	ldr	r3, [pc, #72]	; (80a2a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2a2a:	681a      	ldr	r2, [r3, #0]
 80a2a2c:	07d1      	lsls	r1, r2, #31
 80a2a2e:	bf5c      	itt	pl
 80a2a30:	2201      	movpl	r2, #1
 80a2a32:	601a      	strpl	r2, [r3, #0]
 80a2a34:	4b10      	ldr	r3, [pc, #64]	; (80a2a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2a36:	681a      	ldr	r2, [r3, #0]
 80a2a38:	07d2      	lsls	r2, r2, #31
 80a2a3a:	bf5c      	itt	pl
 80a2a3c:	2201      	movpl	r2, #1
 80a2a3e:	601a      	strpl	r2, [r3, #0]
 80a2a40:	4b0e      	ldr	r3, [pc, #56]	; (80a2a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2a42:	681a      	ldr	r2, [r3, #0]
 80a2a44:	07d0      	lsls	r0, r2, #31
 80a2a46:	bf5c      	itt	pl
 80a2a48:	2201      	movpl	r2, #1
 80a2a4a:	601a      	strpl	r2, [r3, #0]
 80a2a4c:	4b0c      	ldr	r3, [pc, #48]	; (80a2a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2a4e:	681a      	ldr	r2, [r3, #0]
 80a2a50:	07d1      	lsls	r1, r2, #31
 80a2a52:	bf5c      	itt	pl
 80a2a54:	2201      	movpl	r2, #1
 80a2a56:	601a      	strpl	r2, [r3, #0]
 80a2a58:	4b0a      	ldr	r3, [pc, #40]	; (80a2a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2a5a:	681a      	ldr	r2, [r3, #0]
 80a2a5c:	07d2      	lsls	r2, r2, #31
 80a2a5e:	bf5c      	itt	pl
 80a2a60:	2201      	movpl	r2, #1
 80a2a62:	601a      	strpl	r2, [r3, #0]
 80a2a64:	4770      	bx	lr
 80a2a66:	bf00      	nop
 80a2a68:	20000318 	.word	0x20000318
 80a2a6c:	20000314 	.word	0x20000314
 80a2a70:	20000310 	.word	0x20000310
 80a2a74:	2000030c 	.word	0x2000030c
 80a2a78:	20000308 	.word	0x20000308
 80a2a7c:	20000304 	.word	0x20000304
 80a2a80:	20000300 	.word	0x20000300
 80a2a84:	200002fc 	.word	0x200002fc

080a2a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2a88:	4b18      	ldr	r3, [pc, #96]	; (80a2aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2a8a:	681a      	ldr	r2, [r3, #0]
 80a2a8c:	07d1      	lsls	r1, r2, #31
 80a2a8e:	bf5c      	itt	pl
 80a2a90:	2201      	movpl	r2, #1
 80a2a92:	601a      	strpl	r2, [r3, #0]
 80a2a94:	4b16      	ldr	r3, [pc, #88]	; (80a2af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2a96:	681a      	ldr	r2, [r3, #0]
 80a2a98:	07d2      	lsls	r2, r2, #31
 80a2a9a:	bf5c      	itt	pl
 80a2a9c:	2201      	movpl	r2, #1
 80a2a9e:	601a      	strpl	r2, [r3, #0]
 80a2aa0:	4b14      	ldr	r3, [pc, #80]	; (80a2af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2aa2:	681a      	ldr	r2, [r3, #0]
 80a2aa4:	07d0      	lsls	r0, r2, #31
 80a2aa6:	bf5c      	itt	pl
 80a2aa8:	2201      	movpl	r2, #1
 80a2aaa:	601a      	strpl	r2, [r3, #0]
 80a2aac:	4b12      	ldr	r3, [pc, #72]	; (80a2af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2aae:	681a      	ldr	r2, [r3, #0]
 80a2ab0:	07d1      	lsls	r1, r2, #31
 80a2ab2:	bf5c      	itt	pl
 80a2ab4:	2201      	movpl	r2, #1
 80a2ab6:	601a      	strpl	r2, [r3, #0]
 80a2ab8:	4b10      	ldr	r3, [pc, #64]	; (80a2afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2aba:	681a      	ldr	r2, [r3, #0]
 80a2abc:	07d2      	lsls	r2, r2, #31
 80a2abe:	bf5c      	itt	pl
 80a2ac0:	2201      	movpl	r2, #1
 80a2ac2:	601a      	strpl	r2, [r3, #0]
 80a2ac4:	4b0e      	ldr	r3, [pc, #56]	; (80a2b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2ac6:	681a      	ldr	r2, [r3, #0]
 80a2ac8:	07d0      	lsls	r0, r2, #31
 80a2aca:	bf5c      	itt	pl
 80a2acc:	2201      	movpl	r2, #1
 80a2ace:	601a      	strpl	r2, [r3, #0]
 80a2ad0:	4b0c      	ldr	r3, [pc, #48]	; (80a2b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2ad2:	681a      	ldr	r2, [r3, #0]
 80a2ad4:	07d1      	lsls	r1, r2, #31
 80a2ad6:	bf5c      	itt	pl
 80a2ad8:	2201      	movpl	r2, #1
 80a2ada:	601a      	strpl	r2, [r3, #0]
 80a2adc:	4b0a      	ldr	r3, [pc, #40]	; (80a2b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2ade:	681a      	ldr	r2, [r3, #0]
 80a2ae0:	07d2      	lsls	r2, r2, #31
 80a2ae2:	bf5c      	itt	pl
 80a2ae4:	2201      	movpl	r2, #1
 80a2ae6:	601a      	strpl	r2, [r3, #0]
 80a2ae8:	4770      	bx	lr
 80a2aea:	bf00      	nop
 80a2aec:	20000338 	.word	0x20000338
 80a2af0:	20000334 	.word	0x20000334
 80a2af4:	20000330 	.word	0x20000330
 80a2af8:	2000032c 	.word	0x2000032c
 80a2afc:	20000328 	.word	0x20000328
 80a2b00:	20000324 	.word	0x20000324
 80a2b04:	20000320 	.word	0x20000320
 80a2b08:	2000031c 	.word	0x2000031c

080a2b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2b0c:	4b24      	ldr	r3, [pc, #144]	; (80a2ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2b0e:	681a      	ldr	r2, [r3, #0]
 80a2b10:	07d0      	lsls	r0, r2, #31
 80a2b12:	bf5c      	itt	pl
 80a2b14:	2201      	movpl	r2, #1
 80a2b16:	601a      	strpl	r2, [r3, #0]
 80a2b18:	4b22      	ldr	r3, [pc, #136]	; (80a2ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2b1a:	681a      	ldr	r2, [r3, #0]
 80a2b1c:	07d1      	lsls	r1, r2, #31
 80a2b1e:	bf5c      	itt	pl
 80a2b20:	2201      	movpl	r2, #1
 80a2b22:	601a      	strpl	r2, [r3, #0]
 80a2b24:	4b20      	ldr	r3, [pc, #128]	; (80a2ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2b26:	681a      	ldr	r2, [r3, #0]
 80a2b28:	07d2      	lsls	r2, r2, #31
 80a2b2a:	bf5c      	itt	pl
 80a2b2c:	2201      	movpl	r2, #1
 80a2b2e:	601a      	strpl	r2, [r3, #0]
 80a2b30:	4b1e      	ldr	r3, [pc, #120]	; (80a2bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2b32:	681a      	ldr	r2, [r3, #0]
 80a2b34:	07d0      	lsls	r0, r2, #31
 80a2b36:	bf5c      	itt	pl
 80a2b38:	2201      	movpl	r2, #1
 80a2b3a:	601a      	strpl	r2, [r3, #0]
 80a2b3c:	4b1c      	ldr	r3, [pc, #112]	; (80a2bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2b3e:	681a      	ldr	r2, [r3, #0]
 80a2b40:	07d1      	lsls	r1, r2, #31
 80a2b42:	bf5c      	itt	pl
 80a2b44:	2201      	movpl	r2, #1
 80a2b46:	601a      	strpl	r2, [r3, #0]
 80a2b48:	4b1a      	ldr	r3, [pc, #104]	; (80a2bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2b4a:	681a      	ldr	r2, [r3, #0]
 80a2b4c:	07d2      	lsls	r2, r2, #31
 80a2b4e:	bf5c      	itt	pl
 80a2b50:	2201      	movpl	r2, #1
 80a2b52:	601a      	strpl	r2, [r3, #0]
 80a2b54:	4b18      	ldr	r3, [pc, #96]	; (80a2bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2b56:	681a      	ldr	r2, [r3, #0]
 80a2b58:	07d0      	lsls	r0, r2, #31
 80a2b5a:	bf5c      	itt	pl
 80a2b5c:	2201      	movpl	r2, #1
 80a2b5e:	601a      	strpl	r2, [r3, #0]
 80a2b60:	4b16      	ldr	r3, [pc, #88]	; (80a2bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2b62:	681a      	ldr	r2, [r3, #0]
 80a2b64:	07d1      	lsls	r1, r2, #31
 80a2b66:	bf5c      	itt	pl
 80a2b68:	2201      	movpl	r2, #1
 80a2b6a:	601a      	strpl	r2, [r3, #0]
 80a2b6c:	4b14      	ldr	r3, [pc, #80]	; (80a2bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2b6e:	681a      	ldr	r2, [r3, #0]
 80a2b70:	07d2      	lsls	r2, r2, #31
 80a2b72:	bf5c      	itt	pl
 80a2b74:	2201      	movpl	r2, #1
 80a2b76:	601a      	strpl	r2, [r3, #0]
 80a2b78:	4b12      	ldr	r3, [pc, #72]	; (80a2bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2b7a:	681a      	ldr	r2, [r3, #0]
 80a2b7c:	07d0      	lsls	r0, r2, #31
 80a2b7e:	bf5c      	itt	pl
 80a2b80:	2201      	movpl	r2, #1
 80a2b82:	601a      	strpl	r2, [r3, #0]
 80a2b84:	4b10      	ldr	r3, [pc, #64]	; (80a2bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2b86:	681a      	ldr	r2, [r3, #0]
 80a2b88:	07d1      	lsls	r1, r2, #31
 80a2b8a:	bf5c      	itt	pl
 80a2b8c:	2201      	movpl	r2, #1
 80a2b8e:	601a      	strpl	r2, [r3, #0]
 80a2b90:	4b0e      	ldr	r3, [pc, #56]	; (80a2bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2b92:	681a      	ldr	r2, [r3, #0]
 80a2b94:	07d2      	lsls	r2, r2, #31
 80a2b96:	bf5c      	itt	pl
 80a2b98:	2201      	movpl	r2, #1
 80a2b9a:	601a      	strpl	r2, [r3, #0]
 80a2b9c:	4770      	bx	lr
 80a2b9e:	bf00      	nop
 80a2ba0:	20000368 	.word	0x20000368
 80a2ba4:	20000364 	.word	0x20000364
 80a2ba8:	20000360 	.word	0x20000360
 80a2bac:	2000035c 	.word	0x2000035c
 80a2bb0:	20000358 	.word	0x20000358
 80a2bb4:	20000354 	.word	0x20000354
 80a2bb8:	20000350 	.word	0x20000350
 80a2bbc:	2000034c 	.word	0x2000034c
 80a2bc0:	20000348 	.word	0x20000348
 80a2bc4:	20000344 	.word	0x20000344
 80a2bc8:	20000340 	.word	0x20000340
 80a2bcc:	2000033c 	.word	0x2000033c

080a2bd0 <__cxa_atexit>:
 80a2bd0:	b510      	push	{r4, lr}
 80a2bd2:	4c05      	ldr	r4, [pc, #20]	; (80a2be8 <__cxa_atexit+0x18>)
 80a2bd4:	4613      	mov	r3, r2
 80a2bd6:	b12c      	cbz	r4, 80a2be4 <__cxa_atexit+0x14>
 80a2bd8:	460a      	mov	r2, r1
 80a2bda:	4601      	mov	r1, r0
 80a2bdc:	2002      	movs	r0, #2
 80a2bde:	f3af 8000 	nop.w
 80a2be2:	bd10      	pop	{r4, pc}
 80a2be4:	4620      	mov	r0, r4
 80a2be6:	bd10      	pop	{r4, pc}
 80a2be8:	00000000 	.word	0x00000000

080a2bec <memcpy>:
 80a2bec:	b510      	push	{r4, lr}
 80a2bee:	1e43      	subs	r3, r0, #1
 80a2bf0:	440a      	add	r2, r1
 80a2bf2:	4291      	cmp	r1, r2
 80a2bf4:	d004      	beq.n	80a2c00 <memcpy+0x14>
 80a2bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2bfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2bfe:	e7f8      	b.n	80a2bf2 <memcpy+0x6>
 80a2c00:	bd10      	pop	{r4, pc}

080a2c02 <memset>:
 80a2c02:	4603      	mov	r3, r0
 80a2c04:	4402      	add	r2, r0
 80a2c06:	4293      	cmp	r3, r2
 80a2c08:	d002      	beq.n	80a2c10 <memset+0xe>
 80a2c0a:	f803 1b01 	strb.w	r1, [r3], #1
 80a2c0e:	e7fa      	b.n	80a2c06 <memset+0x4>
 80a2c10:	4770      	bx	lr
	...

080a2c14 <srand>:
 80a2c14:	b538      	push	{r3, r4, r5, lr}
 80a2c16:	4b12      	ldr	r3, [pc, #72]	; (80a2c60 <srand+0x4c>)
 80a2c18:	4605      	mov	r5, r0
 80a2c1a:	681c      	ldr	r4, [r3, #0]
 80a2c1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2c1e:	b9d3      	cbnz	r3, 80a2c56 <srand+0x42>
 80a2c20:	2018      	movs	r0, #24
 80a2c22:	f7ff f975 	bl	80a1f10 <malloc>
 80a2c26:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2c2a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2c2c:	8003      	strh	r3, [r0, #0]
 80a2c2e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2c32:	8043      	strh	r3, [r0, #2]
 80a2c34:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2c38:	8083      	strh	r3, [r0, #4]
 80a2c3a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2c3e:	80c3      	strh	r3, [r0, #6]
 80a2c40:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2c44:	8103      	strh	r3, [r0, #8]
 80a2c46:	2305      	movs	r3, #5
 80a2c48:	8143      	strh	r3, [r0, #10]
 80a2c4a:	230b      	movs	r3, #11
 80a2c4c:	8183      	strh	r3, [r0, #12]
 80a2c4e:	2201      	movs	r2, #1
 80a2c50:	2300      	movs	r3, #0
 80a2c52:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2c56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2c58:	2200      	movs	r2, #0
 80a2c5a:	611d      	str	r5, [r3, #16]
 80a2c5c:	615a      	str	r2, [r3, #20]
 80a2c5e:	bd38      	pop	{r3, r4, r5, pc}
 80a2c60:	20000124 	.word	0x20000124

080a2c64 <strlen>:
 80a2c64:	4603      	mov	r3, r0
 80a2c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2c6a:	2a00      	cmp	r2, #0
 80a2c6c:	d1fb      	bne.n	80a2c66 <strlen+0x2>
 80a2c6e:	1a18      	subs	r0, r3, r0
 80a2c70:	3801      	subs	r0, #1
 80a2c72:	4770      	bx	lr

080a2c74 <dynalib_user>:
 80a2c74:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2c84:	0000 0000 504d 3152 3132 6e20 746f 6620     ....MPR121 not f
 80a2c94:	756f 646e 202c 6863 6365 206b 6977 6972     ound, check wiri
 80a2ca4:	676e 003f 504d 3152 3132 6620 756f 646e     ng?.MPR121 found
 80a2cb4:	0021 7420 756f 6863 6465 2000 6572 656c     !. touched. rele
 80a2cc4:	7361 6465 0000 0000                         ased....

080a2ccc <CSWTCH.215>:
 80a2ccc:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a2cdc:	0050 0000                                   P...

080a2ce0 <_ZTV7TwoWire>:
	...
 80a2ce8:	1f49 080a 1f93 080a 1f6b 080a 1f4b 080a     I.......k...K...
 80a2cf8:	1f73 080a 1f7b 080a 1f83 080a 1f8b 080a     s...{...........

080a2d08 <_ZTV9IPAddress>:
	...
 80a2d10:	2021 080a 2011 080a 2013 080a 6162 6475     ! ... ... ..baud
 80a2d20:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a2d30:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a2d40:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a2d50:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a2d60:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a2d70:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a2d80:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a2d90:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a2da0:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a2db0:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a2dc0:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a2dd0:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a2de0:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a2df0:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a2e00 <_ZTVN5spark12NetworkClassE>:
	...
 80a2e08:	20e9 080a 20f3 080a 20fd 080a 2107 080a     . ... ... ...!..
 80a2e18:	2111 080a 211d 080a 2129 080a 2135 080a     .!...!..)!..5!..
 80a2e28:	213d 080a 2147 080a 2151 080a               =!..G!..Q!..

080a2e34 <_ZTV8SPIClass>:
	...
 80a2e3c:	22b5 080a 22b7 080a 005a 2b25 3330 3a64     ."..."..Z.%+03d:
 80a2e4c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a2e5c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2e6c:	0000 0000                                   ....

080a2e70 <_ZTV11USARTSerial>:
	...
 80a2e78:	234f 080a 239f 080a 23ad 080a 21b5 080a     O#...#...#...!..
 80a2e88:	2363 080a 2385 080a 2371 080a 2399 080a     c#...#..q#...#..
 80a2e98:	2351 080a 2355 080a                         Q#..U#..

080a2ea0 <_ZTV9USBSerial>:
	...
 80a2ea8:	2489 080a 24d9 080a 24e7 080a 21b5 080a     .$...$...$...!..
 80a2eb8:	24c5 080a 248b 080a 24a1 080a 24d3 080a     .$...$...$...$..
 80a2ec8:	24b7 080a 2485 080a                         .$...$..

080a2ed0 <_ZTVN5spark9WiFiClassE>:
	...
 80a2ed8:	268b 080a 2681 080a 2677 080a 25e9 080a     .&...&..w&...%..
 80a2ee8:	266b 080a 265f 080a 2653 080a 264b 080a     k&.._&..S&..K&..
 80a2ef8:	2641 080a 2637 080a 25f3 080a               A&..7&...%..

080a2f04 <__sf_fake_stdin>:
	...

080a2f24 <__sf_fake_stdout>:
	...

080a2f44 <__sf_fake_stderr>:
	...
 80a2f64:	0043                                        C.

080a2f66 <link_const_variable_data_end>:
	...

080a2f68 <link_constructors_location>:
 80a2f68:	080a0519 	.word	0x080a0519
 80a2f6c:	080a0841 	.word	0x080a0841
 80a2f70:	080a0845 	.word	0x080a0845
 80a2f74:	080a0849 	.word	0x080a0849
 80a2f78:	080a084d 	.word	0x080a084d
 80a2f7c:	080a0851 	.word	0x080a0851
 80a2f80:	080a0855 	.word	0x080a0855
 80a2f84:	080a1b91 	.word	0x080a1b91
 80a2f88:	080a20d9 	.word	0x080a20d9
 80a2f8c:	080a21a1 	.word	0x080a21a1
 80a2f90:	080a2299 	.word	0x080a2299
 80a2f94:	080a22f5 	.word	0x080a22f5
 80a2f98:	080a230d 	.word	0x080a230d
 80a2f9c:	080a2695 	.word	0x080a2695
 80a2fa0:	080a28bd 	.word	0x080a28bd
 80a2fa4:	080a28ed 	.word	0x080a28ed
 80a2fa8:	080a2941 	.word	0x080a2941
 80a2fac:	080a2a05 	.word	0x080a2a05
 80a2fb0:	080a2a89 	.word	0x080a2a89
 80a2fb4:	080a2b0d 	.word	0x080a2b0d

080a2fb8 <link_constructors_end>:
	...
