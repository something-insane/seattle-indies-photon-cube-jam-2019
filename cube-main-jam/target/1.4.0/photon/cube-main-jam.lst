
/Users/matthewmccord/Workspace/photon_iot/seattle-indies-photon-cube-jam-2019/cube-main-jam/target/1.4.0/photon/cube-main-jam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000039f4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3a10  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000004e0  20000000  080a3a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000021c  200004e0  200004e0  000304e0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a3ef4  080a3ef4  00023ef4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3f1c  080a3f1c  00023f1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d19f6  00000000  00000000  00023f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013119  00000000  00000000  000f5916  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016b49  00000000  00000000  00108a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000021d0  00000000  00000000  0011f578  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003308  00000000  00000000  00121748  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002cf98  00000000  00000000  00124a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002e63a  00000000  00000000  001519e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ab187  00000000  00000000  00180022  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bdf4  00000000  00000000  0022b1ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 f84f 	bl	80a30d0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 f854 	bl	80a30e6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3a14 	.word	0x080a3a14
 80a004c:	200004e0 	.word	0x200004e0
 80a0050:	200004e0 	.word	0x200004e0
 80a0054:	200006fc 	.word	0x200006fc
 80a0058:	200006fc 	.word	0x200006fc

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fe05 	bl	80a2c6c <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a39b8 	.word	0x080a39b8
 80a0084:	080a3a08 	.word	0x080a3a08

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b89c 	b.w	80a01c4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f99f 	bl	80a03d0 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 bdab 	b.w	80a2bf0 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f002 b9c1 	b.w	80a2420 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f002 b9c7 	b.w	80a2430 <free>
	...

080a00a4 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a6:	4a03      	ldr	r2, [pc, #12]	; (80a00b4 <__cxa_pure_virtual+0x10>)
 80a00a8:	2100      	movs	r1, #0
 80a00aa:	200c      	movs	r0, #12
 80a00ac:	f002 f92c 	bl	80a2308 <panic_>
 80a00b0:	e7fe      	b.n	80a00b0 <__cxa_pure_virtual+0xc>
 80a00b2:	bf00      	nop
 80a00b4:	080a20d5 	.word	0x080a20d5

080a00b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b8:	7800      	ldrb	r0, [r0, #0]
 80a00ba:	fab0 f080 	clz	r0, r0
 80a00be:	0940      	lsrs	r0, r0, #5
 80a00c0:	4770      	bx	lr

080a00c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c2:	2301      	movs	r3, #1
 80a00c4:	7003      	strb	r3, [r0, #0]
 80a00c6:	4770      	bx	lr

080a00c8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
 80a00c8:	4770      	bx	lr
	...

080a00cc <_Z19resetTheGlowyValuesv>:
int glowyValue = 0;

int rate = 2;

void resetTheGlowyValues() {
  goingUp = true;
 80a00cc:	4b04      	ldr	r3, [pc, #16]	; (80a00e0 <_Z19resetTheGlowyValuesv+0x14>)
 80a00ce:	2201      	movs	r2, #1
 80a00d0:	701a      	strb	r2, [r3, #0]
  glowyValue = 0;
 80a00d2:	4b04      	ldr	r3, [pc, #16]	; (80a00e4 <_Z19resetTheGlowyValuesv+0x18>)
 80a00d4:	2200      	movs	r2, #0
 80a00d6:	601a      	str	r2, [r3, #0]
  rate = 2;
 80a00d8:	4b03      	ldr	r3, [pc, #12]	; (80a00e8 <_Z19resetTheGlowyValuesv+0x1c>)
 80a00da:	2202      	movs	r2, #2
 80a00dc:	601a      	str	r2, [r3, #0]
 80a00de:	4770      	bx	lr
 80a00e0:	20000000 	.word	0x20000000
 80a00e4:	20000510 	.word	0x20000510
 80a00e8:	20000004 	.word	0x20000004

080a00ec <_Z8initCubev>:
  currentCorrectPin = pattern[0];

  changeGameState(STATE_SHOW_PATTERN);
}

void initCube() {
 80a00ec:	b508      	push	{r3, lr}

void changeGameState(int newState) {
  // here we can do some cleanup / setup depending on the state we are about to enter
  switch (newState) {
    case STATE_LOADING:
      resetTheGlowyValues();
 80a00ee:	f7ff ffed 	bl	80a00cc <_Z19resetTheGlowyValuesv>
      resetTheGlowyValues();

      break;
  }

  gameState = newState;
 80a00f2:	4a08      	ldr	r2, [pc, #32]	; (80a0114 <_Z8initCubev+0x28>)
 80a00f4:	2300      	movs	r3, #0
  changeGameState(STATE_SHOW_PATTERN);
}

void initCube() {
  changeGameState(STATE_LOADING);
  level = 1;
 80a00f6:	4908      	ldr	r1, [pc, #32]	; (80a0118 <_Z8initCubev+0x2c>)
      resetTheGlowyValues();

      break;
  }

  gameState = newState;
 80a00f8:	6013      	str	r3, [r2, #0]
  changeGameState(STATE_SHOW_PATTERN);
}

void initCube() {
  changeGameState(STATE_LOADING);
  level = 1;
 80a00fa:	2201      	movs	r2, #1
 80a00fc:	600a      	str	r2, [r1, #0]
  delayBetweenColors = 50;
 80a00fe:	4907      	ldr	r1, [pc, #28]	; (80a011c <_Z8initCubev+0x30>)
 80a0100:	2032      	movs	r0, #50	; 0x32
 80a0102:	6008      	str	r0, [r1, #0]
  rndDelayRange = 1;
 80a0104:	4906      	ldr	r1, [pc, #24]	; (80a0120 <_Z8initCubev+0x34>)
 80a0106:	600a      	str	r2, [r1, #0]
  patternCount = 0;
 80a0108:	4a06      	ldr	r2, [pc, #24]	; (80a0124 <_Z8initCubev+0x38>)
 80a010a:	6013      	str	r3, [r2, #0]
  numberOfGuesses = 0;
 80a010c:	4a06      	ldr	r2, [pc, #24]	; (80a0128 <_Z8initCubev+0x3c>)
 80a010e:	6013      	str	r3, [r2, #0]
 80a0110:	bd08      	pop	{r3, pc}
 80a0112:	bf00      	nop
 80a0114:	20000548 	.word	0x20000548
 80a0118:	20000520 	.word	0x20000520
 80a011c:	20000568 	.word	0x20000568
 80a0120:	2000050c 	.word	0x2000050c
 80a0124:	20000514 	.word	0x20000514
 80a0128:	2000056c 	.word	0x2000056c

080a012c <_Z10touchSetupv>:
// Keeps track of the last pins touched
// so we know when buttons are 'released'
uint16_t lasttouched = 0;
uint16_t currtouched = 0;

void touchSetup() {
 80a012c:	b510      	push	{r4, lr}
  // Default address is 0x5A, if tied to 3.3V its 0x5B
  // If tied to SDA its 0x5C and if SCL then 0x5D
  if (!cap.begin(0x5A)) {
 80a012e:	215a      	movs	r1, #90	; 0x5a
 80a0130:	480b      	ldr	r0, [pc, #44]	; (80a0160 <_Z10touchSetupv+0x34>)
 80a0132:	f000 f9ff 	bl	80a0534 <_ZN15Adafruit_MPR1215beginEh>
 80a0136:	b958      	cbnz	r0, 80a0150 <_Z10touchSetupv+0x24>
    Serial.println("MPR121 not found, check wiring?");
 80a0138:	f002 fc74 	bl	80a2a24 <_Z16_fetch_usbserialv>
 80a013c:	4909      	ldr	r1, [pc, #36]	; (80a0164 <_Z10touchSetupv+0x38>)
 80a013e:	f002 faf6 	bl	80a272e <_ZN5Print7printlnEPKc>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0142:	4c09      	ldr	r4, [pc, #36]	; (80a0168 <_Z10touchSetupv+0x3c>)
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0144:	f001 ffd6 	bl	80a20f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0148:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a014a:	f002 f909 	bl	80a2360 <spark_process>
 80a014e:	e7f9      	b.n	80a0144 <_Z10touchSetupv+0x18>
      #endif
    }

  }

  Serial.println("MPR121 found!");
 80a0150:	f002 fc68 	bl	80a2a24 <_Z16_fetch_usbserialv>
}
 80a0154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      #endif
    }

  }

  Serial.println("MPR121 found!");
 80a0158:	4904      	ldr	r1, [pc, #16]	; (80a016c <_Z10touchSetupv+0x40>)
 80a015a:	f002 bae8 	b.w	80a272e <_ZN5Print7printlnEPKc>
 80a015e:	bf00      	nop
 80a0160:	2000054c 	.word	0x2000054c
 80a0164:	080a316c 	.word	0x080a316c
 80a0168:	20000608 	.word	0x20000608
 80a016c:	080a318c 	.word	0x080a318c

080a0170 <_Z13neoPixelSetupv>:
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

void neoPixelSetup() {
 80a0170:	b510      	push	{r4, lr}
  strip.setBrightness(BRIGHTNESS);
 80a0172:	4c06      	ldr	r4, [pc, #24]	; (80a018c <_Z13neoPixelSetupv+0x1c>)
 80a0174:	21ff      	movs	r1, #255	; 0xff
 80a0176:	4620      	mov	r0, r4
 80a0178:	f001 ff6c 	bl	80a2054 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  strip.begin();
 80a017c:	4620      	mov	r0, r4
 80a017e:	f000 fe29 	bl	80a0dd4 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
 80a0182:	4620      	mov	r0, r4
}
 80a0184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

void neoPixelSetup() {
  strip.setBrightness(BRIGHTNESS);
  strip.begin();
  strip.show();
 80a0188:	f000 be5a 	b.w	80a0e40 <_ZN17Adafruit_NeoPixel4showEv>
 80a018c:	20000554 	.word	0x20000554

080a0190 <_Z23lightAllPanelsWithColorm>:
}

void lightAllPanelsWithColor(uint32_t panelColor) {
 80a0190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0194:	4606      	mov	r6, r0
  // 6 is the number of panels
  for (int i = 0; i < 6; i += 1) {
    // 4 is the number of lights per panel
    for (int j = 0; j < 4; j += 1) {
      strip.setPixelColor(cubePanelLights[i][j], panelColor);
 80a0196:	4f09      	ldr	r7, [pc, #36]	; (80a01bc <_Z23lightAllPanelsWithColorm+0x2c>)
  strip.setBrightness(BRIGHTNESS);
  strip.begin();
  strip.show();
}

void lightAllPanelsWithColor(uint32_t panelColor) {
 80a0198:	2400      	movs	r4, #0
 80a019a:	2500      	movs	r5, #0
  // 6 is the number of panels
  for (int i = 0; i < 6; i += 1) {
    // 4 is the number of lights per panel
    for (int j = 0; j < 4; j += 1) {
      strip.setPixelColor(cubePanelLights[i][j], panelColor);
 80a019c:	eb07 0804 	add.w	r8, r7, r4
 80a01a0:	f838 1025 	ldrh.w	r1, [r8, r5, lsl #2]
 80a01a4:	4632      	mov	r2, r6
 80a01a6:	4806      	ldr	r0, [pc, #24]	; (80a01c0 <_Z23lightAllPanelsWithColorm+0x30>)

void lightAllPanelsWithColor(uint32_t panelColor) {
  // 6 is the number of panels
  for (int i = 0; i < 6; i += 1) {
    // 4 is the number of lights per panel
    for (int j = 0; j < 4; j += 1) {
 80a01a8:	3501      	adds	r5, #1
      strip.setPixelColor(cubePanelLights[i][j], panelColor);
 80a01aa:	f001 ff03 	bl	80a1fb4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>

void lightAllPanelsWithColor(uint32_t panelColor) {
  // 6 is the number of panels
  for (int i = 0; i < 6; i += 1) {
    // 4 is the number of lights per panel
    for (int j = 0; j < 4; j += 1) {
 80a01ae:	2d04      	cmp	r5, #4
 80a01b0:	d1f6      	bne.n	80a01a0 <_Z23lightAllPanelsWithColorm+0x10>
 80a01b2:	3410      	adds	r4, #16
  strip.show();
}

void lightAllPanelsWithColor(uint32_t panelColor) {
  // 6 is the number of panels
  for (int i = 0; i < 6; i += 1) {
 80a01b4:	2c60      	cmp	r4, #96	; 0x60
 80a01b6:	d1f0      	bne.n	80a019a <_Z23lightAllPanelsWithColorm+0xa>
    // 4 is the number of lights per panel
    for (int j = 0; j < 4; j += 1) {
      strip.setPixelColor(cubePanelLights[i][j], panelColor);
    }
  }
}
 80a01b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a01bc:	20000008 	.word	0x20000008
 80a01c0:	20000554 	.word	0x20000554

080a01c4 <setup>:
void buzzerSetup() {
  pinMode(BUZZER_PIN, OUTPUT);
}
#endif

void setup() {
 80a01c4:	b508      	push	{r3, lr}
  #ifdef TEST_DISPLAY
  // displaySetup();
  #endif

  #ifdef TEST_TOUCH
  touchSetup();
 80a01c6:	f7ff ffb1 	bl	80a012c <_Z10touchSetupv>
  #endif

  #ifdef TEST_NEOPIXEL
  neoPixelSetup();
 80a01ca:	f7ff ffd1 	bl	80a0170 <_Z13neoPixelSetupv>
  #ifdef TEST_BUZZER
  buzzerSetup();
  #endif

  initCube();
}// THIS NEEDS DISPLAY
 80a01ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  #ifdef TEST_BUZZER
  buzzerSetup();
  #endif

  initCube();
 80a01d2:	f7ff bf8b 	b.w	80a00ec <_Z8initCubev>
	...

080a01d8 <_Z12neoPixelLoopv>:
//     display.print(cap.filteredData(i + 6));
//   }
// }
// #endif

void neoPixelLoop() {
 80a01d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // strip.setPixelColor(pixel_number, strip.Color(R, G, B));

  switch (gameState) {
 80a01dc:	4d2b      	ldr	r5, [pc, #172]	; (80a028c <_Z12neoPixelLoopv+0xb4>)
 80a01de:	682b      	ldr	r3, [r5, #0]
 80a01e0:	2b03      	cmp	r3, #3
 80a01e2:	d03f      	beq.n	80a0264 <_Z12neoPixelLoopv+0x8c>
 80a01e4:	2b04      	cmp	r3, #4
 80a01e6:	d046      	beq.n	80a0276 <_Z12neoPixelLoopv+0x9e>
 80a01e8:	2b01      	cmp	r3, #1
 80a01ea:	d14d      	bne.n	80a0288 <_Z12neoPixelLoopv+0xb0>

      break;
    case STATE_SHOW_PATTERN:
      {
        // display the current levels pattern on the cube to user
        int currentPanel = pattern[patternCount];
 80a01ec:	4c28      	ldr	r4, [pc, #160]	; (80a0290 <_Z12neoPixelLoopv+0xb8>)
 80a01ee:	4b29      	ldr	r3, [pc, #164]	; (80a0294 <_Z12neoPixelLoopv+0xbc>)
 80a01f0:	6822      	ldr	r2, [r4, #0]

        // TURN PANEL ON
        // 4 is the number of lights per panel
        for (int i = 0; i < 4; i += 1) {
 80a01f2:	2600      	movs	r6, #0
 80a01f4:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80a01f8:	4b27      	ldr	r3, [pc, #156]	; (80a0298 <_Z12neoPixelLoopv+0xc0>)
 80a01fa:	eb03 1707 	add.w	r7, r3, r7, lsl #4
          strip.setPixelColor(cubePanelLights[currentPanel][i], strip.Color(255, 255, 255));
 80a01fe:	22ff      	movs	r2, #255	; 0xff
 80a0200:	4611      	mov	r1, r2
 80a0202:	4610      	mov	r0, r2
 80a0204:	f837 8026 	ldrh.w	r8, [r7, r6, lsl #2]
 80a0208:	f001 ff1f 	bl	80a204a <_ZN17Adafruit_NeoPixel5ColorEhhh>
        // display the current levels pattern on the cube to user
        int currentPanel = pattern[patternCount];

        // TURN PANEL ON
        // 4 is the number of lights per panel
        for (int i = 0; i < 4; i += 1) {
 80a020c:	3601      	adds	r6, #1
          strip.setPixelColor(cubePanelLights[currentPanel][i], strip.Color(255, 255, 255));
 80a020e:	4602      	mov	r2, r0
 80a0210:	4641      	mov	r1, r8
 80a0212:	4822      	ldr	r0, [pc, #136]	; (80a029c <_Z12neoPixelLoopv+0xc4>)
 80a0214:	f001 fece 	bl	80a1fb4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        // display the current levels pattern on the cube to user
        int currentPanel = pattern[patternCount];

        // TURN PANEL ON
        // 4 is the number of lights per panel
        for (int i = 0; i < 4; i += 1) {
 80a0218:	2e04      	cmp	r6, #4
 80a021a:	d1f0      	bne.n	80a01fe <_Z12neoPixelLoopv+0x26>
          strip.setPixelColor(cubePanelLights[currentPanel][i], strip.Color(255, 255, 255));
        }

        strip.show();
 80a021c:	481f      	ldr	r0, [pc, #124]	; (80a029c <_Z12neoPixelLoopv+0xc4>)
 80a021e:	f000 fe0f 	bl	80a0e40 <_ZN17Adafruit_NeoPixel4showEv>

        delay(2000);
 80a0222:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a0226:	f002 f90b 	bl	80a2440 <delay>

        // TURN PANEL OFF
        for (int i = 0; i < 4; i += 1) {
 80a022a:	2600      	movs	r6, #0
          strip.setPixelColor(cubePanelLights[currentPanel][i], strip.Color(0, 0, 0));
 80a022c:	2200      	movs	r2, #0
 80a022e:	4611      	mov	r1, r2
 80a0230:	4610      	mov	r0, r2
 80a0232:	f837 8026 	ldrh.w	r8, [r7, r6, lsl #2]
 80a0236:	f001 ff08 	bl	80a204a <_ZN17Adafruit_NeoPixel5ColorEhhh>
        strip.show();

        delay(2000);

        // TURN PANEL OFF
        for (int i = 0; i < 4; i += 1) {
 80a023a:	3601      	adds	r6, #1
          strip.setPixelColor(cubePanelLights[currentPanel][i], strip.Color(0, 0, 0));
 80a023c:	4602      	mov	r2, r0
 80a023e:	4641      	mov	r1, r8
 80a0240:	4816      	ldr	r0, [pc, #88]	; (80a029c <_Z12neoPixelLoopv+0xc4>)
 80a0242:	f001 feb7 	bl	80a1fb4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        strip.show();

        delay(2000);

        // TURN PANEL OFF
        for (int i = 0; i < 4; i += 1) {
 80a0246:	2e04      	cmp	r6, #4
 80a0248:	d1f0      	bne.n	80a022c <_Z12neoPixelLoopv+0x54>
          strip.setPixelColor(cubePanelLights[currentPanel][i], strip.Color(0, 0, 0));
        }

        strip.show();
 80a024a:	4814      	ldr	r0, [pc, #80]	; (80a029c <_Z12neoPixelLoopv+0xc4>)
 80a024c:	f000 fdf8 	bl	80a0e40 <_ZN17Adafruit_NeoPixel4showEv>
        patternCount += 1;
 80a0250:	6823      	ldr	r3, [r4, #0]
    case STATE_SHOW_PATTERN:
      // do nothing

      break;
    case STATE_GET_USER_INPUT:
      didGuessThisRound = false;
 80a0252:	2200      	movs	r2, #0
        for (int i = 0; i < 4; i += 1) {
          strip.setPixelColor(cubePanelLights[currentPanel][i], strip.Color(0, 0, 0));
        }

        strip.show();
        patternCount += 1;
 80a0254:	3301      	adds	r3, #1
 80a0256:	6023      	str	r3, [r4, #0]
    case STATE_SHOW_PATTERN:
      // do nothing

      break;
    case STATE_GET_USER_INPUT:
      didGuessThisRound = false;
 80a0258:	4b11      	ldr	r3, [pc, #68]	; (80a02a0 <_Z12neoPixelLoopv+0xc8>)
 80a025a:	701a      	strb	r2, [r3, #0]
      resetTheGlowyValues();

      break;
  }

  gameState = newState;
 80a025c:	2302      	movs	r3, #2
 80a025e:	602b      	str	r3, [r5, #0]
 80a0260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      break;
    case STATE_VICTORY:
      // show some kind of cool "you did it correctly" pattern?

      // here we just light up all cube panels green for success
      lightAllPanelsWithColor(strip.Color(0, 255, 0));
 80a0264:	2200      	movs	r2, #0
 80a0266:	21ff      	movs	r1, #255	; 0xff
 80a0268:	4610      	mov	r0, r2
 80a026a:	f001 feee 	bl	80a204a <_ZN17Adafruit_NeoPixel5ColorEhhh>

      // here we just light up all cube panels red for failure
      lightAllPanelsWithColor(strip.Color(255, 0, 0));
      break;
  }
}
 80a026e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      break;
    case STATE_VICTORY:
      // show some kind of cool "you did it correctly" pattern?

      // here we just light up all cube panels green for success
      lightAllPanelsWithColor(strip.Color(0, 255, 0));
 80a0272:	f7ff bf8d 	b.w	80a0190 <_Z23lightAllPanelsWithColorm>
      break;
    case STATE_LOSER:
      // wow what a jerk, our player failed

      // here we just light up all cube panels red for failure
      lightAllPanelsWithColor(strip.Color(255, 0, 0));
 80a0276:	2200      	movs	r2, #0
 80a0278:	4611      	mov	r1, r2
 80a027a:	20ff      	movs	r0, #255	; 0xff
 80a027c:	f001 fee5 	bl	80a204a <_ZN17Adafruit_NeoPixel5ColorEhhh>
      break;
  }
}
 80a0280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      break;
    case STATE_LOSER:
      // wow what a jerk, our player failed

      // here we just light up all cube panels red for failure
      lightAllPanelsWithColor(strip.Color(255, 0, 0));
 80a0284:	f7ff bf84 	b.w	80a0190 <_Z23lightAllPanelsWithColorm>
 80a0288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a028c:	20000548 	.word	0x20000548
 80a0290:	20000514 	.word	0x20000514
 80a0294:	200004e4 	.word	0x200004e4
 80a0298:	20000008 	.word	0x20000008
 80a029c:	20000554 	.word	0x20000554
 80a02a0:	20000570 	.word	0x20000570

080a02a4 <_Z16handleTouchedPini>:
      break;
  }
}

void handleTouchedPin(int pinNumber) {
 80a02a4:	b508      	push	{r3, lr}
  didGuessThisRound = true;
 80a02a6:	4b10      	ldr	r3, [pc, #64]	; (80a02e8 <_Z16handleTouchedPini+0x44>)
 80a02a8:	2201      	movs	r2, #1
 80a02aa:	701a      	strb	r2, [r3, #0]

  if (pinNumber == currentCorrectPin) {
 80a02ac:	4b0f      	ldr	r3, [pc, #60]	; (80a02ec <_Z16handleTouchedPini+0x48>)
 80a02ae:	681a      	ldr	r2, [r3, #0]
 80a02b0:	4282      	cmp	r2, r0
 80a02b2:	d112      	bne.n	80a02da <_Z16handleTouchedPini+0x36>
    numberOfGuesses += 1;
 80a02b4:	480e      	ldr	r0, [pc, #56]	; (80a02f0 <_Z16handleTouchedPini+0x4c>)
 80a02b6:	6802      	ldr	r2, [r0, #0]
 80a02b8:	1c51      	adds	r1, r2, #1
 80a02ba:	6001      	str	r1, [r0, #0]

    if (numberOfGuesses == level) {
 80a02bc:	480d      	ldr	r0, [pc, #52]	; (80a02f4 <_Z16handleTouchedPini+0x50>)
 80a02be:	6800      	ldr	r0, [r0, #0]
 80a02c0:	4281      	cmp	r1, r0
 80a02c2:	d105      	bne.n	80a02d0 <_Z16handleTouchedPini+0x2c>
    case STATE_GET_USER_INPUT:
      didGuessThisRound = false;

      break;
    case STATE_VICTORY:
      resetTheGlowyValues();
 80a02c4:	f7ff ff02 	bl	80a00cc <_Z19resetTheGlowyValuesv>
      resetTheGlowyValues();

      break;
  }

  gameState = newState;
 80a02c8:	4b0b      	ldr	r3, [pc, #44]	; (80a02f8 <_Z16handleTouchedPini+0x54>)
 80a02ca:	2203      	movs	r2, #3
 80a02cc:	601a      	str	r2, [r3, #0]
 80a02ce:	bd08      	pop	{r3, pc}
      changeGameState(STATE_VICTORY);

      return;
    }

    currentCorrectPin = pattern[numberOfGuesses - 1];
 80a02d0:	490a      	ldr	r1, [pc, #40]	; (80a02fc <_Z16handleTouchedPini+0x58>)
 80a02d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a02d6:	601a      	str	r2, [r3, #0]
 80a02d8:	bd08      	pop	{r3, pc}
    case STATE_VICTORY:
      resetTheGlowyValues();

      break;
    case STATE_LOSER:
      resetTheGlowyValues();
 80a02da:	f7ff fef7 	bl	80a00cc <_Z19resetTheGlowyValuesv>

      break;
  }

  gameState = newState;
 80a02de:	4b06      	ldr	r3, [pc, #24]	; (80a02f8 <_Z16handleTouchedPini+0x54>)
 80a02e0:	2204      	movs	r2, #4
 80a02e2:	601a      	str	r2, [r3, #0]
 80a02e4:	bd08      	pop	{r3, pc}
 80a02e6:	bf00      	nop
 80a02e8:	20000570 	.word	0x20000570
 80a02ec:	20000550 	.word	0x20000550
 80a02f0:	2000056c 	.word	0x2000056c
 80a02f4:	20000520 	.word	0x20000520
 80a02f8:	20000548 	.word	0x20000548
 80a02fc:	200004e4 	.word	0x200004e4

080a0300 <_Z16touchSensorsLoopv>:

void handleReleasedPin(int pinNumber) {
  //
}

void touchSensorsLoop() {
 80a0300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (gameState) {
 80a0304:	4b1d      	ldr	r3, [pc, #116]	; (80a037c <_Z16touchSensorsLoopv+0x7c>)
 80a0306:	681b      	ldr	r3, [r3, #0]
 80a0308:	2b02      	cmp	r3, #2
 80a030a:	d135      	bne.n	80a0378 <_Z16touchSensorsLoopv+0x78>
      break;
    case STATE_GET_USER_INPUT:
      // get user input when touch sensors pressed and check for correct pattern input from user.
      for (uint8_t i=0; i<12; i++) {
        // it if *is* touched and *wasnt* touched before, alert!
        if ((currtouched & _BV(i)) && !(lasttouched & _BV(i)) ) {
 80a030c:	4d1c      	ldr	r5, [pc, #112]	; (80a0380 <_Z16touchSensorsLoopv+0x80>)
 80a030e:	4e1d      	ldr	r6, [pc, #116]	; (80a0384 <_Z16touchSensorsLoopv+0x84>)
 80a0310:	46a8      	mov	r8, r5
void handleReleasedPin(int pinNumber) {
  //
}

void touchSensorsLoop() {
  switch (gameState) {
 80a0312:	2400      	movs	r4, #0
      break;
    case STATE_GET_USER_INPUT:
      // get user input when touch sensors pressed and check for correct pattern input from user.
      for (uint8_t i=0; i<12; i++) {
        // it if *is* touched and *wasnt* touched before, alert!
        if ((currtouched & _BV(i)) && !(lasttouched & _BV(i)) ) {
 80a0314:	882b      	ldrh	r3, [r5, #0]
 80a0316:	b2e7      	uxtb	r7, r4
 80a0318:	4123      	asrs	r3, r4
 80a031a:	07d8      	lsls	r0, r3, #31
 80a031c:	d511      	bpl.n	80a0342 <_Z16touchSensorsLoopv+0x42>
 80a031e:	8833      	ldrh	r3, [r6, #0]
 80a0320:	4123      	asrs	r3, r4
 80a0322:	07d9      	lsls	r1, r3, #31
 80a0324:	d40d      	bmi.n	80a0342 <_Z16touchSensorsLoopv+0x42>
          Serial.print(i); Serial.println(" touched");
 80a0326:	f002 fb7d 	bl	80a2a24 <_Z16_fetch_usbserialv>
 80a032a:	220a      	movs	r2, #10
 80a032c:	4639      	mov	r1, r7
 80a032e:	f002 fa32 	bl	80a2796 <_ZN5Print5printEhi>
 80a0332:	f002 fb77 	bl	80a2a24 <_Z16_fetch_usbserialv>
 80a0336:	4914      	ldr	r1, [pc, #80]	; (80a0388 <_Z16touchSensorsLoopv+0x88>)
 80a0338:	f002 f9f9 	bl	80a272e <_ZN5Print7printlnEPKc>

          handleTouchedPin(i);
 80a033c:	4620      	mov	r0, r4
 80a033e:	f7ff ffb1 	bl	80a02a4 <_Z16handleTouchedPini>
        }

      // if it *was* touched and now *isnt*, alert!
        if (!(currtouched & _BV(i)) && (lasttouched & _BV(i)) ) {
 80a0342:	f8b8 3000 	ldrh.w	r3, [r8]
 80a0346:	4123      	asrs	r3, r4
 80a0348:	07da      	lsls	r2, r3, #31
 80a034a:	d40e      	bmi.n	80a036a <_Z16touchSensorsLoopv+0x6a>
 80a034c:	8833      	ldrh	r3, [r6, #0]
 80a034e:	4123      	asrs	r3, r4
 80a0350:	07db      	lsls	r3, r3, #31
 80a0352:	d50a      	bpl.n	80a036a <_Z16touchSensorsLoopv+0x6a>
          Serial.print(i); Serial.println(" released");
 80a0354:	f002 fb66 	bl	80a2a24 <_Z16_fetch_usbserialv>
 80a0358:	4639      	mov	r1, r7
 80a035a:	220a      	movs	r2, #10
 80a035c:	f002 fa1b 	bl	80a2796 <_ZN5Print5printEhi>
 80a0360:	f002 fb60 	bl	80a2a24 <_Z16_fetch_usbserialv>
 80a0364:	4909      	ldr	r1, [pc, #36]	; (80a038c <_Z16touchSensorsLoopv+0x8c>)
 80a0366:	f002 f9e2 	bl	80a272e <_ZN5Print7printlnEPKc>
 80a036a:	3401      	adds	r4, #1
      // do nothing

      break;
    case STATE_GET_USER_INPUT:
      // get user input when touch sensors pressed and check for correct pattern input from user.
      for (uint8_t i=0; i<12; i++) {
 80a036c:	2c0c      	cmp	r4, #12
 80a036e:	d1d1      	bne.n	80a0314 <_Z16touchSensorsLoopv+0x14>
          handleReleasedPin(i);
        }
      }

      // reset our state
      lasttouched = currtouched;
 80a0370:	4b03      	ldr	r3, [pc, #12]	; (80a0380 <_Z16touchSensorsLoopv+0x80>)
 80a0372:	881a      	ldrh	r2, [r3, #0]
 80a0374:	4b03      	ldr	r3, [pc, #12]	; (80a0384 <_Z16touchSensorsLoopv+0x84>)
 80a0376:	801a      	strh	r2, [r3, #0]
 80a0378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a037c:	20000548 	.word	0x20000548
 80a0380:	20000574 	.word	0x20000574
 80a0384:	20000572 	.word	0x20000572
 80a0388:	080a319a 	.word	0x080a319a
 80a038c:	080a31a3 	.word	0x080a31a3

080a0390 <_Z23incrementTheGlowyValuesv>:

      break;
  }
}

void incrementTheGlowyValues() {
 80a0390:	b510      	push	{r4, lr}
  if (goingUp) {
 80a0392:	490c      	ldr	r1, [pc, #48]	; (80a03c4 <_Z23incrementTheGlowyValuesv+0x34>)
 80a0394:	4b0c      	ldr	r3, [pc, #48]	; (80a03c8 <_Z23incrementTheGlowyValuesv+0x38>)
 80a0396:	7808      	ldrb	r0, [r1, #0]
 80a0398:	4c0c      	ldr	r4, [pc, #48]	; (80a03cc <_Z23incrementTheGlowyValuesv+0x3c>)
 80a039a:	b148      	cbz	r0, 80a03b0 <_Z23incrementTheGlowyValuesv+0x20>
    glowyValue += rate;
 80a039c:	6818      	ldr	r0, [r3, #0]
 80a039e:	6822      	ldr	r2, [r4, #0]
 80a03a0:	4402      	add	r2, r0

    if (glowyValue > 255) {
 80a03a2:	2aff      	cmp	r2, #255	; 0xff
 80a03a4:	dd08      	ble.n	80a03b8 <_Z23incrementTheGlowyValuesv+0x28>
      glowyValue = 255;
 80a03a6:	22ff      	movs	r2, #255	; 0xff
 80a03a8:	601a      	str	r2, [r3, #0]

      goingUp = false;
 80a03aa:	2300      	movs	r3, #0
 80a03ac:	700b      	strb	r3, [r1, #0]
 80a03ae:	bd10      	pop	{r4, pc}
    }
  } else {
    glowyValue -= rate;
 80a03b0:	681a      	ldr	r2, [r3, #0]
 80a03b2:	6824      	ldr	r4, [r4, #0]

    if (glowyValue < 0) {
 80a03b4:	1b12      	subs	r2, r2, r4
 80a03b6:	d401      	bmi.n	80a03bc <_Z23incrementTheGlowyValuesv+0x2c>
      glowyValue = 255;

      goingUp = false;
    }
  } else {
    glowyValue -= rate;
 80a03b8:	601a      	str	r2, [r3, #0]
 80a03ba:	bd10      	pop	{r4, pc}

    if (glowyValue < 0) {
      glowyValue = 0;
 80a03bc:	6018      	str	r0, [r3, #0]

      goingUp = true;
 80a03be:	2301      	movs	r3, #1
 80a03c0:	700b      	strb	r3, [r1, #0]
 80a03c2:	bd10      	pop	{r4, pc}
 80a03c4:	20000000 	.word	0x20000000
 80a03c8:	20000510 	.word	0x20000510
 80a03cc:	20000004 	.word	0x20000004

080a03d0 <loop>:
    }
  }
}

void loop() {
 80a03d0:	b508      	push	{r3, lr}
  #ifdef TEST_TOUCH
    touchSensorsLoop();
 80a03d2:	f7ff ff95 	bl	80a0300 <_Z16touchSensorsLoopv>
  #endif

  switch (gameState) {
 80a03d6:	4b08      	ldr	r3, [pc, #32]	; (80a03f8 <loop+0x28>)
 80a03d8:	681b      	ldr	r3, [r3, #0]
 80a03da:	2b03      	cmp	r3, #3
 80a03dc:	d002      	beq.n	80a03e4 <loop+0x14>
 80a03de:	2b04      	cmp	r3, #4
 80a03e0:	d000      	beq.n	80a03e4 <loop+0x14>
 80a03e2:	b90b      	cbnz	r3, 80a03e8 <loop+0x18>
    case STATE_VICTORY:
      incrementTheGlowyValues();

      break;
    case STATE_LOSER:
      incrementTheGlowyValues();
 80a03e4:	f7ff ffd4 	bl	80a0390 <_Z23incrementTheGlowyValuesv>
  // pinMode(TX, OUTPUT);
  // noTone(TX);
  #endif

  #ifdef TEST_NEOPIXEL
    neoPixelLoop();
 80a03e8:	f7ff fef6 	bl	80a01d8 <_Z12neoPixelLoopv>
  // #endif
  // #endif

  // put a delay so it isn't overwhelming
  delay(50);
 80a03ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // }
  // #endif
  // #endif

  // put a delay so it isn't overwhelming
  delay(50);
 80a03f0:	2032      	movs	r0, #50	; 0x32
 80a03f2:	f002 b825 	b.w	80a2440 <delay>
 80a03f6:	bf00      	nop
 80a03f8:	20000548 	.word	0x20000548

080a03fc <_ZN16Adafruit_SSD1306D0Ev>:
 80a03fc:	b510      	push	{r4, lr}
 80a03fe:	4604      	mov	r4, r0
 80a0400:	2124      	movs	r1, #36	; 0x24
 80a0402:	f002 fd0c 	bl	80a2e1e <_ZdlPvj>
 80a0406:	4620      	mov	r0, r4
 80a0408:	bd10      	pop	{r4, pc}
	...

080a040c <_GLOBAL__sub_I_SystemMode>:
 80a040c:	b537      	push	{r0, r1, r2, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a040e:	f001 fe79 	bl	80a2104 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0412:	4b16      	ldr	r3, [pc, #88]	; (80a046c <_GLOBAL__sub_I_SystemMode+0x60>)
 80a0414:	2200      	movs	r2, #0
 80a0416:	701a      	strb	r2, [r3, #0]
 80a0418:	805a      	strh	r2, [r3, #2]
 80a041a:	f64f 72ff 	movw	r2, #65535	; 0xffff
#define OLED_CLK    A0
#define OLED_MOSI   A1
#define OLED_RESET  A2
#define OLED_DC     A3
#define OLED_CS     A4
Adafruit_SSD1306 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);
 80a041e:	4c14      	ldr	r4, [pc, #80]	; (80a0470 <_GLOBAL__sub_I_SystemMode+0x64>)
 80a0420:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0422:	2003      	movs	r0, #3
 80a0424:	f001 ff78 	bl	80a2318 <set_system_mode>
 80a0428:	4d12      	ldr	r5, [pc, #72]	; (80a0474 <_GLOBAL__sub_I_SystemMode+0x68>)
 80a042a:	220c      	movs	r2, #12
 80a042c:	230e      	movs	r3, #14
 80a042e:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a0432:	210b      	movs	r1, #11
 80a0434:	230d      	movs	r3, #13
 80a0436:	220a      	movs	r2, #10
 80a0438:	4620      	mov	r0, r4
 80a043a:	f000 fc6f 	bl	80a0d1c <_ZN16Adafruit_SSD1306C1Eaaaaa>
 80a043e:	462a      	mov	r2, r5
 80a0440:	490d      	ldr	r1, [pc, #52]	; (80a0478 <_GLOBAL__sub_I_SystemMode+0x6c>)
 80a0442:	4620      	mov	r0, r4
 80a0444:	f002 fce6 	bl	80a2e14 <__aeabi_atexit>
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0448:	4c0c      	ldr	r4, [pc, #48]	; (80a047c <_GLOBAL__sub_I_SystemMode+0x70>)

/**
 * Touch Board
 */
#ifdef TEST_TOUCH
Adafruit_MPR121 cap = Adafruit_MPR121();
 80a044a:	480d      	ldr	r0, [pc, #52]	; (80a0480 <_GLOBAL__sub_I_SystemMode+0x74>)
 80a044c:	f000 f81c 	bl	80a0488 <_ZN15Adafruit_MPR121C1Ev>
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0450:	2302      	movs	r3, #2
 80a0452:	461a      	mov	r2, r3
 80a0454:	2118      	movs	r1, #24
 80a0456:	4620      	mov	r0, r4
 80a0458:	f000 fce1 	bl	80a0e1e <_ZN17Adafruit_NeoPixelC1Ethh>
 80a045c:	462a      	mov	r2, r5
 80a045e:	4620      	mov	r0, r4
 80a0460:	4908      	ldr	r1, [pc, #32]	; (80a0484 <_GLOBAL__sub_I_SystemMode+0x78>)
  // #endif
  // #endif

  // put a delay so it isn't overwhelming
  delay(50);
 80a0462:	b003      	add	sp, #12
 80a0464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0468:	f002 bcd4 	b.w	80a2e14 <__aeabi_atexit>
 80a046c:	20000518 	.word	0x20000518
 80a0470:	20000524 	.word	0x20000524
 80a0474:	200004e0 	.word	0x200004e0
 80a0478:	080a00c9 	.word	0x080a00c9
 80a047c:	20000554 	.word	0x20000554
 80a0480:	2000054c 	.word	0x2000054c
 80a0484:	080a0d81 	.word	0x080a0d81

080a0488 <_ZN15Adafruit_MPR121C1Ev>:
 ****************************************************/

#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}
 80a0488:	4770      	bx	lr

080a048a <_ZN15Adafruit_MPR12113readRegister8Eh>:
}

/*********************************************************************/


uint8_t Adafruit_MPR121::readRegister8(uint8_t reg) {
 80a048a:	b538      	push	{r3, r4, r5, lr}
 80a048c:	4604      	mov	r4, r0
 80a048e:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a0490:	f002 fc66 	bl	80a2d60 <_Z19__fetch_global_Wirev>
 80a0494:	f994 1000 	ldrsb.w	r1, [r4]
 80a0498:	f002 f834 	bl	80a2504 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a049c:	f002 fc60 	bl	80a2d60 <_Z19__fetch_global_Wirev>
 80a04a0:	6803      	ldr	r3, [r0, #0]
 80a04a2:	4629      	mov	r1, r5
 80a04a4:	689b      	ldr	r3, [r3, #8]
 80a04a6:	4798      	blx	r3
    Wire.endTransmission(false);
 80a04a8:	f002 fc5a 	bl	80a2d60 <_Z19__fetch_global_Wirev>
 80a04ac:	2100      	movs	r1, #0
 80a04ae:	f002 f82c 	bl	80a250a <_ZN7TwoWire15endTransmissionEh>
    while (Wire.requestFrom(_i2caddr, 1) != 1);
 80a04b2:	f002 fc55 	bl	80a2d60 <_Z19__fetch_global_Wirev>
 80a04b6:	2201      	movs	r2, #1
 80a04b8:	f994 1000 	ldrsb.w	r1, [r4]
 80a04bc:	f002 f819 	bl	80a24f2 <_ZN7TwoWire11requestFromEii>
 80a04c0:	2801      	cmp	r0, #1
 80a04c2:	d1f6      	bne.n	80a04b2 <_ZN15Adafruit_MPR12113readRegister8Eh+0x28>
    return ( Wire.read());
 80a04c4:	f002 fc4c 	bl	80a2d60 <_Z19__fetch_global_Wirev>
 80a04c8:	6803      	ldr	r3, [r0, #0]
 80a04ca:	695b      	ldr	r3, [r3, #20]
 80a04cc:	4798      	blx	r3
}
 80a04ce:	b2c0      	uxtb	r0, r0
 80a04d0:	bd38      	pop	{r3, r4, r5, pc}

080a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>:
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
 80a04d2:	b570      	push	{r4, r5, r6, lr}
 80a04d4:	4606      	mov	r6, r0
 80a04d6:	4614      	mov	r4, r2
 80a04d8:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a04da:	f002 fc41 	bl	80a2d60 <_Z19__fetch_global_Wirev>
 80a04de:	f996 1000 	ldrsb.w	r1, [r6]
 80a04e2:	f002 f80f 	bl	80a2504 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 80a04e6:	f002 fc3b 	bl	80a2d60 <_Z19__fetch_global_Wirev>
 80a04ea:	6803      	ldr	r3, [r0, #0]
 80a04ec:	4629      	mov	r1, r5
 80a04ee:	689b      	ldr	r3, [r3, #8]
 80a04f0:	4798      	blx	r3
    Wire.write((uint8_t)(value));
 80a04f2:	f002 fc35 	bl	80a2d60 <_Z19__fetch_global_Wirev>
 80a04f6:	6803      	ldr	r3, [r0, #0]
 80a04f8:	4621      	mov	r1, r4
 80a04fa:	689b      	ldr	r3, [r3, #8]
 80a04fc:	4798      	blx	r3
    Wire.endTransmission();
 80a04fe:	f002 fc2f 	bl	80a2d60 <_Z19__fetch_global_Wirev>
}
 80a0502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
    Wire.beginTransmission(_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)(value));
    Wire.endTransmission();
 80a0506:	f002 b804 	b.w	80a2512 <_ZN7TwoWire15endTransmissionEv>

080a050a <_ZN15Adafruit_MPR12113setThresholdsEhh>:
void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
 80a050a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a050c:	4605      	mov	r5, r0
 80a050e:	460f      	mov	r7, r1
 80a0510:	4616      	mov	r6, r2
 80a0512:	2441      	movs	r4, #65	; 0x41
  for (uint8_t i=0; i<12; i++) {
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
 80a0514:	4621      	mov	r1, r4
 80a0516:	463a      	mov	r2, r7
 80a0518:	4628      	mov	r0, r5
 80a051a:	f7ff ffda 	bl	80a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
 80a051e:	1c61      	adds	r1, r4, #1
 80a0520:	3402      	adds	r4, #2
 80a0522:	4632      	mov	r2, r6
 80a0524:	b2c9      	uxtb	r1, r1
 80a0526:	4628      	mov	r0, r5
 80a0528:	b2e4      	uxtb	r4, r4
 80a052a:	f7ff ffd2 	bl	80a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
  for (uint8_t i=0; i<12; i++) {
 80a052e:	2c59      	cmp	r4, #89	; 0x59
 80a0530:	d1f0      	bne.n	80a0514 <_ZN15Adafruit_MPR12113setThresholdsEhh+0xa>
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
  }
}
 80a0532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0534 <_ZN15Adafruit_MPR1215beginEh>:
#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
 80a0534:	b538      	push	{r3, r4, r5, lr}
 80a0536:	4604      	mov	r4, r0
 80a0538:	460d      	mov	r5, r1
  Wire.begin();
 80a053a:	f002 fc11 	bl	80a2d60 <_Z19__fetch_global_Wirev>
 80a053e:	f001 ffc9 	bl	80a24d4 <_ZN7TwoWire5beginEv>
    
  _i2caddr = i2caddr;

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a0542:	2263      	movs	r2, #99	; 0x63
 80a0544:	2180      	movs	r1, #128	; 0x80
 80a0546:	4620      	mov	r0, r4
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
  Wire.begin();
    
  _i2caddr = i2caddr;
 80a0548:	7025      	strb	r5, [r4, #0]

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a054a:	f7ff ffc2 	bl	80a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  delay(1);
 80a054e:	2001      	movs	r0, #1
 80a0550:	f001 ff76 	bl	80a2440 <delay>
  //  Serial.print("$"); Serial.print(i, HEX); 
  //  Serial.print(": 0x"); Serial.println(readRegister8(i));
  }
  

  writeRegister(MPR121_ECR, 0x0);
 80a0554:	2200      	movs	r2, #0
 80a0556:	215e      	movs	r1, #94	; 0x5e
 80a0558:	4620      	mov	r0, r4
 80a055a:	f7ff ffba 	bl	80a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  uint8_t c = readRegister8(MPR121_CONFIG2);
 80a055e:	215d      	movs	r1, #93	; 0x5d
 80a0560:	4620      	mov	r0, r4
 80a0562:	f7ff ff92 	bl	80a048a <_ZN15Adafruit_MPR12113readRegister8Eh>
  
  if (c != 0x24) return false;
 80a0566:	2824      	cmp	r0, #36	; 0x24
 80a0568:	d151      	bne.n	80a060e <_ZN15Adafruit_MPR1215beginEh+0xda>
  return true;
}

void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
 80a056a:	4620      	mov	r0, r4
 80a056c:	2206      	movs	r2, #6
 80a056e:	210c      	movs	r1, #12
 80a0570:	f7ff ffcb 	bl	80a050a <_ZN15Adafruit_MPR12113setThresholdsEhh>
  
  if (c != 0x24) return false;


  setThreshholds(12, 6);
  writeRegister(MPR121_MHDR, 0x01);
 80a0574:	4620      	mov	r0, r4
 80a0576:	2201      	movs	r2, #1
 80a0578:	212b      	movs	r1, #43	; 0x2b
 80a057a:	f7ff ffaa 	bl	80a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDR, 0x01);
 80a057e:	4620      	mov	r0, r4
 80a0580:	2201      	movs	r2, #1
 80a0582:	212c      	movs	r1, #44	; 0x2c
 80a0584:	f7ff ffa5 	bl	80a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLR, 0x0E);
 80a0588:	4620      	mov	r0, r4
 80a058a:	220e      	movs	r2, #14
 80a058c:	212d      	movs	r1, #45	; 0x2d
 80a058e:	f7ff ffa0 	bl	80a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLR, 0x00);
 80a0592:	4620      	mov	r0, r4
 80a0594:	2200      	movs	r2, #0
 80a0596:	212e      	movs	r1, #46	; 0x2e
 80a0598:	f7ff ff9b 	bl	80a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_MHDF, 0x01);
 80a059c:	4620      	mov	r0, r4
 80a059e:	2201      	movs	r2, #1
 80a05a0:	212f      	movs	r1, #47	; 0x2f
 80a05a2:	f7ff ff96 	bl	80a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDF, 0x05);
 80a05a6:	4620      	mov	r0, r4
 80a05a8:	2205      	movs	r2, #5
 80a05aa:	2130      	movs	r1, #48	; 0x30
 80a05ac:	f7ff ff91 	bl	80a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLF, 0x01);
 80a05b0:	4620      	mov	r0, r4
 80a05b2:	2201      	movs	r2, #1
 80a05b4:	2131      	movs	r1, #49	; 0x31
 80a05b6:	f7ff ff8c 	bl	80a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLF, 0x00);
 80a05ba:	4620      	mov	r0, r4
 80a05bc:	2200      	movs	r2, #0
 80a05be:	2132      	movs	r1, #50	; 0x32
 80a05c0:	f7ff ff87 	bl	80a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_NHDT, 0x00);
 80a05c4:	4620      	mov	r0, r4
 80a05c6:	2200      	movs	r2, #0
 80a05c8:	2133      	movs	r1, #51	; 0x33
 80a05ca:	f7ff ff82 	bl	80a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLT, 0x00);
 80a05ce:	4620      	mov	r0, r4
 80a05d0:	2200      	movs	r2, #0
 80a05d2:	2134      	movs	r1, #52	; 0x34
 80a05d4:	f7ff ff7d 	bl	80a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLT, 0x00);
 80a05d8:	4620      	mov	r0, r4
 80a05da:	2200      	movs	r2, #0
 80a05dc:	2135      	movs	r1, #53	; 0x35
 80a05de:	f7ff ff78 	bl	80a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_DEBOUNCE, 0);
 80a05e2:	4620      	mov	r0, r4
 80a05e4:	2200      	movs	r2, #0
 80a05e6:	215b      	movs	r1, #91	; 0x5b
 80a05e8:	f7ff ff73 	bl	80a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 80a05ec:	4620      	mov	r0, r4
 80a05ee:	2210      	movs	r2, #16
 80a05f0:	215c      	movs	r1, #92	; 0x5c
 80a05f2:	f7ff ff6e 	bl	80a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 80a05f6:	4620      	mov	r0, r4
 80a05f8:	2220      	movs	r2, #32
 80a05fa:	215d      	movs	r1, #93	; 0x5d
 80a05fc:	f7ff ff69 	bl	80a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>

//  writeRegister(MPR121_UPLIMIT, 150);
//  writeRegister(MPR121_TARGETLIMIT, 100); // should be ~400 (100 shifted)
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking
 80a0600:	4620      	mov	r0, r4
 80a0602:	228f      	movs	r2, #143	; 0x8f
 80a0604:	215e      	movs	r1, #94	; 0x5e
 80a0606:	f7ff ff64 	bl	80a04d2 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  return true;
 80a060a:	2001      	movs	r0, #1
 80a060c:	bd38      	pop	{r3, r4, r5, pc}

  writeRegister(MPR121_ECR, 0x0);

  uint8_t c = readRegister8(MPR121_CONFIG2);
  
  if (c != 0x24) return false;
 80a060e:	2000      	movs	r0, #0
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking

  return true;
}
 80a0610:	bd38      	pop	{r3, r4, r5, pc}

080a0612 <_GLOBAL__sub_I__ZN15Adafruit_MPR121C2Ev>:
 80a0612:	f001 bd77 	b.w	80a2104 <HAL_Pin_Map>

080a0616 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a0616:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a061a:	461e      	mov	r6, r3
 80a061c:	b085      	sub	sp, #20
 80a061e:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80a0622:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a0624:	1a9a      	subs	r2, r3, r2
 80a0626:	2a00      	cmp	r2, #0
 80a0628:	bfb8      	it	lt
 80a062a:	4252      	neglt	r2, r2
 80a062c:	9200      	str	r2, [sp, #0]
 80a062e:	1a72      	subs	r2, r6, r1
 80a0630:	2a00      	cmp	r2, #0
 80a0632:	bfb8      	it	lt
 80a0634:	4252      	neglt	r2, r2
 80a0636:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a0638:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a063a:	9a00      	ldr	r2, [sp, #0]
 80a063c:	9901      	ldr	r1, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a063e:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a0640:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a0642:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a0646:	dd05      	ble.n	80a0654 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
 80a0648:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
 80a064a:	461e      	mov	r6, r3
 80a064c:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a064e:	4622      	mov	r2, r4
    swap(x0, y0);
 80a0650:	462c      	mov	r4, r5
 80a0652:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
 80a0654:	42b4      	cmp	r4, r6
 80a0656:	dd05      	ble.n	80a0664 <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
 80a0658:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
 80a065a:	461d      	mov	r5, r3
 80a065c:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
 80a065e:	4622      	mov	r2, r4
 80a0660:	4634      	mov	r4, r6
 80a0662:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
 80a0664:	1b5a      	subs	r2, r3, r5
 80a0666:	2a00      	cmp	r2, #0
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a0668:	ebc4 0806 	rsb	r8, r4, r6
  dy = abs(y1 - y0);
 80a066c:	bfb8      	it	lt
 80a066e:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a0670:	fa1f f888 	uxth.w	r8, r8
  dy = abs(y1 - y0);
 80a0674:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
 80a0676:	fa0f f788 	sxth.w	r7, r8
 80a067a:	2202      	movs	r2, #2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a067c:	429d      	cmp	r5, r3
 80a067e:	bfb4      	ite	lt
 80a0680:	2301      	movlt	r3, #1
 80a0682:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);

  int16_t err = dx / 2;
 80a0686:	fb97 f7f2 	sdiv	r7, r7, r2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a068a:	9302      	str	r3, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 80a068c:	42b4      	cmp	r4, r6
 80a068e:	dc1f      	bgt.n	80a06d0 <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
 80a0690:	9a01      	ldr	r2, [sp, #4]
 80a0692:	9b00      	ldr	r3, [sp, #0]
      drawPixel(y0, x0, color);
    } else {
      drawPixel(x0, y0, color);
 80a0694:	4648      	mov	r0, r9
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
 80a0696:	4293      	cmp	r3, r2
 80a0698:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
 80a069c:	bfc8      	it	gt
 80a069e:	4622      	movgt	r2, r4
 80a06a0:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a06a4:	bfc8      	it	gt
 80a06a6:	4629      	movgt	r1, r5
 80a06a8:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
 80a06aa:	bfdc      	itt	le
 80a06ac:	462a      	movle	r2, r5
 80a06ae:	4621      	movle	r1, r4
 80a06b0:	47d8      	blx	fp
    }
    err -= dy;
 80a06b2:	9b03      	ldr	r3, [sp, #12]
 80a06b4:	1aff      	subs	r7, r7, r3
 80a06b6:	b2bb      	uxth	r3, r7
 80a06b8:	b21f      	sxth	r7, r3
    if (err < 0) {
 80a06ba:	2f00      	cmp	r7, #0
 80a06bc:	da05      	bge.n	80a06ca <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
 80a06be:	9a02      	ldr	r2, [sp, #8]
      err += dx;
 80a06c0:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
 80a06c4:	4415      	add	r5, r2
 80a06c6:	b22d      	sxth	r5, r5
      err += dx;
 80a06c8:	b23f      	sxth	r7, r7
 80a06ca:	3401      	adds	r4, #1
 80a06cc:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
 80a06ce:	e7dd      	b.n	80a068c <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
 80a06d0:	b005      	add	sp, #20
 80a06d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a06d6 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a06d6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a06da:	4604      	mov	r4, r0
 80a06dc:	4691      	mov	r9, r2
 80a06de:	460d      	mov	r5, r1
 80a06e0:	4698      	mov	r8, r3
 80a06e2:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 80a06e6:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a06e8:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 80a06ec:	9600      	str	r6, [sp, #0]
 80a06ee:	69ff      	ldr	r7, [r7, #28]
 80a06f0:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 80a06f2:	6823      	ldr	r3, [r4, #0]
 80a06f4:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80a06f8:	9600      	str	r6, [sp, #0]
 80a06fa:	444a      	add	r2, r9
 80a06fc:	69df      	ldr	r7, [r3, #28]
 80a06fe:	4629      	mov	r1, r5
 80a0700:	4643      	mov	r3, r8
 80a0702:	4620      	mov	r0, r4
 80a0704:	b212      	sxth	r2, r2
 80a0706:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 80a0708:	6823      	ldr	r3, [r4, #0]
 80a070a:	9600      	str	r6, [sp, #0]
 80a070c:	699f      	ldr	r7, [r3, #24]
 80a070e:	464a      	mov	r2, r9
 80a0710:	4653      	mov	r3, sl
 80a0712:	4629      	mov	r1, r5
 80a0714:	4620      	mov	r0, r4
 80a0716:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 80a0718:	6823      	ldr	r3, [r4, #0]
 80a071a:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 80a071e:	960a      	str	r6, [sp, #40]	; 0x28
 80a0720:	4429      	add	r1, r5
 80a0722:	699d      	ldr	r5, [r3, #24]
 80a0724:	464a      	mov	r2, r9
 80a0726:	4653      	mov	r3, sl
 80a0728:	4620      	mov	r0, r4
 80a072a:	46ac      	mov	ip, r5
 80a072c:	b209      	sxth	r1, r1
}
 80a072e:	b002      	add	sp, #8
 80a0730:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
 80a0734:	4760      	bx	ip

080a0736 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 80a0736:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 80a0738:	3b01      	subs	r3, #1
 80a073a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a073e:	4413      	add	r3, r2
 80a0740:	6804      	ldr	r4, [r0, #0]
 80a0742:	b21b      	sxth	r3, r3
 80a0744:	9300      	str	r3, [sp, #0]
 80a0746:	9501      	str	r5, [sp, #4]
 80a0748:	6964      	ldr	r4, [r4, #20]
 80a074a:	460b      	mov	r3, r1
 80a074c:	47a0      	blx	r4
}
 80a074e:	b003      	add	sp, #12
 80a0750:	bd30      	pop	{r4, r5, pc}

080a0752 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 80a0752:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 80a0754:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a0758:	6804      	ldr	r4, [r0, #0]
 80a075a:	e88d 0024 	stmia.w	sp, {r2, r5}
 80a075e:	3b01      	subs	r3, #1
 80a0760:	440b      	add	r3, r1
 80a0762:	6964      	ldr	r4, [r4, #20]
 80a0764:	b21b      	sxth	r3, r3
 80a0766:	47a0      	blx	r4
}
 80a0768:	b003      	add	sp, #12
 80a076a:	bd30      	pop	{r4, r5, pc}

080a076c <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a076c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0770:	4605      	mov	r5, r0
 80a0772:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a0774:	460c      	mov	r4, r1
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a0776:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80a077a:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a077e:	eb01 0a03 	add.w	sl, r1, r3
 80a0782:	4554      	cmp	r4, sl
 80a0784:	da0b      	bge.n	80a079e <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
 80a0786:	682b      	ldr	r3, [r5, #0]
 80a0788:	f8cd 9000 	str.w	r9, [sp]
 80a078c:	699e      	ldr	r6, [r3, #24]
 80a078e:	4621      	mov	r1, r4
 80a0790:	4643      	mov	r3, r8
 80a0792:	463a      	mov	r2, r7
 80a0794:	4628      	mov	r0, r5
 80a0796:	3401      	adds	r4, #1
 80a0798:	47b0      	blx	r6
 80a079a:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a079c:	e7f1      	b.n	80a0782 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
 80a079e:	b002      	add	sp, #8
 80a07a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a07a4 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 80a07a4:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 80a07a6:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80a07aa:	6804      	ldr	r4, [r0, #0]
 80a07ac:	9101      	str	r1, [sp, #4]
 80a07ae:	9200      	str	r2, [sp, #0]
 80a07b0:	2200      	movs	r2, #0
 80a07b2:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a07b6:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80a07b8:	4611      	mov	r1, r2
 80a07ba:	47a0      	blx	r4
}
 80a07bc:	b002      	add	sp, #8
 80a07be:	bd10      	pop	{r4, pc}

080a07c0 <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
 80a07c0:	4770      	bx	lr
	...

080a07c4 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a07c4:	8101      	strh	r1, [r0, #8]
{
  _width    = WIDTH;
 80a07c6:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
 80a07c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 80a07cc:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
 80a07ce:	4d07      	ldr	r5, [pc, #28]	; (80a07ec <_ZN12Adafruit_GFXC1Ess+0x28>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a07d0:	2400      	movs	r4, #0
 80a07d2:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
  _height   = HEIGHT;
 80a07d4:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
 80a07d6:	2201      	movs	r2, #1
 80a07d8:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a07da:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
 80a07dc:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
 80a07de:	8204      	strh	r4, [r0, #16]
 80a07e0:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
 80a07e2:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
 80a07e4:	82c1      	strh	r1, [r0, #22]
 80a07e6:	8281      	strh	r1, [r0, #20]
  wrap      = true;
 80a07e8:	7682      	strb	r2, [r0, #26]
}
 80a07ea:	bd30      	pop	{r4, r5, pc}
 80a07ec:	080a31b8 	.word	0x080a31b8

080a07f0 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
 80a07f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a07f4:	b08f      	sub	sp, #60	; 0x3c
 80a07f6:	9106      	str	r1, [sp, #24]
 80a07f8:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 80a07fc:	4604      	mov	r4, r0
 80a07fe:	9107      	str	r1, [sp, #28]
 80a0800:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80a0804:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 80a0808:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
 80a080a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80a080e:	9806      	ldr	r0, [sp, #24]
 80a0810:	4281      	cmp	r1, r0
 80a0812:	dd7d      	ble.n	80a0910 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
 80a0814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80a0818:	4291      	cmp	r1, r2
 80a081a:	dd79      	ble.n	80a0910 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
     (y >= _height)           || // Clip bottom
 80a081c:	2106      	movs	r1, #6
 80a081e:	fb01 0008 	mla	r0, r1, r8, r0
 80a0822:	2800      	cmp	r0, #0
 80a0824:	dd74      	ble.n	80a0910 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
     ((x + 6 * size - 1) < 0) || // Clip left
 80a0826:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
 80a082a:	2800      	cmp	r0, #0
 80a082c:	dd70      	ble.n	80a0910 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
 80a082e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80a0832:	b295      	uxth	r5, r2
 80a0834:	930c      	str	r3, [sp, #48]	; 0x30
 80a0836:	f105 0308 	add.w	r3, r5, #8
 80a083a:	b29b      	uxth	r3, r3
 80a083c:	9109      	str	r1, [sp, #36]	; 0x24
 80a083e:	2600      	movs	r6, #0
 80a0840:	930d      	str	r3, [sp, #52]	; 0x34
 80a0842:	462f      	mov	r7, r5
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0844:	46a9      	mov	r9, r5
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
 80a0846:	2e05      	cmp	r6, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
 80a0848:	bf1f      	itttt	ne
 80a084a:	4b33      	ldrne	r3, [pc, #204]	; (80a0918 <_ZN12Adafruit_GFX8drawCharEsshtth+0x128>)
 80a084c:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
 80a084e:	199b      	addne	r3, r3, r6
 80a0850:	f813 a002 	ldrbne.w	sl, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0854:	fa1f f388 	uxth.w	r3, r8
 80a0858:	9304      	str	r3, [sp, #16]
 80a085a:	9904      	ldr	r1, [sp, #16]
 80a085c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80a0860:	b2b2      	uxth	r2, r6
 80a0862:	fb01 3102 	mla	r1, r1, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a0866:	4413      	add	r3, r2
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0868:	b209      	sxth	r1, r1
 80a086a:	910a      	str	r1, [sp, #40]	; 0x28
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a086c:	b21b      	sxth	r3, r3
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a086e:	fa0f f188 	sxth.w	r1, r8
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
 80a0872:	bf08      	it	eq
 80a0874:	f04f 0a00 	moveq.w	sl, #0
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0878:	9505      	str	r5, [sp, #20]
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a087a:	9103      	str	r1, [sp, #12]
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a087c:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
 80a087e:	f01a 0f01 	tst.w	sl, #1
 80a0882:	d011      	beq.n	80a08a8 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb8>
        if (size == 1) // default size
 80a0884:	f1b8 0f01 	cmp.w	r8, #1
 80a0888:	6823      	ldr	r3, [r4, #0]
 80a088a:	d103      	bne.n	80a0894 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa4>
          drawPixel(x+i, y+j, color);
 80a088c:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a0890:	9b07      	ldr	r3, [sp, #28]
 80a0892:	e014      	b.n	80a08be <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0894:	9a07      	ldr	r2, [sp, #28]
 80a0896:	9201      	str	r2, [sp, #4]
 80a0898:	9a03      	ldr	r2, [sp, #12]
 80a089a:	9200      	str	r2, [sp, #0]
 80a089c:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a08a0:	4613      	mov	r3, r2
 80a08a2:	fa0f f289 	sxth.w	r2, r9
 80a08a6:	e018      	b.n	80a08da <_ZN12Adafruit_GFX8drawCharEsshtth+0xea>
        } 
      } else if (bg != color) {
 80a08a8:	9b07      	ldr	r3, [sp, #28]
 80a08aa:	9a08      	ldr	r2, [sp, #32]
 80a08ac:	4293      	cmp	r3, r2
 80a08ae:	d017      	beq.n	80a08e0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf0>
        if (size == 1) // default size
 80a08b0:	f1b8 0f01 	cmp.w	r8, #1
 80a08b4:	6823      	ldr	r3, [r4, #0]
 80a08b6:	d107      	bne.n	80a08c8 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, bg);
 80a08b8:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a08bc:	4613      	mov	r3, r2
 80a08be:	b23a      	sxth	r2, r7
 80a08c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80a08c2:	4620      	mov	r0, r4
 80a08c4:	47d8      	blx	fp
 80a08c6:	e00b      	b.n	80a08e0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf0>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a08c8:	9a08      	ldr	r2, [sp, #32]
 80a08ca:	9201      	str	r2, [sp, #4]
 80a08cc:	9a03      	ldr	r2, [sp, #12]
 80a08ce:	9200      	str	r2, [sp, #0]
 80a08d0:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a08d4:	4613      	mov	r3, r2
 80a08d6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80a08da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a08dc:	4620      	mov	r0, r4
 80a08de:	47d8      	blx	fp
 80a08e0:	9b04      	ldr	r3, [sp, #16]
 80a08e2:	9a04      	ldr	r2, [sp, #16]
 80a08e4:	4499      	add	r9, r3
 80a08e6:	9b05      	ldr	r3, [sp, #20]
 80a08e8:	3701      	adds	r7, #1
 80a08ea:	4413      	add	r3, r2
 80a08ec:	b29b      	uxth	r3, r3
 80a08ee:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 80a08f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a08f2:	b2bf      	uxth	r7, r7
 80a08f4:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
 80a08f6:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 80a08fa:	fa1f f989 	uxth.w	r9, r9
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 80a08fe:	d1be      	bne.n	80a087e <_ZN12Adafruit_GFX8drawCharEsshtth+0x8e>
 80a0900:	9b09      	ldr	r3, [sp, #36]	; 0x24
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
 80a0902:	3601      	adds	r6, #1
 80a0904:	3b01      	subs	r3, #1
 80a0906:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a090a:	b276      	sxtb	r6, r6
 80a090c:	9309      	str	r3, [sp, #36]	; 0x24
 80a090e:	d198      	bne.n	80a0842 <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
 80a0910:	b00f      	add	sp, #60	; 0x3c
 80a0912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0916:	bf00      	nop
 80a0918:	080a31e8 	.word	0x080a31e8

080a091c <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a091c:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
 80a091e:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a0920:	b085      	sub	sp, #20
 80a0922:	4604      	mov	r4, r0
 80a0924:	460b      	mov	r3, r1

  if (c == '\n') {
 80a0926:	d104      	bne.n	80a0932 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
 80a0928:	7e02      	ldrb	r2, [r0, #24]
 80a092a:	8a43      	ldrh	r3, [r0, #18]
 80a092c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a0930:	e023      	b.n	80a097a <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
 80a0932:	290d      	cmp	r1, #13
 80a0934:	d024      	beq.n	80a0980 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80a0936:	7e05      	ldrb	r5, [r0, #24]
 80a0938:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 80a093c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 80a0940:	9502      	str	r5, [sp, #8]
 80a0942:	8ac5      	ldrh	r5, [r0, #22]
 80a0944:	9501      	str	r5, [sp, #4]
 80a0946:	8a85      	ldrh	r5, [r0, #20]
 80a0948:	9500      	str	r5, [sp, #0]
 80a094a:	f7ff ff51 	bl	80a07f0 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
 80a094e:	7e22      	ldrb	r2, [r4, #24]
 80a0950:	8a23      	ldrh	r3, [r4, #16]
 80a0952:	b291      	uxth	r1, r2
 80a0954:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80a0958:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80a095c:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
 80a095e:	b21b      	sxth	r3, r3
 80a0960:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80a0962:	b168      	cbz	r0, 80a0980 <_ZN12Adafruit_GFX5writeEh+0x64>
 80a0964:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80a0968:	f06f 0505 	mvn.w	r5, #5
 80a096c:	fb05 0202 	mla	r2, r5, r2, r0
 80a0970:	4293      	cmp	r3, r2
 80a0972:	dd05      	ble.n	80a0980 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
 80a0974:	8a63      	ldrh	r3, [r4, #18]
 80a0976:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80a097a:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
 80a097c:	2300      	movs	r3, #0
 80a097e:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
 80a0980:	2001      	movs	r0, #1
 80a0982:	b005      	add	sp, #20
 80a0984:	bd30      	pop	{r4, r5, pc}

080a0986 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
 80a0986:	7e40      	ldrb	r0, [r0, #25]
 80a0988:	4770      	bx	lr

080a098a <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
 80a098a:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80a098e:	4770      	bx	lr

080a0990 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
 80a0990:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80a0994:	4770      	bx	lr

080a0996 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a0996:	f001 bbb5 	b.w	80a2104 <HAL_Pin_Map>
	...

080a099c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a099c:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
 80a099e:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a09a0:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
 80a09a4:	2c02      	cmp	r4, #2
 80a09a6:	d008      	beq.n	80a09ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
 80a09a8:	2c03      	cmp	r4, #3
 80a09aa:	d00f      	beq.n	80a09cc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
 80a09ac:	2c01      	cmp	r4, #1
 80a09ae:	d170      	bne.n	80a0a92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
 80a09b0:	8904      	ldrh	r4, [r0, #8]
 80a09b2:	3c01      	subs	r4, #1
 80a09b4:	1aa2      	subs	r2, r4, r2
 80a09b6:	b212      	sxth	r2, r2
      break;
 80a09b8:	e00c      	b.n	80a09d4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
 80a09ba:	8944      	ldrh	r4, [r0, #10]
 80a09bc:	3c01      	subs	r4, #1
 80a09be:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
 80a09c0:	8904      	ldrh	r4, [r0, #8]
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
 80a09c2:	b212      	sxth	r2, r2
      x -= (w-1);
 80a09c4:	1ae4      	subs	r4, r4, r3
 80a09c6:	1a61      	subs	r1, r4, r1
 80a09c8:	b209      	sxth	r1, r1
      break;
 80a09ca:	e062      	b.n	80a0a92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
 80a09cc:	8944      	ldrh	r4, [r0, #10]
 80a09ce:	1ae4      	subs	r4, r4, r3
 80a09d0:	1a61      	subs	r1, r4, r1
 80a09d2:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 80a09d4:	2a00      	cmp	r2, #0
 80a09d6:	db5b      	blt.n	80a0a90 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
 80a09d8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a09dc:	4294      	cmp	r4, r2
 80a09de:	f340 8090 	ble.w	80a0b02 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
 80a09e2:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 80a09e4:	bfbe      	ittt	lt
 80a09e6:	185b      	addlt	r3, r3, r1
 80a09e8:	b21b      	sxthlt	r3, r3
    __y = 0;
 80a09ea:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a09ec:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80a09f0:	18cc      	adds	r4, r1, r3
 80a09f2:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
 80a09f4:	bfc4      	itt	gt
 80a09f6:	1a43      	subgt	r3, r0, r1
 80a09f8:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
 80a09fa:	2b00      	cmp	r3, #0
 80a09fc:	f340 8081 	ble.w	80a0b02 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 80a0a00:	b2c9      	uxtb	r1, r1
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0a02:	08c8      	lsrs	r0, r1, #3
 80a0a04:	4f3f      	ldr	r7, [pc, #252]	; (80a0b04 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
 80a0a06:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a0a0a:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
 80a0a0e:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0a10:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a0a14:	d017      	beq.n	80a0a46 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
 80a0a16:	f1c1 0108 	rsb	r1, r1, #8
 80a0a1a:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a0a1c:	493a      	ldr	r1, [pc, #232]	; (80a0b08 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
 80a0a1e:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a0a20:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
 80a0a22:	bf3f      	itttt	cc
 80a0a24:	ebc3 0e00 	rsbcc	lr, r3, r0
 80a0a28:	21ff      	movcc	r1, #255	; 0xff
 80a0a2a:	fa41 f10e 	asrcc.w	r1, r1, lr
 80a0a2e:	400e      	andcc	r6, r1
 80a0a30:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
 80a0a32:	2d01      	cmp	r5, #1
      *pBuf |= mask;
 80a0a34:	bf0c      	ite	eq
 80a0a36:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
 80a0a38:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a0a3a:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
 80a0a3c:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a0a3e:	d360      	bcc.n	80a0b02 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
 80a0a40:	1a18      	subs	r0, r3, r0
 80a0a42:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
 80a0a44:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
 80a0a46:	2b07      	cmp	r3, #7
 80a0a48:	d917      	bls.n	80a0a7a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
 80a0a4a:	2d01      	cmp	r5, #1
 80a0a4c:	bf0c      	ite	eq
 80a0a4e:	20ff      	moveq	r0, #255	; 0xff
 80a0a50:	2000      	movne	r0, #0
 80a0a52:	461a      	mov	r2, r3
 80a0a54:	f104 0180 	add.w	r1, r4, #128	; 0x80

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 80a0a58:	3a08      	subs	r2, #8
 80a0a5a:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
 80a0a5c:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
 80a0a5e:	f801 0c80 	strb.w	r0, [r1, #-128]
 80a0a62:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 80a0a66:	d8f7      	bhi.n	80a0a58 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
 80a0a68:	f1a3 0208 	sub.w	r2, r3, #8
 80a0a6c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80a0a70:	3201      	adds	r2, #1
 80a0a72:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 80a0a76:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
 80a0a7a:	2b00      	cmp	r3, #0
 80a0a7c:	d041      	beq.n	80a0b02 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a0a7e:	4a23      	ldr	r2, [pc, #140]	; (80a0b0c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
    if(color == WHITE) { 
 80a0a80:	2d01      	cmp	r5, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a0a82:	5cd2      	ldrb	r2, [r2, r3]
 80a0a84:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
      *pBuf |= mask;
 80a0a86:	bf0c      	ite	eq
 80a0a88:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
 80a0a8a:	4393      	bicne	r3, r2
 80a0a8c:	7023      	strb	r3, [r4, #0]
 80a0a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
 80a0a92:	2a00      	cmp	r2, #0
 80a0a94:	db35      	blt.n	80a0b02 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a0a96:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a0a9a:	4294      	cmp	r4, r2
 80a0a9c:	dd31      	ble.n	80a0b02 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
 80a0a9e:	2900      	cmp	r1, #0
    w += x;
 80a0aa0:	bfbc      	itt	lt
 80a0aa2:	18c9      	addlt	r1, r1, r3
 80a0aa4:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a0aa6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
 80a0aaa:	bfb8      	it	lt
 80a0aac:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a0aae:	18ce      	adds	r6, r1, r3
 80a0ab0:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 80a0ab2:	bfc4      	itt	gt
 80a0ab4:	1a63      	subgt	r3, r4, r1
 80a0ab6:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
 80a0ab8:	2b00      	cmp	r3, #0
 80a0aba:	dd22      	ble.n	80a0b02 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0abc:	10d0      	asrs	r0, r2, #3
 80a0abe:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
 80a0ac2:	4810      	ldr	r0, [pc, #64]	; (80a0b04 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
 80a0ac4:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0ac8:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
 80a0aca:	2001      	movs	r0, #1
 80a0acc:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
 80a0ad0:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
 80a0ad2:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
 80a0ad4:	d109      	bne.n	80a0aea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
 80a0ad6:	3b01      	subs	r3, #1
 80a0ad8:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
 80a0ada:	1c5c      	adds	r4, r3, #1
 80a0adc:	d011      	beq.n	80a0b02 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a0ade:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a0ae2:	4310      	orrs	r0, r2
 80a0ae4:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a0ae8:	e7f5      	b.n	80a0ad6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
 80a0aea:	43d2      	mvns	r2, r2
 80a0aec:	b2d2      	uxtb	r2, r2
 80a0aee:	3b01      	subs	r3, #1
 80a0af0:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
 80a0af2:	1c58      	adds	r0, r3, #1
 80a0af4:	d005      	beq.n	80a0b02 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a0af6:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a0afa:	4010      	ands	r0, r2
 80a0afc:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a0b00:	e7f5      	b.n	80a0aee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
 80a0b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0b04:	20000078 	.word	0x20000078
 80a0b08:	20000070 	.word	0x20000070
 80a0b0c:	20000068 	.word	0x20000068

080a0b10 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a0b10:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
 80a0b12:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a0b14:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
 80a0b18:	2c02      	cmp	r4, #2
 80a0b1a:	d008      	beq.n	80a0b2e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
 80a0b1c:	2c03      	cmp	r4, #3
 80a0b1e:	d00f      	beq.n	80a0b40 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
 80a0b20:	2c01      	cmp	r4, #1
 80a0b22:	d112      	bne.n	80a0b4a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
 80a0b24:	8904      	ldrh	r4, [r0, #8]
 80a0b26:	1ae4      	subs	r4, r4, r3
 80a0b28:	1aa2      	subs	r2, r4, r2
 80a0b2a:	b212      	sxth	r2, r2
      break;
 80a0b2c:	e06d      	b.n	80a0c0a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 80a0b2e:	8904      	ldrh	r4, [r0, #8]
 80a0b30:	3c01      	subs	r4, #1
 80a0b32:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
 80a0b34:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 80a0b36:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
 80a0b38:	1ae4      	subs	r4, r4, r3
 80a0b3a:	1aa2      	subs	r2, r4, r2
 80a0b3c:	b212      	sxth	r2, r2
      break;
 80a0b3e:	e004      	b.n	80a0b4a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
 80a0b40:	8944      	ldrh	r4, [r0, #10]
 80a0b42:	3c01      	subs	r4, #1
 80a0b44:	1a61      	subs	r1, r4, r1
 80a0b46:	b209      	sxth	r1, r1
      break;
 80a0b48:	e05f      	b.n	80a0c0a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 80a0b4a:	2900      	cmp	r1, #0
 80a0b4c:	db5c      	blt.n	80a0c08 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
 80a0b4e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a0b52:	428c      	cmp	r4, r1
 80a0b54:	f340 8091 	ble.w	80a0c7a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
 80a0b58:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 80a0b5a:	bfbc      	itt	lt
 80a0b5c:	18d2      	addlt	r2, r2, r3
 80a0b5e:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a0b60:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
 80a0b64:	bfb8      	it	lt
 80a0b66:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a0b68:	18d4      	adds	r4, r2, r3
 80a0b6a:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
 80a0b6c:	bfc4      	itt	gt
 80a0b6e:	1a83      	subgt	r3, r0, r2
 80a0b70:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
 80a0b72:	2b00      	cmp	r3, #0
 80a0b74:	f340 8081 	ble.w	80a0c7a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 80a0b78:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0b7a:	4e40      	ldr	r6, [pc, #256]	; (80a0c7c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
 80a0b7c:	b2da      	uxtb	r2, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0b7e:	08e3      	lsrs	r3, r4, #3
 80a0b80:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a0b84:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0b88:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a0b8c:	d017      	beq.n	80a0bbe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
 80a0b8e:	f1c4 0408 	rsb	r4, r4, #8
 80a0b92:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a0b94:	4c3a      	ldr	r4, [pc, #232]	; (80a0c80 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
 80a0b96:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a0b98:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
 80a0b9a:	bf3f      	itttt	cc
 80a0b9c:	ebc2 0e00 	rsbcc	lr, r2, r0
 80a0ba0:	24ff      	movcc	r4, #255	; 0xff
 80a0ba2:	fa44 f40e 	asrcc.w	r4, r4, lr
 80a0ba6:	4027      	andcc	r7, r4
 80a0ba8:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
 80a0baa:	2d01      	cmp	r5, #1
      *pBuf |= mask;
 80a0bac:	bf0c      	ite	eq
 80a0bae:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
 80a0bb0:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a0bb2:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
 80a0bb4:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a0bb6:	d360      	bcc.n	80a0c7a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
 80a0bb8:	1a10      	subs	r0, r2, r0
 80a0bba:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
 80a0bbc:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
 80a0bbe:	2a07      	cmp	r2, #7
 80a0bc0:	d917      	bls.n	80a0bf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
 80a0bc2:	2d01      	cmp	r5, #1
 80a0bc4:	bf0c      	ite	eq
 80a0bc6:	24ff      	moveq	r4, #255	; 0xff
 80a0bc8:	2400      	movne	r4, #0
 80a0bca:	4611      	mov	r1, r2
 80a0bcc:	f103 0080 	add.w	r0, r3, #128	; 0x80

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 80a0bd0:	3908      	subs	r1, #8
 80a0bd2:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
 80a0bd4:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
 80a0bd6:	f800 4c80 	strb.w	r4, [r0, #-128]
 80a0bda:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 80a0bde:	d8f7      	bhi.n	80a0bd0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
 80a0be0:	f1a2 0108 	sub.w	r1, r2, #8
 80a0be4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80a0be8:	3101      	adds	r1, #1
 80a0bea:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
 80a0bee:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
 80a0bf2:	2a00      	cmp	r2, #0
 80a0bf4:	d041      	beq.n	80a0c7a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a0bf6:	4923      	ldr	r1, [pc, #140]	; (80a0c84 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
    if(color == WHITE) { 
 80a0bf8:	2d01      	cmp	r5, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a0bfa:	5c89      	ldrb	r1, [r1, r2]
 80a0bfc:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
      *pBuf |= mask;
 80a0bfe:	bf0c      	ite	eq
 80a0c00:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
 80a0c02:	438a      	bicne	r2, r1
 80a0c04:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
 80a0c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
 80a0c0a:	2900      	cmp	r1, #0
 80a0c0c:	db35      	blt.n	80a0c7a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a0c0e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a0c12:	428c      	cmp	r4, r1
 80a0c14:	dd31      	ble.n	80a0c7a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
 80a0c16:	2a00      	cmp	r2, #0
    w += x;
 80a0c18:	bfbc      	itt	lt
 80a0c1a:	18d2      	addlt	r2, r2, r3
 80a0c1c:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a0c1e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
 80a0c22:	bfb8      	it	lt
 80a0c24:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a0c26:	18d6      	adds	r6, r2, r3
 80a0c28:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 80a0c2a:	bfc4      	itt	gt
 80a0c2c:	1aa3      	subgt	r3, r4, r2
 80a0c2e:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
 80a0c30:	2b00      	cmp	r3, #0
 80a0c32:	dd22      	ble.n	80a0c7a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0c34:	10c8      	asrs	r0, r1, #3
 80a0c36:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
 80a0c3a:	4810      	ldr	r0, [pc, #64]	; (80a0c7c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
 80a0c3c:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0c40:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
 80a0c42:	2201      	movs	r2, #1
 80a0c44:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
 80a0c48:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
 80a0c4a:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
 80a0c4c:	d109      	bne.n	80a0c62 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
 80a0c4e:	1e5a      	subs	r2, r3, #1
 80a0c50:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
 80a0c52:	1c5c      	adds	r4, r3, #1
 80a0c54:	d011      	beq.n	80a0c7a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a0c56:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a0c5a:	430a      	orrs	r2, r1
 80a0c5c:	f800 2c01 	strb.w	r2, [r0, #-1]
 80a0c60:	e7f5      	b.n	80a0c4e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
 80a0c62:	43c9      	mvns	r1, r1
 80a0c64:	b2c9      	uxtb	r1, r1
 80a0c66:	1e5a      	subs	r2, r3, #1
 80a0c68:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
 80a0c6a:	1c5a      	adds	r2, r3, #1
 80a0c6c:	d005      	beq.n	80a0c7a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a0c6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a0c72:	400a      	ands	r2, r1
 80a0c74:	f800 2c01 	strb.w	r2, [r0, #-1]
 80a0c78:	e7f5      	b.n	80a0c66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
 80a0c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0c7c:	20000078 	.word	0x20000078
 80a0c80:	20000070 	.word	0x20000070
 80a0c84:	20000068 	.word	0x20000068

080a0c88 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a0c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 80a0c8a:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a0c8c:	4606      	mov	r6, r0
 80a0c8e:	4614      	mov	r4, r2
 80a0c90:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 80a0c92:	db3f      	blt.n	80a0d14 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a0c94:	f7ff fe79 	bl	80a098a <_ZN12Adafruit_GFX5widthEv>
 80a0c98:	4285      	cmp	r5, r0
 80a0c9a:	da3b      	bge.n	80a0d14 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a0c9c:	2c00      	cmp	r4, #0
 80a0c9e:	db39      	blt.n	80a0d14 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a0ca0:	4630      	mov	r0, r6
 80a0ca2:	f7ff fe75 	bl	80a0990 <_ZN12Adafruit_GFX6heightEv>
 80a0ca6:	4284      	cmp	r4, r0
 80a0ca8:	da34      	bge.n	80a0d14 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a0caa:	4630      	mov	r0, r6
 80a0cac:	f7ff fe6b 	bl	80a0986 <_ZN12Adafruit_GFX11getRotationEv>
 80a0cb0:	2802      	cmp	r0, #2
 80a0cb2:	d127      	bne.n	80a0d04 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0cb4:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
 80a0cb6:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0cb8:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
 80a0cba:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0cbc:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
 80a0cbe:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0cc0:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
 80a0cc2:	b204      	sxth	r4, r0
 80a0cc4:	e006      	b.n	80a0cd4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a0cc6:	2801      	cmp	r0, #1
 80a0cc8:	d104      	bne.n	80a0cd4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
 80a0cca:	8933      	ldrh	r3, [r6, #8]
 80a0ccc:	3b01      	subs	r3, #1
 80a0cce:	1b1b      	subs	r3, r3, r4
 80a0cd0:	462c      	mov	r4, r5
 80a0cd2:	b21d      	sxth	r5, r3
 80a0cd4:	2008      	movs	r0, #8
    break;
  }  

  // x is which column
  if (color == WHITE) 
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a0cd6:	fb94 f0f0 	sdiv	r0, r4, r0
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
 80a0cda:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a0cdc:	b200      	sxth	r0, r0
 80a0cde:	4b0e      	ldr	r3, [pc, #56]	; (80a0d18 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
 80a0ce0:	f004 0207 	and.w	r2, r4, #7
 80a0ce4:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
 80a0ce8:	d104      	bne.n	80a0cf4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a0cea:	4097      	lsls	r7, r2
 80a0cec:	5c5a      	ldrb	r2, [r3, r1]
 80a0cee:	4317      	orrs	r7, r2
 80a0cf0:	545f      	strb	r7, [r3, r1]
 80a0cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
 80a0cf4:	5c58      	ldrb	r0, [r3, r1]
 80a0cf6:	2701      	movs	r7, #1
 80a0cf8:	fa07 f202 	lsl.w	r2, r7, r2
 80a0cfc:	ea20 0202 	bic.w	r2, r0, r2
 80a0d00:	545a      	strb	r2, [r3, r1]
 80a0d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a0d04:	2803      	cmp	r0, #3
 80a0d06:	d1de      	bne.n	80a0cc6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
 80a0d08:	8973      	ldrh	r3, [r6, #10]
 80a0d0a:	3b01      	subs	r3, #1
 80a0d0c:	1b5b      	subs	r3, r3, r5
 80a0d0e:	4625      	mov	r5, r4
 80a0d10:	b21c      	sxth	r4, r3
 80a0d12:	e7df      	b.n	80a0cd4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
 80a0d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0d16:	bf00      	nop
 80a0d18:	20000078 	.word	0x20000078

080a0d1c <_ZN16Adafruit_SSD1306C1Eaaaaa>:
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 80a0d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d1e:	4604      	mov	r4, r0
 80a0d20:	461f      	mov	r7, r3
 80a0d22:	460d      	mov	r5, r1
 80a0d24:	4616      	mov	r6, r2
 80a0d26:	2180      	movs	r1, #128	; 0x80
 80a0d28:	2240      	movs	r2, #64	; 0x40
 80a0d2a:	f7ff fd4b 	bl	80a07c4 <_ZN12Adafruit_GFXC1Ess>
 80a0d2e:	4b09      	ldr	r3, [pc, #36]	; (80a0d54 <_ZN16Adafruit_SSD1306C1Eaaaaa+0x38>)
  cs = CS;
  rst = RST;
  dc = DC;
 80a0d30:	77e7      	strb	r7, [r4, #31]
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 80a0d32:	6023      	str	r3, [r4, #0]
  cs = CS;
 80a0d34:	f99d 301c 	ldrsb.w	r3, [sp, #28]
  rst = RST;
  dc = DC;
  sclk = SCLK;
 80a0d38:	77a6      	strb	r6, [r4, #30]
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
  cs = CS;
 80a0d3a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  rst = RST;
 80a0d3e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
  dc = DC;
  sclk = SCLK;
  sid = SID;
 80a0d42:	7765      	strb	r5, [r4, #29]
}

// constructor for software SPI - we indicate DataCommand, ChipSelect, Reset 
Adafruit_SSD1306::Adafruit_SSD1306(int8_t SID, int8_t SCLK, int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
  cs = CS;
  rst = RST;
 80a0d44:	f884 3020 	strb.w	r3, [r4, #32]
  dc = DC;
  sclk = SCLK;
  sid = SID;
  hwSPI = false;
 80a0d48:	2300      	movs	r3, #0
 80a0d4a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 80a0d4e:	4620      	mov	r0, r4
 80a0d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0d52:	bf00      	nop
 80a0d54:	080a36ec 	.word	0x080a36ec

080a0d58 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
 80a0d58:	f001 b9d4 	b.w	80a2104 <HAL_Pin_Map>

080a0d5c <_GLOBAL__sub_I__ZN7MPU9250C2Ev>:
 80a0d5c:	f001 b9d2 	b.w	80a2104 <HAL_Pin_Map>

080a0d60 <_GLOBAL__sub_I__ZN7MPU92507getMresEv>:
 80a0d60:	f001 b9d0 	b.w	80a2104 <HAL_Pin_Map>

080a0d64 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff>:
  q[1] = q2 * norm;
  q[2] = q3 * norm;
  q[3] = q4 * norm;
}

const float * getQ () { return q; }
 80a0d64:	b508      	push	{r3, lr}
 80a0d66:	f001 f9cd 	bl	80a2104 <HAL_Pin_Map>
// noticed any reduction in solution accuracy. This is essentially the I
// coefficient in a PID control sense; the bigger the feedback coefficient,
// the faster the solution converges, usually at the expense of accuracy.
// In any case, this is the free parameter in the Madgwick filtering and
// fusion scheme.
static float beta = sqrt(3.0f / 4.0f) * GyroMeasError;   // Compute beta
 80a0d6a:	4a02      	ldr	r2, [pc, #8]	; (80a0d74 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x10>)
 80a0d6c:	4b02      	ldr	r3, [pc, #8]	; (80a0d78 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x14>)
 80a0d6e:	601a      	str	r2, [r3, #0]
 80a0d70:	bd08      	pop	{r3, pc}
 80a0d72:	bf00      	nop
 80a0d74:	3f1ac70d 	.word	0x3f1ac70d
 80a0d78:	20000578 	.word	0x20000578

080a0d7c <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0d7c:	f001 b9b2 	b.w	80a20e4 <HAL_Timer_Get_Micro_Seconds>

080a0d80 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0d80:	b510      	push	{r4, lr}
 80a0d82:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0d84:	68c0      	ldr	r0, [r0, #12]
 80a0d86:	b108      	cbz	r0, 80a0d8c <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a0d88:	f001 fb52 	bl	80a2430 <free>
  if (begun) pinMode(pin, INPUT);
 80a0d8c:	7823      	ldrb	r3, [r4, #0]
 80a0d8e:	b11b      	cbz	r3, 80a0d98 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0d90:	2100      	movs	r1, #0
 80a0d92:	79e0      	ldrb	r0, [r4, #7]
 80a0d94:	f001 ffba 	bl	80a2d0c <pinMode>
}
 80a0d98:	4620      	mov	r0, r4
 80a0d9a:	bd10      	pop	{r4, pc}

080a0d9c <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0d9c:	b538      	push	{r3, r4, r5, lr}
 80a0d9e:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0da0:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0da2:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0da4:	b108      	cbz	r0, 80a0daa <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a0da6:	f001 fb43 	bl	80a2430 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a0daa:	79a3      	ldrb	r3, [r4, #6]
 80a0dac:	2b06      	cmp	r3, #6
 80a0dae:	bf0c      	ite	eq
 80a0db0:	2004      	moveq	r0, #4
 80a0db2:	2003      	movne	r0, #3
 80a0db4:	4368      	muls	r0, r5
 80a0db6:	b280      	uxth	r0, r0
 80a0db8:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a0dba:	f001 fb31 	bl	80a2420 <malloc>
 80a0dbe:	60e0      	str	r0, [r4, #12]
 80a0dc0:	b128      	cbz	r0, 80a0dce <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a0dc2:	88a2      	ldrh	r2, [r4, #4]
 80a0dc4:	2100      	movs	r1, #0
 80a0dc6:	f002 f98e 	bl	80a30e6 <memset>
    numLEDs = n;
 80a0dca:	8065      	strh	r5, [r4, #2]
 80a0dcc:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a0dce:	80a0      	strh	r0, [r4, #4]
 80a0dd0:	8060      	strh	r0, [r4, #2]
 80a0dd2:	bd38      	pop	{r3, r4, r5, pc}

080a0dd4 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a0dd4:	b510      	push	{r4, lr}
 80a0dd6:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a0dd8:	2101      	movs	r1, #1
 80a0dda:	79c0      	ldrb	r0, [r0, #7]
 80a0ddc:	f001 ff96 	bl	80a2d0c <pinMode>
  digitalWrite(pin, LOW);
 80a0de0:	2100      	movs	r1, #0
 80a0de2:	79e0      	ldrb	r0, [r4, #7]
 80a0de4:	f001 ffa3 	bl	80a2d2e <digitalWrite>
  begun = true;
 80a0de8:	2301      	movs	r3, #1
 80a0dea:	7023      	strb	r3, [r4, #0]
 80a0dec:	bd10      	pop	{r4, pc}

080a0dee <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0dee:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0df0:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0df2:	4605      	mov	r5, r0
 80a0df4:	460c      	mov	r4, r1
    if (begun) {
 80a0df6:	b11b      	cbz	r3, 80a0e00 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a0df8:	2100      	movs	r1, #0
 80a0dfa:	79c0      	ldrb	r0, [r0, #7]
 80a0dfc:	f001 ff86 	bl	80a2d0c <pinMode>
    }
    pin = p;
    if (begun) {
 80a0e00:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a0e02:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0e04:	b153      	cbz	r3, 80a0e1c <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a0e06:	b2a4      	uxth	r4, r4
 80a0e08:	4620      	mov	r0, r4
 80a0e0a:	2101      	movs	r1, #1
 80a0e0c:	f001 ff7e 	bl	80a2d0c <pinMode>
        digitalWrite(p, LOW);
 80a0e10:	4620      	mov	r0, r4
    }
}
 80a0e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a0e16:	2100      	movs	r1, #0
 80a0e18:	f001 bf89 	b.w	80a2d2e <digitalWrite>
 80a0e1c:	bd38      	pop	{r3, r4, r5, pc}

080a0e1e <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0e1e:	b570      	push	{r4, r5, r6, lr}
 80a0e20:	4604      	mov	r4, r0
 80a0e22:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0e24:	2500      	movs	r5, #0
 80a0e26:	7183      	strb	r3, [r0, #6]
 80a0e28:	7005      	strb	r5, [r0, #0]
 80a0e2a:	7205      	strb	r5, [r0, #8]
 80a0e2c:	60c5      	str	r5, [r0, #12]
 80a0e2e:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a0e30:	f7ff ffb4 	bl	80a0d9c <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0e34:	4620      	mov	r0, r4
 80a0e36:	4631      	mov	r1, r6
 80a0e38:	f7ff ffd9 	bl	80a0dee <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0e3c:	4620      	mov	r0, r4
 80a0e3e:	bd70      	pop	{r4, r5, r6, pc}

080a0e40 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0e40:	68c3      	ldr	r3, [r0, #12]
 80a0e42:	2b00      	cmp	r3, #0
 80a0e44:	f000 858e 	beq.w	80a1964 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a0e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0e4c:	4604      	mov	r4, r0
 80a0e4e:	7983      	ldrb	r3, [r0, #6]
 80a0e50:	b086      	sub	sp, #24
 80a0e52:	3b02      	subs	r3, #2
 80a0e54:	b2db      	uxtb	r3, r3
 80a0e56:	2b04      	cmp	r3, #4
 80a0e58:	bf96      	itet	ls
 80a0e5a:	4a29      	ldrls	r2, [pc, #164]	; (80a0f00 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0e5c:	2532      	movhi	r5, #50	; 0x32
 80a0e5e:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0e62:	f7ff ff8b 	bl	80a0d7c <micros>
 80a0e66:	6923      	ldr	r3, [r4, #16]
 80a0e68:	1ac0      	subs	r0, r0, r3
 80a0e6a:	42a8      	cmp	r0, r5
 80a0e6c:	d3f9      	bcc.n	80a0e62 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a0e6e:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0e70:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0e72:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0e74:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0e76:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a0e7a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0e7e:	f000 8272 	beq.w	80a1366 <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a0e82:	2907      	cmp	r1, #7
 80a0e84:	f000 826f 	beq.w	80a1366 <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0e88:	2906      	cmp	r1, #6
 80a0e8a:	f000 8432 	beq.w	80a16f2 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a0e8e:	2905      	cmp	r1, #5
 80a0e90:	f000 83ab 	beq.w	80a15ea <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0e94:	2908      	cmp	r1, #8
 80a0e96:	f000 83a8 	beq.w	80a15ea <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a0e9a:	2900      	cmp	r1, #0
 80a0e9c:	f040 8563 	bne.w	80a1966 <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a0ea0:	4a18      	ldr	r2, [pc, #96]	; (80a0f04 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0ea2:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0ea6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0eaa:	b29b      	uxth	r3, r3
 80a0eac:	2b00      	cmp	r3, #0
 80a0eae:	f000 8395 	beq.w	80a15dc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0eb2:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0eb4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0eb8:	f10e 0503 	add.w	r5, lr, #3
 80a0ebc:	3b03      	subs	r3, #3
 80a0ebe:	b29b      	uxth	r3, r3
 80a0ec0:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0ec4:	f89e 3000 	ldrb.w	r3, [lr]
 80a0ec8:	b2db      	uxtb	r3, r3
 80a0eca:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0ece:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0ed2:	b2db      	uxtb	r3, r3
 80a0ed4:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0ed8:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0edc:	b2db      	uxtb	r3, r3
 80a0ede:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0ee2:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0ee6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0eea:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0eee:	021b      	lsls	r3, r3, #8
 80a0ef0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0ef4:	4303      	orrs	r3, r0
 80a0ef6:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0ef8:	f88d 1005 	strb.w	r1, [sp, #5]
 80a0efc:	e11b      	b.n	80a1136 <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a0efe:	bf00      	nop
 80a0f00:	080a371c 	.word	0x080a371c
 80a0f04:	2000057c 	.word	0x2000057c
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f08:	4600      	mov	r0, r0
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
 80a0f60:	bf00      	nop
 80a0f62:	bf00      	nop
 80a0f64:	bf00      	nop
 80a0f66:	bf00      	nop
 80a0f68:	bf00      	nop
 80a0f6a:	bf00      	nop
 80a0f6c:	bf00      	nop
 80a0f6e:	bf00      	nop
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
 80a0f76:	bf00      	nop
 80a0f78:	bf00      	nop
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
 80a0f86:	bf00      	nop
 80a0f88:	bf00      	nop
 80a0f8a:	bf00      	nop
 80a0f8c:	bf00      	nop
 80a0f8e:	bf00      	nop
 80a0f90:	bf00      	nop
 80a0f92:	bf00      	nop
 80a0f94:	bf00      	nop
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
 80a0fae:	bf00      	nop
 80a0fb0:	bf00      	nop
 80a0fb2:	bf00      	nop
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a1010:	79e3      	ldrb	r3, [r4, #7]
 80a1012:	6810      	ldr	r0, [r2, #0]
 80a1014:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1018:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a101c:	88bf      	ldrh	r7, [r7, #4]
 80a101e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1022:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1024:	4600      	mov	r0, r0
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
 80a10d2:	bf00      	nop
 80a10d4:	bf00      	nop
 80a10d6:	bf00      	nop
 80a10d8:	bf00      	nop
 80a10da:	bf00      	nop
 80a10dc:	bf00      	nop
 80a10de:	bf00      	nop
 80a10e0:	bf00      	nop
 80a10e2:	bf00      	nop
 80a10e4:	bf00      	nop
 80a10e6:	bf00      	nop
 80a10e8:	bf00      	nop
 80a10ea:	bf00      	nop
 80a10ec:	bf00      	nop
 80a10ee:	bf00      	nop
 80a10f0:	bf00      	nop
 80a10f2:	bf00      	nop
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a111e:	9b04      	ldr	r3, [sp, #16]
 80a1120:	085b      	lsrs	r3, r3, #1
 80a1122:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1124:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1128:	3301      	adds	r3, #1
 80a112a:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a112c:	2b17      	cmp	r3, #23
 80a112e:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1132:	f200 82db 	bhi.w	80a16ec <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a1136:	79e3      	ldrb	r3, [r4, #7]
 80a1138:	6810      	ldr	r0, [r2, #0]
 80a113a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a113e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1142:	88bf      	ldrh	r7, [r7, #4]
 80a1144:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1148:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a114a:	9803      	ldr	r0, [sp, #12]
 80a114c:	9b04      	ldr	r3, [sp, #16]
 80a114e:	4218      	tst	r0, r3
 80a1150:	f47f aeda 	bne.w	80a0f08 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a1154:	4600      	mov	r0, r0
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a11a6:	79e3      	ldrb	r3, [r4, #7]
 80a11a8:	6810      	ldr	r0, [r2, #0]
 80a11aa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a11ae:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a11b2:	88bf      	ldrh	r7, [r7, #4]
 80a11b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a11b8:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a11ba:	4600      	mov	r0, r0
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	bf00      	nop
 80a11da:	bf00      	nop
 80a11dc:	bf00      	nop
 80a11de:	bf00      	nop
 80a11e0:	bf00      	nop
 80a11e2:	bf00      	nop
 80a11e4:	bf00      	nop
 80a11e6:	bf00      	nop
 80a11e8:	bf00      	nop
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	e6db      	b.n	80a111e <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1366:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a136a:	4a17      	ldr	r2, [pc, #92]	; (80a13c8 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a136c:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a136e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1372:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1374:	2b00      	cmp	r3, #0
 80a1376:	f000 8131 	beq.w	80a15dc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a137a:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a137c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1380:	f10e 0103 	add.w	r1, lr, #3
 80a1384:	3b03      	subs	r3, #3
 80a1386:	b29b      	uxth	r3, r3
 80a1388:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a138c:	f89e 3000 	ldrb.w	r3, [lr]
 80a1390:	b2db      	uxtb	r3, r3
 80a1392:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a1396:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a139a:	b2db      	uxtb	r3, r3
 80a139c:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a13a0:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a13a4:	b2db      	uxtb	r3, r3
 80a13a6:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a13aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a13ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a13b2:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a13b6:	0200      	lsls	r0, r0, #8
 80a13b8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a13bc:	433b      	orrs	r3, r7
 80a13be:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a13c0:	f88d 6005 	strb.w	r6, [sp, #5]
 80a13c4:	e080      	b.n	80a14c8 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a13c6:	bf00      	nop
 80a13c8:	2000057c 	.word	0x2000057c
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a13cc:	4600      	mov	r0, r0
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a1466:	79e3      	ldrb	r3, [r4, #7]
 80a1468:	6810      	ldr	r0, [r2, #0]
 80a146a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a146e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1472:	88bf      	ldrh	r7, [r7, #4]
 80a1474:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1478:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a147a:	4600      	mov	r0, r0
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a14b0:	9b04      	ldr	r3, [sp, #16]
 80a14b2:	085b      	lsrs	r3, r3, #1
 80a14b4:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a14b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a14ba:	3301      	adds	r3, #1
 80a14bc:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a14be:	2b17      	cmp	r3, #23
 80a14c0:	f88d 3005 	strb.w	r3, [sp, #5]
 80a14c4:	f200 8083 	bhi.w	80a15ce <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a14c8:	79e3      	ldrb	r3, [r4, #7]
 80a14ca:	6810      	ldr	r0, [r2, #0]
 80a14cc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a14d0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a14d4:	88bf      	ldrh	r7, [r7, #4]
 80a14d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a14da:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a14dc:	9803      	ldr	r0, [sp, #12]
 80a14de:	9b04      	ldr	r3, [sp, #16]
 80a14e0:	4218      	tst	r0, r3
 80a14e2:	f47f af73 	bne.w	80a13cc <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a14e6:	4600      	mov	r0, r0
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	bf00      	nop
 80a1508:	bf00      	nop
 80a150a:	bf00      	nop
 80a150c:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a150e:	79e3      	ldrb	r3, [r4, #7]
 80a1510:	6810      	ldr	r0, [r2, #0]
 80a1512:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1516:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a151a:	88bf      	ldrh	r7, [r7, #4]
 80a151c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1520:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1522:	4600      	mov	r0, r0
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	bf00      	nop
 80a155c:	bf00      	nop
 80a155e:	bf00      	nop
 80a1560:	bf00      	nop
 80a1562:	bf00      	nop
 80a1564:	bf00      	nop
 80a1566:	bf00      	nop
 80a1568:	bf00      	nop
 80a156a:	bf00      	nop
 80a156c:	bf00      	nop
 80a156e:	bf00      	nop
 80a1570:	bf00      	nop
 80a1572:	bf00      	nop
 80a1574:	bf00      	nop
 80a1576:	bf00      	nop
 80a1578:	bf00      	nop
 80a157a:	bf00      	nop
 80a157c:	bf00      	nop
 80a157e:	bf00      	nop
 80a1580:	bf00      	nop
 80a1582:	bf00      	nop
 80a1584:	bf00      	nop
 80a1586:	bf00      	nop
 80a1588:	bf00      	nop
 80a158a:	bf00      	nop
 80a158c:	bf00      	nop
 80a158e:	bf00      	nop
 80a1590:	bf00      	nop
 80a1592:	bf00      	nop
 80a1594:	bf00      	nop
 80a1596:	bf00      	nop
 80a1598:	bf00      	nop
 80a159a:	bf00      	nop
 80a159c:	bf00      	nop
 80a159e:	bf00      	nop
 80a15a0:	bf00      	nop
 80a15a2:	bf00      	nop
 80a15a4:	bf00      	nop
 80a15a6:	bf00      	nop
 80a15a8:	bf00      	nop
 80a15aa:	bf00      	nop
 80a15ac:	bf00      	nop
 80a15ae:	bf00      	nop
 80a15b0:	bf00      	nop
 80a15b2:	bf00      	nop
 80a15b4:	bf00      	nop
 80a15b6:	bf00      	nop
 80a15b8:	bf00      	nop
 80a15ba:	bf00      	nop
 80a15bc:	bf00      	nop
 80a15be:	bf00      	nop
 80a15c0:	bf00      	nop
 80a15c2:	bf00      	nop
 80a15c4:	bf00      	nop
 80a15c6:	bf00      	nop
 80a15c8:	bf00      	nop
 80a15ca:	bf00      	nop
 80a15cc:	e770      	b.n	80a14b0 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a15ce:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a15d2:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a15d4:	b29b      	uxth	r3, r3
 80a15d6:	2b00      	cmp	r3, #0
 80a15d8:	f47f aecf 	bne.w	80a137a <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a15dc:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a15de:	f7ff fbcd 	bl	80a0d7c <micros>
 80a15e2:	6120      	str	r0, [r4, #16]
}
 80a15e4:	b006      	add	sp, #24
 80a15e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a15ea:	4b5e      	ldr	r3, [pc, #376]	; (80a1764 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a15ec:	4a5e      	ldr	r2, [pc, #376]	; (80a1768 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a15ee:	4618      	mov	r0, r3
 80a15f0:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a15f2:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a15f6:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a15f8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a15fc:	b292      	uxth	r2, r2
 80a15fe:	2a00      	cmp	r2, #0
 80a1600:	d0ec      	beq.n	80a15dc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1602:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1606:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a160a:	f10e 0503 	add.w	r5, lr, #3
 80a160e:	3a03      	subs	r2, #3
 80a1610:	b292      	uxth	r2, r2
 80a1612:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a1616:	f89e 2000 	ldrb.w	r2, [lr]
 80a161a:	b2d2      	uxtb	r2, r2
 80a161c:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a1620:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a1624:	b2d2      	uxtb	r2, r2
 80a1626:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a162a:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a162e:	b2d2      	uxtb	r2, r2
 80a1630:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1634:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a1638:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a163c:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a1640:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a1644:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a1648:	ea42 020c 	orr.w	r2, r2, ip
 80a164c:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a164e:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a1652:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1654:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a1656:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a165a:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a165e:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1662:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1666:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a1668:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a166c:	9e03      	ldr	r6, [sp, #12]
 80a166e:	9a04      	ldr	r2, [sp, #16]
 80a1670:	4216      	tst	r6, r2
 80a1672:	d023      	beq.n	80a16bc <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1674:	685a      	ldr	r2, [r3, #4]
 80a1676:	9e05      	ldr	r6, [sp, #20]
 80a1678:	1b92      	subs	r2, r2, r6
 80a167a:	2a4f      	cmp	r2, #79	; 0x4f
 80a167c:	d9fa      	bls.n	80a1674 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a167e:	79e2      	ldrb	r2, [r4, #7]
 80a1680:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1684:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1688:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a168c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1690:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1694:	6842      	ldr	r2, [r0, #4]
 80a1696:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a1698:	685a      	ldr	r2, [r3, #4]
 80a169a:	9e05      	ldr	r6, [sp, #20]
 80a169c:	1b92      	subs	r2, r2, r6
 80a169e:	2a07      	cmp	r2, #7
 80a16a0:	d9fa      	bls.n	80a1698 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a16a2:	9a04      	ldr	r2, [sp, #16]
 80a16a4:	0852      	lsrs	r2, r2, #1
 80a16a6:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a16a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a16ac:	3201      	adds	r2, #1
 80a16ae:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a16b0:	2a17      	cmp	r2, #23
 80a16b2:	f88d 2005 	strb.w	r2, [sp, #5]
 80a16b6:	d9cc      	bls.n	80a1652 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a16b8:	46ae      	mov	lr, r5
 80a16ba:	e79d      	b.n	80a15f8 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a16bc:	685a      	ldr	r2, [r3, #4]
 80a16be:	9e05      	ldr	r6, [sp, #20]
 80a16c0:	1b92      	subs	r2, r2, r6
 80a16c2:	2a18      	cmp	r2, #24
 80a16c4:	d9fa      	bls.n	80a16bc <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a16c6:	79e2      	ldrb	r2, [r4, #7]
 80a16c8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a16cc:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a16d0:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a16d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a16d8:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a16dc:	6842      	ldr	r2, [r0, #4]
 80a16de:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a16e0:	685a      	ldr	r2, [r3, #4]
 80a16e2:	9e05      	ldr	r6, [sp, #20]
 80a16e4:	1b92      	subs	r2, r2, r6
 80a16e6:	2a45      	cmp	r2, #69	; 0x45
 80a16e8:	d9fa      	bls.n	80a16e0 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a16ea:	e7da      	b.n	80a16a2 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a16ec:	46ae      	mov	lr, r5
 80a16ee:	f7ff bbda 	b.w	80a0ea6 <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a16f2:	4a1d      	ldr	r2, [pc, #116]	; (80a1768 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a16f4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a16f8:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a16fa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a16fe:	b29b      	uxth	r3, r3
 80a1700:	2b00      	cmp	r3, #0
 80a1702:	f43f af6b 	beq.w	80a15dc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a1706:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a1708:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a170c:	f10e 0104 	add.w	r1, lr, #4
 80a1710:	3b04      	subs	r3, #4
 80a1712:	b29b      	uxth	r3, r3
 80a1714:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1718:	f89e 3000 	ldrb.w	r3, [lr]
 80a171c:	b2db      	uxtb	r3, r3
 80a171e:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a1722:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1726:	b2db      	uxtb	r3, r3
 80a1728:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a172c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1730:	b2db      	uxtb	r3, r3
 80a1732:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a1736:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a173a:	b2db      	uxtb	r3, r3
 80a173c:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a1740:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a1744:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a1748:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a174c:	043f      	lsls	r7, r7, #16
 80a174e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a1752:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a1756:	4303      	orrs	r3, r0
 80a1758:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a175c:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a175e:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1762:	e07e      	b.n	80a1862 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a1764:	e0001000 	.word	0xe0001000
 80a1768:	2000057c 	.word	0x2000057c
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a176c:	4600      	mov	r0, r0
 80a176e:	bf00      	nop
 80a1770:	bf00      	nop
 80a1772:	bf00      	nop
 80a1774:	bf00      	nop
 80a1776:	bf00      	nop
 80a1778:	bf00      	nop
 80a177a:	bf00      	nop
 80a177c:	bf00      	nop
 80a177e:	bf00      	nop
 80a1780:	bf00      	nop
 80a1782:	bf00      	nop
 80a1784:	bf00      	nop
 80a1786:	bf00      	nop
 80a1788:	bf00      	nop
 80a178a:	bf00      	nop
 80a178c:	bf00      	nop
 80a178e:	bf00      	nop
 80a1790:	bf00      	nop
 80a1792:	bf00      	nop
 80a1794:	bf00      	nop
 80a1796:	bf00      	nop
 80a1798:	bf00      	nop
 80a179a:	bf00      	nop
 80a179c:	bf00      	nop
 80a179e:	bf00      	nop
 80a17a0:	bf00      	nop
 80a17a2:	bf00      	nop
 80a17a4:	bf00      	nop
 80a17a6:	bf00      	nop
 80a17a8:	bf00      	nop
 80a17aa:	bf00      	nop
 80a17ac:	bf00      	nop
 80a17ae:	bf00      	nop
 80a17b0:	bf00      	nop
 80a17b2:	bf00      	nop
 80a17b4:	bf00      	nop
 80a17b6:	bf00      	nop
 80a17b8:	bf00      	nop
 80a17ba:	bf00      	nop
 80a17bc:	bf00      	nop
 80a17be:	bf00      	nop
 80a17c0:	bf00      	nop
 80a17c2:	bf00      	nop
 80a17c4:	bf00      	nop
 80a17c6:	bf00      	nop
 80a17c8:	bf00      	nop
 80a17ca:	bf00      	nop
 80a17cc:	bf00      	nop
 80a17ce:	bf00      	nop
 80a17d0:	bf00      	nop
 80a17d2:	bf00      	nop
 80a17d4:	bf00      	nop
 80a17d6:	bf00      	nop
 80a17d8:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a17da:	79e3      	ldrb	r3, [r4, #7]
 80a17dc:	6810      	ldr	r0, [r2, #0]
 80a17de:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a17e2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a17e6:	88bf      	ldrh	r7, [r7, #4]
 80a17e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a17ec:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a17ee:	4600      	mov	r0, r0
 80a17f0:	bf00      	nop
 80a17f2:	bf00      	nop
 80a17f4:	bf00      	nop
 80a17f6:	bf00      	nop
 80a17f8:	bf00      	nop
 80a17fa:	bf00      	nop
 80a17fc:	bf00      	nop
 80a17fe:	bf00      	nop
 80a1800:	bf00      	nop
 80a1802:	bf00      	nop
 80a1804:	bf00      	nop
 80a1806:	bf00      	nop
 80a1808:	bf00      	nop
 80a180a:	bf00      	nop
 80a180c:	bf00      	nop
 80a180e:	bf00      	nop
 80a1810:	bf00      	nop
 80a1812:	bf00      	nop
 80a1814:	bf00      	nop
 80a1816:	bf00      	nop
 80a1818:	bf00      	nop
 80a181a:	bf00      	nop
 80a181c:	bf00      	nop
 80a181e:	bf00      	nop
 80a1820:	bf00      	nop
 80a1822:	bf00      	nop
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
 80a1838:	bf00      	nop
 80a183a:	bf00      	nop
 80a183c:	bf00      	nop
 80a183e:	bf00      	nop
 80a1840:	bf00      	nop
 80a1842:	bf00      	nop
 80a1844:	bf00      	nop
 80a1846:	bf00      	nop
 80a1848:	bf00      	nop
 80a184a:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a184c:	9b04      	ldr	r3, [sp, #16]
 80a184e:	085b      	lsrs	r3, r3, #1
 80a1850:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a1852:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1856:	3301      	adds	r3, #1
 80a1858:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a185a:	2b1f      	cmp	r3, #31
 80a185c:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1860:	d87e      	bhi.n	80a1960 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a1862:	79e3      	ldrb	r3, [r4, #7]
 80a1864:	6810      	ldr	r0, [r2, #0]
 80a1866:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a186a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a186e:	88bf      	ldrh	r7, [r7, #4]
 80a1870:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1874:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1876:	9803      	ldr	r0, [sp, #12]
 80a1878:	9b04      	ldr	r3, [sp, #16]
 80a187a:	4218      	tst	r0, r3
 80a187c:	f47f af76 	bne.w	80a176c <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1880:	4600      	mov	r0, r0
 80a1882:	bf00      	nop
 80a1884:	bf00      	nop
 80a1886:	bf00      	nop
 80a1888:	bf00      	nop
 80a188a:	bf00      	nop
 80a188c:	bf00      	nop
 80a188e:	bf00      	nop
 80a1890:	bf00      	nop
 80a1892:	bf00      	nop
 80a1894:	bf00      	nop
 80a1896:	bf00      	nop
 80a1898:	bf00      	nop
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a18a8:	79e3      	ldrb	r3, [r4, #7]
 80a18aa:	6810      	ldr	r0, [r2, #0]
 80a18ac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a18b0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a18b4:	88bf      	ldrh	r7, [r7, #4]
 80a18b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a18ba:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a18bc:	4600      	mov	r0, r0
 80a18be:	bf00      	nop
 80a18c0:	bf00      	nop
 80a18c2:	bf00      	nop
 80a18c4:	bf00      	nop
 80a18c6:	bf00      	nop
 80a18c8:	bf00      	nop
 80a18ca:	bf00      	nop
 80a18cc:	bf00      	nop
 80a18ce:	bf00      	nop
 80a18d0:	bf00      	nop
 80a18d2:	bf00      	nop
 80a18d4:	bf00      	nop
 80a18d6:	bf00      	nop
 80a18d8:	bf00      	nop
 80a18da:	bf00      	nop
 80a18dc:	bf00      	nop
 80a18de:	bf00      	nop
 80a18e0:	bf00      	nop
 80a18e2:	bf00      	nop
 80a18e4:	bf00      	nop
 80a18e6:	bf00      	nop
 80a18e8:	bf00      	nop
 80a18ea:	bf00      	nop
 80a18ec:	bf00      	nop
 80a18ee:	bf00      	nop
 80a18f0:	bf00      	nop
 80a18f2:	bf00      	nop
 80a18f4:	bf00      	nop
 80a18f6:	bf00      	nop
 80a18f8:	bf00      	nop
 80a18fa:	bf00      	nop
 80a18fc:	bf00      	nop
 80a18fe:	bf00      	nop
 80a1900:	bf00      	nop
 80a1902:	bf00      	nop
 80a1904:	bf00      	nop
 80a1906:	bf00      	nop
 80a1908:	bf00      	nop
 80a190a:	bf00      	nop
 80a190c:	bf00      	nop
 80a190e:	bf00      	nop
 80a1910:	bf00      	nop
 80a1912:	bf00      	nop
 80a1914:	bf00      	nop
 80a1916:	bf00      	nop
 80a1918:	bf00      	nop
 80a191a:	bf00      	nop
 80a191c:	bf00      	nop
 80a191e:	bf00      	nop
 80a1920:	bf00      	nop
 80a1922:	bf00      	nop
 80a1924:	bf00      	nop
 80a1926:	bf00      	nop
 80a1928:	bf00      	nop
 80a192a:	bf00      	nop
 80a192c:	bf00      	nop
 80a192e:	bf00      	nop
 80a1930:	bf00      	nop
 80a1932:	bf00      	nop
 80a1934:	bf00      	nop
 80a1936:	bf00      	nop
 80a1938:	bf00      	nop
 80a193a:	bf00      	nop
 80a193c:	bf00      	nop
 80a193e:	bf00      	nop
 80a1940:	bf00      	nop
 80a1942:	bf00      	nop
 80a1944:	bf00      	nop
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
 80a194a:	bf00      	nop
 80a194c:	bf00      	nop
 80a194e:	bf00      	nop
 80a1950:	bf00      	nop
 80a1952:	bf00      	nop
 80a1954:	bf00      	nop
 80a1956:	bf00      	nop
 80a1958:	bf00      	nop
 80a195a:	bf00      	nop
 80a195c:	bf00      	nop
 80a195e:	e775      	b.n	80a184c <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a1960:	468e      	mov	lr, r1
 80a1962:	e6ca      	b.n	80a16fa <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a1964:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a1966:	2903      	cmp	r1, #3
 80a1968:	f000 812e 	beq.w	80a1bc8 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a196c:	4a1e      	ldr	r2, [pc, #120]	; (80a19e8 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a196e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1972:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1974:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1978:	b29b      	uxth	r3, r3
 80a197a:	2b00      	cmp	r3, #0
 80a197c:	f43f ae2e 	beq.w	80a15dc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1980:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1982:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1986:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a1988:	3b03      	subs	r3, #3
 80a198a:	b29b      	uxth	r3, r3
 80a198c:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1990:	f89e 3000 	ldrb.w	r3, [lr]
 80a1994:	f10e 0103 	add.w	r1, lr, #3
 80a1998:	b2db      	uxtb	r3, r3
 80a199a:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a199e:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a19a2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a19a6:	b2db      	uxtb	r3, r3
 80a19a8:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a19ac:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a19b0:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a19b4:	b2db      	uxtb	r3, r3
 80a19b6:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a19ba:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a19be:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a19c2:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a19c6:	021b      	lsls	r3, r3, #8
 80a19c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a19cc:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a19d0:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a19d4:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a19d8:	433b      	orrs	r3, r7
 80a19da:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a19dc:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a19e0:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a19e4:	e07d      	b.n	80a1ae2 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a19e6:	bf00      	nop
 80a19e8:	2000057c 	.word	0x2000057c
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a19ec:	9b04      	ldr	r3, [sp, #16]
 80a19ee:	085b      	lsrs	r3, r3, #1
 80a19f0:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a19f2:	4600      	mov	r0, r0
 80a19f4:	bf00      	nop
 80a19f6:	bf00      	nop
 80a19f8:	bf00      	nop
 80a19fa:	bf00      	nop
 80a19fc:	bf00      	nop
 80a19fe:	bf00      	nop
 80a1a00:	bf00      	nop
 80a1a02:	bf00      	nop
 80a1a04:	bf00      	nop
 80a1a06:	bf00      	nop
 80a1a08:	bf00      	nop
 80a1a0a:	bf00      	nop
 80a1a0c:	bf00      	nop
 80a1a0e:	bf00      	nop
 80a1a10:	bf00      	nop
 80a1a12:	bf00      	nop
 80a1a14:	bf00      	nop
 80a1a16:	bf00      	nop
 80a1a18:	bf00      	nop
 80a1a1a:	bf00      	nop
 80a1a1c:	bf00      	nop
 80a1a1e:	bf00      	nop
 80a1a20:	bf00      	nop
 80a1a22:	bf00      	nop
 80a1a24:	bf00      	nop
 80a1a26:	bf00      	nop
 80a1a28:	bf00      	nop
 80a1a2a:	bf00      	nop
 80a1a2c:	bf00      	nop
 80a1a2e:	bf00      	nop
 80a1a30:	bf00      	nop
 80a1a32:	bf00      	nop
 80a1a34:	bf00      	nop
 80a1a36:	bf00      	nop
 80a1a38:	bf00      	nop
 80a1a3a:	bf00      	nop
 80a1a3c:	bf00      	nop
 80a1a3e:	bf00      	nop
 80a1a40:	bf00      	nop
 80a1a42:	bf00      	nop
 80a1a44:	bf00      	nop
 80a1a46:	bf00      	nop
 80a1a48:	bf00      	nop
 80a1a4a:	bf00      	nop
 80a1a4c:	bf00      	nop
 80a1a4e:	bf00      	nop
 80a1a50:	bf00      	nop
 80a1a52:	bf00      	nop
 80a1a54:	bf00      	nop
 80a1a56:	bf00      	nop
 80a1a58:	bf00      	nop
 80a1a5a:	bf00      	nop
 80a1a5c:	bf00      	nop
 80a1a5e:	bf00      	nop
 80a1a60:	bf00      	nop
 80a1a62:	bf00      	nop
 80a1a64:	bf00      	nop
 80a1a66:	bf00      	nop
 80a1a68:	bf00      	nop
 80a1a6a:	bf00      	nop
 80a1a6c:	bf00      	nop
 80a1a6e:	bf00      	nop
 80a1a70:	bf00      	nop
 80a1a72:	bf00      	nop
 80a1a74:	bf00      	nop
 80a1a76:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1a78:	79e0      	ldrb	r0, [r4, #7]
 80a1a7a:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1a7c:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1a80:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1a84:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a1a88:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1a8c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1a90:	3301      	adds	r3, #1
 80a1a92:	b2db      	uxtb	r3, r3
 80a1a94:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1a98:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1a9c:	4600      	mov	r0, r0
 80a1a9e:	bf00      	nop
 80a1aa0:	bf00      	nop
 80a1aa2:	bf00      	nop
 80a1aa4:	bf00      	nop
 80a1aa6:	bf00      	nop
 80a1aa8:	bf00      	nop
 80a1aaa:	bf00      	nop
 80a1aac:	bf00      	nop
 80a1aae:	bf00      	nop
 80a1ab0:	bf00      	nop
 80a1ab2:	bf00      	nop
 80a1ab4:	bf00      	nop
 80a1ab6:	bf00      	nop
 80a1ab8:	bf00      	nop
 80a1aba:	bf00      	nop
 80a1abc:	bf00      	nop
 80a1abe:	bf00      	nop
 80a1ac0:	bf00      	nop
 80a1ac2:	bf00      	nop
 80a1ac4:	bf00      	nop
          if(j==24) break;
 80a1ac6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1aca:	2b18      	cmp	r3, #24
 80a1acc:	d07a      	beq.n	80a1bc4 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a1ace:	79e3      	ldrb	r3, [r4, #7]
 80a1ad0:	6810      	ldr	r0, [r2, #0]
 80a1ad2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1ad6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1ada:	88bf      	ldrh	r7, [r7, #4]
 80a1adc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1ae0:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a1ae2:	9803      	ldr	r0, [sp, #12]
 80a1ae4:	9b04      	ldr	r3, [sp, #16]
 80a1ae6:	4218      	tst	r0, r3
 80a1ae8:	d180      	bne.n	80a19ec <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a1aea:	4600      	mov	r0, r0
 80a1aec:	bf00      	nop
 80a1aee:	bf00      	nop
 80a1af0:	bf00      	nop
 80a1af2:	bf00      	nop
 80a1af4:	bf00      	nop
 80a1af6:	bf00      	nop
 80a1af8:	bf00      	nop
 80a1afa:	bf00      	nop
 80a1afc:	bf00      	nop
 80a1afe:	bf00      	nop
 80a1b00:	bf00      	nop
 80a1b02:	bf00      	nop
 80a1b04:	bf00      	nop
 80a1b06:	bf00      	nop
 80a1b08:	bf00      	nop
 80a1b0a:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a1b0c:	79e3      	ldrb	r3, [r4, #7]
 80a1b0e:	6810      	ldr	r0, [r2, #0]
 80a1b10:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1b14:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1b18:	88bf      	ldrh	r7, [r7, #4]
 80a1b1a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1b1e:	831f      	strh	r7, [r3, #24]
          j++;
 80a1b20:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1b24:	3301      	adds	r3, #1
 80a1b26:	b2db      	uxtb	r3, r3
 80a1b28:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a1b2c:	9b04      	ldr	r3, [sp, #16]
 80a1b2e:	085b      	lsrs	r3, r3, #1
 80a1b30:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1b32:	4600      	mov	r0, r0
 80a1b34:	bf00      	nop
 80a1b36:	bf00      	nop
 80a1b38:	bf00      	nop
 80a1b3a:	bf00      	nop
 80a1b3c:	bf00      	nop
 80a1b3e:	bf00      	nop
 80a1b40:	bf00      	nop
 80a1b42:	bf00      	nop
 80a1b44:	bf00      	nop
 80a1b46:	bf00      	nop
 80a1b48:	bf00      	nop
 80a1b4a:	bf00      	nop
 80a1b4c:	bf00      	nop
 80a1b4e:	bf00      	nop
 80a1b50:	bf00      	nop
 80a1b52:	bf00      	nop
 80a1b54:	bf00      	nop
 80a1b56:	bf00      	nop
 80a1b58:	bf00      	nop
 80a1b5a:	bf00      	nop
 80a1b5c:	bf00      	nop
 80a1b5e:	bf00      	nop
 80a1b60:	bf00      	nop
 80a1b62:	bf00      	nop
 80a1b64:	bf00      	nop
 80a1b66:	bf00      	nop
 80a1b68:	bf00      	nop
 80a1b6a:	bf00      	nop
 80a1b6c:	bf00      	nop
 80a1b6e:	bf00      	nop
 80a1b70:	bf00      	nop
 80a1b72:	bf00      	nop
 80a1b74:	bf00      	nop
 80a1b76:	bf00      	nop
 80a1b78:	bf00      	nop
 80a1b7a:	bf00      	nop
 80a1b7c:	bf00      	nop
 80a1b7e:	bf00      	nop
 80a1b80:	bf00      	nop
 80a1b82:	bf00      	nop
 80a1b84:	bf00      	nop
 80a1b86:	bf00      	nop
 80a1b88:	bf00      	nop
 80a1b8a:	bf00      	nop
 80a1b8c:	bf00      	nop
 80a1b8e:	bf00      	nop
 80a1b90:	bf00      	nop
 80a1b92:	bf00      	nop
 80a1b94:	bf00      	nop
 80a1b96:	bf00      	nop
 80a1b98:	bf00      	nop
 80a1b9a:	bf00      	nop
 80a1b9c:	bf00      	nop
 80a1b9e:	bf00      	nop
 80a1ba0:	bf00      	nop
 80a1ba2:	bf00      	nop
 80a1ba4:	bf00      	nop
 80a1ba6:	bf00      	nop
 80a1ba8:	bf00      	nop
 80a1baa:	bf00      	nop
 80a1bac:	bf00      	nop
 80a1bae:	bf00      	nop
 80a1bb0:	bf00      	nop
 80a1bb2:	bf00      	nop
 80a1bb4:	bf00      	nop
 80a1bb6:	bf00      	nop
 80a1bb8:	bf00      	nop
 80a1bba:	bf00      	nop
          if(j==24) break;
 80a1bbc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1bc0:	2b18      	cmp	r3, #24
 80a1bc2:	d184      	bne.n	80a1ace <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1bc4:	468e      	mov	lr, r1
 80a1bc6:	e6d5      	b.n	80a1974 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a1bc8:	4a17      	ldr	r2, [pc, #92]	; (80a1c28 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1bca:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1bce:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1bd0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1bd4:	b29b      	uxth	r3, r3
 80a1bd6:	2b00      	cmp	r3, #0
 80a1bd8:	f43f ad00 	beq.w	80a15dc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1bdc:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1bde:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1be2:	f10e 0103 	add.w	r1, lr, #3
 80a1be6:	3b03      	subs	r3, #3
 80a1be8:	b29b      	uxth	r3, r3
 80a1bea:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1bee:	f89e 3000 	ldrb.w	r3, [lr]
 80a1bf2:	b2db      	uxtb	r3, r3
 80a1bf4:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a1bf8:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1bfc:	b2db      	uxtb	r3, r3
 80a1bfe:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a1c02:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1c06:	b2db      	uxtb	r3, r3
 80a1c08:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1c0c:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1c10:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1c14:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1c18:	021b      	lsls	r3, r3, #8
 80a1c1a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1c1e:	4303      	orrs	r3, r0
 80a1c20:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1c22:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1c26:	e0e0      	b.n	80a1dea <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a1c28:	2000057c 	.word	0x2000057c
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1c2c:	4600      	mov	r0, r0
 80a1c2e:	bf00      	nop
 80a1c30:	bf00      	nop
 80a1c32:	bf00      	nop
 80a1c34:	bf00      	nop
 80a1c36:	bf00      	nop
 80a1c38:	bf00      	nop
 80a1c3a:	bf00      	nop
 80a1c3c:	bf00      	nop
 80a1c3e:	bf00      	nop
 80a1c40:	bf00      	nop
 80a1c42:	bf00      	nop
 80a1c44:	bf00      	nop
 80a1c46:	bf00      	nop
 80a1c48:	bf00      	nop
 80a1c4a:	bf00      	nop
 80a1c4c:	bf00      	nop
 80a1c4e:	bf00      	nop
 80a1c50:	bf00      	nop
 80a1c52:	bf00      	nop
 80a1c54:	bf00      	nop
 80a1c56:	bf00      	nop
 80a1c58:	bf00      	nop
 80a1c5a:	bf00      	nop
 80a1c5c:	bf00      	nop
 80a1c5e:	bf00      	nop
 80a1c60:	bf00      	nop
 80a1c62:	bf00      	nop
 80a1c64:	bf00      	nop
 80a1c66:	bf00      	nop
 80a1c68:	bf00      	nop
 80a1c6a:	bf00      	nop
 80a1c6c:	bf00      	nop
 80a1c6e:	bf00      	nop
 80a1c70:	bf00      	nop
 80a1c72:	bf00      	nop
 80a1c74:	bf00      	nop
 80a1c76:	bf00      	nop
 80a1c78:	bf00      	nop
 80a1c7a:	bf00      	nop
 80a1c7c:	bf00      	nop
 80a1c7e:	bf00      	nop
 80a1c80:	bf00      	nop
 80a1c82:	bf00      	nop
 80a1c84:	bf00      	nop
 80a1c86:	bf00      	nop
 80a1c88:	bf00      	nop
 80a1c8a:	bf00      	nop
 80a1c8c:	bf00      	nop
 80a1c8e:	bf00      	nop
 80a1c90:	bf00      	nop
 80a1c92:	bf00      	nop
 80a1c94:	bf00      	nop
 80a1c96:	bf00      	nop
 80a1c98:	bf00      	nop
 80a1c9a:	bf00      	nop
 80a1c9c:	bf00      	nop
 80a1c9e:	bf00      	nop
 80a1ca0:	bf00      	nop
 80a1ca2:	bf00      	nop
 80a1ca4:	bf00      	nop
 80a1ca6:	bf00      	nop
 80a1ca8:	bf00      	nop
 80a1caa:	bf00      	nop
 80a1cac:	bf00      	nop
 80a1cae:	bf00      	nop
 80a1cb0:	bf00      	nop
 80a1cb2:	bf00      	nop
 80a1cb4:	bf00      	nop
 80a1cb6:	bf00      	nop
 80a1cb8:	bf00      	nop
 80a1cba:	bf00      	nop
 80a1cbc:	bf00      	nop
 80a1cbe:	bf00      	nop
 80a1cc0:	bf00      	nop
 80a1cc2:	bf00      	nop
 80a1cc4:	bf00      	nop
 80a1cc6:	bf00      	nop
 80a1cc8:	bf00      	nop
 80a1cca:	bf00      	nop
 80a1ccc:	bf00      	nop
 80a1cce:	bf00      	nop
 80a1cd0:	bf00      	nop
 80a1cd2:	bf00      	nop
 80a1cd4:	bf00      	nop
 80a1cd6:	bf00      	nop
 80a1cd8:	bf00      	nop
 80a1cda:	bf00      	nop
 80a1cdc:	bf00      	nop
 80a1cde:	bf00      	nop
 80a1ce0:	bf00      	nop
 80a1ce2:	bf00      	nop
 80a1ce4:	bf00      	nop
 80a1ce6:	bf00      	nop
 80a1ce8:	bf00      	nop
 80a1cea:	bf00      	nop
 80a1cec:	bf00      	nop
 80a1cee:	bf00      	nop
 80a1cf0:	bf00      	nop
 80a1cf2:	bf00      	nop
 80a1cf4:	bf00      	nop
 80a1cf6:	bf00      	nop
 80a1cf8:	bf00      	nop
 80a1cfa:	bf00      	nop
 80a1cfc:	bf00      	nop
 80a1cfe:	bf00      	nop
 80a1d00:	bf00      	nop
 80a1d02:	bf00      	nop
 80a1d04:	bf00      	nop
 80a1d06:	bf00      	nop
 80a1d08:	bf00      	nop
 80a1d0a:	bf00      	nop
 80a1d0c:	bf00      	nop
 80a1d0e:	bf00      	nop
 80a1d10:	bf00      	nop
 80a1d12:	bf00      	nop
 80a1d14:	bf00      	nop
 80a1d16:	bf00      	nop
 80a1d18:	bf00      	nop
 80a1d1a:	bf00      	nop
 80a1d1c:	bf00      	nop
 80a1d1e:	bf00      	nop
 80a1d20:	bf00      	nop
 80a1d22:	bf00      	nop
 80a1d24:	bf00      	nop
 80a1d26:	bf00      	nop
 80a1d28:	bf00      	nop
 80a1d2a:	bf00      	nop
 80a1d2c:	bf00      	nop
 80a1d2e:	bf00      	nop
 80a1d30:	bf00      	nop
 80a1d32:	bf00      	nop
 80a1d34:	bf00      	nop
 80a1d36:	bf00      	nop
 80a1d38:	bf00      	nop
 80a1d3a:	bf00      	nop
 80a1d3c:	bf00      	nop
 80a1d3e:	bf00      	nop
 80a1d40:	bf00      	nop
 80a1d42:	bf00      	nop
 80a1d44:	bf00      	nop
 80a1d46:	bf00      	nop
 80a1d48:	bf00      	nop
 80a1d4a:	bf00      	nop
 80a1d4c:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a1d4e:	79e3      	ldrb	r3, [r4, #7]
 80a1d50:	6810      	ldr	r0, [r2, #0]
 80a1d52:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1d56:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1d5a:	88bf      	ldrh	r7, [r7, #4]
 80a1d5c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1d60:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1d62:	4600      	mov	r0, r0
 80a1d64:	bf00      	nop
 80a1d66:	bf00      	nop
 80a1d68:	bf00      	nop
 80a1d6a:	bf00      	nop
 80a1d6c:	bf00      	nop
 80a1d6e:	bf00      	nop
 80a1d70:	bf00      	nop
 80a1d72:	bf00      	nop
 80a1d74:	bf00      	nop
 80a1d76:	bf00      	nop
 80a1d78:	bf00      	nop
 80a1d7a:	bf00      	nop
 80a1d7c:	bf00      	nop
 80a1d7e:	bf00      	nop
 80a1d80:	bf00      	nop
 80a1d82:	bf00      	nop
 80a1d84:	bf00      	nop
 80a1d86:	bf00      	nop
 80a1d88:	bf00      	nop
 80a1d8a:	bf00      	nop
 80a1d8c:	bf00      	nop
 80a1d8e:	bf00      	nop
 80a1d90:	bf00      	nop
 80a1d92:	bf00      	nop
 80a1d94:	bf00      	nop
 80a1d96:	bf00      	nop
 80a1d98:	bf00      	nop
 80a1d9a:	bf00      	nop
 80a1d9c:	bf00      	nop
 80a1d9e:	bf00      	nop
 80a1da0:	bf00      	nop
 80a1da2:	bf00      	nop
 80a1da4:	bf00      	nop
 80a1da6:	bf00      	nop
 80a1da8:	bf00      	nop
 80a1daa:	bf00      	nop
 80a1dac:	bf00      	nop
 80a1dae:	bf00      	nop
 80a1db0:	bf00      	nop
 80a1db2:	bf00      	nop
 80a1db4:	bf00      	nop
 80a1db6:	bf00      	nop
 80a1db8:	bf00      	nop
 80a1dba:	bf00      	nop
 80a1dbc:	bf00      	nop
 80a1dbe:	bf00      	nop
 80a1dc0:	bf00      	nop
 80a1dc2:	bf00      	nop
 80a1dc4:	bf00      	nop
 80a1dc6:	bf00      	nop
 80a1dc8:	bf00      	nop
 80a1dca:	bf00      	nop
 80a1dcc:	bf00      	nop
 80a1dce:	bf00      	nop
 80a1dd0:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1dd2:	9b04      	ldr	r3, [sp, #16]
 80a1dd4:	085b      	lsrs	r3, r3, #1
 80a1dd6:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1dd8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1ddc:	3301      	adds	r3, #1
 80a1dde:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1de0:	2b17      	cmp	r3, #23
 80a1de2:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1de6:	f200 80e3 	bhi.w	80a1fb0 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a1dea:	79e3      	ldrb	r3, [r4, #7]
 80a1dec:	6810      	ldr	r0, [r2, #0]
 80a1dee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1df2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1df6:	88bf      	ldrh	r7, [r7, #4]
 80a1df8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1dfc:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1dfe:	9803      	ldr	r0, [sp, #12]
 80a1e00:	9b04      	ldr	r3, [sp, #16]
 80a1e02:	4218      	tst	r0, r3
 80a1e04:	f47f af12 	bne.w	80a1c2c <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1e08:	4600      	mov	r0, r0
 80a1e0a:	bf00      	nop
 80a1e0c:	bf00      	nop
 80a1e0e:	bf00      	nop
 80a1e10:	bf00      	nop
 80a1e12:	bf00      	nop
 80a1e14:	bf00      	nop
 80a1e16:	bf00      	nop
 80a1e18:	bf00      	nop
 80a1e1a:	bf00      	nop
 80a1e1c:	bf00      	nop
 80a1e1e:	bf00      	nop
 80a1e20:	bf00      	nop
 80a1e22:	bf00      	nop
 80a1e24:	bf00      	nop
 80a1e26:	bf00      	nop
 80a1e28:	bf00      	nop
 80a1e2a:	bf00      	nop
 80a1e2c:	bf00      	nop
 80a1e2e:	bf00      	nop
 80a1e30:	bf00      	nop
 80a1e32:	bf00      	nop
 80a1e34:	bf00      	nop
 80a1e36:	bf00      	nop
 80a1e38:	bf00      	nop
 80a1e3a:	bf00      	nop
 80a1e3c:	bf00      	nop
 80a1e3e:	bf00      	nop
 80a1e40:	bf00      	nop
 80a1e42:	bf00      	nop
 80a1e44:	bf00      	nop
 80a1e46:	bf00      	nop
 80a1e48:	bf00      	nop
 80a1e4a:	bf00      	nop
 80a1e4c:	bf00      	nop
 80a1e4e:	bf00      	nop
 80a1e50:	bf00      	nop
 80a1e52:	bf00      	nop
 80a1e54:	bf00      	nop
 80a1e56:	bf00      	nop
 80a1e58:	bf00      	nop
 80a1e5a:	bf00      	nop
 80a1e5c:	bf00      	nop
 80a1e5e:	bf00      	nop
 80a1e60:	bf00      	nop
 80a1e62:	bf00      	nop
 80a1e64:	bf00      	nop
 80a1e66:	bf00      	nop
 80a1e68:	bf00      	nop
 80a1e6a:	bf00      	nop
 80a1e6c:	bf00      	nop
 80a1e6e:	bf00      	nop
 80a1e70:	bf00      	nop
 80a1e72:	bf00      	nop
 80a1e74:	bf00      	nop
 80a1e76:	bf00      	nop
 80a1e78:	bf00      	nop
 80a1e7a:	bf00      	nop
 80a1e7c:	bf00      	nop
 80a1e7e:	bf00      	nop
 80a1e80:	bf00      	nop
 80a1e82:	bf00      	nop
 80a1e84:	bf00      	nop
 80a1e86:	bf00      	nop
 80a1e88:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a1e8a:	79e3      	ldrb	r3, [r4, #7]
 80a1e8c:	6810      	ldr	r0, [r2, #0]
 80a1e8e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1e92:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1e96:	88bf      	ldrh	r7, [r7, #4]
 80a1e98:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1e9c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1e9e:	4600      	mov	r0, r0
 80a1ea0:	bf00      	nop
 80a1ea2:	bf00      	nop
 80a1ea4:	bf00      	nop
 80a1ea6:	bf00      	nop
 80a1ea8:	bf00      	nop
 80a1eaa:	bf00      	nop
 80a1eac:	bf00      	nop
 80a1eae:	bf00      	nop
 80a1eb0:	bf00      	nop
 80a1eb2:	bf00      	nop
 80a1eb4:	bf00      	nop
 80a1eb6:	bf00      	nop
 80a1eb8:	bf00      	nop
 80a1eba:	bf00      	nop
 80a1ebc:	bf00      	nop
 80a1ebe:	bf00      	nop
 80a1ec0:	bf00      	nop
 80a1ec2:	bf00      	nop
 80a1ec4:	bf00      	nop
 80a1ec6:	bf00      	nop
 80a1ec8:	bf00      	nop
 80a1eca:	bf00      	nop
 80a1ecc:	bf00      	nop
 80a1ece:	bf00      	nop
 80a1ed0:	bf00      	nop
 80a1ed2:	bf00      	nop
 80a1ed4:	bf00      	nop
 80a1ed6:	bf00      	nop
 80a1ed8:	bf00      	nop
 80a1eda:	bf00      	nop
 80a1edc:	bf00      	nop
 80a1ede:	bf00      	nop
 80a1ee0:	bf00      	nop
 80a1ee2:	bf00      	nop
 80a1ee4:	bf00      	nop
 80a1ee6:	bf00      	nop
 80a1ee8:	bf00      	nop
 80a1eea:	bf00      	nop
 80a1eec:	bf00      	nop
 80a1eee:	bf00      	nop
 80a1ef0:	bf00      	nop
 80a1ef2:	bf00      	nop
 80a1ef4:	bf00      	nop
 80a1ef6:	bf00      	nop
 80a1ef8:	bf00      	nop
 80a1efa:	bf00      	nop
 80a1efc:	bf00      	nop
 80a1efe:	bf00      	nop
 80a1f00:	bf00      	nop
 80a1f02:	bf00      	nop
 80a1f04:	bf00      	nop
 80a1f06:	bf00      	nop
 80a1f08:	bf00      	nop
 80a1f0a:	bf00      	nop
 80a1f0c:	bf00      	nop
 80a1f0e:	bf00      	nop
 80a1f10:	bf00      	nop
 80a1f12:	bf00      	nop
 80a1f14:	bf00      	nop
 80a1f16:	bf00      	nop
 80a1f18:	bf00      	nop
 80a1f1a:	bf00      	nop
 80a1f1c:	bf00      	nop
 80a1f1e:	bf00      	nop
 80a1f20:	bf00      	nop
 80a1f22:	bf00      	nop
 80a1f24:	bf00      	nop
 80a1f26:	bf00      	nop
 80a1f28:	bf00      	nop
 80a1f2a:	bf00      	nop
 80a1f2c:	bf00      	nop
 80a1f2e:	bf00      	nop
 80a1f30:	bf00      	nop
 80a1f32:	bf00      	nop
 80a1f34:	bf00      	nop
 80a1f36:	bf00      	nop
 80a1f38:	bf00      	nop
 80a1f3a:	bf00      	nop
 80a1f3c:	bf00      	nop
 80a1f3e:	bf00      	nop
 80a1f40:	bf00      	nop
 80a1f42:	bf00      	nop
 80a1f44:	bf00      	nop
 80a1f46:	bf00      	nop
 80a1f48:	bf00      	nop
 80a1f4a:	bf00      	nop
 80a1f4c:	bf00      	nop
 80a1f4e:	bf00      	nop
 80a1f50:	bf00      	nop
 80a1f52:	bf00      	nop
 80a1f54:	bf00      	nop
 80a1f56:	bf00      	nop
 80a1f58:	bf00      	nop
 80a1f5a:	bf00      	nop
 80a1f5c:	bf00      	nop
 80a1f5e:	bf00      	nop
 80a1f60:	bf00      	nop
 80a1f62:	bf00      	nop
 80a1f64:	bf00      	nop
 80a1f66:	bf00      	nop
 80a1f68:	bf00      	nop
 80a1f6a:	bf00      	nop
 80a1f6c:	bf00      	nop
 80a1f6e:	bf00      	nop
 80a1f70:	bf00      	nop
 80a1f72:	bf00      	nop
 80a1f74:	bf00      	nop
 80a1f76:	bf00      	nop
 80a1f78:	bf00      	nop
 80a1f7a:	bf00      	nop
 80a1f7c:	bf00      	nop
 80a1f7e:	bf00      	nop
 80a1f80:	bf00      	nop
 80a1f82:	bf00      	nop
 80a1f84:	bf00      	nop
 80a1f86:	bf00      	nop
 80a1f88:	bf00      	nop
 80a1f8a:	bf00      	nop
 80a1f8c:	bf00      	nop
 80a1f8e:	bf00      	nop
 80a1f90:	bf00      	nop
 80a1f92:	bf00      	nop
 80a1f94:	bf00      	nop
 80a1f96:	bf00      	nop
 80a1f98:	bf00      	nop
 80a1f9a:	bf00      	nop
 80a1f9c:	bf00      	nop
 80a1f9e:	bf00      	nop
 80a1fa0:	bf00      	nop
 80a1fa2:	bf00      	nop
 80a1fa4:	bf00      	nop
 80a1fa6:	bf00      	nop
 80a1fa8:	bf00      	nop
 80a1faa:	bf00      	nop
 80a1fac:	bf00      	nop
 80a1fae:	e710      	b.n	80a1dd2 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1fb0:	468e      	mov	lr, r1
 80a1fb2:	e60d      	b.n	80a1bd0 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a1fb4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a1fb4:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a1fb6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1fb8:	428b      	cmp	r3, r1
 80a1fba:	d945      	bls.n	80a2048 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a1fbc:	7a05      	ldrb	r5, [r0, #8]
 80a1fbe:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a1fc2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a1fc6:	b2d6      	uxtb	r6, r2
 80a1fc8:	b145      	cbz	r5, 80a1fdc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a1fca:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a1fcc:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a1fce:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a1fd0:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1fd4:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a1fd8:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1fdc:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a1fe0:	68c7      	ldr	r7, [r0, #12]
 80a1fe2:	f1bc 0f06 	cmp.w	ip, #6
 80a1fe6:	bf0c      	ite	eq
 80a1fe8:	2504      	moveq	r5, #4
 80a1fea:	2503      	movne	r5, #3
 80a1fec:	4369      	muls	r1, r5
 80a1fee:	f1bc 0f08 	cmp.w	ip, #8
 80a1ff2:	eb07 0501 	add.w	r5, r7, r1
 80a1ff6:	d824      	bhi.n	80a2042 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a1ff8:	f04f 0e01 	mov.w	lr, #1
 80a1ffc:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a2000:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a2004:	d10c      	bne.n	80a2020 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a2006:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a200a:	d10d      	bne.n	80a2028 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a200c:	f01e 0f10 	tst.w	lr, #16
 80a2010:	d017      	beq.n	80a2042 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a2012:	2bff      	cmp	r3, #255	; 0xff
 80a2014:	bf08      	it	eq
 80a2016:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a2018:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a201a:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a201c:	70ac      	strb	r4, [r5, #2]
        } break;
 80a201e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a2020:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a2022:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a2024:	70ae      	strb	r6, [r5, #2]
        } break;
 80a2026:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a2028:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a202a:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a202c:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a202e:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a2030:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a2032:	b90b      	cbnz	r3, 80a2038 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a2034:	b2d2      	uxtb	r2, r2
 80a2036:	e002      	b.n	80a203e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a2038:	435a      	muls	r2, r3
 80a203a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a203e:	70ea      	strb	r2, [r5, #3]
        } break;
 80a2040:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a2042:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a2044:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a2046:	70ae      	strb	r6, [r5, #2]
 80a2048:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a204a <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a204a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a204e:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a2052:	4770      	bx	lr

080a2054 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a2054:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a2056:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a2058:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a205a:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a205c:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a205e:	d01e      	beq.n	80a209e <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a2060:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a2062:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a2066:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a2068:	d00c      	beq.n	80a2084 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a206a:	29ff      	cmp	r1, #255	; 0xff
 80a206c:	bf0f      	iteee	eq
 80a206e:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a2072:	0211      	lslne	r1, r2, #8
 80a2074:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80a2078:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a207c:	bf0c      	ite	eq
 80a207e:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a2082:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a2084:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a2086:	1b29      	subs	r1, r5, r4
 80a2088:	8886      	ldrh	r6, [r0, #4]
 80a208a:	b289      	uxth	r1, r1
 80a208c:	428e      	cmp	r6, r1
 80a208e:	d905      	bls.n	80a209c <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a2090:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a2092:	4359      	muls	r1, r3
 80a2094:	1209      	asrs	r1, r1, #8
 80a2096:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a209a:	e7f4      	b.n	80a2086 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a209c:	7202      	strb	r2, [r0, #8]
 80a209e:	bd70      	pop	{r4, r5, r6, pc}

080a20a0 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a20a0:	b508      	push	{r3, lr}
 80a20a2:	f000 f82f 	bl	80a2104 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a20a6:	f000 f82d 	bl	80a2104 <HAL_Pin_Map>
 80a20aa:	4b01      	ldr	r3, [pc, #4]	; (80a20b0 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a20ac:	6018      	str	r0, [r3, #0]
 80a20ae:	bd08      	pop	{r3, pc}
 80a20b0:	2000057c 	.word	0x2000057c

080a20b4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a20b4:	b508      	push	{r3, lr}
 80a20b6:	4b02      	ldr	r3, [pc, #8]	; (80a20c0 <os_mutex_create+0xc>)
 80a20b8:	681b      	ldr	r3, [r3, #0]
 80a20ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a20bc:	9301      	str	r3, [sp, #4]
 80a20be:	bd08      	pop	{r3, pc}
 80a20c0:	080601d0 	.word	0x080601d0

080a20c4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a20c4:	b508      	push	{r3, lr}
 80a20c6:	4b02      	ldr	r3, [pc, #8]	; (80a20d0 <HAL_RNG_GetRandomNumber+0xc>)
 80a20c8:	681b      	ldr	r3, [r3, #0]
 80a20ca:	685b      	ldr	r3, [r3, #4]
 80a20cc:	9301      	str	r3, [sp, #4]
 80a20ce:	bd08      	pop	{r3, pc}
 80a20d0:	0806019c 	.word	0x0806019c

080a20d4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a20d4:	b508      	push	{r3, lr}
 80a20d6:	4b02      	ldr	r3, [pc, #8]	; (80a20e0 <HAL_Delay_Microseconds+0xc>)
 80a20d8:	681b      	ldr	r3, [r3, #0]
 80a20da:	68db      	ldr	r3, [r3, #12]
 80a20dc:	9301      	str	r3, [sp, #4]
 80a20de:	bd08      	pop	{r3, pc}
 80a20e0:	0806019c 	.word	0x0806019c

080a20e4 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a20e4:	b508      	push	{r3, lr}
 80a20e6:	4b02      	ldr	r3, [pc, #8]	; (80a20f0 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a20e8:	681b      	ldr	r3, [r3, #0]
 80a20ea:	691b      	ldr	r3, [r3, #16]
 80a20ec:	9301      	str	r3, [sp, #4]
 80a20ee:	bd08      	pop	{r3, pc}
 80a20f0:	0806019c 	.word	0x0806019c

080a20f4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a20f4:	b508      	push	{r3, lr}
 80a20f6:	4b02      	ldr	r3, [pc, #8]	; (80a2100 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a20f8:	681b      	ldr	r3, [r3, #0]
 80a20fa:	695b      	ldr	r3, [r3, #20]
 80a20fc:	9301      	str	r3, [sp, #4]
 80a20fe:	bd08      	pop	{r3, pc}
 80a2100:	0806019c 	.word	0x0806019c

080a2104 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a2104:	b508      	push	{r3, lr}
 80a2106:	4b02      	ldr	r3, [pc, #8]	; (80a2110 <HAL_Pin_Map+0xc>)
 80a2108:	681b      	ldr	r3, [r3, #0]
 80a210a:	681b      	ldr	r3, [r3, #0]
 80a210c:	9301      	str	r3, [sp, #4]
 80a210e:	bd08      	pop	{r3, pc}
 80a2110:	080601b0 	.word	0x080601b0

080a2114 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a2114:	b508      	push	{r3, lr}
 80a2116:	4b02      	ldr	r3, [pc, #8]	; (80a2120 <HAL_Pin_Mode+0xc>)
 80a2118:	681b      	ldr	r3, [r3, #0]
 80a211a:	689b      	ldr	r3, [r3, #8]
 80a211c:	9301      	str	r3, [sp, #4]
 80a211e:	bd08      	pop	{r3, pc}
 80a2120:	080601b0 	.word	0x080601b0

080a2124 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a2124:	b508      	push	{r3, lr}
 80a2126:	4b02      	ldr	r3, [pc, #8]	; (80a2130 <HAL_Get_Pin_Mode+0xc>)
 80a2128:	681b      	ldr	r3, [r3, #0]
 80a212a:	68db      	ldr	r3, [r3, #12]
 80a212c:	9301      	str	r3, [sp, #4]
 80a212e:	bd08      	pop	{r3, pc}
 80a2130:	080601b0 	.word	0x080601b0

080a2134 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a2134:	b508      	push	{r3, lr}
 80a2136:	4b02      	ldr	r3, [pc, #8]	; (80a2140 <HAL_GPIO_Write+0xc>)
 80a2138:	681b      	ldr	r3, [r3, #0]
 80a213a:	691b      	ldr	r3, [r3, #16]
 80a213c:	9301      	str	r3, [sp, #4]
 80a213e:	bd08      	pop	{r3, pc}
 80a2140:	080601b0 	.word	0x080601b0

080a2144 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a2144:	b508      	push	{r3, lr}
 80a2146:	4b02      	ldr	r3, [pc, #8]	; (80a2150 <HAL_I2C_Begin+0xc>)
 80a2148:	681b      	ldr	r3, [r3, #0]
 80a214a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a214c:	9301      	str	r3, [sp, #4]
 80a214e:	bd08      	pop	{r3, pc}
 80a2150:	080601ac 	.word	0x080601ac

080a2154 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a2154:	b508      	push	{r3, lr}
 80a2156:	4b02      	ldr	r3, [pc, #8]	; (80a2160 <HAL_I2C_Request_Data+0xc>)
 80a2158:	681b      	ldr	r3, [r3, #0]
 80a215a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a215c:	9301      	str	r3, [sp, #4]
 80a215e:	bd08      	pop	{r3, pc}
 80a2160:	080601ac 	.word	0x080601ac

080a2164 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a2164:	b508      	push	{r3, lr}
 80a2166:	4b02      	ldr	r3, [pc, #8]	; (80a2170 <HAL_I2C_Begin_Transmission+0xc>)
 80a2168:	681b      	ldr	r3, [r3, #0]
 80a216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a216c:	9301      	str	r3, [sp, #4]
 80a216e:	bd08      	pop	{r3, pc}
 80a2170:	080601ac 	.word	0x080601ac

080a2174 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a2174:	b508      	push	{r3, lr}
 80a2176:	4b02      	ldr	r3, [pc, #8]	; (80a2180 <HAL_I2C_End_Transmission+0xc>)
 80a2178:	681b      	ldr	r3, [r3, #0]
 80a217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a217c:	9301      	str	r3, [sp, #4]
 80a217e:	bd08      	pop	{r3, pc}
 80a2180:	080601ac 	.word	0x080601ac

080a2184 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a2184:	b508      	push	{r3, lr}
 80a2186:	4b02      	ldr	r3, [pc, #8]	; (80a2190 <HAL_I2C_Write_Data+0xc>)
 80a2188:	681b      	ldr	r3, [r3, #0]
 80a218a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a218c:	9301      	str	r3, [sp, #4]
 80a218e:	bd08      	pop	{r3, pc}
 80a2190:	080601ac 	.word	0x080601ac

080a2194 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a2194:	b508      	push	{r3, lr}
 80a2196:	4b02      	ldr	r3, [pc, #8]	; (80a21a0 <HAL_I2C_Available_Data+0xc>)
 80a2198:	681b      	ldr	r3, [r3, #0]
 80a219a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a219c:	9301      	str	r3, [sp, #4]
 80a219e:	bd08      	pop	{r3, pc}
 80a21a0:	080601ac 	.word	0x080601ac

080a21a4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a21a4:	b508      	push	{r3, lr}
 80a21a6:	4b02      	ldr	r3, [pc, #8]	; (80a21b0 <HAL_I2C_Read_Data+0xc>)
 80a21a8:	681b      	ldr	r3, [r3, #0]
 80a21aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a21ac:	9301      	str	r3, [sp, #4]
 80a21ae:	bd08      	pop	{r3, pc}
 80a21b0:	080601ac 	.word	0x080601ac

080a21b4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a21b4:	b508      	push	{r3, lr}
 80a21b6:	4b02      	ldr	r3, [pc, #8]	; (80a21c0 <HAL_I2C_Peek_Data+0xc>)
 80a21b8:	681b      	ldr	r3, [r3, #0]
 80a21ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a21bc:	9301      	str	r3, [sp, #4]
 80a21be:	bd08      	pop	{r3, pc}
 80a21c0:	080601ac 	.word	0x080601ac

080a21c4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a21c4:	b508      	push	{r3, lr}
 80a21c6:	4b02      	ldr	r3, [pc, #8]	; (80a21d0 <HAL_I2C_Flush_Data+0xc>)
 80a21c8:	681b      	ldr	r3, [r3, #0]
 80a21ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a21cc:	9301      	str	r3, [sp, #4]
 80a21ce:	bd08      	pop	{r3, pc}
 80a21d0:	080601ac 	.word	0x080601ac

080a21d4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a21d4:	b508      	push	{r3, lr}
 80a21d6:	4b02      	ldr	r3, [pc, #8]	; (80a21e0 <HAL_I2C_Is_Enabled+0xc>)
 80a21d8:	681b      	ldr	r3, [r3, #0]
 80a21da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a21dc:	9301      	str	r3, [sp, #4]
 80a21de:	bd08      	pop	{r3, pc}
 80a21e0:	080601ac 	.word	0x080601ac

080a21e4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a21e4:	b508      	push	{r3, lr}
 80a21e6:	4b03      	ldr	r3, [pc, #12]	; (80a21f4 <HAL_I2C_Init+0x10>)
 80a21e8:	681b      	ldr	r3, [r3, #0]
 80a21ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a21ee:	9301      	str	r3, [sp, #4]
 80a21f0:	bd08      	pop	{r3, pc}
 80a21f2:	0000      	.short	0x0000
 80a21f4:	080601ac 	.word	0x080601ac

080a21f8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a21f8:	b508      	push	{r3, lr}
 80a21fa:	4b02      	ldr	r3, [pc, #8]	; (80a2204 <HAL_SPI_Init+0xc>)
 80a21fc:	681b      	ldr	r3, [r3, #0]
 80a21fe:	69db      	ldr	r3, [r3, #28]
 80a2200:	9301      	str	r3, [sp, #4]
 80a2202:	bd08      	pop	{r3, pc}
 80a2204:	080601b4 	.word	0x080601b4

080a2208 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a2208:	b508      	push	{r3, lr}
 80a220a:	4b02      	ldr	r3, [pc, #8]	; (80a2214 <HAL_SPI_Is_Enabled+0xc>)
 80a220c:	681b      	ldr	r3, [r3, #0]
 80a220e:	6a1b      	ldr	r3, [r3, #32]
 80a2210:	9301      	str	r3, [sp, #4]
 80a2212:	bd08      	pop	{r3, pc}
 80a2214:	080601b4 	.word	0x080601b4

080a2218 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a2218:	b508      	push	{r3, lr}
 80a221a:	4b02      	ldr	r3, [pc, #8]	; (80a2224 <HAL_USART_Init+0xc>)
 80a221c:	681b      	ldr	r3, [r3, #0]
 80a221e:	699b      	ldr	r3, [r3, #24]
 80a2220:	9301      	str	r3, [sp, #4]
 80a2222:	bd08      	pop	{r3, pc}
 80a2224:	080601c4 	.word	0x080601c4

080a2228 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a2228:	b508      	push	{r3, lr}
 80a222a:	4b02      	ldr	r3, [pc, #8]	; (80a2234 <HAL_USART_Write_Data+0xc>)
 80a222c:	681b      	ldr	r3, [r3, #0]
 80a222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2230:	9301      	str	r3, [sp, #4]
 80a2232:	bd08      	pop	{r3, pc}
 80a2234:	080601c4 	.word	0x080601c4

080a2238 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a2238:	b508      	push	{r3, lr}
 80a223a:	4b02      	ldr	r3, [pc, #8]	; (80a2244 <HAL_USART_Available_Data+0xc>)
 80a223c:	681b      	ldr	r3, [r3, #0]
 80a223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2240:	9301      	str	r3, [sp, #4]
 80a2242:	bd08      	pop	{r3, pc}
 80a2244:	080601c4 	.word	0x080601c4

080a2248 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a2248:	b508      	push	{r3, lr}
 80a224a:	4b02      	ldr	r3, [pc, #8]	; (80a2254 <HAL_USART_Read_Data+0xc>)
 80a224c:	681b      	ldr	r3, [r3, #0]
 80a224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2250:	9301      	str	r3, [sp, #4]
 80a2252:	bd08      	pop	{r3, pc}
 80a2254:	080601c4 	.word	0x080601c4

080a2258 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a2258:	b508      	push	{r3, lr}
 80a225a:	4b02      	ldr	r3, [pc, #8]	; (80a2264 <HAL_USART_Peek_Data+0xc>)
 80a225c:	681b      	ldr	r3, [r3, #0]
 80a225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2260:	9301      	str	r3, [sp, #4]
 80a2262:	bd08      	pop	{r3, pc}
 80a2264:	080601c4 	.word	0x080601c4

080a2268 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a2268:	b508      	push	{r3, lr}
 80a226a:	4b02      	ldr	r3, [pc, #8]	; (80a2274 <HAL_USART_Flush_Data+0xc>)
 80a226c:	681b      	ldr	r3, [r3, #0]
 80a226e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2270:	9301      	str	r3, [sp, #4]
 80a2272:	bd08      	pop	{r3, pc}
 80a2274:	080601c4 	.word	0x080601c4

080a2278 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a2278:	b508      	push	{r3, lr}
 80a227a:	4b02      	ldr	r3, [pc, #8]	; (80a2284 <HAL_USART_Is_Enabled+0xc>)
 80a227c:	681b      	ldr	r3, [r3, #0]
 80a227e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2280:	9301      	str	r3, [sp, #4]
 80a2282:	bd08      	pop	{r3, pc}
 80a2284:	080601c4 	.word	0x080601c4

080a2288 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a2288:	b508      	push	{r3, lr}
 80a228a:	4b02      	ldr	r3, [pc, #8]	; (80a2294 <HAL_USART_Available_Data_For_Write+0xc>)
 80a228c:	681b      	ldr	r3, [r3, #0]
 80a228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2290:	9301      	str	r3, [sp, #4]
 80a2292:	bd08      	pop	{r3, pc}
 80a2294:	080601c4 	.word	0x080601c4

080a2298 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a2298:	b508      	push	{r3, lr}
 80a229a:	4b02      	ldr	r3, [pc, #8]	; (80a22a4 <HAL_USB_USART_Init+0xc>)
 80a229c:	681b      	ldr	r3, [r3, #0]
 80a229e:	681b      	ldr	r3, [r3, #0]
 80a22a0:	9301      	str	r3, [sp, #4]
 80a22a2:	bd08      	pop	{r3, pc}
 80a22a4:	080601d8 	.word	0x080601d8

080a22a8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a22a8:	b508      	push	{r3, lr}
 80a22aa:	4b02      	ldr	r3, [pc, #8]	; (80a22b4 <HAL_USB_USART_Available_Data+0xc>)
 80a22ac:	681b      	ldr	r3, [r3, #0]
 80a22ae:	691b      	ldr	r3, [r3, #16]
 80a22b0:	9301      	str	r3, [sp, #4]
 80a22b2:	bd08      	pop	{r3, pc}
 80a22b4:	080601d8 	.word	0x080601d8

080a22b8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a22b8:	b508      	push	{r3, lr}
 80a22ba:	4b02      	ldr	r3, [pc, #8]	; (80a22c4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a22bc:	681b      	ldr	r3, [r3, #0]
 80a22be:	695b      	ldr	r3, [r3, #20]
 80a22c0:	9301      	str	r3, [sp, #4]
 80a22c2:	bd08      	pop	{r3, pc}
 80a22c4:	080601d8 	.word	0x080601d8

080a22c8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a22c8:	b508      	push	{r3, lr}
 80a22ca:	4b02      	ldr	r3, [pc, #8]	; (80a22d4 <HAL_USB_USART_Receive_Data+0xc>)
 80a22cc:	681b      	ldr	r3, [r3, #0]
 80a22ce:	699b      	ldr	r3, [r3, #24]
 80a22d0:	9301      	str	r3, [sp, #4]
 80a22d2:	bd08      	pop	{r3, pc}
 80a22d4:	080601d8 	.word	0x080601d8

080a22d8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a22d8:	b508      	push	{r3, lr}
 80a22da:	4b02      	ldr	r3, [pc, #8]	; (80a22e4 <HAL_USB_USART_Send_Data+0xc>)
 80a22dc:	681b      	ldr	r3, [r3, #0]
 80a22de:	69db      	ldr	r3, [r3, #28]
 80a22e0:	9301      	str	r3, [sp, #4]
 80a22e2:	bd08      	pop	{r3, pc}
 80a22e4:	080601d8 	.word	0x080601d8

080a22e8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a22e8:	b508      	push	{r3, lr}
 80a22ea:	4b02      	ldr	r3, [pc, #8]	; (80a22f4 <HAL_USB_USART_Flush_Data+0xc>)
 80a22ec:	681b      	ldr	r3, [r3, #0]
 80a22ee:	6a1b      	ldr	r3, [r3, #32]
 80a22f0:	9301      	str	r3, [sp, #4]
 80a22f2:	bd08      	pop	{r3, pc}
 80a22f4:	080601d8 	.word	0x080601d8

080a22f8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a22f8:	b508      	push	{r3, lr}
 80a22fa:	4b02      	ldr	r3, [pc, #8]	; (80a2304 <inet_gethostbyname+0xc>)
 80a22fc:	681b      	ldr	r3, [r3, #0]
 80a22fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2300:	9301      	str	r3, [sp, #4]
 80a2302:	bd08      	pop	{r3, pc}
 80a2304:	080601c0 	.word	0x080601c0

080a2308 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a2308:	b508      	push	{r3, lr}
 80a230a:	4b02      	ldr	r3, [pc, #8]	; (80a2314 <panic_+0xc>)
 80a230c:	681b      	ldr	r3, [r3, #0]
 80a230e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2310:	9301      	str	r3, [sp, #4]
 80a2312:	bd08      	pop	{r3, pc}
 80a2314:	080201a8 	.word	0x080201a8

080a2318 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2318:	b508      	push	{r3, lr}
 80a231a:	4b02      	ldr	r3, [pc, #8]	; (80a2324 <set_system_mode+0xc>)
 80a231c:	681b      	ldr	r3, [r3, #0]
 80a231e:	685b      	ldr	r3, [r3, #4]
 80a2320:	9301      	str	r3, [sp, #4]
 80a2322:	bd08      	pop	{r3, pc}
 80a2324:	080601a4 	.word	0x080601a4

080a2328 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2328:	b508      	push	{r3, lr}
 80a232a:	4b02      	ldr	r3, [pc, #8]	; (80a2334 <system_delay_ms+0xc>)
 80a232c:	681b      	ldr	r3, [r3, #0]
 80a232e:	695b      	ldr	r3, [r3, #20]
 80a2330:	9301      	str	r3, [sp, #4]
 80a2332:	bd08      	pop	{r3, pc}
 80a2334:	080601a4 	.word	0x080601a4

080a2338 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2338:	b508      	push	{r3, lr}
 80a233a:	4b03      	ldr	r3, [pc, #12]	; (80a2348 <system_ctrl_set_app_request_handler+0x10>)
 80a233c:	681b      	ldr	r3, [r3, #0]
 80a233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a2342:	9301      	str	r3, [sp, #4]
 80a2344:	bd08      	pop	{r3, pc}
 80a2346:	0000      	.short	0x0000
 80a2348:	080601a4 	.word	0x080601a4

080a234c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a234c:	b508      	push	{r3, lr}
 80a234e:	4b03      	ldr	r3, [pc, #12]	; (80a235c <system_ctrl_set_result+0x10>)
 80a2350:	681b      	ldr	r3, [r3, #0]
 80a2352:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a2356:	9301      	str	r3, [sp, #4]
 80a2358:	bd08      	pop	{r3, pc}
 80a235a:	0000      	.short	0x0000
 80a235c:	080601a4 	.word	0x080601a4

080a2360 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a2360:	b508      	push	{r3, lr}
 80a2362:	4b02      	ldr	r3, [pc, #8]	; (80a236c <spark_process+0xc>)
 80a2364:	681b      	ldr	r3, [r3, #0]
 80a2366:	689b      	ldr	r3, [r3, #8]
 80a2368:	9301      	str	r3, [sp, #4]
 80a236a:	bd08      	pop	{r3, pc}
 80a236c:	080601cc 	.word	0x080601cc

080a2370 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a2370:	b508      	push	{r3, lr}
 80a2372:	4b02      	ldr	r3, [pc, #8]	; (80a237c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2374:	681b      	ldr	r3, [r3, #0]
 80a2376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2378:	9301      	str	r3, [sp, #4]
 80a237a:	bd08      	pop	{r3, pc}
 80a237c:	080601cc 	.word	0x080601cc

080a2380 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2380:	b508      	push	{r3, lr}
 80a2382:	4b02      	ldr	r3, [pc, #8]	; (80a238c <network_connect+0xc>)
 80a2384:	681b      	ldr	r3, [r3, #0]
 80a2386:	685b      	ldr	r3, [r3, #4]
 80a2388:	9301      	str	r3, [sp, #4]
 80a238a:	bd08      	pop	{r3, pc}
 80a238c:	080601c8 	.word	0x080601c8

080a2390 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a2390:	b508      	push	{r3, lr}
 80a2392:	4b02      	ldr	r3, [pc, #8]	; (80a239c <network_connecting+0xc>)
 80a2394:	681b      	ldr	r3, [r3, #0]
 80a2396:	689b      	ldr	r3, [r3, #8]
 80a2398:	9301      	str	r3, [sp, #4]
 80a239a:	bd08      	pop	{r3, pc}
 80a239c:	080601c8 	.word	0x080601c8

080a23a0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a23a0:	b508      	push	{r3, lr}
 80a23a2:	4b02      	ldr	r3, [pc, #8]	; (80a23ac <network_disconnect+0xc>)
 80a23a4:	681b      	ldr	r3, [r3, #0]
 80a23a6:	68db      	ldr	r3, [r3, #12]
 80a23a8:	9301      	str	r3, [sp, #4]
 80a23aa:	bd08      	pop	{r3, pc}
 80a23ac:	080601c8 	.word	0x080601c8

080a23b0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a23b0:	b508      	push	{r3, lr}
 80a23b2:	4b02      	ldr	r3, [pc, #8]	; (80a23bc <network_ready+0xc>)
 80a23b4:	681b      	ldr	r3, [r3, #0]
 80a23b6:	691b      	ldr	r3, [r3, #16]
 80a23b8:	9301      	str	r3, [sp, #4]
 80a23ba:	bd08      	pop	{r3, pc}
 80a23bc:	080601c8 	.word	0x080601c8

080a23c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a23c0:	b508      	push	{r3, lr}
 80a23c2:	4b02      	ldr	r3, [pc, #8]	; (80a23cc <network_on+0xc>)
 80a23c4:	681b      	ldr	r3, [r3, #0]
 80a23c6:	695b      	ldr	r3, [r3, #20]
 80a23c8:	9301      	str	r3, [sp, #4]
 80a23ca:	bd08      	pop	{r3, pc}
 80a23cc:	080601c8 	.word	0x080601c8

080a23d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a23d0:	b508      	push	{r3, lr}
 80a23d2:	4b02      	ldr	r3, [pc, #8]	; (80a23dc <network_off+0xc>)
 80a23d4:	681b      	ldr	r3, [r3, #0]
 80a23d6:	699b      	ldr	r3, [r3, #24]
 80a23d8:	9301      	str	r3, [sp, #4]
 80a23da:	bd08      	pop	{r3, pc}
 80a23dc:	080601c8 	.word	0x080601c8

080a23e0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a23e0:	b508      	push	{r3, lr}
 80a23e2:	4b02      	ldr	r3, [pc, #8]	; (80a23ec <network_listen+0xc>)
 80a23e4:	681b      	ldr	r3, [r3, #0]
 80a23e6:	69db      	ldr	r3, [r3, #28]
 80a23e8:	9301      	str	r3, [sp, #4]
 80a23ea:	bd08      	pop	{r3, pc}
 80a23ec:	080601c8 	.word	0x080601c8

080a23f0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a23f0:	b508      	push	{r3, lr}
 80a23f2:	4b02      	ldr	r3, [pc, #8]	; (80a23fc <network_listening+0xc>)
 80a23f4:	681b      	ldr	r3, [r3, #0]
 80a23f6:	6a1b      	ldr	r3, [r3, #32]
 80a23f8:	9301      	str	r3, [sp, #4]
 80a23fa:	bd08      	pop	{r3, pc}
 80a23fc:	080601c8 	.word	0x080601c8

080a2400 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a2400:	b508      	push	{r3, lr}
 80a2402:	4b02      	ldr	r3, [pc, #8]	; (80a240c <network_set_listen_timeout+0xc>)
 80a2404:	681b      	ldr	r3, [r3, #0]
 80a2406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2408:	9301      	str	r3, [sp, #4]
 80a240a:	bd08      	pop	{r3, pc}
 80a240c:	080601c8 	.word	0x080601c8

080a2410 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a2410:	b508      	push	{r3, lr}
 80a2412:	4b02      	ldr	r3, [pc, #8]	; (80a241c <network_get_listen_timeout+0xc>)
 80a2414:	681b      	ldr	r3, [r3, #0]
 80a2416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2418:	9301      	str	r3, [sp, #4]
 80a241a:	bd08      	pop	{r3, pc}
 80a241c:	080601c8 	.word	0x080601c8

080a2420 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a2420:	b508      	push	{r3, lr}
 80a2422:	4b02      	ldr	r3, [pc, #8]	; (80a242c <malloc+0xc>)
 80a2424:	681b      	ldr	r3, [r3, #0]
 80a2426:	681b      	ldr	r3, [r3, #0]
 80a2428:	9301      	str	r3, [sp, #4]
 80a242a:	bd08      	pop	{r3, pc}
 80a242c:	080601a0 	.word	0x080601a0

080a2430 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a2430:	b508      	push	{r3, lr}
 80a2432:	4b02      	ldr	r3, [pc, #8]	; (80a243c <free+0xc>)
 80a2434:	681b      	ldr	r3, [r3, #0]
 80a2436:	685b      	ldr	r3, [r3, #4]
 80a2438:	9301      	str	r3, [sp, #4]
 80a243a:	bd08      	pop	{r3, pc}
 80a243c:	080601a0 	.word	0x080601a0

080a2440 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2440:	2100      	movs	r1, #0
 80a2442:	f7ff bf71 	b.w	80a2328 <system_delay_ms>

080a2446 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2446:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2448:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a244a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a244c:	b113      	cbz	r3, 80a2454 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a244e:	2203      	movs	r2, #3
 80a2450:	4601      	mov	r1, r0
 80a2452:	4798      	blx	r3
    }
 80a2454:	4620      	mov	r0, r4
 80a2456:	bd10      	pop	{r4, pc}

080a2458 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2458:	4770      	bx	lr

080a245a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a245a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a245c:	4606      	mov	r6, r0
 80a245e:	4615      	mov	r5, r2
 80a2460:	460c      	mov	r4, r1
 80a2462:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2464:	42bc      	cmp	r4, r7
 80a2466:	d006      	beq.n	80a2476 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2468:	6833      	ldr	r3, [r6, #0]
 80a246a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a246e:	689b      	ldr	r3, [r3, #8]
 80a2470:	4630      	mov	r0, r6
 80a2472:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2474:	e7f6      	b.n	80a2464 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a2476:	4628      	mov	r0, r5
 80a2478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a247a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a247a:	2200      	movs	r2, #0
 80a247c:	7c00      	ldrb	r0, [r0, #16]
 80a247e:	f7ff be81 	b.w	80a2184 <HAL_I2C_Write_Data>

080a2482 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a2482:	2100      	movs	r1, #0
 80a2484:	7c00      	ldrb	r0, [r0, #16]
 80a2486:	f7ff be85 	b.w	80a2194 <HAL_I2C_Available_Data>

080a248a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a248a:	2100      	movs	r1, #0
 80a248c:	7c00      	ldrb	r0, [r0, #16]
 80a248e:	f7ff be89 	b.w	80a21a4 <HAL_I2C_Read_Data>

080a2492 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a2492:	2100      	movs	r1, #0
 80a2494:	7c00      	ldrb	r0, [r0, #16]
 80a2496:	f7ff be8d 	b.w	80a21b4 <HAL_I2C_Peek_Data>

080a249a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a249a:	2100      	movs	r1, #0
 80a249c:	7c00      	ldrb	r0, [r0, #16]
 80a249e:	f7ff be91 	b.w	80a21c4 <HAL_I2C_Flush_Data>

080a24a2 <_ZN7TwoWireD0Ev>:
 80a24a2:	b510      	push	{r4, lr}
 80a24a4:	4604      	mov	r4, r0
 80a24a6:	2114      	movs	r1, #20
 80a24a8:	f000 fcb9 	bl	80a2e1e <_ZdlPvj>
 80a24ac:	4620      	mov	r0, r4
 80a24ae:	bd10      	pop	{r4, pc}

080a24b0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a24b0:	b510      	push	{r4, lr}
 80a24b2:	4604      	mov	r4, r0
 80a24b4:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a24b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a24ba:	60a3      	str	r3, [r4, #8]
 80a24bc:	4b04      	ldr	r3, [pc, #16]	; (80a24d0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a24be:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a24c0:	7420      	strb	r0, [r4, #16]
 80a24c2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a24c4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a24c6:	f7ff fe8d 	bl	80a21e4 <HAL_I2C_Init>

}
 80a24ca:	4620      	mov	r0, r4
 80a24cc:	bd10      	pop	{r4, pc}
 80a24ce:	bf00      	nop
 80a24d0:	080a3738 	.word	0x080a3738

080a24d4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a24d4:	2300      	movs	r3, #0
 80a24d6:	461a      	mov	r2, r3
 80a24d8:	4619      	mov	r1, r3
 80a24da:	7c00      	ldrb	r0, [r0, #16]
 80a24dc:	f7ff be32 	b.w	80a2144 <HAL_I2C_Begin>

080a24e0 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a24e0:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a24e2:	2400      	movs	r4, #0
 80a24e4:	7c00      	ldrb	r0, [r0, #16]
 80a24e6:	9400      	str	r4, [sp, #0]
 80a24e8:	f7ff fe34 	bl	80a2154 <HAL_I2C_Request_Data>
  return result;
}
 80a24ec:	b2c0      	uxtb	r0, r0
 80a24ee:	b002      	add	sp, #8
 80a24f0:	bd10      	pop	{r4, pc}

080a24f2 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a24f2:	2301      	movs	r3, #1
 80a24f4:	b2d2      	uxtb	r2, r2
 80a24f6:	b2c9      	uxtb	r1, r1
 80a24f8:	f7ff bff2 	b.w	80a24e0 <_ZN7TwoWire11requestFromEhhh>

080a24fc <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a24fc:	2200      	movs	r2, #0
 80a24fe:	7c00      	ldrb	r0, [r0, #16]
 80a2500:	f7ff be30 	b.w	80a2164 <HAL_I2C_Begin_Transmission>

080a2504 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a2504:	b2c9      	uxtb	r1, r1
 80a2506:	f7ff bff9 	b.w	80a24fc <_ZN7TwoWire17beginTransmissionEh>

080a250a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a250a:	2200      	movs	r2, #0
 80a250c:	7c00      	ldrb	r0, [r0, #16]
 80a250e:	f7ff be31 	b.w	80a2174 <HAL_I2C_End_Transmission>

080a2512 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a2512:	2101      	movs	r1, #1
 80a2514:	f7ff bff9 	b.w	80a250a <_ZN7TwoWire15endTransmissionEh>

080a2518 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a2518:	2100      	movs	r1, #0
 80a251a:	7c00      	ldrb	r0, [r0, #16]
 80a251c:	f7ff be5a 	b.w	80a21d4 <HAL_I2C_Is_Enabled>

080a2520 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2520:	4770      	bx	lr

080a2522 <_ZN9IPAddressD0Ev>:
 80a2522:	b510      	push	{r4, lr}
 80a2524:	4604      	mov	r4, r0
 80a2526:	2118      	movs	r1, #24
 80a2528:	f000 fc79 	bl	80a2e1e <_ZdlPvj>
 80a252c:	4620      	mov	r0, r4
 80a252e:	bd10      	pop	{r4, pc}

080a2530 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2532:	460f      	mov	r7, r1
 80a2534:	f100 0608 	add.w	r6, r0, #8
 80a2538:	1d05      	adds	r5, r0, #4
 80a253a:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a253c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2540:	220a      	movs	r2, #10
 80a2542:	4638      	mov	r0, r7
 80a2544:	f000 f927 	bl	80a2796 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2548:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a254a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a254c:	d007      	beq.n	80a255e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a254e:	2c00      	cmp	r4, #0
 80a2550:	d0f4      	beq.n	80a253c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2552:	212e      	movs	r1, #46	; 0x2e
 80a2554:	4638      	mov	r0, r7
 80a2556:	f000 f8db 	bl	80a2710 <_ZN5Print5printEc>
 80a255a:	4404      	add	r4, r0
 80a255c:	e7ee      	b.n	80a253c <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a255e:	4620      	mov	r0, r4
 80a2560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2564 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2564:	b510      	push	{r4, lr}
 80a2566:	4604      	mov	r4, r0
 80a2568:	4b04      	ldr	r3, [pc, #16]	; (80a257c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a256a:	2211      	movs	r2, #17
 80a256c:	f840 3b04 	str.w	r3, [r0], #4
 80a2570:	2100      	movs	r1, #0
 80a2572:	f000 fdb8 	bl	80a30e6 <memset>
{
    clear();
}
 80a2576:	4620      	mov	r0, r4
 80a2578:	bd10      	pop	{r4, pc}
 80a257a:	bf00      	nop
 80a257c:	080a3760 	.word	0x080a3760

080a2580 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2580:	4603      	mov	r3, r0
 80a2582:	4a07      	ldr	r2, [pc, #28]	; (80a25a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2584:	b510      	push	{r4, lr}
 80a2586:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a258a:	f101 0210 	add.w	r2, r1, #16
 80a258e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2592:	4291      	cmp	r1, r2
 80a2594:	f843 4b04 	str.w	r4, [r3], #4
 80a2598:	d1f9      	bne.n	80a258e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a259a:	780a      	ldrb	r2, [r1, #0]
 80a259c:	701a      	strb	r2, [r3, #0]
}
 80a259e:	bd10      	pop	{r4, pc}
 80a25a0:	080a3760 	.word	0x080a3760

080a25a4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a25a4:	4a02      	ldr	r2, [pc, #8]	; (80a25b0 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a25a6:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a25a8:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a25aa:	2204      	movs	r2, #4
 80a25ac:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a25ae:	4770      	bx	lr
 80a25b0:	080a3760 	.word	0x080a3760

080a25b4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a25b4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a25b6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a25ba:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a25be:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a25c2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a25c6:	2304      	movs	r3, #4
 80a25c8:	6041      	str	r1, [r0, #4]
 80a25ca:	7503      	strb	r3, [r0, #20]
 80a25cc:	bd10      	pop	{r4, pc}
	...

080a25d0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a25d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a25d2:	4d04      	ldr	r5, [pc, #16]	; (80a25e4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a25d4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a25d6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a25da:	9500      	str	r5, [sp, #0]
 80a25dc:	f7ff ffea 	bl	80a25b4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a25e0:	b003      	add	sp, #12
 80a25e2:	bd30      	pop	{r4, r5, pc}
 80a25e4:	080a3760 	.word	0x080a3760

080a25e8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a25e8:	4a01      	ldr	r2, [pc, #4]	; (80a25f0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a25ea:	4b02      	ldr	r3, [pc, #8]	; (80a25f4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a25ec:	601a      	str	r2, [r3, #0]
 80a25ee:	4770      	bx	lr
 80a25f0:	080a37e2 	.word	0x080a37e2
 80a25f4:	20000580 	.word	0x20000580

080a25f8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a25f8:	2300      	movs	r3, #0
 80a25fa:	461a      	mov	r2, r3
 80a25fc:	6840      	ldr	r0, [r0, #4]
 80a25fe:	f7ff bebf 	b.w	80a2380 <network_connect>

080a2602 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2602:	2200      	movs	r2, #0
 80a2604:	2102      	movs	r1, #2
 80a2606:	6840      	ldr	r0, [r0, #4]
 80a2608:	f7ff beca 	b.w	80a23a0 <network_disconnect>

080a260c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a260c:	2200      	movs	r2, #0
 80a260e:	4611      	mov	r1, r2
 80a2610:	6840      	ldr	r0, [r0, #4]
 80a2612:	f7ff bebd 	b.w	80a2390 <network_connecting>

080a2616 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2616:	2200      	movs	r2, #0
 80a2618:	4611      	mov	r1, r2
 80a261a:	6840      	ldr	r0, [r0, #4]
 80a261c:	f7ff bec8 	b.w	80a23b0 <network_ready>

080a2620 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2620:	2300      	movs	r3, #0
 80a2622:	461a      	mov	r2, r3
 80a2624:	4619      	mov	r1, r3
 80a2626:	6840      	ldr	r0, [r0, #4]
 80a2628:	f7ff beca 	b.w	80a23c0 <network_on>

080a262c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a262c:	2300      	movs	r3, #0
 80a262e:	461a      	mov	r2, r3
 80a2630:	4619      	mov	r1, r3
 80a2632:	6840      	ldr	r0, [r0, #4]
 80a2634:	f7ff becc 	b.w	80a23d0 <network_off>

080a2638 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2638:	2200      	movs	r2, #0
 80a263a:	f081 0101 	eor.w	r1, r1, #1
 80a263e:	6840      	ldr	r0, [r0, #4]
 80a2640:	f7ff bece 	b.w	80a23e0 <network_listen>

080a2644 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2644:	2200      	movs	r2, #0
 80a2646:	6840      	ldr	r0, [r0, #4]
 80a2648:	f7ff beda 	b.w	80a2400 <network_set_listen_timeout>

080a264c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a264c:	2200      	movs	r2, #0
 80a264e:	4611      	mov	r1, r2
 80a2650:	6840      	ldr	r0, [r0, #4]
 80a2652:	f7ff bedd 	b.w	80a2410 <network_get_listen_timeout>

080a2656 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2656:	2200      	movs	r2, #0
 80a2658:	4611      	mov	r1, r2
 80a265a:	6840      	ldr	r0, [r0, #4]
 80a265c:	f7ff bec8 	b.w	80a23f0 <network_listening>

080a2660 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2660:	b570      	push	{r4, r5, r6, lr}
 80a2662:	4616      	mov	r6, r2
 80a2664:	b08e      	sub	sp, #56	; 0x38
 80a2666:	4604      	mov	r4, r0
    IPAddress addr;
 80a2668:	a808      	add	r0, sp, #32
 80a266a:	f7ff ff7b 	bl	80a2564 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a266e:	2211      	movs	r2, #17
 80a2670:	2100      	movs	r1, #0
 80a2672:	a803      	add	r0, sp, #12
 80a2674:	f000 fd37 	bl	80a30e6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2678:	4630      	mov	r0, r6
 80a267a:	f000 fd65 	bl	80a3148 <strlen>
 80a267e:	2500      	movs	r5, #0
 80a2680:	4b0a      	ldr	r3, [pc, #40]	; (80a26ac <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2682:	9500      	str	r5, [sp, #0]
 80a2684:	b281      	uxth	r1, r0
 80a2686:	685b      	ldr	r3, [r3, #4]
 80a2688:	aa03      	add	r2, sp, #12
 80a268a:	4630      	mov	r0, r6
 80a268c:	f7ff fe34 	bl	80a22f8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2690:	b120      	cbz	r0, 80a269c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2692:	4629      	mov	r1, r5
 80a2694:	4620      	mov	r0, r4
 80a2696:	f7ff ff85 	bl	80a25a4 <_ZN9IPAddressC1Em>
 80a269a:	e003      	b.n	80a26a4 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a269c:	a903      	add	r1, sp, #12
 80a269e:	4620      	mov	r0, r4
 80a26a0:	f7ff ff6e 	bl	80a2580 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a26a4:	4620      	mov	r0, r4
 80a26a6:	b00e      	add	sp, #56	; 0x38
 80a26a8:	bd70      	pop	{r4, r5, r6, pc}
 80a26aa:	bf00      	nop
 80a26ac:	200005f8 	.word	0x200005f8

080a26b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a26b0:	4b02      	ldr	r3, [pc, #8]	; (80a26bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a26b2:	4a03      	ldr	r2, [pc, #12]	; (80a26c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a26b4:	601a      	str	r2, [r3, #0]
 80a26b6:	2200      	movs	r2, #0
 80a26b8:	605a      	str	r2, [r3, #4]
 80a26ba:	4770      	bx	lr
 80a26bc:	20000584 	.word	0x20000584
 80a26c0:	080a3858 	.word	0x080a3858

080a26c4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a26c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a26c6:	4606      	mov	r6, r0
 80a26c8:	460d      	mov	r5, r1
 80a26ca:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a26cc:	2400      	movs	r4, #0
  while (size--) {
 80a26ce:	42bd      	cmp	r5, r7
 80a26d0:	d00c      	beq.n	80a26ec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a26d2:	6833      	ldr	r3, [r6, #0]
 80a26d4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a26d8:	689b      	ldr	r3, [r3, #8]
 80a26da:	4630      	mov	r0, r6
 80a26dc:	4798      	blx	r3
     if (chunk>=0)
 80a26de:	2800      	cmp	r0, #0
 80a26e0:	db01      	blt.n	80a26e6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a26e2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a26e4:	e7f3      	b.n	80a26ce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a26e6:	2c00      	cmp	r4, #0
 80a26e8:	bf08      	it	eq
 80a26ea:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a26ec:	4620      	mov	r0, r4
 80a26ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a26f0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a26f0:	b570      	push	{r4, r5, r6, lr}
 80a26f2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a26f4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a26f6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a26f8:	b149      	cbz	r1, 80a270e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a26fa:	f000 fd25 	bl	80a3148 <strlen>
 80a26fe:	682b      	ldr	r3, [r5, #0]
 80a2700:	4602      	mov	r2, r0
 80a2702:	4621      	mov	r1, r4
 80a2704:	4628      	mov	r0, r5
    }
 80a2706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a270a:	68db      	ldr	r3, [r3, #12]
 80a270c:	4718      	bx	r3
    }
 80a270e:	bd70      	pop	{r4, r5, r6, pc}

080a2710 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2710:	6803      	ldr	r3, [r0, #0]
 80a2712:	689b      	ldr	r3, [r3, #8]
 80a2714:	4718      	bx	r3

080a2716 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2716:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2718:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a271a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a271c:	f7ff fff8 	bl	80a2710 <_ZN5Print5printEc>
  n += print('\n');
 80a2720:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a2722:	4604      	mov	r4, r0
  n += print('\n');
 80a2724:	4628      	mov	r0, r5
 80a2726:	f7ff fff3 	bl	80a2710 <_ZN5Print5printEc>
  return n;
}
 80a272a:	4420      	add	r0, r4
 80a272c:	bd38      	pop	{r3, r4, r5, pc}

080a272e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a272e:	b538      	push	{r3, r4, r5, lr}
 80a2730:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2732:	f7ff ffdd 	bl	80a26f0 <_ZN5Print5writeEPKc>
 80a2736:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a2738:	4628      	mov	r0, r5
 80a273a:	f7ff ffec 	bl	80a2716 <_ZN5Print7printlnEv>
  return n;
}
 80a273e:	4420      	add	r0, r4
 80a2740:	bd38      	pop	{r3, r4, r5, pc}

080a2742 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2742:	2a01      	cmp	r2, #1
 80a2744:	bf98      	it	ls
 80a2746:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2748:	b530      	push	{r4, r5, lr}
 80a274a:	460b      	mov	r3, r1
 80a274c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a274e:	2100      	movs	r1, #0
 80a2750:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a2754:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a2758:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a275c:	fb05 3312 	mls	r3, r5, r2, r3
 80a2760:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2762:	2b09      	cmp	r3, #9
 80a2764:	bf94      	ite	ls
 80a2766:	3330      	addls	r3, #48	; 0x30
 80a2768:	3337      	addhi	r3, #55	; 0x37
 80a276a:	b2db      	uxtb	r3, r3
 80a276c:	4621      	mov	r1, r4
 80a276e:	f804 3901 	strb.w	r3, [r4], #-1
 80a2772:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2774:	2d00      	cmp	r5, #0
 80a2776:	d1ef      	bne.n	80a2758 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2778:	f7ff ffba 	bl	80a26f0 <_ZN5Print5writeEPKc>
}
 80a277c:	b00b      	add	sp, #44	; 0x2c
 80a277e:	bd30      	pop	{r4, r5, pc}

080a2780 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a2780:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a2782:	b922      	cbnz	r2, 80a278e <_ZN5Print5printEmi+0xe>
 80a2784:	6803      	ldr	r3, [r0, #0]
 80a2786:	b2c9      	uxtb	r1, r1
 80a2788:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a278a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a278c:	4718      	bx	r3
  else return printNumber(n, base);
 80a278e:	b2d2      	uxtb	r2, r2
}
 80a2790:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2792:	f7ff bfd6 	b.w	80a2742 <_ZN5Print11printNumberEmh>

080a2796 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a2796:	f7ff bff3 	b.w	80a2780 <_ZN5Print5printEmi>

080a279a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a279a:	b510      	push	{r4, lr}
 80a279c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a279e:	f7ff fe52 	bl	80a2446 <_ZNSt14_Function_baseD1Ev>
 80a27a2:	4620      	mov	r0, r4
 80a27a4:	bd10      	pop	{r4, pc}
	...

080a27a8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a27a8:	4803      	ldr	r0, [pc, #12]	; (80a27b8 <_GLOBAL__sub_I_RGB+0x10>)
 80a27aa:	2300      	movs	r3, #0
 80a27ac:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a27ae:	4a03      	ldr	r2, [pc, #12]	; (80a27bc <_GLOBAL__sub_I_RGB+0x14>)
 80a27b0:	4903      	ldr	r1, [pc, #12]	; (80a27c0 <_GLOBAL__sub_I_RGB+0x18>)
 80a27b2:	f000 bb2f 	b.w	80a2e14 <__aeabi_atexit>
 80a27b6:	bf00      	nop
 80a27b8:	2000058c 	.word	0x2000058c
 80a27bc:	200004e0 	.word	0x200004e0
 80a27c0:	080a279b 	.word	0x080a279b

080a27c4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a27c4:	4770      	bx	lr

080a27c6 <_ZN8SPIClassD0Ev>:
 80a27c6:	b510      	push	{r4, lr}
 80a27c8:	4604      	mov	r4, r0
 80a27ca:	2110      	movs	r1, #16
 80a27cc:	f000 fb27 	bl	80a2e1e <_ZdlPvj>
 80a27d0:	4620      	mov	r0, r4
 80a27d2:	bd10      	pop	{r4, pc}

080a27d4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a27d4:	b570      	push	{r4, r5, r6, lr}
 80a27d6:	4604      	mov	r4, r0
 80a27d8:	460e      	mov	r6, r1
 80a27da:	4b07      	ldr	r3, [pc, #28]	; (80a27f8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a27dc:	2500      	movs	r5, #0
 80a27de:	6003      	str	r3, [r0, #0]
 80a27e0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a27e4:	f7ff fc66 	bl	80a20b4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a27e8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a27ea:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a27ec:	f7ff fd04 	bl	80a21f8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a27f0:	60a5      	str	r5, [r4, #8]
}
 80a27f2:	4620      	mov	r0, r4
 80a27f4:	bd70      	pop	{r4, r5, r6, pc}
 80a27f6:	bf00      	nop
 80a27f8:	080a388c 	.word	0x080a388c

080a27fc <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a27fc:	7900      	ldrb	r0, [r0, #4]
 80a27fe:	f7ff bd03 	b.w	80a2208 <HAL_SPI_Is_Enabled>
	...

080a2804 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a2808:	4b03      	ldr	r3, [pc, #12]	; (80a2818 <_GLOBAL__sub_I_System+0x14>)
 80a280a:	2000      	movs	r0, #0
 80a280c:	7018      	strb	r0, [r3, #0]
 80a280e:	8058      	strh	r0, [r3, #2]
 80a2810:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2812:	f7ff bd81 	b.w	80a2318 <set_system_mode>
 80a2816:	bf00      	nop
 80a2818:	2000059c 	.word	0x2000059c

080a281c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a281c:	4b02      	ldr	r3, [pc, #8]	; (80a2828 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a281e:	681a      	ldr	r2, [r3, #0]
 80a2820:	4b02      	ldr	r3, [pc, #8]	; (80a282c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2822:	601a      	str	r2, [r3, #0]
 80a2824:	4770      	bx	lr
 80a2826:	bf00      	nop
 80a2828:	20000478 	.word	0x20000478
 80a282c:	200005a4 	.word	0x200005a4

080a2830 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2830:	4770      	bx	lr

080a2832 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2832:	7441      	strb	r1, [r0, #17]
 80a2834:	4770      	bx	lr

080a2836 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2836:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2838:	7c00      	ldrb	r0, [r0, #16]
 80a283a:	f7ff fd25 	bl	80a2288 <HAL_USART_Available_Data_For_Write>
}
 80a283e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2842:	bd08      	pop	{r3, pc}

080a2844 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2844:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2846:	7c00      	ldrb	r0, [r0, #16]
 80a2848:	f7ff fcf6 	bl	80a2238 <HAL_USART_Available_Data>
}
 80a284c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2850:	bd08      	pop	{r3, pc}

080a2852 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2852:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2854:	7c00      	ldrb	r0, [r0, #16]
 80a2856:	f7ff fcff 	bl	80a2258 <HAL_USART_Peek_Data>
}
 80a285a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a285e:	bf28      	it	cs
 80a2860:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2864:	bd08      	pop	{r3, pc}

080a2866 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2866:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2868:	7c00      	ldrb	r0, [r0, #16]
 80a286a:	f7ff fced 	bl	80a2248 <HAL_USART_Read_Data>
}
 80a286e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2872:	bf28      	it	cs
 80a2874:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2878:	bd08      	pop	{r3, pc}

080a287a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a287a:	7c00      	ldrb	r0, [r0, #16]
 80a287c:	f7ff bcf4 	b.w	80a2268 <HAL_USART_Flush_Data>

080a2880 <_ZN11USARTSerialD0Ev>:
 80a2880:	b510      	push	{r4, lr}
 80a2882:	4604      	mov	r4, r0
 80a2884:	2114      	movs	r1, #20
 80a2886:	f000 faca 	bl	80a2e1e <_ZdlPvj>
 80a288a:	4620      	mov	r0, r4
 80a288c:	bd10      	pop	{r4, pc}

080a288e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a288e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2890:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2892:	4604      	mov	r4, r0
 80a2894:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2896:	b925      	cbnz	r5, 80a28a2 <_ZN11USARTSerial5writeEh+0x14>
 80a2898:	7c00      	ldrb	r0, [r0, #16]
 80a289a:	f7ff fcf5 	bl	80a2288 <HAL_USART_Available_Data_For_Write>
 80a289e:	2800      	cmp	r0, #0
 80a28a0:	dd05      	ble.n	80a28ae <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a28a2:	4631      	mov	r1, r6
 80a28a4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a28a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a28aa:	f7ff bcbd 	b.w	80a2228 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a28ae:	4628      	mov	r0, r5
 80a28b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a28b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a28b4:	b510      	push	{r4, lr}
 80a28b6:	4604      	mov	r4, r0
 80a28b8:	4608      	mov	r0, r1
 80a28ba:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a28bc:	2200      	movs	r2, #0
 80a28be:	6062      	str	r2, [r4, #4]
 80a28c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a28c4:	60a2      	str	r2, [r4, #8]
 80a28c6:	4a05      	ldr	r2, [pc, #20]	; (80a28dc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a28c8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a28ca:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a28cc:	2201      	movs	r2, #1
 80a28ce:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a28d0:	461a      	mov	r2, r3
 80a28d2:	f7ff fca1 	bl	80a2218 <HAL_USART_Init>
}
 80a28d6:	4620      	mov	r0, r4
 80a28d8:	bd10      	pop	{r4, pc}
 80a28da:	bf00      	nop
 80a28dc:	080a38c8 	.word	0x080a38c8

080a28e0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a28e0:	7c00      	ldrb	r0, [r0, #16]
 80a28e2:	f7ff bcc9 	b.w	80a2278 <HAL_USART_Is_Enabled>
	...

080a28e8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a28e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a28ea:	4c19      	ldr	r4, [pc, #100]	; (80a2950 <_Z22__fetch_global_Serial1v+0x68>)
 80a28ec:	6825      	ldr	r5, [r4, #0]
 80a28ee:	b94d      	cbnz	r5, 80a2904 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a28f0:	2084      	movs	r0, #132	; 0x84
 80a28f2:	f7fd fbd2 	bl	80a009a <_Znwj>
 80a28f6:	4606      	mov	r6, r0
 80a28f8:	b118      	cbz	r0, 80a2902 <_Z22__fetch_global_Serial1v+0x1a>
 80a28fa:	2284      	movs	r2, #132	; 0x84
 80a28fc:	4629      	mov	r1, r5
 80a28fe:	f000 fbf2 	bl	80a30e6 <memset>
 80a2902:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a2904:	4d13      	ldr	r5, [pc, #76]	; (80a2954 <_Z22__fetch_global_Serial1v+0x6c>)
 80a2906:	682e      	ldr	r6, [r5, #0]
 80a2908:	b94e      	cbnz	r6, 80a291e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a290a:	2084      	movs	r0, #132	; 0x84
 80a290c:	f7fd fbc5 	bl	80a009a <_Znwj>
 80a2910:	4607      	mov	r7, r0
 80a2912:	b118      	cbz	r0, 80a291c <_Z22__fetch_global_Serial1v+0x34>
 80a2914:	2284      	movs	r2, #132	; 0x84
 80a2916:	4631      	mov	r1, r6
 80a2918:	f000 fbe5 	bl	80a30e6 <memset>
 80a291c:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a291e:	4f0e      	ldr	r7, [pc, #56]	; (80a2958 <_Z22__fetch_global_Serial1v+0x70>)
 80a2920:	6839      	ldr	r1, [r7, #0]
 80a2922:	f011 0601 	ands.w	r6, r1, #1
 80a2926:	d111      	bne.n	80a294c <_Z22__fetch_global_Serial1v+0x64>
 80a2928:	4638      	mov	r0, r7
 80a292a:	f7fd fbc5 	bl	80a00b8 <__cxa_guard_acquire>
 80a292e:	b168      	cbz	r0, 80a294c <_Z22__fetch_global_Serial1v+0x64>
 80a2930:	6822      	ldr	r2, [r4, #0]
 80a2932:	4631      	mov	r1, r6
 80a2934:	682b      	ldr	r3, [r5, #0]
 80a2936:	4809      	ldr	r0, [pc, #36]	; (80a295c <_Z22__fetch_global_Serial1v+0x74>)
 80a2938:	f7ff ffbc 	bl	80a28b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a293c:	4638      	mov	r0, r7
 80a293e:	f7fd fbc0 	bl	80a00c2 <__cxa_guard_release>
 80a2942:	4a07      	ldr	r2, [pc, #28]	; (80a2960 <_Z22__fetch_global_Serial1v+0x78>)
 80a2944:	4907      	ldr	r1, [pc, #28]	; (80a2964 <_Z22__fetch_global_Serial1v+0x7c>)
 80a2946:	4805      	ldr	r0, [pc, #20]	; (80a295c <_Z22__fetch_global_Serial1v+0x74>)
 80a2948:	f000 fa64 	bl	80a2e14 <__aeabi_atexit>
#endif
	return serial1;
}
 80a294c:	4803      	ldr	r0, [pc, #12]	; (80a295c <_Z22__fetch_global_Serial1v+0x74>)
 80a294e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2950:	200005c4 	.word	0x200005c4
 80a2954:	200005bc 	.word	0x200005bc
 80a2958:	200005c0 	.word	0x200005c0
 80a295c:	200005a8 	.word	0x200005a8
 80a2960:	200004e0 	.word	0x200004e0
 80a2964:	080a2831 	.word	0x080a2831

080a2968 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2968:	7441      	strb	r1, [r0, #17]
 80a296a:	4770      	bx	lr

080a296c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a296c:	4770      	bx	lr

080a296e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a296e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2970:	2100      	movs	r1, #0
 80a2972:	7c00      	ldrb	r0, [r0, #16]
 80a2974:	f7ff fca8 	bl	80a22c8 <HAL_USB_USART_Receive_Data>
}
 80a2978:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a297c:	bf28      	it	cs
 80a297e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2982:	bd08      	pop	{r3, pc}

080a2984 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2984:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2986:	2101      	movs	r1, #1
 80a2988:	7c00      	ldrb	r0, [r0, #16]
 80a298a:	f7ff fc9d 	bl	80a22c8 <HAL_USB_USART_Receive_Data>
}
 80a298e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2992:	bf28      	it	cs
 80a2994:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2998:	bd08      	pop	{r3, pc}

080a299a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a299a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a299c:	7c00      	ldrb	r0, [r0, #16]
 80a299e:	f7ff fc8b 	bl	80a22b8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a29a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a29a6:	bd08      	pop	{r3, pc}

080a29a8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a29a8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a29aa:	7c00      	ldrb	r0, [r0, #16]
 80a29ac:	f7ff fc7c 	bl	80a22a8 <HAL_USB_USART_Available_Data>
}
 80a29b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a29b4:	bd08      	pop	{r3, pc}

080a29b6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a29b6:	7c00      	ldrb	r0, [r0, #16]
 80a29b8:	f7ff bc96 	b.w	80a22e8 <HAL_USB_USART_Flush_Data>

080a29bc <_ZN9USBSerialD0Ev>:
 80a29bc:	b510      	push	{r4, lr}
 80a29be:	4604      	mov	r4, r0
 80a29c0:	2114      	movs	r1, #20
 80a29c2:	f000 fa2c 	bl	80a2e1e <_ZdlPvj>
 80a29c6:	4620      	mov	r0, r4
 80a29c8:	bd10      	pop	{r4, pc}

080a29ca <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a29ca:	b538      	push	{r3, r4, r5, lr}
 80a29cc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a29ce:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a29d0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a29d2:	f7ff fc71 	bl	80a22b8 <HAL_USB_USART_Available_Data_For_Write>
 80a29d6:	2800      	cmp	r0, #0
 80a29d8:	dc01      	bgt.n	80a29de <_ZN9USBSerial5writeEh+0x14>
 80a29da:	7c60      	ldrb	r0, [r4, #17]
 80a29dc:	b128      	cbz	r0, 80a29ea <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a29de:	4629      	mov	r1, r5
 80a29e0:	7c20      	ldrb	r0, [r4, #16]
 80a29e2:	f7ff fc79 	bl	80a22d8 <HAL_USB_USART_Send_Data>
 80a29e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a29ea:	bd38      	pop	{r3, r4, r5, pc}

080a29ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a29ec:	b510      	push	{r4, lr}
 80a29ee:	4604      	mov	r4, r0
 80a29f0:	2300      	movs	r3, #0
 80a29f2:	6063      	str	r3, [r4, #4]
 80a29f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a29f8:	60a3      	str	r3, [r4, #8]
 80a29fa:	4b05      	ldr	r3, [pc, #20]	; (80a2a10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a29fc:	4608      	mov	r0, r1
 80a29fe:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2a00:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2a02:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2a04:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2a06:	4611      	mov	r1, r2
 80a2a08:	f7ff fc46 	bl	80a2298 <HAL_USB_USART_Init>
}
 80a2a0c:	4620      	mov	r0, r4
 80a2a0e:	bd10      	pop	{r4, pc}
 80a2a10:	080a38f8 	.word	0x080a38f8

080a2a14 <_Z19acquireSerialBufferv>:
 80a2a14:	b510      	push	{r4, lr}
 80a2a16:	4604      	mov	r4, r0
 80a2a18:	2214      	movs	r2, #20
 80a2a1a:	2100      	movs	r1, #0
 80a2a1c:	f000 fb63 	bl	80a30e6 <memset>
 80a2a20:	4620      	mov	r0, r4
 80a2a22:	bd10      	pop	{r4, pc}

080a2a24 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2a24:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2a26:	4d0e      	ldr	r5, [pc, #56]	; (80a2a60 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2a28:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2a2a:	a801      	add	r0, sp, #4
 80a2a2c:	f7ff fff2 	bl	80a2a14 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2a30:	6829      	ldr	r1, [r5, #0]
 80a2a32:	f011 0401 	ands.w	r4, r1, #1
 80a2a36:	d110      	bne.n	80a2a5a <_Z16_fetch_usbserialv+0x36>
 80a2a38:	4628      	mov	r0, r5
 80a2a3a:	f7fd fb3d 	bl	80a00b8 <__cxa_guard_acquire>
 80a2a3e:	b160      	cbz	r0, 80a2a5a <_Z16_fetch_usbserialv+0x36>
 80a2a40:	aa01      	add	r2, sp, #4
 80a2a42:	4621      	mov	r1, r4
 80a2a44:	4807      	ldr	r0, [pc, #28]	; (80a2a64 <_Z16_fetch_usbserialv+0x40>)
 80a2a46:	f7ff ffd1 	bl	80a29ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2a4a:	4628      	mov	r0, r5
 80a2a4c:	f7fd fb39 	bl	80a00c2 <__cxa_guard_release>
 80a2a50:	4a05      	ldr	r2, [pc, #20]	; (80a2a68 <_Z16_fetch_usbserialv+0x44>)
 80a2a52:	4906      	ldr	r1, [pc, #24]	; (80a2a6c <_Z16_fetch_usbserialv+0x48>)
 80a2a54:	4803      	ldr	r0, [pc, #12]	; (80a2a64 <_Z16_fetch_usbserialv+0x40>)
 80a2a56:	f000 f9dd 	bl	80a2e14 <__aeabi_atexit>
	return _usbserial;
}
 80a2a5a:	4802      	ldr	r0, [pc, #8]	; (80a2a64 <_Z16_fetch_usbserialv+0x40>)
 80a2a5c:	b007      	add	sp, #28
 80a2a5e:	bd30      	pop	{r4, r5, pc}
 80a2a60:	200005c8 	.word	0x200005c8
 80a2a64:	200005d0 	.word	0x200005d0
 80a2a68:	200004e0 	.word	0x200004e0
 80a2a6c:	080a296d 	.word	0x080a296d

080a2a70 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2a70:	b510      	push	{r4, lr}
 80a2a72:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2a74:	2214      	movs	r2, #20
 80a2a76:	2100      	movs	r1, #0
 80a2a78:	f000 fb35 	bl	80a30e6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2a7c:	4620      	mov	r0, r4
 80a2a7e:	bd10      	pop	{r4, pc}

080a2a80 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2a80:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2a82:	4c0e      	ldr	r4, [pc, #56]	; (80a2abc <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2a84:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2a86:	a801      	add	r0, sp, #4
 80a2a88:	f7ff fff2 	bl	80a2a70 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2a8c:	6823      	ldr	r3, [r4, #0]
 80a2a8e:	07db      	lsls	r3, r3, #31
 80a2a90:	d410      	bmi.n	80a2ab4 <_Z17_fetch_usbserial1v+0x34>
 80a2a92:	4620      	mov	r0, r4
 80a2a94:	f7fd fb10 	bl	80a00b8 <__cxa_guard_acquire>
 80a2a98:	b160      	cbz	r0, 80a2ab4 <_Z17_fetch_usbserial1v+0x34>
 80a2a9a:	aa01      	add	r2, sp, #4
 80a2a9c:	2101      	movs	r1, #1
 80a2a9e:	4808      	ldr	r0, [pc, #32]	; (80a2ac0 <_Z17_fetch_usbserial1v+0x40>)
 80a2aa0:	f7ff ffa4 	bl	80a29ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2aa4:	4620      	mov	r0, r4
 80a2aa6:	f7fd fb0c 	bl	80a00c2 <__cxa_guard_release>
 80a2aaa:	4a06      	ldr	r2, [pc, #24]	; (80a2ac4 <_Z17_fetch_usbserial1v+0x44>)
 80a2aac:	4906      	ldr	r1, [pc, #24]	; (80a2ac8 <_Z17_fetch_usbserial1v+0x48>)
 80a2aae:	4804      	ldr	r0, [pc, #16]	; (80a2ac0 <_Z17_fetch_usbserial1v+0x40>)
 80a2ab0:	f000 f9b0 	bl	80a2e14 <__aeabi_atexit>
  return _usbserial1;
}
 80a2ab4:	4802      	ldr	r0, [pc, #8]	; (80a2ac0 <_Z17_fetch_usbserial1v+0x40>)
 80a2ab6:	b006      	add	sp, #24
 80a2ab8:	bd10      	pop	{r4, pc}
 80a2aba:	bf00      	nop
 80a2abc:	200005cc 	.word	0x200005cc
 80a2ac0:	200005e4 	.word	0x200005e4
 80a2ac4:	200004e0 	.word	0x200004e0
 80a2ac8:	080a296d 	.word	0x080a296d

080a2acc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2acc:	2200      	movs	r2, #0
 80a2ace:	4611      	mov	r1, r2
 80a2ad0:	6840      	ldr	r0, [r0, #4]
 80a2ad2:	f7ff bc6d 	b.w	80a23b0 <network_ready>

080a2ad6 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2ad6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2ad8:	4616      	mov	r6, r2
 80a2ada:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2adc:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2ade:	460f      	mov	r7, r1
 80a2ae0:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a2ae2:	2100      	movs	r1, #0
 80a2ae4:	a803      	add	r0, sp, #12
 80a2ae6:	f000 fafe 	bl	80a30e6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2aea:	4630      	mov	r0, r6
 80a2aec:	f000 fb2c 	bl	80a3148 <strlen>
 80a2af0:	2500      	movs	r5, #0
 80a2af2:	9500      	str	r5, [sp, #0]
 80a2af4:	b281      	uxth	r1, r0
 80a2af6:	687b      	ldr	r3, [r7, #4]
 80a2af8:	aa03      	add	r2, sp, #12
 80a2afa:	4630      	mov	r0, r6
 80a2afc:	f7ff fbfc 	bl	80a22f8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2b00:	b120      	cbz	r0, 80a2b0c <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a2b02:	4629      	mov	r1, r5
 80a2b04:	4620      	mov	r0, r4
 80a2b06:	f7ff fd4d 	bl	80a25a4 <_ZN9IPAddressC1Em>
 80a2b0a:	e003      	b.n	80a2b14 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2b0c:	a903      	add	r1, sp, #12
 80a2b0e:	4620      	mov	r0, r4
 80a2b10:	f7ff fd36 	bl	80a2580 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2b14:	4620      	mov	r0, r4
 80a2b16:	b009      	add	sp, #36	; 0x24
 80a2b18:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2b1a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2b1a:	2200      	movs	r2, #0
 80a2b1c:	4611      	mov	r1, r2
 80a2b1e:	6840      	ldr	r0, [r0, #4]
 80a2b20:	f7ff bc66 	b.w	80a23f0 <network_listening>

080a2b24 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2b24:	2200      	movs	r2, #0
 80a2b26:	4611      	mov	r1, r2
 80a2b28:	6840      	ldr	r0, [r0, #4]
 80a2b2a:	f7ff bc71 	b.w	80a2410 <network_get_listen_timeout>

080a2b2e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2b2e:	2200      	movs	r2, #0
 80a2b30:	6840      	ldr	r0, [r0, #4]
 80a2b32:	f7ff bc65 	b.w	80a2400 <network_set_listen_timeout>

080a2b36 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2b36:	2200      	movs	r2, #0
 80a2b38:	f081 0101 	eor.w	r1, r1, #1
 80a2b3c:	6840      	ldr	r0, [r0, #4]
 80a2b3e:	f7ff bc4f 	b.w	80a23e0 <network_listen>

080a2b42 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a2b42:	2300      	movs	r3, #0
 80a2b44:	461a      	mov	r2, r3
 80a2b46:	4619      	mov	r1, r3
 80a2b48:	6840      	ldr	r0, [r0, #4]
 80a2b4a:	f7ff bc41 	b.w	80a23d0 <network_off>

080a2b4e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2b4e:	2300      	movs	r3, #0
 80a2b50:	461a      	mov	r2, r3
 80a2b52:	4619      	mov	r1, r3
 80a2b54:	6840      	ldr	r0, [r0, #4]
 80a2b56:	f7ff bc33 	b.w	80a23c0 <network_on>

080a2b5a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2b5a:	2200      	movs	r2, #0
 80a2b5c:	4611      	mov	r1, r2
 80a2b5e:	6840      	ldr	r0, [r0, #4]
 80a2b60:	f7ff bc16 	b.w	80a2390 <network_connecting>

080a2b64 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2b64:	2200      	movs	r2, #0
 80a2b66:	2102      	movs	r1, #2
 80a2b68:	6840      	ldr	r0, [r0, #4]
 80a2b6a:	f7ff bc19 	b.w	80a23a0 <network_disconnect>

080a2b6e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2b6e:	2300      	movs	r3, #0
 80a2b70:	461a      	mov	r2, r3
 80a2b72:	6840      	ldr	r0, [r0, #4]
 80a2b74:	f7ff bc04 	b.w	80a2380 <network_connect>

080a2b78 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2b78:	4b02      	ldr	r3, [pc, #8]	; (80a2b84 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2b7a:	2204      	movs	r2, #4
 80a2b7c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2b7e:	4a02      	ldr	r2, [pc, #8]	; (80a2b88 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2b80:	601a      	str	r2, [r3, #0]
 80a2b82:	4770      	bx	lr
 80a2b84:	200005f8 	.word	0x200005f8
 80a2b88:	080a3928 	.word	0x080a3928

080a2b8c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2b8c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2b8e:	4b14      	ldr	r3, [pc, #80]	; (80a2be0 <serialEventRun+0x54>)
 80a2b90:	b133      	cbz	r3, 80a2ba0 <serialEventRun+0x14>
 80a2b92:	f7ff ff47 	bl	80a2a24 <_Z16_fetch_usbserialv>
 80a2b96:	6803      	ldr	r3, [r0, #0]
 80a2b98:	691b      	ldr	r3, [r3, #16]
 80a2b9a:	4798      	blx	r3
 80a2b9c:	2800      	cmp	r0, #0
 80a2b9e:	dc16      	bgt.n	80a2bce <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2ba0:	4b10      	ldr	r3, [pc, #64]	; (80a2be4 <serialEventRun+0x58>)
 80a2ba2:	b133      	cbz	r3, 80a2bb2 <serialEventRun+0x26>
 80a2ba4:	f7ff fea0 	bl	80a28e8 <_Z22__fetch_global_Serial1v>
 80a2ba8:	6803      	ldr	r3, [r0, #0]
 80a2baa:	691b      	ldr	r3, [r3, #16]
 80a2bac:	4798      	blx	r3
 80a2bae:	2800      	cmp	r0, #0
 80a2bb0:	dc10      	bgt.n	80a2bd4 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2bb2:	4b0d      	ldr	r3, [pc, #52]	; (80a2be8 <serialEventRun+0x5c>)
 80a2bb4:	b10b      	cbz	r3, 80a2bba <serialEventRun+0x2e>
 80a2bb6:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2bba:	4b0c      	ldr	r3, [pc, #48]	; (80a2bec <serialEventRun+0x60>)
 80a2bbc:	b17b      	cbz	r3, 80a2bde <serialEventRun+0x52>
 80a2bbe:	f7ff ff5f 	bl	80a2a80 <_Z17_fetch_usbserial1v>
 80a2bc2:	6803      	ldr	r3, [r0, #0]
 80a2bc4:	691b      	ldr	r3, [r3, #16]
 80a2bc6:	4798      	blx	r3
 80a2bc8:	2800      	cmp	r0, #0
 80a2bca:	dc06      	bgt.n	80a2bda <serialEventRun+0x4e>
 80a2bcc:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2bce:	f3af 8000 	nop.w
 80a2bd2:	e7e5      	b.n	80a2ba0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2bd4:	f3af 8000 	nop.w
 80a2bd8:	e7eb      	b.n	80a2bb2 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2bda:	f3af 8000 	nop.w
 80a2bde:	bd08      	pop	{r3, pc}
	...

080a2bf0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2bf0:	b508      	push	{r3, lr}
	serialEventRun();
 80a2bf2:	f7ff ffcb 	bl	80a2b8c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2bf6:	f7ff fa7d 	bl	80a20f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2bfa:	4b01      	ldr	r3, [pc, #4]	; (80a2c00 <_post_loop+0x10>)
 80a2bfc:	6018      	str	r0, [r3, #0]
 80a2bfe:	bd08      	pop	{r3, pc}
 80a2c00:	20000608 	.word	0x20000608

080a2c04 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2c04:	4802      	ldr	r0, [pc, #8]	; (80a2c10 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2c06:	4a03      	ldr	r2, [pc, #12]	; (80a2c14 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2c08:	4903      	ldr	r1, [pc, #12]	; (80a2c18 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2c0a:	1a12      	subs	r2, r2, r0
 80a2c0c:	f000 ba60 	b.w	80a30d0 <memcpy>
 80a2c10:	40024000 	.word	0x40024000
 80a2c14:	40024004 	.word	0x40024004
 80a2c18:	080a3a10 	.word	0x080a3a10

080a2c1c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2c1c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2c1e:	2300      	movs	r3, #0
 80a2c20:	9300      	str	r3, [sp, #0]
 80a2c22:	461a      	mov	r2, r3
 80a2c24:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2c28:	f7ff fb90 	bl	80a234c <system_ctrl_set_result>
}
 80a2c2c:	b003      	add	sp, #12
 80a2c2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2c34 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2c34:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2c36:	8843      	ldrh	r3, [r0, #2]
 80a2c38:	2b0a      	cmp	r3, #10
 80a2c3a:	d008      	beq.n	80a2c4e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2c3c:	2b50      	cmp	r3, #80	; 0x50
 80a2c3e:	d109      	bne.n	80a2c54 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2c40:	4b09      	ldr	r3, [pc, #36]	; (80a2c68 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2c42:	681b      	ldr	r3, [r3, #0]
 80a2c44:	b13b      	cbz	r3, 80a2c56 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2c46:	b003      	add	sp, #12
 80a2c48:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2c4c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2c4e:	f7ff ffe5 	bl	80a2c1c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2c52:	e006      	b.n	80a2c62 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2c54:	2300      	movs	r3, #0
 80a2c56:	9300      	str	r3, [sp, #0]
 80a2c58:	461a      	mov	r2, r3
 80a2c5a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2c5e:	f7ff fb75 	bl	80a234c <system_ctrl_set_result>
        break;
    }
}
 80a2c62:	b003      	add	sp, #12
 80a2c64:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2c68:	20000600 	.word	0x20000600

080a2c6c <module_user_init_hook>:

void module_user_init_hook()
{
 80a2c6c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2c6e:	4c10      	ldr	r4, [pc, #64]	; (80a2cb0 <module_user_init_hook+0x44>)
 80a2c70:	4d10      	ldr	r5, [pc, #64]	; (80a2cb4 <module_user_init_hook+0x48>)
 80a2c72:	6823      	ldr	r3, [r4, #0]
 80a2c74:	42ab      	cmp	r3, r5
 80a2c76:	4b10      	ldr	r3, [pc, #64]	; (80a2cb8 <module_user_init_hook+0x4c>)
 80a2c78:	bf0c      	ite	eq
 80a2c7a:	2201      	moveq	r2, #1
 80a2c7c:	2200      	movne	r2, #0
 80a2c7e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2c80:	d002      	beq.n	80a2c88 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2c82:	f7ff ffbf 	bl	80a2c04 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2c86:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2c88:	f7ff fa1c 	bl	80a20c4 <HAL_RNG_GetRandomNumber>
 80a2c8c:	4604      	mov	r4, r0
    srand(seed);
 80a2c8e:	f000 fa33 	bl	80a30f8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2c92:	4b0a      	ldr	r3, [pc, #40]	; (80a2cbc <module_user_init_hook+0x50>)
 80a2c94:	b113      	cbz	r3, 80a2c9c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2c96:	4620      	mov	r0, r4
 80a2c98:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2c9c:	2100      	movs	r1, #0
 80a2c9e:	4807      	ldr	r0, [pc, #28]	; (80a2cbc <module_user_init_hook+0x50>)
 80a2ca0:	f7ff fb66 	bl	80a2370 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2ca8:	2100      	movs	r1, #0
 80a2caa:	4805      	ldr	r0, [pc, #20]	; (80a2cc0 <module_user_init_hook+0x54>)
 80a2cac:	f7ff bb44 	b.w	80a2338 <system_ctrl_set_app_request_handler>
 80a2cb0:	40024000 	.word	0x40024000
 80a2cb4:	9a271c1e 	.word	0x9a271c1e
 80a2cb8:	20000604 	.word	0x20000604
 80a2cbc:	00000000 	.word	0x00000000
 80a2cc0:	080a2c35 	.word	0x080a2c35

080a2cc4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2cc4:	b510      	push	{r4, lr}
 80a2cc6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2cc8:	480f      	ldr	r0, [pc, #60]	; (80a2d08 <pinAvailable+0x44>)
 80a2cca:	f7ff fd97 	bl	80a27fc <_ZN8SPIClass9isEnabledEv>
 80a2cce:	b128      	cbz	r0, 80a2cdc <pinAvailable+0x18>
 80a2cd0:	f1a4 030d 	sub.w	r3, r4, #13
 80a2cd4:	2b02      	cmp	r3, #2
 80a2cd6:	d801      	bhi.n	80a2cdc <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2cd8:	2000      	movs	r0, #0
 80a2cda:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2cdc:	f000 f840 	bl	80a2d60 <_Z19__fetch_global_Wirev>
 80a2ce0:	f7ff fc1a 	bl	80a2518 <_ZN7TwoWire9isEnabledEv>
 80a2ce4:	b108      	cbz	r0, 80a2cea <pinAvailable+0x26>
 80a2ce6:	2c01      	cmp	r4, #1
 80a2ce8:	d9f6      	bls.n	80a2cd8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2cea:	f7ff fdfd 	bl	80a28e8 <_Z22__fetch_global_Serial1v>
 80a2cee:	f7ff fdf7 	bl	80a28e0 <_ZN11USARTSerial9isEnabledEv>
 80a2cf2:	b118      	cbz	r0, 80a2cfc <pinAvailable+0x38>
 80a2cf4:	f1a4 0312 	sub.w	r3, r4, #18
 80a2cf8:	2b01      	cmp	r3, #1
 80a2cfa:	d9ed      	bls.n	80a2cd8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2cfc:	2c17      	cmp	r4, #23
 80a2cfe:	bf8c      	ite	hi
 80a2d00:	2000      	movhi	r0, #0
 80a2d02:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2d04:	bd10      	pop	{r4, pc}
 80a2d06:	bf00      	nop
 80a2d08:	2000063c 	.word	0x2000063c

080a2d0c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2d0c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2d0e:	b538      	push	{r3, r4, r5, lr}
 80a2d10:	4604      	mov	r4, r0
 80a2d12:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2d14:	d80a      	bhi.n	80a2d2c <pinMode+0x20>
 80a2d16:	29ff      	cmp	r1, #255	; 0xff
 80a2d18:	d008      	beq.n	80a2d2c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2d1a:	f7ff ffd3 	bl	80a2cc4 <pinAvailable>
 80a2d1e:	b128      	cbz	r0, 80a2d2c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2d20:	4629      	mov	r1, r5
 80a2d22:	4620      	mov	r0, r4
}
 80a2d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2d28:	f7ff b9f4 	b.w	80a2114 <HAL_Pin_Mode>
 80a2d2c:	bd38      	pop	{r3, r4, r5, pc}

080a2d2e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2d2e:	b538      	push	{r3, r4, r5, lr}
 80a2d30:	4604      	mov	r4, r0
 80a2d32:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2d34:	f7ff f9f6 	bl	80a2124 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2d38:	28ff      	cmp	r0, #255	; 0xff
 80a2d3a:	d010      	beq.n	80a2d5e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2d3c:	2806      	cmp	r0, #6
 80a2d3e:	d804      	bhi.n	80a2d4a <digitalWrite+0x1c>
 80a2d40:	234d      	movs	r3, #77	; 0x4d
 80a2d42:	fa23 f000 	lsr.w	r0, r3, r0
 80a2d46:	07c3      	lsls	r3, r0, #31
 80a2d48:	d409      	bmi.n	80a2d5e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2d4a:	4620      	mov	r0, r4
 80a2d4c:	f7ff ffba 	bl	80a2cc4 <pinAvailable>
 80a2d50:	b128      	cbz	r0, 80a2d5e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2d52:	4629      	mov	r1, r5
 80a2d54:	4620      	mov	r0, r4
}
 80a2d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2d5a:	f7ff b9eb 	b.w	80a2134 <HAL_GPIO_Write>
 80a2d5e:	bd38      	pop	{r3, r4, r5, pc}

080a2d60 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2d60:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2d62:	4d0b      	ldr	r5, [pc, #44]	; (80a2d90 <_Z19__fetch_global_Wirev+0x30>)
 80a2d64:	6829      	ldr	r1, [r5, #0]
 80a2d66:	f011 0401 	ands.w	r4, r1, #1
 80a2d6a:	d10f      	bne.n	80a2d8c <_Z19__fetch_global_Wirev+0x2c>
 80a2d6c:	4628      	mov	r0, r5
 80a2d6e:	f7fd f9a3 	bl	80a00b8 <__cxa_guard_acquire>
 80a2d72:	b158      	cbz	r0, 80a2d8c <_Z19__fetch_global_Wirev+0x2c>
 80a2d74:	4621      	mov	r1, r4
 80a2d76:	4807      	ldr	r0, [pc, #28]	; (80a2d94 <_Z19__fetch_global_Wirev+0x34>)
 80a2d78:	f7ff fb9a 	bl	80a24b0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2d7c:	4628      	mov	r0, r5
 80a2d7e:	f7fd f9a0 	bl	80a00c2 <__cxa_guard_release>
 80a2d82:	4a05      	ldr	r2, [pc, #20]	; (80a2d98 <_Z19__fetch_global_Wirev+0x38>)
 80a2d84:	4905      	ldr	r1, [pc, #20]	; (80a2d9c <_Z19__fetch_global_Wirev+0x3c>)
 80a2d86:	4803      	ldr	r0, [pc, #12]	; (80a2d94 <_Z19__fetch_global_Wirev+0x34>)
 80a2d88:	f000 f844 	bl	80a2e14 <__aeabi_atexit>
	return wire;
}
 80a2d8c:	4801      	ldr	r0, [pc, #4]	; (80a2d94 <_Z19__fetch_global_Wirev+0x34>)
 80a2d8e:	bd38      	pop	{r3, r4, r5, pc}
 80a2d90:	2000060c 	.word	0x2000060c
 80a2d94:	20000610 	.word	0x20000610
 80a2d98:	200004e0 	.word	0x200004e0
 80a2d9c:	080a2459 	.word	0x080a2459

080a2da0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2da0:	b513      	push	{r0, r1, r4, lr}
 80a2da2:	4c08      	ldr	r4, [pc, #32]	; (80a2dc4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2da4:	2300      	movs	r3, #0
 80a2da6:	461a      	mov	r2, r3
 80a2da8:	4619      	mov	r1, r3
 80a2daa:	9300      	str	r3, [sp, #0]
 80a2dac:	4620      	mov	r0, r4
 80a2dae:	f7ff fc0f 	bl	80a25d0 <_ZN9IPAddressC1Ehhhh>
 80a2db2:	4620      	mov	r0, r4
 80a2db4:	4a04      	ldr	r2, [pc, #16]	; (80a2dc8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2db6:	4905      	ldr	r1, [pc, #20]	; (80a2dcc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2db8:	b002      	add	sp, #8
 80a2dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2dbe:	f000 b829 	b.w	80a2e14 <__aeabi_atexit>
 80a2dc2:	bf00      	nop
 80a2dc4:	20000624 	.word	0x20000624
 80a2dc8:	200004e0 	.word	0x200004e0
 80a2dcc:	080a2521 	.word	0x080a2521

080a2dd0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2dd0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2dd2:	4c0c      	ldr	r4, [pc, #48]	; (80a2e04 <_GLOBAL__sub_I_SPI+0x34>)
 80a2dd4:	4e0c      	ldr	r6, [pc, #48]	; (80a2e08 <_GLOBAL__sub_I_SPI+0x38>)
 80a2dd6:	4d0d      	ldr	r5, [pc, #52]	; (80a2e0c <_GLOBAL__sub_I_SPI+0x3c>)
 80a2dd8:	2100      	movs	r1, #0
 80a2dda:	4620      	mov	r0, r4
 80a2ddc:	f7ff fcfa 	bl	80a27d4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2de0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2de2:	4c0b      	ldr	r4, [pc, #44]	; (80a2e10 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2de4:	4632      	mov	r2, r6
 80a2de6:	4629      	mov	r1, r5
 80a2de8:	f000 f814 	bl	80a2e14 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2dec:	2101      	movs	r1, #1
 80a2dee:	4620      	mov	r0, r4
 80a2df0:	f7ff fcf0 	bl	80a27d4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2df4:	4632      	mov	r2, r6
 80a2df6:	4629      	mov	r1, r5
 80a2df8:	4620      	mov	r0, r4
 80a2dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2dfe:	f000 b809 	b.w	80a2e14 <__aeabi_atexit>
 80a2e02:	bf00      	nop
 80a2e04:	2000063c 	.word	0x2000063c
 80a2e08:	200004e0 	.word	0x200004e0
 80a2e0c:	080a27c5 	.word	0x080a27c5
 80a2e10:	2000064c 	.word	0x2000064c

080a2e14 <__aeabi_atexit>:
 80a2e14:	460b      	mov	r3, r1
 80a2e16:	4601      	mov	r1, r0
 80a2e18:	4618      	mov	r0, r3
 80a2e1a:	f000 b94b 	b.w	80a30b4 <__cxa_atexit>

080a2e1e <_ZdlPvj>:
 80a2e1e:	f7fd b93e 	b.w	80a009e <_ZdlPv>
	...

080a2e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2e24:	4b24      	ldr	r3, [pc, #144]	; (80a2eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2e26:	681a      	ldr	r2, [r3, #0]
 80a2e28:	07d0      	lsls	r0, r2, #31
 80a2e2a:	bf5c      	itt	pl
 80a2e2c:	2201      	movpl	r2, #1
 80a2e2e:	601a      	strpl	r2, [r3, #0]
 80a2e30:	4b22      	ldr	r3, [pc, #136]	; (80a2ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2e32:	681a      	ldr	r2, [r3, #0]
 80a2e34:	07d1      	lsls	r1, r2, #31
 80a2e36:	bf5c      	itt	pl
 80a2e38:	2201      	movpl	r2, #1
 80a2e3a:	601a      	strpl	r2, [r3, #0]
 80a2e3c:	4b20      	ldr	r3, [pc, #128]	; (80a2ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2e3e:	681a      	ldr	r2, [r3, #0]
 80a2e40:	07d2      	lsls	r2, r2, #31
 80a2e42:	bf5c      	itt	pl
 80a2e44:	2201      	movpl	r2, #1
 80a2e46:	601a      	strpl	r2, [r3, #0]
 80a2e48:	4b1e      	ldr	r3, [pc, #120]	; (80a2ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2e4a:	681a      	ldr	r2, [r3, #0]
 80a2e4c:	07d0      	lsls	r0, r2, #31
 80a2e4e:	bf5c      	itt	pl
 80a2e50:	2201      	movpl	r2, #1
 80a2e52:	601a      	strpl	r2, [r3, #0]
 80a2e54:	4b1c      	ldr	r3, [pc, #112]	; (80a2ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2e56:	681a      	ldr	r2, [r3, #0]
 80a2e58:	07d1      	lsls	r1, r2, #31
 80a2e5a:	bf5c      	itt	pl
 80a2e5c:	2201      	movpl	r2, #1
 80a2e5e:	601a      	strpl	r2, [r3, #0]
 80a2e60:	4b1a      	ldr	r3, [pc, #104]	; (80a2ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2e62:	681a      	ldr	r2, [r3, #0]
 80a2e64:	07d2      	lsls	r2, r2, #31
 80a2e66:	bf5c      	itt	pl
 80a2e68:	2201      	movpl	r2, #1
 80a2e6a:	601a      	strpl	r2, [r3, #0]
 80a2e6c:	4b18      	ldr	r3, [pc, #96]	; (80a2ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2e6e:	681a      	ldr	r2, [r3, #0]
 80a2e70:	07d0      	lsls	r0, r2, #31
 80a2e72:	bf5c      	itt	pl
 80a2e74:	2201      	movpl	r2, #1
 80a2e76:	601a      	strpl	r2, [r3, #0]
 80a2e78:	4b16      	ldr	r3, [pc, #88]	; (80a2ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2e7a:	681a      	ldr	r2, [r3, #0]
 80a2e7c:	07d1      	lsls	r1, r2, #31
 80a2e7e:	bf5c      	itt	pl
 80a2e80:	2201      	movpl	r2, #1
 80a2e82:	601a      	strpl	r2, [r3, #0]
 80a2e84:	4b14      	ldr	r3, [pc, #80]	; (80a2ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2e86:	681a      	ldr	r2, [r3, #0]
 80a2e88:	07d2      	lsls	r2, r2, #31
 80a2e8a:	bf5c      	itt	pl
 80a2e8c:	2201      	movpl	r2, #1
 80a2e8e:	601a      	strpl	r2, [r3, #0]
 80a2e90:	4b12      	ldr	r3, [pc, #72]	; (80a2edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2e92:	681a      	ldr	r2, [r3, #0]
 80a2e94:	07d0      	lsls	r0, r2, #31
 80a2e96:	bf5c      	itt	pl
 80a2e98:	2201      	movpl	r2, #1
 80a2e9a:	601a      	strpl	r2, [r3, #0]
 80a2e9c:	4b10      	ldr	r3, [pc, #64]	; (80a2ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2e9e:	681a      	ldr	r2, [r3, #0]
 80a2ea0:	07d1      	lsls	r1, r2, #31
 80a2ea2:	bf5c      	itt	pl
 80a2ea4:	2201      	movpl	r2, #1
 80a2ea6:	601a      	strpl	r2, [r3, #0]
 80a2ea8:	4b0e      	ldr	r3, [pc, #56]	; (80a2ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2eaa:	681a      	ldr	r2, [r3, #0]
 80a2eac:	07d2      	lsls	r2, r2, #31
 80a2eae:	bf5c      	itt	pl
 80a2eb0:	2201      	movpl	r2, #1
 80a2eb2:	601a      	strpl	r2, [r3, #0]
 80a2eb4:	4770      	bx	lr
 80a2eb6:	bf00      	nop
 80a2eb8:	20000688 	.word	0x20000688
 80a2ebc:	20000684 	.word	0x20000684
 80a2ec0:	20000680 	.word	0x20000680
 80a2ec4:	2000067c 	.word	0x2000067c
 80a2ec8:	20000678 	.word	0x20000678
 80a2ecc:	20000674 	.word	0x20000674
 80a2ed0:	20000670 	.word	0x20000670
 80a2ed4:	2000066c 	.word	0x2000066c
 80a2ed8:	20000668 	.word	0x20000668
 80a2edc:	20000664 	.word	0x20000664
 80a2ee0:	20000660 	.word	0x20000660
 80a2ee4:	2000065c 	.word	0x2000065c

080a2ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2ee8:	4b18      	ldr	r3, [pc, #96]	; (80a2f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2eea:	681a      	ldr	r2, [r3, #0]
 80a2eec:	07d1      	lsls	r1, r2, #31
 80a2eee:	bf5c      	itt	pl
 80a2ef0:	2201      	movpl	r2, #1
 80a2ef2:	601a      	strpl	r2, [r3, #0]
 80a2ef4:	4b16      	ldr	r3, [pc, #88]	; (80a2f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2ef6:	681a      	ldr	r2, [r3, #0]
 80a2ef8:	07d2      	lsls	r2, r2, #31
 80a2efa:	bf5c      	itt	pl
 80a2efc:	2201      	movpl	r2, #1
 80a2efe:	601a      	strpl	r2, [r3, #0]
 80a2f00:	4b14      	ldr	r3, [pc, #80]	; (80a2f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2f02:	681a      	ldr	r2, [r3, #0]
 80a2f04:	07d0      	lsls	r0, r2, #31
 80a2f06:	bf5c      	itt	pl
 80a2f08:	2201      	movpl	r2, #1
 80a2f0a:	601a      	strpl	r2, [r3, #0]
 80a2f0c:	4b12      	ldr	r3, [pc, #72]	; (80a2f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2f0e:	681a      	ldr	r2, [r3, #0]
 80a2f10:	07d1      	lsls	r1, r2, #31
 80a2f12:	bf5c      	itt	pl
 80a2f14:	2201      	movpl	r2, #1
 80a2f16:	601a      	strpl	r2, [r3, #0]
 80a2f18:	4b10      	ldr	r3, [pc, #64]	; (80a2f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2f1a:	681a      	ldr	r2, [r3, #0]
 80a2f1c:	07d2      	lsls	r2, r2, #31
 80a2f1e:	bf5c      	itt	pl
 80a2f20:	2201      	movpl	r2, #1
 80a2f22:	601a      	strpl	r2, [r3, #0]
 80a2f24:	4b0e      	ldr	r3, [pc, #56]	; (80a2f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2f26:	681a      	ldr	r2, [r3, #0]
 80a2f28:	07d0      	lsls	r0, r2, #31
 80a2f2a:	bf5c      	itt	pl
 80a2f2c:	2201      	movpl	r2, #1
 80a2f2e:	601a      	strpl	r2, [r3, #0]
 80a2f30:	4b0c      	ldr	r3, [pc, #48]	; (80a2f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2f32:	681a      	ldr	r2, [r3, #0]
 80a2f34:	07d1      	lsls	r1, r2, #31
 80a2f36:	bf5c      	itt	pl
 80a2f38:	2201      	movpl	r2, #1
 80a2f3a:	601a      	strpl	r2, [r3, #0]
 80a2f3c:	4b0a      	ldr	r3, [pc, #40]	; (80a2f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2f3e:	681a      	ldr	r2, [r3, #0]
 80a2f40:	07d2      	lsls	r2, r2, #31
 80a2f42:	bf5c      	itt	pl
 80a2f44:	2201      	movpl	r2, #1
 80a2f46:	601a      	strpl	r2, [r3, #0]
 80a2f48:	4770      	bx	lr
 80a2f4a:	bf00      	nop
 80a2f4c:	200006a8 	.word	0x200006a8
 80a2f50:	200006a4 	.word	0x200006a4
 80a2f54:	200006a0 	.word	0x200006a0
 80a2f58:	2000069c 	.word	0x2000069c
 80a2f5c:	20000698 	.word	0x20000698
 80a2f60:	20000694 	.word	0x20000694
 80a2f64:	20000690 	.word	0x20000690
 80a2f68:	2000068c 	.word	0x2000068c

080a2f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2f6c:	4b18      	ldr	r3, [pc, #96]	; (80a2fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2f6e:	681a      	ldr	r2, [r3, #0]
 80a2f70:	07d1      	lsls	r1, r2, #31
 80a2f72:	bf5c      	itt	pl
 80a2f74:	2201      	movpl	r2, #1
 80a2f76:	601a      	strpl	r2, [r3, #0]
 80a2f78:	4b16      	ldr	r3, [pc, #88]	; (80a2fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2f7a:	681a      	ldr	r2, [r3, #0]
 80a2f7c:	07d2      	lsls	r2, r2, #31
 80a2f7e:	bf5c      	itt	pl
 80a2f80:	2201      	movpl	r2, #1
 80a2f82:	601a      	strpl	r2, [r3, #0]
 80a2f84:	4b14      	ldr	r3, [pc, #80]	; (80a2fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2f86:	681a      	ldr	r2, [r3, #0]
 80a2f88:	07d0      	lsls	r0, r2, #31
 80a2f8a:	bf5c      	itt	pl
 80a2f8c:	2201      	movpl	r2, #1
 80a2f8e:	601a      	strpl	r2, [r3, #0]
 80a2f90:	4b12      	ldr	r3, [pc, #72]	; (80a2fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2f92:	681a      	ldr	r2, [r3, #0]
 80a2f94:	07d1      	lsls	r1, r2, #31
 80a2f96:	bf5c      	itt	pl
 80a2f98:	2201      	movpl	r2, #1
 80a2f9a:	601a      	strpl	r2, [r3, #0]
 80a2f9c:	4b10      	ldr	r3, [pc, #64]	; (80a2fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2f9e:	681a      	ldr	r2, [r3, #0]
 80a2fa0:	07d2      	lsls	r2, r2, #31
 80a2fa2:	bf5c      	itt	pl
 80a2fa4:	2201      	movpl	r2, #1
 80a2fa6:	601a      	strpl	r2, [r3, #0]
 80a2fa8:	4b0e      	ldr	r3, [pc, #56]	; (80a2fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2faa:	681a      	ldr	r2, [r3, #0]
 80a2fac:	07d0      	lsls	r0, r2, #31
 80a2fae:	bf5c      	itt	pl
 80a2fb0:	2201      	movpl	r2, #1
 80a2fb2:	601a      	strpl	r2, [r3, #0]
 80a2fb4:	4b0c      	ldr	r3, [pc, #48]	; (80a2fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2fb6:	681a      	ldr	r2, [r3, #0]
 80a2fb8:	07d1      	lsls	r1, r2, #31
 80a2fba:	bf5c      	itt	pl
 80a2fbc:	2201      	movpl	r2, #1
 80a2fbe:	601a      	strpl	r2, [r3, #0]
 80a2fc0:	4b0a      	ldr	r3, [pc, #40]	; (80a2fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2fc2:	681a      	ldr	r2, [r3, #0]
 80a2fc4:	07d2      	lsls	r2, r2, #31
 80a2fc6:	bf5c      	itt	pl
 80a2fc8:	2201      	movpl	r2, #1
 80a2fca:	601a      	strpl	r2, [r3, #0]
 80a2fcc:	4770      	bx	lr
 80a2fce:	bf00      	nop
 80a2fd0:	200006c8 	.word	0x200006c8
 80a2fd4:	200006c4 	.word	0x200006c4
 80a2fd8:	200006c0 	.word	0x200006c0
 80a2fdc:	200006bc 	.word	0x200006bc
 80a2fe0:	200006b8 	.word	0x200006b8
 80a2fe4:	200006b4 	.word	0x200006b4
 80a2fe8:	200006b0 	.word	0x200006b0
 80a2fec:	200006ac 	.word	0x200006ac

080a2ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2ff0:	4b24      	ldr	r3, [pc, #144]	; (80a3084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2ff2:	681a      	ldr	r2, [r3, #0]
 80a2ff4:	07d0      	lsls	r0, r2, #31
 80a2ff6:	bf5c      	itt	pl
 80a2ff8:	2201      	movpl	r2, #1
 80a2ffa:	601a      	strpl	r2, [r3, #0]
 80a2ffc:	4b22      	ldr	r3, [pc, #136]	; (80a3088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2ffe:	681a      	ldr	r2, [r3, #0]
 80a3000:	07d1      	lsls	r1, r2, #31
 80a3002:	bf5c      	itt	pl
 80a3004:	2201      	movpl	r2, #1
 80a3006:	601a      	strpl	r2, [r3, #0]
 80a3008:	4b20      	ldr	r3, [pc, #128]	; (80a308c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a300a:	681a      	ldr	r2, [r3, #0]
 80a300c:	07d2      	lsls	r2, r2, #31
 80a300e:	bf5c      	itt	pl
 80a3010:	2201      	movpl	r2, #1
 80a3012:	601a      	strpl	r2, [r3, #0]
 80a3014:	4b1e      	ldr	r3, [pc, #120]	; (80a3090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a3016:	681a      	ldr	r2, [r3, #0]
 80a3018:	07d0      	lsls	r0, r2, #31
 80a301a:	bf5c      	itt	pl
 80a301c:	2201      	movpl	r2, #1
 80a301e:	601a      	strpl	r2, [r3, #0]
 80a3020:	4b1c      	ldr	r3, [pc, #112]	; (80a3094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a3022:	681a      	ldr	r2, [r3, #0]
 80a3024:	07d1      	lsls	r1, r2, #31
 80a3026:	bf5c      	itt	pl
 80a3028:	2201      	movpl	r2, #1
 80a302a:	601a      	strpl	r2, [r3, #0]
 80a302c:	4b1a      	ldr	r3, [pc, #104]	; (80a3098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a302e:	681a      	ldr	r2, [r3, #0]
 80a3030:	07d2      	lsls	r2, r2, #31
 80a3032:	bf5c      	itt	pl
 80a3034:	2201      	movpl	r2, #1
 80a3036:	601a      	strpl	r2, [r3, #0]
 80a3038:	4b18      	ldr	r3, [pc, #96]	; (80a309c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a303a:	681a      	ldr	r2, [r3, #0]
 80a303c:	07d0      	lsls	r0, r2, #31
 80a303e:	bf5c      	itt	pl
 80a3040:	2201      	movpl	r2, #1
 80a3042:	601a      	strpl	r2, [r3, #0]
 80a3044:	4b16      	ldr	r3, [pc, #88]	; (80a30a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a3046:	681a      	ldr	r2, [r3, #0]
 80a3048:	07d1      	lsls	r1, r2, #31
 80a304a:	bf5c      	itt	pl
 80a304c:	2201      	movpl	r2, #1
 80a304e:	601a      	strpl	r2, [r3, #0]
 80a3050:	4b14      	ldr	r3, [pc, #80]	; (80a30a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a3052:	681a      	ldr	r2, [r3, #0]
 80a3054:	07d2      	lsls	r2, r2, #31
 80a3056:	bf5c      	itt	pl
 80a3058:	2201      	movpl	r2, #1
 80a305a:	601a      	strpl	r2, [r3, #0]
 80a305c:	4b12      	ldr	r3, [pc, #72]	; (80a30a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a305e:	681a      	ldr	r2, [r3, #0]
 80a3060:	07d0      	lsls	r0, r2, #31
 80a3062:	bf5c      	itt	pl
 80a3064:	2201      	movpl	r2, #1
 80a3066:	601a      	strpl	r2, [r3, #0]
 80a3068:	4b10      	ldr	r3, [pc, #64]	; (80a30ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a306a:	681a      	ldr	r2, [r3, #0]
 80a306c:	07d1      	lsls	r1, r2, #31
 80a306e:	bf5c      	itt	pl
 80a3070:	2201      	movpl	r2, #1
 80a3072:	601a      	strpl	r2, [r3, #0]
 80a3074:	4b0e      	ldr	r3, [pc, #56]	; (80a30b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a3076:	681a      	ldr	r2, [r3, #0]
 80a3078:	07d2      	lsls	r2, r2, #31
 80a307a:	bf5c      	itt	pl
 80a307c:	2201      	movpl	r2, #1
 80a307e:	601a      	strpl	r2, [r3, #0]
 80a3080:	4770      	bx	lr
 80a3082:	bf00      	nop
 80a3084:	200006f8 	.word	0x200006f8
 80a3088:	200006f4 	.word	0x200006f4
 80a308c:	200006f0 	.word	0x200006f0
 80a3090:	200006ec 	.word	0x200006ec
 80a3094:	200006e8 	.word	0x200006e8
 80a3098:	200006e4 	.word	0x200006e4
 80a309c:	200006e0 	.word	0x200006e0
 80a30a0:	200006dc 	.word	0x200006dc
 80a30a4:	200006d8 	.word	0x200006d8
 80a30a8:	200006d4 	.word	0x200006d4
 80a30ac:	200006d0 	.word	0x200006d0
 80a30b0:	200006cc 	.word	0x200006cc

080a30b4 <__cxa_atexit>:
 80a30b4:	b510      	push	{r4, lr}
 80a30b6:	4c05      	ldr	r4, [pc, #20]	; (80a30cc <__cxa_atexit+0x18>)
 80a30b8:	4613      	mov	r3, r2
 80a30ba:	b12c      	cbz	r4, 80a30c8 <__cxa_atexit+0x14>
 80a30bc:	460a      	mov	r2, r1
 80a30be:	4601      	mov	r1, r0
 80a30c0:	2002      	movs	r0, #2
 80a30c2:	f3af 8000 	nop.w
 80a30c6:	bd10      	pop	{r4, pc}
 80a30c8:	4620      	mov	r0, r4
 80a30ca:	bd10      	pop	{r4, pc}
 80a30cc:	00000000 	.word	0x00000000

080a30d0 <memcpy>:
 80a30d0:	b510      	push	{r4, lr}
 80a30d2:	1e43      	subs	r3, r0, #1
 80a30d4:	440a      	add	r2, r1
 80a30d6:	4291      	cmp	r1, r2
 80a30d8:	d004      	beq.n	80a30e4 <memcpy+0x14>
 80a30da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a30de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a30e2:	e7f8      	b.n	80a30d6 <memcpy+0x6>
 80a30e4:	bd10      	pop	{r4, pc}

080a30e6 <memset>:
 80a30e6:	4603      	mov	r3, r0
 80a30e8:	4402      	add	r2, r0
 80a30ea:	4293      	cmp	r3, r2
 80a30ec:	d002      	beq.n	80a30f4 <memset+0xe>
 80a30ee:	f803 1b01 	strb.w	r1, [r3], #1
 80a30f2:	e7fa      	b.n	80a30ea <memset+0x4>
 80a30f4:	4770      	bx	lr
	...

080a30f8 <srand>:
 80a30f8:	b538      	push	{r3, r4, r5, lr}
 80a30fa:	4b12      	ldr	r3, [pc, #72]	; (80a3144 <srand+0x4c>)
 80a30fc:	4605      	mov	r5, r0
 80a30fe:	681c      	ldr	r4, [r3, #0]
 80a3100:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3102:	b9d3      	cbnz	r3, 80a313a <srand+0x42>
 80a3104:	2018      	movs	r0, #24
 80a3106:	f7ff f98b 	bl	80a2420 <malloc>
 80a310a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a310e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a3110:	8003      	strh	r3, [r0, #0]
 80a3112:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a3116:	8043      	strh	r3, [r0, #2]
 80a3118:	f241 2334 	movw	r3, #4660	; 0x1234
 80a311c:	8083      	strh	r3, [r0, #4]
 80a311e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a3122:	80c3      	strh	r3, [r0, #6]
 80a3124:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a3128:	8103      	strh	r3, [r0, #8]
 80a312a:	2305      	movs	r3, #5
 80a312c:	8143      	strh	r3, [r0, #10]
 80a312e:	230b      	movs	r3, #11
 80a3130:	8183      	strh	r3, [r0, #12]
 80a3132:	2201      	movs	r2, #1
 80a3134:	2300      	movs	r3, #0
 80a3136:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a313a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a313c:	2200      	movs	r2, #0
 80a313e:	611d      	str	r5, [r3, #16]
 80a3140:	615a      	str	r2, [r3, #20]
 80a3142:	bd38      	pop	{r3, r4, r5, pc}
 80a3144:	200004dc 	.word	0x200004dc

080a3148 <strlen>:
 80a3148:	4603      	mov	r3, r0
 80a314a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a314e:	2a00      	cmp	r2, #0
 80a3150:	d1fb      	bne.n	80a314a <strlen+0x2>
 80a3152:	1a18      	subs	r0, r3, r0
 80a3154:	3801      	subs	r0, #1
 80a3156:	4770      	bx	lr

080a3158 <dynalib_user>:
 80a3158:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a3168:	0000 0000 504d 3152 3132 6e20 746f 6620     ....MPR121 not f
 80a3178:	756f 646e 202c 6863 6365 206b 6977 6972     ound, check wiri
 80a3188:	676e 003f 504d 3152 3132 6620 756f 646e     ng?.MPR121 found
 80a3198:	0021 7420 756f 6863 6465 2000 6572 656c     !. touched. rele
 80a31a8:	7361 6465 0000 0000                         ased....

080a31b0 <_ZTV12Adafruit_GFX>:
	...
 80a31c0:	091d 080a 26c5 080a 00a5 080a 0617 080a     .....&..........
 80a31d0:	0737 080a 0753 080a 06d7 080a 076d 080a     7...S.......m...
 80a31e0:	07a5 080a 07c1 080a                         ........

080a31e8 <_ZL4font>:
 80a31e8:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 80a31f8:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 80a3208:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 80a3218:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 80a3228:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 80a3238:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 80a3248:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 80a3258:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 80a3268:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 80a3278:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 80a3288:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 80a3298:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 80a32a8:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 80a32b8:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 80a32c8:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 80a32d8:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 80a32e8:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 80a32f8:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 80a3308:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 80a3318:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 80a3328:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 80a3338:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 80a3348:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 80a3358:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 80a3368:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 80a3378:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 80a3388:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 80a3398:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 80a33a8:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 80a33b8:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 80a33c8:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 80a33d8:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 80a33e8:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 80a33f8:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 80a3408:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 80a3418:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 80a3428:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 80a3438:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 80a3448:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 80a3458:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 80a3468:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 80a3478:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
 80a3488:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 80a3498:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 80a34a8:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
 80a34b8:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 80a34c8:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
 80a34d8:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
 80a34e8:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
 80a34f8:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 80a3508:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 80a3518:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 80a3528:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 80a3538:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 80a3548:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 80a3558:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
 80a3568:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
 80a3578:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
 80a3588:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
 80a3598:	141f 1414 001f 1010 f010 0000 0000 101f     ................
 80a35a8:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
 80a35b8:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
 80a35c8:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
 80a35d8:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
 80a35e8:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
 80a35f8:	1414 f414 1014 f010 f010 0000 101f 001f     ................
 80a3608:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
 80a3618:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
 80a3628:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
 80a3638:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
 80a3648:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
 80a3658:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
 80a3668:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
 80a3678:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
 80a3688:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
 80a3698:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
 80a36a8:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
 80a36b8:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
 80a36c8:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
 80a36d8:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

080a36e4 <_ZTV16Adafruit_SSD1306>:
	...
 80a36ec:	00c9 080a 03fd 080a 091d 080a 26c5 080a     .............&..
 80a36fc:	0c89 080a 0617 080a 0b11 080a 099d 080a     ................
 80a370c:	06d7 080a 076d 080a 07a5 080a 07c1 080a     ....m...........

080a371c <CSWTCH.215>:
 80a371c:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a372c:	0050 0000                                   P...

080a3730 <_ZTV7TwoWire>:
	...
 80a3738:	2459 080a 24a3 080a 247b 080a 245b 080a     Y$...$..{$..[$..
 80a3748:	2483 080a 248b 080a 2493 080a 249b 080a     .$...$...$...$..

080a3758 <_ZTV9IPAddress>:
	...
 80a3760:	2531 080a 2521 080a 2523 080a 6162 6475     1%..!%..#%..baud
 80a3770:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a3780:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a3790:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a37a0:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a37b0:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a37c0:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a37d0:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a37e0:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a37f0:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a3800:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a3810:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a3820:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a3830:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a3840:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a3850 <_ZTVN5spark12NetworkClassE>:
	...
 80a3858:	25f9 080a 2603 080a 260d 080a 2617 080a     .%...&...&...&..
 80a3868:	2621 080a 262d 080a 2639 080a 2645 080a     !&..-&..9&..E&..
 80a3878:	264d 080a 2657 080a 2661 080a               M&..W&..a&..

080a3884 <_ZTV8SPIClass>:
	...
 80a388c:	27c5 080a 27c7 080a 005a 2b25 3330 3a64     .'...'..Z.%+03d:
 80a389c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a38ac:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a38bc:	0000 0000                                   ....

080a38c0 <_ZTV11USARTSerial>:
	...
 80a38c8:	2831 080a 2881 080a 288f 080a 26c5 080a     1(...(...(...&..
 80a38d8:	2845 080a 2867 080a 2853 080a 287b 080a     E(..g(..S(..{(..
 80a38e8:	2833 080a 2837 080a                         3(..7(..

080a38f0 <_ZTV9USBSerial>:
	...
 80a38f8:	296d 080a 29bd 080a 29cb 080a 26c5 080a     m)...)...)...&..
 80a3908:	29a9 080a 296f 080a 2985 080a 29b7 080a     .)..o)...)...)..
 80a3918:	299b 080a 2969 080a                         .)..i)..

080a3920 <_ZTVN5spark9WiFiClassE>:
	...
 80a3928:	2b6f 080a 2b65 080a 2b5b 080a 2acd 080a     o+..e+..[+...*..
 80a3938:	2b4f 080a 2b43 080a 2b37 080a 2b2f 080a     O+..C+..7+../+..
 80a3948:	2b25 080a 2b1b 080a 2ad7 080a               %+...+...*..

080a3954 <__sf_fake_stdin>:
	...

080a3974 <__sf_fake_stdout>:
	...

080a3994 <__sf_fake_stderr>:
	...
 80a39b4:	0043                                        C.

080a39b6 <link_const_variable_data_end>:
	...

080a39b8 <link_constructors_location>:
 80a39b8:	080a040d 	.word	0x080a040d
 80a39bc:	080a0613 	.word	0x080a0613
 80a39c0:	080a0997 	.word	0x080a0997
 80a39c4:	080a0d59 	.word	0x080a0d59
 80a39c8:	080a0d5d 	.word	0x080a0d5d
 80a39cc:	080a0d61 	.word	0x080a0d61
 80a39d0:	080a0d65 	.word	0x080a0d65
 80a39d4:	080a20a1 	.word	0x080a20a1
 80a39d8:	080a25e9 	.word	0x080a25e9
 80a39dc:	080a26b1 	.word	0x080a26b1
 80a39e0:	080a27a9 	.word	0x080a27a9
 80a39e4:	080a2805 	.word	0x080a2805
 80a39e8:	080a281d 	.word	0x080a281d
 80a39ec:	080a2b79 	.word	0x080a2b79
 80a39f0:	080a2da1 	.word	0x080a2da1
 80a39f4:	080a2dd1 	.word	0x080a2dd1
 80a39f8:	080a2e25 	.word	0x080a2e25
 80a39fc:	080a2ee9 	.word	0x080a2ee9
 80a3a00:	080a2f6d 	.word	0x080a2f6d
 80a3a04:	080a2ff1 	.word	0x080a2ff1

080a3a08 <link_constructors_end>:
	...
